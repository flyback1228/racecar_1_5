
racecar_pcb_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012630  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  080128d0  080128d0  000228d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012e2c  08012e2c  00022e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012e34  08012e34  00022e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012e38  08012e38  00022e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  24000000  08012e3c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000007d4  240001dc  08013018  000301dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240009b0  08013018  000309b0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0003020a  2**0
                  CONTENTS, READONLY
 11 .debug_info   00022507  00000000  00000000  0003024d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003672  00000000  00000000  00052754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001920  00000000  00000000  00055dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000013be  00000000  00000000  000576e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003e197  00000000  00000000  00058aa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00020f85  00000000  00000000  00096c3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017f128  00000000  00000000  000b7bc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007c30  00000000  00000000  00236cec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  0023e91c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001dc 	.word	0x240001dc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080128b8 	.word	0x080128b8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e0 	.word	0x240001e0
 80002dc:	080128b8 	.word	0x080128b8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000690:	f002 faa0 	bl	8002bd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000694:	f000 f822 	bl	80006dc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000698:	f000 f89e 	bl	80007d8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069c:	f000 fdbc 	bl	8001218 <MX_GPIO_Init>
  MX_DMA_Init();
 80006a0:	f000 fd8a 	bl	80011b8 <MX_DMA_Init>
  MX_UART5_Init();
 80006a4:	f000 fa70 	bl	8000b88 <MX_UART5_Init>
  MX_LPUART1_UART_Init();
 80006a8:	f000 fa22 	bl	8000af0 <MX_LPUART1_UART_Init>
  MX_UART7_Init();
 80006ac:	f000 fab8 	bl	8000c20 <MX_UART7_Init>
  MX_I2C1_Init();
 80006b0:	f000 f99e 	bl	80009f0 <MX_I2C1_Init>
  MX_I2C2_Init();
 80006b4:	f000 f9dc 	bl	8000a70 <MX_I2C2_Init>
  MX_TIM2_Init();
 80006b8:	f000 fafe 	bl	8000cb8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80006bc:	f000 fb94 	bl	8000de8 <MX_TIM3_Init>
  MX_TIM5_Init();
 80006c0:	f000 fc14 	bl	8000eec <MX_TIM5_Init>
  MX_TIM15_Init();
 80006c4:	f000 fcb0 	bl	8001028 <MX_TIM15_Init>
  MX_TIM16_Init();
 80006c8:	f000 fd50 	bl	800116c <MX_TIM16_Init>
  MX_ADC1_Init();
 80006cc:	f000 f8a2 	bl	8000814 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  setup();
 80006d0:	f001 fb36 	bl	8001d40 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 80006d4:	f001 fbf4 	bl	8001ec0 <loop>
  {
 80006d8:	e7fc      	b.n	80006d4 <main+0x48>
	...

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b09c      	sub	sp, #112	; 0x70
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e6:	224c      	movs	r2, #76	; 0x4c
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f010 f86f 	bl	80107ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2220      	movs	r2, #32
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f010 f869 	bl	80107ce <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006fc:	2002      	movs	r0, #2
 80006fe:	f007 fc71 	bl	8007fe4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000702:	2300      	movs	r3, #0
 8000704:	603b      	str	r3, [r7, #0]
 8000706:	4b32      	ldr	r3, [pc, #200]	; (80007d0 <SystemClock_Config+0xf4>)
 8000708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800070a:	4a31      	ldr	r2, [pc, #196]	; (80007d0 <SystemClock_Config+0xf4>)
 800070c:	f023 0301 	bic.w	r3, r3, #1
 8000710:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000712:	4b2f      	ldr	r3, [pc, #188]	; (80007d0 <SystemClock_Config+0xf4>)
 8000714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	4b2d      	ldr	r3, [pc, #180]	; (80007d4 <SystemClock_Config+0xf8>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	4a2c      	ldr	r2, [pc, #176]	; (80007d4 <SystemClock_Config+0xf8>)
 8000722:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000726:	6193      	str	r3, [r2, #24]
 8000728:	4b2a      	ldr	r3, [pc, #168]	; (80007d4 <SystemClock_Config+0xf8>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000734:	bf00      	nop
 8000736:	4b27      	ldr	r3, [pc, #156]	; (80007d4 <SystemClock_Config+0xf8>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800073e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000742:	d1f8      	bne.n	8000736 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000744:	2303      	movs	r3, #3
 8000746:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000748:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800074c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800074e:	2301      	movs	r3, #1
 8000750:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000752:	2340      	movs	r3, #64	; 0x40
 8000754:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000756:	2302      	movs	r3, #2
 8000758:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075a:	2302      	movs	r3, #2
 800075c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800075e:	2305      	movs	r3, #5
 8000760:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000762:	23a0      	movs	r3, #160	; 0xa0
 8000764:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000766:	2302      	movs	r3, #2
 8000768:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800076a:	2302      	movs	r3, #2
 800076c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 8;
 800076e:	2308      	movs	r3, #8
 8000770:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000772:	2308      	movs	r3, #8
 8000774:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000776:	2300      	movs	r3, #0
 8000778:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000782:	4618      	mov	r0, r3
 8000784:	f007 fc68 	bl	8008058 <HAL_RCC_OscConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800078e:	f000 fdff 	bl	8001390 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000792:	233f      	movs	r3, #63	; 0x3f
 8000794:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000796:	2303      	movs	r3, #3
 8000798:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 800079e:	2309      	movs	r3, #9
 80007a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2101      	movs	r1, #1
 80007b6:	4618      	mov	r0, r3
 80007b8:	f008 f8a8 	bl	800890c <HAL_RCC_ClockConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80007c2:	f000 fde5 	bl	8001390 <Error_Handler>
  }
}
 80007c6:	bf00      	nop
 80007c8:	3770      	adds	r7, #112	; 0x70
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	58000400 	.word	0x58000400
 80007d4:	58024800 	.word	0x58024800

080007d8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b0b0      	sub	sp, #192	; 0xc0
 80007dc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007de:	463b      	mov	r3, r7
 80007e0:	22c0      	movs	r2, #192	; 0xc0
 80007e2:	2100      	movs	r1, #0
 80007e4:	4618      	mov	r0, r3
 80007e6:	f00f fff2 	bl	80107ce <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 80007ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80007ee:	f04f 0300 	mov.w	r3, #0
 80007f2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 80007f6:	2300      	movs	r3, #0
 80007f8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007fa:	463b      	mov	r3, r7
 80007fc:	4618      	mov	r0, r3
 80007fe:	f008 fc11 	bl	8009024 <HAL_RCCEx_PeriphCLKConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 8000808:	f000 fdc2 	bl	8001390 <Error_Handler>
  }
}
 800080c:	bf00      	nop
 800080e:	37c0      	adds	r7, #192	; 0xc0
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	; 0x28
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000826:	463b      	mov	r3, r7
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
 8000834:	615a      	str	r2, [r3, #20]
 8000836:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000838:	4b63      	ldr	r3, [pc, #396]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 800083a:	4a64      	ldr	r2, [pc, #400]	; (80009cc <MX_ADC1_Init+0x1b8>)
 800083c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 800083e:	4b62      	ldr	r3, [pc, #392]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000840:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000844:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000846:	4b60      	ldr	r3, [pc, #384]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b5e      	ldr	r3, [pc, #376]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b5d      	ldr	r3, [pc, #372]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b5b      	ldr	r3, [pc, #364]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800085e:	4b5a      	ldr	r3, [pc, #360]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 8;
 8000864:	4b58      	ldr	r3, [pc, #352]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000866:	2208      	movs	r2, #8
 8000868:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b57      	ldr	r3, [pc, #348]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b55      	ldr	r3, [pc, #340]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b54      	ldr	r3, [pc, #336]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b52      	ldr	r3, [pc, #328]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000882:	4b51      	ldr	r3, [pc, #324]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000884:	2200      	movs	r2, #0
 8000886:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000888:	4b4f      	ldr	r3, [pc, #316]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 800088a:	2200      	movs	r2, #0
 800088c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800088e:	4b4e      	ldr	r3, [pc, #312]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000890:	2200      	movs	r2, #0
 8000892:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000896:	484c      	ldr	r0, [pc, #304]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000898:	f002 fc66 	bl	8003168 <HAL_ADC_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80008a2:	f000 fd75 	bl	8001390 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4845      	ldr	r0, [pc, #276]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 80008b2:	f003 fef3 	bl	800469c <HAL_ADCEx_MultiModeConfigChannel>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80008bc:	f000 fd68 	bl	8001390 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008c0:	4b43      	ldr	r3, [pc, #268]	; (80009d0 <MX_ADC1_Init+0x1bc>)
 80008c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008c4:	2306      	movs	r3, #6
 80008c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 80008c8:	2304      	movs	r3, #4
 80008ca:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008cc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008d0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008d2:	2304      	movs	r3, #4
 80008d4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008de:	463b      	mov	r3, r7
 80008e0:	4619      	mov	r1, r3
 80008e2:	4839      	ldr	r0, [pc, #228]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 80008e4:	f003 f908 	bl	8003af8 <HAL_ADC_ConfigChannel>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80008ee:	f000 fd4f 	bl	8001390 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80008f2:	4b38      	ldr	r3, [pc, #224]	; (80009d4 <MX_ADC1_Init+0x1c0>)
 80008f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008f6:	230c      	movs	r3, #12
 80008f8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008fa:	463b      	mov	r3, r7
 80008fc:	4619      	mov	r1, r3
 80008fe:	4832      	ldr	r0, [pc, #200]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000900:	f003 f8fa 	bl	8003af8 <HAL_ADC_ConfigChannel>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800090a:	f000 fd41 	bl	8001390 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800090e:	4b32      	ldr	r3, [pc, #200]	; (80009d8 <MX_ADC1_Init+0x1c4>)
 8000910:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000912:	2312      	movs	r3, #18
 8000914:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000916:	463b      	mov	r3, r7
 8000918:	4619      	mov	r1, r3
 800091a:	482b      	ldr	r0, [pc, #172]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 800091c:	f003 f8ec 	bl	8003af8 <HAL_ADC_ConfigChannel>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000926:	f000 fd33 	bl	8001390 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800092a:	4b2c      	ldr	r3, [pc, #176]	; (80009dc <MX_ADC1_Init+0x1c8>)
 800092c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800092e:	2318      	movs	r3, #24
 8000930:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000932:	463b      	mov	r3, r7
 8000934:	4619      	mov	r1, r3
 8000936:	4824      	ldr	r0, [pc, #144]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000938:	f003 f8de 	bl	8003af8 <HAL_ADC_ConfigChannel>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000942:	f000 fd25 	bl	8001390 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000946:	4b26      	ldr	r3, [pc, #152]	; (80009e0 <MX_ADC1_Init+0x1cc>)
 8000948:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800094a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800094e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000950:	463b      	mov	r3, r7
 8000952:	4619      	mov	r1, r3
 8000954:	481c      	ldr	r0, [pc, #112]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000956:	f003 f8cf 	bl	8003af8 <HAL_ADC_ConfigChannel>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 8000960:	f000 fd16 	bl	8001390 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000964:	4b1f      	ldr	r3, [pc, #124]	; (80009e4 <MX_ADC1_Init+0x1d0>)
 8000966:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000968:	f44f 7383 	mov.w	r3, #262	; 0x106
 800096c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800096e:	463b      	mov	r3, r7
 8000970:	4619      	mov	r1, r3
 8000972:	4815      	ldr	r0, [pc, #84]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000974:	f003 f8c0 	bl	8003af8 <HAL_ADC_ConfigChannel>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 800097e:	f000 fd07 	bl	8001390 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000982:	4b19      	ldr	r3, [pc, #100]	; (80009e8 <MX_ADC1_Init+0x1d4>)
 8000984:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000986:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800098a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800098c:	463b      	mov	r3, r7
 800098e:	4619      	mov	r1, r3
 8000990:	480d      	ldr	r0, [pc, #52]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 8000992:	f003 f8b1 	bl	8003af8 <HAL_ADC_ConfigChannel>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 800099c:	f000 fcf8 	bl	8001390 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <MX_ADC1_Init+0x1d8>)
 80009a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80009a4:	f44f 7389 	mov.w	r3, #274	; 0x112
 80009a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009aa:	463b      	mov	r3, r7
 80009ac:	4619      	mov	r1, r3
 80009ae:	4806      	ldr	r0, [pc, #24]	; (80009c8 <MX_ADC1_Init+0x1b4>)
 80009b0:	f003 f8a2 	bl	8003af8 <HAL_ADC_ConfigChannel>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_ADC1_Init+0x1aa>
  {
    Error_Handler();
 80009ba:	f000 fce9 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	3728      	adds	r7, #40	; 0x28
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	240001f8 	.word	0x240001f8
 80009cc:	40022000 	.word	0x40022000
 80009d0:	0c900008 	.word	0x0c900008
 80009d4:	10c00010 	.word	0x10c00010
 80009d8:	14f00020 	.word	0x14f00020
 80009dc:	21800100 	.word	0x21800100
 80009e0:	25b00200 	.word	0x25b00200
 80009e4:	2a000400 	.word	0x2a000400
 80009e8:	2e300800 	.word	0x2e300800
 80009ec:	4b840000 	.word	0x4b840000

080009f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009f4:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <MX_I2C1_Init+0x74>)
 80009f6:	4a1c      	ldr	r2, [pc, #112]	; (8000a68 <MX_I2C1_Init+0x78>)
 80009f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0ECFF;
 80009fa:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <MX_I2C1_Init+0x74>)
 80009fc:	4a1b      	ldr	r2, [pc, #108]	; (8000a6c <MX_I2C1_Init+0x7c>)
 80009fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a00:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a06:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a0c:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a2a:	480e      	ldr	r0, [pc, #56]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a2c:	f007 f85c 	bl	8007ae8 <HAL_I2C_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a36:	f000 fcab 	bl	8001390 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4809      	ldr	r0, [pc, #36]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a3e:	f007 fa3a 	bl	8007eb6 <HAL_I2CEx_ConfigAnalogFilter>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a48:	f000 fca2 	bl	8001390 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a50:	f007 fa7c 	bl	8007f4c <HAL_I2CEx_ConfigDigitalFilter>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a5a:	f000 fc99 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	240002d4 	.word	0x240002d4
 8000a68:	40005400 	.word	0x40005400
 8000a6c:	10c0ecff 	.word	0x10c0ecff

08000a70 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a74:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000a76:	4a1c      	ldr	r2, [pc, #112]	; (8000ae8 <MX_I2C2_Init+0x78>)
 8000a78:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10C0ECFF;
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000a7c:	4a1b      	ldr	r2, [pc, #108]	; (8000aec <MX_I2C2_Init+0x7c>)
 8000a7e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a80:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a86:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a8c:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a92:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000aaa:	480e      	ldr	r0, [pc, #56]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000aac:	f007 f81c 	bl	8007ae8 <HAL_I2C_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ab6:	f000 fc6b 	bl	8001390 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aba:	2100      	movs	r1, #0
 8000abc:	4809      	ldr	r0, [pc, #36]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000abe:	f007 f9fa 	bl	8007eb6 <HAL_I2CEx_ConfigAnalogFilter>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ac8:	f000 fc62 	bl	8001390 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000acc:	2100      	movs	r1, #0
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_I2C2_Init+0x74>)
 8000ad0:	f007 fa3c 	bl	8007f4c <HAL_I2CEx_ConfigDigitalFilter>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ada:	f000 fc59 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	24000328 	.word	0x24000328
 8000ae8:	40005800 	.word	0x40005800
 8000aec:	10c0ecff 	.word	0x10c0ecff

08000af0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000af4:	4b22      	ldr	r3, [pc, #136]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000af6:	4a23      	ldr	r2, [pc, #140]	; (8000b84 <MX_LPUART1_UART_Init+0x94>)
 8000af8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000afa:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000afc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b00:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b02:	4b1f      	ldr	r3, [pc, #124]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b08:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b14:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b16:	220c      	movs	r2, #12
 8000b18:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1a:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b20:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b26:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b2c:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000b32:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000b38:	4811      	ldr	r0, [pc, #68]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b3a:	f00d f925 	bl	800dd88 <HAL_UART_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b44:	f000 fc24 	bl	8001390 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b48:	2100      	movs	r1, #0
 8000b4a:	480d      	ldr	r0, [pc, #52]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b4c:	f00f f815 	bl	800fb7a <HAL_UARTEx_SetTxFifoThreshold>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b56:	f000 fc1b 	bl	8001390 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4808      	ldr	r0, [pc, #32]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b5e:	f00f f84a 	bl	800fbf6 <HAL_UARTEx_SetRxFifoThreshold>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b68:	f000 fc12 	bl	8001390 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000b6c:	4804      	ldr	r0, [pc, #16]	; (8000b80 <MX_LPUART1_UART_Init+0x90>)
 8000b6e:	f00e ffcb 	bl	800fb08 <HAL_UARTEx_DisableFifoMode>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b78:	f000 fc0a 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	2400037c 	.word	0x2400037c
 8000b84:	58000c00 	.word	0x58000c00

08000b88 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000b8c:	4b22      	ldr	r3, [pc, #136]	; (8000c18 <MX_UART5_Init+0x90>)
 8000b8e:	4a23      	ldr	r2, [pc, #140]	; (8000c1c <MX_UART5_Init+0x94>)
 8000b90:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000b92:	4b21      	ldr	r3, [pc, #132]	; (8000c18 <MX_UART5_Init+0x90>)
 8000b94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b98:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9a:	4b1f      	ldr	r3, [pc, #124]	; (8000c18 <MX_UART5_Init+0x90>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000ba0:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <MX_UART5_Init+0x90>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <MX_UART5_Init+0x90>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000bac:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <MX_UART5_Init+0x90>)
 8000bae:	220c      	movs	r2, #12
 8000bb0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb2:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <MX_UART5_Init+0x90>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb8:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <MX_UART5_Init+0x90>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bbe:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <MX_UART5_Init+0x90>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bc4:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <MX_UART5_Init+0x90>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bca:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <MX_UART5_Init+0x90>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000bd0:	4811      	ldr	r0, [pc, #68]	; (8000c18 <MX_UART5_Init+0x90>)
 8000bd2:	f00d f8d9 	bl	800dd88 <HAL_UART_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000bdc:	f000 fbd8 	bl	8001390 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000be0:	2100      	movs	r1, #0
 8000be2:	480d      	ldr	r0, [pc, #52]	; (8000c18 <MX_UART5_Init+0x90>)
 8000be4:	f00e ffc9 	bl	800fb7a <HAL_UARTEx_SetTxFifoThreshold>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000bee:	f000 fbcf 	bl	8001390 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4808      	ldr	r0, [pc, #32]	; (8000c18 <MX_UART5_Init+0x90>)
 8000bf6:	f00e fffe 	bl	800fbf6 <HAL_UARTEx_SetRxFifoThreshold>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000c00:	f000 fbc6 	bl	8001390 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000c04:	4804      	ldr	r0, [pc, #16]	; (8000c18 <MX_UART5_Init+0x90>)
 8000c06:	f00e ff7f 	bl	800fb08 <HAL_UARTEx_DisableFifoMode>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000c10:	f000 fbbe 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	24000410 	.word	0x24000410
 8000c1c:	40005000 	.word	0x40005000

08000c20 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000c24:	4b22      	ldr	r3, [pc, #136]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c26:	4a23      	ldr	r2, [pc, #140]	; (8000cb4 <MX_UART7_Init+0x94>)
 8000c28:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000c2a:	4b21      	ldr	r3, [pc, #132]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c30:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000c32:	4b1f      	ldr	r3, [pc, #124]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000c38:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000c3e:	4b1c      	ldr	r3, [pc, #112]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000c44:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c46:	220c      	movs	r2, #12
 8000c48:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4a:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c50:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c56:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c5c:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c62:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000c68:	4811      	ldr	r0, [pc, #68]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c6a:	f00d f88d 	bl	800dd88 <HAL_UART_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8000c74:	f000 fb8c 	bl	8001390 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c78:	2100      	movs	r1, #0
 8000c7a:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c7c:	f00e ff7d 	bl	800fb7a <HAL_UARTEx_SetTxFifoThreshold>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8000c86:	f000 fb83 	bl	8001390 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4808      	ldr	r0, [pc, #32]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c8e:	f00e ffb2 	bl	800fbf6 <HAL_UARTEx_SetRxFifoThreshold>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000c98:	f000 fb7a 	bl	8001390 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000c9c:	4804      	ldr	r0, [pc, #16]	; (8000cb0 <MX_UART7_Init+0x90>)
 8000c9e:	f00e ff33 	bl	800fb08 <HAL_UARTEx_DisableFifoMode>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000ca8:	f000 fb72 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	240004a4 	.word	0x240004a4
 8000cb4:	40007800 	.word	0x40007800

08000cb8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08e      	sub	sp, #56	; 0x38
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cd8:	463b      	mov	r3, r7
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
 8000ce4:	611a      	str	r2, [r3, #16]
 8000ce6:	615a      	str	r2, [r3, #20]
 8000ce8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cea:	4b3e      	ldr	r3, [pc, #248]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000cec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cf0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8000cf2:	4b3c      	ldr	r3, [pc, #240]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000cf4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cf8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfa:	4b3a      	ldr	r3, [pc, #232]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000d00:	4b38      	ldr	r3, [pc, #224]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000d02:	2263      	movs	r2, #99	; 0x63
 8000d04:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d06:	4b37      	ldr	r3, [pc, #220]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d0c:	4b35      	ldr	r3, [pc, #212]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000d0e:	2280      	movs	r2, #128	; 0x80
 8000d10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d12:	4834      	ldr	r0, [pc, #208]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000d14:	f00a fe84 	bl	800ba20 <HAL_TIM_Base_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000d1e:	f000 fb37 	bl	8001390 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d26:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	482d      	ldr	r0, [pc, #180]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000d30:	f00b ff9a 	bl	800cc68 <HAL_TIM_ConfigClockSource>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000d3a:	f000 fb29 	bl	8001390 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d3e:	4829      	ldr	r0, [pc, #164]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000d40:	f00a ff6d 	bl	800bc1e <HAL_TIM_PWM_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000d4a:	f000 fb21 	bl	8001390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d56:	f107 031c 	add.w	r3, r7, #28
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4821      	ldr	r0, [pc, #132]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000d5e:	f00c ff67 	bl	800dc30 <HAL_TIMEx_MasterConfigSynchronization>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000d68:	f000 fb12 	bl	8001390 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d6c:	2360      	movs	r3, #96	; 0x60
 8000d6e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d7c:	463b      	mov	r3, r7
 8000d7e:	2200      	movs	r2, #0
 8000d80:	4619      	mov	r1, r3
 8000d82:	4818      	ldr	r0, [pc, #96]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000d84:	f00b fe5c 	bl	800ca40 <HAL_TIM_PWM_ConfigChannel>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000d8e:	f000 faff 	bl	8001390 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d92:	463b      	mov	r3, r7
 8000d94:	2204      	movs	r2, #4
 8000d96:	4619      	mov	r1, r3
 8000d98:	4812      	ldr	r0, [pc, #72]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000d9a:	f00b fe51 	bl	800ca40 <HAL_TIM_PWM_ConfigChannel>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000da4:	f000 faf4 	bl	8001390 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000da8:	463b      	mov	r3, r7
 8000daa:	2208      	movs	r2, #8
 8000dac:	4619      	mov	r1, r3
 8000dae:	480d      	ldr	r0, [pc, #52]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000db0:	f00b fe46 	bl	800ca40 <HAL_TIM_PWM_ConfigChannel>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000dba:	f000 fae9 	bl	8001390 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000dbe:	463b      	mov	r3, r7
 8000dc0:	220c      	movs	r2, #12
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4807      	ldr	r0, [pc, #28]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000dc6:	f00b fe3b 	bl	800ca40 <HAL_TIM_PWM_ConfigChannel>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8000dd0:	f000 fade 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000dd4:	4803      	ldr	r0, [pc, #12]	; (8000de4 <MX_TIM2_Init+0x12c>)
 8000dd6:	f001 fc9f 	bl	8002718 <HAL_TIM_MspPostInit>

}
 8000dda:	bf00      	nop
 8000ddc:	3738      	adds	r7, #56	; 0x38
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	24000628 	.word	0x24000628

08000de8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08e      	sub	sp, #56	; 0x38
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfc:	f107 031c 	add.w	r3, r7, #28
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e08:	463b      	mov	r3, r7
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	611a      	str	r2, [r3, #16]
 8000e16:	615a      	str	r2, [r3, #20]
 8000e18:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e1a:	4b32      	ldr	r3, [pc, #200]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000e1c:	4a32      	ldr	r2, [pc, #200]	; (8000ee8 <MX_TIM3_Init+0x100>)
 8000e1e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8000e20:	4b30      	ldr	r3, [pc, #192]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000e22:	2263      	movs	r2, #99	; 0x63
 8000e24:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e26:	4b2f      	ldr	r3, [pc, #188]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000e2c:	4b2d      	ldr	r3, [pc, #180]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000e2e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000e32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e34:	4b2b      	ldr	r3, [pc, #172]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e40:	4828      	ldr	r0, [pc, #160]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000e42:	f00a fded 	bl	800ba20 <HAL_TIM_Base_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000e4c:	f000 faa0 	bl	8001390 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4821      	ldr	r0, [pc, #132]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000e5e:	f00b ff03 	bl	800cc68 <HAL_TIM_ConfigClockSource>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000e68:	f000 fa92 	bl	8001390 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e6c:	481d      	ldr	r0, [pc, #116]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000e6e:	f00a fed6 	bl	800bc1e <HAL_TIM_PWM_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000e78:	f000 fa8a 	bl	8001390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e80:	2300      	movs	r3, #0
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e84:	f107 031c 	add.w	r3, r7, #28
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4816      	ldr	r0, [pc, #88]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000e8c:	f00c fed0 	bl	800dc30 <HAL_TIMEx_MasterConfigSynchronization>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000e96:	f000 fa7b 	bl	8001390 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e9a:	2360      	movs	r3, #96	; 0x60
 8000e9c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eaa:	463b      	mov	r3, r7
 8000eac:	2200      	movs	r2, #0
 8000eae:	4619      	mov	r1, r3
 8000eb0:	480c      	ldr	r0, [pc, #48]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000eb2:	f00b fdc5 	bl	800ca40 <HAL_TIM_PWM_ConfigChannel>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000ebc:	f000 fa68 	bl	8001390 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ec0:	463b      	mov	r3, r7
 8000ec2:	2204      	movs	r2, #4
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4807      	ldr	r0, [pc, #28]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000ec8:	f00b fdba 	bl	800ca40 <HAL_TIM_PWM_ConfigChannel>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000ed2:	f000 fa5d 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ed6:	4803      	ldr	r0, [pc, #12]	; (8000ee4 <MX_TIM3_Init+0xfc>)
 8000ed8:	f001 fc1e 	bl	8002718 <HAL_TIM_MspPostInit>

}
 8000edc:	bf00      	nop
 8000ede:	3738      	adds	r7, #56	; 0x38
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	24000674 	.word	0x24000674
 8000ee8:	40000400 	.word	0x40000400

08000eec <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b090      	sub	sp, #64	; 0x40
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ef2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000f00:	f107 031c 	add.w	r3, r7, #28
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f10:	f107 030c 	add.w	r3, r7, #12
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f1e:	463b      	mov	r3, r7
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f28:	4b3d      	ldr	r3, [pc, #244]	; (8001020 <MX_TIM5_Init+0x134>)
 8000f2a:	4a3e      	ldr	r2, [pc, #248]	; (8001024 <MX_TIM5_Init+0x138>)
 8000f2c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 8000f2e:	4b3c      	ldr	r3, [pc, #240]	; (8001020 <MX_TIM5_Init+0x134>)
 8000f30:	2263      	movs	r2, #99	; 0x63
 8000f32:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f34:	4b3a      	ldr	r3, [pc, #232]	; (8001020 <MX_TIM5_Init+0x134>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000f3a:	4b39      	ldr	r3, [pc, #228]	; (8001020 <MX_TIM5_Init+0x134>)
 8000f3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f40:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f42:	4b37      	ldr	r3, [pc, #220]	; (8001020 <MX_TIM5_Init+0x134>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f48:	4b35      	ldr	r3, [pc, #212]	; (8001020 <MX_TIM5_Init+0x134>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000f4e:	4834      	ldr	r0, [pc, #208]	; (8001020 <MX_TIM5_Init+0x134>)
 8000f50:	f00a fd66 	bl	800ba20 <HAL_TIM_Base_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8000f5a:	f000 fa19 	bl	8001390 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f62:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000f64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f68:	4619      	mov	r1, r3
 8000f6a:	482d      	ldr	r0, [pc, #180]	; (8001020 <MX_TIM5_Init+0x134>)
 8000f6c:	f00b fe7c 	bl	800cc68 <HAL_TIM_ConfigClockSource>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8000f76:	f000 fa0b 	bl	8001390 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8000f7a:	4829      	ldr	r0, [pc, #164]	; (8001020 <MX_TIM5_Init+0x134>)
 8000f7c:	f00a ffbe 	bl	800befc <HAL_TIM_IC_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8000f86:	f000 fa03 	bl	8001390 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000f8e:	2350      	movs	r3, #80	; 0x50
 8000f90:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f92:	2300      	movs	r3, #0
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	481e      	ldr	r0, [pc, #120]	; (8001020 <MX_TIM5_Init+0x134>)
 8000fa6:	f00b ff57 	bl	800ce58 <HAL_TIM_SlaveConfigSynchro>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8000fb0:	f000 f9ee 	bl	8001390 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	2200      	movs	r2, #0
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4814      	ldr	r0, [pc, #80]	; (8001020 <MX_TIM5_Init+0x134>)
 8000fce:	f00b fc9a 	bl	800c906 <HAL_TIM_IC_ConfigChannel>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM5_Init+0xf0>
  {
    Error_Handler();
 8000fd8:	f000 f9da 	bl	8001390 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000fe4:	f107 030c 	add.w	r3, r7, #12
 8000fe8:	2204      	movs	r2, #4
 8000fea:	4619      	mov	r1, r3
 8000fec:	480c      	ldr	r0, [pc, #48]	; (8001020 <MX_TIM5_Init+0x134>)
 8000fee:	f00b fc8a 	bl	800c906 <HAL_TIM_IC_ConfigChannel>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM5_Init+0x110>
  {
    Error_Handler();
 8000ff8:	f000 f9ca 	bl	8001390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001004:	463b      	mov	r3, r7
 8001006:	4619      	mov	r1, r3
 8001008:	4805      	ldr	r0, [pc, #20]	; (8001020 <MX_TIM5_Init+0x134>)
 800100a:	f00c fe11 	bl	800dc30 <HAL_TIMEx_MasterConfigSynchronization>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM5_Init+0x12c>
  {
    Error_Handler();
 8001014:	f000 f9bc 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001018:	bf00      	nop
 800101a:	3740      	adds	r7, #64	; 0x40
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	240006c0 	.word	0x240006c0
 8001024:	40000c00 	.word	0x40000c00

08001028 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b090      	sub	sp, #64	; 0x40
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800102e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800103c:	f107 031c 	add.w	r3, r7, #28
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800105a:	463b      	mov	r3, r7
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001064:	4b3f      	ldr	r3, [pc, #252]	; (8001164 <MX_TIM15_Init+0x13c>)
 8001066:	4a40      	ldr	r2, [pc, #256]	; (8001168 <MX_TIM15_Init+0x140>)
 8001068:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 99;
 800106a:	4b3e      	ldr	r3, [pc, #248]	; (8001164 <MX_TIM15_Init+0x13c>)
 800106c:	2263      	movs	r2, #99	; 0x63
 800106e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001070:	4b3c      	ldr	r3, [pc, #240]	; (8001164 <MX_TIM15_Init+0x13c>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001076:	4b3b      	ldr	r3, [pc, #236]	; (8001164 <MX_TIM15_Init+0x13c>)
 8001078:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800107c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107e:	4b39      	ldr	r3, [pc, #228]	; (8001164 <MX_TIM15_Init+0x13c>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001084:	4b37      	ldr	r3, [pc, #220]	; (8001164 <MX_TIM15_Init+0x13c>)
 8001086:	2200      	movs	r2, #0
 8001088:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800108a:	4b36      	ldr	r3, [pc, #216]	; (8001164 <MX_TIM15_Init+0x13c>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001090:	4834      	ldr	r0, [pc, #208]	; (8001164 <MX_TIM15_Init+0x13c>)
 8001092:	f00a fcc5 	bl	800ba20 <HAL_TIM_Base_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 800109c:	f000 f978 	bl	8001390 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80010a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010aa:	4619      	mov	r1, r3
 80010ac:	482d      	ldr	r0, [pc, #180]	; (8001164 <MX_TIM15_Init+0x13c>)
 80010ae:	f00b fddb 	bl	800cc68 <HAL_TIM_ConfigClockSource>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 80010b8:	f000 f96a 	bl	8001390 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 80010bc:	4829      	ldr	r0, [pc, #164]	; (8001164 <MX_TIM15_Init+0x13c>)
 80010be:	f00a ff1d 	bl	800befc <HAL_TIM_IC_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM15_Init+0xa4>
  {
    Error_Handler();
 80010c8:	f000 f962 	bl	8001390 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80010cc:	2304      	movs	r3, #4
 80010ce:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80010d0:	2350      	movs	r3, #80	; 0x50
 80010d2:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010d4:	2300      	movs	r3, #0
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 80010e0:	f107 031c 	add.w	r3, r7, #28
 80010e4:	4619      	mov	r1, r3
 80010e6:	481f      	ldr	r0, [pc, #124]	; (8001164 <MX_TIM15_Init+0x13c>)
 80010e8:	f00b feb6 	bl	800ce58 <HAL_TIM_SlaveConfigSynchro>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 80010f2:	f000 f94d 	bl	8001390 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010fa:	2301      	movs	r3, #1
 80010fc:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	2200      	movs	r2, #0
 800110c:	4619      	mov	r1, r3
 800110e:	4815      	ldr	r0, [pc, #84]	; (8001164 <MX_TIM15_Init+0x13c>)
 8001110:	f00b fbf9 	bl	800c906 <HAL_TIM_IC_ConfigChannel>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 800111a:	f000 f939 	bl	8001390 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800111e:	2302      	movs	r3, #2
 8001120:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001122:	2302      	movs	r3, #2
 8001124:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001126:	f107 030c 	add.w	r3, r7, #12
 800112a:	2204      	movs	r2, #4
 800112c:	4619      	mov	r1, r3
 800112e:	480d      	ldr	r0, [pc, #52]	; (8001164 <MX_TIM15_Init+0x13c>)
 8001130:	f00b fbe9 	bl	800c906 <HAL_TIM_IC_ConfigChannel>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM15_Init+0x116>
  {
    Error_Handler();
 800113a:	f000 f929 	bl	8001390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800113e:	2300      	movs	r3, #0
 8001140:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001146:	463b      	mov	r3, r7
 8001148:	4619      	mov	r1, r3
 800114a:	4806      	ldr	r0, [pc, #24]	; (8001164 <MX_TIM15_Init+0x13c>)
 800114c:	f00c fd70 	bl	800dc30 <HAL_TIMEx_MasterConfigSynchronization>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8001156:	f000 f91b 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	3740      	adds	r7, #64	; 0x40
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	2400070c 	.word	0x2400070c
 8001168:	40014000 	.word	0x40014000

0800116c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_TIM16_Init+0x44>)
 8001172:	4a10      	ldr	r2, [pc, #64]	; (80011b4 <MX_TIM16_Init+0x48>)
 8001174:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 99;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_TIM16_Init+0x44>)
 8001178:	2263      	movs	r2, #99	; 0x63
 800117a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_TIM16_Init+0x44>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <MX_TIM16_Init+0x44>)
 8001184:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001188:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_TIM16_Init+0x44>)
 800118c:	2200      	movs	r2, #0
 800118e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001190:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <MX_TIM16_Init+0x44>)
 8001192:	2200      	movs	r2, #0
 8001194:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_TIM16_Init+0x44>)
 8001198:	2280      	movs	r2, #128	; 0x80
 800119a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800119c:	4804      	ldr	r0, [pc, #16]	; (80011b0 <MX_TIM16_Init+0x44>)
 800119e:	f00a fc3f 	bl	800ba20 <HAL_TIM_Base_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80011a8:	f000 f8f2 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	24000758 	.word	0x24000758
 80011b4:	40014400 	.word	0x40014400

080011b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <MX_DMA_Init+0x5c>)
 80011c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011c4:	4a13      	ldr	r2, [pc, #76]	; (8001214 <MX_DMA_Init+0x5c>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_DMA_Init+0x5c>)
 80011d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80011dc:	2200      	movs	r2, #0
 80011de:	2100      	movs	r1, #0
 80011e0:	200b      	movs	r0, #11
 80011e2:	f003 fc14 	bl	8004a0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80011e6:	200b      	movs	r0, #11
 80011e8:	f003 fc2b 	bl	8004a42 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2100      	movs	r1, #0
 80011f0:	200c      	movs	r0, #12
 80011f2:	f003 fc0c 	bl	8004a0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80011f6:	200c      	movs	r0, #12
 80011f8:	f003 fc23 	bl	8004a42 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2100      	movs	r1, #0
 8001200:	200d      	movs	r0, #13
 8001202:	f003 fc04 	bl	8004a0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001206:	200d      	movs	r0, #13
 8001208:	f003 fc1b 	bl	8004a42 <HAL_NVIC_EnableIRQ>

}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	58024400 	.word	0x58024400

08001218 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08c      	sub	sp, #48	; 0x30
 800121c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121e:	f107 031c 	add.w	r3, r7, #28
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800122e:	4b54      	ldr	r3, [pc, #336]	; (8001380 <MX_GPIO_Init+0x168>)
 8001230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001234:	4a52      	ldr	r2, [pc, #328]	; (8001380 <MX_GPIO_Init+0x168>)
 8001236:	f043 0310 	orr.w	r3, r3, #16
 800123a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800123e:	4b50      	ldr	r3, [pc, #320]	; (8001380 <MX_GPIO_Init+0x168>)
 8001240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001244:	f003 0310 	and.w	r3, r3, #16
 8001248:	61bb      	str	r3, [r7, #24]
 800124a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800124c:	4b4c      	ldr	r3, [pc, #304]	; (8001380 <MX_GPIO_Init+0x168>)
 800124e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001252:	4a4b      	ldr	r2, [pc, #300]	; (8001380 <MX_GPIO_Init+0x168>)
 8001254:	f043 0304 	orr.w	r3, r3, #4
 8001258:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800125c:	4b48      	ldr	r3, [pc, #288]	; (8001380 <MX_GPIO_Init+0x168>)
 800125e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001262:	f003 0304 	and.w	r3, r3, #4
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800126a:	4b45      	ldr	r3, [pc, #276]	; (8001380 <MX_GPIO_Init+0x168>)
 800126c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001270:	4a43      	ldr	r2, [pc, #268]	; (8001380 <MX_GPIO_Init+0x168>)
 8001272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001276:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800127a:	4b41      	ldr	r3, [pc, #260]	; (8001380 <MX_GPIO_Init+0x168>)
 800127c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001288:	4b3d      	ldr	r3, [pc, #244]	; (8001380 <MX_GPIO_Init+0x168>)
 800128a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128e:	4a3c      	ldr	r2, [pc, #240]	; (8001380 <MX_GPIO_Init+0x168>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001298:	4b39      	ldr	r3, [pc, #228]	; (8001380 <MX_GPIO_Init+0x168>)
 800129a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a6:	4b36      	ldr	r3, [pc, #216]	; (8001380 <MX_GPIO_Init+0x168>)
 80012a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ac:	4a34      	ldr	r2, [pc, #208]	; (8001380 <MX_GPIO_Init+0x168>)
 80012ae:	f043 0302 	orr.w	r3, r3, #2
 80012b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012b6:	4b32      	ldr	r3, [pc, #200]	; (8001380 <MX_GPIO_Init+0x168>)
 80012b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c4:	4b2e      	ldr	r3, [pc, #184]	; (8001380 <MX_GPIO_Init+0x168>)
 80012c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ca:	4a2d      	ldr	r2, [pc, #180]	; (8001380 <MX_GPIO_Init+0x168>)
 80012cc:	f043 0308 	orr.w	r3, r3, #8
 80012d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d4:	4b2a      	ldr	r3, [pc, #168]	; (8001380 <MX_GPIO_Init+0x168>)
 80012d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012da:	f003 0308 	and.w	r3, r3, #8
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80012e2:	2200      	movs	r2, #0
 80012e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012e8:	4826      	ldr	r0, [pc, #152]	; (8001384 <MX_GPIO_Init+0x16c>)
 80012ea:	f006 fbc9 	bl	8007a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BNO_NRST_Pin|BNO_BOOTN_Pin|Manual_Output_Pin, GPIO_PIN_RESET);
 80012ee:	2200      	movs	r2, #0
 80012f0:	f24c 0120 	movw	r1, #49184	; 0xc020
 80012f4:	4824      	ldr	r0, [pc, #144]	; (8001388 <MX_GPIO_Init+0x170>)
 80012f6:	f006 fbc3 	bl	8007a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BNO_P0_Pin|BNO_P1_Pin|LED_BLUE_Pin|LED_YELLOW_Pin, GPIO_PIN_RESET);
 80012fa:	2200      	movs	r2, #0
 80012fc:	f44f 714a 	mov.w	r1, #808	; 0x328
 8001300:	4822      	ldr	r0, [pc, #136]	; (800138c <MX_GPIO_Init+0x174>)
 8001302:	f006 fbbd 	bl	8007a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8001306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800130a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130c:	2301      	movs	r3, #1
 800130e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001314:	2300      	movs	r3, #0
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001318:	f107 031c 	add.w	r3, r7, #28
 800131c:	4619      	mov	r1, r3
 800131e:	4819      	ldr	r0, [pc, #100]	; (8001384 <MX_GPIO_Init+0x16c>)
 8001320:	f006 f9e6 	bl	80076f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BNO_NRST_Pin BNO_BOOTN_Pin Manual_Output_Pin */
  GPIO_InitStruct.Pin = BNO_NRST_Pin|BNO_BOOTN_Pin|Manual_Output_Pin;
 8001324:	f24c 0320 	movw	r3, #49184	; 0xc020
 8001328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132a:	2301      	movs	r3, #1
 800132c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	2300      	movs	r3, #0
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001336:	f107 031c 	add.w	r3, r7, #28
 800133a:	4619      	mov	r1, r3
 800133c:	4812      	ldr	r0, [pc, #72]	; (8001388 <MX_GPIO_Init+0x170>)
 800133e:	f006 f9d7 	bl	80076f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BNO_P0_Pin BNO_P1_Pin LED_BLUE_Pin LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = BNO_P0_Pin|BNO_P1_Pin|LED_BLUE_Pin|LED_YELLOW_Pin;
 8001342:	f44f 734a 	mov.w	r3, #808	; 0x328
 8001346:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001348:	2301      	movs	r3, #1
 800134a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	2300      	movs	r3, #0
 8001352:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	4619      	mov	r1, r3
 800135a:	480c      	ldr	r0, [pc, #48]	; (800138c <MX_GPIO_Init+0x174>)
 800135c:	f006 f9c8 	bl	80076f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Manual_Input_Pin */
  GPIO_InitStruct.Pin = Manual_Input_Pin;
 8001360:	2380      	movs	r3, #128	; 0x80
 8001362:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001364:	2300      	movs	r3, #0
 8001366:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Manual_Input_GPIO_Port, &GPIO_InitStruct);
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	4619      	mov	r1, r3
 8001372:	4805      	ldr	r0, [pc, #20]	; (8001388 <MX_GPIO_Init+0x170>)
 8001374:	f006 f9bc 	bl	80076f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001378:	bf00      	nop
 800137a:	3730      	adds	r7, #48	; 0x30
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	58024400 	.word	0x58024400
 8001384:	58021000 	.word	0x58021000
 8001388:	58020400 	.word	0x58020400
 800138c:	58020c00 	.word	0x58020c00

08001390 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001394:	b672      	cpsid	i
}
 8001396:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001398:	e7fe      	b.n	8001398 <Error_Handler+0x8>
	...

0800139c <_ZL8DWT_Initv>:
#define INC_UTILITY_H_

#include "main.h"

static inline void DWT_Init(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; //
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_ZL8DWT_Initv+0x28>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <_ZL8DWT_Initv+0x28>)
 80013a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013aa:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   //
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <_ZL8DWT_Initv+0x2c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a05      	ldr	r2, [pc, #20]	; (80013c8 <_ZL8DWT_Initv+0x2c>)
 80013b2:	f043 0301 	orr.w	r3, r3, #1
 80013b6:	6013      	str	r3, [r2, #0]
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000edf0 	.word	0xe000edf0
 80013c8:	e0001000 	.word	0xe0001000

080013cc <_Z15read_speed_datav>:
uint8_t ch3_cnt=0,ch4_cnt=99;

uint32_t servo_duty,esc_duty,freq;
uint32_t force_raw[8];

HAL_StatusTypeDef read_speed_data(){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
	uint8_t i;
	for(i = 0;i<SPEED_PIN_COUNT+1;++i){
 80013d2:	2300      	movs	r3, #0
 80013d4:	71fb      	strb	r3, [r7, #7]
 80013d6:	e009      	b.n	80013ec <_Z15read_speed_datav+0x20>
		if(received_speed[i]==acsr)break;
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	4a1a      	ldr	r2, [pc, #104]	; (8001444 <_Z15read_speed_datav+0x78>)
 80013dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e0:	4a19      	ldr	r2, [pc, #100]	; (8001448 <_Z15read_speed_datav+0x7c>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d006      	beq.n	80013f4 <_Z15read_speed_datav+0x28>
	for(i = 0;i<SPEED_PIN_COUNT+1;++i){
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	3301      	adds	r3, #1
 80013ea:	71fb      	strb	r3, [r7, #7]
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	2b10      	cmp	r3, #16
 80013f0:	d9f2      	bls.n	80013d8 <_Z15read_speed_datav+0xc>
 80013f2:	e000      	b.n	80013f6 <_Z15read_speed_datav+0x2a>
		if(received_speed[i]==acsr)break;
 80013f4:	bf00      	nop
	}
	if(i==SPEED_PIN_COUNT+1)return HAL_ERROR;
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	2b11      	cmp	r3, #17
 80013fa:	d101      	bne.n	8001400 <_Z15read_speed_datav+0x34>
 80013fc:	2301      	movs	r3, #1
 80013fe:	e01c      	b.n	800143a <_Z15read_speed_datav+0x6e>

	memcpy(speed,&received_speed[i+1],(SPEED_PIN_COUNT-i)*sizeof(uint32_t));
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	3301      	adds	r3, #1
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4a0f      	ldr	r2, [pc, #60]	; (8001444 <_Z15read_speed_datav+0x78>)
 8001408:	1899      	adds	r1, r3, r2
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	f1c3 0310 	rsb	r3, r3, #16
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	461a      	mov	r2, r3
 8001414:	480d      	ldr	r0, [pc, #52]	; (800144c <_Z15read_speed_datav+0x80>)
 8001416:	f00f fa5a 	bl	80108ce <memcpy>
	if(i){
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d00b      	beq.n	8001438 <_Z15read_speed_datav+0x6c>
		memcpy(&speed[SPEED_PIN_COUNT-i],received_speed,i*sizeof(uint32_t));
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	f1c3 0310 	rsb	r3, r3, #16
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4a08      	ldr	r2, [pc, #32]	; (800144c <_Z15read_speed_datav+0x80>)
 800142a:	1898      	adds	r0, r3, r2
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	461a      	mov	r2, r3
 8001432:	4904      	ldr	r1, [pc, #16]	; (8001444 <_Z15read_speed_datav+0x78>)
 8001434:	f00f fa4b 	bl	80108ce <memcpy>
	}
	return HAL_OK;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	240007a8 	.word	0x240007a8
 8001448:	41435352 	.word	0x41435352
 800144c:	240007ec 	.word	0x240007ec

08001450 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	if(huart->Instance==UART5){
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a46      	ldr	r2, [pc, #280]	; (8001578 <HAL_UART_RxCpltCallback+0x128>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d10f      	bne.n	8001482 <HAL_UART_RxCpltCallback+0x32>
		if(read_speed_data()==HAL_ERROR){
 8001462:	f7ff ffb3 	bl	80013cc <_Z15read_speed_datav>
 8001466:	4603      	mov	r3, r0
 8001468:	2b01      	cmp	r3, #1
 800146a:	bf0c      	ite	eq
 800146c:	2301      	moveq	r3, #1
 800146e:	2300      	movne	r3, #0
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	d07b      	beq.n	800156e <HAL_UART_RxCpltCallback+0x11e>
			HAL_UART_Receive_DMA(&huart5, (uint8_t*)received_speed, sizeof(uint32_t)*(SPEED_PIN_COUNT+1));
 8001476:	2244      	movs	r2, #68	; 0x44
 8001478:	4940      	ldr	r1, [pc, #256]	; (800157c <HAL_UART_RxCpltCallback+0x12c>)
 800147a:	4841      	ldr	r0, [pc, #260]	; (8001580 <HAL_UART_RxCpltCallback+0x130>)
 800147c:	f00c fd62 	bl	800df44 <HAL_UART_Receive_DMA>
			break;
		default:
			break;
		}
	}
}
 8001480:	e075      	b.n	800156e <HAL_UART_RxCpltCallback+0x11e>
	}else if(huart->Instance==UART7){
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a3f      	ldr	r2, [pc, #252]	; (8001584 <HAL_UART_RxCpltCallback+0x134>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d170      	bne.n	800156e <HAL_UART_RxCpltCallback+0x11e>
		switch(led_state){
 800148c:	4b3e      	ldr	r3, [pc, #248]	; (8001588 <HAL_UART_RxCpltCallback+0x138>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b42      	cmp	r3, #66	; 0x42
 8001492:	d061      	beq.n	8001558 <HAL_UART_RxCpltCallback+0x108>
 8001494:	2b42      	cmp	r3, #66	; 0x42
 8001496:	db69      	blt.n	800156c <HAL_UART_RxCpltCallback+0x11c>
 8001498:	2b79      	cmp	r3, #121	; 0x79
 800149a:	dc67      	bgt.n	800156c <HAL_UART_RxCpltCallback+0x11c>
 800149c:	2b52      	cmp	r3, #82	; 0x52
 800149e:	db65      	blt.n	800156c <HAL_UART_RxCpltCallback+0x11c>
 80014a0:	3b52      	subs	r3, #82	; 0x52
 80014a2:	2b27      	cmp	r3, #39	; 0x27
 80014a4:	d862      	bhi.n	800156c <HAL_UART_RxCpltCallback+0x11c>
 80014a6:	a201      	add	r2, pc, #4	; (adr r2, 80014ac <HAL_UART_RxCpltCallback+0x5c>)
 80014a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ac:	0800154d 	.word	0x0800154d
 80014b0:	0800156d 	.word	0x0800156d
 80014b4:	0800156d 	.word	0x0800156d
 80014b8:	0800156d 	.word	0x0800156d
 80014bc:	0800156d 	.word	0x0800156d
 80014c0:	0800156d 	.word	0x0800156d
 80014c4:	0800156d 	.word	0x0800156d
 80014c8:	08001563 	.word	0x08001563
 80014cc:	0800156d 	.word	0x0800156d
 80014d0:	0800156d 	.word	0x0800156d
 80014d4:	0800156d 	.word	0x0800156d
 80014d8:	0800156d 	.word	0x0800156d
 80014dc:	0800156d 	.word	0x0800156d
 80014e0:	0800156d 	.word	0x0800156d
 80014e4:	0800156d 	.word	0x0800156d
 80014e8:	0800156d 	.word	0x0800156d
 80014ec:	08001559 	.word	0x08001559
 80014f0:	0800156d 	.word	0x0800156d
 80014f4:	0800156d 	.word	0x0800156d
 80014f8:	0800156d 	.word	0x0800156d
 80014fc:	0800156d 	.word	0x0800156d
 8001500:	0800156d 	.word	0x0800156d
 8001504:	0800156d 	.word	0x0800156d
 8001508:	0800156d 	.word	0x0800156d
 800150c:	0800156d 	.word	0x0800156d
 8001510:	0800156d 	.word	0x0800156d
 8001514:	0800156d 	.word	0x0800156d
 8001518:	0800156d 	.word	0x0800156d
 800151c:	0800156d 	.word	0x0800156d
 8001520:	0800156d 	.word	0x0800156d
 8001524:	0800156d 	.word	0x0800156d
 8001528:	0800156d 	.word	0x0800156d
 800152c:	0800154d 	.word	0x0800154d
 8001530:	0800156d 	.word	0x0800156d
 8001534:	0800156d 	.word	0x0800156d
 8001538:	0800156d 	.word	0x0800156d
 800153c:	0800156d 	.word	0x0800156d
 8001540:	0800156d 	.word	0x0800156d
 8001544:	0800156d 	.word	0x0800156d
 8001548:	08001563 	.word	0x08001563
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800154c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001550:	480e      	ldr	r0, [pc, #56]	; (800158c <HAL_UART_RxCpltCallback+0x13c>)
 8001552:	f006 faae 	bl	8007ab2 <HAL_GPIO_TogglePin>
			break;
 8001556:	e00a      	b.n	800156e <HAL_UART_RxCpltCallback+0x11e>
			HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8001558:	2108      	movs	r1, #8
 800155a:	480d      	ldr	r0, [pc, #52]	; (8001590 <HAL_UART_RxCpltCallback+0x140>)
 800155c:	f006 faa9 	bl	8007ab2 <HAL_GPIO_TogglePin>
			break;
 8001560:	e005      	b.n	800156e <HAL_UART_RxCpltCallback+0x11e>
			HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8001562:	2120      	movs	r1, #32
 8001564:	480a      	ldr	r0, [pc, #40]	; (8001590 <HAL_UART_RxCpltCallback+0x140>)
 8001566:	f006 faa4 	bl	8007ab2 <HAL_GPIO_TogglePin>
			break;
 800156a:	e000      	b.n	800156e <HAL_UART_RxCpltCallback+0x11e>
			break;
 800156c:	bf00      	nop
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40005000 	.word	0x40005000
 800157c:	240007a8 	.word	0x240007a8
 8001580:	24000410 	.word	0x24000410
 8001584:	40007800 	.word	0x40007800
 8001588:	2400082c 	.word	0x2400082c
 800158c:	58021000 	.word	0x58021000
 8001590:	58020c00 	.word	0x58020c00

08001594 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle) {
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
    if(UartHandle->Instance==UART5) {
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a05      	ldr	r2, [pc, #20]	; (80015b8 <HAL_UART_ErrorCallback+0x24>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d104      	bne.n	80015b0 <HAL_UART_ErrorCallback+0x1c>
    	HAL_UART_Receive_DMA(&huart5, (uint8_t*)received_speed, sizeof(uint32_t)*(SPEED_PIN_COUNT+1));
 80015a6:	2244      	movs	r2, #68	; 0x44
 80015a8:	4904      	ldr	r1, [pc, #16]	; (80015bc <HAL_UART_ErrorCallback+0x28>)
 80015aa:	4805      	ldr	r0, [pc, #20]	; (80015c0 <HAL_UART_ErrorCallback+0x2c>)
 80015ac:	f00c fcca 	bl	800df44 <HAL_UART_Receive_DMA>
    }
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40005000 	.word	0x40005000
 80015bc:	240007a8 	.word	0x240007a8
 80015c0:	24000410 	.word	0x24000410

080015c4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM16){
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a0e      	ldr	r2, [pc, #56]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d113      	bne.n	80015fe <HAL_TIM_PeriodElapsedCallback+0x3a>
		if(input_mode==Manual){
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d10f      	bne.n	80015fe <HAL_TIM_PeriodElapsedCallback+0x3a>
			esc_duty=0;
 80015de:	4b0d      	ldr	r3, [pc, #52]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
			servo_duty=0;
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,esc_duty);
 80015ea:	4b0c      	ldr	r3, [pc, #48]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a09      	ldr	r2, [pc, #36]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80015f0:	6812      	ldr	r2, [r2, #0]
 80015f2:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2,servo_duty);
 80015f4:	4b09      	ldr	r3, [pc, #36]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a07      	ldr	r2, [pc, #28]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80015fa:	6812      	ldr	r2, [r2, #0]
 80015fc:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	40014400 	.word	0x40014400
 8001610:	240007a4 	.word	0x240007a4
 8001614:	24000834 	.word	0x24000834
 8001618:	24000830 	.word	0x24000830
 800161c:	24000674 	.word	0x24000674

08001620 <HAL_TIM_IC_CaptureCallback>:
	char msg[100]={0};
	sprintf(msg,"Force: %0.2f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f\n",force[0],force[1],force[2],force[3],force[4],force[5],force[6],force[7]);

}*/

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

//	if(input_mode==Auto)return;

	uint32_t temp_freq;
	if(htim->Instance==TIM5 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a35      	ldr	r2, [pc, #212]	; (8001704 <HAL_TIM_IC_CaptureCallback+0xe4>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d121      	bne.n	8001676 <HAL_TIM_IC_CaptureCallback+0x56>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	7f1b      	ldrb	r3, [r3, #28]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d11d      	bne.n	8001676 <HAL_TIM_IC_CaptureCallback+0x56>

		temp_freq = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800163a:	2100      	movs	r1, #0
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f00b fc4d 	bl	800cedc <HAL_TIM_ReadCapturedValue>
 8001642:	60f8      	str	r0, [r7, #12]
		servo_duty = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001644:	2104      	movs	r1, #4
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f00b fc48 	bl	800cedc <HAL_TIM_ReadCapturedValue>
 800164c:	4603      	mov	r3, r0
 800164e:	4a2e      	ldr	r2, [pc, #184]	; (8001708 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8001650:	6013      	str	r3, [r2, #0]

		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,servo_duty);
 8001652:	4b2e      	ldr	r3, [pc, #184]	; (800170c <HAL_TIM_IC_CaptureCallback+0xec>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a2c      	ldr	r2, [pc, #176]	; (8001708 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8001658:	6812      	ldr	r2, [r2, #0]
 800165a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCounter(htim,0);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2200      	movs	r2, #0
 8001662:	625a      	str	r2, [r3, #36]	; 0x24

		HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8001664:	2100      	movs	r1, #0
 8001666:	482a      	ldr	r0, [pc, #168]	; (8001710 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8001668:	f00a fe20 	bl	800c2ac <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 800166c:	2104      	movs	r1, #4
 800166e:	4828      	ldr	r0, [pc, #160]	; (8001710 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8001670:	f00a fca6 	bl	800bfc0 <HAL_TIM_IC_Start>
 8001674:	e025      	b.n	80016c2 <HAL_TIM_IC_CaptureCallback+0xa2>

	}else if(htim->Instance==TIM15 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a26      	ldr	r2, [pc, #152]	; (8001714 <HAL_TIM_IC_CaptureCallback+0xf4>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d120      	bne.n	80016c2 <HAL_TIM_IC_CaptureCallback+0xa2>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	7f1b      	ldrb	r3, [r3, #28]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d11c      	bne.n	80016c2 <HAL_TIM_IC_CaptureCallback+0xa2>

		temp_freq = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001688:	2100      	movs	r1, #0
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f00b fc26 	bl	800cedc <HAL_TIM_ReadCapturedValue>
 8001690:	60f8      	str	r0, [r7, #12]
		esc_duty = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001692:	2104      	movs	r1, #4
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f00b fc21 	bl	800cedc <HAL_TIM_ReadCapturedValue>
 800169a:	4603      	mov	r3, r0
 800169c:	4a1e      	ldr	r2, [pc, #120]	; (8001718 <HAL_TIM_IC_CaptureCallback+0xf8>)
 800169e:	6013      	str	r3, [r2, #0]

		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2,esc_duty);
 80016a0:	4b1a      	ldr	r3, [pc, #104]	; (800170c <HAL_TIM_IC_CaptureCallback+0xec>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a1c      	ldr	r2, [pc, #112]	; (8001718 <HAL_TIM_IC_CaptureCallback+0xf8>)
 80016a6:	6812      	ldr	r2, [r2, #0]
 80016a8:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SetCounter(htim,0);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2200      	movs	r2, #0
 80016b0:	625a      	str	r2, [r3, #36]	; 0x24

		HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 80016b2:	2100      	movs	r1, #0
 80016b4:	4819      	ldr	r0, [pc, #100]	; (800171c <HAL_TIM_IC_CaptureCallback+0xfc>)
 80016b6:	f00a fdf9 	bl	800c2ac <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
 80016ba:	2104      	movs	r1, #4
 80016bc:	4817      	ldr	r0, [pc, #92]	; (800171c <HAL_TIM_IC_CaptureCallback+0xfc>)
 80016be:	f00a fc7f 	bl	800bfc0 <HAL_TIM_IC_Start>

	}
	if(freq<1000 || abs((int)temp_freq-(int)freq)>50){
 80016c2:	4b17      	ldr	r3, [pc, #92]	; (8001720 <HAL_TIM_IC_CaptureCallback+0x100>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016ca:	d308      	bcc.n	80016de <HAL_TIM_IC_CaptureCallback+0xbe>
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	4a14      	ldr	r2, [pc, #80]	; (8001720 <HAL_TIM_IC_CaptureCallback+0x100>)
 80016d0:	6812      	ldr	r2, [r2, #0]
 80016d2:	1a9b      	subs	r3, r3, r2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	bfb8      	it	lt
 80016d8:	425b      	neglt	r3, r3
 80016da:	2b32      	cmp	r3, #50	; 0x32
 80016dc:	dd09      	ble.n	80016f2 <HAL_TIM_IC_CaptureCallback+0xd2>
		freq=temp_freq;
 80016de:	4a10      	ldr	r2, [pc, #64]	; (8001720 <HAL_TIM_IC_CaptureCallback+0x100>)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_AUTORELOAD(&htim3,temp_freq);
 80016e4:	4b09      	ldr	r3, [pc, #36]	; (800170c <HAL_TIM_IC_CaptureCallback+0xec>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80016ec:	4a07      	ldr	r2, [pc, #28]	; (800170c <HAL_TIM_IC_CaptureCallback+0xec>)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	60d3      	str	r3, [r2, #12]
	}
	__HAL_TIM_SetCounter(&htim16,0);
 80016f2:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <HAL_TIM_IC_CaptureCallback+0x104>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2200      	movs	r2, #0
 80016f8:	625a      	str	r2, [r3, #36]	; 0x24

}
 80016fa:	bf00      	nop
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40000c00 	.word	0x40000c00
 8001708:	24000830 	.word	0x24000830
 800170c:	24000674 	.word	0x24000674
 8001710:	240006c0 	.word	0x240006c0
 8001714:	40014000 	.word	0x40014000
 8001718:	24000834 	.word	0x24000834
 800171c:	2400070c 	.word	0x2400070c
 8001720:	24000838 	.word	0x24000838
 8001724:	24000758 	.word	0x24000758

08001728 <_Z8test_i2cv>:

void test_cp2101(){

}

void test_i2c(){
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b091      	sub	sp, #68	; 0x44
 800172c:	af00      	add	r7, sp, #0

    uint8_t i;
    HAL_StatusTypeDef ret;
    uint8_t address[10];
    uint8_t length=0;
 800172e:	2300      	movs	r3, #0
 8001730:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    for(i=1; i<128; i++)
 8001734:	2301      	movs	r3, #1
 8001736:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800173a:	e020      	b.n	800177e <_Z8test_i2cv+0x56>
    {
        ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
 800173c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001740:	b29b      	uxth	r3, r3
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	b299      	uxth	r1, r3
 8001746:	2305      	movs	r3, #5
 8001748:	2203      	movs	r2, #3
 800174a:	4865      	ldr	r0, [pc, #404]	; (80018e0 <_Z8test_i2cv+0x1b8>)
 800174c:	f006 fa5c 	bl	8007c08 <HAL_I2C_IsDeviceReady>
 8001750:	4603      	mov	r3, r0
 8001752:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        if(ret == HAL_OK)
 8001756:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10a      	bne.n	8001774 <_Z8test_i2cv+0x4c>
        {
            address[length++]=i;
 800175e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001762:	1c5a      	adds	r2, r3, #1
 8001764:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
 8001768:	3340      	adds	r3, #64	; 0x40
 800176a:	443b      	add	r3, r7
 800176c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001770:	f803 2c10 	strb.w	r2, [r3, #-16]
    for(i=1; i<128; i++)
 8001774:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001778:	3301      	adds	r3, #1
 800177a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800177e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001782:	2b00      	cmp	r3, #0
 8001784:	dada      	bge.n	800173c <_Z8test_i2cv+0x14>
        }
    }
    uint8_t i2c_start_msg1[] = "I2C Scanning:\n";
 8001786:	4b57      	ldr	r3, [pc, #348]	; (80018e4 <_Z8test_i2cv+0x1bc>)
 8001788:	f107 0420 	add.w	r4, r7, #32
 800178c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800178e:	c407      	stmia	r4!, {r0, r1, r2}
 8001790:	8023      	strh	r3, [r4, #0]
 8001792:	3402      	adds	r4, #2
 8001794:	0c1b      	lsrs	r3, r3, #16
 8001796:	7023      	strb	r3, [r4, #0]

	char buffer[25] = {0};
 8001798:	2300      	movs	r3, #0
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	f107 0308 	add.w	r3, r7, #8
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
 80017ac:	751a      	strb	r2, [r3, #20]
	HAL_UART_Transmit(&huart7, i2c_start_msg1, sizeof(i2c_start_msg1)-1, 10);
 80017ae:	f107 0120 	add.w	r1, r7, #32
 80017b2:	230a      	movs	r3, #10
 80017b4:	220e      	movs	r2, #14
 80017b6:	484c      	ldr	r0, [pc, #304]	; (80018e8 <_Z8test_i2cv+0x1c0>)
 80017b8:	f00c fb36 	bl	800de28 <HAL_UART_Transmit>

	if(length==2){
 80017bc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d10f      	bne.n	80017e4 <_Z8test_i2cv+0xbc>
		sprintf(buffer, "\tI2C1 Address:0x%02X,0x%02X\n", address[0],address[1]);
 80017c4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80017c8:	461a      	mov	r2, r3
 80017ca:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80017ce:	1d38      	adds	r0, r7, #4
 80017d0:	4946      	ldr	r1, [pc, #280]	; (80018ec <_Z8test_i2cv+0x1c4>)
 80017d2:	f00e ff99 	bl	8010708 <siprintf>
		HAL_UART_Transmit(&huart7, (uint8_t*)buffer, 24, 10);
 80017d6:	1d39      	adds	r1, r7, #4
 80017d8:	230a      	movs	r3, #10
 80017da:	2218      	movs	r2, #24
 80017dc:	4842      	ldr	r0, [pc, #264]	; (80018e8 <_Z8test_i2cv+0x1c0>)
 80017de:	f00c fb23 	bl	800de28 <HAL_UART_Transmit>
 80017e2:	e01c      	b.n	800181e <_Z8test_i2cv+0xf6>
	}else if(length==1){
 80017e4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d10e      	bne.n	800180a <_Z8test_i2cv+0xe2>
		sprintf(buffer, "\tI2C1 Address:0x%02X\n", address[0]);
 80017ec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80017f0:	461a      	mov	r2, r3
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	493e      	ldr	r1, [pc, #248]	; (80018f0 <_Z8test_i2cv+0x1c8>)
 80017f6:	4618      	mov	r0, r3
 80017f8:	f00e ff86 	bl	8010708 <siprintf>
		HAL_UART_Transmit(&huart7, (uint8_t*)buffer, 19, 10);
 80017fc:	1d39      	adds	r1, r7, #4
 80017fe:	230a      	movs	r3, #10
 8001800:	2213      	movs	r2, #19
 8001802:	4839      	ldr	r0, [pc, #228]	; (80018e8 <_Z8test_i2cv+0x1c0>)
 8001804:	f00c fb10 	bl	800de28 <HAL_UART_Transmit>
 8001808:	e009      	b.n	800181e <_Z8test_i2cv+0xf6>
	}else if(length==0){
 800180a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800180e:	2b00      	cmp	r3, #0
 8001810:	d105      	bne.n	800181e <_Z8test_i2cv+0xf6>
		HAL_UART_Transmit(&huart7, (uint8_t*)"\tNo Device Found In I2C1\n", 25, 10);
 8001812:	230a      	movs	r3, #10
 8001814:	2219      	movs	r2, #25
 8001816:	4937      	ldr	r1, [pc, #220]	; (80018f4 <_Z8test_i2cv+0x1cc>)
 8001818:	4833      	ldr	r0, [pc, #204]	; (80018e8 <_Z8test_i2cv+0x1c0>)
 800181a:	f00c fb05 	bl	800de28 <HAL_UART_Transmit>
	}

    length=0;
 800181e:	2300      	movs	r3, #0
 8001820:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    for(i=1; i<128; i++)
 8001824:	2301      	movs	r3, #1
 8001826:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800182a:	e020      	b.n	800186e <_Z8test_i2cv+0x146>
	{
		ret = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i<<1), 3, 5);
 800182c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001830:	b29b      	uxth	r3, r3
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	b299      	uxth	r1, r3
 8001836:	2305      	movs	r3, #5
 8001838:	2203      	movs	r2, #3
 800183a:	482f      	ldr	r0, [pc, #188]	; (80018f8 <_Z8test_i2cv+0x1d0>)
 800183c:	f006 f9e4 	bl	8007c08 <HAL_I2C_IsDeviceReady>
 8001840:	4603      	mov	r3, r0
 8001842:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		if(ret == HAL_OK)
 8001846:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800184a:	2b00      	cmp	r3, #0
 800184c:	d10a      	bne.n	8001864 <_Z8test_i2cv+0x13c>
		{
			address[length++]=i;
 800184e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001852:	1c5a      	adds	r2, r3, #1
 8001854:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
 8001858:	3340      	adds	r3, #64	; 0x40
 800185a:	443b      	add	r3, r7
 800185c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001860:	f803 2c10 	strb.w	r2, [r3, #-16]
    for(i=1; i<128; i++)
 8001864:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001868:	3301      	adds	r3, #1
 800186a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800186e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001872:	2b00      	cmp	r3, #0
 8001874:	dada      	bge.n	800182c <_Z8test_i2cv+0x104>
		}
	}
    if(length==2){
 8001876:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800187a:	2b02      	cmp	r3, #2
 800187c:	d10f      	bne.n	800189e <_Z8test_i2cv+0x176>
		sprintf(buffer, "\tI2C2 Address:0x%02X,0x%02X\n", address[0],address[1]);
 800187e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001882:	461a      	mov	r2, r3
 8001884:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001888:	1d38      	adds	r0, r7, #4
 800188a:	491c      	ldr	r1, [pc, #112]	; (80018fc <_Z8test_i2cv+0x1d4>)
 800188c:	f00e ff3c 	bl	8010708 <siprintf>
		HAL_UART_Transmit(&huart7, (uint8_t*)buffer, 24, 10);
 8001890:	1d39      	adds	r1, r7, #4
 8001892:	230a      	movs	r3, #10
 8001894:	2218      	movs	r2, #24
 8001896:	4814      	ldr	r0, [pc, #80]	; (80018e8 <_Z8test_i2cv+0x1c0>)
 8001898:	f00c fac6 	bl	800de28 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart7, (uint8_t*)buffer, 19, 10);
	}else if(length==0){
		HAL_UART_Transmit(&huart7, (uint8_t*)"\tNo Device Found In I2C2\n", 25, 10);
	}

}
 800189c:	e01c      	b.n	80018d8 <_Z8test_i2cv+0x1b0>
	}else if(length==1){
 800189e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d10e      	bne.n	80018c4 <_Z8test_i2cv+0x19c>
		sprintf(buffer, "\tI2C2 Address:0x%02X\n", address[0]);
 80018a6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80018aa:	461a      	mov	r2, r3
 80018ac:	1d3b      	adds	r3, r7, #4
 80018ae:	4914      	ldr	r1, [pc, #80]	; (8001900 <_Z8test_i2cv+0x1d8>)
 80018b0:	4618      	mov	r0, r3
 80018b2:	f00e ff29 	bl	8010708 <siprintf>
		HAL_UART_Transmit(&huart7, (uint8_t*)buffer, 19, 10);
 80018b6:	1d39      	adds	r1, r7, #4
 80018b8:	230a      	movs	r3, #10
 80018ba:	2213      	movs	r2, #19
 80018bc:	480a      	ldr	r0, [pc, #40]	; (80018e8 <_Z8test_i2cv+0x1c0>)
 80018be:	f00c fab3 	bl	800de28 <HAL_UART_Transmit>
}
 80018c2:	e009      	b.n	80018d8 <_Z8test_i2cv+0x1b0>
	}else if(length==0){
 80018c4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d105      	bne.n	80018d8 <_Z8test_i2cv+0x1b0>
		HAL_UART_Transmit(&huart7, (uint8_t*)"\tNo Device Found In I2C2\n", 25, 10);
 80018cc:	230a      	movs	r3, #10
 80018ce:	2219      	movs	r2, #25
 80018d0:	490c      	ldr	r1, [pc, #48]	; (8001904 <_Z8test_i2cv+0x1dc>)
 80018d2:	4805      	ldr	r0, [pc, #20]	; (80018e8 <_Z8test_i2cv+0x1c0>)
 80018d4:	f00c faa8 	bl	800de28 <HAL_UART_Transmit>
}
 80018d8:	bf00      	nop
 80018da:	3744      	adds	r7, #68	; 0x44
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd90      	pop	{r4, r7, pc}
 80018e0:	240002d4 	.word	0x240002d4
 80018e4:	08012978 	.word	0x08012978
 80018e8:	240004a4 	.word	0x240004a4
 80018ec:	080128d0 	.word	0x080128d0
 80018f0:	080128f0 	.word	0x080128f0
 80018f4:	08012908 	.word	0x08012908
 80018f8:	24000328 	.word	0x24000328
 80018fc:	08012924 	.word	0x08012924
 8001900:	08012944 	.word	0x08012944
 8001904:	0801295c 	.word	0x0801295c

08001908 <_Z10test_speedv>:

void test_speed(){
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
	char send_data[7];
	HAL_UART_Transmit(&huart7, (uint8_t*)"Speed: ", 7, 10);
 800190e:	230a      	movs	r3, #10
 8001910:	2207      	movs	r2, #7
 8001912:	4914      	ldr	r1, [pc, #80]	; (8001964 <_Z10test_speedv+0x5c>)
 8001914:	4814      	ldr	r0, [pc, #80]	; (8001968 <_Z10test_speedv+0x60>)
 8001916:	f00c fa87 	bl	800de28 <HAL_UART_Transmit>
	for(int i=0;i<SPEED_PIN_COUNT;++i){
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	e011      	b.n	8001944 <_Z10test_speedv+0x3c>
		sprintf(send_data,"%04lu ",speed[i]);
 8001920:	4a12      	ldr	r2, [pc, #72]	; (800196c <_Z10test_speedv+0x64>)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001928:	1d3b      	adds	r3, r7, #4
 800192a:	4911      	ldr	r1, [pc, #68]	; (8001970 <_Z10test_speedv+0x68>)
 800192c:	4618      	mov	r0, r3
 800192e:	f00e feeb 	bl	8010708 <siprintf>
		HAL_UART_Transmit(&huart7, (uint8_t*)send_data, 5, 10);
 8001932:	1d39      	adds	r1, r7, #4
 8001934:	230a      	movs	r3, #10
 8001936:	2205      	movs	r2, #5
 8001938:	480b      	ldr	r0, [pc, #44]	; (8001968 <_Z10test_speedv+0x60>)
 800193a:	f00c fa75 	bl	800de28 <HAL_UART_Transmit>
	for(int i=0;i<SPEED_PIN_COUNT;++i){
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	3301      	adds	r3, #1
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2b0f      	cmp	r3, #15
 8001948:	ddea      	ble.n	8001920 <_Z10test_speedv+0x18>
	}
	uint8_t lf[]={10};
 800194a:	230a      	movs	r3, #10
 800194c:	703b      	strb	r3, [r7, #0]
	HAL_UART_Transmit(&huart7, lf, 1, 10);
 800194e:	4639      	mov	r1, r7
 8001950:	230a      	movs	r3, #10
 8001952:	2201      	movs	r2, #1
 8001954:	4804      	ldr	r0, [pc, #16]	; (8001968 <_Z10test_speedv+0x60>)
 8001956:	f00c fa67 	bl	800de28 <HAL_UART_Transmit>

}
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	08012988 	.word	0x08012988
 8001968:	240004a4 	.word	0x240004a4
 800196c:	240007ec 	.word	0x240007ec
 8001970:	08012990 	.word	0x08012990

08001974 <_Z10test_brakev>:

void test_brake(){
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3,ch3_cnt++);
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <_Z10test_brakev+0x50>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	1c5a      	adds	r2, r3, #1
 800197e:	b2d1      	uxtb	r1, r2
 8001980:	4a10      	ldr	r2, [pc, #64]	; (80019c4 <_Z10test_brakev+0x50>)
 8001982:	7011      	strb	r1, [r2, #0]
 8001984:	4a10      	ldr	r2, [pc, #64]	; (80019c8 <_Z10test_brakev+0x54>)
 8001986:	6812      	ldr	r2, [r2, #0]
 8001988:	63d3      	str	r3, [r2, #60]	; 0x3c
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4,ch4_cnt--);
 800198a:	4b10      	ldr	r3, [pc, #64]	; (80019cc <_Z10test_brakev+0x58>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	1e5a      	subs	r2, r3, #1
 8001990:	b2d1      	uxtb	r1, r2
 8001992:	4a0e      	ldr	r2, [pc, #56]	; (80019cc <_Z10test_brakev+0x58>)
 8001994:	7011      	strb	r1, [r2, #0]
 8001996:	4a0c      	ldr	r2, [pc, #48]	; (80019c8 <_Z10test_brakev+0x54>)
 8001998:	6812      	ldr	r2, [r2, #0]
 800199a:	6413      	str	r3, [r2, #64]	; 0x40
	if(ch3_cnt==99)ch3_cnt=0;
 800199c:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <_Z10test_brakev+0x50>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b63      	cmp	r3, #99	; 0x63
 80019a2:	d102      	bne.n	80019aa <_Z10test_brakev+0x36>
 80019a4:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <_Z10test_brakev+0x50>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]
	if(ch4_cnt==0)ch4_cnt=99;
 80019aa:	4b08      	ldr	r3, [pc, #32]	; (80019cc <_Z10test_brakev+0x58>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d102      	bne.n	80019b8 <_Z10test_brakev+0x44>
 80019b2:	4b06      	ldr	r3, [pc, #24]	; (80019cc <_Z10test_brakev+0x58>)
 80019b4:	2263      	movs	r2, #99	; 0x63
 80019b6:	701a      	strb	r2, [r3, #0]
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	2400082d 	.word	0x2400082d
 80019c8:	24000628 	.word	0x24000628
 80019cc:	24000000 	.word	0x24000000

080019d0 <_Z10input_testv>:


void input_test(){
 80019d0:	b590      	push	{r4, r7, lr}
 80019d2:	b0b9      	sub	sp, #228	; 0xe4
 80019d4:	af02      	add	r7, sp, #8
	InputMode mode = HAL_GPIO_ReadPin(Manual_Input_GPIO_Port, Manual_Input_Pin)==GPIO_PIN_RESET?Auto:Manual;
 80019d6:	2180      	movs	r1, #128	; 0x80
 80019d8:	4867      	ldr	r0, [pc, #412]	; (8001b78 <_Z10input_testv+0x1a8>)
 80019da:	f006 f839 	bl	8007a50 <HAL_GPIO_ReadPin>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	bf14      	ite	ne
 80019e4:	2301      	movne	r3, #1
 80019e6:	2300      	moveq	r3, #0
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
	if(input_mode!=mode){
 80019ee:	4b63      	ldr	r3, [pc, #396]	; (8001b7c <_Z10input_testv+0x1ac>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	f897 20d6 	ldrb.w	r2, [r7, #214]	; 0xd6
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d044      	beq.n	8001a84 <_Z10input_testv+0xb4>
		input_mode=mode;
 80019fa:	4a60      	ldr	r2, [pc, #384]	; (8001b7c <_Z10input_testv+0x1ac>)
 80019fc:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8001a00:	7013      	strb	r3, [r2, #0]
		if(input_mode==Manual){
 8001a02:	4b5e      	ldr	r3, [pc, #376]	; (8001b7c <_Z10input_testv+0x1ac>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d113      	bne.n	8001a32 <_Z10input_testv+0x62>
			HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	485c      	ldr	r0, [pc, #368]	; (8001b80 <_Z10input_testv+0x1b0>)
 8001a0e:	f00a fc4d 	bl	800c2ac <HAL_TIM_IC_Start_IT>
			HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 8001a12:	2104      	movs	r1, #4
 8001a14:	485a      	ldr	r0, [pc, #360]	; (8001b80 <_Z10input_testv+0x1b0>)
 8001a16:	f00a fad3 	bl	800bfc0 <HAL_TIM_IC_Start>
			HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4859      	ldr	r0, [pc, #356]	; (8001b84 <_Z10input_testv+0x1b4>)
 8001a1e:	f00a fc45 	bl	800c2ac <HAL_TIM_IC_Start_IT>
			HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
 8001a22:	2104      	movs	r1, #4
 8001a24:	4857      	ldr	r0, [pc, #348]	; (8001b84 <_Z10input_testv+0x1b4>)
 8001a26:	f00a facb 	bl	800bfc0 <HAL_TIM_IC_Start>

			HAL_TIM_Base_Start_IT(&htim16);
 8001a2a:	4857      	ldr	r0, [pc, #348]	; (8001b88 <_Z10input_testv+0x1b8>)
 8001a2c:	f00a f850 	bl	800bad0 <HAL_TIM_Base_Start_IT>
 8001a30:	e028      	b.n	8001a84 <_Z10input_testv+0xb4>
//			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
//			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
		}else{
			freq=0;
 8001a32:	4b56      	ldr	r3, [pc, #344]	; (8001b8c <_Z10input_testv+0x1bc>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
			HAL_TIM_IC_Stop_IT(&htim5, TIM_CHANNEL_1);
 8001a38:	2100      	movs	r1, #0
 8001a3a:	4851      	ldr	r0, [pc, #324]	; (8001b80 <_Z10input_testv+0x1b0>)
 8001a3c:	f00a fd86 	bl	800c54c <HAL_TIM_IC_Stop_IT>
			HAL_TIM_IC_Stop(&htim5, TIM_CHANNEL_2);
 8001a40:	2104      	movs	r1, #4
 8001a42:	484f      	ldr	r0, [pc, #316]	; (8001b80 <_Z10input_testv+0x1b0>)
 8001a44:	f00a fbc0 	bl	800c1c8 <HAL_TIM_IC_Stop>
			HAL_TIM_IC_Stop_IT(&htim15, TIM_CHANNEL_1);
 8001a48:	2100      	movs	r1, #0
 8001a4a:	484e      	ldr	r0, [pc, #312]	; (8001b84 <_Z10input_testv+0x1b4>)
 8001a4c:	f00a fd7e 	bl	800c54c <HAL_TIM_IC_Stop_IT>
			HAL_TIM_IC_Stop(&htim15, TIM_CHANNEL_2);
 8001a50:	2104      	movs	r1, #4
 8001a52:	484c      	ldr	r0, [pc, #304]	; (8001b84 <_Z10input_testv+0x1b4>)
 8001a54:	f00a fbb8 	bl	800c1c8 <HAL_TIM_IC_Stop>

			HAL_TIM_Base_Stop_IT(&htim16);
 8001a58:	484b      	ldr	r0, [pc, #300]	; (8001b88 <_Z10input_testv+0x1b8>)
 8001a5a:	f00a f8b1 	bl	800bbc0 <HAL_TIM_Base_Stop_IT>

			__HAL_TIM_SET_AUTORELOAD(&htim3,20000-1);
 8001a5e:	4b4c      	ldr	r3, [pc, #304]	; (8001b90 <_Z10input_testv+0x1c0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001a66:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a68:	4b49      	ldr	r3, [pc, #292]	; (8001b90 <_Z10input_testv+0x1c0>)
 8001a6a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001a6e:	60da      	str	r2, [r3, #12]
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,5000-1);
 8001a70:	4b47      	ldr	r3, [pc, #284]	; (8001b90 <_Z10input_testv+0x1c0>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f241 3287 	movw	r2, #4999	; 0x1387
 8001a78:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2,10000-1);
 8001a7a:	4b45      	ldr	r3, [pc, #276]	; (8001b90 <_Z10input_testv+0x1c0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a82:	639a      	str	r2, [r3, #56]	; 0x38
//			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
//			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
		}
	}
	uint32_t arr = __HAL_TIM_GET_AUTORELOAD(&htim3);
 8001a84:	4b42      	ldr	r3, [pc, #264]	; (8001b90 <_Z10input_testv+0x1c0>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	uint32_t esc_cnt = __HAL_TIM_GET_COMPARE(&htim3,TIM_CHANNEL_1);
 8001a8e:	4b40      	ldr	r3, [pc, #256]	; (8001b90 <_Z10input_testv+0x1c0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	uint32_t servo_cnt = __HAL_TIM_GET_COMPARE(&htim3,TIM_CHANNEL_2);
 8001a98:	4b3d      	ldr	r3, [pc, #244]	; (8001b90 <_Z10input_testv+0x1c0>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

	char str[200]={0};
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	603b      	str	r3, [r7, #0]
 8001aa6:	1d3b      	adds	r3, r7, #4
 8001aa8:	22c4      	movs	r2, #196	; 0xc4
 8001aaa:	2100      	movs	r1, #0
 8001aac:	4618      	mov	r0, r3
 8001aae:	f00e fe8e 	bl	80107ce <memset>
	if(mode==Auto){
 8001ab2:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d11e      	bne.n	8001af8 <_Z10input_testv+0x128>
		sprintf(str,"Input Mode: Auto, Frequency: %u Hz, ESC DutyCycle: %u%%, SERVO DutyCycle: %u%%\n",1000000/arr,esc_cnt*100/arr,servo_cnt*100/arr);
 8001aba:	4a36      	ldr	r2, [pc, #216]	; (8001b94 <_Z10input_testv+0x1c4>)
 8001abc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ac0:	fbb2 f1f3 	udiv	r1, r2, r3
 8001ac4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ac8:	2264      	movs	r2, #100	; 0x64
 8001aca:	fb03 f202 	mul.w	r2, r3, r2
 8001ace:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ad2:	fbb2 f4f3 	udiv	r4, r2, r3
 8001ad6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ada:	2264      	movs	r2, #100	; 0x64
 8001adc:	fb03 f202 	mul.w	r2, r3, r2
 8001ae0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae8:	4638      	mov	r0, r7
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	4623      	mov	r3, r4
 8001aee:	460a      	mov	r2, r1
 8001af0:	4929      	ldr	r1, [pc, #164]	; (8001b98 <_Z10input_testv+0x1c8>)
 8001af2:	f00e fe09 	bl	8010708 <siprintf>
 8001af6:	e01d      	b.n	8001b34 <_Z10input_testv+0x164>
	}else{
		sprintf(str,"Input Mode: Manual, Frequency: %u Hz, ESC DutyCycle: %u%%, SERVO DutyCycle: %u%%\n",1000000/arr,esc_cnt*100/arr,servo_cnt*100/arr);
 8001af8:	4a26      	ldr	r2, [pc, #152]	; (8001b94 <_Z10input_testv+0x1c4>)
 8001afa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001afe:	fbb2 f1f3 	udiv	r1, r2, r3
 8001b02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b06:	2264      	movs	r2, #100	; 0x64
 8001b08:	fb03 f202 	mul.w	r2, r3, r2
 8001b0c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b10:	fbb2 f4f3 	udiv	r4, r2, r3
 8001b14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b18:	2264      	movs	r2, #100	; 0x64
 8001b1a:	fb03 f202 	mul.w	r2, r3, r2
 8001b1e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b26:	4638      	mov	r0, r7
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	4623      	mov	r3, r4
 8001b2c:	460a      	mov	r2, r1
 8001b2e:	491b      	ldr	r1, [pc, #108]	; (8001b9c <_Z10input_testv+0x1cc>)
 8001b30:	f00e fdea 	bl	8010708 <siprintf>
	}
	uint8_t i=0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	while(str[i]!=0 && i<200){
 8001b3a:	e00c      	b.n	8001b56 <_Z10input_testv+0x186>
		HAL_UART_Transmit(&huart7, (uint8_t*)(&str[i++]), 1, 1);
 8001b3c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8001b40:	1c5a      	adds	r2, r3, #1
 8001b42:	f887 20d7 	strb.w	r2, [r7, #215]	; 0xd7
 8001b46:	461a      	mov	r2, r3
 8001b48:	463b      	mov	r3, r7
 8001b4a:	1899      	adds	r1, r3, r2
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	2201      	movs	r2, #1
 8001b50:	4813      	ldr	r0, [pc, #76]	; (8001ba0 <_Z10input_testv+0x1d0>)
 8001b52:	f00c f969 	bl	800de28 <HAL_UART_Transmit>
	while(str[i]!=0 && i<200){
 8001b56:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8001b5a:	33d8      	adds	r3, #216	; 0xd8
 8001b5c:	443b      	add	r3, r7
 8001b5e:	f813 3cd8 	ldrb.w	r3, [r3, #-216]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <_Z10input_testv+0x19e>
 8001b66:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8001b6a:	2bc7      	cmp	r3, #199	; 0xc7
 8001b6c:	d9e6      	bls.n	8001b3c <_Z10input_testv+0x16c>
	}

}
 8001b6e:	bf00      	nop
 8001b70:	37dc      	adds	r7, #220	; 0xdc
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd90      	pop	{r4, r7, pc}
 8001b76:	bf00      	nop
 8001b78:	58020400 	.word	0x58020400
 8001b7c:	240007a4 	.word	0x240007a4
 8001b80:	240006c0 	.word	0x240006c0
 8001b84:	2400070c 	.word	0x2400070c
 8001b88:	24000758 	.word	0x24000758
 8001b8c:	24000838 	.word	0x24000838
 8001b90:	24000674 	.word	0x24000674
 8001b94:	000f4240 	.word	0x000f4240
 8001b98:	08012998 	.word	0x08012998
 8001b9c:	080129e8 	.word	0x080129e8
 8001ba0:	240004a4 	.word	0x240004a4
 8001ba4:	00000000 	.word	0x00000000

08001ba8 <_Z10force_testv>:

void force_test(){
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b0b0      	sub	sp, #192	; 0xc0
 8001bac:	af0e      	add	r7, sp, #56	; 0x38
	float force[8];
	for(uint8_t i=0;i<8;++i){
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8001bb4:	e021      	b.n	8001bfa <_Z10force_testv+0x52>
		force[i]=(float)force_raw[i]*3.3/0xFFFF;
 8001bb6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001bba:	4a45      	ldr	r2, [pc, #276]	; (8001cd0 <_Z10force_testv+0x128>)
 8001bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc0:	ee07 3a90 	vmov	s15, r3
 8001bc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bc8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001bcc:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8001cc0 <_Z10force_testv+0x118>
 8001bd0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001bd4:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 8001cc8 <_Z10force_testv+0x120>
 8001bd8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001bdc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001be0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	3388      	adds	r3, #136	; 0x88
 8001be8:	443b      	add	r3, r7
 8001bea:	3b24      	subs	r3, #36	; 0x24
 8001bec:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t i=0;i<8;++i){
 8001bf0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8001bfa:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001bfe:	2b07      	cmp	r3, #7
 8001c00:	d9d9      	bls.n	8001bb6 <_Z10force_testv+0xe>
	}
	char msg[100]={0};
 8001c02:	2300      	movs	r3, #0
 8001c04:	603b      	str	r3, [r7, #0]
 8001c06:	1d3b      	adds	r3, r7, #4
 8001c08:	2260      	movs	r2, #96	; 0x60
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f00e fdde 	bl	80107ce <memset>
	sprintf(msg,"Force: %0.2f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f\n",force[0],force[1],force[2],force[3],force[4],force[5],force[6],force[7]);
 8001c12:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001c16:	eeb7 0ae7 	vcvt.f64.f32	d0, s15
 8001c1a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001c1e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c22:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8001c26:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001c2a:	edd7 5a1c 	vldr	s11, [r7, #112]	; 0x70
 8001c2e:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8001c32:	edd7 4a1d 	vldr	s9, [r7, #116]	; 0x74
 8001c36:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8001c3a:	edd7 3a1e 	vldr	s7, [r7, #120]	; 0x78
 8001c3e:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8001c42:	edd7 2a1f 	vldr	s5, [r7, #124]	; 0x7c
 8001c46:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
 8001c4a:	edd7 1a20 	vldr	s3, [r7, #128]	; 0x80
 8001c4e:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
 8001c52:	4638      	mov	r0, r7
 8001c54:	ed8d 1b0c 	vstr	d1, [sp, #48]	; 0x30
 8001c58:	ed8d 2b0a 	vstr	d2, [sp, #40]	; 0x28
 8001c5c:	ed8d 3b08 	vstr	d3, [sp, #32]
 8001c60:	ed8d 4b06 	vstr	d4, [sp, #24]
 8001c64:	ed8d 5b04 	vstr	d5, [sp, #16]
 8001c68:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001c6c:	ed8d 7b00 	vstr	d7, [sp]
 8001c70:	ec53 2b10 	vmov	r2, r3, d0
 8001c74:	4917      	ldr	r1, [pc, #92]	; (8001cd4 <_Z10force_testv+0x12c>)
 8001c76:	f00e fd47 	bl	8010708 <siprintf>
	uint8_t i=0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
	while(msg[i]!=0 && i<100){
 8001c80:	e00c      	b.n	8001c9c <_Z10force_testv+0xf4>
		HAL_UART_Transmit(&huart7, (uint8_t*)(&msg[i++]), 1, 1);
 8001c82:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	f887 2086 	strb.w	r2, [r7, #134]	; 0x86
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	463b      	mov	r3, r7
 8001c90:	1899      	adds	r1, r3, r2
 8001c92:	2301      	movs	r3, #1
 8001c94:	2201      	movs	r2, #1
 8001c96:	4810      	ldr	r0, [pc, #64]	; (8001cd8 <_Z10force_testv+0x130>)
 8001c98:	f00c f8c6 	bl	800de28 <HAL_UART_Transmit>
	while(msg[i]!=0 && i<100){
 8001c9c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001ca0:	3388      	adds	r3, #136	; 0x88
 8001ca2:	443b      	add	r3, r7
 8001ca4:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <_Z10force_testv+0x10c>
 8001cac:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001cb0:	2b63      	cmp	r3, #99	; 0x63
 8001cb2:	d9e6      	bls.n	8001c82 <_Z10force_testv+0xda>
	}
}
 8001cb4:	bf00      	nop
 8001cb6:	3788      	adds	r7, #136	; 0x88
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	f3af 8000 	nop.w
 8001cc0:	66666666 	.word	0x66666666
 8001cc4:	400a6666 	.word	0x400a6666
 8001cc8:	00000000 	.word	0x00000000
 8001ccc:	40efffe0 	.word	0x40efffe0
 8001cd0:	2400083c 	.word	0x2400083c
 8001cd4:	08012a3c 	.word	0x08012a3c
 8001cd8:	240004a4 	.word	0x240004a4

08001cdc <_Z12BNO085_setupv>:

void BNO085_setup(){
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BNO_P0_GPIO_Port, BNO_P0_Pin, GPIO_PIN_RESET);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ce6:	4814      	ldr	r0, [pc, #80]	; (8001d38 <_Z12BNO085_setupv+0x5c>)
 8001ce8:	f005 feca 	bl	8007a80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BNO_P1_GPIO_Port, BNO_P1_Pin, GPIO_PIN_RESET);
 8001cec:	2200      	movs	r2, #0
 8001cee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cf2:	4811      	ldr	r0, [pc, #68]	; (8001d38 <_Z12BNO085_setupv+0x5c>)
 8001cf4:	f005 fec4 	bl	8007a80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BNO_BOOTN_GPIO_Port, BNO_BOOTN_Pin, GPIO_PIN_SET);
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cfe:	480f      	ldr	r0, [pc, #60]	; (8001d3c <_Z12BNO085_setupv+0x60>)
 8001d00:	f005 febe 	bl	8007a80 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(BNO_NRST_GPIO_Port,BNO_NRST_Pin,GPIO_PIN_SET);
 8001d04:	2201      	movs	r2, #1
 8001d06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d0a:	480c      	ldr	r0, [pc, #48]	; (8001d3c <_Z12BNO085_setupv+0x60>)
 8001d0c:	f005 feb8 	bl	8007a80 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001d10:	2001      	movs	r0, #1
 8001d12:	f000 fff1 	bl	8002cf8 <HAL_Delay>
	HAL_GPIO_WritePin(BNO_NRST_GPIO_Port,BNO_NRST_Pin,GPIO_PIN_RESET);
 8001d16:	2200      	movs	r2, #0
 8001d18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d1c:	4807      	ldr	r0, [pc, #28]	; (8001d3c <_Z12BNO085_setupv+0x60>)
 8001d1e:	f005 feaf 	bl	8007a80 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001d22:	2001      	movs	r0, #1
 8001d24:	f000 ffe8 	bl	8002cf8 <HAL_Delay>
	HAL_GPIO_WritePin(BNO_NRST_GPIO_Port,BNO_NRST_Pin,GPIO_PIN_SET);
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d2e:	4803      	ldr	r0, [pc, #12]	; (8001d3c <_Z12BNO085_setupv+0x60>)
 8001d30:	f005 fea6 	bl	8007a80 <HAL_GPIO_WritePin>

}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	58020c00 	.word	0x58020c00
 8001d3c:	58020400 	.word	0x58020400

08001d40 <setup>:

void setup(){
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
	DWT_Init();
 8001d44:	f7ff fb2a 	bl	800139c <_ZL8DWT_Initv>
//	HAL_ADC_Start_DMA(&hadc1, force_raw, 8);
	HAL_ADC_Start_DMA(&hadc1,force_raw,8);
 8001d48:	2208      	movs	r2, #8
 8001d4a:	494b      	ldr	r1, [pc, #300]	; (8001e78 <setup+0x138>)
 8001d4c:	484b      	ldr	r0, [pc, #300]	; (8001e7c <setup+0x13c>)
 8001d4e:	f001 fbad 	bl	80034ac <HAL_ADC_Start_DMA>
	HAL_UART_Receive_DMA(&huart5, (uint8_t*)received_speed, sizeof(uint32_t)*(SPEED_PIN_COUNT+1));
 8001d52:	2244      	movs	r2, #68	; 0x44
 8001d54:	494a      	ldr	r1, [pc, #296]	; (8001e80 <setup+0x140>)
 8001d56:	484b      	ldr	r0, [pc, #300]	; (8001e84 <setup+0x144>)
 8001d58:	f00c f8f4 	bl	800df44 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart7, (uint8_t*)&led_state, 1);
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	494a      	ldr	r1, [pc, #296]	; (8001e88 <setup+0x148>)
 8001d60:	484a      	ldr	r0, [pc, #296]	; (8001e8c <setup+0x14c>)
 8001d62:	f00c f8ef 	bl	800df44 <HAL_UART_Receive_DMA>

	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8001d66:	2200      	movs	r2, #0
 8001d68:	2108      	movs	r1, #8
 8001d6a:	4849      	ldr	r0, [pc, #292]	; (8001e90 <setup+0x150>)
 8001d6c:	f005 fe88 	bl	8007a80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001d70:	2200      	movs	r2, #0
 8001d72:	2120      	movs	r1, #32
 8001d74:	4846      	ldr	r0, [pc, #280]	; (8001e90 <setup+0x150>)
 8001d76:	f005 fe83 	bl	8007a80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d80:	4844      	ldr	r0, [pc, #272]	; (8001e94 <setup+0x154>)
 8001d82:	f005 fe7d 	bl	8007a80 <HAL_GPIO_WritePin>

	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1,33);
 8001d86:	4b44      	ldr	r3, [pc, #272]	; (8001e98 <setup+0x158>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2221      	movs	r2, #33	; 0x21
 8001d8c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2,67);
 8001d8e:	4b42      	ldr	r3, [pc, #264]	; (8001e98 <setup+0x158>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2243      	movs	r2, #67	; 0x43
 8001d94:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3,ch3_cnt++);
 8001d96:	4b41      	ldr	r3, [pc, #260]	; (8001e9c <setup+0x15c>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	1c5a      	adds	r2, r3, #1
 8001d9c:	b2d1      	uxtb	r1, r2
 8001d9e:	4a3f      	ldr	r2, [pc, #252]	; (8001e9c <setup+0x15c>)
 8001da0:	7011      	strb	r1, [r2, #0]
 8001da2:	4a3d      	ldr	r2, [pc, #244]	; (8001e98 <setup+0x158>)
 8001da4:	6812      	ldr	r2, [r2, #0]
 8001da6:	63d3      	str	r3, [r2, #60]	; 0x3c
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4,ch4_cnt--);
 8001da8:	4b3d      	ldr	r3, [pc, #244]	; (8001ea0 <setup+0x160>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	1e5a      	subs	r2, r3, #1
 8001dae:	b2d1      	uxtb	r1, r2
 8001db0:	4a3b      	ldr	r2, [pc, #236]	; (8001ea0 <setup+0x160>)
 8001db2:	7011      	strb	r1, [r2, #0]
 8001db4:	4a38      	ldr	r2, [pc, #224]	; (8001e98 <setup+0x158>)
 8001db6:	6812      	ldr	r2, [r2, #0]
 8001db8:	6413      	str	r3, [r2, #64]	; 0x40

	HAL_TIM_Base_Start_IT(&htim2);
 8001dba:	4837      	ldr	r0, [pc, #220]	; (8001e98 <setup+0x158>)
 8001dbc:	f009 fe88 	bl	800bad0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	4835      	ldr	r0, [pc, #212]	; (8001e98 <setup+0x158>)
 8001dc4:	f009 ff8c 	bl	800bce0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001dc8:	2104      	movs	r1, #4
 8001dca:	4833      	ldr	r0, [pc, #204]	; (8001e98 <setup+0x158>)
 8001dcc:	f009 ff88 	bl	800bce0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001dd0:	2108      	movs	r1, #8
 8001dd2:	4831      	ldr	r0, [pc, #196]	; (8001e98 <setup+0x158>)
 8001dd4:	f009 ff84 	bl	800bce0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001dd8:	210c      	movs	r1, #12
 8001dda:	482f      	ldr	r0, [pc, #188]	; (8001e98 <setup+0x158>)
 8001ddc:	f009 ff80 	bl	800bce0 <HAL_TIM_PWM_Start>


	HAL_GPIO_WritePin(Manual_Output_GPIO_Port, Manual_Output_Pin, GPIO_PIN_RESET);
 8001de0:	2200      	movs	r2, #0
 8001de2:	2120      	movs	r1, #32
 8001de4:	482f      	ldr	r0, [pc, #188]	; (8001ea4 <setup+0x164>)
 8001de6:	f005 fe4b 	bl	8007a80 <HAL_GPIO_WritePin>
	freq = 0;
 8001dea:	4b2f      	ldr	r3, [pc, #188]	; (8001ea8 <setup+0x168>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
	input_mode = HAL_GPIO_ReadPin(Manual_Input_GPIO_Port, Manual_Input_Pin)==GPIO_PIN_RESET?Auto:Manual;
 8001df0:	2180      	movs	r1, #128	; 0x80
 8001df2:	482c      	ldr	r0, [pc, #176]	; (8001ea4 <setup+0x164>)
 8001df4:	f005 fe2c 	bl	8007a50 <HAL_GPIO_ReadPin>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	bf14      	ite	ne
 8001dfe:	2301      	movne	r3, #1
 8001e00:	2300      	moveq	r3, #0
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	461a      	mov	r2, r3
 8001e06:	4b29      	ldr	r3, [pc, #164]	; (8001eac <setup+0x16c>)
 8001e08:	701a      	strb	r2, [r3, #0]
	if(input_mode==Manual){
 8001e0a:	4b28      	ldr	r3, [pc, #160]	; (8001eac <setup+0x16c>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d112      	bne.n	8001e38 <setup+0xf8>
		HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8001e12:	2100      	movs	r1, #0
 8001e14:	4826      	ldr	r0, [pc, #152]	; (8001eb0 <setup+0x170>)
 8001e16:	f00a fa49 	bl	800c2ac <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 8001e1a:	2104      	movs	r1, #4
 8001e1c:	4824      	ldr	r0, [pc, #144]	; (8001eb0 <setup+0x170>)
 8001e1e:	f00a f8cf 	bl	800bfc0 <HAL_TIM_IC_Start>
		HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 8001e22:	2100      	movs	r1, #0
 8001e24:	4823      	ldr	r0, [pc, #140]	; (8001eb4 <setup+0x174>)
 8001e26:	f00a fa41 	bl	800c2ac <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
 8001e2a:	2104      	movs	r1, #4
 8001e2c:	4821      	ldr	r0, [pc, #132]	; (8001eb4 <setup+0x174>)
 8001e2e:	f00a f8c7 	bl	800bfc0 <HAL_TIM_IC_Start>

		HAL_TIM_Base_Start_IT(&htim16);
 8001e32:	4821      	ldr	r0, [pc, #132]	; (8001eb8 <setup+0x178>)
 8001e34:	f009 fe4c 	bl	800bad0 <HAL_TIM_Base_Start_IT>
	}

	__HAL_TIM_SET_AUTORELOAD(&htim3,20000-1);
 8001e38:	4b20      	ldr	r3, [pc, #128]	; (8001ebc <setup+0x17c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001e40:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e42:	4b1e      	ldr	r3, [pc, #120]	; (8001ebc <setup+0x17c>)
 8001e44:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001e48:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,5000-1);
 8001e4a:	4b1c      	ldr	r3, [pc, #112]	; (8001ebc <setup+0x17c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001e52:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2,10000-1);
 8001e54:	4b19      	ldr	r3, [pc, #100]	; (8001ebc <setup+0x17c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e5c:	639a      	str	r2, [r3, #56]	; 0x38

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4816      	ldr	r0, [pc, #88]	; (8001ebc <setup+0x17c>)
 8001e62:	f009 ff3d 	bl	800bce0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001e66:	2104      	movs	r1, #4
 8001e68:	4814      	ldr	r0, [pc, #80]	; (8001ebc <setup+0x17c>)
 8001e6a:	f009 ff39 	bl	800bce0 <HAL_TIM_PWM_Start>

	BNO085_setup();
 8001e6e:	f7ff ff35 	bl	8001cdc <_Z12BNO085_setupv>

}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	2400083c 	.word	0x2400083c
 8001e7c:	240001f8 	.word	0x240001f8
 8001e80:	240007a8 	.word	0x240007a8
 8001e84:	24000410 	.word	0x24000410
 8001e88:	2400082c 	.word	0x2400082c
 8001e8c:	240004a4 	.word	0x240004a4
 8001e90:	58020c00 	.word	0x58020c00
 8001e94:	58021000 	.word	0x58021000
 8001e98:	24000628 	.word	0x24000628
 8001e9c:	2400082d 	.word	0x2400082d
 8001ea0:	24000000 	.word	0x24000000
 8001ea4:	58020400 	.word	0x58020400
 8001ea8:	24000838 	.word	0x24000838
 8001eac:	240007a4 	.word	0x240007a4
 8001eb0:	240006c0 	.word	0x240006c0
 8001eb4:	2400070c 	.word	0x2400070c
 8001eb8:	24000758 	.word	0x24000758
 8001ebc:	24000674 	.word	0x24000674

08001ec0 <loop>:




void loop(){
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0

	HAL_UART_Transmit(&huart7, (uint8_t*)("\n\n"), 2, 1);
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	4909      	ldr	r1, [pc, #36]	; (8001ef0 <loop+0x30>)
 8001eca:	480a      	ldr	r0, [pc, #40]	; (8001ef4 <loop+0x34>)
 8001ecc:	f00b ffac 	bl	800de28 <HAL_UART_Transmit>
	force_test();
 8001ed0:	f7ff fe6a 	bl	8001ba8 <_Z10force_testv>
	input_test();
 8001ed4:	f7ff fd7c 	bl	80019d0 <_Z10input_testv>
	test_speed();
 8001ed8:	f7ff fd16 	bl	8001908 <_Z10test_speedv>
	test_i2c();
 8001edc:	f7ff fc24 	bl	8001728 <_Z8test_i2cv>
	test_brake();
 8001ee0:	f7ff fd48 	bl	8001974 <_Z10test_brakev>
	HAL_Delay(1000);
 8001ee4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ee8:	f000 ff06 	bl	8002cf8 <HAL_Delay>


}
 8001eec:	bf00      	nop
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	08012a74 	.word	0x08012a74
 8001ef4:	240004a4 	.word	0x240004a4

08001ef8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efe:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <HAL_MspInit+0x30>)
 8001f00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f04:	4a08      	ldr	r2, [pc, #32]	; (8001f28 <HAL_MspInit+0x30>)
 8001f06:	f043 0302 	orr.w	r3, r3, #2
 8001f0a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_MspInit+0x30>)
 8001f10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	607b      	str	r3, [r7, #4]
 8001f1a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	58024400 	.word	0x58024400

08001f2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b0bc      	sub	sp, #240	; 0xf0
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f34:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f44:	f107 0318 	add.w	r3, r7, #24
 8001f48:	22c0      	movs	r2, #192	; 0xc0
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f00e fc3e 	bl	80107ce <memset>
  if(hadc->Instance==ADC1)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a5e      	ldr	r2, [pc, #376]	; (80020d0 <HAL_ADC_MspInit+0x1a4>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	f040 80b5 	bne.w	80020c8 <HAL_ADC_MspInit+0x19c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001f5e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f62:	f04f 0300 	mov.w	r3, #0
 8001f66:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8001f6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f72:	f107 0318 	add.w	r3, r7, #24
 8001f76:	4618      	mov	r0, r3
 8001f78:	f007 f854 	bl	8009024 <HAL_RCCEx_PeriphCLKConfig>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <HAL_ADC_MspInit+0x5a>
    {
      Error_Handler();
 8001f82:	f7ff fa05 	bl	8001390 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001f86:	4b53      	ldr	r3, [pc, #332]	; (80020d4 <HAL_ADC_MspInit+0x1a8>)
 8001f88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f8c:	4a51      	ldr	r2, [pc, #324]	; (80020d4 <HAL_ADC_MspInit+0x1a8>)
 8001f8e:	f043 0320 	orr.w	r3, r3, #32
 8001f92:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001f96:	4b4f      	ldr	r3, [pc, #316]	; (80020d4 <HAL_ADC_MspInit+0x1a8>)
 8001f98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f9c:	f003 0320 	and.w	r3, r3, #32
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fa4:	4b4b      	ldr	r3, [pc, #300]	; (80020d4 <HAL_ADC_MspInit+0x1a8>)
 8001fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001faa:	4a4a      	ldr	r2, [pc, #296]	; (80020d4 <HAL_ADC_MspInit+0x1a8>)
 8001fac:	f043 0304 	orr.w	r3, r3, #4
 8001fb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fb4:	4b47      	ldr	r3, [pc, #284]	; (80020d4 <HAL_ADC_MspInit+0x1a8>)
 8001fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc2:	4b44      	ldr	r3, [pc, #272]	; (80020d4 <HAL_ADC_MspInit+0x1a8>)
 8001fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fc8:	4a42      	ldr	r2, [pc, #264]	; (80020d4 <HAL_ADC_MspInit+0x1a8>)
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fd2:	4b40      	ldr	r3, [pc, #256]	; (80020d4 <HAL_ADC_MspInit+0x1a8>)
 8001fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe0:	4b3c      	ldr	r3, [pc, #240]	; (80020d4 <HAL_ADC_MspInit+0x1a8>)
 8001fe2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fe6:	4a3b      	ldr	r2, [pc, #236]	; (80020d4 <HAL_ADC_MspInit+0x1a8>)
 8001fe8:	f043 0302 	orr.w	r3, r3, #2
 8001fec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ff0:	4b38      	ldr	r3, [pc, #224]	; (80020d4 <HAL_ADC_MspInit+0x1a8>)
 8001ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	60bb      	str	r3, [r7, #8]
 8001ffc:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = F06_Pin|F07_Pin|F01_Pin|F04_Pin;
 8001ffe:	2333      	movs	r3, #51	; 0x33
 8002000:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002004:	2303      	movs	r3, #3
 8002006:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200a:	2300      	movs	r3, #0
 800200c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002010:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002014:	4619      	mov	r1, r3
 8002016:	4830      	ldr	r0, [pc, #192]	; (80020d8 <HAL_ADC_MspInit+0x1ac>)
 8002018:	f005 fb6a 	bl	80076f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = F03_Pin|F00_Pin;
 800201c:	2350      	movs	r3, #80	; 0x50
 800201e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002022:	2303      	movs	r3, #3
 8002024:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002032:	4619      	mov	r1, r3
 8002034:	4829      	ldr	r0, [pc, #164]	; (80020dc <HAL_ADC_MspInit+0x1b0>)
 8002036:	f005 fb5b 	bl	80076f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = F05_Pin|F02_Pin;
 800203a:	2303      	movs	r3, #3
 800203c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002040:	2303      	movs	r3, #3
 8002042:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002050:	4619      	mov	r1, r3
 8002052:	4823      	ldr	r0, [pc, #140]	; (80020e0 <HAL_ADC_MspInit+0x1b4>)
 8002054:	f005 fb4c 	bl	80076f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream2;
 8002058:	4b22      	ldr	r3, [pc, #136]	; (80020e4 <HAL_ADC_MspInit+0x1b8>)
 800205a:	4a23      	ldr	r2, [pc, #140]	; (80020e8 <HAL_ADC_MspInit+0x1bc>)
 800205c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800205e:	4b21      	ldr	r3, [pc, #132]	; (80020e4 <HAL_ADC_MspInit+0x1b8>)
 8002060:	2209      	movs	r2, #9
 8002062:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002064:	4b1f      	ldr	r3, [pc, #124]	; (80020e4 <HAL_ADC_MspInit+0x1b8>)
 8002066:	2200      	movs	r2, #0
 8002068:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800206a:	4b1e      	ldr	r3, [pc, #120]	; (80020e4 <HAL_ADC_MspInit+0x1b8>)
 800206c:	2200      	movs	r2, #0
 800206e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002070:	4b1c      	ldr	r3, [pc, #112]	; (80020e4 <HAL_ADC_MspInit+0x1b8>)
 8002072:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002076:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002078:	4b1a      	ldr	r3, [pc, #104]	; (80020e4 <HAL_ADC_MspInit+0x1b8>)
 800207a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800207e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002080:	4b18      	ldr	r3, [pc, #96]	; (80020e4 <HAL_ADC_MspInit+0x1b8>)
 8002082:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002086:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002088:	4b16      	ldr	r3, [pc, #88]	; (80020e4 <HAL_ADC_MspInit+0x1b8>)
 800208a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800208e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002090:	4b14      	ldr	r3, [pc, #80]	; (80020e4 <HAL_ADC_MspInit+0x1b8>)
 8002092:	2200      	movs	r2, #0
 8002094:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002096:	4b13      	ldr	r3, [pc, #76]	; (80020e4 <HAL_ADC_MspInit+0x1b8>)
 8002098:	2200      	movs	r2, #0
 800209a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800209c:	4811      	ldr	r0, [pc, #68]	; (80020e4 <HAL_ADC_MspInit+0x1b8>)
 800209e:	f002 fceb 	bl	8004a78 <HAL_DMA_Init>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <HAL_ADC_MspInit+0x180>
    {
      Error_Handler();
 80020a8:	f7ff f972 	bl	8001390 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a0d      	ldr	r2, [pc, #52]	; (80020e4 <HAL_ADC_MspInit+0x1b8>)
 80020b0:	64da      	str	r2, [r3, #76]	; 0x4c
 80020b2:	4a0c      	ldr	r2, [pc, #48]	; (80020e4 <HAL_ADC_MspInit+0x1b8>)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80020b8:	2200      	movs	r2, #0
 80020ba:	2100      	movs	r1, #0
 80020bc:	2012      	movs	r0, #18
 80020be:	f002 fca6 	bl	8004a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80020c2:	2012      	movs	r0, #18
 80020c4:	f002 fcbd 	bl	8004a42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020c8:	bf00      	nop
 80020ca:	37f0      	adds	r7, #240	; 0xf0
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40022000 	.word	0x40022000
 80020d4:	58024400 	.word	0x58024400
 80020d8:	58020800 	.word	0x58020800
 80020dc:	58020000 	.word	0x58020000
 80020e0:	58020400 	.word	0x58020400
 80020e4:	2400025c 	.word	0x2400025c
 80020e8:	40020040 	.word	0x40020040

080020ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b0bc      	sub	sp, #240	; 0xf0
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]
 8002102:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002104:	f107 0318 	add.w	r3, r7, #24
 8002108:	22c0      	movs	r2, #192	; 0xc0
 800210a:	2100      	movs	r1, #0
 800210c:	4618      	mov	r0, r3
 800210e:	f00e fb5e 	bl	80107ce <memset>
  if(hi2c->Instance==I2C1)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a4d      	ldr	r2, [pc, #308]	; (800224c <HAL_I2C_MspInit+0x160>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d147      	bne.n	80021ac <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800211c:	f04f 0208 	mov.w	r2, #8
 8002120:	f04f 0300 	mov.w	r3, #0
 8002124:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002128:	2300      	movs	r3, #0
 800212a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800212e:	f107 0318 	add.w	r3, r7, #24
 8002132:	4618      	mov	r0, r3
 8002134:	f006 ff76 	bl	8009024 <HAL_RCCEx_PeriphCLKConfig>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800213e:	f7ff f927 	bl	8001390 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002142:	4b43      	ldr	r3, [pc, #268]	; (8002250 <HAL_I2C_MspInit+0x164>)
 8002144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002148:	4a41      	ldr	r2, [pc, #260]	; (8002250 <HAL_I2C_MspInit+0x164>)
 800214a:	f043 0302 	orr.w	r3, r3, #2
 800214e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002152:	4b3f      	ldr	r3, [pc, #252]	; (8002250 <HAL_I2C_MspInit+0x164>)
 8002154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002160:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002164:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002168:	2312      	movs	r3, #18
 800216a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216e:	2300      	movs	r3, #0
 8002170:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002174:	2300      	movs	r3, #0
 8002176:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800217a:	2304      	movs	r3, #4
 800217c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002180:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002184:	4619      	mov	r1, r3
 8002186:	4833      	ldr	r0, [pc, #204]	; (8002254 <HAL_I2C_MspInit+0x168>)
 8002188:	f005 fab2 	bl	80076f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800218c:	4b30      	ldr	r3, [pc, #192]	; (8002250 <HAL_I2C_MspInit+0x164>)
 800218e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002192:	4a2f      	ldr	r2, [pc, #188]	; (8002250 <HAL_I2C_MspInit+0x164>)
 8002194:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002198:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800219c:	4b2c      	ldr	r3, [pc, #176]	; (8002250 <HAL_I2C_MspInit+0x164>)
 800219e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a6:	613b      	str	r3, [r7, #16]
 80021a8:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80021aa:	e04b      	b.n	8002244 <HAL_I2C_MspInit+0x158>
  else if(hi2c->Instance==I2C2)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a29      	ldr	r2, [pc, #164]	; (8002258 <HAL_I2C_MspInit+0x16c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d146      	bne.n	8002244 <HAL_I2C_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80021b6:	f04f 0208 	mov.w	r2, #8
 80021ba:	f04f 0300 	mov.w	r3, #0
 80021be:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80021c2:	2300      	movs	r3, #0
 80021c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021c8:	f107 0318 	add.w	r3, r7, #24
 80021cc:	4618      	mov	r0, r3
 80021ce:	f006 ff29 	bl	8009024 <HAL_RCCEx_PeriphCLKConfig>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 80021d8:	f7ff f8da 	bl	8001390 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021dc:	4b1c      	ldr	r3, [pc, #112]	; (8002250 <HAL_I2C_MspInit+0x164>)
 80021de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021e2:	4a1b      	ldr	r2, [pc, #108]	; (8002250 <HAL_I2C_MspInit+0x164>)
 80021e4:	f043 0302 	orr.w	r3, r3, #2
 80021e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021ec:	4b18      	ldr	r3, [pc, #96]	; (8002250 <HAL_I2C_MspInit+0x164>)
 80021ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80021fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80021fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002202:	2312      	movs	r3, #18
 8002204:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220e:	2300      	movs	r3, #0
 8002210:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002214:	2304      	movs	r3, #4
 8002216:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800221a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800221e:	4619      	mov	r1, r3
 8002220:	480c      	ldr	r0, [pc, #48]	; (8002254 <HAL_I2C_MspInit+0x168>)
 8002222:	f005 fa65 	bl	80076f0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002226:	4b0a      	ldr	r3, [pc, #40]	; (8002250 <HAL_I2C_MspInit+0x164>)
 8002228:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800222c:	4a08      	ldr	r2, [pc, #32]	; (8002250 <HAL_I2C_MspInit+0x164>)
 800222e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002232:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002236:	4b06      	ldr	r3, [pc, #24]	; (8002250 <HAL_I2C_MspInit+0x164>)
 8002238:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800223c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002240:	60bb      	str	r3, [r7, #8]
 8002242:	68bb      	ldr	r3, [r7, #8]
}
 8002244:	bf00      	nop
 8002246:	37f0      	adds	r7, #240	; 0xf0
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40005400 	.word	0x40005400
 8002250:	58024400 	.word	0x58024400
 8002254:	58020400 	.word	0x58020400
 8002258:	40005800 	.word	0x40005800

0800225c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b0be      	sub	sp, #248	; 0xf8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002264:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	60da      	str	r2, [r3, #12]
 8002272:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002274:	f107 0320 	add.w	r3, r7, #32
 8002278:	22c0      	movs	r2, #192	; 0xc0
 800227a:	2100      	movs	r1, #0
 800227c:	4618      	mov	r0, r3
 800227e:	f00e faa6 	bl	80107ce <memset>
  if(huart->Instance==LPUART1)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4aab      	ldr	r2, [pc, #684]	; (8002534 <HAL_UART_MspInit+0x2d8>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d147      	bne.n	800231c <HAL_UART_MspInit+0xc0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800228c:	f04f 0204 	mov.w	r2, #4
 8002290:	f04f 0300 	mov.w	r3, #0
 8002294:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8002298:	2300      	movs	r3, #0
 800229a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800229e:	f107 0320 	add.w	r3, r7, #32
 80022a2:	4618      	mov	r0, r3
 80022a4:	f006 febe 	bl	8009024 <HAL_RCCEx_PeriphCLKConfig>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80022ae:	f7ff f86f 	bl	8001390 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80022b2:	4ba1      	ldr	r3, [pc, #644]	; (8002538 <HAL_UART_MspInit+0x2dc>)
 80022b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022b8:	4a9f      	ldr	r2, [pc, #636]	; (8002538 <HAL_UART_MspInit+0x2dc>)
 80022ba:	f043 0308 	orr.w	r3, r3, #8
 80022be:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80022c2:	4b9d      	ldr	r3, [pc, #628]	; (8002538 <HAL_UART_MspInit+0x2dc>)
 80022c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022c8:	f003 0308 	and.w	r3, r3, #8
 80022cc:	61fb      	str	r3, [r7, #28]
 80022ce:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d0:	4b99      	ldr	r3, [pc, #612]	; (8002538 <HAL_UART_MspInit+0x2dc>)
 80022d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022d6:	4a98      	ldr	r2, [pc, #608]	; (8002538 <HAL_UART_MspInit+0x2dc>)
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022e0:	4b95      	ldr	r3, [pc, #596]	; (8002538 <HAL_UART_MspInit+0x2dc>)
 80022e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	61bb      	str	r3, [r7, #24]
 80022ec:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f6:	2302      	movs	r3, #2
 80022f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002302:	2300      	movs	r3, #0
 8002304:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 8002308:	2303      	movs	r3, #3
 800230a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002312:	4619      	mov	r1, r3
 8002314:	4889      	ldr	r0, [pc, #548]	; (800253c <HAL_UART_MspInit+0x2e0>)
 8002316:	f005 f9eb 	bl	80076f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 800231a:	e106      	b.n	800252a <HAL_UART_MspInit+0x2ce>
  else if(huart->Instance==UART5)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a87      	ldr	r2, [pc, #540]	; (8002540 <HAL_UART_MspInit+0x2e4>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d17e      	bne.n	8002424 <HAL_UART_MspInit+0x1c8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002326:	f04f 0202 	mov.w	r2, #2
 800232a:	f04f 0300 	mov.w	r3, #0
 800232e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002332:	2300      	movs	r3, #0
 8002334:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002338:	f107 0320 	add.w	r3, r7, #32
 800233c:	4618      	mov	r0, r3
 800233e:	f006 fe71 	bl	8009024 <HAL_RCCEx_PeriphCLKConfig>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002348:	f7ff f822 	bl	8001390 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800234c:	4b7a      	ldr	r3, [pc, #488]	; (8002538 <HAL_UART_MspInit+0x2dc>)
 800234e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002352:	4a79      	ldr	r2, [pc, #484]	; (8002538 <HAL_UART_MspInit+0x2dc>)
 8002354:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002358:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800235c:	4b76      	ldr	r3, [pc, #472]	; (8002538 <HAL_UART_MspInit+0x2dc>)
 800235e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002362:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002366:	617b      	str	r3, [r7, #20]
 8002368:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800236a:	4b73      	ldr	r3, [pc, #460]	; (8002538 <HAL_UART_MspInit+0x2dc>)
 800236c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002370:	4a71      	ldr	r2, [pc, #452]	; (8002538 <HAL_UART_MspInit+0x2dc>)
 8002372:	f043 0302 	orr.w	r3, r3, #2
 8002376:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800237a:	4b6f      	ldr	r3, [pc, #444]	; (8002538 <HAL_UART_MspInit+0x2dc>)
 800237c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002388:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800238c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002390:	2302      	movs	r3, #2
 8002392:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002396:	2300      	movs	r3, #0
 8002398:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239c:	2300      	movs	r3, #0
 800239e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80023a2:	230e      	movs	r3, #14
 80023a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80023ac:	4619      	mov	r1, r3
 80023ae:	4865      	ldr	r0, [pc, #404]	; (8002544 <HAL_UART_MspInit+0x2e8>)
 80023b0:	f005 f99e 	bl	80076f0 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80023b4:	4b64      	ldr	r3, [pc, #400]	; (8002548 <HAL_UART_MspInit+0x2ec>)
 80023b6:	4a65      	ldr	r2, [pc, #404]	; (800254c <HAL_UART_MspInit+0x2f0>)
 80023b8:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 80023ba:	4b63      	ldr	r3, [pc, #396]	; (8002548 <HAL_UART_MspInit+0x2ec>)
 80023bc:	2241      	movs	r2, #65	; 0x41
 80023be:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023c0:	4b61      	ldr	r3, [pc, #388]	; (8002548 <HAL_UART_MspInit+0x2ec>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023c6:	4b60      	ldr	r3, [pc, #384]	; (8002548 <HAL_UART_MspInit+0x2ec>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023cc:	4b5e      	ldr	r3, [pc, #376]	; (8002548 <HAL_UART_MspInit+0x2ec>)
 80023ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023d2:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023d4:	4b5c      	ldr	r3, [pc, #368]	; (8002548 <HAL_UART_MspInit+0x2ec>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023da:	4b5b      	ldr	r3, [pc, #364]	; (8002548 <HAL_UART_MspInit+0x2ec>)
 80023dc:	2200      	movs	r2, #0
 80023de:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 80023e0:	4b59      	ldr	r3, [pc, #356]	; (8002548 <HAL_UART_MspInit+0x2ec>)
 80023e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023e6:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80023e8:	4b57      	ldr	r3, [pc, #348]	; (8002548 <HAL_UART_MspInit+0x2ec>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023ee:	4b56      	ldr	r3, [pc, #344]	; (8002548 <HAL_UART_MspInit+0x2ec>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80023f4:	4854      	ldr	r0, [pc, #336]	; (8002548 <HAL_UART_MspInit+0x2ec>)
 80023f6:	f002 fb3f 	bl	8004a78 <HAL_DMA_Init>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8002400:	f7fe ffc6 	bl	8001390 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a50      	ldr	r2, [pc, #320]	; (8002548 <HAL_UART_MspInit+0x2ec>)
 8002408:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800240c:	4a4e      	ldr	r2, [pc, #312]	; (8002548 <HAL_UART_MspInit+0x2ec>)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002412:	2200      	movs	r2, #0
 8002414:	2100      	movs	r1, #0
 8002416:	2035      	movs	r0, #53	; 0x35
 8002418:	f002 faf9 	bl	8004a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800241c:	2035      	movs	r0, #53	; 0x35
 800241e:	f002 fb10 	bl	8004a42 <HAL_NVIC_EnableIRQ>
}
 8002422:	e082      	b.n	800252a <HAL_UART_MspInit+0x2ce>
  else if(huart->Instance==UART7)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a49      	ldr	r2, [pc, #292]	; (8002550 <HAL_UART_MspInit+0x2f4>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d17d      	bne.n	800252a <HAL_UART_MspInit+0x2ce>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800242e:	f04f 0202 	mov.w	r2, #2
 8002432:	f04f 0300 	mov.w	r3, #0
 8002436:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800243a:	2300      	movs	r3, #0
 800243c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002440:	f107 0320 	add.w	r3, r7, #32
 8002444:	4618      	mov	r0, r3
 8002446:	f006 fded 	bl	8009024 <HAL_RCCEx_PeriphCLKConfig>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <HAL_UART_MspInit+0x1f8>
      Error_Handler();
 8002450:	f7fe ff9e 	bl	8001390 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002454:	4b38      	ldr	r3, [pc, #224]	; (8002538 <HAL_UART_MspInit+0x2dc>)
 8002456:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800245a:	4a37      	ldr	r2, [pc, #220]	; (8002538 <HAL_UART_MspInit+0x2dc>)
 800245c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002460:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002464:	4b34      	ldr	r3, [pc, #208]	; (8002538 <HAL_UART_MspInit+0x2dc>)
 8002466:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800246a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002472:	4b31      	ldr	r3, [pc, #196]	; (8002538 <HAL_UART_MspInit+0x2dc>)
 8002474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002478:	4a2f      	ldr	r2, [pc, #188]	; (8002538 <HAL_UART_MspInit+0x2dc>)
 800247a:	f043 0310 	orr.w	r3, r3, #16
 800247e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002482:	4b2d      	ldr	r3, [pc, #180]	; (8002538 <HAL_UART_MspInit+0x2dc>)
 8002484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002488:	f003 0310 	and.w	r3, r3, #16
 800248c:	60bb      	str	r3, [r7, #8]
 800248e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002490:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002494:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002498:	2302      	movs	r3, #2
 800249a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a4:	2300      	movs	r3, #0
 80024a6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80024aa:	2307      	movs	r3, #7
 80024ac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024b0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80024b4:	4619      	mov	r1, r3
 80024b6:	4827      	ldr	r0, [pc, #156]	; (8002554 <HAL_UART_MspInit+0x2f8>)
 80024b8:	f005 f91a 	bl	80076f0 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream1;
 80024bc:	4b26      	ldr	r3, [pc, #152]	; (8002558 <HAL_UART_MspInit+0x2fc>)
 80024be:	4a27      	ldr	r2, [pc, #156]	; (800255c <HAL_UART_MspInit+0x300>)
 80024c0:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 80024c2:	4b25      	ldr	r3, [pc, #148]	; (8002558 <HAL_UART_MspInit+0x2fc>)
 80024c4:	224f      	movs	r2, #79	; 0x4f
 80024c6:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024c8:	4b23      	ldr	r3, [pc, #140]	; (8002558 <HAL_UART_MspInit+0x2fc>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024ce:	4b22      	ldr	r3, [pc, #136]	; (8002558 <HAL_UART_MspInit+0x2fc>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024d4:	4b20      	ldr	r3, [pc, #128]	; (8002558 <HAL_UART_MspInit+0x2fc>)
 80024d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024da:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024dc:	4b1e      	ldr	r3, [pc, #120]	; (8002558 <HAL_UART_MspInit+0x2fc>)
 80024de:	2200      	movs	r2, #0
 80024e0:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024e2:	4b1d      	ldr	r3, [pc, #116]	; (8002558 <HAL_UART_MspInit+0x2fc>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 80024e8:	4b1b      	ldr	r3, [pc, #108]	; (8002558 <HAL_UART_MspInit+0x2fc>)
 80024ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024ee:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024f0:	4b19      	ldr	r3, [pc, #100]	; (8002558 <HAL_UART_MspInit+0x2fc>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024f6:	4b18      	ldr	r3, [pc, #96]	; (8002558 <HAL_UART_MspInit+0x2fc>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 80024fc:	4816      	ldr	r0, [pc, #88]	; (8002558 <HAL_UART_MspInit+0x2fc>)
 80024fe:	f002 fabb 	bl	8004a78 <HAL_DMA_Init>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <HAL_UART_MspInit+0x2b0>
      Error_Handler();
 8002508:	f7fe ff42 	bl	8001390 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a12      	ldr	r2, [pc, #72]	; (8002558 <HAL_UART_MspInit+0x2fc>)
 8002510:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002514:	4a10      	ldr	r2, [pc, #64]	; (8002558 <HAL_UART_MspInit+0x2fc>)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 800251a:	2200      	movs	r2, #0
 800251c:	2100      	movs	r1, #0
 800251e:	2052      	movs	r0, #82	; 0x52
 8002520:	f002 fa75 	bl	8004a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002524:	2052      	movs	r0, #82	; 0x52
 8002526:	f002 fa8c 	bl	8004a42 <HAL_NVIC_EnableIRQ>
}
 800252a:	bf00      	nop
 800252c:	37f8      	adds	r7, #248	; 0xf8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	58000c00 	.word	0x58000c00
 8002538:	58024400 	.word	0x58024400
 800253c:	58020000 	.word	0x58020000
 8002540:	40005000 	.word	0x40005000
 8002544:	58020400 	.word	0x58020400
 8002548:	24000538 	.word	0x24000538
 800254c:	40020010 	.word	0x40020010
 8002550:	40007800 	.word	0x40007800
 8002554:	58021000 	.word	0x58021000
 8002558:	240005b0 	.word	0x240005b0
 800255c:	40020028 	.word	0x40020028

08002560 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b08e      	sub	sp, #56	; 0x38
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002568:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	605a      	str	r2, [r3, #4]
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	60da      	str	r2, [r3, #12]
 8002576:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002580:	d10f      	bne.n	80025a2 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002582:	4b5e      	ldr	r3, [pc, #376]	; (80026fc <HAL_TIM_Base_MspInit+0x19c>)
 8002584:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002588:	4a5c      	ldr	r2, [pc, #368]	; (80026fc <HAL_TIM_Base_MspInit+0x19c>)
 800258a:	f043 0301 	orr.w	r3, r3, #1
 800258e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002592:	4b5a      	ldr	r3, [pc, #360]	; (80026fc <HAL_TIM_Base_MspInit+0x19c>)
 8002594:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	623b      	str	r3, [r7, #32]
 800259e:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80025a0:	e0a8      	b.n	80026f4 <HAL_TIM_Base_MspInit+0x194>
  else if(htim_base->Instance==TIM3)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a56      	ldr	r2, [pc, #344]	; (8002700 <HAL_TIM_Base_MspInit+0x1a0>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d10f      	bne.n	80025cc <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025ac:	4b53      	ldr	r3, [pc, #332]	; (80026fc <HAL_TIM_Base_MspInit+0x19c>)
 80025ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025b2:	4a52      	ldr	r2, [pc, #328]	; (80026fc <HAL_TIM_Base_MspInit+0x19c>)
 80025b4:	f043 0302 	orr.w	r3, r3, #2
 80025b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80025bc:	4b4f      	ldr	r3, [pc, #316]	; (80026fc <HAL_TIM_Base_MspInit+0x19c>)
 80025be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	61fb      	str	r3, [r7, #28]
 80025c8:	69fb      	ldr	r3, [r7, #28]
}
 80025ca:	e093      	b.n	80026f4 <HAL_TIM_Base_MspInit+0x194>
  else if(htim_base->Instance==TIM5)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a4c      	ldr	r2, [pc, #304]	; (8002704 <HAL_TIM_Base_MspInit+0x1a4>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d136      	bne.n	8002644 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80025d6:	4b49      	ldr	r3, [pc, #292]	; (80026fc <HAL_TIM_Base_MspInit+0x19c>)
 80025d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025dc:	4a47      	ldr	r2, [pc, #284]	; (80026fc <HAL_TIM_Base_MspInit+0x19c>)
 80025de:	f043 0308 	orr.w	r3, r3, #8
 80025e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80025e6:	4b45      	ldr	r3, [pc, #276]	; (80026fc <HAL_TIM_Base_MspInit+0x19c>)
 80025e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025ec:	f003 0308 	and.w	r3, r3, #8
 80025f0:	61bb      	str	r3, [r7, #24]
 80025f2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f4:	4b41      	ldr	r3, [pc, #260]	; (80026fc <HAL_TIM_Base_MspInit+0x19c>)
 80025f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025fa:	4a40      	ldr	r2, [pc, #256]	; (80026fc <HAL_TIM_Base_MspInit+0x19c>)
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002604:	4b3d      	ldr	r3, [pc, #244]	; (80026fc <HAL_TIM_Base_MspInit+0x19c>)
 8002606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	617b      	str	r3, [r7, #20]
 8002610:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002612:	2301      	movs	r3, #1
 8002614:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002616:	2302      	movs	r3, #2
 8002618:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261a:	2300      	movs	r3, #0
 800261c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261e:	2300      	movs	r3, #0
 8002620:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002622:	2302      	movs	r3, #2
 8002624:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800262a:	4619      	mov	r1, r3
 800262c:	4836      	ldr	r0, [pc, #216]	; (8002708 <HAL_TIM_Base_MspInit+0x1a8>)
 800262e:	f005 f85f 	bl	80076f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002632:	2200      	movs	r2, #0
 8002634:	2100      	movs	r1, #0
 8002636:	2032      	movs	r0, #50	; 0x32
 8002638:	f002 f9e9 	bl	8004a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800263c:	2032      	movs	r0, #50	; 0x32
 800263e:	f002 fa00 	bl	8004a42 <HAL_NVIC_EnableIRQ>
}
 8002642:	e057      	b.n	80026f4 <HAL_TIM_Base_MspInit+0x194>
  else if(htim_base->Instance==TIM15)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a30      	ldr	r2, [pc, #192]	; (800270c <HAL_TIM_Base_MspInit+0x1ac>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d136      	bne.n	80026bc <HAL_TIM_Base_MspInit+0x15c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800264e:	4b2b      	ldr	r3, [pc, #172]	; (80026fc <HAL_TIM_Base_MspInit+0x19c>)
 8002650:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002654:	4a29      	ldr	r2, [pc, #164]	; (80026fc <HAL_TIM_Base_MspInit+0x19c>)
 8002656:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800265a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800265e:	4b27      	ldr	r3, [pc, #156]	; (80026fc <HAL_TIM_Base_MspInit+0x19c>)
 8002660:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800266c:	4b23      	ldr	r3, [pc, #140]	; (80026fc <HAL_TIM_Base_MspInit+0x19c>)
 800266e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002672:	4a22      	ldr	r2, [pc, #136]	; (80026fc <HAL_TIM_Base_MspInit+0x19c>)
 8002674:	f043 0310 	orr.w	r3, r3, #16
 8002678:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800267c:	4b1f      	ldr	r3, [pc, #124]	; (80026fc <HAL_TIM_Base_MspInit+0x19c>)
 800267e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002682:	f003 0310 	and.w	r3, r3, #16
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800268a:	2320      	movs	r3, #32
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268e:	2302      	movs	r3, #2
 8002690:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002692:	2300      	movs	r3, #0
 8002694:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002696:	2300      	movs	r3, #0
 8002698:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800269a:	2304      	movs	r3, #4
 800269c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800269e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026a2:	4619      	mov	r1, r3
 80026a4:	481a      	ldr	r0, [pc, #104]	; (8002710 <HAL_TIM_Base_MspInit+0x1b0>)
 80026a6:	f005 f823 	bl	80076f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 80026aa:	2200      	movs	r2, #0
 80026ac:	2100      	movs	r1, #0
 80026ae:	2074      	movs	r0, #116	; 0x74
 80026b0:	f002 f9ad 	bl	8004a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 80026b4:	2074      	movs	r0, #116	; 0x74
 80026b6:	f002 f9c4 	bl	8004a42 <HAL_NVIC_EnableIRQ>
}
 80026ba:	e01b      	b.n	80026f4 <HAL_TIM_Base_MspInit+0x194>
  else if(htim_base->Instance==TIM16)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a14      	ldr	r2, [pc, #80]	; (8002714 <HAL_TIM_Base_MspInit+0x1b4>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d116      	bne.n	80026f4 <HAL_TIM_Base_MspInit+0x194>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80026c6:	4b0d      	ldr	r3, [pc, #52]	; (80026fc <HAL_TIM_Base_MspInit+0x19c>)
 80026c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026cc:	4a0b      	ldr	r2, [pc, #44]	; (80026fc <HAL_TIM_Base_MspInit+0x19c>)
 80026ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80026d6:	4b09      	ldr	r3, [pc, #36]	; (80026fc <HAL_TIM_Base_MspInit+0x19c>)
 80026d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80026e4:	2200      	movs	r2, #0
 80026e6:	2100      	movs	r1, #0
 80026e8:	2075      	movs	r0, #117	; 0x75
 80026ea:	f002 f990 	bl	8004a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80026ee:	2075      	movs	r0, #117	; 0x75
 80026f0:	f002 f9a7 	bl	8004a42 <HAL_NVIC_EnableIRQ>
}
 80026f4:	bf00      	nop
 80026f6:	3738      	adds	r7, #56	; 0x38
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	58024400 	.word	0x58024400
 8002700:	40000400 	.word	0x40000400
 8002704:	40000c00 	.word	0x40000c00
 8002708:	58020000 	.word	0x58020000
 800270c:	40014000 	.word	0x40014000
 8002710:	58021000 	.word	0x58021000
 8002714:	40014400 	.word	0x40014400

08002718 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b08a      	sub	sp, #40	; 0x28
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002720:	f107 0314 	add.w	r3, r7, #20
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	605a      	str	r2, [r3, #4]
 800272a:	609a      	str	r2, [r3, #8]
 800272c:	60da      	str	r2, [r3, #12]
 800272e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002738:	d120      	bne.n	800277c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800273a:	4b24      	ldr	r3, [pc, #144]	; (80027cc <HAL_TIM_MspPostInit+0xb4>)
 800273c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002740:	4a22      	ldr	r2, [pc, #136]	; (80027cc <HAL_TIM_MspPostInit+0xb4>)
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800274a:	4b20      	ldr	r3, [pc, #128]	; (80027cc <HAL_TIM_MspPostInit+0xb4>)
 800274c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	693b      	ldr	r3, [r7, #16]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8002758:	f248 030e 	movw	r3, #32782	; 0x800e
 800275c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275e:	2302      	movs	r3, #2
 8002760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002762:	2300      	movs	r3, #0
 8002764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002766:	2300      	movs	r3, #0
 8002768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800276a:	2301      	movs	r3, #1
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800276e:	f107 0314 	add.w	r3, r7, #20
 8002772:	4619      	mov	r1, r3
 8002774:	4816      	ldr	r0, [pc, #88]	; (80027d0 <HAL_TIM_MspPostInit+0xb8>)
 8002776:	f004 ffbb 	bl	80076f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800277a:	e023      	b.n	80027c4 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM3)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a14      	ldr	r2, [pc, #80]	; (80027d4 <HAL_TIM_MspPostInit+0xbc>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d11e      	bne.n	80027c4 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002786:	4b11      	ldr	r3, [pc, #68]	; (80027cc <HAL_TIM_MspPostInit+0xb4>)
 8002788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800278c:	4a0f      	ldr	r2, [pc, #60]	; (80027cc <HAL_TIM_MspPostInit+0xb4>)
 800278e:	f043 0304 	orr.w	r3, r3, #4
 8002792:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002796:	4b0d      	ldr	r3, [pc, #52]	; (80027cc <HAL_TIM_MspPostInit+0xb4>)
 8002798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027a4:	23c0      	movs	r3, #192	; 0xc0
 80027a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a8:	2302      	movs	r3, #2
 80027aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b0:	2300      	movs	r3, #0
 80027b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027b4:	2302      	movs	r3, #2
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027b8:	f107 0314 	add.w	r3, r7, #20
 80027bc:	4619      	mov	r1, r3
 80027be:	4806      	ldr	r0, [pc, #24]	; (80027d8 <HAL_TIM_MspPostInit+0xc0>)
 80027c0:	f004 ff96 	bl	80076f0 <HAL_GPIO_Init>
}
 80027c4:	bf00      	nop
 80027c6:	3728      	adds	r7, #40	; 0x28
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	58024400 	.word	0x58024400
 80027d0:	58020000 	.word	0x58020000
 80027d4:	40000400 	.word	0x40000400
 80027d8:	58020800 	.word	0x58020800

080027dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027e0:	e7fe      	b.n	80027e0 <NMI_Handler+0x4>

080027e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027e2:	b480      	push	{r7}
 80027e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027e6:	e7fe      	b.n	80027e6 <HardFault_Handler+0x4>

080027e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027ec:	e7fe      	b.n	80027ec <MemManage_Handler+0x4>

080027ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027ee:	b480      	push	{r7}
 80027f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027f2:	e7fe      	b.n	80027f2 <BusFault_Handler+0x4>

080027f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027f8:	e7fe      	b.n	80027f8 <UsageFault_Handler+0x4>

080027fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027fa:	b480      	push	{r7}
 80027fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800280c:	bf00      	nop
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002816:	b480      	push	{r7}
 8002818:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800281a:	bf00      	nop
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002828:	f000 fa46 	bl	8002cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800282c:	bf00      	nop
 800282e:	bd80      	pop	{r7, pc}

08002830 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002834:	4802      	ldr	r0, [pc, #8]	; (8002840 <DMA1_Stream0_IRQHandler+0x10>)
 8002836:	f003 fc49 	bl	80060cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800283a:	bf00      	nop
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	24000538 	.word	0x24000538

08002844 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8002848:	4802      	ldr	r0, [pc, #8]	; (8002854 <DMA1_Stream1_IRQHandler+0x10>)
 800284a:	f003 fc3f 	bl	80060cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	240005b0 	.word	0x240005b0

08002858 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800285c:	4802      	ldr	r0, [pc, #8]	; (8002868 <DMA1_Stream2_IRQHandler+0x10>)
 800285e:	f003 fc35 	bl	80060cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	2400025c 	.word	0x2400025c

0800286c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002870:	4802      	ldr	r0, [pc, #8]	; (800287c <ADC_IRQHandler+0x10>)
 8002872:	f000 fedf 	bl	8003634 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002876:	bf00      	nop
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	240001f8 	.word	0x240001f8

08002880 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002884:	4802      	ldr	r0, [pc, #8]	; (8002890 <TIM5_IRQHandler+0x10>)
 8002886:	f009 ff1f 	bl	800c6c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800288a:	bf00      	nop
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	240006c0 	.word	0x240006c0

08002894 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002898:	4802      	ldr	r0, [pc, #8]	; (80028a4 <UART5_IRQHandler+0x10>)
 800289a:	f00b fb9f 	bl	800dfdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800289e:	bf00      	nop
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	24000410 	.word	0x24000410

080028a8 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80028ac:	4802      	ldr	r0, [pc, #8]	; (80028b8 <UART7_IRQHandler+0x10>)
 80028ae:	f00b fb95 	bl	800dfdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80028b2:	bf00      	nop
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	240004a4 	.word	0x240004a4

080028bc <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80028c0:	4802      	ldr	r0, [pc, #8]	; (80028cc <TIM15_IRQHandler+0x10>)
 80028c2:	f009 ff01 	bl	800c6c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 80028c6:	bf00      	nop
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	2400070c 	.word	0x2400070c

080028d0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80028d4:	4802      	ldr	r0, [pc, #8]	; (80028e0 <TIM16_IRQHandler+0x10>)
 80028d6:	f009 fef7 	bl	800c6c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80028da:	bf00      	nop
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	24000758 	.word	0x24000758

080028e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  return 1;
 80028e8:	2301      	movs	r3, #1
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <_kill>:

int _kill(int pid, int sig)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80028fe:	f00d ffb9 	bl	8010874 <__errno>
 8002902:	4603      	mov	r3, r0
 8002904:	2216      	movs	r2, #22
 8002906:	601a      	str	r2, [r3, #0]
  return -1;
 8002908:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800290c:	4618      	mov	r0, r3
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <_exit>:

void _exit (int status)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800291c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7ff ffe7 	bl	80028f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002926:	e7fe      	b.n	8002926 <_exit+0x12>

08002928 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]
 8002938:	e00a      	b.n	8002950 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800293a:	f3af 8000 	nop.w
 800293e:	4601      	mov	r1, r0
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	1c5a      	adds	r2, r3, #1
 8002944:	60ba      	str	r2, [r7, #8]
 8002946:	b2ca      	uxtb	r2, r1
 8002948:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	3301      	adds	r3, #1
 800294e:	617b      	str	r3, [r7, #20]
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	429a      	cmp	r2, r3
 8002956:	dbf0      	blt.n	800293a <_read+0x12>
  }

  return len;
 8002958:	687b      	ldr	r3, [r7, #4]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3718      	adds	r7, #24
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b086      	sub	sp, #24
 8002966:	af00      	add	r7, sp, #0
 8002968:	60f8      	str	r0, [r7, #12]
 800296a:	60b9      	str	r1, [r7, #8]
 800296c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800296e:	2300      	movs	r3, #0
 8002970:	617b      	str	r3, [r7, #20]
 8002972:	e009      	b.n	8002988 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	1c5a      	adds	r2, r3, #1
 8002978:	60ba      	str	r2, [r7, #8]
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	3301      	adds	r3, #1
 8002986:	617b      	str	r3, [r7, #20]
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	429a      	cmp	r2, r3
 800298e:	dbf1      	blt.n	8002974 <_write+0x12>
  }
  return len;
 8002990:	687b      	ldr	r3, [r7, #4]
}
 8002992:	4618      	mov	r0, r3
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <_close>:

int _close(int file)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029c2:	605a      	str	r2, [r3, #4]
  return 0;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <_isatty>:

int _isatty(int file)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029da:	2301      	movs	r3, #1
}
 80029dc:	4618      	mov	r0, r3
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
	...

08002a04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a0c:	4a14      	ldr	r2, [pc, #80]	; (8002a60 <_sbrk+0x5c>)
 8002a0e:	4b15      	ldr	r3, [pc, #84]	; (8002a64 <_sbrk+0x60>)
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a18:	4b13      	ldr	r3, [pc, #76]	; (8002a68 <_sbrk+0x64>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d102      	bne.n	8002a26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a20:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <_sbrk+0x64>)
 8002a22:	4a12      	ldr	r2, [pc, #72]	; (8002a6c <_sbrk+0x68>)
 8002a24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a26:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <_sbrk+0x64>)
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d207      	bcs.n	8002a44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a34:	f00d ff1e 	bl	8010874 <__errno>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	220c      	movs	r2, #12
 8002a3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a42:	e009      	b.n	8002a58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a44:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <_sbrk+0x64>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a4a:	4b07      	ldr	r3, [pc, #28]	; (8002a68 <_sbrk+0x64>)
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4413      	add	r3, r2
 8002a52:	4a05      	ldr	r2, [pc, #20]	; (8002a68 <_sbrk+0x64>)
 8002a54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a56:	68fb      	ldr	r3, [r7, #12]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	24080000 	.word	0x24080000
 8002a64:	00000400 	.word	0x00000400
 8002a68:	2400085c 	.word	0x2400085c
 8002a6c:	240009b0 	.word	0x240009b0

08002a70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002a74:	4b37      	ldr	r3, [pc, #220]	; (8002b54 <SystemInit+0xe4>)
 8002a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7a:	4a36      	ldr	r2, [pc, #216]	; (8002b54 <SystemInit+0xe4>)
 8002a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002a84:	4b34      	ldr	r3, [pc, #208]	; (8002b58 <SystemInit+0xe8>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 030f 	and.w	r3, r3, #15
 8002a8c:	2b06      	cmp	r3, #6
 8002a8e:	d807      	bhi.n	8002aa0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002a90:	4b31      	ldr	r3, [pc, #196]	; (8002b58 <SystemInit+0xe8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f023 030f 	bic.w	r3, r3, #15
 8002a98:	4a2f      	ldr	r2, [pc, #188]	; (8002b58 <SystemInit+0xe8>)
 8002a9a:	f043 0307 	orr.w	r3, r3, #7
 8002a9e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002aa0:	4b2e      	ldr	r3, [pc, #184]	; (8002b5c <SystemInit+0xec>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a2d      	ldr	r2, [pc, #180]	; (8002b5c <SystemInit+0xec>)
 8002aa6:	f043 0301 	orr.w	r3, r3, #1
 8002aaa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002aac:	4b2b      	ldr	r3, [pc, #172]	; (8002b5c <SystemInit+0xec>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002ab2:	4b2a      	ldr	r3, [pc, #168]	; (8002b5c <SystemInit+0xec>)
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	4929      	ldr	r1, [pc, #164]	; (8002b5c <SystemInit+0xec>)
 8002ab8:	4b29      	ldr	r3, [pc, #164]	; (8002b60 <SystemInit+0xf0>)
 8002aba:	4013      	ands	r3, r2
 8002abc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002abe:	4b26      	ldr	r3, [pc, #152]	; (8002b58 <SystemInit+0xe8>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d007      	beq.n	8002ada <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002aca:	4b23      	ldr	r3, [pc, #140]	; (8002b58 <SystemInit+0xe8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f023 030f 	bic.w	r3, r3, #15
 8002ad2:	4a21      	ldr	r2, [pc, #132]	; (8002b58 <SystemInit+0xe8>)
 8002ad4:	f043 0307 	orr.w	r3, r3, #7
 8002ad8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002ada:	4b20      	ldr	r3, [pc, #128]	; (8002b5c <SystemInit+0xec>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002ae0:	4b1e      	ldr	r3, [pc, #120]	; (8002b5c <SystemInit+0xec>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002ae6:	4b1d      	ldr	r3, [pc, #116]	; (8002b5c <SystemInit+0xec>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002aec:	4b1b      	ldr	r3, [pc, #108]	; (8002b5c <SystemInit+0xec>)
 8002aee:	4a1d      	ldr	r2, [pc, #116]	; (8002b64 <SystemInit+0xf4>)
 8002af0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002af2:	4b1a      	ldr	r3, [pc, #104]	; (8002b5c <SystemInit+0xec>)
 8002af4:	4a1c      	ldr	r2, [pc, #112]	; (8002b68 <SystemInit+0xf8>)
 8002af6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002af8:	4b18      	ldr	r3, [pc, #96]	; (8002b5c <SystemInit+0xec>)
 8002afa:	4a1c      	ldr	r2, [pc, #112]	; (8002b6c <SystemInit+0xfc>)
 8002afc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002afe:	4b17      	ldr	r3, [pc, #92]	; (8002b5c <SystemInit+0xec>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002b04:	4b15      	ldr	r3, [pc, #84]	; (8002b5c <SystemInit+0xec>)
 8002b06:	4a19      	ldr	r2, [pc, #100]	; (8002b6c <SystemInit+0xfc>)
 8002b08:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002b0a:	4b14      	ldr	r3, [pc, #80]	; (8002b5c <SystemInit+0xec>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002b10:	4b12      	ldr	r3, [pc, #72]	; (8002b5c <SystemInit+0xec>)
 8002b12:	4a16      	ldr	r2, [pc, #88]	; (8002b6c <SystemInit+0xfc>)
 8002b14:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002b16:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <SystemInit+0xec>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002b1c:	4b0f      	ldr	r3, [pc, #60]	; (8002b5c <SystemInit+0xec>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a0e      	ldr	r2, [pc, #56]	; (8002b5c <SystemInit+0xec>)
 8002b22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b26:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002b28:	4b0c      	ldr	r3, [pc, #48]	; (8002b5c <SystemInit+0xec>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002b2e:	4b10      	ldr	r3, [pc, #64]	; (8002b70 <SystemInit+0x100>)
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	4b10      	ldr	r3, [pc, #64]	; (8002b74 <SystemInit+0x104>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b3a:	d202      	bcs.n	8002b42 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002b3c:	4b0e      	ldr	r3, [pc, #56]	; (8002b78 <SystemInit+0x108>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002b42:	4b0e      	ldr	r3, [pc, #56]	; (8002b7c <SystemInit+0x10c>)
 8002b44:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002b48:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002b4a:	bf00      	nop
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	e000ed00 	.word	0xe000ed00
 8002b58:	52002000 	.word	0x52002000
 8002b5c:	58024400 	.word	0x58024400
 8002b60:	eaf6ed7f 	.word	0xeaf6ed7f
 8002b64:	02020200 	.word	0x02020200
 8002b68:	01ff0000 	.word	0x01ff0000
 8002b6c:	01010280 	.word	0x01010280
 8002b70:	5c001000 	.word	0x5c001000
 8002b74:	ffff0000 	.word	0xffff0000
 8002b78:	51008108 	.word	0x51008108
 8002b7c:	52004000 	.word	0x52004000

08002b80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002b80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bb8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b84:	f7ff ff74 	bl	8002a70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b88:	480c      	ldr	r0, [pc, #48]	; (8002bbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b8a:	490d      	ldr	r1, [pc, #52]	; (8002bc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b8c:	4a0d      	ldr	r2, [pc, #52]	; (8002bc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b90:	e002      	b.n	8002b98 <LoopCopyDataInit>

08002b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b96:	3304      	adds	r3, #4

08002b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b9c:	d3f9      	bcc.n	8002b92 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b9e:	4a0a      	ldr	r2, [pc, #40]	; (8002bc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ba0:	4c0a      	ldr	r4, [pc, #40]	; (8002bcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ba4:	e001      	b.n	8002baa <LoopFillZerobss>

08002ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ba8:	3204      	adds	r2, #4

08002baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bac:	d3fb      	bcc.n	8002ba6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bae:	f00d fe67 	bl	8010880 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bb2:	f7fd fd6b 	bl	800068c <main>
  bx  lr
 8002bb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002bb8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002bbc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002bc0:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 8002bc4:	08012e3c 	.word	0x08012e3c
  ldr r2, =_sbss
 8002bc8:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 8002bcc:	240009b0 	.word	0x240009b0

08002bd0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bd0:	e7fe      	b.n	8002bd0 <ADC3_IRQHandler>
	...

08002bd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bda:	2003      	movs	r0, #3
 8002bdc:	f001 ff0c 	bl	80049f8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002be0:	f006 f84a 	bl	8008c78 <HAL_RCC_GetSysClockFreq>
 8002be4:	4602      	mov	r2, r0
 8002be6:	4b15      	ldr	r3, [pc, #84]	; (8002c3c <HAL_Init+0x68>)
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	0a1b      	lsrs	r3, r3, #8
 8002bec:	f003 030f 	and.w	r3, r3, #15
 8002bf0:	4913      	ldr	r1, [pc, #76]	; (8002c40 <HAL_Init+0x6c>)
 8002bf2:	5ccb      	ldrb	r3, [r1, r3]
 8002bf4:	f003 031f 	and.w	r3, r3, #31
 8002bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bfc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002bfe:	4b0f      	ldr	r3, [pc, #60]	; (8002c3c <HAL_Init+0x68>)
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	4a0e      	ldr	r2, [pc, #56]	; (8002c40 <HAL_Init+0x6c>)
 8002c08:	5cd3      	ldrb	r3, [r2, r3]
 8002c0a:	f003 031f 	and.w	r3, r3, #31
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	fa22 f303 	lsr.w	r3, r2, r3
 8002c14:	4a0b      	ldr	r2, [pc, #44]	; (8002c44 <HAL_Init+0x70>)
 8002c16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c18:	4a0b      	ldr	r2, [pc, #44]	; (8002c48 <HAL_Init+0x74>)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c1e:	200f      	movs	r0, #15
 8002c20:	f000 f814 	bl	8002c4c <HAL_InitTick>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e002      	b.n	8002c34 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002c2e:	f7ff f963 	bl	8001ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	58024400 	.word	0x58024400
 8002c40:	08012a78 	.word	0x08012a78
 8002c44:	24000008 	.word	0x24000008
 8002c48:	24000004 	.word	0x24000004

08002c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002c54:	4b15      	ldr	r3, [pc, #84]	; (8002cac <HAL_InitTick+0x60>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e021      	b.n	8002ca4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002c60:	4b13      	ldr	r3, [pc, #76]	; (8002cb0 <HAL_InitTick+0x64>)
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	4b11      	ldr	r3, [pc, #68]	; (8002cac <HAL_InitTick+0x60>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	4619      	mov	r1, r3
 8002c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c76:	4618      	mov	r0, r3
 8002c78:	f001 fef1 	bl	8004a5e <HAL_SYSTICK_Config>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e00e      	b.n	8002ca4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b0f      	cmp	r3, #15
 8002c8a:	d80a      	bhi.n	8002ca2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c94:	f001 febb 	bl	8004a0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c98:	4a06      	ldr	r2, [pc, #24]	; (8002cb4 <HAL_InitTick+0x68>)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	e000      	b.n	8002ca4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	24000010 	.word	0x24000010
 8002cb0:	24000004 	.word	0x24000004
 8002cb4:	2400000c 	.word	0x2400000c

08002cb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002cbc:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <HAL_IncTick+0x20>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <HAL_IncTick+0x24>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	4a04      	ldr	r2, [pc, #16]	; (8002cdc <HAL_IncTick+0x24>)
 8002cca:	6013      	str	r3, [r2, #0]
}
 8002ccc:	bf00      	nop
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	24000010 	.word	0x24000010
 8002cdc:	24000860 	.word	0x24000860

08002ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ce4:	4b03      	ldr	r3, [pc, #12]	; (8002cf4 <HAL_GetTick+0x14>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	24000860 	.word	0x24000860

08002cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d00:	f7ff ffee 	bl	8002ce0 <HAL_GetTick>
 8002d04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d10:	d005      	beq.n	8002d1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d12:	4b0a      	ldr	r3, [pc, #40]	; (8002d3c <HAL_Delay+0x44>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	461a      	mov	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d1e:	bf00      	nop
 8002d20:	f7ff ffde 	bl	8002ce0 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d8f7      	bhi.n	8002d20 <HAL_Delay+0x28>
  {
  }
}
 8002d30:	bf00      	nop
 8002d32:	bf00      	nop
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	24000010 	.word	0x24000010

08002d40 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002d44:	4b03      	ldr	r3, [pc, #12]	; (8002d54 <HAL_GetREVID+0x14>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	0c1b      	lsrs	r3, r3, #16
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	5c001000 	.word	0x5c001000

08002d58 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	609a      	str	r2, [r3, #8]
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
 8002d86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	609a      	str	r2, [r3, #8]
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b087      	sub	sp, #28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
 8002dcc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	3360      	adds	r3, #96	; 0x60
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	430b      	orrs	r3, r1
 8002dee:	431a      	orrs	r2, r3
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002df4:	bf00      	nop
 8002df6:	371c      	adds	r7, #28
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	f003 031f 	and.w	r3, r3, #31
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e20:	431a      	orrs	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	611a      	str	r2, [r3, #16]
}
 8002e26:	bf00      	nop
 8002e28:	3714      	adds	r7, #20
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b087      	sub	sp, #28
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	60f8      	str	r0, [r7, #12]
 8002e3a:	60b9      	str	r1, [r7, #8]
 8002e3c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	3360      	adds	r3, #96	; 0x60
 8002e42:	461a      	mov	r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	431a      	orrs	r2, r3
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	601a      	str	r2, [r3, #0]
  }
}
 8002e5c:	bf00      	nop
 8002e5e:	371c      	adds	r7, #28
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e000      	b.n	8002e82 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b087      	sub	sp, #28
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	60f8      	str	r0, [r7, #12]
 8002e96:	60b9      	str	r1, [r7, #8]
 8002e98:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	3330      	adds	r3, #48	; 0x30
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	0a1b      	lsrs	r3, r3, #8
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	f003 030c 	and.w	r3, r3, #12
 8002eaa:	4413      	add	r3, r2
 8002eac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	f003 031f 	and.w	r3, r3, #31
 8002eb8:	211f      	movs	r1, #31
 8002eba:	fa01 f303 	lsl.w	r3, r1, r3
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	401a      	ands	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	0e9b      	lsrs	r3, r3, #26
 8002ec6:	f003 011f 	and.w	r1, r3, #31
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	f003 031f 	and.w	r3, r3, #31
 8002ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002eda:	bf00      	nop
 8002edc:	371c      	adds	r7, #28
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b083      	sub	sp, #12
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
 8002eee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	f023 0203 	bic.w	r2, r3, #3
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	60da      	str	r2, [r3, #12]
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f18:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002f20:	2301      	movs	r3, #1
 8002f22:	e000      	b.n	8002f26 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b087      	sub	sp, #28
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	60f8      	str	r0, [r7, #12]
 8002f3a:	60b9      	str	r1, [r7, #8]
 8002f3c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	3314      	adds	r3, #20
 8002f42:	461a      	mov	r2, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	0e5b      	lsrs	r3, r3, #25
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	4413      	add	r3, r2
 8002f50:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	0d1b      	lsrs	r3, r3, #20
 8002f5a:	f003 031f 	and.w	r3, r3, #31
 8002f5e:	2107      	movs	r1, #7
 8002f60:	fa01 f303 	lsl.w	r3, r1, r3
 8002f64:	43db      	mvns	r3, r3
 8002f66:	401a      	ands	r2, r3
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	0d1b      	lsrs	r3, r3, #20
 8002f6c:	f003 031f 	and.w	r3, r3, #31
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	fa01 f303 	lsl.w	r3, r1, r3
 8002f76:	431a      	orrs	r2, r3
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f7c:	bf00      	nop
 8002f7e:	371c      	adds	r7, #28
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	401a      	ands	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f003 0318 	and.w	r3, r3, #24
 8002faa:	4908      	ldr	r1, [pc, #32]	; (8002fcc <LL_ADC_SetChannelSingleDiff+0x44>)
 8002fac:	40d9      	lsrs	r1, r3
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	400b      	ands	r3, r1
 8002fb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002fbe:	bf00      	nop
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	000fffff 	.word	0x000fffff

08002fd0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f003 031f 	and.w	r3, r3, #31
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	4b04      	ldr	r3, [pc, #16]	; (8003028 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003016:	4013      	ands	r3, r2
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6093      	str	r3, [r2, #8]
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	5fffffc0 	.word	0x5fffffc0

0800302c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800303c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003040:	d101      	bne.n	8003046 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003042:	2301      	movs	r3, #1
 8003044:	e000      	b.n	8003048 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	4b05      	ldr	r3, [pc, #20]	; (8003078 <LL_ADC_EnableInternalRegulator+0x24>)
 8003062:	4013      	ands	r3, r2
 8003064:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	6fffffc0 	.word	0x6fffffc0

0800307c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003090:	d101      	bne.n	8003096 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003092:	2301      	movs	r3, #1
 8003094:	e000      	b.n	8003098 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <LL_ADC_Enable+0x24>)
 80030b2:	4013      	ands	r3, r2
 80030b4:	f043 0201 	orr.w	r2, r3, #1
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	7fffffc0 	.word	0x7fffffc0

080030cc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d101      	bne.n	80030e4 <LL_ADC_IsEnabled+0x18>
 80030e0:	2301      	movs	r3, #1
 80030e2:	e000      	b.n	80030e6 <LL_ADC_IsEnabled+0x1a>
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
	...

080030f4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	4b05      	ldr	r3, [pc, #20]	; (8003118 <LL_ADC_REG_StartConversion+0x24>)
 8003102:	4013      	ands	r3, r2
 8003104:	f043 0204 	orr.w	r2, r3, #4
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	7fffffc0 	.word	0x7fffffc0

0800311c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 0304 	and.w	r3, r3, #4
 800312c:	2b04      	cmp	r3, #4
 800312e:	d101      	bne.n	8003134 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003130:	2301      	movs	r3, #1
 8003132:	e000      	b.n	8003136 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 0308 	and.w	r3, r3, #8
 8003152:	2b08      	cmp	r3, #8
 8003154:	d101      	bne.n	800315a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003156:	2301      	movs	r3, #1
 8003158:	e000      	b.n	800315c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003168:	b590      	push	{r4, r7, lr}
 800316a:	b089      	sub	sp, #36	; 0x24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003170:	2300      	movs	r3, #0
 8003172:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003174:	2300      	movs	r3, #0
 8003176:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e18f      	b.n	80034a2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318c:	2b00      	cmp	r3, #0
 800318e:	d109      	bne.n	80031a4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7fe fecb 	bl	8001f2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff ff3f 	bl	800302c <LL_ADC_IsDeepPowerDownEnabled>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d004      	beq.n	80031be <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff ff25 	bl	8003008 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff ff5a 	bl	800307c <LL_ADC_IsInternalRegulatorEnabled>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d114      	bne.n	80031f8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7ff ff3e 	bl	8003054 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031d8:	4b87      	ldr	r3, [pc, #540]	; (80033f8 <HAL_ADC_Init+0x290>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	099b      	lsrs	r3, r3, #6
 80031de:	4a87      	ldr	r2, [pc, #540]	; (80033fc <HAL_ADC_Init+0x294>)
 80031e0:	fba2 2303 	umull	r2, r3, r2, r3
 80031e4:	099b      	lsrs	r3, r3, #6
 80031e6:	3301      	adds	r3, #1
 80031e8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80031ea:	e002      	b.n	80031f2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	3b01      	subs	r3, #1
 80031f0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1f9      	bne.n	80031ec <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff ff3d 	bl	800307c <LL_ADC_IsInternalRegulatorEnabled>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10d      	bne.n	8003224 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320c:	f043 0210 	orr.w	r2, r3, #16
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003218:	f043 0201 	orr.w	r2, r3, #1
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff ff77 	bl	800311c <LL_ADC_REG_IsConversionOngoing>
 800322e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003234:	f003 0310 	and.w	r3, r3, #16
 8003238:	2b00      	cmp	r3, #0
 800323a:	f040 8129 	bne.w	8003490 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	2b00      	cmp	r3, #0
 8003242:	f040 8125 	bne.w	8003490 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800324a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800324e:	f043 0202 	orr.w	r2, r3, #2
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff ff36 	bl	80030cc <LL_ADC_IsEnabled>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d136      	bne.n	80032d4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a65      	ldr	r2, [pc, #404]	; (8003400 <HAL_ADC_Init+0x298>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d004      	beq.n	800327a <HAL_ADC_Init+0x112>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a63      	ldr	r2, [pc, #396]	; (8003404 <HAL_ADC_Init+0x29c>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d10e      	bne.n	8003298 <HAL_ADC_Init+0x130>
 800327a:	4861      	ldr	r0, [pc, #388]	; (8003400 <HAL_ADC_Init+0x298>)
 800327c:	f7ff ff26 	bl	80030cc <LL_ADC_IsEnabled>
 8003280:	4604      	mov	r4, r0
 8003282:	4860      	ldr	r0, [pc, #384]	; (8003404 <HAL_ADC_Init+0x29c>)
 8003284:	f7ff ff22 	bl	80030cc <LL_ADC_IsEnabled>
 8003288:	4603      	mov	r3, r0
 800328a:	4323      	orrs	r3, r4
 800328c:	2b00      	cmp	r3, #0
 800328e:	bf0c      	ite	eq
 8003290:	2301      	moveq	r3, #1
 8003292:	2300      	movne	r3, #0
 8003294:	b2db      	uxtb	r3, r3
 8003296:	e008      	b.n	80032aa <HAL_ADC_Init+0x142>
 8003298:	485b      	ldr	r0, [pc, #364]	; (8003408 <HAL_ADC_Init+0x2a0>)
 800329a:	f7ff ff17 	bl	80030cc <LL_ADC_IsEnabled>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	bf0c      	ite	eq
 80032a4:	2301      	moveq	r3, #1
 80032a6:	2300      	movne	r3, #0
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d012      	beq.n	80032d4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a53      	ldr	r2, [pc, #332]	; (8003400 <HAL_ADC_Init+0x298>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d004      	beq.n	80032c2 <HAL_ADC_Init+0x15a>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a51      	ldr	r2, [pc, #324]	; (8003404 <HAL_ADC_Init+0x29c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d101      	bne.n	80032c6 <HAL_ADC_Init+0x15e>
 80032c2:	4a52      	ldr	r2, [pc, #328]	; (800340c <HAL_ADC_Init+0x2a4>)
 80032c4:	e000      	b.n	80032c8 <HAL_ADC_Init+0x160>
 80032c6:	4a52      	ldr	r2, [pc, #328]	; (8003410 <HAL_ADC_Init+0x2a8>)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	4619      	mov	r1, r3
 80032ce:	4610      	mov	r0, r2
 80032d0:	f7ff fd42 	bl	8002d58 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80032d4:	f7ff fd34 	bl	8002d40 <HAL_GetREVID>
 80032d8:	4603      	mov	r3, r0
 80032da:	f241 0203 	movw	r2, #4099	; 0x1003
 80032de:	4293      	cmp	r3, r2
 80032e0:	d914      	bls.n	800330c <HAL_ADC_Init+0x1a4>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	2b10      	cmp	r3, #16
 80032e8:	d110      	bne.n	800330c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	7d5b      	ldrb	r3, [r3, #21]
 80032ee:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80032f4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80032fa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	7f1b      	ldrb	r3, [r3, #28]
 8003300:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003302:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003304:	f043 030c 	orr.w	r3, r3, #12
 8003308:	61bb      	str	r3, [r7, #24]
 800330a:	e00d      	b.n	8003328 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	7d5b      	ldrb	r3, [r3, #21]
 8003310:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003316:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800331c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	7f1b      	ldrb	r3, [r3, #28]
 8003322:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003324:	4313      	orrs	r3, r2
 8003326:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	7f1b      	ldrb	r3, [r3, #28]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d106      	bne.n	800333e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	3b01      	subs	r3, #1
 8003336:	045b      	lsls	r3, r3, #17
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	4313      	orrs	r3, r2
 800333c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	2b00      	cmp	r3, #0
 8003344:	d009      	beq.n	800335a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003352:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	4313      	orrs	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68da      	ldr	r2, [r3, #12]
 8003360:	4b2c      	ldr	r3, [pc, #176]	; (8003414 <HAL_ADC_Init+0x2ac>)
 8003362:	4013      	ands	r3, r2
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	6812      	ldr	r2, [r2, #0]
 8003368:	69b9      	ldr	r1, [r7, #24]
 800336a:	430b      	orrs	r3, r1
 800336c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff fed2 	bl	800311c <LL_ADC_REG_IsConversionOngoing>
 8003378:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff fedf 	bl	8003142 <LL_ADC_INJ_IsConversionOngoing>
 8003384:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d15f      	bne.n	800344c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d15c      	bne.n	800344c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	7d1b      	ldrb	r3, [r3, #20]
 8003396:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800339c:	4313      	orrs	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	4b1c      	ldr	r3, [pc, #112]	; (8003418 <HAL_ADC_Init+0x2b0>)
 80033a8:	4013      	ands	r3, r2
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6812      	ldr	r2, [r2, #0]
 80033ae:	69b9      	ldr	r1, [r7, #24]
 80033b0:	430b      	orrs	r3, r1
 80033b2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d130      	bne.n	8003420 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	691a      	ldr	r2, [r3, #16]
 80033ca:	4b14      	ldr	r3, [pc, #80]	; (800341c <HAL_ADC_Init+0x2b4>)
 80033cc:	4013      	ands	r3, r2
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033d2:	3a01      	subs	r2, #1
 80033d4:	0411      	lsls	r1, r2, #16
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033da:	4311      	orrs	r1, r2
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80033e0:	4311      	orrs	r1, r2
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80033e6:	430a      	orrs	r2, r1
 80033e8:	431a      	orrs	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f042 0201 	orr.w	r2, r2, #1
 80033f2:	611a      	str	r2, [r3, #16]
 80033f4:	e01c      	b.n	8003430 <HAL_ADC_Init+0x2c8>
 80033f6:	bf00      	nop
 80033f8:	24000004 	.word	0x24000004
 80033fc:	053e2d63 	.word	0x053e2d63
 8003400:	40022000 	.word	0x40022000
 8003404:	40022100 	.word	0x40022100
 8003408:	58026000 	.word	0x58026000
 800340c:	40022300 	.word	0x40022300
 8003410:	58026300 	.word	0x58026300
 8003414:	fff0c003 	.word	0xfff0c003
 8003418:	ffffbffc 	.word	0xffffbffc
 800341c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	691a      	ldr	r2, [r3, #16]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0201 	bic.w	r2, r2, #1
 800342e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 ffc4 	bl	80043d4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d10c      	bne.n	800346e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	f023 010f 	bic.w	r1, r3, #15
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	1e5a      	subs	r2, r3, #1
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	631a      	str	r2, [r3, #48]	; 0x30
 800346c:	e007      	b.n	800347e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 020f 	bic.w	r2, r2, #15
 800347c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003482:	f023 0303 	bic.w	r3, r3, #3
 8003486:	f043 0201 	orr.w	r2, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	655a      	str	r2, [r3, #84]	; 0x54
 800348e:	e007      	b.n	80034a0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003494:	f043 0210 	orr.w	r2, r3, #16
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80034a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3724      	adds	r7, #36	; 0x24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd90      	pop	{r4, r7, pc}
 80034aa:	bf00      	nop

080034ac <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a55      	ldr	r2, [pc, #340]	; (8003614 <HAL_ADC_Start_DMA+0x168>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d004      	beq.n	80034cc <HAL_ADC_Start_DMA+0x20>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a54      	ldr	r2, [pc, #336]	; (8003618 <HAL_ADC_Start_DMA+0x16c>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d101      	bne.n	80034d0 <HAL_ADC_Start_DMA+0x24>
 80034cc:	4b53      	ldr	r3, [pc, #332]	; (800361c <HAL_ADC_Start_DMA+0x170>)
 80034ce:	e000      	b.n	80034d2 <HAL_ADC_Start_DMA+0x26>
 80034d0:	4b53      	ldr	r3, [pc, #332]	; (8003620 <HAL_ADC_Start_DMA+0x174>)
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff fd7c 	bl	8002fd0 <LL_ADC_GetMultimode>
 80034d8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f7ff fe1c 	bl	800311c <LL_ADC_REG_IsConversionOngoing>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f040 808c 	bne.w	8003604 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d101      	bne.n	80034fa <HAL_ADC_Start_DMA+0x4e>
 80034f6:	2302      	movs	r3, #2
 80034f8:	e087      	b.n	800360a <HAL_ADC_Start_DMA+0x15e>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d005      	beq.n	8003514 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	2b05      	cmp	r3, #5
 800350c:	d002      	beq.n	8003514 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	2b09      	cmp	r3, #9
 8003512:	d170      	bne.n	80035f6 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f000 fe3f 	bl	8004198 <ADC_Enable>
 800351a:	4603      	mov	r3, r0
 800351c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800351e:	7dfb      	ldrb	r3, [r7, #23]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d163      	bne.n	80035ec <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003528:	4b3e      	ldr	r3, [pc, #248]	; (8003624 <HAL_ADC_Start_DMA+0x178>)
 800352a:	4013      	ands	r3, r2
 800352c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a37      	ldr	r2, [pc, #220]	; (8003618 <HAL_ADC_Start_DMA+0x16c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d002      	beq.n	8003544 <HAL_ADC_Start_DMA+0x98>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	e000      	b.n	8003546 <HAL_ADC_Start_DMA+0x9a>
 8003544:	4b33      	ldr	r3, [pc, #204]	; (8003614 <HAL_ADC_Start_DMA+0x168>)
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	6812      	ldr	r2, [r2, #0]
 800354a:	4293      	cmp	r3, r2
 800354c:	d002      	beq.n	8003554 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d105      	bne.n	8003560 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003558:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003564:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d006      	beq.n	800357a <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003570:	f023 0206 	bic.w	r2, r3, #6
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	659a      	str	r2, [r3, #88]	; 0x58
 8003578:	e002      	b.n	8003580 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003584:	4a28      	ldr	r2, [pc, #160]	; (8003628 <HAL_ADC_Start_DMA+0x17c>)
 8003586:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800358c:	4a27      	ldr	r2, [pc, #156]	; (800362c <HAL_ADC_Start_DMA+0x180>)
 800358e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003594:	4a26      	ldr	r2, [pc, #152]	; (8003630 <HAL_ADC_Start_DMA+0x184>)
 8003596:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	221c      	movs	r2, #28
 800359e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 0210 	orr.w	r2, r2, #16
 80035b6:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c0:	4619      	mov	r1, r3
 80035c2:	4610      	mov	r0, r2
 80035c4:	f7ff fc8f 	bl	8002ee6 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	3340      	adds	r3, #64	; 0x40
 80035d2:	4619      	mov	r1, r3
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f001 fdaa 	bl	8005130 <HAL_DMA_Start_IT>
 80035dc:	4603      	mov	r3, r0
 80035de:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff fd85 	bl	80030f4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80035ea:	e00d      	b.n	8003608 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80035f4:	e008      	b.n	8003608 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003602:	e001      	b.n	8003608 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003604:	2302      	movs	r3, #2
 8003606:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003608:	7dfb      	ldrb	r3, [r7, #23]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3718      	adds	r7, #24
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40022000 	.word	0x40022000
 8003618:	40022100 	.word	0x40022100
 800361c:	40022300 	.word	0x40022300
 8003620:	58026300 	.word	0x58026300
 8003624:	fffff0fe 	.word	0xfffff0fe
 8003628:	080042ad 	.word	0x080042ad
 800362c:	08004385 	.word	0x08004385
 8003630:	080043a1 	.word	0x080043a1

08003634 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b08a      	sub	sp, #40	; 0x28
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800363c:	2300      	movs	r3, #0
 800363e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a87      	ldr	r2, [pc, #540]	; (8003874 <HAL_ADC_IRQHandler+0x240>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d004      	beq.n	8003664 <HAL_ADC_IRQHandler+0x30>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a86      	ldr	r2, [pc, #536]	; (8003878 <HAL_ADC_IRQHandler+0x244>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d101      	bne.n	8003668 <HAL_ADC_IRQHandler+0x34>
 8003664:	4b85      	ldr	r3, [pc, #532]	; (800387c <HAL_ADC_IRQHandler+0x248>)
 8003666:	e000      	b.n	800366a <HAL_ADC_IRQHandler+0x36>
 8003668:	4b85      	ldr	r3, [pc, #532]	; (8003880 <HAL_ADC_IRQHandler+0x24c>)
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff fcb0 	bl	8002fd0 <LL_ADC_GetMultimode>
 8003670:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d017      	beq.n	80036ac <HAL_ADC_IRQHandler+0x78>
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d012      	beq.n	80036ac <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368a:	f003 0310 	and.w	r3, r3, #16
 800368e:	2b00      	cmp	r3, #0
 8003690:	d105      	bne.n	800369e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003696:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 fff2 	bl	8004688 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2202      	movs	r2, #2
 80036aa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	f003 0304 	and.w	r3, r3, #4
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d004      	beq.n	80036c0 <HAL_ADC_IRQHandler+0x8c>
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	f003 0304 	and.w	r3, r3, #4
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10a      	bne.n	80036d6 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 8083 	beq.w	80037d2 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	f003 0308 	and.w	r3, r3, #8
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d07d      	beq.n	80037d2 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036da:	f003 0310 	and.w	r3, r3, #16
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d105      	bne.n	80036ee <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff fbb8 	bl	8002e68 <LL_ADC_REG_IsTriggerSourceSWStart>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d062      	beq.n	80037c4 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a5d      	ldr	r2, [pc, #372]	; (8003878 <HAL_ADC_IRQHandler+0x244>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d002      	beq.n	800370e <HAL_ADC_IRQHandler+0xda>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	e000      	b.n	8003710 <HAL_ADC_IRQHandler+0xdc>
 800370e:	4b59      	ldr	r3, [pc, #356]	; (8003874 <HAL_ADC_IRQHandler+0x240>)
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	6812      	ldr	r2, [r2, #0]
 8003714:	4293      	cmp	r3, r2
 8003716:	d008      	beq.n	800372a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d005      	beq.n	800372a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	2b05      	cmp	r3, #5
 8003722:	d002      	beq.n	800372a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	2b09      	cmp	r3, #9
 8003728:	d104      	bne.n	8003734 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	623b      	str	r3, [r7, #32]
 8003732:	e00c      	b.n	800374e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a4f      	ldr	r2, [pc, #316]	; (8003878 <HAL_ADC_IRQHandler+0x244>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d002      	beq.n	8003744 <HAL_ADC_IRQHandler+0x110>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	e000      	b.n	8003746 <HAL_ADC_IRQHandler+0x112>
 8003744:	4b4b      	ldr	r3, [pc, #300]	; (8003874 <HAL_ADC_IRQHandler+0x240>)
 8003746:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800374e:	6a3b      	ldr	r3, [r7, #32]
 8003750:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d135      	bne.n	80037c4 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b08      	cmp	r3, #8
 8003764:	d12e      	bne.n	80037c4 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4618      	mov	r0, r3
 800376c:	f7ff fcd6 	bl	800311c <LL_ADC_REG_IsConversionOngoing>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d11a      	bne.n	80037ac <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 020c 	bic.w	r2, r2, #12
 8003784:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003796:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d112      	bne.n	80037c4 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a2:	f043 0201 	orr.w	r2, r3, #1
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	655a      	str	r2, [r3, #84]	; 0x54
 80037aa:	e00b      	b.n	80037c4 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b0:	f043 0210 	orr.w	r2, r3, #16
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037bc:	f043 0201 	orr.w	r2, r3, #1
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 f96f 	bl	8003aa8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	220c      	movs	r2, #12
 80037d0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	f003 0320 	and.w	r3, r3, #32
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d004      	beq.n	80037e6 <HAL_ADC_IRQHandler+0x1b2>
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	f003 0320 	and.w	r3, r3, #32
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10b      	bne.n	80037fe <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 80a0 	beq.w	8003932 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 809a 	beq.w	8003932 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003802:	f003 0310 	and.w	r3, r3, #16
 8003806:	2b00      	cmp	r3, #0
 8003808:	d105      	bne.n	8003816 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff fb76 	bl	8002f0c <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003820:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4618      	mov	r0, r3
 8003828:	f7ff fb1e 	bl	8002e68 <LL_ADC_REG_IsTriggerSourceSWStart>
 800382c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a11      	ldr	r2, [pc, #68]	; (8003878 <HAL_ADC_IRQHandler+0x244>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d002      	beq.n	800383e <HAL_ADC_IRQHandler+0x20a>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	e000      	b.n	8003840 <HAL_ADC_IRQHandler+0x20c>
 800383e:	4b0d      	ldr	r3, [pc, #52]	; (8003874 <HAL_ADC_IRQHandler+0x240>)
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6812      	ldr	r2, [r2, #0]
 8003844:	4293      	cmp	r3, r2
 8003846:	d008      	beq.n	800385a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d005      	beq.n	800385a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	2b06      	cmp	r3, #6
 8003852:	d002      	beq.n	800385a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	2b07      	cmp	r3, #7
 8003858:	d104      	bne.n	8003864 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	623b      	str	r3, [r7, #32]
 8003862:	e014      	b.n	800388e <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a03      	ldr	r2, [pc, #12]	; (8003878 <HAL_ADC_IRQHandler+0x244>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d00a      	beq.n	8003884 <HAL_ADC_IRQHandler+0x250>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	e008      	b.n	8003886 <HAL_ADC_IRQHandler+0x252>
 8003874:	40022000 	.word	0x40022000
 8003878:	40022100 	.word	0x40022100
 800387c:	40022300 	.word	0x40022300
 8003880:	58026300 	.word	0x58026300
 8003884:	4b84      	ldr	r3, [pc, #528]	; (8003a98 <HAL_ADC_IRQHandler+0x464>)
 8003886:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d047      	beq.n	8003924 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d007      	beq.n	80038ae <HAL_ADC_IRQHandler+0x27a>
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d03f      	beq.n	8003924 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d13a      	bne.n	8003924 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b8:	2b40      	cmp	r3, #64	; 0x40
 80038ba:	d133      	bne.n	8003924 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d12e      	bne.n	8003924 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff fc39 	bl	8003142 <LL_ADC_INJ_IsConversionOngoing>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d11a      	bne.n	800390c <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038e4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d112      	bne.n	8003924 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003902:	f043 0201 	orr.w	r2, r3, #1
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	655a      	str	r2, [r3, #84]	; 0x54
 800390a:	e00b      	b.n	8003924 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003910:	f043 0210 	orr.w	r2, r3, #16
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391c:	f043 0201 	orr.w	r2, r3, #1
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 fe87 	bl	8004638 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2260      	movs	r2, #96	; 0x60
 8003930:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003938:	2b00      	cmp	r3, #0
 800393a:	d011      	beq.n	8003960 <HAL_ADC_IRQHandler+0x32c>
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00c      	beq.n	8003960 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f8bc 	bl	8003ad0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2280      	movs	r2, #128	; 0x80
 800395e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003966:	2b00      	cmp	r3, #0
 8003968:	d012      	beq.n	8003990 <HAL_ADC_IRQHandler+0x35c>
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00d      	beq.n	8003990 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003978:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 fe6d 	bl	8004660 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800398e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003996:	2b00      	cmp	r3, #0
 8003998:	d012      	beq.n	80039c0 <HAL_ADC_IRQHandler+0x38c>
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00d      	beq.n	80039c0 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 fe5f 	bl	8004674 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039be:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	f003 0310 	and.w	r3, r3, #16
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d043      	beq.n	8003a52 <HAL_ADC_IRQHandler+0x41e>
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	f003 0310 	and.w	r3, r3, #16
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d03e      	beq.n	8003a52 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d102      	bne.n	80039e2 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80039dc:	2301      	movs	r3, #1
 80039de:	627b      	str	r3, [r7, #36]	; 0x24
 80039e0:	e021      	b.n	8003a26 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d015      	beq.n	8003a14 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a2a      	ldr	r2, [pc, #168]	; (8003a98 <HAL_ADC_IRQHandler+0x464>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d004      	beq.n	80039fc <HAL_ADC_IRQHandler+0x3c8>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a29      	ldr	r2, [pc, #164]	; (8003a9c <HAL_ADC_IRQHandler+0x468>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d101      	bne.n	8003a00 <HAL_ADC_IRQHandler+0x3cc>
 80039fc:	4b28      	ldr	r3, [pc, #160]	; (8003aa0 <HAL_ADC_IRQHandler+0x46c>)
 80039fe:	e000      	b.n	8003a02 <HAL_ADC_IRQHandler+0x3ce>
 8003a00:	4b28      	ldr	r3, [pc, #160]	; (8003aa4 <HAL_ADC_IRQHandler+0x470>)
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff faf2 	bl	8002fec <LL_ADC_GetMultiDMATransfer>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00b      	beq.n	8003a26 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	627b      	str	r3, [r7, #36]	; 0x24
 8003a12:	e008      	b.n	8003a26 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003a22:	2301      	movs	r3, #1
 8003a24:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d10e      	bne.n	8003a4a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a30:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3c:	f043 0202 	orr.w	r2, r3, #2
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 f84d 	bl	8003ae4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2210      	movs	r2, #16
 8003a50:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d018      	beq.n	8003a8e <HAL_ADC_IRQHandler+0x45a>
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d013      	beq.n	8003a8e <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a6a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a76:	f043 0208 	orr.w	r2, r3, #8
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a86:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 fddf 	bl	800464c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003a8e:	bf00      	nop
 8003a90:	3728      	adds	r7, #40	; 0x28
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	40022000 	.word	0x40022000
 8003a9c:	40022100 	.word	0x40022100
 8003aa0:	40022300 	.word	0x40022300
 8003aa4:	58026300 	.word	0x58026300

08003aa8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003af8:	b590      	push	{r4, r7, lr}
 8003afa:	b0a1      	sub	sp, #132	; 0x84
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b02:	2300      	movs	r3, #0
 8003b04:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	4a9d      	ldr	r2, [pc, #628]	; (8003d88 <HAL_ADC_ConfigChannel+0x290>)
 8003b12:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d101      	bne.n	8003b22 <HAL_ADC_ConfigChannel+0x2a>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	e321      	b.n	8004166 <HAL_ADC_ConfigChannel+0x66e>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff faf4 	bl	800311c <LL_ADC_REG_IsConversionOngoing>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f040 8306 	bne.w	8004148 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d108      	bne.n	8003b5a <HAL_ADC_ConfigChannel+0x62>
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	0e9b      	lsrs	r3, r3, #26
 8003b4e:	f003 031f 	and.w	r3, r3, #31
 8003b52:	2201      	movs	r2, #1
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	e016      	b.n	8003b88 <HAL_ADC_ConfigChannel+0x90>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b62:	fa93 f3a3 	rbit	r3, r3
 8003b66:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b6a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003b6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003b72:	2320      	movs	r3, #32
 8003b74:	e003      	b.n	8003b7e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003b76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b78:	fab3 f383 	clz	r3, r3
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	f003 031f 	and.w	r3, r3, #31
 8003b82:	2201      	movs	r2, #1
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6812      	ldr	r2, [r2, #0]
 8003b8c:	69d1      	ldr	r1, [r2, #28]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	6812      	ldr	r2, [r2, #0]
 8003b92:	430b      	orrs	r3, r1
 8003b94:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6818      	ldr	r0, [r3, #0]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	6859      	ldr	r1, [r3, #4]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	f7ff f973 	bl	8002e8e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff fab5 	bl	800311c <LL_ADC_REG_IsConversionOngoing>
 8003bb2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7ff fac2 	bl	8003142 <LL_ADC_INJ_IsConversionOngoing>
 8003bbe:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003bc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f040 80b3 	bne.w	8003d2e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003bc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f040 80af 	bne.w	8003d2e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6818      	ldr	r0, [r3, #0]
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	6819      	ldr	r1, [r3, #0]
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	461a      	mov	r2, r3
 8003bde:	f7ff f9a8 	bl	8002f32 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003be2:	4b6a      	ldr	r3, [pc, #424]	; (8003d8c <HAL_ADC_ConfigChannel+0x294>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003bea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bee:	d10b      	bne.n	8003c08 <HAL_ADC_ConfigChannel+0x110>
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	695a      	ldr	r2, [r3, #20]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	089b      	lsrs	r3, r3, #2
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	fa02 f303 	lsl.w	r3, r2, r3
 8003c06:	e01d      	b.n	8003c44 <HAL_ADC_ConfigChannel+0x14c>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	f003 0310 	and.w	r3, r3, #16
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10b      	bne.n	8003c2e <HAL_ADC_ConfigChannel+0x136>
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	695a      	ldr	r2, [r3, #20]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	089b      	lsrs	r3, r3, #2
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2c:	e00a      	b.n	8003c44 <HAL_ADC_ConfigChannel+0x14c>
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	695a      	ldr	r2, [r3, #20]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	089b      	lsrs	r3, r3, #2
 8003c3a:	f003 0304 	and.w	r3, r3, #4
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	d027      	beq.n	8003c9e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6818      	ldr	r0, [r3, #0]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	6919      	ldr	r1, [r3, #16]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c5c:	f7ff f8b0 	bl	8002dc0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6818      	ldr	r0, [r3, #0]
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	6919      	ldr	r1, [r3, #16]
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	7e5b      	ldrb	r3, [r3, #25]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d102      	bne.n	8003c76 <HAL_ADC_ConfigChannel+0x17e>
 8003c70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003c74:	e000      	b.n	8003c78 <HAL_ADC_ConfigChannel+0x180>
 8003c76:	2300      	movs	r3, #0
 8003c78:	461a      	mov	r2, r3
 8003c7a:	f7ff f8da 	bl	8002e32 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6818      	ldr	r0, [r3, #0]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	6919      	ldr	r1, [r3, #16]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	7e1b      	ldrb	r3, [r3, #24]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d102      	bne.n	8003c94 <HAL_ADC_ConfigChannel+0x19c>
 8003c8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c92:	e000      	b.n	8003c96 <HAL_ADC_ConfigChannel+0x19e>
 8003c94:	2300      	movs	r3, #0
 8003c96:	461a      	mov	r2, r3
 8003c98:	f7ff f8b2 	bl	8002e00 <LL_ADC_SetDataRightShift>
 8003c9c:	e047      	b.n	8003d2e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ca4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	069b      	lsls	r3, r3, #26
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d107      	bne.n	8003cc2 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003cc0:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cc8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	069b      	lsls	r3, r3, #26
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d107      	bne.n	8003ce6 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003ce4:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	069b      	lsls	r3, r3, #26
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d107      	bne.n	8003d0a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003d08:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	069b      	lsls	r3, r3, #26
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d107      	bne.n	8003d2e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003d2c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7ff f9ca 	bl	80030cc <LL_ADC_IsEnabled>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f040 820d 	bne.w	800415a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6818      	ldr	r0, [r3, #0]
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	6819      	ldr	r1, [r3, #0]
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	f7ff f91b 	bl	8002f88 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	4a0c      	ldr	r2, [pc, #48]	; (8003d88 <HAL_ADC_ConfigChannel+0x290>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	f040 8133 	bne.w	8003fc4 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d110      	bne.n	8003d90 <HAL_ADC_ConfigChannel+0x298>
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	0e9b      	lsrs	r3, r3, #26
 8003d74:	3301      	adds	r3, #1
 8003d76:	f003 031f 	and.w	r3, r3, #31
 8003d7a:	2b09      	cmp	r3, #9
 8003d7c:	bf94      	ite	ls
 8003d7e:	2301      	movls	r3, #1
 8003d80:	2300      	movhi	r3, #0
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	e01e      	b.n	8003dc4 <HAL_ADC_ConfigChannel+0x2cc>
 8003d86:	bf00      	nop
 8003d88:	47ff0000 	.word	0x47ff0000
 8003d8c:	5c001000 	.word	0x5c001000
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d98:	fa93 f3a3 	rbit	r3, r3
 8003d9c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003d9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003da0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003da2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d101      	bne.n	8003dac <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003da8:	2320      	movs	r3, #32
 8003daa:	e003      	b.n	8003db4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003dac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dae:	fab3 f383 	clz	r3, r3
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	3301      	adds	r3, #1
 8003db6:	f003 031f 	and.w	r3, r3, #31
 8003dba:	2b09      	cmp	r3, #9
 8003dbc:	bf94      	ite	ls
 8003dbe:	2301      	movls	r3, #1
 8003dc0:	2300      	movhi	r3, #0
 8003dc2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d079      	beq.n	8003ebc <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d107      	bne.n	8003de4 <HAL_ADC_ConfigChannel+0x2ec>
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	0e9b      	lsrs	r3, r3, #26
 8003dda:	3301      	adds	r3, #1
 8003ddc:	069b      	lsls	r3, r3, #26
 8003dde:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003de2:	e015      	b.n	8003e10 <HAL_ADC_ConfigChannel+0x318>
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dec:	fa93 f3a3 	rbit	r3, r3
 8003df0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003df4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003df6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d101      	bne.n	8003e00 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003dfc:	2320      	movs	r3, #32
 8003dfe:	e003      	b.n	8003e08 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003e00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e02:	fab3 f383 	clz	r3, r3
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	3301      	adds	r3, #1
 8003e0a:	069b      	lsls	r3, r3, #26
 8003e0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d109      	bne.n	8003e30 <HAL_ADC_ConfigChannel+0x338>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	0e9b      	lsrs	r3, r3, #26
 8003e22:	3301      	adds	r3, #1
 8003e24:	f003 031f 	and.w	r3, r3, #31
 8003e28:	2101      	movs	r1, #1
 8003e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2e:	e017      	b.n	8003e60 <HAL_ADC_ConfigChannel+0x368>
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e38:	fa93 f3a3 	rbit	r3, r3
 8003e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e40:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003e42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d101      	bne.n	8003e4c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003e48:	2320      	movs	r3, #32
 8003e4a:	e003      	b.n	8003e54 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e4e:	fab3 f383 	clz	r3, r3
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	3301      	adds	r3, #1
 8003e56:	f003 031f 	and.w	r3, r3, #31
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e60:	ea42 0103 	orr.w	r1, r2, r3
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10a      	bne.n	8003e86 <HAL_ADC_ConfigChannel+0x38e>
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	0e9b      	lsrs	r3, r3, #26
 8003e76:	3301      	adds	r3, #1
 8003e78:	f003 021f 	and.w	r2, r3, #31
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	4413      	add	r3, r2
 8003e82:	051b      	lsls	r3, r3, #20
 8003e84:	e018      	b.n	8003eb8 <HAL_ADC_ConfigChannel+0x3c0>
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e8e:	fa93 f3a3 	rbit	r3, r3
 8003e92:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e96:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d101      	bne.n	8003ea2 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003e9e:	2320      	movs	r3, #32
 8003ea0:	e003      	b.n	8003eaa <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea4:	fab3 f383 	clz	r3, r3
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	3301      	adds	r3, #1
 8003eac:	f003 021f 	and.w	r2, r3, #31
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	4413      	add	r3, r2
 8003eb6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003eb8:	430b      	orrs	r3, r1
 8003eba:	e07e      	b.n	8003fba <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d107      	bne.n	8003ed8 <HAL_ADC_ConfigChannel+0x3e0>
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	0e9b      	lsrs	r3, r3, #26
 8003ece:	3301      	adds	r3, #1
 8003ed0:	069b      	lsls	r3, r3, #26
 8003ed2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ed6:	e015      	b.n	8003f04 <HAL_ADC_ConfigChannel+0x40c>
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee0:	fa93 f3a3 	rbit	r3, r3
 8003ee4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d101      	bne.n	8003ef4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003ef0:	2320      	movs	r3, #32
 8003ef2:	e003      	b.n	8003efc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef6:	fab3 f383 	clz	r3, r3
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	3301      	adds	r3, #1
 8003efe:	069b      	lsls	r3, r3, #26
 8003f00:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d109      	bne.n	8003f24 <HAL_ADC_ConfigChannel+0x42c>
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	0e9b      	lsrs	r3, r3, #26
 8003f16:	3301      	adds	r3, #1
 8003f18:	f003 031f 	and.w	r3, r3, #31
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f22:	e017      	b.n	8003f54 <HAL_ADC_ConfigChannel+0x45c>
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	fa93 f3a3 	rbit	r3, r3
 8003f30:	61bb      	str	r3, [r7, #24]
  return result;
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d101      	bne.n	8003f40 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003f3c:	2320      	movs	r3, #32
 8003f3e:	e003      	b.n	8003f48 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003f40:	6a3b      	ldr	r3, [r7, #32]
 8003f42:	fab3 f383 	clz	r3, r3
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	3301      	adds	r3, #1
 8003f4a:	f003 031f 	and.w	r3, r3, #31
 8003f4e:	2101      	movs	r1, #1
 8003f50:	fa01 f303 	lsl.w	r3, r1, r3
 8003f54:	ea42 0103 	orr.w	r1, r2, r3
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10d      	bne.n	8003f80 <HAL_ADC_ConfigChannel+0x488>
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	0e9b      	lsrs	r3, r3, #26
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	f003 021f 	and.w	r2, r3, #31
 8003f70:	4613      	mov	r3, r2
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	4413      	add	r3, r2
 8003f76:	3b1e      	subs	r3, #30
 8003f78:	051b      	lsls	r3, r3, #20
 8003f7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f7e:	e01b      	b.n	8003fb8 <HAL_ADC_ConfigChannel+0x4c0>
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	fa93 f3a3 	rbit	r3, r3
 8003f8c:	60fb      	str	r3, [r7, #12]
  return result;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003f98:	2320      	movs	r3, #32
 8003f9a:	e003      	b.n	8003fa4 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	fab3 f383 	clz	r3, r3
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	f003 021f 	and.w	r2, r3, #31
 8003faa:	4613      	mov	r3, r2
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	4413      	add	r3, r2
 8003fb0:	3b1e      	subs	r3, #30
 8003fb2:	051b      	lsls	r3, r3, #20
 8003fb4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fb8:	430b      	orrs	r3, r1
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	6892      	ldr	r2, [r2, #8]
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	f7fe ffb7 	bl	8002f32 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f280 80c6 	bge.w	800415a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a67      	ldr	r2, [pc, #412]	; (8004170 <HAL_ADC_ConfigChannel+0x678>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d004      	beq.n	8003fe2 <HAL_ADC_ConfigChannel+0x4ea>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a65      	ldr	r2, [pc, #404]	; (8004174 <HAL_ADC_ConfigChannel+0x67c>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d101      	bne.n	8003fe6 <HAL_ADC_ConfigChannel+0x4ee>
 8003fe2:	4b65      	ldr	r3, [pc, #404]	; (8004178 <HAL_ADC_ConfigChannel+0x680>)
 8003fe4:	e000      	b.n	8003fe8 <HAL_ADC_ConfigChannel+0x4f0>
 8003fe6:	4b65      	ldr	r3, [pc, #404]	; (800417c <HAL_ADC_ConfigChannel+0x684>)
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7fe fedb 	bl	8002da4 <LL_ADC_GetCommonPathInternalCh>
 8003fee:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a5e      	ldr	r2, [pc, #376]	; (8004170 <HAL_ADC_ConfigChannel+0x678>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d004      	beq.n	8004004 <HAL_ADC_ConfigChannel+0x50c>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a5d      	ldr	r2, [pc, #372]	; (8004174 <HAL_ADC_ConfigChannel+0x67c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d10e      	bne.n	8004022 <HAL_ADC_ConfigChannel+0x52a>
 8004004:	485a      	ldr	r0, [pc, #360]	; (8004170 <HAL_ADC_ConfigChannel+0x678>)
 8004006:	f7ff f861 	bl	80030cc <LL_ADC_IsEnabled>
 800400a:	4604      	mov	r4, r0
 800400c:	4859      	ldr	r0, [pc, #356]	; (8004174 <HAL_ADC_ConfigChannel+0x67c>)
 800400e:	f7ff f85d 	bl	80030cc <LL_ADC_IsEnabled>
 8004012:	4603      	mov	r3, r0
 8004014:	4323      	orrs	r3, r4
 8004016:	2b00      	cmp	r3, #0
 8004018:	bf0c      	ite	eq
 800401a:	2301      	moveq	r3, #1
 800401c:	2300      	movne	r3, #0
 800401e:	b2db      	uxtb	r3, r3
 8004020:	e008      	b.n	8004034 <HAL_ADC_ConfigChannel+0x53c>
 8004022:	4857      	ldr	r0, [pc, #348]	; (8004180 <HAL_ADC_ConfigChannel+0x688>)
 8004024:	f7ff f852 	bl	80030cc <LL_ADC_IsEnabled>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	bf0c      	ite	eq
 800402e:	2301      	moveq	r3, #1
 8004030:	2300      	movne	r3, #0
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	d07d      	beq.n	8004134 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a51      	ldr	r2, [pc, #324]	; (8004184 <HAL_ADC_ConfigChannel+0x68c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d130      	bne.n	80040a4 <HAL_ADC_ConfigChannel+0x5ac>
 8004042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004044:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d12b      	bne.n	80040a4 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a4b      	ldr	r2, [pc, #300]	; (8004180 <HAL_ADC_ConfigChannel+0x688>)
 8004052:	4293      	cmp	r3, r2
 8004054:	f040 8081 	bne.w	800415a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a44      	ldr	r2, [pc, #272]	; (8004170 <HAL_ADC_ConfigChannel+0x678>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d004      	beq.n	800406c <HAL_ADC_ConfigChannel+0x574>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a43      	ldr	r2, [pc, #268]	; (8004174 <HAL_ADC_ConfigChannel+0x67c>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d101      	bne.n	8004070 <HAL_ADC_ConfigChannel+0x578>
 800406c:	4a42      	ldr	r2, [pc, #264]	; (8004178 <HAL_ADC_ConfigChannel+0x680>)
 800406e:	e000      	b.n	8004072 <HAL_ADC_ConfigChannel+0x57a>
 8004070:	4a42      	ldr	r2, [pc, #264]	; (800417c <HAL_ADC_ConfigChannel+0x684>)
 8004072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004074:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004078:	4619      	mov	r1, r3
 800407a:	4610      	mov	r0, r2
 800407c:	f7fe fe7f 	bl	8002d7e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004080:	4b41      	ldr	r3, [pc, #260]	; (8004188 <HAL_ADC_ConfigChannel+0x690>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	099b      	lsrs	r3, r3, #6
 8004086:	4a41      	ldr	r2, [pc, #260]	; (800418c <HAL_ADC_ConfigChannel+0x694>)
 8004088:	fba2 2303 	umull	r2, r3, r2, r3
 800408c:	099b      	lsrs	r3, r3, #6
 800408e:	3301      	adds	r3, #1
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004094:	e002      	b.n	800409c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	3b01      	subs	r3, #1
 800409a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1f9      	bne.n	8004096 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80040a2:	e05a      	b.n	800415a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a39      	ldr	r2, [pc, #228]	; (8004190 <HAL_ADC_ConfigChannel+0x698>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d11e      	bne.n	80040ec <HAL_ADC_ConfigChannel+0x5f4>
 80040ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d119      	bne.n	80040ec <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a30      	ldr	r2, [pc, #192]	; (8004180 <HAL_ADC_ConfigChannel+0x688>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d14b      	bne.n	800415a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a2a      	ldr	r2, [pc, #168]	; (8004170 <HAL_ADC_ConfigChannel+0x678>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d004      	beq.n	80040d6 <HAL_ADC_ConfigChannel+0x5de>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a28      	ldr	r2, [pc, #160]	; (8004174 <HAL_ADC_ConfigChannel+0x67c>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d101      	bne.n	80040da <HAL_ADC_ConfigChannel+0x5e2>
 80040d6:	4a28      	ldr	r2, [pc, #160]	; (8004178 <HAL_ADC_ConfigChannel+0x680>)
 80040d8:	e000      	b.n	80040dc <HAL_ADC_ConfigChannel+0x5e4>
 80040da:	4a28      	ldr	r2, [pc, #160]	; (800417c <HAL_ADC_ConfigChannel+0x684>)
 80040dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040e2:	4619      	mov	r1, r3
 80040e4:	4610      	mov	r0, r2
 80040e6:	f7fe fe4a 	bl	8002d7e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80040ea:	e036      	b.n	800415a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a28      	ldr	r2, [pc, #160]	; (8004194 <HAL_ADC_ConfigChannel+0x69c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d131      	bne.n	800415a <HAL_ADC_ConfigChannel+0x662>
 80040f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d12c      	bne.n	800415a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a1e      	ldr	r2, [pc, #120]	; (8004180 <HAL_ADC_ConfigChannel+0x688>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d127      	bne.n	800415a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a18      	ldr	r2, [pc, #96]	; (8004170 <HAL_ADC_ConfigChannel+0x678>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d004      	beq.n	800411e <HAL_ADC_ConfigChannel+0x626>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a16      	ldr	r2, [pc, #88]	; (8004174 <HAL_ADC_ConfigChannel+0x67c>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d101      	bne.n	8004122 <HAL_ADC_ConfigChannel+0x62a>
 800411e:	4a16      	ldr	r2, [pc, #88]	; (8004178 <HAL_ADC_ConfigChannel+0x680>)
 8004120:	e000      	b.n	8004124 <HAL_ADC_ConfigChannel+0x62c>
 8004122:	4a16      	ldr	r2, [pc, #88]	; (800417c <HAL_ADC_ConfigChannel+0x684>)
 8004124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004126:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800412a:	4619      	mov	r1, r3
 800412c:	4610      	mov	r0, r2
 800412e:	f7fe fe26 	bl	8002d7e <LL_ADC_SetCommonPathInternalCh>
 8004132:	e012      	b.n	800415a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004138:	f043 0220 	orr.w	r2, r3, #32
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004146:	e008      	b.n	800415a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414c:	f043 0220 	orr.w	r2, r3, #32
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004162:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004166:	4618      	mov	r0, r3
 8004168:	3784      	adds	r7, #132	; 0x84
 800416a:	46bd      	mov	sp, r7
 800416c:	bd90      	pop	{r4, r7, pc}
 800416e:	bf00      	nop
 8004170:	40022000 	.word	0x40022000
 8004174:	40022100 	.word	0x40022100
 8004178:	40022300 	.word	0x40022300
 800417c:	58026300 	.word	0x58026300
 8004180:	58026000 	.word	0x58026000
 8004184:	cb840000 	.word	0xcb840000
 8004188:	24000004 	.word	0x24000004
 800418c:	053e2d63 	.word	0x053e2d63
 8004190:	c7520000 	.word	0xc7520000
 8004194:	cfb80000 	.word	0xcfb80000

08004198 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7fe ff91 	bl	80030cc <LL_ADC_IsEnabled>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d16e      	bne.n	800428e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689a      	ldr	r2, [r3, #8]
 80041b6:	4b38      	ldr	r3, [pc, #224]	; (8004298 <ADC_Enable+0x100>)
 80041b8:	4013      	ands	r3, r2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00d      	beq.n	80041da <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c2:	f043 0210 	orr.w	r2, r3, #16
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ce:	f043 0201 	orr.w	r2, r3, #1
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e05a      	b.n	8004290 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4618      	mov	r0, r3
 80041e0:	f7fe ff60 	bl	80030a4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80041e4:	f7fe fd7c 	bl	8002ce0 <HAL_GetTick>
 80041e8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a2b      	ldr	r2, [pc, #172]	; (800429c <ADC_Enable+0x104>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d004      	beq.n	80041fe <ADC_Enable+0x66>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a29      	ldr	r2, [pc, #164]	; (80042a0 <ADC_Enable+0x108>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d101      	bne.n	8004202 <ADC_Enable+0x6a>
 80041fe:	4b29      	ldr	r3, [pc, #164]	; (80042a4 <ADC_Enable+0x10c>)
 8004200:	e000      	b.n	8004204 <ADC_Enable+0x6c>
 8004202:	4b29      	ldr	r3, [pc, #164]	; (80042a8 <ADC_Enable+0x110>)
 8004204:	4618      	mov	r0, r3
 8004206:	f7fe fee3 	bl	8002fd0 <LL_ADC_GetMultimode>
 800420a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a23      	ldr	r2, [pc, #140]	; (80042a0 <ADC_Enable+0x108>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d002      	beq.n	800421c <ADC_Enable+0x84>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	e000      	b.n	800421e <ADC_Enable+0x86>
 800421c:	4b1f      	ldr	r3, [pc, #124]	; (800429c <ADC_Enable+0x104>)
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	6812      	ldr	r2, [r2, #0]
 8004222:	4293      	cmp	r3, r2
 8004224:	d02c      	beq.n	8004280 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d130      	bne.n	800428e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800422c:	e028      	b.n	8004280 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4618      	mov	r0, r3
 8004234:	f7fe ff4a 	bl	80030cc <LL_ADC_IsEnabled>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d104      	bne.n	8004248 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f7fe ff2e 	bl	80030a4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004248:	f7fe fd4a 	bl	8002ce0 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b02      	cmp	r3, #2
 8004254:	d914      	bls.n	8004280 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b01      	cmp	r3, #1
 8004262:	d00d      	beq.n	8004280 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004268:	f043 0210 	orr.w	r2, r3, #16
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004274:	f043 0201 	orr.w	r2, r3, #1
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e007      	b.n	8004290 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b01      	cmp	r3, #1
 800428c:	d1cf      	bne.n	800422e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	8000003f 	.word	0x8000003f
 800429c:	40022000 	.word	0x40022000
 80042a0:	40022100 	.word	0x40022100
 80042a4:	40022300 	.word	0x40022300
 80042a8:	58026300 	.word	0x58026300

080042ac <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042be:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d14b      	bne.n	800435e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0308 	and.w	r3, r3, #8
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d021      	beq.n	8004324 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7fe fdbf 	bl	8002e68 <LL_ADC_REG_IsTriggerSourceSWStart>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d032      	beq.n	8004356 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d12b      	bne.n	8004356 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004302:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d11f      	bne.n	8004356 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431a:	f043 0201 	orr.w	r2, r3, #1
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	655a      	str	r2, [r3, #84]	; 0x54
 8004322:	e018      	b.n	8004356 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	f003 0303 	and.w	r3, r3, #3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d111      	bne.n	8004356 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004336:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004342:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d105      	bne.n	8004356 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434e:	f043 0201 	orr.w	r2, r3, #1
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f7ff fba6 	bl	8003aa8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800435c:	e00e      	b.n	800437c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004362:	f003 0310 	and.w	r3, r3, #16
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f7ff fbba 	bl	8003ae4 <HAL_ADC_ErrorCallback>
}
 8004370:	e004      	b.n	800437c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	4798      	blx	r3
}
 800437c:	bf00      	nop
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004390:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f7ff fb92 	bl	8003abc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004398:	bf00      	nop
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ac:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043be:	f043 0204 	orr.w	r2, r3, #4
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f7ff fb8c 	bl	8003ae4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80043cc:	bf00      	nop
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a7a      	ldr	r2, [pc, #488]	; (80045cc <ADC_ConfigureBoostMode+0x1f8>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d004      	beq.n	80043f0 <ADC_ConfigureBoostMode+0x1c>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a79      	ldr	r2, [pc, #484]	; (80045d0 <ADC_ConfigureBoostMode+0x1fc>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d109      	bne.n	8004404 <ADC_ConfigureBoostMode+0x30>
 80043f0:	4b78      	ldr	r3, [pc, #480]	; (80045d4 <ADC_ConfigureBoostMode+0x200>)
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	bf14      	ite	ne
 80043fc:	2301      	movne	r3, #1
 80043fe:	2300      	moveq	r3, #0
 8004400:	b2db      	uxtb	r3, r3
 8004402:	e008      	b.n	8004416 <ADC_ConfigureBoostMode+0x42>
 8004404:	4b74      	ldr	r3, [pc, #464]	; (80045d8 <ADC_ConfigureBoostMode+0x204>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800440c:	2b00      	cmp	r3, #0
 800440e:	bf14      	ite	ne
 8004410:	2301      	movne	r3, #1
 8004412:	2300      	moveq	r3, #0
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d01c      	beq.n	8004454 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800441a:	f004 fda7 	bl	8008f6c <HAL_RCC_GetHCLKFreq>
 800441e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004428:	d010      	beq.n	800444c <ADC_ConfigureBoostMode+0x78>
 800442a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800442e:	d873      	bhi.n	8004518 <ADC_ConfigureBoostMode+0x144>
 8004430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004434:	d002      	beq.n	800443c <ADC_ConfigureBoostMode+0x68>
 8004436:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800443a:	d16d      	bne.n	8004518 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	0c1b      	lsrs	r3, r3, #16
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	fbb2 f3f3 	udiv	r3, r2, r3
 8004448:	60fb      	str	r3, [r7, #12]
        break;
 800444a:	e068      	b.n	800451e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	089b      	lsrs	r3, r3, #2
 8004450:	60fb      	str	r3, [r7, #12]
        break;
 8004452:	e064      	b.n	800451e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004454:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004458:	f04f 0100 	mov.w	r1, #0
 800445c:	f005 ffec 	bl	800a438 <HAL_RCCEx_GetPeriphCLKFreq>
 8004460:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800446a:	d051      	beq.n	8004510 <ADC_ConfigureBoostMode+0x13c>
 800446c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004470:	d854      	bhi.n	800451c <ADC_ConfigureBoostMode+0x148>
 8004472:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004476:	d047      	beq.n	8004508 <ADC_ConfigureBoostMode+0x134>
 8004478:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800447c:	d84e      	bhi.n	800451c <ADC_ConfigureBoostMode+0x148>
 800447e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004482:	d03d      	beq.n	8004500 <ADC_ConfigureBoostMode+0x12c>
 8004484:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004488:	d848      	bhi.n	800451c <ADC_ConfigureBoostMode+0x148>
 800448a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800448e:	d033      	beq.n	80044f8 <ADC_ConfigureBoostMode+0x124>
 8004490:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004494:	d842      	bhi.n	800451c <ADC_ConfigureBoostMode+0x148>
 8004496:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800449a:	d029      	beq.n	80044f0 <ADC_ConfigureBoostMode+0x11c>
 800449c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80044a0:	d83c      	bhi.n	800451c <ADC_ConfigureBoostMode+0x148>
 80044a2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80044a6:	d01a      	beq.n	80044de <ADC_ConfigureBoostMode+0x10a>
 80044a8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80044ac:	d836      	bhi.n	800451c <ADC_ConfigureBoostMode+0x148>
 80044ae:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80044b2:	d014      	beq.n	80044de <ADC_ConfigureBoostMode+0x10a>
 80044b4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80044b8:	d830      	bhi.n	800451c <ADC_ConfigureBoostMode+0x148>
 80044ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044be:	d00e      	beq.n	80044de <ADC_ConfigureBoostMode+0x10a>
 80044c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044c4:	d82a      	bhi.n	800451c <ADC_ConfigureBoostMode+0x148>
 80044c6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80044ca:	d008      	beq.n	80044de <ADC_ConfigureBoostMode+0x10a>
 80044cc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80044d0:	d824      	bhi.n	800451c <ADC_ConfigureBoostMode+0x148>
 80044d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044d6:	d002      	beq.n	80044de <ADC_ConfigureBoostMode+0x10a>
 80044d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80044dc:	d11e      	bne.n	800451c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	0c9b      	lsrs	r3, r3, #18
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ec:	60fb      	str	r3, [r7, #12]
        break;
 80044ee:	e016      	b.n	800451e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	091b      	lsrs	r3, r3, #4
 80044f4:	60fb      	str	r3, [r7, #12]
        break;
 80044f6:	e012      	b.n	800451e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	095b      	lsrs	r3, r3, #5
 80044fc:	60fb      	str	r3, [r7, #12]
        break;
 80044fe:	e00e      	b.n	800451e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	099b      	lsrs	r3, r3, #6
 8004504:	60fb      	str	r3, [r7, #12]
        break;
 8004506:	e00a      	b.n	800451e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	09db      	lsrs	r3, r3, #7
 800450c:	60fb      	str	r3, [r7, #12]
        break;
 800450e:	e006      	b.n	800451e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	0a1b      	lsrs	r3, r3, #8
 8004514:	60fb      	str	r3, [r7, #12]
        break;
 8004516:	e002      	b.n	800451e <ADC_ConfigureBoostMode+0x14a>
        break;
 8004518:	bf00      	nop
 800451a:	e000      	b.n	800451e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800451c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800451e:	f7fe fc0f 	bl	8002d40 <HAL_GetREVID>
 8004522:	4603      	mov	r3, r0
 8004524:	f241 0203 	movw	r2, #4099	; 0x1003
 8004528:	4293      	cmp	r3, r2
 800452a:	d815      	bhi.n	8004558 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4a2b      	ldr	r2, [pc, #172]	; (80045dc <ADC_ConfigureBoostMode+0x208>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d908      	bls.n	8004546 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689a      	ldr	r2, [r3, #8]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004542:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004544:	e03e      	b.n	80045c4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004554:	609a      	str	r2, [r3, #8]
}
 8004556:	e035      	b.n	80045c4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	085b      	lsrs	r3, r3, #1
 800455c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	4a1f      	ldr	r2, [pc, #124]	; (80045e0 <ADC_ConfigureBoostMode+0x20c>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d808      	bhi.n	8004578 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689a      	ldr	r2, [r3, #8]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004574:	609a      	str	r2, [r3, #8]
}
 8004576:	e025      	b.n	80045c4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4a1a      	ldr	r2, [pc, #104]	; (80045e4 <ADC_ConfigureBoostMode+0x210>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d80a      	bhi.n	8004596 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004592:	609a      	str	r2, [r3, #8]
}
 8004594:	e016      	b.n	80045c4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	4a13      	ldr	r2, [pc, #76]	; (80045e8 <ADC_ConfigureBoostMode+0x214>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d80a      	bhi.n	80045b4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045b0:	609a      	str	r2, [r3, #8]
}
 80045b2:	e007      	b.n	80045c4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689a      	ldr	r2, [r3, #8]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80045c2:	609a      	str	r2, [r3, #8]
}
 80045c4:	bf00      	nop
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	40022000 	.word	0x40022000
 80045d0:	40022100 	.word	0x40022100
 80045d4:	40022300 	.word	0x40022300
 80045d8:	58026300 	.word	0x58026300
 80045dc:	01312d00 	.word	0x01312d00
 80045e0:	005f5e10 	.word	0x005f5e10
 80045e4:	00bebc20 	.word	0x00bebc20
 80045e8:	017d7840 	.word	0x017d7840

080045ec <LL_ADC_IsEnabled>:
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d101      	bne.n	8004604 <LL_ADC_IsEnabled+0x18>
 8004600:	2301      	movs	r3, #1
 8004602:	e000      	b.n	8004606 <LL_ADC_IsEnabled+0x1a>
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <LL_ADC_REG_IsConversionOngoing>:
{
 8004612:	b480      	push	{r7}
 8004614:	b083      	sub	sp, #12
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 0304 	and.w	r3, r3, #4
 8004622:	2b04      	cmp	r3, #4
 8004624:	d101      	bne.n	800462a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004626:	2301      	movs	r3, #1
 8004628:	e000      	b.n	800462c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800469c:	b590      	push	{r4, r7, lr}
 800469e:	b09f      	sub	sp, #124	; 0x7c
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046a6:	2300      	movs	r3, #0
 80046a8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d101      	bne.n	80046ba <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80046b6:	2302      	movs	r3, #2
 80046b8:	e0be      	b.n	8004838 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80046c2:	2300      	movs	r3, #0
 80046c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80046c6:	2300      	movs	r3, #0
 80046c8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a5c      	ldr	r2, [pc, #368]	; (8004840 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d102      	bne.n	80046da <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80046d4:	4b5b      	ldr	r3, [pc, #364]	; (8004844 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80046d6:	60bb      	str	r3, [r7, #8]
 80046d8:	e001      	b.n	80046de <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80046da:	2300      	movs	r3, #0
 80046dc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10b      	bne.n	80046fc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e8:	f043 0220 	orr.w	r2, r3, #32
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e09d      	b.n	8004838 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	4618      	mov	r0, r3
 8004700:	f7ff ff87 	bl	8004612 <LL_ADC_REG_IsConversionOngoing>
 8004704:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4618      	mov	r0, r3
 800470c:	f7ff ff81 	bl	8004612 <LL_ADC_REG_IsConversionOngoing>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d17f      	bne.n	8004816 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004716:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004718:	2b00      	cmp	r3, #0
 800471a:	d17c      	bne.n	8004816 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a47      	ldr	r2, [pc, #284]	; (8004840 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d004      	beq.n	8004730 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a46      	ldr	r2, [pc, #280]	; (8004844 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d101      	bne.n	8004734 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004730:	4b45      	ldr	r3, [pc, #276]	; (8004848 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004732:	e000      	b.n	8004736 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004734:	4b45      	ldr	r3, [pc, #276]	; (800484c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004736:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d039      	beq.n	80047b4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	431a      	orrs	r2, r3
 800474e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004750:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a3a      	ldr	r2, [pc, #232]	; (8004840 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d004      	beq.n	8004766 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a38      	ldr	r2, [pc, #224]	; (8004844 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d10e      	bne.n	8004784 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004766:	4836      	ldr	r0, [pc, #216]	; (8004840 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004768:	f7ff ff40 	bl	80045ec <LL_ADC_IsEnabled>
 800476c:	4604      	mov	r4, r0
 800476e:	4835      	ldr	r0, [pc, #212]	; (8004844 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004770:	f7ff ff3c 	bl	80045ec <LL_ADC_IsEnabled>
 8004774:	4603      	mov	r3, r0
 8004776:	4323      	orrs	r3, r4
 8004778:	2b00      	cmp	r3, #0
 800477a:	bf0c      	ite	eq
 800477c:	2301      	moveq	r3, #1
 800477e:	2300      	movne	r3, #0
 8004780:	b2db      	uxtb	r3, r3
 8004782:	e008      	b.n	8004796 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004784:	4832      	ldr	r0, [pc, #200]	; (8004850 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004786:	f7ff ff31 	bl	80045ec <LL_ADC_IsEnabled>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	bf0c      	ite	eq
 8004790:	2301      	moveq	r3, #1
 8004792:	2300      	movne	r3, #0
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d047      	beq.n	800482a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800479a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800479c:	689a      	ldr	r2, [r3, #8]
 800479e:	4b2d      	ldr	r3, [pc, #180]	; (8004854 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80047a0:	4013      	ands	r3, r2
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	6811      	ldr	r1, [r2, #0]
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	6892      	ldr	r2, [r2, #8]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	431a      	orrs	r2, r3
 80047ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047b0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80047b2:	e03a      	b.n	800482a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80047b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80047bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047be:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a1e      	ldr	r2, [pc, #120]	; (8004840 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d004      	beq.n	80047d4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a1d      	ldr	r2, [pc, #116]	; (8004844 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d10e      	bne.n	80047f2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80047d4:	481a      	ldr	r0, [pc, #104]	; (8004840 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80047d6:	f7ff ff09 	bl	80045ec <LL_ADC_IsEnabled>
 80047da:	4604      	mov	r4, r0
 80047dc:	4819      	ldr	r0, [pc, #100]	; (8004844 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80047de:	f7ff ff05 	bl	80045ec <LL_ADC_IsEnabled>
 80047e2:	4603      	mov	r3, r0
 80047e4:	4323      	orrs	r3, r4
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	bf0c      	ite	eq
 80047ea:	2301      	moveq	r3, #1
 80047ec:	2300      	movne	r3, #0
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	e008      	b.n	8004804 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80047f2:	4817      	ldr	r0, [pc, #92]	; (8004850 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80047f4:	f7ff fefa 	bl	80045ec <LL_ADC_IsEnabled>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	bf0c      	ite	eq
 80047fe:	2301      	moveq	r3, #1
 8004800:	2300      	movne	r3, #0
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b00      	cmp	r3, #0
 8004806:	d010      	beq.n	800482a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	4b11      	ldr	r3, [pc, #68]	; (8004854 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800480e:	4013      	ands	r3, r2
 8004810:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004812:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004814:	e009      	b.n	800482a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481a:	f043 0220 	orr.w	r2, r3, #32
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004828:	e000      	b.n	800482c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800482a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004834:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004838:	4618      	mov	r0, r3
 800483a:	377c      	adds	r7, #124	; 0x7c
 800483c:	46bd      	mov	sp, r7
 800483e:	bd90      	pop	{r4, r7, pc}
 8004840:	40022000 	.word	0x40022000
 8004844:	40022100 	.word	0x40022100
 8004848:	40022300 	.word	0x40022300
 800484c:	58026300 	.word	0x58026300
 8004850:	58026000 	.word	0x58026000
 8004854:	fffff0e0 	.word	0xfffff0e0

08004858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004868:	4b0b      	ldr	r3, [pc, #44]	; (8004898 <__NVIC_SetPriorityGrouping+0x40>)
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004874:	4013      	ands	r3, r2
 8004876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004880:	4b06      	ldr	r3, [pc, #24]	; (800489c <__NVIC_SetPriorityGrouping+0x44>)
 8004882:	4313      	orrs	r3, r2
 8004884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004886:	4a04      	ldr	r2, [pc, #16]	; (8004898 <__NVIC_SetPriorityGrouping+0x40>)
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	60d3      	str	r3, [r2, #12]
}
 800488c:	bf00      	nop
 800488e:	3714      	adds	r7, #20
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	e000ed00 	.word	0xe000ed00
 800489c:	05fa0000 	.word	0x05fa0000

080048a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048a0:	b480      	push	{r7}
 80048a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048a4:	4b04      	ldr	r3, [pc, #16]	; (80048b8 <__NVIC_GetPriorityGrouping+0x18>)
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	0a1b      	lsrs	r3, r3, #8
 80048aa:	f003 0307 	and.w	r3, r3, #7
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr
 80048b8:	e000ed00 	.word	0xe000ed00

080048bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	4603      	mov	r3, r0
 80048c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80048c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	db0b      	blt.n	80048e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048ce:	88fb      	ldrh	r3, [r7, #6]
 80048d0:	f003 021f 	and.w	r2, r3, #31
 80048d4:	4907      	ldr	r1, [pc, #28]	; (80048f4 <__NVIC_EnableIRQ+0x38>)
 80048d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048da:	095b      	lsrs	r3, r3, #5
 80048dc:	2001      	movs	r0, #1
 80048de:	fa00 f202 	lsl.w	r2, r0, r2
 80048e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	e000e100 	.word	0xe000e100

080048f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	4603      	mov	r3, r0
 8004900:	6039      	str	r1, [r7, #0]
 8004902:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004904:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004908:	2b00      	cmp	r3, #0
 800490a:	db0a      	blt.n	8004922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	b2da      	uxtb	r2, r3
 8004910:	490c      	ldr	r1, [pc, #48]	; (8004944 <__NVIC_SetPriority+0x4c>)
 8004912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004916:	0112      	lsls	r2, r2, #4
 8004918:	b2d2      	uxtb	r2, r2
 800491a:	440b      	add	r3, r1
 800491c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004920:	e00a      	b.n	8004938 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	b2da      	uxtb	r2, r3
 8004926:	4908      	ldr	r1, [pc, #32]	; (8004948 <__NVIC_SetPriority+0x50>)
 8004928:	88fb      	ldrh	r3, [r7, #6]
 800492a:	f003 030f 	and.w	r3, r3, #15
 800492e:	3b04      	subs	r3, #4
 8004930:	0112      	lsls	r2, r2, #4
 8004932:	b2d2      	uxtb	r2, r2
 8004934:	440b      	add	r3, r1
 8004936:	761a      	strb	r2, [r3, #24]
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr
 8004944:	e000e100 	.word	0xe000e100
 8004948:	e000ed00 	.word	0xe000ed00

0800494c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800494c:	b480      	push	{r7}
 800494e:	b089      	sub	sp, #36	; 0x24
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f003 0307 	and.w	r3, r3, #7
 800495e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	f1c3 0307 	rsb	r3, r3, #7
 8004966:	2b04      	cmp	r3, #4
 8004968:	bf28      	it	cs
 800496a:	2304      	movcs	r3, #4
 800496c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	3304      	adds	r3, #4
 8004972:	2b06      	cmp	r3, #6
 8004974:	d902      	bls.n	800497c <NVIC_EncodePriority+0x30>
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	3b03      	subs	r3, #3
 800497a:	e000      	b.n	800497e <NVIC_EncodePriority+0x32>
 800497c:	2300      	movs	r3, #0
 800497e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004980:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	fa02 f303 	lsl.w	r3, r2, r3
 800498a:	43da      	mvns	r2, r3
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	401a      	ands	r2, r3
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004994:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	fa01 f303 	lsl.w	r3, r1, r3
 800499e:	43d9      	mvns	r1, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049a4:	4313      	orrs	r3, r2
         );
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3724      	adds	r7, #36	; 0x24
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
	...

080049b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	3b01      	subs	r3, #1
 80049c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049c4:	d301      	bcc.n	80049ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80049c6:	2301      	movs	r3, #1
 80049c8:	e00f      	b.n	80049ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049ca:	4a0a      	ldr	r2, [pc, #40]	; (80049f4 <SysTick_Config+0x40>)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	3b01      	subs	r3, #1
 80049d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049d2:	210f      	movs	r1, #15
 80049d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049d8:	f7ff ff8e 	bl	80048f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049dc:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <SysTick_Config+0x40>)
 80049de:	2200      	movs	r2, #0
 80049e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049e2:	4b04      	ldr	r3, [pc, #16]	; (80049f4 <SysTick_Config+0x40>)
 80049e4:	2207      	movs	r2, #7
 80049e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3708      	adds	r7, #8
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	e000e010 	.word	0xe000e010

080049f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f7ff ff29 	bl	8004858 <__NVIC_SetPriorityGrouping>
}
 8004a06:	bf00      	nop
 8004a08:	3708      	adds	r7, #8
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b086      	sub	sp, #24
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	4603      	mov	r3, r0
 8004a16:	60b9      	str	r1, [r7, #8]
 8004a18:	607a      	str	r2, [r7, #4]
 8004a1a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a1c:	f7ff ff40 	bl	80048a0 <__NVIC_GetPriorityGrouping>
 8004a20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	68b9      	ldr	r1, [r7, #8]
 8004a26:	6978      	ldr	r0, [r7, #20]
 8004a28:	f7ff ff90 	bl	800494c <NVIC_EncodePriority>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a32:	4611      	mov	r1, r2
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7ff ff5f 	bl	80048f8 <__NVIC_SetPriority>
}
 8004a3a:	bf00      	nop
 8004a3c:	3718      	adds	r7, #24
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b082      	sub	sp, #8
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	4603      	mov	r3, r0
 8004a4a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7ff ff33 	bl	80048bc <__NVIC_EnableIRQ>
}
 8004a56:	bf00      	nop
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b082      	sub	sp, #8
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f7ff ffa4 	bl	80049b4 <SysTick_Config>
 8004a6c:	4603      	mov	r3, r0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
	...

08004a78 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004a80:	f7fe f92e 	bl	8002ce0 <HAL_GetTick>
 8004a84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d101      	bne.n	8004a90 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e316      	b.n	80050be <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a66      	ldr	r2, [pc, #408]	; (8004c30 <HAL_DMA_Init+0x1b8>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d04a      	beq.n	8004b30 <HAL_DMA_Init+0xb8>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a65      	ldr	r2, [pc, #404]	; (8004c34 <HAL_DMA_Init+0x1bc>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d045      	beq.n	8004b30 <HAL_DMA_Init+0xb8>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a63      	ldr	r2, [pc, #396]	; (8004c38 <HAL_DMA_Init+0x1c0>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d040      	beq.n	8004b30 <HAL_DMA_Init+0xb8>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a62      	ldr	r2, [pc, #392]	; (8004c3c <HAL_DMA_Init+0x1c4>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d03b      	beq.n	8004b30 <HAL_DMA_Init+0xb8>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a60      	ldr	r2, [pc, #384]	; (8004c40 <HAL_DMA_Init+0x1c8>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d036      	beq.n	8004b30 <HAL_DMA_Init+0xb8>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a5f      	ldr	r2, [pc, #380]	; (8004c44 <HAL_DMA_Init+0x1cc>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d031      	beq.n	8004b30 <HAL_DMA_Init+0xb8>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a5d      	ldr	r2, [pc, #372]	; (8004c48 <HAL_DMA_Init+0x1d0>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d02c      	beq.n	8004b30 <HAL_DMA_Init+0xb8>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a5c      	ldr	r2, [pc, #368]	; (8004c4c <HAL_DMA_Init+0x1d4>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d027      	beq.n	8004b30 <HAL_DMA_Init+0xb8>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a5a      	ldr	r2, [pc, #360]	; (8004c50 <HAL_DMA_Init+0x1d8>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d022      	beq.n	8004b30 <HAL_DMA_Init+0xb8>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a59      	ldr	r2, [pc, #356]	; (8004c54 <HAL_DMA_Init+0x1dc>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d01d      	beq.n	8004b30 <HAL_DMA_Init+0xb8>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a57      	ldr	r2, [pc, #348]	; (8004c58 <HAL_DMA_Init+0x1e0>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d018      	beq.n	8004b30 <HAL_DMA_Init+0xb8>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a56      	ldr	r2, [pc, #344]	; (8004c5c <HAL_DMA_Init+0x1e4>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d013      	beq.n	8004b30 <HAL_DMA_Init+0xb8>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a54      	ldr	r2, [pc, #336]	; (8004c60 <HAL_DMA_Init+0x1e8>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d00e      	beq.n	8004b30 <HAL_DMA_Init+0xb8>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a53      	ldr	r2, [pc, #332]	; (8004c64 <HAL_DMA_Init+0x1ec>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d009      	beq.n	8004b30 <HAL_DMA_Init+0xb8>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a51      	ldr	r2, [pc, #324]	; (8004c68 <HAL_DMA_Init+0x1f0>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d004      	beq.n	8004b30 <HAL_DMA_Init+0xb8>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a50      	ldr	r2, [pc, #320]	; (8004c6c <HAL_DMA_Init+0x1f4>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d101      	bne.n	8004b34 <HAL_DMA_Init+0xbc>
 8004b30:	2301      	movs	r3, #1
 8004b32:	e000      	b.n	8004b36 <HAL_DMA_Init+0xbe>
 8004b34:	2300      	movs	r3, #0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f000 813b 	beq.w	8004db2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a37      	ldr	r2, [pc, #220]	; (8004c30 <HAL_DMA_Init+0x1b8>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d04a      	beq.n	8004bec <HAL_DMA_Init+0x174>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a36      	ldr	r2, [pc, #216]	; (8004c34 <HAL_DMA_Init+0x1bc>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d045      	beq.n	8004bec <HAL_DMA_Init+0x174>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a34      	ldr	r2, [pc, #208]	; (8004c38 <HAL_DMA_Init+0x1c0>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d040      	beq.n	8004bec <HAL_DMA_Init+0x174>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a33      	ldr	r2, [pc, #204]	; (8004c3c <HAL_DMA_Init+0x1c4>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d03b      	beq.n	8004bec <HAL_DMA_Init+0x174>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a31      	ldr	r2, [pc, #196]	; (8004c40 <HAL_DMA_Init+0x1c8>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d036      	beq.n	8004bec <HAL_DMA_Init+0x174>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a30      	ldr	r2, [pc, #192]	; (8004c44 <HAL_DMA_Init+0x1cc>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d031      	beq.n	8004bec <HAL_DMA_Init+0x174>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a2e      	ldr	r2, [pc, #184]	; (8004c48 <HAL_DMA_Init+0x1d0>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d02c      	beq.n	8004bec <HAL_DMA_Init+0x174>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a2d      	ldr	r2, [pc, #180]	; (8004c4c <HAL_DMA_Init+0x1d4>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d027      	beq.n	8004bec <HAL_DMA_Init+0x174>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a2b      	ldr	r2, [pc, #172]	; (8004c50 <HAL_DMA_Init+0x1d8>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d022      	beq.n	8004bec <HAL_DMA_Init+0x174>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a2a      	ldr	r2, [pc, #168]	; (8004c54 <HAL_DMA_Init+0x1dc>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d01d      	beq.n	8004bec <HAL_DMA_Init+0x174>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a28      	ldr	r2, [pc, #160]	; (8004c58 <HAL_DMA_Init+0x1e0>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d018      	beq.n	8004bec <HAL_DMA_Init+0x174>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a27      	ldr	r2, [pc, #156]	; (8004c5c <HAL_DMA_Init+0x1e4>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d013      	beq.n	8004bec <HAL_DMA_Init+0x174>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a25      	ldr	r2, [pc, #148]	; (8004c60 <HAL_DMA_Init+0x1e8>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d00e      	beq.n	8004bec <HAL_DMA_Init+0x174>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a24      	ldr	r2, [pc, #144]	; (8004c64 <HAL_DMA_Init+0x1ec>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d009      	beq.n	8004bec <HAL_DMA_Init+0x174>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a22      	ldr	r2, [pc, #136]	; (8004c68 <HAL_DMA_Init+0x1f0>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d004      	beq.n	8004bec <HAL_DMA_Init+0x174>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a21      	ldr	r2, [pc, #132]	; (8004c6c <HAL_DMA_Init+0x1f4>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d108      	bne.n	8004bfe <HAL_DMA_Init+0x186>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f022 0201 	bic.w	r2, r2, #1
 8004bfa:	601a      	str	r2, [r3, #0]
 8004bfc:	e007      	b.n	8004c0e <HAL_DMA_Init+0x196>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 0201 	bic.w	r2, r2, #1
 8004c0c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c0e:	e02f      	b.n	8004c70 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c10:	f7fe f866 	bl	8002ce0 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b05      	cmp	r3, #5
 8004c1c:	d928      	bls.n	8004c70 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2220      	movs	r2, #32
 8004c22:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2203      	movs	r2, #3
 8004c28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e246      	b.n	80050be <HAL_DMA_Init+0x646>
 8004c30:	40020010 	.word	0x40020010
 8004c34:	40020028 	.word	0x40020028
 8004c38:	40020040 	.word	0x40020040
 8004c3c:	40020058 	.word	0x40020058
 8004c40:	40020070 	.word	0x40020070
 8004c44:	40020088 	.word	0x40020088
 8004c48:	400200a0 	.word	0x400200a0
 8004c4c:	400200b8 	.word	0x400200b8
 8004c50:	40020410 	.word	0x40020410
 8004c54:	40020428 	.word	0x40020428
 8004c58:	40020440 	.word	0x40020440
 8004c5c:	40020458 	.word	0x40020458
 8004c60:	40020470 	.word	0x40020470
 8004c64:	40020488 	.word	0x40020488
 8004c68:	400204a0 	.word	0x400204a0
 8004c6c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1c8      	bne.n	8004c10 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	4b83      	ldr	r3, [pc, #524]	; (8004e98 <HAL_DMA_Init+0x420>)
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004c96:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ca2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cae:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	2b04      	cmp	r3, #4
 8004cc2:	d107      	bne.n	8004cd4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004cd4:	4b71      	ldr	r3, [pc, #452]	; (8004e9c <HAL_DMA_Init+0x424>)
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	4b71      	ldr	r3, [pc, #452]	; (8004ea0 <HAL_DMA_Init+0x428>)
 8004cda:	4013      	ands	r3, r2
 8004cdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ce0:	d328      	bcc.n	8004d34 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	2b28      	cmp	r3, #40	; 0x28
 8004ce8:	d903      	bls.n	8004cf2 <HAL_DMA_Init+0x27a>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	2b2e      	cmp	r3, #46	; 0x2e
 8004cf0:	d917      	bls.n	8004d22 <HAL_DMA_Init+0x2aa>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2b3e      	cmp	r3, #62	; 0x3e
 8004cf8:	d903      	bls.n	8004d02 <HAL_DMA_Init+0x28a>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	2b42      	cmp	r3, #66	; 0x42
 8004d00:	d90f      	bls.n	8004d22 <HAL_DMA_Init+0x2aa>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	2b46      	cmp	r3, #70	; 0x46
 8004d08:	d903      	bls.n	8004d12 <HAL_DMA_Init+0x29a>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2b48      	cmp	r3, #72	; 0x48
 8004d10:	d907      	bls.n	8004d22 <HAL_DMA_Init+0x2aa>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	2b4e      	cmp	r3, #78	; 0x4e
 8004d18:	d905      	bls.n	8004d26 <HAL_DMA_Init+0x2ae>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	2b52      	cmp	r3, #82	; 0x52
 8004d20:	d801      	bhi.n	8004d26 <HAL_DMA_Init+0x2ae>
 8004d22:	2301      	movs	r3, #1
 8004d24:	e000      	b.n	8004d28 <HAL_DMA_Init+0x2b0>
 8004d26:	2300      	movs	r3, #0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d003      	beq.n	8004d34 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d32:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	f023 0307 	bic.w	r3, r3, #7
 8004d4a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5a:	2b04      	cmp	r3, #4
 8004d5c:	d117      	bne.n	8004d8e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00e      	beq.n	8004d8e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f002 fb33 	bl	80073dc <DMA_CheckFifoParam>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d008      	beq.n	8004d8e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2240      	movs	r2, #64	; 0x40
 8004d80:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e197      	b.n	80050be <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f002 fa6e 	bl	8007278 <DMA_CalcBaseAndBitshift>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da4:	f003 031f 	and.w	r3, r3, #31
 8004da8:	223f      	movs	r2, #63	; 0x3f
 8004daa:	409a      	lsls	r2, r3
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	609a      	str	r2, [r3, #8]
 8004db0:	e0cd      	b.n	8004f4e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a3b      	ldr	r2, [pc, #236]	; (8004ea4 <HAL_DMA_Init+0x42c>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d022      	beq.n	8004e02 <HAL_DMA_Init+0x38a>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a39      	ldr	r2, [pc, #228]	; (8004ea8 <HAL_DMA_Init+0x430>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d01d      	beq.n	8004e02 <HAL_DMA_Init+0x38a>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a38      	ldr	r2, [pc, #224]	; (8004eac <HAL_DMA_Init+0x434>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d018      	beq.n	8004e02 <HAL_DMA_Init+0x38a>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a36      	ldr	r2, [pc, #216]	; (8004eb0 <HAL_DMA_Init+0x438>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d013      	beq.n	8004e02 <HAL_DMA_Init+0x38a>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a35      	ldr	r2, [pc, #212]	; (8004eb4 <HAL_DMA_Init+0x43c>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d00e      	beq.n	8004e02 <HAL_DMA_Init+0x38a>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a33      	ldr	r2, [pc, #204]	; (8004eb8 <HAL_DMA_Init+0x440>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d009      	beq.n	8004e02 <HAL_DMA_Init+0x38a>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a32      	ldr	r2, [pc, #200]	; (8004ebc <HAL_DMA_Init+0x444>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d004      	beq.n	8004e02 <HAL_DMA_Init+0x38a>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a30      	ldr	r2, [pc, #192]	; (8004ec0 <HAL_DMA_Init+0x448>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d101      	bne.n	8004e06 <HAL_DMA_Init+0x38e>
 8004e02:	2301      	movs	r3, #1
 8004e04:	e000      	b.n	8004e08 <HAL_DMA_Init+0x390>
 8004e06:	2300      	movs	r3, #0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f000 8097 	beq.w	8004f3c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a24      	ldr	r2, [pc, #144]	; (8004ea4 <HAL_DMA_Init+0x42c>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d021      	beq.n	8004e5c <HAL_DMA_Init+0x3e4>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a22      	ldr	r2, [pc, #136]	; (8004ea8 <HAL_DMA_Init+0x430>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d01c      	beq.n	8004e5c <HAL_DMA_Init+0x3e4>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a21      	ldr	r2, [pc, #132]	; (8004eac <HAL_DMA_Init+0x434>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d017      	beq.n	8004e5c <HAL_DMA_Init+0x3e4>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a1f      	ldr	r2, [pc, #124]	; (8004eb0 <HAL_DMA_Init+0x438>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d012      	beq.n	8004e5c <HAL_DMA_Init+0x3e4>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a1e      	ldr	r2, [pc, #120]	; (8004eb4 <HAL_DMA_Init+0x43c>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d00d      	beq.n	8004e5c <HAL_DMA_Init+0x3e4>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a1c      	ldr	r2, [pc, #112]	; (8004eb8 <HAL_DMA_Init+0x440>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d008      	beq.n	8004e5c <HAL_DMA_Init+0x3e4>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a1b      	ldr	r2, [pc, #108]	; (8004ebc <HAL_DMA_Init+0x444>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d003      	beq.n	8004e5c <HAL_DMA_Init+0x3e4>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a19      	ldr	r2, [pc, #100]	; (8004ec0 <HAL_DMA_Init+0x448>)
 8004e5a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	4b13      	ldr	r3, [pc, #76]	; (8004ec4 <HAL_DMA_Init+0x44c>)
 8004e78:	4013      	ands	r3, r2
 8004e7a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	2b40      	cmp	r3, #64	; 0x40
 8004e82:	d021      	beq.n	8004ec8 <HAL_DMA_Init+0x450>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	2b80      	cmp	r3, #128	; 0x80
 8004e8a:	d102      	bne.n	8004e92 <HAL_DMA_Init+0x41a>
 8004e8c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e90:	e01b      	b.n	8004eca <HAL_DMA_Init+0x452>
 8004e92:	2300      	movs	r3, #0
 8004e94:	e019      	b.n	8004eca <HAL_DMA_Init+0x452>
 8004e96:	bf00      	nop
 8004e98:	fe10803f 	.word	0xfe10803f
 8004e9c:	5c001000 	.word	0x5c001000
 8004ea0:	ffff0000 	.word	0xffff0000
 8004ea4:	58025408 	.word	0x58025408
 8004ea8:	5802541c 	.word	0x5802541c
 8004eac:	58025430 	.word	0x58025430
 8004eb0:	58025444 	.word	0x58025444
 8004eb4:	58025458 	.word	0x58025458
 8004eb8:	5802546c 	.word	0x5802546c
 8004ebc:	58025480 	.word	0x58025480
 8004ec0:	58025494 	.word	0x58025494
 8004ec4:	fffe000f 	.word	0xfffe000f
 8004ec8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	68d2      	ldr	r2, [r2, #12]
 8004ece:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004ed0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004ed8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004ee0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004ee8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	69db      	ldr	r3, [r3, #28]
 8004eee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004ef0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004ef8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	4b6e      	ldr	r3, [pc, #440]	; (80050c8 <HAL_DMA_Init+0x650>)
 8004f10:	4413      	add	r3, r2
 8004f12:	4a6e      	ldr	r2, [pc, #440]	; (80050cc <HAL_DMA_Init+0x654>)
 8004f14:	fba2 2303 	umull	r2, r3, r2, r3
 8004f18:	091b      	lsrs	r3, r3, #4
 8004f1a:	009a      	lsls	r2, r3, #2
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f002 f9a9 	bl	8007278 <DMA_CalcBaseAndBitshift>
 8004f26:	4603      	mov	r3, r0
 8004f28:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f2e:	f003 031f 	and.w	r3, r3, #31
 8004f32:	2201      	movs	r2, #1
 8004f34:	409a      	lsls	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	605a      	str	r2, [r3, #4]
 8004f3a:	e008      	b.n	8004f4e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2240      	movs	r2, #64	; 0x40
 8004f40:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2203      	movs	r2, #3
 8004f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e0b7      	b.n	80050be <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a5f      	ldr	r2, [pc, #380]	; (80050d0 <HAL_DMA_Init+0x658>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d072      	beq.n	800503e <HAL_DMA_Init+0x5c6>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a5d      	ldr	r2, [pc, #372]	; (80050d4 <HAL_DMA_Init+0x65c>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d06d      	beq.n	800503e <HAL_DMA_Init+0x5c6>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a5c      	ldr	r2, [pc, #368]	; (80050d8 <HAL_DMA_Init+0x660>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d068      	beq.n	800503e <HAL_DMA_Init+0x5c6>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a5a      	ldr	r2, [pc, #360]	; (80050dc <HAL_DMA_Init+0x664>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d063      	beq.n	800503e <HAL_DMA_Init+0x5c6>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a59      	ldr	r2, [pc, #356]	; (80050e0 <HAL_DMA_Init+0x668>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d05e      	beq.n	800503e <HAL_DMA_Init+0x5c6>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a57      	ldr	r2, [pc, #348]	; (80050e4 <HAL_DMA_Init+0x66c>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d059      	beq.n	800503e <HAL_DMA_Init+0x5c6>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a56      	ldr	r2, [pc, #344]	; (80050e8 <HAL_DMA_Init+0x670>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d054      	beq.n	800503e <HAL_DMA_Init+0x5c6>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a54      	ldr	r2, [pc, #336]	; (80050ec <HAL_DMA_Init+0x674>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d04f      	beq.n	800503e <HAL_DMA_Init+0x5c6>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a53      	ldr	r2, [pc, #332]	; (80050f0 <HAL_DMA_Init+0x678>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d04a      	beq.n	800503e <HAL_DMA_Init+0x5c6>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a51      	ldr	r2, [pc, #324]	; (80050f4 <HAL_DMA_Init+0x67c>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d045      	beq.n	800503e <HAL_DMA_Init+0x5c6>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a50      	ldr	r2, [pc, #320]	; (80050f8 <HAL_DMA_Init+0x680>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d040      	beq.n	800503e <HAL_DMA_Init+0x5c6>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a4e      	ldr	r2, [pc, #312]	; (80050fc <HAL_DMA_Init+0x684>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d03b      	beq.n	800503e <HAL_DMA_Init+0x5c6>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a4d      	ldr	r2, [pc, #308]	; (8005100 <HAL_DMA_Init+0x688>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d036      	beq.n	800503e <HAL_DMA_Init+0x5c6>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a4b      	ldr	r2, [pc, #300]	; (8005104 <HAL_DMA_Init+0x68c>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d031      	beq.n	800503e <HAL_DMA_Init+0x5c6>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a4a      	ldr	r2, [pc, #296]	; (8005108 <HAL_DMA_Init+0x690>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d02c      	beq.n	800503e <HAL_DMA_Init+0x5c6>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a48      	ldr	r2, [pc, #288]	; (800510c <HAL_DMA_Init+0x694>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d027      	beq.n	800503e <HAL_DMA_Init+0x5c6>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a47      	ldr	r2, [pc, #284]	; (8005110 <HAL_DMA_Init+0x698>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d022      	beq.n	800503e <HAL_DMA_Init+0x5c6>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a45      	ldr	r2, [pc, #276]	; (8005114 <HAL_DMA_Init+0x69c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d01d      	beq.n	800503e <HAL_DMA_Init+0x5c6>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a44      	ldr	r2, [pc, #272]	; (8005118 <HAL_DMA_Init+0x6a0>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d018      	beq.n	800503e <HAL_DMA_Init+0x5c6>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a42      	ldr	r2, [pc, #264]	; (800511c <HAL_DMA_Init+0x6a4>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d013      	beq.n	800503e <HAL_DMA_Init+0x5c6>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a41      	ldr	r2, [pc, #260]	; (8005120 <HAL_DMA_Init+0x6a8>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d00e      	beq.n	800503e <HAL_DMA_Init+0x5c6>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a3f      	ldr	r2, [pc, #252]	; (8005124 <HAL_DMA_Init+0x6ac>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d009      	beq.n	800503e <HAL_DMA_Init+0x5c6>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a3e      	ldr	r2, [pc, #248]	; (8005128 <HAL_DMA_Init+0x6b0>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d004      	beq.n	800503e <HAL_DMA_Init+0x5c6>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a3c      	ldr	r2, [pc, #240]	; (800512c <HAL_DMA_Init+0x6b4>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d101      	bne.n	8005042 <HAL_DMA_Init+0x5ca>
 800503e:	2301      	movs	r3, #1
 8005040:	e000      	b.n	8005044 <HAL_DMA_Init+0x5cc>
 8005042:	2300      	movs	r3, #0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d032      	beq.n	80050ae <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f002 fa43 	bl	80074d4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	2b80      	cmp	r3, #128	; 0x80
 8005054:	d102      	bne.n	800505c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005064:	b2d2      	uxtb	r2, r2
 8005066:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005070:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d010      	beq.n	800509c <HAL_DMA_Init+0x624>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	2b08      	cmp	r3, #8
 8005080:	d80c      	bhi.n	800509c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f002 fac0 	bl	8007608 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800508c:	2200      	movs	r2, #0
 800508e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005098:	605a      	str	r2, [r3, #4]
 800509a:	e008      	b.n	80050ae <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3718      	adds	r7, #24
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	a7fdabf8 	.word	0xa7fdabf8
 80050cc:	cccccccd 	.word	0xcccccccd
 80050d0:	40020010 	.word	0x40020010
 80050d4:	40020028 	.word	0x40020028
 80050d8:	40020040 	.word	0x40020040
 80050dc:	40020058 	.word	0x40020058
 80050e0:	40020070 	.word	0x40020070
 80050e4:	40020088 	.word	0x40020088
 80050e8:	400200a0 	.word	0x400200a0
 80050ec:	400200b8 	.word	0x400200b8
 80050f0:	40020410 	.word	0x40020410
 80050f4:	40020428 	.word	0x40020428
 80050f8:	40020440 	.word	0x40020440
 80050fc:	40020458 	.word	0x40020458
 8005100:	40020470 	.word	0x40020470
 8005104:	40020488 	.word	0x40020488
 8005108:	400204a0 	.word	0x400204a0
 800510c:	400204b8 	.word	0x400204b8
 8005110:	58025408 	.word	0x58025408
 8005114:	5802541c 	.word	0x5802541c
 8005118:	58025430 	.word	0x58025430
 800511c:	58025444 	.word	0x58025444
 8005120:	58025458 	.word	0x58025458
 8005124:	5802546c 	.word	0x5802546c
 8005128:	58025480 	.word	0x58025480
 800512c:	58025494 	.word	0x58025494

08005130 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
 800513c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800513e:	2300      	movs	r3, #0
 8005140:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d101      	bne.n	800514c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e226      	b.n	800559a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005152:	2b01      	cmp	r3, #1
 8005154:	d101      	bne.n	800515a <HAL_DMA_Start_IT+0x2a>
 8005156:	2302      	movs	r3, #2
 8005158:	e21f      	b.n	800559a <HAL_DMA_Start_IT+0x46a>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b01      	cmp	r3, #1
 800516c:	f040 820a 	bne.w	8005584 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a68      	ldr	r2, [pc, #416]	; (8005324 <HAL_DMA_Start_IT+0x1f4>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d04a      	beq.n	800521e <HAL_DMA_Start_IT+0xee>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a66      	ldr	r2, [pc, #408]	; (8005328 <HAL_DMA_Start_IT+0x1f8>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d045      	beq.n	800521e <HAL_DMA_Start_IT+0xee>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a65      	ldr	r2, [pc, #404]	; (800532c <HAL_DMA_Start_IT+0x1fc>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d040      	beq.n	800521e <HAL_DMA_Start_IT+0xee>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a63      	ldr	r2, [pc, #396]	; (8005330 <HAL_DMA_Start_IT+0x200>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d03b      	beq.n	800521e <HAL_DMA_Start_IT+0xee>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a62      	ldr	r2, [pc, #392]	; (8005334 <HAL_DMA_Start_IT+0x204>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d036      	beq.n	800521e <HAL_DMA_Start_IT+0xee>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a60      	ldr	r2, [pc, #384]	; (8005338 <HAL_DMA_Start_IT+0x208>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d031      	beq.n	800521e <HAL_DMA_Start_IT+0xee>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a5f      	ldr	r2, [pc, #380]	; (800533c <HAL_DMA_Start_IT+0x20c>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d02c      	beq.n	800521e <HAL_DMA_Start_IT+0xee>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a5d      	ldr	r2, [pc, #372]	; (8005340 <HAL_DMA_Start_IT+0x210>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d027      	beq.n	800521e <HAL_DMA_Start_IT+0xee>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a5c      	ldr	r2, [pc, #368]	; (8005344 <HAL_DMA_Start_IT+0x214>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d022      	beq.n	800521e <HAL_DMA_Start_IT+0xee>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a5a      	ldr	r2, [pc, #360]	; (8005348 <HAL_DMA_Start_IT+0x218>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d01d      	beq.n	800521e <HAL_DMA_Start_IT+0xee>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a59      	ldr	r2, [pc, #356]	; (800534c <HAL_DMA_Start_IT+0x21c>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d018      	beq.n	800521e <HAL_DMA_Start_IT+0xee>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a57      	ldr	r2, [pc, #348]	; (8005350 <HAL_DMA_Start_IT+0x220>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d013      	beq.n	800521e <HAL_DMA_Start_IT+0xee>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a56      	ldr	r2, [pc, #344]	; (8005354 <HAL_DMA_Start_IT+0x224>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d00e      	beq.n	800521e <HAL_DMA_Start_IT+0xee>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a54      	ldr	r2, [pc, #336]	; (8005358 <HAL_DMA_Start_IT+0x228>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d009      	beq.n	800521e <HAL_DMA_Start_IT+0xee>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a53      	ldr	r2, [pc, #332]	; (800535c <HAL_DMA_Start_IT+0x22c>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d004      	beq.n	800521e <HAL_DMA_Start_IT+0xee>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a51      	ldr	r2, [pc, #324]	; (8005360 <HAL_DMA_Start_IT+0x230>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d108      	bne.n	8005230 <HAL_DMA_Start_IT+0x100>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f022 0201 	bic.w	r2, r2, #1
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	e007      	b.n	8005240 <HAL_DMA_Start_IT+0x110>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f022 0201 	bic.w	r2, r2, #1
 800523e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	68b9      	ldr	r1, [r7, #8]
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f001 fe6a 	bl	8006f20 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a34      	ldr	r2, [pc, #208]	; (8005324 <HAL_DMA_Start_IT+0x1f4>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d04a      	beq.n	80052ec <HAL_DMA_Start_IT+0x1bc>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a33      	ldr	r2, [pc, #204]	; (8005328 <HAL_DMA_Start_IT+0x1f8>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d045      	beq.n	80052ec <HAL_DMA_Start_IT+0x1bc>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a31      	ldr	r2, [pc, #196]	; (800532c <HAL_DMA_Start_IT+0x1fc>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d040      	beq.n	80052ec <HAL_DMA_Start_IT+0x1bc>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a30      	ldr	r2, [pc, #192]	; (8005330 <HAL_DMA_Start_IT+0x200>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d03b      	beq.n	80052ec <HAL_DMA_Start_IT+0x1bc>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a2e      	ldr	r2, [pc, #184]	; (8005334 <HAL_DMA_Start_IT+0x204>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d036      	beq.n	80052ec <HAL_DMA_Start_IT+0x1bc>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a2d      	ldr	r2, [pc, #180]	; (8005338 <HAL_DMA_Start_IT+0x208>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d031      	beq.n	80052ec <HAL_DMA_Start_IT+0x1bc>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a2b      	ldr	r2, [pc, #172]	; (800533c <HAL_DMA_Start_IT+0x20c>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d02c      	beq.n	80052ec <HAL_DMA_Start_IT+0x1bc>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a2a      	ldr	r2, [pc, #168]	; (8005340 <HAL_DMA_Start_IT+0x210>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d027      	beq.n	80052ec <HAL_DMA_Start_IT+0x1bc>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a28      	ldr	r2, [pc, #160]	; (8005344 <HAL_DMA_Start_IT+0x214>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d022      	beq.n	80052ec <HAL_DMA_Start_IT+0x1bc>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a27      	ldr	r2, [pc, #156]	; (8005348 <HAL_DMA_Start_IT+0x218>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d01d      	beq.n	80052ec <HAL_DMA_Start_IT+0x1bc>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a25      	ldr	r2, [pc, #148]	; (800534c <HAL_DMA_Start_IT+0x21c>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d018      	beq.n	80052ec <HAL_DMA_Start_IT+0x1bc>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a24      	ldr	r2, [pc, #144]	; (8005350 <HAL_DMA_Start_IT+0x220>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d013      	beq.n	80052ec <HAL_DMA_Start_IT+0x1bc>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a22      	ldr	r2, [pc, #136]	; (8005354 <HAL_DMA_Start_IT+0x224>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d00e      	beq.n	80052ec <HAL_DMA_Start_IT+0x1bc>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a21      	ldr	r2, [pc, #132]	; (8005358 <HAL_DMA_Start_IT+0x228>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d009      	beq.n	80052ec <HAL_DMA_Start_IT+0x1bc>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a1f      	ldr	r2, [pc, #124]	; (800535c <HAL_DMA_Start_IT+0x22c>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d004      	beq.n	80052ec <HAL_DMA_Start_IT+0x1bc>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a1e      	ldr	r2, [pc, #120]	; (8005360 <HAL_DMA_Start_IT+0x230>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d101      	bne.n	80052f0 <HAL_DMA_Start_IT+0x1c0>
 80052ec:	2301      	movs	r3, #1
 80052ee:	e000      	b.n	80052f2 <HAL_DMA_Start_IT+0x1c2>
 80052f0:	2300      	movs	r3, #0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d036      	beq.n	8005364 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f023 021e 	bic.w	r2, r3, #30
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f042 0216 	orr.w	r2, r2, #22
 8005308:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	2b00      	cmp	r3, #0
 8005310:	d03e      	beq.n	8005390 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f042 0208 	orr.w	r2, r2, #8
 8005320:	601a      	str	r2, [r3, #0]
 8005322:	e035      	b.n	8005390 <HAL_DMA_Start_IT+0x260>
 8005324:	40020010 	.word	0x40020010
 8005328:	40020028 	.word	0x40020028
 800532c:	40020040 	.word	0x40020040
 8005330:	40020058 	.word	0x40020058
 8005334:	40020070 	.word	0x40020070
 8005338:	40020088 	.word	0x40020088
 800533c:	400200a0 	.word	0x400200a0
 8005340:	400200b8 	.word	0x400200b8
 8005344:	40020410 	.word	0x40020410
 8005348:	40020428 	.word	0x40020428
 800534c:	40020440 	.word	0x40020440
 8005350:	40020458 	.word	0x40020458
 8005354:	40020470 	.word	0x40020470
 8005358:	40020488 	.word	0x40020488
 800535c:	400204a0 	.word	0x400204a0
 8005360:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f023 020e 	bic.w	r2, r3, #14
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f042 020a 	orr.w	r2, r2, #10
 8005376:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537c:	2b00      	cmp	r3, #0
 800537e:	d007      	beq.n	8005390 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 0204 	orr.w	r2, r2, #4
 800538e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a83      	ldr	r2, [pc, #524]	; (80055a4 <HAL_DMA_Start_IT+0x474>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d072      	beq.n	8005480 <HAL_DMA_Start_IT+0x350>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a82      	ldr	r2, [pc, #520]	; (80055a8 <HAL_DMA_Start_IT+0x478>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d06d      	beq.n	8005480 <HAL_DMA_Start_IT+0x350>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a80      	ldr	r2, [pc, #512]	; (80055ac <HAL_DMA_Start_IT+0x47c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d068      	beq.n	8005480 <HAL_DMA_Start_IT+0x350>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a7f      	ldr	r2, [pc, #508]	; (80055b0 <HAL_DMA_Start_IT+0x480>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d063      	beq.n	8005480 <HAL_DMA_Start_IT+0x350>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a7d      	ldr	r2, [pc, #500]	; (80055b4 <HAL_DMA_Start_IT+0x484>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d05e      	beq.n	8005480 <HAL_DMA_Start_IT+0x350>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a7c      	ldr	r2, [pc, #496]	; (80055b8 <HAL_DMA_Start_IT+0x488>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d059      	beq.n	8005480 <HAL_DMA_Start_IT+0x350>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a7a      	ldr	r2, [pc, #488]	; (80055bc <HAL_DMA_Start_IT+0x48c>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d054      	beq.n	8005480 <HAL_DMA_Start_IT+0x350>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a79      	ldr	r2, [pc, #484]	; (80055c0 <HAL_DMA_Start_IT+0x490>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d04f      	beq.n	8005480 <HAL_DMA_Start_IT+0x350>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a77      	ldr	r2, [pc, #476]	; (80055c4 <HAL_DMA_Start_IT+0x494>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d04a      	beq.n	8005480 <HAL_DMA_Start_IT+0x350>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a76      	ldr	r2, [pc, #472]	; (80055c8 <HAL_DMA_Start_IT+0x498>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d045      	beq.n	8005480 <HAL_DMA_Start_IT+0x350>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a74      	ldr	r2, [pc, #464]	; (80055cc <HAL_DMA_Start_IT+0x49c>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d040      	beq.n	8005480 <HAL_DMA_Start_IT+0x350>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a73      	ldr	r2, [pc, #460]	; (80055d0 <HAL_DMA_Start_IT+0x4a0>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d03b      	beq.n	8005480 <HAL_DMA_Start_IT+0x350>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a71      	ldr	r2, [pc, #452]	; (80055d4 <HAL_DMA_Start_IT+0x4a4>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d036      	beq.n	8005480 <HAL_DMA_Start_IT+0x350>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a70      	ldr	r2, [pc, #448]	; (80055d8 <HAL_DMA_Start_IT+0x4a8>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d031      	beq.n	8005480 <HAL_DMA_Start_IT+0x350>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a6e      	ldr	r2, [pc, #440]	; (80055dc <HAL_DMA_Start_IT+0x4ac>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d02c      	beq.n	8005480 <HAL_DMA_Start_IT+0x350>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a6d      	ldr	r2, [pc, #436]	; (80055e0 <HAL_DMA_Start_IT+0x4b0>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d027      	beq.n	8005480 <HAL_DMA_Start_IT+0x350>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a6b      	ldr	r2, [pc, #428]	; (80055e4 <HAL_DMA_Start_IT+0x4b4>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d022      	beq.n	8005480 <HAL_DMA_Start_IT+0x350>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a6a      	ldr	r2, [pc, #424]	; (80055e8 <HAL_DMA_Start_IT+0x4b8>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d01d      	beq.n	8005480 <HAL_DMA_Start_IT+0x350>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a68      	ldr	r2, [pc, #416]	; (80055ec <HAL_DMA_Start_IT+0x4bc>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d018      	beq.n	8005480 <HAL_DMA_Start_IT+0x350>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a67      	ldr	r2, [pc, #412]	; (80055f0 <HAL_DMA_Start_IT+0x4c0>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d013      	beq.n	8005480 <HAL_DMA_Start_IT+0x350>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a65      	ldr	r2, [pc, #404]	; (80055f4 <HAL_DMA_Start_IT+0x4c4>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d00e      	beq.n	8005480 <HAL_DMA_Start_IT+0x350>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a64      	ldr	r2, [pc, #400]	; (80055f8 <HAL_DMA_Start_IT+0x4c8>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d009      	beq.n	8005480 <HAL_DMA_Start_IT+0x350>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a62      	ldr	r2, [pc, #392]	; (80055fc <HAL_DMA_Start_IT+0x4cc>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d004      	beq.n	8005480 <HAL_DMA_Start_IT+0x350>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a61      	ldr	r2, [pc, #388]	; (8005600 <HAL_DMA_Start_IT+0x4d0>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d101      	bne.n	8005484 <HAL_DMA_Start_IT+0x354>
 8005480:	2301      	movs	r3, #1
 8005482:	e000      	b.n	8005486 <HAL_DMA_Start_IT+0x356>
 8005484:	2300      	movs	r3, #0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d01a      	beq.n	80054c0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d007      	beq.n	80054a8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054a6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d007      	beq.n	80054c0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054be:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a37      	ldr	r2, [pc, #220]	; (80055a4 <HAL_DMA_Start_IT+0x474>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d04a      	beq.n	8005560 <HAL_DMA_Start_IT+0x430>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a36      	ldr	r2, [pc, #216]	; (80055a8 <HAL_DMA_Start_IT+0x478>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d045      	beq.n	8005560 <HAL_DMA_Start_IT+0x430>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a34      	ldr	r2, [pc, #208]	; (80055ac <HAL_DMA_Start_IT+0x47c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d040      	beq.n	8005560 <HAL_DMA_Start_IT+0x430>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a33      	ldr	r2, [pc, #204]	; (80055b0 <HAL_DMA_Start_IT+0x480>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d03b      	beq.n	8005560 <HAL_DMA_Start_IT+0x430>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a31      	ldr	r2, [pc, #196]	; (80055b4 <HAL_DMA_Start_IT+0x484>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d036      	beq.n	8005560 <HAL_DMA_Start_IT+0x430>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a30      	ldr	r2, [pc, #192]	; (80055b8 <HAL_DMA_Start_IT+0x488>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d031      	beq.n	8005560 <HAL_DMA_Start_IT+0x430>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a2e      	ldr	r2, [pc, #184]	; (80055bc <HAL_DMA_Start_IT+0x48c>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d02c      	beq.n	8005560 <HAL_DMA_Start_IT+0x430>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a2d      	ldr	r2, [pc, #180]	; (80055c0 <HAL_DMA_Start_IT+0x490>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d027      	beq.n	8005560 <HAL_DMA_Start_IT+0x430>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a2b      	ldr	r2, [pc, #172]	; (80055c4 <HAL_DMA_Start_IT+0x494>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d022      	beq.n	8005560 <HAL_DMA_Start_IT+0x430>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a2a      	ldr	r2, [pc, #168]	; (80055c8 <HAL_DMA_Start_IT+0x498>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d01d      	beq.n	8005560 <HAL_DMA_Start_IT+0x430>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a28      	ldr	r2, [pc, #160]	; (80055cc <HAL_DMA_Start_IT+0x49c>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d018      	beq.n	8005560 <HAL_DMA_Start_IT+0x430>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a27      	ldr	r2, [pc, #156]	; (80055d0 <HAL_DMA_Start_IT+0x4a0>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d013      	beq.n	8005560 <HAL_DMA_Start_IT+0x430>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a25      	ldr	r2, [pc, #148]	; (80055d4 <HAL_DMA_Start_IT+0x4a4>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d00e      	beq.n	8005560 <HAL_DMA_Start_IT+0x430>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a24      	ldr	r2, [pc, #144]	; (80055d8 <HAL_DMA_Start_IT+0x4a8>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d009      	beq.n	8005560 <HAL_DMA_Start_IT+0x430>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a22      	ldr	r2, [pc, #136]	; (80055dc <HAL_DMA_Start_IT+0x4ac>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d004      	beq.n	8005560 <HAL_DMA_Start_IT+0x430>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a21      	ldr	r2, [pc, #132]	; (80055e0 <HAL_DMA_Start_IT+0x4b0>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d108      	bne.n	8005572 <HAL_DMA_Start_IT+0x442>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f042 0201 	orr.w	r2, r2, #1
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	e012      	b.n	8005598 <HAL_DMA_Start_IT+0x468>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f042 0201 	orr.w	r2, r2, #1
 8005580:	601a      	str	r2, [r3, #0]
 8005582:	e009      	b.n	8005598 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800558a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005598:	7dfb      	ldrb	r3, [r7, #23]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3718      	adds	r7, #24
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	40020010 	.word	0x40020010
 80055a8:	40020028 	.word	0x40020028
 80055ac:	40020040 	.word	0x40020040
 80055b0:	40020058 	.word	0x40020058
 80055b4:	40020070 	.word	0x40020070
 80055b8:	40020088 	.word	0x40020088
 80055bc:	400200a0 	.word	0x400200a0
 80055c0:	400200b8 	.word	0x400200b8
 80055c4:	40020410 	.word	0x40020410
 80055c8:	40020428 	.word	0x40020428
 80055cc:	40020440 	.word	0x40020440
 80055d0:	40020458 	.word	0x40020458
 80055d4:	40020470 	.word	0x40020470
 80055d8:	40020488 	.word	0x40020488
 80055dc:	400204a0 	.word	0x400204a0
 80055e0:	400204b8 	.word	0x400204b8
 80055e4:	58025408 	.word	0x58025408
 80055e8:	5802541c 	.word	0x5802541c
 80055ec:	58025430 	.word	0x58025430
 80055f0:	58025444 	.word	0x58025444
 80055f4:	58025458 	.word	0x58025458
 80055f8:	5802546c 	.word	0x5802546c
 80055fc:	58025480 	.word	0x58025480
 8005600:	58025494 	.word	0x58025494

08005604 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b086      	sub	sp, #24
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800560c:	f7fd fb68 	bl	8002ce0 <HAL_GetTick>
 8005610:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d101      	bne.n	800561c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e2dc      	b.n	8005bd6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005622:	b2db      	uxtb	r3, r3
 8005624:	2b02      	cmp	r3, #2
 8005626:	d008      	beq.n	800563a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2280      	movs	r2, #128	; 0x80
 800562c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e2cd      	b.n	8005bd6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a76      	ldr	r2, [pc, #472]	; (8005818 <HAL_DMA_Abort+0x214>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d04a      	beq.n	80056da <HAL_DMA_Abort+0xd6>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a74      	ldr	r2, [pc, #464]	; (800581c <HAL_DMA_Abort+0x218>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d045      	beq.n	80056da <HAL_DMA_Abort+0xd6>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a73      	ldr	r2, [pc, #460]	; (8005820 <HAL_DMA_Abort+0x21c>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d040      	beq.n	80056da <HAL_DMA_Abort+0xd6>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a71      	ldr	r2, [pc, #452]	; (8005824 <HAL_DMA_Abort+0x220>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d03b      	beq.n	80056da <HAL_DMA_Abort+0xd6>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a70      	ldr	r2, [pc, #448]	; (8005828 <HAL_DMA_Abort+0x224>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d036      	beq.n	80056da <HAL_DMA_Abort+0xd6>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a6e      	ldr	r2, [pc, #440]	; (800582c <HAL_DMA_Abort+0x228>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d031      	beq.n	80056da <HAL_DMA_Abort+0xd6>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a6d      	ldr	r2, [pc, #436]	; (8005830 <HAL_DMA_Abort+0x22c>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d02c      	beq.n	80056da <HAL_DMA_Abort+0xd6>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a6b      	ldr	r2, [pc, #428]	; (8005834 <HAL_DMA_Abort+0x230>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d027      	beq.n	80056da <HAL_DMA_Abort+0xd6>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a6a      	ldr	r2, [pc, #424]	; (8005838 <HAL_DMA_Abort+0x234>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d022      	beq.n	80056da <HAL_DMA_Abort+0xd6>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a68      	ldr	r2, [pc, #416]	; (800583c <HAL_DMA_Abort+0x238>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d01d      	beq.n	80056da <HAL_DMA_Abort+0xd6>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a67      	ldr	r2, [pc, #412]	; (8005840 <HAL_DMA_Abort+0x23c>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d018      	beq.n	80056da <HAL_DMA_Abort+0xd6>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a65      	ldr	r2, [pc, #404]	; (8005844 <HAL_DMA_Abort+0x240>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d013      	beq.n	80056da <HAL_DMA_Abort+0xd6>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a64      	ldr	r2, [pc, #400]	; (8005848 <HAL_DMA_Abort+0x244>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d00e      	beq.n	80056da <HAL_DMA_Abort+0xd6>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a62      	ldr	r2, [pc, #392]	; (800584c <HAL_DMA_Abort+0x248>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d009      	beq.n	80056da <HAL_DMA_Abort+0xd6>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a61      	ldr	r2, [pc, #388]	; (8005850 <HAL_DMA_Abort+0x24c>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d004      	beq.n	80056da <HAL_DMA_Abort+0xd6>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a5f      	ldr	r2, [pc, #380]	; (8005854 <HAL_DMA_Abort+0x250>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d101      	bne.n	80056de <HAL_DMA_Abort+0xda>
 80056da:	2301      	movs	r3, #1
 80056dc:	e000      	b.n	80056e0 <HAL_DMA_Abort+0xdc>
 80056de:	2300      	movs	r3, #0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d013      	beq.n	800570c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f022 021e 	bic.w	r2, r2, #30
 80056f2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	695a      	ldr	r2, [r3, #20]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005702:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	617b      	str	r3, [r7, #20]
 800570a:	e00a      	b.n	8005722 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f022 020e 	bic.w	r2, r2, #14
 800571a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a3c      	ldr	r2, [pc, #240]	; (8005818 <HAL_DMA_Abort+0x214>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d072      	beq.n	8005812 <HAL_DMA_Abort+0x20e>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a3a      	ldr	r2, [pc, #232]	; (800581c <HAL_DMA_Abort+0x218>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d06d      	beq.n	8005812 <HAL_DMA_Abort+0x20e>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a39      	ldr	r2, [pc, #228]	; (8005820 <HAL_DMA_Abort+0x21c>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d068      	beq.n	8005812 <HAL_DMA_Abort+0x20e>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a37      	ldr	r2, [pc, #220]	; (8005824 <HAL_DMA_Abort+0x220>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d063      	beq.n	8005812 <HAL_DMA_Abort+0x20e>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a36      	ldr	r2, [pc, #216]	; (8005828 <HAL_DMA_Abort+0x224>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d05e      	beq.n	8005812 <HAL_DMA_Abort+0x20e>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a34      	ldr	r2, [pc, #208]	; (800582c <HAL_DMA_Abort+0x228>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d059      	beq.n	8005812 <HAL_DMA_Abort+0x20e>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a33      	ldr	r2, [pc, #204]	; (8005830 <HAL_DMA_Abort+0x22c>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d054      	beq.n	8005812 <HAL_DMA_Abort+0x20e>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a31      	ldr	r2, [pc, #196]	; (8005834 <HAL_DMA_Abort+0x230>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d04f      	beq.n	8005812 <HAL_DMA_Abort+0x20e>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a30      	ldr	r2, [pc, #192]	; (8005838 <HAL_DMA_Abort+0x234>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d04a      	beq.n	8005812 <HAL_DMA_Abort+0x20e>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a2e      	ldr	r2, [pc, #184]	; (800583c <HAL_DMA_Abort+0x238>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d045      	beq.n	8005812 <HAL_DMA_Abort+0x20e>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a2d      	ldr	r2, [pc, #180]	; (8005840 <HAL_DMA_Abort+0x23c>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d040      	beq.n	8005812 <HAL_DMA_Abort+0x20e>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a2b      	ldr	r2, [pc, #172]	; (8005844 <HAL_DMA_Abort+0x240>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d03b      	beq.n	8005812 <HAL_DMA_Abort+0x20e>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a2a      	ldr	r2, [pc, #168]	; (8005848 <HAL_DMA_Abort+0x244>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d036      	beq.n	8005812 <HAL_DMA_Abort+0x20e>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a28      	ldr	r2, [pc, #160]	; (800584c <HAL_DMA_Abort+0x248>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d031      	beq.n	8005812 <HAL_DMA_Abort+0x20e>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a27      	ldr	r2, [pc, #156]	; (8005850 <HAL_DMA_Abort+0x24c>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d02c      	beq.n	8005812 <HAL_DMA_Abort+0x20e>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a25      	ldr	r2, [pc, #148]	; (8005854 <HAL_DMA_Abort+0x250>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d027      	beq.n	8005812 <HAL_DMA_Abort+0x20e>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a24      	ldr	r2, [pc, #144]	; (8005858 <HAL_DMA_Abort+0x254>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d022      	beq.n	8005812 <HAL_DMA_Abort+0x20e>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a22      	ldr	r2, [pc, #136]	; (800585c <HAL_DMA_Abort+0x258>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d01d      	beq.n	8005812 <HAL_DMA_Abort+0x20e>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a21      	ldr	r2, [pc, #132]	; (8005860 <HAL_DMA_Abort+0x25c>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d018      	beq.n	8005812 <HAL_DMA_Abort+0x20e>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a1f      	ldr	r2, [pc, #124]	; (8005864 <HAL_DMA_Abort+0x260>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d013      	beq.n	8005812 <HAL_DMA_Abort+0x20e>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a1e      	ldr	r2, [pc, #120]	; (8005868 <HAL_DMA_Abort+0x264>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d00e      	beq.n	8005812 <HAL_DMA_Abort+0x20e>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a1c      	ldr	r2, [pc, #112]	; (800586c <HAL_DMA_Abort+0x268>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d009      	beq.n	8005812 <HAL_DMA_Abort+0x20e>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a1b      	ldr	r2, [pc, #108]	; (8005870 <HAL_DMA_Abort+0x26c>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d004      	beq.n	8005812 <HAL_DMA_Abort+0x20e>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a19      	ldr	r2, [pc, #100]	; (8005874 <HAL_DMA_Abort+0x270>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d132      	bne.n	8005878 <HAL_DMA_Abort+0x274>
 8005812:	2301      	movs	r3, #1
 8005814:	e031      	b.n	800587a <HAL_DMA_Abort+0x276>
 8005816:	bf00      	nop
 8005818:	40020010 	.word	0x40020010
 800581c:	40020028 	.word	0x40020028
 8005820:	40020040 	.word	0x40020040
 8005824:	40020058 	.word	0x40020058
 8005828:	40020070 	.word	0x40020070
 800582c:	40020088 	.word	0x40020088
 8005830:	400200a0 	.word	0x400200a0
 8005834:	400200b8 	.word	0x400200b8
 8005838:	40020410 	.word	0x40020410
 800583c:	40020428 	.word	0x40020428
 8005840:	40020440 	.word	0x40020440
 8005844:	40020458 	.word	0x40020458
 8005848:	40020470 	.word	0x40020470
 800584c:	40020488 	.word	0x40020488
 8005850:	400204a0 	.word	0x400204a0
 8005854:	400204b8 	.word	0x400204b8
 8005858:	58025408 	.word	0x58025408
 800585c:	5802541c 	.word	0x5802541c
 8005860:	58025430 	.word	0x58025430
 8005864:	58025444 	.word	0x58025444
 8005868:	58025458 	.word	0x58025458
 800586c:	5802546c 	.word	0x5802546c
 8005870:	58025480 	.word	0x58025480
 8005874:	58025494 	.word	0x58025494
 8005878:	2300      	movs	r3, #0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d007      	beq.n	800588e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005888:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800588c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a6d      	ldr	r2, [pc, #436]	; (8005a48 <HAL_DMA_Abort+0x444>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d04a      	beq.n	800592e <HAL_DMA_Abort+0x32a>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a6b      	ldr	r2, [pc, #428]	; (8005a4c <HAL_DMA_Abort+0x448>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d045      	beq.n	800592e <HAL_DMA_Abort+0x32a>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a6a      	ldr	r2, [pc, #424]	; (8005a50 <HAL_DMA_Abort+0x44c>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d040      	beq.n	800592e <HAL_DMA_Abort+0x32a>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a68      	ldr	r2, [pc, #416]	; (8005a54 <HAL_DMA_Abort+0x450>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d03b      	beq.n	800592e <HAL_DMA_Abort+0x32a>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a67      	ldr	r2, [pc, #412]	; (8005a58 <HAL_DMA_Abort+0x454>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d036      	beq.n	800592e <HAL_DMA_Abort+0x32a>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a65      	ldr	r2, [pc, #404]	; (8005a5c <HAL_DMA_Abort+0x458>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d031      	beq.n	800592e <HAL_DMA_Abort+0x32a>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a64      	ldr	r2, [pc, #400]	; (8005a60 <HAL_DMA_Abort+0x45c>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d02c      	beq.n	800592e <HAL_DMA_Abort+0x32a>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a62      	ldr	r2, [pc, #392]	; (8005a64 <HAL_DMA_Abort+0x460>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d027      	beq.n	800592e <HAL_DMA_Abort+0x32a>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a61      	ldr	r2, [pc, #388]	; (8005a68 <HAL_DMA_Abort+0x464>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d022      	beq.n	800592e <HAL_DMA_Abort+0x32a>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a5f      	ldr	r2, [pc, #380]	; (8005a6c <HAL_DMA_Abort+0x468>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d01d      	beq.n	800592e <HAL_DMA_Abort+0x32a>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a5e      	ldr	r2, [pc, #376]	; (8005a70 <HAL_DMA_Abort+0x46c>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d018      	beq.n	800592e <HAL_DMA_Abort+0x32a>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a5c      	ldr	r2, [pc, #368]	; (8005a74 <HAL_DMA_Abort+0x470>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d013      	beq.n	800592e <HAL_DMA_Abort+0x32a>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a5b      	ldr	r2, [pc, #364]	; (8005a78 <HAL_DMA_Abort+0x474>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d00e      	beq.n	800592e <HAL_DMA_Abort+0x32a>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a59      	ldr	r2, [pc, #356]	; (8005a7c <HAL_DMA_Abort+0x478>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d009      	beq.n	800592e <HAL_DMA_Abort+0x32a>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a58      	ldr	r2, [pc, #352]	; (8005a80 <HAL_DMA_Abort+0x47c>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d004      	beq.n	800592e <HAL_DMA_Abort+0x32a>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a56      	ldr	r2, [pc, #344]	; (8005a84 <HAL_DMA_Abort+0x480>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d108      	bne.n	8005940 <HAL_DMA_Abort+0x33c>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f022 0201 	bic.w	r2, r2, #1
 800593c:	601a      	str	r2, [r3, #0]
 800593e:	e007      	b.n	8005950 <HAL_DMA_Abort+0x34c>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f022 0201 	bic.w	r2, r2, #1
 800594e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005950:	e013      	b.n	800597a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005952:	f7fd f9c5 	bl	8002ce0 <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	2b05      	cmp	r3, #5
 800595e:	d90c      	bls.n	800597a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2220      	movs	r2, #32
 8005964:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2203      	movs	r2, #3
 800596a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e12d      	b.n	8005bd6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1e5      	bne.n	8005952 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a2f      	ldr	r2, [pc, #188]	; (8005a48 <HAL_DMA_Abort+0x444>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d04a      	beq.n	8005a26 <HAL_DMA_Abort+0x422>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a2d      	ldr	r2, [pc, #180]	; (8005a4c <HAL_DMA_Abort+0x448>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d045      	beq.n	8005a26 <HAL_DMA_Abort+0x422>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a2c      	ldr	r2, [pc, #176]	; (8005a50 <HAL_DMA_Abort+0x44c>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d040      	beq.n	8005a26 <HAL_DMA_Abort+0x422>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a2a      	ldr	r2, [pc, #168]	; (8005a54 <HAL_DMA_Abort+0x450>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d03b      	beq.n	8005a26 <HAL_DMA_Abort+0x422>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a29      	ldr	r2, [pc, #164]	; (8005a58 <HAL_DMA_Abort+0x454>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d036      	beq.n	8005a26 <HAL_DMA_Abort+0x422>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a27      	ldr	r2, [pc, #156]	; (8005a5c <HAL_DMA_Abort+0x458>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d031      	beq.n	8005a26 <HAL_DMA_Abort+0x422>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a26      	ldr	r2, [pc, #152]	; (8005a60 <HAL_DMA_Abort+0x45c>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d02c      	beq.n	8005a26 <HAL_DMA_Abort+0x422>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a24      	ldr	r2, [pc, #144]	; (8005a64 <HAL_DMA_Abort+0x460>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d027      	beq.n	8005a26 <HAL_DMA_Abort+0x422>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a23      	ldr	r2, [pc, #140]	; (8005a68 <HAL_DMA_Abort+0x464>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d022      	beq.n	8005a26 <HAL_DMA_Abort+0x422>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a21      	ldr	r2, [pc, #132]	; (8005a6c <HAL_DMA_Abort+0x468>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d01d      	beq.n	8005a26 <HAL_DMA_Abort+0x422>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a20      	ldr	r2, [pc, #128]	; (8005a70 <HAL_DMA_Abort+0x46c>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d018      	beq.n	8005a26 <HAL_DMA_Abort+0x422>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a1e      	ldr	r2, [pc, #120]	; (8005a74 <HAL_DMA_Abort+0x470>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d013      	beq.n	8005a26 <HAL_DMA_Abort+0x422>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a1d      	ldr	r2, [pc, #116]	; (8005a78 <HAL_DMA_Abort+0x474>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d00e      	beq.n	8005a26 <HAL_DMA_Abort+0x422>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a1b      	ldr	r2, [pc, #108]	; (8005a7c <HAL_DMA_Abort+0x478>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d009      	beq.n	8005a26 <HAL_DMA_Abort+0x422>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a1a      	ldr	r2, [pc, #104]	; (8005a80 <HAL_DMA_Abort+0x47c>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d004      	beq.n	8005a26 <HAL_DMA_Abort+0x422>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a18      	ldr	r2, [pc, #96]	; (8005a84 <HAL_DMA_Abort+0x480>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d101      	bne.n	8005a2a <HAL_DMA_Abort+0x426>
 8005a26:	2301      	movs	r3, #1
 8005a28:	e000      	b.n	8005a2c <HAL_DMA_Abort+0x428>
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d02b      	beq.n	8005a88 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a34:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a3a:	f003 031f 	and.w	r3, r3, #31
 8005a3e:	223f      	movs	r2, #63	; 0x3f
 8005a40:	409a      	lsls	r2, r3
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	609a      	str	r2, [r3, #8]
 8005a46:	e02a      	b.n	8005a9e <HAL_DMA_Abort+0x49a>
 8005a48:	40020010 	.word	0x40020010
 8005a4c:	40020028 	.word	0x40020028
 8005a50:	40020040 	.word	0x40020040
 8005a54:	40020058 	.word	0x40020058
 8005a58:	40020070 	.word	0x40020070
 8005a5c:	40020088 	.word	0x40020088
 8005a60:	400200a0 	.word	0x400200a0
 8005a64:	400200b8 	.word	0x400200b8
 8005a68:	40020410 	.word	0x40020410
 8005a6c:	40020428 	.word	0x40020428
 8005a70:	40020440 	.word	0x40020440
 8005a74:	40020458 	.word	0x40020458
 8005a78:	40020470 	.word	0x40020470
 8005a7c:	40020488 	.word	0x40020488
 8005a80:	400204a0 	.word	0x400204a0
 8005a84:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a8c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a92:	f003 031f 	and.w	r3, r3, #31
 8005a96:	2201      	movs	r2, #1
 8005a98:	409a      	lsls	r2, r3
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a4f      	ldr	r2, [pc, #316]	; (8005be0 <HAL_DMA_Abort+0x5dc>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d072      	beq.n	8005b8e <HAL_DMA_Abort+0x58a>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a4d      	ldr	r2, [pc, #308]	; (8005be4 <HAL_DMA_Abort+0x5e0>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d06d      	beq.n	8005b8e <HAL_DMA_Abort+0x58a>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a4c      	ldr	r2, [pc, #304]	; (8005be8 <HAL_DMA_Abort+0x5e4>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d068      	beq.n	8005b8e <HAL_DMA_Abort+0x58a>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a4a      	ldr	r2, [pc, #296]	; (8005bec <HAL_DMA_Abort+0x5e8>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d063      	beq.n	8005b8e <HAL_DMA_Abort+0x58a>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a49      	ldr	r2, [pc, #292]	; (8005bf0 <HAL_DMA_Abort+0x5ec>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d05e      	beq.n	8005b8e <HAL_DMA_Abort+0x58a>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a47      	ldr	r2, [pc, #284]	; (8005bf4 <HAL_DMA_Abort+0x5f0>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d059      	beq.n	8005b8e <HAL_DMA_Abort+0x58a>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a46      	ldr	r2, [pc, #280]	; (8005bf8 <HAL_DMA_Abort+0x5f4>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d054      	beq.n	8005b8e <HAL_DMA_Abort+0x58a>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a44      	ldr	r2, [pc, #272]	; (8005bfc <HAL_DMA_Abort+0x5f8>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d04f      	beq.n	8005b8e <HAL_DMA_Abort+0x58a>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a43      	ldr	r2, [pc, #268]	; (8005c00 <HAL_DMA_Abort+0x5fc>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d04a      	beq.n	8005b8e <HAL_DMA_Abort+0x58a>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a41      	ldr	r2, [pc, #260]	; (8005c04 <HAL_DMA_Abort+0x600>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d045      	beq.n	8005b8e <HAL_DMA_Abort+0x58a>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a40      	ldr	r2, [pc, #256]	; (8005c08 <HAL_DMA_Abort+0x604>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d040      	beq.n	8005b8e <HAL_DMA_Abort+0x58a>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a3e      	ldr	r2, [pc, #248]	; (8005c0c <HAL_DMA_Abort+0x608>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d03b      	beq.n	8005b8e <HAL_DMA_Abort+0x58a>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a3d      	ldr	r2, [pc, #244]	; (8005c10 <HAL_DMA_Abort+0x60c>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d036      	beq.n	8005b8e <HAL_DMA_Abort+0x58a>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a3b      	ldr	r2, [pc, #236]	; (8005c14 <HAL_DMA_Abort+0x610>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d031      	beq.n	8005b8e <HAL_DMA_Abort+0x58a>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a3a      	ldr	r2, [pc, #232]	; (8005c18 <HAL_DMA_Abort+0x614>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d02c      	beq.n	8005b8e <HAL_DMA_Abort+0x58a>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a38      	ldr	r2, [pc, #224]	; (8005c1c <HAL_DMA_Abort+0x618>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d027      	beq.n	8005b8e <HAL_DMA_Abort+0x58a>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a37      	ldr	r2, [pc, #220]	; (8005c20 <HAL_DMA_Abort+0x61c>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d022      	beq.n	8005b8e <HAL_DMA_Abort+0x58a>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a35      	ldr	r2, [pc, #212]	; (8005c24 <HAL_DMA_Abort+0x620>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d01d      	beq.n	8005b8e <HAL_DMA_Abort+0x58a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a34      	ldr	r2, [pc, #208]	; (8005c28 <HAL_DMA_Abort+0x624>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d018      	beq.n	8005b8e <HAL_DMA_Abort+0x58a>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a32      	ldr	r2, [pc, #200]	; (8005c2c <HAL_DMA_Abort+0x628>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d013      	beq.n	8005b8e <HAL_DMA_Abort+0x58a>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a31      	ldr	r2, [pc, #196]	; (8005c30 <HAL_DMA_Abort+0x62c>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d00e      	beq.n	8005b8e <HAL_DMA_Abort+0x58a>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a2f      	ldr	r2, [pc, #188]	; (8005c34 <HAL_DMA_Abort+0x630>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d009      	beq.n	8005b8e <HAL_DMA_Abort+0x58a>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a2e      	ldr	r2, [pc, #184]	; (8005c38 <HAL_DMA_Abort+0x634>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d004      	beq.n	8005b8e <HAL_DMA_Abort+0x58a>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a2c      	ldr	r2, [pc, #176]	; (8005c3c <HAL_DMA_Abort+0x638>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d101      	bne.n	8005b92 <HAL_DMA_Abort+0x58e>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e000      	b.n	8005b94 <HAL_DMA_Abort+0x590>
 8005b92:	2300      	movs	r3, #0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d015      	beq.n	8005bc4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005ba0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00c      	beq.n	8005bc4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bb8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005bc2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3718      	adds	r7, #24
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	40020010 	.word	0x40020010
 8005be4:	40020028 	.word	0x40020028
 8005be8:	40020040 	.word	0x40020040
 8005bec:	40020058 	.word	0x40020058
 8005bf0:	40020070 	.word	0x40020070
 8005bf4:	40020088 	.word	0x40020088
 8005bf8:	400200a0 	.word	0x400200a0
 8005bfc:	400200b8 	.word	0x400200b8
 8005c00:	40020410 	.word	0x40020410
 8005c04:	40020428 	.word	0x40020428
 8005c08:	40020440 	.word	0x40020440
 8005c0c:	40020458 	.word	0x40020458
 8005c10:	40020470 	.word	0x40020470
 8005c14:	40020488 	.word	0x40020488
 8005c18:	400204a0 	.word	0x400204a0
 8005c1c:	400204b8 	.word	0x400204b8
 8005c20:	58025408 	.word	0x58025408
 8005c24:	5802541c 	.word	0x5802541c
 8005c28:	58025430 	.word	0x58025430
 8005c2c:	58025444 	.word	0x58025444
 8005c30:	58025458 	.word	0x58025458
 8005c34:	5802546c 	.word	0x5802546c
 8005c38:	58025480 	.word	0x58025480
 8005c3c:	58025494 	.word	0x58025494

08005c40 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d101      	bne.n	8005c52 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e237      	b.n	80060c2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d004      	beq.n	8005c68 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2280      	movs	r2, #128	; 0x80
 8005c62:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e22c      	b.n	80060c2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a5c      	ldr	r2, [pc, #368]	; (8005de0 <HAL_DMA_Abort_IT+0x1a0>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d04a      	beq.n	8005d08 <HAL_DMA_Abort_IT+0xc8>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a5b      	ldr	r2, [pc, #364]	; (8005de4 <HAL_DMA_Abort_IT+0x1a4>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d045      	beq.n	8005d08 <HAL_DMA_Abort_IT+0xc8>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a59      	ldr	r2, [pc, #356]	; (8005de8 <HAL_DMA_Abort_IT+0x1a8>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d040      	beq.n	8005d08 <HAL_DMA_Abort_IT+0xc8>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a58      	ldr	r2, [pc, #352]	; (8005dec <HAL_DMA_Abort_IT+0x1ac>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d03b      	beq.n	8005d08 <HAL_DMA_Abort_IT+0xc8>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a56      	ldr	r2, [pc, #344]	; (8005df0 <HAL_DMA_Abort_IT+0x1b0>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d036      	beq.n	8005d08 <HAL_DMA_Abort_IT+0xc8>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a55      	ldr	r2, [pc, #340]	; (8005df4 <HAL_DMA_Abort_IT+0x1b4>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d031      	beq.n	8005d08 <HAL_DMA_Abort_IT+0xc8>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a53      	ldr	r2, [pc, #332]	; (8005df8 <HAL_DMA_Abort_IT+0x1b8>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d02c      	beq.n	8005d08 <HAL_DMA_Abort_IT+0xc8>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a52      	ldr	r2, [pc, #328]	; (8005dfc <HAL_DMA_Abort_IT+0x1bc>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d027      	beq.n	8005d08 <HAL_DMA_Abort_IT+0xc8>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a50      	ldr	r2, [pc, #320]	; (8005e00 <HAL_DMA_Abort_IT+0x1c0>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d022      	beq.n	8005d08 <HAL_DMA_Abort_IT+0xc8>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a4f      	ldr	r2, [pc, #316]	; (8005e04 <HAL_DMA_Abort_IT+0x1c4>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d01d      	beq.n	8005d08 <HAL_DMA_Abort_IT+0xc8>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a4d      	ldr	r2, [pc, #308]	; (8005e08 <HAL_DMA_Abort_IT+0x1c8>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d018      	beq.n	8005d08 <HAL_DMA_Abort_IT+0xc8>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a4c      	ldr	r2, [pc, #304]	; (8005e0c <HAL_DMA_Abort_IT+0x1cc>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d013      	beq.n	8005d08 <HAL_DMA_Abort_IT+0xc8>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a4a      	ldr	r2, [pc, #296]	; (8005e10 <HAL_DMA_Abort_IT+0x1d0>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d00e      	beq.n	8005d08 <HAL_DMA_Abort_IT+0xc8>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a49      	ldr	r2, [pc, #292]	; (8005e14 <HAL_DMA_Abort_IT+0x1d4>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d009      	beq.n	8005d08 <HAL_DMA_Abort_IT+0xc8>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a47      	ldr	r2, [pc, #284]	; (8005e18 <HAL_DMA_Abort_IT+0x1d8>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d004      	beq.n	8005d08 <HAL_DMA_Abort_IT+0xc8>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a46      	ldr	r2, [pc, #280]	; (8005e1c <HAL_DMA_Abort_IT+0x1dc>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d101      	bne.n	8005d0c <HAL_DMA_Abort_IT+0xcc>
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e000      	b.n	8005d0e <HAL_DMA_Abort_IT+0xce>
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f000 8086 	beq.w	8005e20 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2204      	movs	r2, #4
 8005d18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a2f      	ldr	r2, [pc, #188]	; (8005de0 <HAL_DMA_Abort_IT+0x1a0>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d04a      	beq.n	8005dbc <HAL_DMA_Abort_IT+0x17c>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a2e      	ldr	r2, [pc, #184]	; (8005de4 <HAL_DMA_Abort_IT+0x1a4>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d045      	beq.n	8005dbc <HAL_DMA_Abort_IT+0x17c>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a2c      	ldr	r2, [pc, #176]	; (8005de8 <HAL_DMA_Abort_IT+0x1a8>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d040      	beq.n	8005dbc <HAL_DMA_Abort_IT+0x17c>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a2b      	ldr	r2, [pc, #172]	; (8005dec <HAL_DMA_Abort_IT+0x1ac>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d03b      	beq.n	8005dbc <HAL_DMA_Abort_IT+0x17c>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a29      	ldr	r2, [pc, #164]	; (8005df0 <HAL_DMA_Abort_IT+0x1b0>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d036      	beq.n	8005dbc <HAL_DMA_Abort_IT+0x17c>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a28      	ldr	r2, [pc, #160]	; (8005df4 <HAL_DMA_Abort_IT+0x1b4>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d031      	beq.n	8005dbc <HAL_DMA_Abort_IT+0x17c>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a26      	ldr	r2, [pc, #152]	; (8005df8 <HAL_DMA_Abort_IT+0x1b8>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d02c      	beq.n	8005dbc <HAL_DMA_Abort_IT+0x17c>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a25      	ldr	r2, [pc, #148]	; (8005dfc <HAL_DMA_Abort_IT+0x1bc>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d027      	beq.n	8005dbc <HAL_DMA_Abort_IT+0x17c>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a23      	ldr	r2, [pc, #140]	; (8005e00 <HAL_DMA_Abort_IT+0x1c0>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d022      	beq.n	8005dbc <HAL_DMA_Abort_IT+0x17c>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a22      	ldr	r2, [pc, #136]	; (8005e04 <HAL_DMA_Abort_IT+0x1c4>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d01d      	beq.n	8005dbc <HAL_DMA_Abort_IT+0x17c>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a20      	ldr	r2, [pc, #128]	; (8005e08 <HAL_DMA_Abort_IT+0x1c8>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d018      	beq.n	8005dbc <HAL_DMA_Abort_IT+0x17c>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a1f      	ldr	r2, [pc, #124]	; (8005e0c <HAL_DMA_Abort_IT+0x1cc>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d013      	beq.n	8005dbc <HAL_DMA_Abort_IT+0x17c>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a1d      	ldr	r2, [pc, #116]	; (8005e10 <HAL_DMA_Abort_IT+0x1d0>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d00e      	beq.n	8005dbc <HAL_DMA_Abort_IT+0x17c>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a1c      	ldr	r2, [pc, #112]	; (8005e14 <HAL_DMA_Abort_IT+0x1d4>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d009      	beq.n	8005dbc <HAL_DMA_Abort_IT+0x17c>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a1a      	ldr	r2, [pc, #104]	; (8005e18 <HAL_DMA_Abort_IT+0x1d8>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d004      	beq.n	8005dbc <HAL_DMA_Abort_IT+0x17c>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a19      	ldr	r2, [pc, #100]	; (8005e1c <HAL_DMA_Abort_IT+0x1dc>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d108      	bne.n	8005dce <HAL_DMA_Abort_IT+0x18e>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f022 0201 	bic.w	r2, r2, #1
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	e178      	b.n	80060c0 <HAL_DMA_Abort_IT+0x480>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f022 0201 	bic.w	r2, r2, #1
 8005ddc:	601a      	str	r2, [r3, #0]
 8005dde:	e16f      	b.n	80060c0 <HAL_DMA_Abort_IT+0x480>
 8005de0:	40020010 	.word	0x40020010
 8005de4:	40020028 	.word	0x40020028
 8005de8:	40020040 	.word	0x40020040
 8005dec:	40020058 	.word	0x40020058
 8005df0:	40020070 	.word	0x40020070
 8005df4:	40020088 	.word	0x40020088
 8005df8:	400200a0 	.word	0x400200a0
 8005dfc:	400200b8 	.word	0x400200b8
 8005e00:	40020410 	.word	0x40020410
 8005e04:	40020428 	.word	0x40020428
 8005e08:	40020440 	.word	0x40020440
 8005e0c:	40020458 	.word	0x40020458
 8005e10:	40020470 	.word	0x40020470
 8005e14:	40020488 	.word	0x40020488
 8005e18:	400204a0 	.word	0x400204a0
 8005e1c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f022 020e 	bic.w	r2, r2, #14
 8005e2e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a6c      	ldr	r2, [pc, #432]	; (8005fe8 <HAL_DMA_Abort_IT+0x3a8>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d04a      	beq.n	8005ed0 <HAL_DMA_Abort_IT+0x290>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a6b      	ldr	r2, [pc, #428]	; (8005fec <HAL_DMA_Abort_IT+0x3ac>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d045      	beq.n	8005ed0 <HAL_DMA_Abort_IT+0x290>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a69      	ldr	r2, [pc, #420]	; (8005ff0 <HAL_DMA_Abort_IT+0x3b0>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d040      	beq.n	8005ed0 <HAL_DMA_Abort_IT+0x290>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a68      	ldr	r2, [pc, #416]	; (8005ff4 <HAL_DMA_Abort_IT+0x3b4>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d03b      	beq.n	8005ed0 <HAL_DMA_Abort_IT+0x290>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a66      	ldr	r2, [pc, #408]	; (8005ff8 <HAL_DMA_Abort_IT+0x3b8>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d036      	beq.n	8005ed0 <HAL_DMA_Abort_IT+0x290>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a65      	ldr	r2, [pc, #404]	; (8005ffc <HAL_DMA_Abort_IT+0x3bc>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d031      	beq.n	8005ed0 <HAL_DMA_Abort_IT+0x290>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a63      	ldr	r2, [pc, #396]	; (8006000 <HAL_DMA_Abort_IT+0x3c0>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d02c      	beq.n	8005ed0 <HAL_DMA_Abort_IT+0x290>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a62      	ldr	r2, [pc, #392]	; (8006004 <HAL_DMA_Abort_IT+0x3c4>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d027      	beq.n	8005ed0 <HAL_DMA_Abort_IT+0x290>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a60      	ldr	r2, [pc, #384]	; (8006008 <HAL_DMA_Abort_IT+0x3c8>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d022      	beq.n	8005ed0 <HAL_DMA_Abort_IT+0x290>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a5f      	ldr	r2, [pc, #380]	; (800600c <HAL_DMA_Abort_IT+0x3cc>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d01d      	beq.n	8005ed0 <HAL_DMA_Abort_IT+0x290>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a5d      	ldr	r2, [pc, #372]	; (8006010 <HAL_DMA_Abort_IT+0x3d0>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d018      	beq.n	8005ed0 <HAL_DMA_Abort_IT+0x290>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a5c      	ldr	r2, [pc, #368]	; (8006014 <HAL_DMA_Abort_IT+0x3d4>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d013      	beq.n	8005ed0 <HAL_DMA_Abort_IT+0x290>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a5a      	ldr	r2, [pc, #360]	; (8006018 <HAL_DMA_Abort_IT+0x3d8>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d00e      	beq.n	8005ed0 <HAL_DMA_Abort_IT+0x290>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a59      	ldr	r2, [pc, #356]	; (800601c <HAL_DMA_Abort_IT+0x3dc>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d009      	beq.n	8005ed0 <HAL_DMA_Abort_IT+0x290>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a57      	ldr	r2, [pc, #348]	; (8006020 <HAL_DMA_Abort_IT+0x3e0>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d004      	beq.n	8005ed0 <HAL_DMA_Abort_IT+0x290>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a56      	ldr	r2, [pc, #344]	; (8006024 <HAL_DMA_Abort_IT+0x3e4>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d108      	bne.n	8005ee2 <HAL_DMA_Abort_IT+0x2a2>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f022 0201 	bic.w	r2, r2, #1
 8005ede:	601a      	str	r2, [r3, #0]
 8005ee0:	e007      	b.n	8005ef2 <HAL_DMA_Abort_IT+0x2b2>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f022 0201 	bic.w	r2, r2, #1
 8005ef0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a3c      	ldr	r2, [pc, #240]	; (8005fe8 <HAL_DMA_Abort_IT+0x3a8>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d072      	beq.n	8005fe2 <HAL_DMA_Abort_IT+0x3a2>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a3a      	ldr	r2, [pc, #232]	; (8005fec <HAL_DMA_Abort_IT+0x3ac>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d06d      	beq.n	8005fe2 <HAL_DMA_Abort_IT+0x3a2>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a39      	ldr	r2, [pc, #228]	; (8005ff0 <HAL_DMA_Abort_IT+0x3b0>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d068      	beq.n	8005fe2 <HAL_DMA_Abort_IT+0x3a2>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a37      	ldr	r2, [pc, #220]	; (8005ff4 <HAL_DMA_Abort_IT+0x3b4>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d063      	beq.n	8005fe2 <HAL_DMA_Abort_IT+0x3a2>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a36      	ldr	r2, [pc, #216]	; (8005ff8 <HAL_DMA_Abort_IT+0x3b8>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d05e      	beq.n	8005fe2 <HAL_DMA_Abort_IT+0x3a2>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a34      	ldr	r2, [pc, #208]	; (8005ffc <HAL_DMA_Abort_IT+0x3bc>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d059      	beq.n	8005fe2 <HAL_DMA_Abort_IT+0x3a2>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a33      	ldr	r2, [pc, #204]	; (8006000 <HAL_DMA_Abort_IT+0x3c0>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d054      	beq.n	8005fe2 <HAL_DMA_Abort_IT+0x3a2>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a31      	ldr	r2, [pc, #196]	; (8006004 <HAL_DMA_Abort_IT+0x3c4>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d04f      	beq.n	8005fe2 <HAL_DMA_Abort_IT+0x3a2>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a30      	ldr	r2, [pc, #192]	; (8006008 <HAL_DMA_Abort_IT+0x3c8>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d04a      	beq.n	8005fe2 <HAL_DMA_Abort_IT+0x3a2>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a2e      	ldr	r2, [pc, #184]	; (800600c <HAL_DMA_Abort_IT+0x3cc>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d045      	beq.n	8005fe2 <HAL_DMA_Abort_IT+0x3a2>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a2d      	ldr	r2, [pc, #180]	; (8006010 <HAL_DMA_Abort_IT+0x3d0>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d040      	beq.n	8005fe2 <HAL_DMA_Abort_IT+0x3a2>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a2b      	ldr	r2, [pc, #172]	; (8006014 <HAL_DMA_Abort_IT+0x3d4>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d03b      	beq.n	8005fe2 <HAL_DMA_Abort_IT+0x3a2>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a2a      	ldr	r2, [pc, #168]	; (8006018 <HAL_DMA_Abort_IT+0x3d8>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d036      	beq.n	8005fe2 <HAL_DMA_Abort_IT+0x3a2>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a28      	ldr	r2, [pc, #160]	; (800601c <HAL_DMA_Abort_IT+0x3dc>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d031      	beq.n	8005fe2 <HAL_DMA_Abort_IT+0x3a2>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a27      	ldr	r2, [pc, #156]	; (8006020 <HAL_DMA_Abort_IT+0x3e0>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d02c      	beq.n	8005fe2 <HAL_DMA_Abort_IT+0x3a2>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a25      	ldr	r2, [pc, #148]	; (8006024 <HAL_DMA_Abort_IT+0x3e4>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d027      	beq.n	8005fe2 <HAL_DMA_Abort_IT+0x3a2>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a24      	ldr	r2, [pc, #144]	; (8006028 <HAL_DMA_Abort_IT+0x3e8>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d022      	beq.n	8005fe2 <HAL_DMA_Abort_IT+0x3a2>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a22      	ldr	r2, [pc, #136]	; (800602c <HAL_DMA_Abort_IT+0x3ec>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d01d      	beq.n	8005fe2 <HAL_DMA_Abort_IT+0x3a2>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a21      	ldr	r2, [pc, #132]	; (8006030 <HAL_DMA_Abort_IT+0x3f0>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d018      	beq.n	8005fe2 <HAL_DMA_Abort_IT+0x3a2>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a1f      	ldr	r2, [pc, #124]	; (8006034 <HAL_DMA_Abort_IT+0x3f4>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d013      	beq.n	8005fe2 <HAL_DMA_Abort_IT+0x3a2>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a1e      	ldr	r2, [pc, #120]	; (8006038 <HAL_DMA_Abort_IT+0x3f8>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d00e      	beq.n	8005fe2 <HAL_DMA_Abort_IT+0x3a2>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a1c      	ldr	r2, [pc, #112]	; (800603c <HAL_DMA_Abort_IT+0x3fc>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d009      	beq.n	8005fe2 <HAL_DMA_Abort_IT+0x3a2>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a1b      	ldr	r2, [pc, #108]	; (8006040 <HAL_DMA_Abort_IT+0x400>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d004      	beq.n	8005fe2 <HAL_DMA_Abort_IT+0x3a2>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a19      	ldr	r2, [pc, #100]	; (8006044 <HAL_DMA_Abort_IT+0x404>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d132      	bne.n	8006048 <HAL_DMA_Abort_IT+0x408>
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e031      	b.n	800604a <HAL_DMA_Abort_IT+0x40a>
 8005fe6:	bf00      	nop
 8005fe8:	40020010 	.word	0x40020010
 8005fec:	40020028 	.word	0x40020028
 8005ff0:	40020040 	.word	0x40020040
 8005ff4:	40020058 	.word	0x40020058
 8005ff8:	40020070 	.word	0x40020070
 8005ffc:	40020088 	.word	0x40020088
 8006000:	400200a0 	.word	0x400200a0
 8006004:	400200b8 	.word	0x400200b8
 8006008:	40020410 	.word	0x40020410
 800600c:	40020428 	.word	0x40020428
 8006010:	40020440 	.word	0x40020440
 8006014:	40020458 	.word	0x40020458
 8006018:	40020470 	.word	0x40020470
 800601c:	40020488 	.word	0x40020488
 8006020:	400204a0 	.word	0x400204a0
 8006024:	400204b8 	.word	0x400204b8
 8006028:	58025408 	.word	0x58025408
 800602c:	5802541c 	.word	0x5802541c
 8006030:	58025430 	.word	0x58025430
 8006034:	58025444 	.word	0x58025444
 8006038:	58025458 	.word	0x58025458
 800603c:	5802546c 	.word	0x5802546c
 8006040:	58025480 	.word	0x58025480
 8006044:	58025494 	.word	0x58025494
 8006048:	2300      	movs	r3, #0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d028      	beq.n	80060a0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006058:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800605c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006062:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006068:	f003 031f 	and.w	r3, r3, #31
 800606c:	2201      	movs	r2, #1
 800606e:	409a      	lsls	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800607c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00c      	beq.n	80060a0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006090:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006094:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800609e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d003      	beq.n	80060c0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop

080060cc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b08a      	sub	sp, #40	; 0x28
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80060d4:	2300      	movs	r3, #0
 80060d6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80060d8:	4b67      	ldr	r3, [pc, #412]	; (8006278 <HAL_DMA_IRQHandler+0x1ac>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a67      	ldr	r2, [pc, #412]	; (800627c <HAL_DMA_IRQHandler+0x1b0>)
 80060de:	fba2 2303 	umull	r2, r3, r2, r3
 80060e2:	0a9b      	lsrs	r3, r3, #10
 80060e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ea:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060f0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80060f2:	6a3b      	ldr	r3, [r7, #32]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a5f      	ldr	r2, [pc, #380]	; (8006280 <HAL_DMA_IRQHandler+0x1b4>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d04a      	beq.n	800619e <HAL_DMA_IRQHandler+0xd2>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a5d      	ldr	r2, [pc, #372]	; (8006284 <HAL_DMA_IRQHandler+0x1b8>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d045      	beq.n	800619e <HAL_DMA_IRQHandler+0xd2>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a5c      	ldr	r2, [pc, #368]	; (8006288 <HAL_DMA_IRQHandler+0x1bc>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d040      	beq.n	800619e <HAL_DMA_IRQHandler+0xd2>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a5a      	ldr	r2, [pc, #360]	; (800628c <HAL_DMA_IRQHandler+0x1c0>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d03b      	beq.n	800619e <HAL_DMA_IRQHandler+0xd2>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a59      	ldr	r2, [pc, #356]	; (8006290 <HAL_DMA_IRQHandler+0x1c4>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d036      	beq.n	800619e <HAL_DMA_IRQHandler+0xd2>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a57      	ldr	r2, [pc, #348]	; (8006294 <HAL_DMA_IRQHandler+0x1c8>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d031      	beq.n	800619e <HAL_DMA_IRQHandler+0xd2>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a56      	ldr	r2, [pc, #344]	; (8006298 <HAL_DMA_IRQHandler+0x1cc>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d02c      	beq.n	800619e <HAL_DMA_IRQHandler+0xd2>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a54      	ldr	r2, [pc, #336]	; (800629c <HAL_DMA_IRQHandler+0x1d0>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d027      	beq.n	800619e <HAL_DMA_IRQHandler+0xd2>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a53      	ldr	r2, [pc, #332]	; (80062a0 <HAL_DMA_IRQHandler+0x1d4>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d022      	beq.n	800619e <HAL_DMA_IRQHandler+0xd2>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a51      	ldr	r2, [pc, #324]	; (80062a4 <HAL_DMA_IRQHandler+0x1d8>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d01d      	beq.n	800619e <HAL_DMA_IRQHandler+0xd2>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a50      	ldr	r2, [pc, #320]	; (80062a8 <HAL_DMA_IRQHandler+0x1dc>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d018      	beq.n	800619e <HAL_DMA_IRQHandler+0xd2>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a4e      	ldr	r2, [pc, #312]	; (80062ac <HAL_DMA_IRQHandler+0x1e0>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d013      	beq.n	800619e <HAL_DMA_IRQHandler+0xd2>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a4d      	ldr	r2, [pc, #308]	; (80062b0 <HAL_DMA_IRQHandler+0x1e4>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d00e      	beq.n	800619e <HAL_DMA_IRQHandler+0xd2>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a4b      	ldr	r2, [pc, #300]	; (80062b4 <HAL_DMA_IRQHandler+0x1e8>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d009      	beq.n	800619e <HAL_DMA_IRQHandler+0xd2>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a4a      	ldr	r2, [pc, #296]	; (80062b8 <HAL_DMA_IRQHandler+0x1ec>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d004      	beq.n	800619e <HAL_DMA_IRQHandler+0xd2>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a48      	ldr	r2, [pc, #288]	; (80062bc <HAL_DMA_IRQHandler+0x1f0>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d101      	bne.n	80061a2 <HAL_DMA_IRQHandler+0xd6>
 800619e:	2301      	movs	r3, #1
 80061a0:	e000      	b.n	80061a4 <HAL_DMA_IRQHandler+0xd8>
 80061a2:	2300      	movs	r3, #0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 842b 	beq.w	8006a00 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ae:	f003 031f 	and.w	r3, r3, #31
 80061b2:	2208      	movs	r2, #8
 80061b4:	409a      	lsls	r2, r3
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	4013      	ands	r3, r2
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	f000 80a2 	beq.w	8006304 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a2e      	ldr	r2, [pc, #184]	; (8006280 <HAL_DMA_IRQHandler+0x1b4>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d04a      	beq.n	8006260 <HAL_DMA_IRQHandler+0x194>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a2d      	ldr	r2, [pc, #180]	; (8006284 <HAL_DMA_IRQHandler+0x1b8>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d045      	beq.n	8006260 <HAL_DMA_IRQHandler+0x194>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a2b      	ldr	r2, [pc, #172]	; (8006288 <HAL_DMA_IRQHandler+0x1bc>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d040      	beq.n	8006260 <HAL_DMA_IRQHandler+0x194>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a2a      	ldr	r2, [pc, #168]	; (800628c <HAL_DMA_IRQHandler+0x1c0>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d03b      	beq.n	8006260 <HAL_DMA_IRQHandler+0x194>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a28      	ldr	r2, [pc, #160]	; (8006290 <HAL_DMA_IRQHandler+0x1c4>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d036      	beq.n	8006260 <HAL_DMA_IRQHandler+0x194>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a27      	ldr	r2, [pc, #156]	; (8006294 <HAL_DMA_IRQHandler+0x1c8>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d031      	beq.n	8006260 <HAL_DMA_IRQHandler+0x194>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a25      	ldr	r2, [pc, #148]	; (8006298 <HAL_DMA_IRQHandler+0x1cc>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d02c      	beq.n	8006260 <HAL_DMA_IRQHandler+0x194>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a24      	ldr	r2, [pc, #144]	; (800629c <HAL_DMA_IRQHandler+0x1d0>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d027      	beq.n	8006260 <HAL_DMA_IRQHandler+0x194>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a22      	ldr	r2, [pc, #136]	; (80062a0 <HAL_DMA_IRQHandler+0x1d4>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d022      	beq.n	8006260 <HAL_DMA_IRQHandler+0x194>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a21      	ldr	r2, [pc, #132]	; (80062a4 <HAL_DMA_IRQHandler+0x1d8>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d01d      	beq.n	8006260 <HAL_DMA_IRQHandler+0x194>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a1f      	ldr	r2, [pc, #124]	; (80062a8 <HAL_DMA_IRQHandler+0x1dc>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d018      	beq.n	8006260 <HAL_DMA_IRQHandler+0x194>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a1e      	ldr	r2, [pc, #120]	; (80062ac <HAL_DMA_IRQHandler+0x1e0>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d013      	beq.n	8006260 <HAL_DMA_IRQHandler+0x194>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a1c      	ldr	r2, [pc, #112]	; (80062b0 <HAL_DMA_IRQHandler+0x1e4>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d00e      	beq.n	8006260 <HAL_DMA_IRQHandler+0x194>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a1b      	ldr	r2, [pc, #108]	; (80062b4 <HAL_DMA_IRQHandler+0x1e8>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d009      	beq.n	8006260 <HAL_DMA_IRQHandler+0x194>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a19      	ldr	r2, [pc, #100]	; (80062b8 <HAL_DMA_IRQHandler+0x1ec>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d004      	beq.n	8006260 <HAL_DMA_IRQHandler+0x194>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a18      	ldr	r2, [pc, #96]	; (80062bc <HAL_DMA_IRQHandler+0x1f0>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d12f      	bne.n	80062c0 <HAL_DMA_IRQHandler+0x1f4>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 0304 	and.w	r3, r3, #4
 800626a:	2b00      	cmp	r3, #0
 800626c:	bf14      	ite	ne
 800626e:	2301      	movne	r3, #1
 8006270:	2300      	moveq	r3, #0
 8006272:	b2db      	uxtb	r3, r3
 8006274:	e02e      	b.n	80062d4 <HAL_DMA_IRQHandler+0x208>
 8006276:	bf00      	nop
 8006278:	24000004 	.word	0x24000004
 800627c:	1b4e81b5 	.word	0x1b4e81b5
 8006280:	40020010 	.word	0x40020010
 8006284:	40020028 	.word	0x40020028
 8006288:	40020040 	.word	0x40020040
 800628c:	40020058 	.word	0x40020058
 8006290:	40020070 	.word	0x40020070
 8006294:	40020088 	.word	0x40020088
 8006298:	400200a0 	.word	0x400200a0
 800629c:	400200b8 	.word	0x400200b8
 80062a0:	40020410 	.word	0x40020410
 80062a4:	40020428 	.word	0x40020428
 80062a8:	40020440 	.word	0x40020440
 80062ac:	40020458 	.word	0x40020458
 80062b0:	40020470 	.word	0x40020470
 80062b4:	40020488 	.word	0x40020488
 80062b8:	400204a0 	.word	0x400204a0
 80062bc:	400204b8 	.word	0x400204b8
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0308 	and.w	r3, r3, #8
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	bf14      	ite	ne
 80062ce:	2301      	movne	r3, #1
 80062d0:	2300      	moveq	r3, #0
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d015      	beq.n	8006304 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f022 0204 	bic.w	r2, r2, #4
 80062e6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ec:	f003 031f 	and.w	r3, r3, #31
 80062f0:	2208      	movs	r2, #8
 80062f2:	409a      	lsls	r2, r3
 80062f4:	6a3b      	ldr	r3, [r7, #32]
 80062f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062fc:	f043 0201 	orr.w	r2, r3, #1
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006308:	f003 031f 	and.w	r3, r3, #31
 800630c:	69ba      	ldr	r2, [r7, #24]
 800630e:	fa22 f303 	lsr.w	r3, r2, r3
 8006312:	f003 0301 	and.w	r3, r3, #1
 8006316:	2b00      	cmp	r3, #0
 8006318:	d06e      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a69      	ldr	r2, [pc, #420]	; (80064c4 <HAL_DMA_IRQHandler+0x3f8>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d04a      	beq.n	80063ba <HAL_DMA_IRQHandler+0x2ee>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a67      	ldr	r2, [pc, #412]	; (80064c8 <HAL_DMA_IRQHandler+0x3fc>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d045      	beq.n	80063ba <HAL_DMA_IRQHandler+0x2ee>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a66      	ldr	r2, [pc, #408]	; (80064cc <HAL_DMA_IRQHandler+0x400>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d040      	beq.n	80063ba <HAL_DMA_IRQHandler+0x2ee>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a64      	ldr	r2, [pc, #400]	; (80064d0 <HAL_DMA_IRQHandler+0x404>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d03b      	beq.n	80063ba <HAL_DMA_IRQHandler+0x2ee>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a63      	ldr	r2, [pc, #396]	; (80064d4 <HAL_DMA_IRQHandler+0x408>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d036      	beq.n	80063ba <HAL_DMA_IRQHandler+0x2ee>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a61      	ldr	r2, [pc, #388]	; (80064d8 <HAL_DMA_IRQHandler+0x40c>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d031      	beq.n	80063ba <HAL_DMA_IRQHandler+0x2ee>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a60      	ldr	r2, [pc, #384]	; (80064dc <HAL_DMA_IRQHandler+0x410>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d02c      	beq.n	80063ba <HAL_DMA_IRQHandler+0x2ee>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a5e      	ldr	r2, [pc, #376]	; (80064e0 <HAL_DMA_IRQHandler+0x414>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d027      	beq.n	80063ba <HAL_DMA_IRQHandler+0x2ee>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a5d      	ldr	r2, [pc, #372]	; (80064e4 <HAL_DMA_IRQHandler+0x418>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d022      	beq.n	80063ba <HAL_DMA_IRQHandler+0x2ee>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a5b      	ldr	r2, [pc, #364]	; (80064e8 <HAL_DMA_IRQHandler+0x41c>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d01d      	beq.n	80063ba <HAL_DMA_IRQHandler+0x2ee>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a5a      	ldr	r2, [pc, #360]	; (80064ec <HAL_DMA_IRQHandler+0x420>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d018      	beq.n	80063ba <HAL_DMA_IRQHandler+0x2ee>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a58      	ldr	r2, [pc, #352]	; (80064f0 <HAL_DMA_IRQHandler+0x424>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d013      	beq.n	80063ba <HAL_DMA_IRQHandler+0x2ee>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a57      	ldr	r2, [pc, #348]	; (80064f4 <HAL_DMA_IRQHandler+0x428>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d00e      	beq.n	80063ba <HAL_DMA_IRQHandler+0x2ee>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a55      	ldr	r2, [pc, #340]	; (80064f8 <HAL_DMA_IRQHandler+0x42c>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d009      	beq.n	80063ba <HAL_DMA_IRQHandler+0x2ee>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a54      	ldr	r2, [pc, #336]	; (80064fc <HAL_DMA_IRQHandler+0x430>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d004      	beq.n	80063ba <HAL_DMA_IRQHandler+0x2ee>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a52      	ldr	r2, [pc, #328]	; (8006500 <HAL_DMA_IRQHandler+0x434>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d10a      	bne.n	80063d0 <HAL_DMA_IRQHandler+0x304>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	695b      	ldr	r3, [r3, #20]
 80063c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	bf14      	ite	ne
 80063c8:	2301      	movne	r3, #1
 80063ca:	2300      	moveq	r3, #0
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	e003      	b.n	80063d8 <HAL_DMA_IRQHandler+0x30c>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2300      	movs	r3, #0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00d      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063e0:	f003 031f 	and.w	r3, r3, #31
 80063e4:	2201      	movs	r2, #1
 80063e6:	409a      	lsls	r2, r3
 80063e8:	6a3b      	ldr	r3, [r7, #32]
 80063ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063f0:	f043 0202 	orr.w	r2, r3, #2
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063fc:	f003 031f 	and.w	r3, r3, #31
 8006400:	2204      	movs	r2, #4
 8006402:	409a      	lsls	r2, r3
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	4013      	ands	r3, r2
 8006408:	2b00      	cmp	r3, #0
 800640a:	f000 808f 	beq.w	800652c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a2c      	ldr	r2, [pc, #176]	; (80064c4 <HAL_DMA_IRQHandler+0x3f8>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d04a      	beq.n	80064ae <HAL_DMA_IRQHandler+0x3e2>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a2a      	ldr	r2, [pc, #168]	; (80064c8 <HAL_DMA_IRQHandler+0x3fc>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d045      	beq.n	80064ae <HAL_DMA_IRQHandler+0x3e2>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a29      	ldr	r2, [pc, #164]	; (80064cc <HAL_DMA_IRQHandler+0x400>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d040      	beq.n	80064ae <HAL_DMA_IRQHandler+0x3e2>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a27      	ldr	r2, [pc, #156]	; (80064d0 <HAL_DMA_IRQHandler+0x404>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d03b      	beq.n	80064ae <HAL_DMA_IRQHandler+0x3e2>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a26      	ldr	r2, [pc, #152]	; (80064d4 <HAL_DMA_IRQHandler+0x408>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d036      	beq.n	80064ae <HAL_DMA_IRQHandler+0x3e2>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a24      	ldr	r2, [pc, #144]	; (80064d8 <HAL_DMA_IRQHandler+0x40c>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d031      	beq.n	80064ae <HAL_DMA_IRQHandler+0x3e2>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a23      	ldr	r2, [pc, #140]	; (80064dc <HAL_DMA_IRQHandler+0x410>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d02c      	beq.n	80064ae <HAL_DMA_IRQHandler+0x3e2>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a21      	ldr	r2, [pc, #132]	; (80064e0 <HAL_DMA_IRQHandler+0x414>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d027      	beq.n	80064ae <HAL_DMA_IRQHandler+0x3e2>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a20      	ldr	r2, [pc, #128]	; (80064e4 <HAL_DMA_IRQHandler+0x418>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d022      	beq.n	80064ae <HAL_DMA_IRQHandler+0x3e2>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a1e      	ldr	r2, [pc, #120]	; (80064e8 <HAL_DMA_IRQHandler+0x41c>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d01d      	beq.n	80064ae <HAL_DMA_IRQHandler+0x3e2>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a1d      	ldr	r2, [pc, #116]	; (80064ec <HAL_DMA_IRQHandler+0x420>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d018      	beq.n	80064ae <HAL_DMA_IRQHandler+0x3e2>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a1b      	ldr	r2, [pc, #108]	; (80064f0 <HAL_DMA_IRQHandler+0x424>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d013      	beq.n	80064ae <HAL_DMA_IRQHandler+0x3e2>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a1a      	ldr	r2, [pc, #104]	; (80064f4 <HAL_DMA_IRQHandler+0x428>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d00e      	beq.n	80064ae <HAL_DMA_IRQHandler+0x3e2>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a18      	ldr	r2, [pc, #96]	; (80064f8 <HAL_DMA_IRQHandler+0x42c>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d009      	beq.n	80064ae <HAL_DMA_IRQHandler+0x3e2>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a17      	ldr	r2, [pc, #92]	; (80064fc <HAL_DMA_IRQHandler+0x430>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d004      	beq.n	80064ae <HAL_DMA_IRQHandler+0x3e2>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a15      	ldr	r2, [pc, #84]	; (8006500 <HAL_DMA_IRQHandler+0x434>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d12a      	bne.n	8006504 <HAL_DMA_IRQHandler+0x438>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0302 	and.w	r3, r3, #2
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	bf14      	ite	ne
 80064bc:	2301      	movne	r3, #1
 80064be:	2300      	moveq	r3, #0
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	e023      	b.n	800650c <HAL_DMA_IRQHandler+0x440>
 80064c4:	40020010 	.word	0x40020010
 80064c8:	40020028 	.word	0x40020028
 80064cc:	40020040 	.word	0x40020040
 80064d0:	40020058 	.word	0x40020058
 80064d4:	40020070 	.word	0x40020070
 80064d8:	40020088 	.word	0x40020088
 80064dc:	400200a0 	.word	0x400200a0
 80064e0:	400200b8 	.word	0x400200b8
 80064e4:	40020410 	.word	0x40020410
 80064e8:	40020428 	.word	0x40020428
 80064ec:	40020440 	.word	0x40020440
 80064f0:	40020458 	.word	0x40020458
 80064f4:	40020470 	.word	0x40020470
 80064f8:	40020488 	.word	0x40020488
 80064fc:	400204a0 	.word	0x400204a0
 8006500:	400204b8 	.word	0x400204b8
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2300      	movs	r3, #0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d00d      	beq.n	800652c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006514:	f003 031f 	and.w	r3, r3, #31
 8006518:	2204      	movs	r2, #4
 800651a:	409a      	lsls	r2, r3
 800651c:	6a3b      	ldr	r3, [r7, #32]
 800651e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006524:	f043 0204 	orr.w	r2, r3, #4
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006530:	f003 031f 	and.w	r3, r3, #31
 8006534:	2210      	movs	r2, #16
 8006536:	409a      	lsls	r2, r3
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	4013      	ands	r3, r2
 800653c:	2b00      	cmp	r3, #0
 800653e:	f000 80a6 	beq.w	800668e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a85      	ldr	r2, [pc, #532]	; (800675c <HAL_DMA_IRQHandler+0x690>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d04a      	beq.n	80065e2 <HAL_DMA_IRQHandler+0x516>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a83      	ldr	r2, [pc, #524]	; (8006760 <HAL_DMA_IRQHandler+0x694>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d045      	beq.n	80065e2 <HAL_DMA_IRQHandler+0x516>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a82      	ldr	r2, [pc, #520]	; (8006764 <HAL_DMA_IRQHandler+0x698>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d040      	beq.n	80065e2 <HAL_DMA_IRQHandler+0x516>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a80      	ldr	r2, [pc, #512]	; (8006768 <HAL_DMA_IRQHandler+0x69c>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d03b      	beq.n	80065e2 <HAL_DMA_IRQHandler+0x516>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a7f      	ldr	r2, [pc, #508]	; (800676c <HAL_DMA_IRQHandler+0x6a0>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d036      	beq.n	80065e2 <HAL_DMA_IRQHandler+0x516>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a7d      	ldr	r2, [pc, #500]	; (8006770 <HAL_DMA_IRQHandler+0x6a4>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d031      	beq.n	80065e2 <HAL_DMA_IRQHandler+0x516>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a7c      	ldr	r2, [pc, #496]	; (8006774 <HAL_DMA_IRQHandler+0x6a8>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d02c      	beq.n	80065e2 <HAL_DMA_IRQHandler+0x516>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a7a      	ldr	r2, [pc, #488]	; (8006778 <HAL_DMA_IRQHandler+0x6ac>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d027      	beq.n	80065e2 <HAL_DMA_IRQHandler+0x516>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a79      	ldr	r2, [pc, #484]	; (800677c <HAL_DMA_IRQHandler+0x6b0>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d022      	beq.n	80065e2 <HAL_DMA_IRQHandler+0x516>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a77      	ldr	r2, [pc, #476]	; (8006780 <HAL_DMA_IRQHandler+0x6b4>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d01d      	beq.n	80065e2 <HAL_DMA_IRQHandler+0x516>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a76      	ldr	r2, [pc, #472]	; (8006784 <HAL_DMA_IRQHandler+0x6b8>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d018      	beq.n	80065e2 <HAL_DMA_IRQHandler+0x516>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a74      	ldr	r2, [pc, #464]	; (8006788 <HAL_DMA_IRQHandler+0x6bc>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d013      	beq.n	80065e2 <HAL_DMA_IRQHandler+0x516>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a73      	ldr	r2, [pc, #460]	; (800678c <HAL_DMA_IRQHandler+0x6c0>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d00e      	beq.n	80065e2 <HAL_DMA_IRQHandler+0x516>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a71      	ldr	r2, [pc, #452]	; (8006790 <HAL_DMA_IRQHandler+0x6c4>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d009      	beq.n	80065e2 <HAL_DMA_IRQHandler+0x516>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a70      	ldr	r2, [pc, #448]	; (8006794 <HAL_DMA_IRQHandler+0x6c8>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d004      	beq.n	80065e2 <HAL_DMA_IRQHandler+0x516>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a6e      	ldr	r2, [pc, #440]	; (8006798 <HAL_DMA_IRQHandler+0x6cc>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d10a      	bne.n	80065f8 <HAL_DMA_IRQHandler+0x52c>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 0308 	and.w	r3, r3, #8
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	bf14      	ite	ne
 80065f0:	2301      	movne	r3, #1
 80065f2:	2300      	moveq	r3, #0
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	e009      	b.n	800660c <HAL_DMA_IRQHandler+0x540>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0304 	and.w	r3, r3, #4
 8006602:	2b00      	cmp	r3, #0
 8006604:	bf14      	ite	ne
 8006606:	2301      	movne	r3, #1
 8006608:	2300      	moveq	r3, #0
 800660a:	b2db      	uxtb	r3, r3
 800660c:	2b00      	cmp	r3, #0
 800660e:	d03e      	beq.n	800668e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006614:	f003 031f 	and.w	r3, r3, #31
 8006618:	2210      	movs	r2, #16
 800661a:	409a      	lsls	r2, r3
 800661c:	6a3b      	ldr	r3, [r7, #32]
 800661e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800662a:	2b00      	cmp	r3, #0
 800662c:	d018      	beq.n	8006660 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d108      	bne.n	800664e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006640:	2b00      	cmp	r3, #0
 8006642:	d024      	beq.n	800668e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	4798      	blx	r3
 800664c:	e01f      	b.n	800668e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006652:	2b00      	cmp	r3, #0
 8006654:	d01b      	beq.n	800668e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	4798      	blx	r3
 800665e:	e016      	b.n	800668e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800666a:	2b00      	cmp	r3, #0
 800666c:	d107      	bne.n	800667e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f022 0208 	bic.w	r2, r2, #8
 800667c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006682:	2b00      	cmp	r3, #0
 8006684:	d003      	beq.n	800668e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006692:	f003 031f 	and.w	r3, r3, #31
 8006696:	2220      	movs	r2, #32
 8006698:	409a      	lsls	r2, r3
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	4013      	ands	r3, r2
 800669e:	2b00      	cmp	r3, #0
 80066a0:	f000 8110 	beq.w	80068c4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a2c      	ldr	r2, [pc, #176]	; (800675c <HAL_DMA_IRQHandler+0x690>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d04a      	beq.n	8006744 <HAL_DMA_IRQHandler+0x678>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a2b      	ldr	r2, [pc, #172]	; (8006760 <HAL_DMA_IRQHandler+0x694>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d045      	beq.n	8006744 <HAL_DMA_IRQHandler+0x678>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a29      	ldr	r2, [pc, #164]	; (8006764 <HAL_DMA_IRQHandler+0x698>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d040      	beq.n	8006744 <HAL_DMA_IRQHandler+0x678>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a28      	ldr	r2, [pc, #160]	; (8006768 <HAL_DMA_IRQHandler+0x69c>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d03b      	beq.n	8006744 <HAL_DMA_IRQHandler+0x678>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a26      	ldr	r2, [pc, #152]	; (800676c <HAL_DMA_IRQHandler+0x6a0>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d036      	beq.n	8006744 <HAL_DMA_IRQHandler+0x678>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a25      	ldr	r2, [pc, #148]	; (8006770 <HAL_DMA_IRQHandler+0x6a4>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d031      	beq.n	8006744 <HAL_DMA_IRQHandler+0x678>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a23      	ldr	r2, [pc, #140]	; (8006774 <HAL_DMA_IRQHandler+0x6a8>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d02c      	beq.n	8006744 <HAL_DMA_IRQHandler+0x678>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a22      	ldr	r2, [pc, #136]	; (8006778 <HAL_DMA_IRQHandler+0x6ac>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d027      	beq.n	8006744 <HAL_DMA_IRQHandler+0x678>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a20      	ldr	r2, [pc, #128]	; (800677c <HAL_DMA_IRQHandler+0x6b0>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d022      	beq.n	8006744 <HAL_DMA_IRQHandler+0x678>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a1f      	ldr	r2, [pc, #124]	; (8006780 <HAL_DMA_IRQHandler+0x6b4>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d01d      	beq.n	8006744 <HAL_DMA_IRQHandler+0x678>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a1d      	ldr	r2, [pc, #116]	; (8006784 <HAL_DMA_IRQHandler+0x6b8>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d018      	beq.n	8006744 <HAL_DMA_IRQHandler+0x678>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a1c      	ldr	r2, [pc, #112]	; (8006788 <HAL_DMA_IRQHandler+0x6bc>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d013      	beq.n	8006744 <HAL_DMA_IRQHandler+0x678>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a1a      	ldr	r2, [pc, #104]	; (800678c <HAL_DMA_IRQHandler+0x6c0>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d00e      	beq.n	8006744 <HAL_DMA_IRQHandler+0x678>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a19      	ldr	r2, [pc, #100]	; (8006790 <HAL_DMA_IRQHandler+0x6c4>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d009      	beq.n	8006744 <HAL_DMA_IRQHandler+0x678>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a17      	ldr	r2, [pc, #92]	; (8006794 <HAL_DMA_IRQHandler+0x6c8>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d004      	beq.n	8006744 <HAL_DMA_IRQHandler+0x678>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a16      	ldr	r2, [pc, #88]	; (8006798 <HAL_DMA_IRQHandler+0x6cc>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d12b      	bne.n	800679c <HAL_DMA_IRQHandler+0x6d0>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 0310 	and.w	r3, r3, #16
 800674e:	2b00      	cmp	r3, #0
 8006750:	bf14      	ite	ne
 8006752:	2301      	movne	r3, #1
 8006754:	2300      	moveq	r3, #0
 8006756:	b2db      	uxtb	r3, r3
 8006758:	e02a      	b.n	80067b0 <HAL_DMA_IRQHandler+0x6e4>
 800675a:	bf00      	nop
 800675c:	40020010 	.word	0x40020010
 8006760:	40020028 	.word	0x40020028
 8006764:	40020040 	.word	0x40020040
 8006768:	40020058 	.word	0x40020058
 800676c:	40020070 	.word	0x40020070
 8006770:	40020088 	.word	0x40020088
 8006774:	400200a0 	.word	0x400200a0
 8006778:	400200b8 	.word	0x400200b8
 800677c:	40020410 	.word	0x40020410
 8006780:	40020428 	.word	0x40020428
 8006784:	40020440 	.word	0x40020440
 8006788:	40020458 	.word	0x40020458
 800678c:	40020470 	.word	0x40020470
 8006790:	40020488 	.word	0x40020488
 8006794:	400204a0 	.word	0x400204a0
 8006798:	400204b8 	.word	0x400204b8
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0302 	and.w	r3, r3, #2
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	bf14      	ite	ne
 80067aa:	2301      	movne	r3, #1
 80067ac:	2300      	moveq	r3, #0
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f000 8087 	beq.w	80068c4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067ba:	f003 031f 	and.w	r3, r3, #31
 80067be:	2220      	movs	r2, #32
 80067c0:	409a      	lsls	r2, r3
 80067c2:	6a3b      	ldr	r3, [r7, #32]
 80067c4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	2b04      	cmp	r3, #4
 80067d0:	d139      	bne.n	8006846 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f022 0216 	bic.w	r2, r2, #22
 80067e0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	695a      	ldr	r2, [r3, #20]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067f0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d103      	bne.n	8006802 <HAL_DMA_IRQHandler+0x736>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d007      	beq.n	8006812 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f022 0208 	bic.w	r2, r2, #8
 8006810:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006816:	f003 031f 	and.w	r3, r3, #31
 800681a:	223f      	movs	r2, #63	; 0x3f
 800681c:	409a      	lsls	r2, r3
 800681e:	6a3b      	ldr	r3, [r7, #32]
 8006820:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2201      	movs	r2, #1
 8006826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006836:	2b00      	cmp	r3, #0
 8006838:	f000 834a 	beq.w	8006ed0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	4798      	blx	r3
          }
          return;
 8006844:	e344      	b.n	8006ed0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006850:	2b00      	cmp	r3, #0
 8006852:	d018      	beq.n	8006886 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d108      	bne.n	8006874 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006866:	2b00      	cmp	r3, #0
 8006868:	d02c      	beq.n	80068c4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	4798      	blx	r3
 8006872:	e027      	b.n	80068c4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006878:	2b00      	cmp	r3, #0
 800687a:	d023      	beq.n	80068c4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	4798      	blx	r3
 8006884:	e01e      	b.n	80068c4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006890:	2b00      	cmp	r3, #0
 8006892:	d10f      	bne.n	80068b4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f022 0210 	bic.w	r2, r2, #16
 80068a2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d003      	beq.n	80068c4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f000 8306 	beq.w	8006eda <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068d2:	f003 0301 	and.w	r3, r3, #1
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	f000 8088 	beq.w	80069ec <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2204      	movs	r2, #4
 80068e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a7a      	ldr	r2, [pc, #488]	; (8006ad4 <HAL_DMA_IRQHandler+0xa08>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d04a      	beq.n	8006984 <HAL_DMA_IRQHandler+0x8b8>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a79      	ldr	r2, [pc, #484]	; (8006ad8 <HAL_DMA_IRQHandler+0xa0c>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d045      	beq.n	8006984 <HAL_DMA_IRQHandler+0x8b8>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a77      	ldr	r2, [pc, #476]	; (8006adc <HAL_DMA_IRQHandler+0xa10>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d040      	beq.n	8006984 <HAL_DMA_IRQHandler+0x8b8>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a76      	ldr	r2, [pc, #472]	; (8006ae0 <HAL_DMA_IRQHandler+0xa14>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d03b      	beq.n	8006984 <HAL_DMA_IRQHandler+0x8b8>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a74      	ldr	r2, [pc, #464]	; (8006ae4 <HAL_DMA_IRQHandler+0xa18>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d036      	beq.n	8006984 <HAL_DMA_IRQHandler+0x8b8>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a73      	ldr	r2, [pc, #460]	; (8006ae8 <HAL_DMA_IRQHandler+0xa1c>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d031      	beq.n	8006984 <HAL_DMA_IRQHandler+0x8b8>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a71      	ldr	r2, [pc, #452]	; (8006aec <HAL_DMA_IRQHandler+0xa20>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d02c      	beq.n	8006984 <HAL_DMA_IRQHandler+0x8b8>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a70      	ldr	r2, [pc, #448]	; (8006af0 <HAL_DMA_IRQHandler+0xa24>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d027      	beq.n	8006984 <HAL_DMA_IRQHandler+0x8b8>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a6e      	ldr	r2, [pc, #440]	; (8006af4 <HAL_DMA_IRQHandler+0xa28>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d022      	beq.n	8006984 <HAL_DMA_IRQHandler+0x8b8>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a6d      	ldr	r2, [pc, #436]	; (8006af8 <HAL_DMA_IRQHandler+0xa2c>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d01d      	beq.n	8006984 <HAL_DMA_IRQHandler+0x8b8>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a6b      	ldr	r2, [pc, #428]	; (8006afc <HAL_DMA_IRQHandler+0xa30>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d018      	beq.n	8006984 <HAL_DMA_IRQHandler+0x8b8>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a6a      	ldr	r2, [pc, #424]	; (8006b00 <HAL_DMA_IRQHandler+0xa34>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d013      	beq.n	8006984 <HAL_DMA_IRQHandler+0x8b8>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a68      	ldr	r2, [pc, #416]	; (8006b04 <HAL_DMA_IRQHandler+0xa38>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d00e      	beq.n	8006984 <HAL_DMA_IRQHandler+0x8b8>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a67      	ldr	r2, [pc, #412]	; (8006b08 <HAL_DMA_IRQHandler+0xa3c>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d009      	beq.n	8006984 <HAL_DMA_IRQHandler+0x8b8>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a65      	ldr	r2, [pc, #404]	; (8006b0c <HAL_DMA_IRQHandler+0xa40>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d004      	beq.n	8006984 <HAL_DMA_IRQHandler+0x8b8>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a64      	ldr	r2, [pc, #400]	; (8006b10 <HAL_DMA_IRQHandler+0xa44>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d108      	bne.n	8006996 <HAL_DMA_IRQHandler+0x8ca>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f022 0201 	bic.w	r2, r2, #1
 8006992:	601a      	str	r2, [r3, #0]
 8006994:	e007      	b.n	80069a6 <HAL_DMA_IRQHandler+0x8da>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f022 0201 	bic.w	r2, r2, #1
 80069a4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	3301      	adds	r3, #1
 80069aa:	60fb      	str	r3, [r7, #12]
 80069ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d307      	bcc.n	80069c2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0301 	and.w	r3, r3, #1
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d1f2      	bne.n	80069a6 <HAL_DMA_IRQHandler+0x8da>
 80069c0:	e000      	b.n	80069c4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80069c2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 0301 	and.w	r3, r3, #1
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d004      	beq.n	80069dc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2203      	movs	r2, #3
 80069d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80069da:	e003      	b.n	80069e4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f000 8272 	beq.w	8006eda <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	4798      	blx	r3
 80069fe:	e26c      	b.n	8006eda <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a43      	ldr	r2, [pc, #268]	; (8006b14 <HAL_DMA_IRQHandler+0xa48>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d022      	beq.n	8006a50 <HAL_DMA_IRQHandler+0x984>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a42      	ldr	r2, [pc, #264]	; (8006b18 <HAL_DMA_IRQHandler+0xa4c>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d01d      	beq.n	8006a50 <HAL_DMA_IRQHandler+0x984>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a40      	ldr	r2, [pc, #256]	; (8006b1c <HAL_DMA_IRQHandler+0xa50>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d018      	beq.n	8006a50 <HAL_DMA_IRQHandler+0x984>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a3f      	ldr	r2, [pc, #252]	; (8006b20 <HAL_DMA_IRQHandler+0xa54>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d013      	beq.n	8006a50 <HAL_DMA_IRQHandler+0x984>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a3d      	ldr	r2, [pc, #244]	; (8006b24 <HAL_DMA_IRQHandler+0xa58>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d00e      	beq.n	8006a50 <HAL_DMA_IRQHandler+0x984>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a3c      	ldr	r2, [pc, #240]	; (8006b28 <HAL_DMA_IRQHandler+0xa5c>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d009      	beq.n	8006a50 <HAL_DMA_IRQHandler+0x984>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a3a      	ldr	r2, [pc, #232]	; (8006b2c <HAL_DMA_IRQHandler+0xa60>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d004      	beq.n	8006a50 <HAL_DMA_IRQHandler+0x984>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a39      	ldr	r2, [pc, #228]	; (8006b30 <HAL_DMA_IRQHandler+0xa64>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d101      	bne.n	8006a54 <HAL_DMA_IRQHandler+0x988>
 8006a50:	2301      	movs	r3, #1
 8006a52:	e000      	b.n	8006a56 <HAL_DMA_IRQHandler+0x98a>
 8006a54:	2300      	movs	r3, #0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	f000 823f 	beq.w	8006eda <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a68:	f003 031f 	and.w	r3, r3, #31
 8006a6c:	2204      	movs	r2, #4
 8006a6e:	409a      	lsls	r2, r3
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	4013      	ands	r3, r2
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 80cd 	beq.w	8006c14 <HAL_DMA_IRQHandler+0xb48>
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f003 0304 	and.w	r3, r3, #4
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f000 80c7 	beq.w	8006c14 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a8a:	f003 031f 	and.w	r3, r3, #31
 8006a8e:	2204      	movs	r2, #4
 8006a90:	409a      	lsls	r2, r3
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d049      	beq.n	8006b34 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d109      	bne.n	8006abe <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f000 8210 	beq.w	8006ed4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006abc:	e20a      	b.n	8006ed4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	f000 8206 	beq.w	8006ed4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ad0:	e200      	b.n	8006ed4 <HAL_DMA_IRQHandler+0xe08>
 8006ad2:	bf00      	nop
 8006ad4:	40020010 	.word	0x40020010
 8006ad8:	40020028 	.word	0x40020028
 8006adc:	40020040 	.word	0x40020040
 8006ae0:	40020058 	.word	0x40020058
 8006ae4:	40020070 	.word	0x40020070
 8006ae8:	40020088 	.word	0x40020088
 8006aec:	400200a0 	.word	0x400200a0
 8006af0:	400200b8 	.word	0x400200b8
 8006af4:	40020410 	.word	0x40020410
 8006af8:	40020428 	.word	0x40020428
 8006afc:	40020440 	.word	0x40020440
 8006b00:	40020458 	.word	0x40020458
 8006b04:	40020470 	.word	0x40020470
 8006b08:	40020488 	.word	0x40020488
 8006b0c:	400204a0 	.word	0x400204a0
 8006b10:	400204b8 	.word	0x400204b8
 8006b14:	58025408 	.word	0x58025408
 8006b18:	5802541c 	.word	0x5802541c
 8006b1c:	58025430 	.word	0x58025430
 8006b20:	58025444 	.word	0x58025444
 8006b24:	58025458 	.word	0x58025458
 8006b28:	5802546c 	.word	0x5802546c
 8006b2c:	58025480 	.word	0x58025480
 8006b30:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	f003 0320 	and.w	r3, r3, #32
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d160      	bne.n	8006c00 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a7f      	ldr	r2, [pc, #508]	; (8006d40 <HAL_DMA_IRQHandler+0xc74>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d04a      	beq.n	8006bde <HAL_DMA_IRQHandler+0xb12>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a7d      	ldr	r2, [pc, #500]	; (8006d44 <HAL_DMA_IRQHandler+0xc78>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d045      	beq.n	8006bde <HAL_DMA_IRQHandler+0xb12>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a7c      	ldr	r2, [pc, #496]	; (8006d48 <HAL_DMA_IRQHandler+0xc7c>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d040      	beq.n	8006bde <HAL_DMA_IRQHandler+0xb12>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a7a      	ldr	r2, [pc, #488]	; (8006d4c <HAL_DMA_IRQHandler+0xc80>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d03b      	beq.n	8006bde <HAL_DMA_IRQHandler+0xb12>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a79      	ldr	r2, [pc, #484]	; (8006d50 <HAL_DMA_IRQHandler+0xc84>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d036      	beq.n	8006bde <HAL_DMA_IRQHandler+0xb12>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a77      	ldr	r2, [pc, #476]	; (8006d54 <HAL_DMA_IRQHandler+0xc88>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d031      	beq.n	8006bde <HAL_DMA_IRQHandler+0xb12>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a76      	ldr	r2, [pc, #472]	; (8006d58 <HAL_DMA_IRQHandler+0xc8c>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d02c      	beq.n	8006bde <HAL_DMA_IRQHandler+0xb12>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a74      	ldr	r2, [pc, #464]	; (8006d5c <HAL_DMA_IRQHandler+0xc90>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d027      	beq.n	8006bde <HAL_DMA_IRQHandler+0xb12>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a73      	ldr	r2, [pc, #460]	; (8006d60 <HAL_DMA_IRQHandler+0xc94>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d022      	beq.n	8006bde <HAL_DMA_IRQHandler+0xb12>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a71      	ldr	r2, [pc, #452]	; (8006d64 <HAL_DMA_IRQHandler+0xc98>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d01d      	beq.n	8006bde <HAL_DMA_IRQHandler+0xb12>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a70      	ldr	r2, [pc, #448]	; (8006d68 <HAL_DMA_IRQHandler+0xc9c>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d018      	beq.n	8006bde <HAL_DMA_IRQHandler+0xb12>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a6e      	ldr	r2, [pc, #440]	; (8006d6c <HAL_DMA_IRQHandler+0xca0>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d013      	beq.n	8006bde <HAL_DMA_IRQHandler+0xb12>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a6d      	ldr	r2, [pc, #436]	; (8006d70 <HAL_DMA_IRQHandler+0xca4>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d00e      	beq.n	8006bde <HAL_DMA_IRQHandler+0xb12>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a6b      	ldr	r2, [pc, #428]	; (8006d74 <HAL_DMA_IRQHandler+0xca8>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d009      	beq.n	8006bde <HAL_DMA_IRQHandler+0xb12>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a6a      	ldr	r2, [pc, #424]	; (8006d78 <HAL_DMA_IRQHandler+0xcac>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d004      	beq.n	8006bde <HAL_DMA_IRQHandler+0xb12>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a68      	ldr	r2, [pc, #416]	; (8006d7c <HAL_DMA_IRQHandler+0xcb0>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d108      	bne.n	8006bf0 <HAL_DMA_IRQHandler+0xb24>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f022 0208 	bic.w	r2, r2, #8
 8006bec:	601a      	str	r2, [r3, #0]
 8006bee:	e007      	b.n	8006c00 <HAL_DMA_IRQHandler+0xb34>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f022 0204 	bic.w	r2, r2, #4
 8006bfe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f000 8165 	beq.w	8006ed4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c12:	e15f      	b.n	8006ed4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c18:	f003 031f 	and.w	r3, r3, #31
 8006c1c:	2202      	movs	r2, #2
 8006c1e:	409a      	lsls	r2, r3
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	4013      	ands	r3, r2
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f000 80c5 	beq.w	8006db4 <HAL_DMA_IRQHandler+0xce8>
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	f003 0302 	and.w	r3, r3, #2
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f000 80bf 	beq.w	8006db4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c3a:	f003 031f 	and.w	r3, r3, #31
 8006c3e:	2202      	movs	r2, #2
 8006c40:	409a      	lsls	r2, r3
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d018      	beq.n	8006c82 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d109      	bne.n	8006c6e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f000 813a 	beq.w	8006ed8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c6c:	e134      	b.n	8006ed8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f000 8130 	beq.w	8006ed8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c80:	e12a      	b.n	8006ed8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	f003 0320 	and.w	r3, r3, #32
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f040 8089 	bne.w	8006da0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a2b      	ldr	r2, [pc, #172]	; (8006d40 <HAL_DMA_IRQHandler+0xc74>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d04a      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xc62>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a29      	ldr	r2, [pc, #164]	; (8006d44 <HAL_DMA_IRQHandler+0xc78>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d045      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xc62>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a28      	ldr	r2, [pc, #160]	; (8006d48 <HAL_DMA_IRQHandler+0xc7c>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d040      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xc62>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a26      	ldr	r2, [pc, #152]	; (8006d4c <HAL_DMA_IRQHandler+0xc80>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d03b      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xc62>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a25      	ldr	r2, [pc, #148]	; (8006d50 <HAL_DMA_IRQHandler+0xc84>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d036      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xc62>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a23      	ldr	r2, [pc, #140]	; (8006d54 <HAL_DMA_IRQHandler+0xc88>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d031      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xc62>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a22      	ldr	r2, [pc, #136]	; (8006d58 <HAL_DMA_IRQHandler+0xc8c>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d02c      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xc62>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a20      	ldr	r2, [pc, #128]	; (8006d5c <HAL_DMA_IRQHandler+0xc90>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d027      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xc62>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a1f      	ldr	r2, [pc, #124]	; (8006d60 <HAL_DMA_IRQHandler+0xc94>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d022      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xc62>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a1d      	ldr	r2, [pc, #116]	; (8006d64 <HAL_DMA_IRQHandler+0xc98>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d01d      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xc62>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a1c      	ldr	r2, [pc, #112]	; (8006d68 <HAL_DMA_IRQHandler+0xc9c>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d018      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xc62>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a1a      	ldr	r2, [pc, #104]	; (8006d6c <HAL_DMA_IRQHandler+0xca0>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d013      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xc62>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a19      	ldr	r2, [pc, #100]	; (8006d70 <HAL_DMA_IRQHandler+0xca4>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d00e      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xc62>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a17      	ldr	r2, [pc, #92]	; (8006d74 <HAL_DMA_IRQHandler+0xca8>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d009      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xc62>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a16      	ldr	r2, [pc, #88]	; (8006d78 <HAL_DMA_IRQHandler+0xcac>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d004      	beq.n	8006d2e <HAL_DMA_IRQHandler+0xc62>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a14      	ldr	r2, [pc, #80]	; (8006d7c <HAL_DMA_IRQHandler+0xcb0>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d128      	bne.n	8006d80 <HAL_DMA_IRQHandler+0xcb4>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f022 0214 	bic.w	r2, r2, #20
 8006d3c:	601a      	str	r2, [r3, #0]
 8006d3e:	e027      	b.n	8006d90 <HAL_DMA_IRQHandler+0xcc4>
 8006d40:	40020010 	.word	0x40020010
 8006d44:	40020028 	.word	0x40020028
 8006d48:	40020040 	.word	0x40020040
 8006d4c:	40020058 	.word	0x40020058
 8006d50:	40020070 	.word	0x40020070
 8006d54:	40020088 	.word	0x40020088
 8006d58:	400200a0 	.word	0x400200a0
 8006d5c:	400200b8 	.word	0x400200b8
 8006d60:	40020410 	.word	0x40020410
 8006d64:	40020428 	.word	0x40020428
 8006d68:	40020440 	.word	0x40020440
 8006d6c:	40020458 	.word	0x40020458
 8006d70:	40020470 	.word	0x40020470
 8006d74:	40020488 	.word	0x40020488
 8006d78:	400204a0 	.word	0x400204a0
 8006d7c:	400204b8 	.word	0x400204b8
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f022 020a 	bic.w	r2, r2, #10
 8006d8e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f000 8097 	beq.w	8006ed8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006db2:	e091      	b.n	8006ed8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006db8:	f003 031f 	and.w	r3, r3, #31
 8006dbc:	2208      	movs	r2, #8
 8006dbe:	409a      	lsls	r2, r3
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	f000 8088 	beq.w	8006eda <HAL_DMA_IRQHandler+0xe0e>
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	f003 0308 	and.w	r3, r3, #8
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f000 8082 	beq.w	8006eda <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a41      	ldr	r2, [pc, #260]	; (8006ee0 <HAL_DMA_IRQHandler+0xe14>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d04a      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xdaa>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a3f      	ldr	r2, [pc, #252]	; (8006ee4 <HAL_DMA_IRQHandler+0xe18>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d045      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xdaa>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a3e      	ldr	r2, [pc, #248]	; (8006ee8 <HAL_DMA_IRQHandler+0xe1c>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d040      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xdaa>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a3c      	ldr	r2, [pc, #240]	; (8006eec <HAL_DMA_IRQHandler+0xe20>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d03b      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xdaa>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a3b      	ldr	r2, [pc, #236]	; (8006ef0 <HAL_DMA_IRQHandler+0xe24>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d036      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xdaa>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a39      	ldr	r2, [pc, #228]	; (8006ef4 <HAL_DMA_IRQHandler+0xe28>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d031      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xdaa>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a38      	ldr	r2, [pc, #224]	; (8006ef8 <HAL_DMA_IRQHandler+0xe2c>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d02c      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xdaa>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a36      	ldr	r2, [pc, #216]	; (8006efc <HAL_DMA_IRQHandler+0xe30>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d027      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xdaa>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a35      	ldr	r2, [pc, #212]	; (8006f00 <HAL_DMA_IRQHandler+0xe34>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d022      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xdaa>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a33      	ldr	r2, [pc, #204]	; (8006f04 <HAL_DMA_IRQHandler+0xe38>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d01d      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xdaa>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a32      	ldr	r2, [pc, #200]	; (8006f08 <HAL_DMA_IRQHandler+0xe3c>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d018      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xdaa>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a30      	ldr	r2, [pc, #192]	; (8006f0c <HAL_DMA_IRQHandler+0xe40>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d013      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xdaa>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a2f      	ldr	r2, [pc, #188]	; (8006f10 <HAL_DMA_IRQHandler+0xe44>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d00e      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xdaa>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a2d      	ldr	r2, [pc, #180]	; (8006f14 <HAL_DMA_IRQHandler+0xe48>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d009      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xdaa>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a2c      	ldr	r2, [pc, #176]	; (8006f18 <HAL_DMA_IRQHandler+0xe4c>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d004      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xdaa>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a2a      	ldr	r2, [pc, #168]	; (8006f1c <HAL_DMA_IRQHandler+0xe50>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d108      	bne.n	8006e88 <HAL_DMA_IRQHandler+0xdbc>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f022 021c 	bic.w	r2, r2, #28
 8006e84:	601a      	str	r2, [r3, #0]
 8006e86:	e007      	b.n	8006e98 <HAL_DMA_IRQHandler+0xdcc>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f022 020e 	bic.w	r2, r2, #14
 8006e96:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e9c:	f003 031f 	and.w	r3, r3, #31
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	409a      	lsls	r2, r3
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d009      	beq.n	8006eda <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	4798      	blx	r3
 8006ece:	e004      	b.n	8006eda <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006ed0:	bf00      	nop
 8006ed2:	e002      	b.n	8006eda <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ed4:	bf00      	nop
 8006ed6:	e000      	b.n	8006eda <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ed8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006eda:	3728      	adds	r7, #40	; 0x28
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	40020010 	.word	0x40020010
 8006ee4:	40020028 	.word	0x40020028
 8006ee8:	40020040 	.word	0x40020040
 8006eec:	40020058 	.word	0x40020058
 8006ef0:	40020070 	.word	0x40020070
 8006ef4:	40020088 	.word	0x40020088
 8006ef8:	400200a0 	.word	0x400200a0
 8006efc:	400200b8 	.word	0x400200b8
 8006f00:	40020410 	.word	0x40020410
 8006f04:	40020428 	.word	0x40020428
 8006f08:	40020440 	.word	0x40020440
 8006f0c:	40020458 	.word	0x40020458
 8006f10:	40020470 	.word	0x40020470
 8006f14:	40020488 	.word	0x40020488
 8006f18:	400204a0 	.word	0x400204a0
 8006f1c:	400204b8 	.word	0x400204b8

08006f20 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b087      	sub	sp, #28
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
 8006f2c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f32:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f38:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a7f      	ldr	r2, [pc, #508]	; (800713c <DMA_SetConfig+0x21c>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d072      	beq.n	800702a <DMA_SetConfig+0x10a>
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a7d      	ldr	r2, [pc, #500]	; (8007140 <DMA_SetConfig+0x220>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d06d      	beq.n	800702a <DMA_SetConfig+0x10a>
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a7c      	ldr	r2, [pc, #496]	; (8007144 <DMA_SetConfig+0x224>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d068      	beq.n	800702a <DMA_SetConfig+0x10a>
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a7a      	ldr	r2, [pc, #488]	; (8007148 <DMA_SetConfig+0x228>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d063      	beq.n	800702a <DMA_SetConfig+0x10a>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a79      	ldr	r2, [pc, #484]	; (800714c <DMA_SetConfig+0x22c>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d05e      	beq.n	800702a <DMA_SetConfig+0x10a>
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a77      	ldr	r2, [pc, #476]	; (8007150 <DMA_SetConfig+0x230>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d059      	beq.n	800702a <DMA_SetConfig+0x10a>
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a76      	ldr	r2, [pc, #472]	; (8007154 <DMA_SetConfig+0x234>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d054      	beq.n	800702a <DMA_SetConfig+0x10a>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a74      	ldr	r2, [pc, #464]	; (8007158 <DMA_SetConfig+0x238>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d04f      	beq.n	800702a <DMA_SetConfig+0x10a>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a73      	ldr	r2, [pc, #460]	; (800715c <DMA_SetConfig+0x23c>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d04a      	beq.n	800702a <DMA_SetConfig+0x10a>
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a71      	ldr	r2, [pc, #452]	; (8007160 <DMA_SetConfig+0x240>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d045      	beq.n	800702a <DMA_SetConfig+0x10a>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a70      	ldr	r2, [pc, #448]	; (8007164 <DMA_SetConfig+0x244>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d040      	beq.n	800702a <DMA_SetConfig+0x10a>
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a6e      	ldr	r2, [pc, #440]	; (8007168 <DMA_SetConfig+0x248>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d03b      	beq.n	800702a <DMA_SetConfig+0x10a>
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a6d      	ldr	r2, [pc, #436]	; (800716c <DMA_SetConfig+0x24c>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d036      	beq.n	800702a <DMA_SetConfig+0x10a>
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a6b      	ldr	r2, [pc, #428]	; (8007170 <DMA_SetConfig+0x250>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d031      	beq.n	800702a <DMA_SetConfig+0x10a>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a6a      	ldr	r2, [pc, #424]	; (8007174 <DMA_SetConfig+0x254>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d02c      	beq.n	800702a <DMA_SetConfig+0x10a>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a68      	ldr	r2, [pc, #416]	; (8007178 <DMA_SetConfig+0x258>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d027      	beq.n	800702a <DMA_SetConfig+0x10a>
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a67      	ldr	r2, [pc, #412]	; (800717c <DMA_SetConfig+0x25c>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d022      	beq.n	800702a <DMA_SetConfig+0x10a>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a65      	ldr	r2, [pc, #404]	; (8007180 <DMA_SetConfig+0x260>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d01d      	beq.n	800702a <DMA_SetConfig+0x10a>
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a64      	ldr	r2, [pc, #400]	; (8007184 <DMA_SetConfig+0x264>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d018      	beq.n	800702a <DMA_SetConfig+0x10a>
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a62      	ldr	r2, [pc, #392]	; (8007188 <DMA_SetConfig+0x268>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d013      	beq.n	800702a <DMA_SetConfig+0x10a>
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a61      	ldr	r2, [pc, #388]	; (800718c <DMA_SetConfig+0x26c>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d00e      	beq.n	800702a <DMA_SetConfig+0x10a>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a5f      	ldr	r2, [pc, #380]	; (8007190 <DMA_SetConfig+0x270>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d009      	beq.n	800702a <DMA_SetConfig+0x10a>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a5e      	ldr	r2, [pc, #376]	; (8007194 <DMA_SetConfig+0x274>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d004      	beq.n	800702a <DMA_SetConfig+0x10a>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a5c      	ldr	r2, [pc, #368]	; (8007198 <DMA_SetConfig+0x278>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d101      	bne.n	800702e <DMA_SetConfig+0x10e>
 800702a:	2301      	movs	r3, #1
 800702c:	e000      	b.n	8007030 <DMA_SetConfig+0x110>
 800702e:	2300      	movs	r3, #0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00d      	beq.n	8007050 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800703c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007042:	2b00      	cmp	r3, #0
 8007044:	d004      	beq.n	8007050 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800704e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a39      	ldr	r2, [pc, #228]	; (800713c <DMA_SetConfig+0x21c>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d04a      	beq.n	80070f0 <DMA_SetConfig+0x1d0>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a38      	ldr	r2, [pc, #224]	; (8007140 <DMA_SetConfig+0x220>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d045      	beq.n	80070f0 <DMA_SetConfig+0x1d0>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a36      	ldr	r2, [pc, #216]	; (8007144 <DMA_SetConfig+0x224>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d040      	beq.n	80070f0 <DMA_SetConfig+0x1d0>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a35      	ldr	r2, [pc, #212]	; (8007148 <DMA_SetConfig+0x228>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d03b      	beq.n	80070f0 <DMA_SetConfig+0x1d0>
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a33      	ldr	r2, [pc, #204]	; (800714c <DMA_SetConfig+0x22c>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d036      	beq.n	80070f0 <DMA_SetConfig+0x1d0>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a32      	ldr	r2, [pc, #200]	; (8007150 <DMA_SetConfig+0x230>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d031      	beq.n	80070f0 <DMA_SetConfig+0x1d0>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a30      	ldr	r2, [pc, #192]	; (8007154 <DMA_SetConfig+0x234>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d02c      	beq.n	80070f0 <DMA_SetConfig+0x1d0>
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a2f      	ldr	r2, [pc, #188]	; (8007158 <DMA_SetConfig+0x238>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d027      	beq.n	80070f0 <DMA_SetConfig+0x1d0>
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a2d      	ldr	r2, [pc, #180]	; (800715c <DMA_SetConfig+0x23c>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d022      	beq.n	80070f0 <DMA_SetConfig+0x1d0>
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a2c      	ldr	r2, [pc, #176]	; (8007160 <DMA_SetConfig+0x240>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d01d      	beq.n	80070f0 <DMA_SetConfig+0x1d0>
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a2a      	ldr	r2, [pc, #168]	; (8007164 <DMA_SetConfig+0x244>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d018      	beq.n	80070f0 <DMA_SetConfig+0x1d0>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a29      	ldr	r2, [pc, #164]	; (8007168 <DMA_SetConfig+0x248>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d013      	beq.n	80070f0 <DMA_SetConfig+0x1d0>
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a27      	ldr	r2, [pc, #156]	; (800716c <DMA_SetConfig+0x24c>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d00e      	beq.n	80070f0 <DMA_SetConfig+0x1d0>
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a26      	ldr	r2, [pc, #152]	; (8007170 <DMA_SetConfig+0x250>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d009      	beq.n	80070f0 <DMA_SetConfig+0x1d0>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a24      	ldr	r2, [pc, #144]	; (8007174 <DMA_SetConfig+0x254>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d004      	beq.n	80070f0 <DMA_SetConfig+0x1d0>
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a23      	ldr	r2, [pc, #140]	; (8007178 <DMA_SetConfig+0x258>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d101      	bne.n	80070f4 <DMA_SetConfig+0x1d4>
 80070f0:	2301      	movs	r3, #1
 80070f2:	e000      	b.n	80070f6 <DMA_SetConfig+0x1d6>
 80070f4:	2300      	movs	r3, #0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d059      	beq.n	80071ae <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070fe:	f003 031f 	and.w	r3, r3, #31
 8007102:	223f      	movs	r2, #63	; 0x3f
 8007104:	409a      	lsls	r2, r3
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007118:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	683a      	ldr	r2, [r7, #0]
 8007120:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	2b40      	cmp	r3, #64	; 0x40
 8007128:	d138      	bne.n	800719c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68ba      	ldr	r2, [r7, #8]
 8007138:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800713a:	e086      	b.n	800724a <DMA_SetConfig+0x32a>
 800713c:	40020010 	.word	0x40020010
 8007140:	40020028 	.word	0x40020028
 8007144:	40020040 	.word	0x40020040
 8007148:	40020058 	.word	0x40020058
 800714c:	40020070 	.word	0x40020070
 8007150:	40020088 	.word	0x40020088
 8007154:	400200a0 	.word	0x400200a0
 8007158:	400200b8 	.word	0x400200b8
 800715c:	40020410 	.word	0x40020410
 8007160:	40020428 	.word	0x40020428
 8007164:	40020440 	.word	0x40020440
 8007168:	40020458 	.word	0x40020458
 800716c:	40020470 	.word	0x40020470
 8007170:	40020488 	.word	0x40020488
 8007174:	400204a0 	.word	0x400204a0
 8007178:	400204b8 	.word	0x400204b8
 800717c:	58025408 	.word	0x58025408
 8007180:	5802541c 	.word	0x5802541c
 8007184:	58025430 	.word	0x58025430
 8007188:	58025444 	.word	0x58025444
 800718c:	58025458 	.word	0x58025458
 8007190:	5802546c 	.word	0x5802546c
 8007194:	58025480 	.word	0x58025480
 8007198:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68ba      	ldr	r2, [r7, #8]
 80071a2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	60da      	str	r2, [r3, #12]
}
 80071ac:	e04d      	b.n	800724a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a29      	ldr	r2, [pc, #164]	; (8007258 <DMA_SetConfig+0x338>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d022      	beq.n	80071fe <DMA_SetConfig+0x2de>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a27      	ldr	r2, [pc, #156]	; (800725c <DMA_SetConfig+0x33c>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d01d      	beq.n	80071fe <DMA_SetConfig+0x2de>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a26      	ldr	r2, [pc, #152]	; (8007260 <DMA_SetConfig+0x340>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d018      	beq.n	80071fe <DMA_SetConfig+0x2de>
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a24      	ldr	r2, [pc, #144]	; (8007264 <DMA_SetConfig+0x344>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d013      	beq.n	80071fe <DMA_SetConfig+0x2de>
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a23      	ldr	r2, [pc, #140]	; (8007268 <DMA_SetConfig+0x348>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d00e      	beq.n	80071fe <DMA_SetConfig+0x2de>
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a21      	ldr	r2, [pc, #132]	; (800726c <DMA_SetConfig+0x34c>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d009      	beq.n	80071fe <DMA_SetConfig+0x2de>
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a20      	ldr	r2, [pc, #128]	; (8007270 <DMA_SetConfig+0x350>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d004      	beq.n	80071fe <DMA_SetConfig+0x2de>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a1e      	ldr	r2, [pc, #120]	; (8007274 <DMA_SetConfig+0x354>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d101      	bne.n	8007202 <DMA_SetConfig+0x2e2>
 80071fe:	2301      	movs	r3, #1
 8007200:	e000      	b.n	8007204 <DMA_SetConfig+0x2e4>
 8007202:	2300      	movs	r3, #0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d020      	beq.n	800724a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800720c:	f003 031f 	and.w	r3, r3, #31
 8007210:	2201      	movs	r2, #1
 8007212:	409a      	lsls	r2, r3
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	683a      	ldr	r2, [r7, #0]
 800721e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	2b40      	cmp	r3, #64	; 0x40
 8007226:	d108      	bne.n	800723a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68ba      	ldr	r2, [r7, #8]
 8007236:	60da      	str	r2, [r3, #12]
}
 8007238:	e007      	b.n	800724a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	60da      	str	r2, [r3, #12]
}
 800724a:	bf00      	nop
 800724c:	371c      	adds	r7, #28
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop
 8007258:	58025408 	.word	0x58025408
 800725c:	5802541c 	.word	0x5802541c
 8007260:	58025430 	.word	0x58025430
 8007264:	58025444 	.word	0x58025444
 8007268:	58025458 	.word	0x58025458
 800726c:	5802546c 	.word	0x5802546c
 8007270:	58025480 	.word	0x58025480
 8007274:	58025494 	.word	0x58025494

08007278 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007278:	b480      	push	{r7}
 800727a:	b085      	sub	sp, #20
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a42      	ldr	r2, [pc, #264]	; (8007390 <DMA_CalcBaseAndBitshift+0x118>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d04a      	beq.n	8007320 <DMA_CalcBaseAndBitshift+0xa8>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a41      	ldr	r2, [pc, #260]	; (8007394 <DMA_CalcBaseAndBitshift+0x11c>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d045      	beq.n	8007320 <DMA_CalcBaseAndBitshift+0xa8>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a3f      	ldr	r2, [pc, #252]	; (8007398 <DMA_CalcBaseAndBitshift+0x120>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d040      	beq.n	8007320 <DMA_CalcBaseAndBitshift+0xa8>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a3e      	ldr	r2, [pc, #248]	; (800739c <DMA_CalcBaseAndBitshift+0x124>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d03b      	beq.n	8007320 <DMA_CalcBaseAndBitshift+0xa8>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a3c      	ldr	r2, [pc, #240]	; (80073a0 <DMA_CalcBaseAndBitshift+0x128>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d036      	beq.n	8007320 <DMA_CalcBaseAndBitshift+0xa8>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a3b      	ldr	r2, [pc, #236]	; (80073a4 <DMA_CalcBaseAndBitshift+0x12c>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d031      	beq.n	8007320 <DMA_CalcBaseAndBitshift+0xa8>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a39      	ldr	r2, [pc, #228]	; (80073a8 <DMA_CalcBaseAndBitshift+0x130>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d02c      	beq.n	8007320 <DMA_CalcBaseAndBitshift+0xa8>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a38      	ldr	r2, [pc, #224]	; (80073ac <DMA_CalcBaseAndBitshift+0x134>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d027      	beq.n	8007320 <DMA_CalcBaseAndBitshift+0xa8>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a36      	ldr	r2, [pc, #216]	; (80073b0 <DMA_CalcBaseAndBitshift+0x138>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d022      	beq.n	8007320 <DMA_CalcBaseAndBitshift+0xa8>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a35      	ldr	r2, [pc, #212]	; (80073b4 <DMA_CalcBaseAndBitshift+0x13c>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d01d      	beq.n	8007320 <DMA_CalcBaseAndBitshift+0xa8>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a33      	ldr	r2, [pc, #204]	; (80073b8 <DMA_CalcBaseAndBitshift+0x140>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d018      	beq.n	8007320 <DMA_CalcBaseAndBitshift+0xa8>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a32      	ldr	r2, [pc, #200]	; (80073bc <DMA_CalcBaseAndBitshift+0x144>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d013      	beq.n	8007320 <DMA_CalcBaseAndBitshift+0xa8>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a30      	ldr	r2, [pc, #192]	; (80073c0 <DMA_CalcBaseAndBitshift+0x148>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d00e      	beq.n	8007320 <DMA_CalcBaseAndBitshift+0xa8>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a2f      	ldr	r2, [pc, #188]	; (80073c4 <DMA_CalcBaseAndBitshift+0x14c>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d009      	beq.n	8007320 <DMA_CalcBaseAndBitshift+0xa8>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a2d      	ldr	r2, [pc, #180]	; (80073c8 <DMA_CalcBaseAndBitshift+0x150>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d004      	beq.n	8007320 <DMA_CalcBaseAndBitshift+0xa8>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a2c      	ldr	r2, [pc, #176]	; (80073cc <DMA_CalcBaseAndBitshift+0x154>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d101      	bne.n	8007324 <DMA_CalcBaseAndBitshift+0xac>
 8007320:	2301      	movs	r3, #1
 8007322:	e000      	b.n	8007326 <DMA_CalcBaseAndBitshift+0xae>
 8007324:	2300      	movs	r3, #0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d024      	beq.n	8007374 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	b2db      	uxtb	r3, r3
 8007330:	3b10      	subs	r3, #16
 8007332:	4a27      	ldr	r2, [pc, #156]	; (80073d0 <DMA_CalcBaseAndBitshift+0x158>)
 8007334:	fba2 2303 	umull	r2, r3, r2, r3
 8007338:	091b      	lsrs	r3, r3, #4
 800733a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f003 0307 	and.w	r3, r3, #7
 8007342:	4a24      	ldr	r2, [pc, #144]	; (80073d4 <DMA_CalcBaseAndBitshift+0x15c>)
 8007344:	5cd3      	ldrb	r3, [r2, r3]
 8007346:	461a      	mov	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2b03      	cmp	r3, #3
 8007350:	d908      	bls.n	8007364 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	461a      	mov	r2, r3
 8007358:	4b1f      	ldr	r3, [pc, #124]	; (80073d8 <DMA_CalcBaseAndBitshift+0x160>)
 800735a:	4013      	ands	r3, r2
 800735c:	1d1a      	adds	r2, r3, #4
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	659a      	str	r2, [r3, #88]	; 0x58
 8007362:	e00d      	b.n	8007380 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	461a      	mov	r2, r3
 800736a:	4b1b      	ldr	r3, [pc, #108]	; (80073d8 <DMA_CalcBaseAndBitshift+0x160>)
 800736c:	4013      	ands	r3, r2
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	6593      	str	r3, [r2, #88]	; 0x58
 8007372:	e005      	b.n	8007380 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007384:	4618      	mov	r0, r3
 8007386:	3714      	adds	r7, #20
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr
 8007390:	40020010 	.word	0x40020010
 8007394:	40020028 	.word	0x40020028
 8007398:	40020040 	.word	0x40020040
 800739c:	40020058 	.word	0x40020058
 80073a0:	40020070 	.word	0x40020070
 80073a4:	40020088 	.word	0x40020088
 80073a8:	400200a0 	.word	0x400200a0
 80073ac:	400200b8 	.word	0x400200b8
 80073b0:	40020410 	.word	0x40020410
 80073b4:	40020428 	.word	0x40020428
 80073b8:	40020440 	.word	0x40020440
 80073bc:	40020458 	.word	0x40020458
 80073c0:	40020470 	.word	0x40020470
 80073c4:	40020488 	.word	0x40020488
 80073c8:	400204a0 	.word	0x400204a0
 80073cc:	400204b8 	.word	0x400204b8
 80073d0:	aaaaaaab 	.word	0xaaaaaaab
 80073d4:	08012a88 	.word	0x08012a88
 80073d8:	fffffc00 	.word	0xfffffc00

080073dc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073e4:	2300      	movs	r3, #0
 80073e6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	699b      	ldr	r3, [r3, #24]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d120      	bne.n	8007432 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f4:	2b03      	cmp	r3, #3
 80073f6:	d858      	bhi.n	80074aa <DMA_CheckFifoParam+0xce>
 80073f8:	a201      	add	r2, pc, #4	; (adr r2, 8007400 <DMA_CheckFifoParam+0x24>)
 80073fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073fe:	bf00      	nop
 8007400:	08007411 	.word	0x08007411
 8007404:	08007423 	.word	0x08007423
 8007408:	08007411 	.word	0x08007411
 800740c:	080074ab 	.word	0x080074ab
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007414:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007418:	2b00      	cmp	r3, #0
 800741a:	d048      	beq.n	80074ae <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007420:	e045      	b.n	80074ae <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007426:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800742a:	d142      	bne.n	80074b2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007430:	e03f      	b.n	80074b2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	699b      	ldr	r3, [r3, #24]
 8007436:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800743a:	d123      	bne.n	8007484 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007440:	2b03      	cmp	r3, #3
 8007442:	d838      	bhi.n	80074b6 <DMA_CheckFifoParam+0xda>
 8007444:	a201      	add	r2, pc, #4	; (adr r2, 800744c <DMA_CheckFifoParam+0x70>)
 8007446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800744a:	bf00      	nop
 800744c:	0800745d 	.word	0x0800745d
 8007450:	08007463 	.word	0x08007463
 8007454:	0800745d 	.word	0x0800745d
 8007458:	08007475 	.word	0x08007475
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	73fb      	strb	r3, [r7, #15]
        break;
 8007460:	e030      	b.n	80074c4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007466:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800746a:	2b00      	cmp	r3, #0
 800746c:	d025      	beq.n	80074ba <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007472:	e022      	b.n	80074ba <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007478:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800747c:	d11f      	bne.n	80074be <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007482:	e01c      	b.n	80074be <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007488:	2b02      	cmp	r3, #2
 800748a:	d902      	bls.n	8007492 <DMA_CheckFifoParam+0xb6>
 800748c:	2b03      	cmp	r3, #3
 800748e:	d003      	beq.n	8007498 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007490:	e018      	b.n	80074c4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	73fb      	strb	r3, [r7, #15]
        break;
 8007496:	e015      	b.n	80074c4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d00e      	beq.n	80074c2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	73fb      	strb	r3, [r7, #15]
    break;
 80074a8:	e00b      	b.n	80074c2 <DMA_CheckFifoParam+0xe6>
        break;
 80074aa:	bf00      	nop
 80074ac:	e00a      	b.n	80074c4 <DMA_CheckFifoParam+0xe8>
        break;
 80074ae:	bf00      	nop
 80074b0:	e008      	b.n	80074c4 <DMA_CheckFifoParam+0xe8>
        break;
 80074b2:	bf00      	nop
 80074b4:	e006      	b.n	80074c4 <DMA_CheckFifoParam+0xe8>
        break;
 80074b6:	bf00      	nop
 80074b8:	e004      	b.n	80074c4 <DMA_CheckFifoParam+0xe8>
        break;
 80074ba:	bf00      	nop
 80074bc:	e002      	b.n	80074c4 <DMA_CheckFifoParam+0xe8>
        break;
 80074be:	bf00      	nop
 80074c0:	e000      	b.n	80074c4 <DMA_CheckFifoParam+0xe8>
    break;
 80074c2:	bf00      	nop
    }
  }

  return status;
 80074c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3714      	adds	r7, #20
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop

080074d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a38      	ldr	r2, [pc, #224]	; (80075c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d022      	beq.n	8007532 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a36      	ldr	r2, [pc, #216]	; (80075cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d01d      	beq.n	8007532 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a35      	ldr	r2, [pc, #212]	; (80075d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d018      	beq.n	8007532 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a33      	ldr	r2, [pc, #204]	; (80075d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d013      	beq.n	8007532 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a32      	ldr	r2, [pc, #200]	; (80075d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d00e      	beq.n	8007532 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a30      	ldr	r2, [pc, #192]	; (80075dc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d009      	beq.n	8007532 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a2f      	ldr	r2, [pc, #188]	; (80075e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d004      	beq.n	8007532 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a2d      	ldr	r2, [pc, #180]	; (80075e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d101      	bne.n	8007536 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007532:	2301      	movs	r3, #1
 8007534:	e000      	b.n	8007538 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007536:	2300      	movs	r3, #0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d01a      	beq.n	8007572 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	b2db      	uxtb	r3, r3
 8007542:	3b08      	subs	r3, #8
 8007544:	4a28      	ldr	r2, [pc, #160]	; (80075e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007546:	fba2 2303 	umull	r2, r3, r2, r3
 800754a:	091b      	lsrs	r3, r3, #4
 800754c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	4b26      	ldr	r3, [pc, #152]	; (80075ec <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007552:	4413      	add	r3, r2
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	461a      	mov	r2, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a24      	ldr	r2, [pc, #144]	; (80075f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007560:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f003 031f 	and.w	r3, r3, #31
 8007568:	2201      	movs	r2, #1
 800756a:	409a      	lsls	r2, r3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007570:	e024      	b.n	80075bc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	b2db      	uxtb	r3, r3
 8007578:	3b10      	subs	r3, #16
 800757a:	4a1e      	ldr	r2, [pc, #120]	; (80075f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800757c:	fba2 2303 	umull	r2, r3, r2, r3
 8007580:	091b      	lsrs	r3, r3, #4
 8007582:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	4a1c      	ldr	r2, [pc, #112]	; (80075f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d806      	bhi.n	800759a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	4a1b      	ldr	r2, [pc, #108]	; (80075fc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d902      	bls.n	800759a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	3308      	adds	r3, #8
 8007598:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800759a:	68fa      	ldr	r2, [r7, #12]
 800759c:	4b18      	ldr	r3, [pc, #96]	; (8007600 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800759e:	4413      	add	r3, r2
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	461a      	mov	r2, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a16      	ldr	r2, [pc, #88]	; (8007604 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80075ac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f003 031f 	and.w	r3, r3, #31
 80075b4:	2201      	movs	r2, #1
 80075b6:	409a      	lsls	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	669a      	str	r2, [r3, #104]	; 0x68
}
 80075bc:	bf00      	nop
 80075be:	3714      	adds	r7, #20
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr
 80075c8:	58025408 	.word	0x58025408
 80075cc:	5802541c 	.word	0x5802541c
 80075d0:	58025430 	.word	0x58025430
 80075d4:	58025444 	.word	0x58025444
 80075d8:	58025458 	.word	0x58025458
 80075dc:	5802546c 	.word	0x5802546c
 80075e0:	58025480 	.word	0x58025480
 80075e4:	58025494 	.word	0x58025494
 80075e8:	cccccccd 	.word	0xcccccccd
 80075ec:	16009600 	.word	0x16009600
 80075f0:	58025880 	.word	0x58025880
 80075f4:	aaaaaaab 	.word	0xaaaaaaab
 80075f8:	400204b8 	.word	0x400204b8
 80075fc:	4002040f 	.word	0x4002040f
 8007600:	10008200 	.word	0x10008200
 8007604:	40020880 	.word	0x40020880

08007608 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	b2db      	uxtb	r3, r3
 8007616:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d04a      	beq.n	80076b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2b08      	cmp	r3, #8
 8007622:	d847      	bhi.n	80076b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a25      	ldr	r2, [pc, #148]	; (80076c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d022      	beq.n	8007674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a24      	ldr	r2, [pc, #144]	; (80076c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d01d      	beq.n	8007674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a22      	ldr	r2, [pc, #136]	; (80076c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d018      	beq.n	8007674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a21      	ldr	r2, [pc, #132]	; (80076cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d013      	beq.n	8007674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a1f      	ldr	r2, [pc, #124]	; (80076d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d00e      	beq.n	8007674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a1e      	ldr	r2, [pc, #120]	; (80076d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d009      	beq.n	8007674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a1c      	ldr	r2, [pc, #112]	; (80076d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d004      	beq.n	8007674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a1b      	ldr	r2, [pc, #108]	; (80076dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d101      	bne.n	8007678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007674:	2301      	movs	r3, #1
 8007676:	e000      	b.n	800767a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007678:	2300      	movs	r3, #0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00a      	beq.n	8007694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	4b17      	ldr	r3, [pc, #92]	; (80076e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007682:	4413      	add	r3, r2
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	461a      	mov	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4a15      	ldr	r2, [pc, #84]	; (80076e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007690:	671a      	str	r2, [r3, #112]	; 0x70
 8007692:	e009      	b.n	80076a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007694:	68fa      	ldr	r2, [r7, #12]
 8007696:	4b14      	ldr	r3, [pc, #80]	; (80076e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007698:	4413      	add	r3, r2
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	461a      	mov	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a11      	ldr	r2, [pc, #68]	; (80076ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80076a6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	3b01      	subs	r3, #1
 80076ac:	2201      	movs	r2, #1
 80076ae:	409a      	lsls	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80076b4:	bf00      	nop
 80076b6:	3714      	adds	r7, #20
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr
 80076c0:	58025408 	.word	0x58025408
 80076c4:	5802541c 	.word	0x5802541c
 80076c8:	58025430 	.word	0x58025430
 80076cc:	58025444 	.word	0x58025444
 80076d0:	58025458 	.word	0x58025458
 80076d4:	5802546c 	.word	0x5802546c
 80076d8:	58025480 	.word	0x58025480
 80076dc:	58025494 	.word	0x58025494
 80076e0:	1600963f 	.word	0x1600963f
 80076e4:	58025940 	.word	0x58025940
 80076e8:	1000823f 	.word	0x1000823f
 80076ec:	40020940 	.word	0x40020940

080076f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b089      	sub	sp, #36	; 0x24
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80076fa:	2300      	movs	r3, #0
 80076fc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80076fe:	4b89      	ldr	r3, [pc, #548]	; (8007924 <HAL_GPIO_Init+0x234>)
 8007700:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007702:	e194      	b.n	8007a2e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	2101      	movs	r1, #1
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	fa01 f303 	lsl.w	r3, r1, r3
 8007710:	4013      	ands	r3, r2
 8007712:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	2b00      	cmp	r3, #0
 8007718:	f000 8186 	beq.w	8007a28 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	f003 0303 	and.w	r3, r3, #3
 8007724:	2b01      	cmp	r3, #1
 8007726:	d005      	beq.n	8007734 <HAL_GPIO_Init+0x44>
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	f003 0303 	and.w	r3, r3, #3
 8007730:	2b02      	cmp	r3, #2
 8007732:	d130      	bne.n	8007796 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800773a:	69fb      	ldr	r3, [r7, #28]
 800773c:	005b      	lsls	r3, r3, #1
 800773e:	2203      	movs	r2, #3
 8007740:	fa02 f303 	lsl.w	r3, r2, r3
 8007744:	43db      	mvns	r3, r3
 8007746:	69ba      	ldr	r2, [r7, #24]
 8007748:	4013      	ands	r3, r2
 800774a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	68da      	ldr	r2, [r3, #12]
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	005b      	lsls	r3, r3, #1
 8007754:	fa02 f303 	lsl.w	r3, r2, r3
 8007758:	69ba      	ldr	r2, [r7, #24]
 800775a:	4313      	orrs	r3, r2
 800775c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	69ba      	ldr	r2, [r7, #24]
 8007762:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800776a:	2201      	movs	r2, #1
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	fa02 f303 	lsl.w	r3, r2, r3
 8007772:	43db      	mvns	r3, r3
 8007774:	69ba      	ldr	r2, [r7, #24]
 8007776:	4013      	ands	r3, r2
 8007778:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	091b      	lsrs	r3, r3, #4
 8007780:	f003 0201 	and.w	r2, r3, #1
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	fa02 f303 	lsl.w	r3, r2, r3
 800778a:	69ba      	ldr	r2, [r7, #24]
 800778c:	4313      	orrs	r3, r2
 800778e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	69ba      	ldr	r2, [r7, #24]
 8007794:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	f003 0303 	and.w	r3, r3, #3
 800779e:	2b03      	cmp	r3, #3
 80077a0:	d017      	beq.n	80077d2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	005b      	lsls	r3, r3, #1
 80077ac:	2203      	movs	r2, #3
 80077ae:	fa02 f303 	lsl.w	r3, r2, r3
 80077b2:	43db      	mvns	r3, r3
 80077b4:	69ba      	ldr	r2, [r7, #24]
 80077b6:	4013      	ands	r3, r2
 80077b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	689a      	ldr	r2, [r3, #8]
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	005b      	lsls	r3, r3, #1
 80077c2:	fa02 f303 	lsl.w	r3, r2, r3
 80077c6:	69ba      	ldr	r2, [r7, #24]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	69ba      	ldr	r2, [r7, #24]
 80077d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	f003 0303 	and.w	r3, r3, #3
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d123      	bne.n	8007826 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	08da      	lsrs	r2, r3, #3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	3208      	adds	r2, #8
 80077e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	f003 0307 	and.w	r3, r3, #7
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	220f      	movs	r2, #15
 80077f6:	fa02 f303 	lsl.w	r3, r2, r3
 80077fa:	43db      	mvns	r3, r3
 80077fc:	69ba      	ldr	r2, [r7, #24]
 80077fe:	4013      	ands	r3, r2
 8007800:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	691a      	ldr	r2, [r3, #16]
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	f003 0307 	and.w	r3, r3, #7
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	fa02 f303 	lsl.w	r3, r2, r3
 8007812:	69ba      	ldr	r2, [r7, #24]
 8007814:	4313      	orrs	r3, r2
 8007816:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	08da      	lsrs	r2, r3, #3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	3208      	adds	r2, #8
 8007820:	69b9      	ldr	r1, [r7, #24]
 8007822:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	005b      	lsls	r3, r3, #1
 8007830:	2203      	movs	r2, #3
 8007832:	fa02 f303 	lsl.w	r3, r2, r3
 8007836:	43db      	mvns	r3, r3
 8007838:	69ba      	ldr	r2, [r7, #24]
 800783a:	4013      	ands	r3, r2
 800783c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	f003 0203 	and.w	r2, r3, #3
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	005b      	lsls	r3, r3, #1
 800784a:	fa02 f303 	lsl.w	r3, r2, r3
 800784e:	69ba      	ldr	r2, [r7, #24]
 8007850:	4313      	orrs	r3, r2
 8007852:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	69ba      	ldr	r2, [r7, #24]
 8007858:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007862:	2b00      	cmp	r3, #0
 8007864:	f000 80e0 	beq.w	8007a28 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007868:	4b2f      	ldr	r3, [pc, #188]	; (8007928 <HAL_GPIO_Init+0x238>)
 800786a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800786e:	4a2e      	ldr	r2, [pc, #184]	; (8007928 <HAL_GPIO_Init+0x238>)
 8007870:	f043 0302 	orr.w	r3, r3, #2
 8007874:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007878:	4b2b      	ldr	r3, [pc, #172]	; (8007928 <HAL_GPIO_Init+0x238>)
 800787a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800787e:	f003 0302 	and.w	r3, r3, #2
 8007882:	60fb      	str	r3, [r7, #12]
 8007884:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007886:	4a29      	ldr	r2, [pc, #164]	; (800792c <HAL_GPIO_Init+0x23c>)
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	089b      	lsrs	r3, r3, #2
 800788c:	3302      	adds	r3, #2
 800788e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007892:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	f003 0303 	and.w	r3, r3, #3
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	220f      	movs	r2, #15
 800789e:	fa02 f303 	lsl.w	r3, r2, r3
 80078a2:	43db      	mvns	r3, r3
 80078a4:	69ba      	ldr	r2, [r7, #24]
 80078a6:	4013      	ands	r3, r2
 80078a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a20      	ldr	r2, [pc, #128]	; (8007930 <HAL_GPIO_Init+0x240>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d052      	beq.n	8007958 <HAL_GPIO_Init+0x268>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a1f      	ldr	r2, [pc, #124]	; (8007934 <HAL_GPIO_Init+0x244>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d031      	beq.n	800791e <HAL_GPIO_Init+0x22e>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4a1e      	ldr	r2, [pc, #120]	; (8007938 <HAL_GPIO_Init+0x248>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d02b      	beq.n	800791a <HAL_GPIO_Init+0x22a>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a1d      	ldr	r2, [pc, #116]	; (800793c <HAL_GPIO_Init+0x24c>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d025      	beq.n	8007916 <HAL_GPIO_Init+0x226>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a1c      	ldr	r2, [pc, #112]	; (8007940 <HAL_GPIO_Init+0x250>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d01f      	beq.n	8007912 <HAL_GPIO_Init+0x222>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a1b      	ldr	r2, [pc, #108]	; (8007944 <HAL_GPIO_Init+0x254>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d019      	beq.n	800790e <HAL_GPIO_Init+0x21e>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a1a      	ldr	r2, [pc, #104]	; (8007948 <HAL_GPIO_Init+0x258>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d013      	beq.n	800790a <HAL_GPIO_Init+0x21a>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a19      	ldr	r2, [pc, #100]	; (800794c <HAL_GPIO_Init+0x25c>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d00d      	beq.n	8007906 <HAL_GPIO_Init+0x216>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a18      	ldr	r2, [pc, #96]	; (8007950 <HAL_GPIO_Init+0x260>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d007      	beq.n	8007902 <HAL_GPIO_Init+0x212>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a17      	ldr	r2, [pc, #92]	; (8007954 <HAL_GPIO_Init+0x264>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d101      	bne.n	80078fe <HAL_GPIO_Init+0x20e>
 80078fa:	2309      	movs	r3, #9
 80078fc:	e02d      	b.n	800795a <HAL_GPIO_Init+0x26a>
 80078fe:	230a      	movs	r3, #10
 8007900:	e02b      	b.n	800795a <HAL_GPIO_Init+0x26a>
 8007902:	2308      	movs	r3, #8
 8007904:	e029      	b.n	800795a <HAL_GPIO_Init+0x26a>
 8007906:	2307      	movs	r3, #7
 8007908:	e027      	b.n	800795a <HAL_GPIO_Init+0x26a>
 800790a:	2306      	movs	r3, #6
 800790c:	e025      	b.n	800795a <HAL_GPIO_Init+0x26a>
 800790e:	2305      	movs	r3, #5
 8007910:	e023      	b.n	800795a <HAL_GPIO_Init+0x26a>
 8007912:	2304      	movs	r3, #4
 8007914:	e021      	b.n	800795a <HAL_GPIO_Init+0x26a>
 8007916:	2303      	movs	r3, #3
 8007918:	e01f      	b.n	800795a <HAL_GPIO_Init+0x26a>
 800791a:	2302      	movs	r3, #2
 800791c:	e01d      	b.n	800795a <HAL_GPIO_Init+0x26a>
 800791e:	2301      	movs	r3, #1
 8007920:	e01b      	b.n	800795a <HAL_GPIO_Init+0x26a>
 8007922:	bf00      	nop
 8007924:	58000080 	.word	0x58000080
 8007928:	58024400 	.word	0x58024400
 800792c:	58000400 	.word	0x58000400
 8007930:	58020000 	.word	0x58020000
 8007934:	58020400 	.word	0x58020400
 8007938:	58020800 	.word	0x58020800
 800793c:	58020c00 	.word	0x58020c00
 8007940:	58021000 	.word	0x58021000
 8007944:	58021400 	.word	0x58021400
 8007948:	58021800 	.word	0x58021800
 800794c:	58021c00 	.word	0x58021c00
 8007950:	58022000 	.word	0x58022000
 8007954:	58022400 	.word	0x58022400
 8007958:	2300      	movs	r3, #0
 800795a:	69fa      	ldr	r2, [r7, #28]
 800795c:	f002 0203 	and.w	r2, r2, #3
 8007960:	0092      	lsls	r2, r2, #2
 8007962:	4093      	lsls	r3, r2
 8007964:	69ba      	ldr	r2, [r7, #24]
 8007966:	4313      	orrs	r3, r2
 8007968:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800796a:	4938      	ldr	r1, [pc, #224]	; (8007a4c <HAL_GPIO_Init+0x35c>)
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	089b      	lsrs	r3, r3, #2
 8007970:	3302      	adds	r3, #2
 8007972:	69ba      	ldr	r2, [r7, #24]
 8007974:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	43db      	mvns	r3, r3
 8007984:	69ba      	ldr	r2, [r7, #24]
 8007986:	4013      	ands	r3, r2
 8007988:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007992:	2b00      	cmp	r3, #0
 8007994:	d003      	beq.n	800799e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007996:	69ba      	ldr	r2, [r7, #24]
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	4313      	orrs	r3, r2
 800799c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800799e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80079a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	43db      	mvns	r3, r3
 80079b2:	69ba      	ldr	r2, [r7, #24]
 80079b4:	4013      	ands	r3, r2
 80079b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d003      	beq.n	80079cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80079c4:	69ba      	ldr	r2, [r7, #24]
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	4313      	orrs	r3, r2
 80079ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80079cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	43db      	mvns	r3, r3
 80079de:	69ba      	ldr	r2, [r7, #24]
 80079e0:	4013      	ands	r3, r2
 80079e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d003      	beq.n	80079f8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80079f0:	69ba      	ldr	r2, [r7, #24]
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	69ba      	ldr	r2, [r7, #24]
 80079fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	43db      	mvns	r3, r3
 8007a08:	69ba      	ldr	r2, [r7, #24]
 8007a0a:	4013      	ands	r3, r2
 8007a0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d003      	beq.n	8007a22 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007a1a:	69ba      	ldr	r2, [r7, #24]
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	69ba      	ldr	r2, [r7, #24]
 8007a26:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	fa22 f303 	lsr.w	r3, r2, r3
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	f47f ae63 	bne.w	8007704 <HAL_GPIO_Init+0x14>
  }
}
 8007a3e:	bf00      	nop
 8007a40:	bf00      	nop
 8007a42:	3724      	adds	r7, #36	; 0x24
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr
 8007a4c:	58000400 	.word	0x58000400

08007a50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b085      	sub	sp, #20
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	460b      	mov	r3, r1
 8007a5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	691a      	ldr	r2, [r3, #16]
 8007a60:	887b      	ldrh	r3, [r7, #2]
 8007a62:	4013      	ands	r3, r2
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d002      	beq.n	8007a6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	73fb      	strb	r3, [r7, #15]
 8007a6c:	e001      	b.n	8007a72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3714      	adds	r7, #20
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	460b      	mov	r3, r1
 8007a8a:	807b      	strh	r3, [r7, #2]
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007a90:	787b      	ldrb	r3, [r7, #1]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d003      	beq.n	8007a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007a96:	887a      	ldrh	r2, [r7, #2]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007a9c:	e003      	b.n	8007aa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007a9e:	887b      	ldrh	r3, [r7, #2]
 8007aa0:	041a      	lsls	r2, r3, #16
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	619a      	str	r2, [r3, #24]
}
 8007aa6:	bf00      	nop
 8007aa8:	370c      	adds	r7, #12
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr

08007ab2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007ab2:	b480      	push	{r7}
 8007ab4:	b085      	sub	sp, #20
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
 8007aba:	460b      	mov	r3, r1
 8007abc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	695b      	ldr	r3, [r3, #20]
 8007ac2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007ac4:	887a      	ldrh	r2, [r7, #2]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	4013      	ands	r3, r2
 8007aca:	041a      	lsls	r2, r3, #16
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	43d9      	mvns	r1, r3
 8007ad0:	887b      	ldrh	r3, [r7, #2]
 8007ad2:	400b      	ands	r3, r1
 8007ad4:	431a      	orrs	r2, r3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	619a      	str	r2, [r3, #24]
}
 8007ada:	bf00      	nop
 8007adc:	3714      	adds	r7, #20
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr
	...

08007ae8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d101      	bne.n	8007afa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e07f      	b.n	8007bfa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d106      	bne.n	8007b14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f7fa faec 	bl	80020ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2224      	movs	r2, #36	; 0x24
 8007b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f022 0201 	bic.w	r2, r2, #1
 8007b2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	685a      	ldr	r2, [r3, #4]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007b38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	689a      	ldr	r2, [r3, #8]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007b48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	68db      	ldr	r3, [r3, #12]
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d107      	bne.n	8007b62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	689a      	ldr	r2, [r3, #8]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b5e:	609a      	str	r2, [r3, #8]
 8007b60:	e006      	b.n	8007b70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	689a      	ldr	r2, [r3, #8]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007b6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d104      	bne.n	8007b82 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	6859      	ldr	r1, [r3, #4]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	4b1d      	ldr	r3, [pc, #116]	; (8007c04 <HAL_I2C_Init+0x11c>)
 8007b8e:	430b      	orrs	r3, r1
 8007b90:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	68da      	ldr	r2, [r3, #12]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007ba0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	691a      	ldr	r2, [r3, #16]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	695b      	ldr	r3, [r3, #20]
 8007baa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	699b      	ldr	r3, [r3, #24]
 8007bb2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	430a      	orrs	r2, r1
 8007bba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	69d9      	ldr	r1, [r3, #28]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6a1a      	ldr	r2, [r3, #32]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	430a      	orrs	r2, r1
 8007bca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f042 0201 	orr.w	r2, r2, #1
 8007bda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2220      	movs	r2, #32
 8007be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007bf8:	2300      	movs	r3, #0
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3708      	adds	r7, #8
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	02008000 	.word	0x02008000

08007c08 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b08a      	sub	sp, #40	; 0x28
 8007c0c:	af02      	add	r7, sp, #8
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	607a      	str	r2, [r7, #4]
 8007c12:	603b      	str	r3, [r7, #0]
 8007c14:	460b      	mov	r3, r1
 8007c16:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	2b20      	cmp	r3, #32
 8007c26:	f040 80ef 	bne.w	8007e08 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	699b      	ldr	r3, [r3, #24]
 8007c30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c38:	d101      	bne.n	8007c3e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8007c3a:	2302      	movs	r3, #2
 8007c3c:	e0e5      	b.n	8007e0a <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d101      	bne.n	8007c4c <HAL_I2C_IsDeviceReady+0x44>
 8007c48:	2302      	movs	r3, #2
 8007c4a:	e0de      	b.n	8007e0a <HAL_I2C_IsDeviceReady+0x202>
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2224      	movs	r2, #36	; 0x24
 8007c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d105      	bne.n	8007c76 <HAL_I2C_IsDeviceReady+0x6e>
 8007c6a:	897b      	ldrh	r3, [r7, #10]
 8007c6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007c70:	4b68      	ldr	r3, [pc, #416]	; (8007e14 <HAL_I2C_IsDeviceReady+0x20c>)
 8007c72:	4313      	orrs	r3, r2
 8007c74:	e004      	b.n	8007c80 <HAL_I2C_IsDeviceReady+0x78>
 8007c76:	897b      	ldrh	r3, [r7, #10]
 8007c78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c7c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8007c80:	68fa      	ldr	r2, [r7, #12]
 8007c82:	6812      	ldr	r2, [r2, #0]
 8007c84:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8007c86:	f7fb f82b 	bl	8002ce0 <HAL_GetTick>
 8007c8a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	699b      	ldr	r3, [r3, #24]
 8007c92:	f003 0320 	and.w	r3, r3, #32
 8007c96:	2b20      	cmp	r3, #32
 8007c98:	bf0c      	ite	eq
 8007c9a:	2301      	moveq	r3, #1
 8007c9c:	2300      	movne	r3, #0
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	699b      	ldr	r3, [r3, #24]
 8007ca8:	f003 0310 	and.w	r3, r3, #16
 8007cac:	2b10      	cmp	r3, #16
 8007cae:	bf0c      	ite	eq
 8007cb0:	2301      	moveq	r3, #1
 8007cb2:	2300      	movne	r3, #0
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007cb8:	e034      	b.n	8007d24 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cc0:	d01a      	beq.n	8007cf8 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007cc2:	f7fb f80d 	bl	8002ce0 <HAL_GetTick>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	1ad3      	subs	r3, r2, r3
 8007ccc:	683a      	ldr	r2, [r7, #0]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d302      	bcc.n	8007cd8 <HAL_I2C_IsDeviceReady+0xd0>
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10f      	bne.n	8007cf8 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2220      	movs	r2, #32
 8007cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ce4:	f043 0220 	orr.w	r2, r3, #32
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e088      	b.n	8007e0a <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	699b      	ldr	r3, [r3, #24]
 8007cfe:	f003 0320 	and.w	r3, r3, #32
 8007d02:	2b20      	cmp	r3, #32
 8007d04:	bf0c      	ite	eq
 8007d06:	2301      	moveq	r3, #1
 8007d08:	2300      	movne	r3, #0
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	699b      	ldr	r3, [r3, #24]
 8007d14:	f003 0310 	and.w	r3, r3, #16
 8007d18:	2b10      	cmp	r3, #16
 8007d1a:	bf0c      	ite	eq
 8007d1c:	2301      	moveq	r3, #1
 8007d1e:	2300      	movne	r3, #0
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007d24:	7ffb      	ldrb	r3, [r7, #31]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d102      	bne.n	8007d30 <HAL_I2C_IsDeviceReady+0x128>
 8007d2a:	7fbb      	ldrb	r3, [r7, #30]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d0c4      	beq.n	8007cba <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	699b      	ldr	r3, [r3, #24]
 8007d36:	f003 0310 	and.w	r3, r3, #16
 8007d3a:	2b10      	cmp	r3, #16
 8007d3c:	d01a      	beq.n	8007d74 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	9300      	str	r3, [sp, #0]
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	2200      	movs	r2, #0
 8007d46:	2120      	movs	r1, #32
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f000 f865 	bl	8007e18 <I2C_WaitOnFlagUntilTimeout>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d001      	beq.n	8007d58 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	e058      	b.n	8007e0a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2220      	movs	r2, #32
 8007d5e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2220      	movs	r2, #32
 8007d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8007d70:	2300      	movs	r3, #0
 8007d72:	e04a      	b.n	8007e0a <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007d74:	69bb      	ldr	r3, [r7, #24]
 8007d76:	9300      	str	r3, [sp, #0]
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	2120      	movs	r1, #32
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	f000 f84a 	bl	8007e18 <I2C_WaitOnFlagUntilTimeout>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d001      	beq.n	8007d8e <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e03d      	b.n	8007e0a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2210      	movs	r2, #16
 8007d94:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2220      	movs	r2, #32
 8007d9c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d118      	bne.n	8007dd8 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	685a      	ldr	r2, [r3, #4]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007db4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	9300      	str	r3, [sp, #0]
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	2120      	movs	r1, #32
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	f000 f829 	bl	8007e18 <I2C_WaitOnFlagUntilTimeout>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d001      	beq.n	8007dd0 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e01c      	b.n	8007e0a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	2220      	movs	r2, #32
 8007dd6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	f63f af3d 	bhi.w	8007c62 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2220      	movs	r2, #32
 8007dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007df4:	f043 0220 	orr.w	r2, r3, #32
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	e000      	b.n	8007e0a <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8007e08:	2302      	movs	r3, #2
  }
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3720      	adds	r7, #32
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	02002000 	.word	0x02002000

08007e18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	603b      	str	r3, [r7, #0]
 8007e24:	4613      	mov	r3, r2
 8007e26:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e28:	e031      	b.n	8007e8e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e30:	d02d      	beq.n	8007e8e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e32:	f7fa ff55 	bl	8002ce0 <HAL_GetTick>
 8007e36:	4602      	mov	r2, r0
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	1ad3      	subs	r3, r2, r3
 8007e3c:	683a      	ldr	r2, [r7, #0]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d302      	bcc.n	8007e48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d122      	bne.n	8007e8e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	699a      	ldr	r2, [r3, #24]
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	4013      	ands	r3, r2
 8007e52:	68ba      	ldr	r2, [r7, #8]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	bf0c      	ite	eq
 8007e58:	2301      	moveq	r3, #1
 8007e5a:	2300      	movne	r3, #0
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	461a      	mov	r2, r3
 8007e60:	79fb      	ldrb	r3, [r7, #7]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d113      	bne.n	8007e8e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e6a:	f043 0220 	orr.w	r2, r3, #32
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2220      	movs	r2, #32
 8007e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e00f      	b.n	8007eae <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	699a      	ldr	r2, [r3, #24]
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	4013      	ands	r3, r2
 8007e98:	68ba      	ldr	r2, [r7, #8]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	bf0c      	ite	eq
 8007e9e:	2301      	moveq	r3, #1
 8007ea0:	2300      	movne	r3, #0
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	79fb      	ldrb	r3, [r7, #7]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d0be      	beq.n	8007e2a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3710      	adds	r7, #16
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007eb6:	b480      	push	{r7}
 8007eb8:	b083      	sub	sp, #12
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
 8007ebe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	2b20      	cmp	r3, #32
 8007eca:	d138      	bne.n	8007f3e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d101      	bne.n	8007eda <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007ed6:	2302      	movs	r3, #2
 8007ed8:	e032      	b.n	8007f40 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2224      	movs	r2, #36	; 0x24
 8007ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f022 0201 	bic.w	r2, r2, #1
 8007ef8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007f08:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	6819      	ldr	r1, [r3, #0]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	683a      	ldr	r2, [r7, #0]
 8007f16:	430a      	orrs	r2, r1
 8007f18:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f042 0201 	orr.w	r2, r2, #1
 8007f28:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2220      	movs	r2, #32
 8007f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	e000      	b.n	8007f40 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007f3e:	2302      	movs	r3, #2
  }
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b085      	sub	sp, #20
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	2b20      	cmp	r3, #32
 8007f60:	d139      	bne.n	8007fd6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d101      	bne.n	8007f70 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007f6c:	2302      	movs	r3, #2
 8007f6e:	e033      	b.n	8007fd8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2224      	movs	r2, #36	; 0x24
 8007f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f022 0201 	bic.w	r2, r2, #1
 8007f8e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007f9e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	021b      	lsls	r3, r3, #8
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f042 0201 	orr.w	r2, r2, #1
 8007fc0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2220      	movs	r2, #32
 8007fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	e000      	b.n	8007fd8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007fd6:	2302      	movs	r3, #2
  }
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3714      	adds	r7, #20
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007fec:	4b19      	ldr	r3, [pc, #100]	; (8008054 <HAL_PWREx_ConfigSupply+0x70>)
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	f003 0304 	and.w	r3, r3, #4
 8007ff4:	2b04      	cmp	r3, #4
 8007ff6:	d00a      	beq.n	800800e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007ff8:	4b16      	ldr	r3, [pc, #88]	; (8008054 <HAL_PWREx_ConfigSupply+0x70>)
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	f003 0307 	and.w	r3, r3, #7
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	429a      	cmp	r2, r3
 8008004:	d001      	beq.n	800800a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e01f      	b.n	800804a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800800a:	2300      	movs	r3, #0
 800800c:	e01d      	b.n	800804a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800800e:	4b11      	ldr	r3, [pc, #68]	; (8008054 <HAL_PWREx_ConfigSupply+0x70>)
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	f023 0207 	bic.w	r2, r3, #7
 8008016:	490f      	ldr	r1, [pc, #60]	; (8008054 <HAL_PWREx_ConfigSupply+0x70>)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	4313      	orrs	r3, r2
 800801c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800801e:	f7fa fe5f 	bl	8002ce0 <HAL_GetTick>
 8008022:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008024:	e009      	b.n	800803a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008026:	f7fa fe5b 	bl	8002ce0 <HAL_GetTick>
 800802a:	4602      	mov	r2, r0
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008034:	d901      	bls.n	800803a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	e007      	b.n	800804a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800803a:	4b06      	ldr	r3, [pc, #24]	; (8008054 <HAL_PWREx_ConfigSupply+0x70>)
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008042:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008046:	d1ee      	bne.n	8008026 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	58024800 	.word	0x58024800

08008058 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b08c      	sub	sp, #48	; 0x30
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d102      	bne.n	800806c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	f000 bc48 	b.w	80088fc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f003 0301 	and.w	r3, r3, #1
 8008074:	2b00      	cmp	r3, #0
 8008076:	f000 8088 	beq.w	800818a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800807a:	4b99      	ldr	r3, [pc, #612]	; (80082e0 <HAL_RCC_OscConfig+0x288>)
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008082:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008084:	4b96      	ldr	r3, [pc, #600]	; (80082e0 <HAL_RCC_OscConfig+0x288>)
 8008086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008088:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800808a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800808c:	2b10      	cmp	r3, #16
 800808e:	d007      	beq.n	80080a0 <HAL_RCC_OscConfig+0x48>
 8008090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008092:	2b18      	cmp	r3, #24
 8008094:	d111      	bne.n	80080ba <HAL_RCC_OscConfig+0x62>
 8008096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008098:	f003 0303 	and.w	r3, r3, #3
 800809c:	2b02      	cmp	r3, #2
 800809e:	d10c      	bne.n	80080ba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080a0:	4b8f      	ldr	r3, [pc, #572]	; (80082e0 <HAL_RCC_OscConfig+0x288>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d06d      	beq.n	8008188 <HAL_RCC_OscConfig+0x130>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d169      	bne.n	8008188 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	f000 bc21 	b.w	80088fc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080c2:	d106      	bne.n	80080d2 <HAL_RCC_OscConfig+0x7a>
 80080c4:	4b86      	ldr	r3, [pc, #536]	; (80082e0 <HAL_RCC_OscConfig+0x288>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a85      	ldr	r2, [pc, #532]	; (80082e0 <HAL_RCC_OscConfig+0x288>)
 80080ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080ce:	6013      	str	r3, [r2, #0]
 80080d0:	e02e      	b.n	8008130 <HAL_RCC_OscConfig+0xd8>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d10c      	bne.n	80080f4 <HAL_RCC_OscConfig+0x9c>
 80080da:	4b81      	ldr	r3, [pc, #516]	; (80082e0 <HAL_RCC_OscConfig+0x288>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a80      	ldr	r2, [pc, #512]	; (80082e0 <HAL_RCC_OscConfig+0x288>)
 80080e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080e4:	6013      	str	r3, [r2, #0]
 80080e6:	4b7e      	ldr	r3, [pc, #504]	; (80082e0 <HAL_RCC_OscConfig+0x288>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a7d      	ldr	r2, [pc, #500]	; (80082e0 <HAL_RCC_OscConfig+0x288>)
 80080ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080f0:	6013      	str	r3, [r2, #0]
 80080f2:	e01d      	b.n	8008130 <HAL_RCC_OscConfig+0xd8>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80080fc:	d10c      	bne.n	8008118 <HAL_RCC_OscConfig+0xc0>
 80080fe:	4b78      	ldr	r3, [pc, #480]	; (80082e0 <HAL_RCC_OscConfig+0x288>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a77      	ldr	r2, [pc, #476]	; (80082e0 <HAL_RCC_OscConfig+0x288>)
 8008104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008108:	6013      	str	r3, [r2, #0]
 800810a:	4b75      	ldr	r3, [pc, #468]	; (80082e0 <HAL_RCC_OscConfig+0x288>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a74      	ldr	r2, [pc, #464]	; (80082e0 <HAL_RCC_OscConfig+0x288>)
 8008110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008114:	6013      	str	r3, [r2, #0]
 8008116:	e00b      	b.n	8008130 <HAL_RCC_OscConfig+0xd8>
 8008118:	4b71      	ldr	r3, [pc, #452]	; (80082e0 <HAL_RCC_OscConfig+0x288>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a70      	ldr	r2, [pc, #448]	; (80082e0 <HAL_RCC_OscConfig+0x288>)
 800811e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008122:	6013      	str	r3, [r2, #0]
 8008124:	4b6e      	ldr	r3, [pc, #440]	; (80082e0 <HAL_RCC_OscConfig+0x288>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a6d      	ldr	r2, [pc, #436]	; (80082e0 <HAL_RCC_OscConfig+0x288>)
 800812a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800812e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d013      	beq.n	8008160 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008138:	f7fa fdd2 	bl	8002ce0 <HAL_GetTick>
 800813c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800813e:	e008      	b.n	8008152 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008140:	f7fa fdce 	bl	8002ce0 <HAL_GetTick>
 8008144:	4602      	mov	r2, r0
 8008146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	2b64      	cmp	r3, #100	; 0x64
 800814c:	d901      	bls.n	8008152 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800814e:	2303      	movs	r3, #3
 8008150:	e3d4      	b.n	80088fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008152:	4b63      	ldr	r3, [pc, #396]	; (80082e0 <HAL_RCC_OscConfig+0x288>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800815a:	2b00      	cmp	r3, #0
 800815c:	d0f0      	beq.n	8008140 <HAL_RCC_OscConfig+0xe8>
 800815e:	e014      	b.n	800818a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008160:	f7fa fdbe 	bl	8002ce0 <HAL_GetTick>
 8008164:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008166:	e008      	b.n	800817a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008168:	f7fa fdba 	bl	8002ce0 <HAL_GetTick>
 800816c:	4602      	mov	r2, r0
 800816e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	2b64      	cmp	r3, #100	; 0x64
 8008174:	d901      	bls.n	800817a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008176:	2303      	movs	r3, #3
 8008178:	e3c0      	b.n	80088fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800817a:	4b59      	ldr	r3, [pc, #356]	; (80082e0 <HAL_RCC_OscConfig+0x288>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008182:	2b00      	cmp	r3, #0
 8008184:	d1f0      	bne.n	8008168 <HAL_RCC_OscConfig+0x110>
 8008186:	e000      	b.n	800818a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f003 0302 	and.w	r3, r3, #2
 8008192:	2b00      	cmp	r3, #0
 8008194:	f000 80ca 	beq.w	800832c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008198:	4b51      	ldr	r3, [pc, #324]	; (80082e0 <HAL_RCC_OscConfig+0x288>)
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081a0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80081a2:	4b4f      	ldr	r3, [pc, #316]	; (80082e0 <HAL_RCC_OscConfig+0x288>)
 80081a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80081a8:	6a3b      	ldr	r3, [r7, #32]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d007      	beq.n	80081be <HAL_RCC_OscConfig+0x166>
 80081ae:	6a3b      	ldr	r3, [r7, #32]
 80081b0:	2b18      	cmp	r3, #24
 80081b2:	d156      	bne.n	8008262 <HAL_RCC_OscConfig+0x20a>
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	f003 0303 	and.w	r3, r3, #3
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d151      	bne.n	8008262 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80081be:	4b48      	ldr	r3, [pc, #288]	; (80082e0 <HAL_RCC_OscConfig+0x288>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f003 0304 	and.w	r3, r3, #4
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d005      	beq.n	80081d6 <HAL_RCC_OscConfig+0x17e>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d101      	bne.n	80081d6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	e392      	b.n	80088fc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80081d6:	4b42      	ldr	r3, [pc, #264]	; (80082e0 <HAL_RCC_OscConfig+0x288>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f023 0219 	bic.w	r2, r3, #25
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	493f      	ldr	r1, [pc, #252]	; (80082e0 <HAL_RCC_OscConfig+0x288>)
 80081e4:	4313      	orrs	r3, r2
 80081e6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081e8:	f7fa fd7a 	bl	8002ce0 <HAL_GetTick>
 80081ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80081ee:	e008      	b.n	8008202 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081f0:	f7fa fd76 	bl	8002ce0 <HAL_GetTick>
 80081f4:	4602      	mov	r2, r0
 80081f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f8:	1ad3      	subs	r3, r2, r3
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	d901      	bls.n	8008202 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80081fe:	2303      	movs	r3, #3
 8008200:	e37c      	b.n	80088fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008202:	4b37      	ldr	r3, [pc, #220]	; (80082e0 <HAL_RCC_OscConfig+0x288>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f003 0304 	and.w	r3, r3, #4
 800820a:	2b00      	cmp	r3, #0
 800820c:	d0f0      	beq.n	80081f0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800820e:	f7fa fd97 	bl	8002d40 <HAL_GetREVID>
 8008212:	4603      	mov	r3, r0
 8008214:	f241 0203 	movw	r2, #4099	; 0x1003
 8008218:	4293      	cmp	r3, r2
 800821a:	d817      	bhi.n	800824c <HAL_RCC_OscConfig+0x1f4>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	691b      	ldr	r3, [r3, #16]
 8008220:	2b40      	cmp	r3, #64	; 0x40
 8008222:	d108      	bne.n	8008236 <HAL_RCC_OscConfig+0x1de>
 8008224:	4b2e      	ldr	r3, [pc, #184]	; (80082e0 <HAL_RCC_OscConfig+0x288>)
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800822c:	4a2c      	ldr	r2, [pc, #176]	; (80082e0 <HAL_RCC_OscConfig+0x288>)
 800822e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008232:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008234:	e07a      	b.n	800832c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008236:	4b2a      	ldr	r3, [pc, #168]	; (80082e0 <HAL_RCC_OscConfig+0x288>)
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	031b      	lsls	r3, r3, #12
 8008244:	4926      	ldr	r1, [pc, #152]	; (80082e0 <HAL_RCC_OscConfig+0x288>)
 8008246:	4313      	orrs	r3, r2
 8008248:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800824a:	e06f      	b.n	800832c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800824c:	4b24      	ldr	r3, [pc, #144]	; (80082e0 <HAL_RCC_OscConfig+0x288>)
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	691b      	ldr	r3, [r3, #16]
 8008258:	061b      	lsls	r3, r3, #24
 800825a:	4921      	ldr	r1, [pc, #132]	; (80082e0 <HAL_RCC_OscConfig+0x288>)
 800825c:	4313      	orrs	r3, r2
 800825e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008260:	e064      	b.n	800832c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d047      	beq.n	80082fa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800826a:	4b1d      	ldr	r3, [pc, #116]	; (80082e0 <HAL_RCC_OscConfig+0x288>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f023 0219 	bic.w	r2, r3, #25
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	491a      	ldr	r1, [pc, #104]	; (80082e0 <HAL_RCC_OscConfig+0x288>)
 8008278:	4313      	orrs	r3, r2
 800827a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800827c:	f7fa fd30 	bl	8002ce0 <HAL_GetTick>
 8008280:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008282:	e008      	b.n	8008296 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008284:	f7fa fd2c 	bl	8002ce0 <HAL_GetTick>
 8008288:	4602      	mov	r2, r0
 800828a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828c:	1ad3      	subs	r3, r2, r3
 800828e:	2b02      	cmp	r3, #2
 8008290:	d901      	bls.n	8008296 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008292:	2303      	movs	r3, #3
 8008294:	e332      	b.n	80088fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008296:	4b12      	ldr	r3, [pc, #72]	; (80082e0 <HAL_RCC_OscConfig+0x288>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f003 0304 	and.w	r3, r3, #4
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d0f0      	beq.n	8008284 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082a2:	f7fa fd4d 	bl	8002d40 <HAL_GetREVID>
 80082a6:	4603      	mov	r3, r0
 80082a8:	f241 0203 	movw	r2, #4099	; 0x1003
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d819      	bhi.n	80082e4 <HAL_RCC_OscConfig+0x28c>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	691b      	ldr	r3, [r3, #16]
 80082b4:	2b40      	cmp	r3, #64	; 0x40
 80082b6:	d108      	bne.n	80082ca <HAL_RCC_OscConfig+0x272>
 80082b8:	4b09      	ldr	r3, [pc, #36]	; (80082e0 <HAL_RCC_OscConfig+0x288>)
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80082c0:	4a07      	ldr	r2, [pc, #28]	; (80082e0 <HAL_RCC_OscConfig+0x288>)
 80082c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082c6:	6053      	str	r3, [r2, #4]
 80082c8:	e030      	b.n	800832c <HAL_RCC_OscConfig+0x2d4>
 80082ca:	4b05      	ldr	r3, [pc, #20]	; (80082e0 <HAL_RCC_OscConfig+0x288>)
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	031b      	lsls	r3, r3, #12
 80082d8:	4901      	ldr	r1, [pc, #4]	; (80082e0 <HAL_RCC_OscConfig+0x288>)
 80082da:	4313      	orrs	r3, r2
 80082dc:	604b      	str	r3, [r1, #4]
 80082de:	e025      	b.n	800832c <HAL_RCC_OscConfig+0x2d4>
 80082e0:	58024400 	.word	0x58024400
 80082e4:	4b9a      	ldr	r3, [pc, #616]	; (8008550 <HAL_RCC_OscConfig+0x4f8>)
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	691b      	ldr	r3, [r3, #16]
 80082f0:	061b      	lsls	r3, r3, #24
 80082f2:	4997      	ldr	r1, [pc, #604]	; (8008550 <HAL_RCC_OscConfig+0x4f8>)
 80082f4:	4313      	orrs	r3, r2
 80082f6:	604b      	str	r3, [r1, #4]
 80082f8:	e018      	b.n	800832c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80082fa:	4b95      	ldr	r3, [pc, #596]	; (8008550 <HAL_RCC_OscConfig+0x4f8>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a94      	ldr	r2, [pc, #592]	; (8008550 <HAL_RCC_OscConfig+0x4f8>)
 8008300:	f023 0301 	bic.w	r3, r3, #1
 8008304:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008306:	f7fa fceb 	bl	8002ce0 <HAL_GetTick>
 800830a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800830c:	e008      	b.n	8008320 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800830e:	f7fa fce7 	bl	8002ce0 <HAL_GetTick>
 8008312:	4602      	mov	r2, r0
 8008314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008316:	1ad3      	subs	r3, r2, r3
 8008318:	2b02      	cmp	r3, #2
 800831a:	d901      	bls.n	8008320 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800831c:	2303      	movs	r3, #3
 800831e:	e2ed      	b.n	80088fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008320:	4b8b      	ldr	r3, [pc, #556]	; (8008550 <HAL_RCC_OscConfig+0x4f8>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f003 0304 	and.w	r3, r3, #4
 8008328:	2b00      	cmp	r3, #0
 800832a:	d1f0      	bne.n	800830e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f003 0310 	and.w	r3, r3, #16
 8008334:	2b00      	cmp	r3, #0
 8008336:	f000 80a9 	beq.w	800848c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800833a:	4b85      	ldr	r3, [pc, #532]	; (8008550 <HAL_RCC_OscConfig+0x4f8>)
 800833c:	691b      	ldr	r3, [r3, #16]
 800833e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008342:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008344:	4b82      	ldr	r3, [pc, #520]	; (8008550 <HAL_RCC_OscConfig+0x4f8>)
 8008346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008348:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	2b08      	cmp	r3, #8
 800834e:	d007      	beq.n	8008360 <HAL_RCC_OscConfig+0x308>
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	2b18      	cmp	r3, #24
 8008354:	d13a      	bne.n	80083cc <HAL_RCC_OscConfig+0x374>
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	f003 0303 	and.w	r3, r3, #3
 800835c:	2b01      	cmp	r3, #1
 800835e:	d135      	bne.n	80083cc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008360:	4b7b      	ldr	r3, [pc, #492]	; (8008550 <HAL_RCC_OscConfig+0x4f8>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008368:	2b00      	cmp	r3, #0
 800836a:	d005      	beq.n	8008378 <HAL_RCC_OscConfig+0x320>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	69db      	ldr	r3, [r3, #28]
 8008370:	2b80      	cmp	r3, #128	; 0x80
 8008372:	d001      	beq.n	8008378 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	e2c1      	b.n	80088fc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008378:	f7fa fce2 	bl	8002d40 <HAL_GetREVID>
 800837c:	4603      	mov	r3, r0
 800837e:	f241 0203 	movw	r2, #4099	; 0x1003
 8008382:	4293      	cmp	r3, r2
 8008384:	d817      	bhi.n	80083b6 <HAL_RCC_OscConfig+0x35e>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a1b      	ldr	r3, [r3, #32]
 800838a:	2b20      	cmp	r3, #32
 800838c:	d108      	bne.n	80083a0 <HAL_RCC_OscConfig+0x348>
 800838e:	4b70      	ldr	r3, [pc, #448]	; (8008550 <HAL_RCC_OscConfig+0x4f8>)
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008396:	4a6e      	ldr	r2, [pc, #440]	; (8008550 <HAL_RCC_OscConfig+0x4f8>)
 8008398:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800839c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800839e:	e075      	b.n	800848c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80083a0:	4b6b      	ldr	r3, [pc, #428]	; (8008550 <HAL_RCC_OscConfig+0x4f8>)
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a1b      	ldr	r3, [r3, #32]
 80083ac:	069b      	lsls	r3, r3, #26
 80083ae:	4968      	ldr	r1, [pc, #416]	; (8008550 <HAL_RCC_OscConfig+0x4f8>)
 80083b0:	4313      	orrs	r3, r2
 80083b2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80083b4:	e06a      	b.n	800848c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80083b6:	4b66      	ldr	r3, [pc, #408]	; (8008550 <HAL_RCC_OscConfig+0x4f8>)
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a1b      	ldr	r3, [r3, #32]
 80083c2:	061b      	lsls	r3, r3, #24
 80083c4:	4962      	ldr	r1, [pc, #392]	; (8008550 <HAL_RCC_OscConfig+0x4f8>)
 80083c6:	4313      	orrs	r3, r2
 80083c8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80083ca:	e05f      	b.n	800848c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	69db      	ldr	r3, [r3, #28]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d042      	beq.n	800845a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80083d4:	4b5e      	ldr	r3, [pc, #376]	; (8008550 <HAL_RCC_OscConfig+0x4f8>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a5d      	ldr	r2, [pc, #372]	; (8008550 <HAL_RCC_OscConfig+0x4f8>)
 80083da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083e0:	f7fa fc7e 	bl	8002ce0 <HAL_GetTick>
 80083e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80083e6:	e008      	b.n	80083fa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80083e8:	f7fa fc7a 	bl	8002ce0 <HAL_GetTick>
 80083ec:	4602      	mov	r2, r0
 80083ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	2b02      	cmp	r3, #2
 80083f4:	d901      	bls.n	80083fa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80083f6:	2303      	movs	r3, #3
 80083f8:	e280      	b.n	80088fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80083fa:	4b55      	ldr	r3, [pc, #340]	; (8008550 <HAL_RCC_OscConfig+0x4f8>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008402:	2b00      	cmp	r3, #0
 8008404:	d0f0      	beq.n	80083e8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008406:	f7fa fc9b 	bl	8002d40 <HAL_GetREVID>
 800840a:	4603      	mov	r3, r0
 800840c:	f241 0203 	movw	r2, #4099	; 0x1003
 8008410:	4293      	cmp	r3, r2
 8008412:	d817      	bhi.n	8008444 <HAL_RCC_OscConfig+0x3ec>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6a1b      	ldr	r3, [r3, #32]
 8008418:	2b20      	cmp	r3, #32
 800841a:	d108      	bne.n	800842e <HAL_RCC_OscConfig+0x3d6>
 800841c:	4b4c      	ldr	r3, [pc, #304]	; (8008550 <HAL_RCC_OscConfig+0x4f8>)
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008424:	4a4a      	ldr	r2, [pc, #296]	; (8008550 <HAL_RCC_OscConfig+0x4f8>)
 8008426:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800842a:	6053      	str	r3, [r2, #4]
 800842c:	e02e      	b.n	800848c <HAL_RCC_OscConfig+0x434>
 800842e:	4b48      	ldr	r3, [pc, #288]	; (8008550 <HAL_RCC_OscConfig+0x4f8>)
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6a1b      	ldr	r3, [r3, #32]
 800843a:	069b      	lsls	r3, r3, #26
 800843c:	4944      	ldr	r1, [pc, #272]	; (8008550 <HAL_RCC_OscConfig+0x4f8>)
 800843e:	4313      	orrs	r3, r2
 8008440:	604b      	str	r3, [r1, #4]
 8008442:	e023      	b.n	800848c <HAL_RCC_OscConfig+0x434>
 8008444:	4b42      	ldr	r3, [pc, #264]	; (8008550 <HAL_RCC_OscConfig+0x4f8>)
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6a1b      	ldr	r3, [r3, #32]
 8008450:	061b      	lsls	r3, r3, #24
 8008452:	493f      	ldr	r1, [pc, #252]	; (8008550 <HAL_RCC_OscConfig+0x4f8>)
 8008454:	4313      	orrs	r3, r2
 8008456:	60cb      	str	r3, [r1, #12]
 8008458:	e018      	b.n	800848c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800845a:	4b3d      	ldr	r3, [pc, #244]	; (8008550 <HAL_RCC_OscConfig+0x4f8>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a3c      	ldr	r2, [pc, #240]	; (8008550 <HAL_RCC_OscConfig+0x4f8>)
 8008460:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008464:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008466:	f7fa fc3b 	bl	8002ce0 <HAL_GetTick>
 800846a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800846c:	e008      	b.n	8008480 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800846e:	f7fa fc37 	bl	8002ce0 <HAL_GetTick>
 8008472:	4602      	mov	r2, r0
 8008474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008476:	1ad3      	subs	r3, r2, r3
 8008478:	2b02      	cmp	r3, #2
 800847a:	d901      	bls.n	8008480 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800847c:	2303      	movs	r3, #3
 800847e:	e23d      	b.n	80088fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008480:	4b33      	ldr	r3, [pc, #204]	; (8008550 <HAL_RCC_OscConfig+0x4f8>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008488:	2b00      	cmp	r3, #0
 800848a:	d1f0      	bne.n	800846e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f003 0308 	and.w	r3, r3, #8
 8008494:	2b00      	cmp	r3, #0
 8008496:	d036      	beq.n	8008506 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	695b      	ldr	r3, [r3, #20]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d019      	beq.n	80084d4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80084a0:	4b2b      	ldr	r3, [pc, #172]	; (8008550 <HAL_RCC_OscConfig+0x4f8>)
 80084a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084a4:	4a2a      	ldr	r2, [pc, #168]	; (8008550 <HAL_RCC_OscConfig+0x4f8>)
 80084a6:	f043 0301 	orr.w	r3, r3, #1
 80084aa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084ac:	f7fa fc18 	bl	8002ce0 <HAL_GetTick>
 80084b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80084b2:	e008      	b.n	80084c6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084b4:	f7fa fc14 	bl	8002ce0 <HAL_GetTick>
 80084b8:	4602      	mov	r2, r0
 80084ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084bc:	1ad3      	subs	r3, r2, r3
 80084be:	2b02      	cmp	r3, #2
 80084c0:	d901      	bls.n	80084c6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80084c2:	2303      	movs	r3, #3
 80084c4:	e21a      	b.n	80088fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80084c6:	4b22      	ldr	r3, [pc, #136]	; (8008550 <HAL_RCC_OscConfig+0x4f8>)
 80084c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084ca:	f003 0302 	and.w	r3, r3, #2
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d0f0      	beq.n	80084b4 <HAL_RCC_OscConfig+0x45c>
 80084d2:	e018      	b.n	8008506 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80084d4:	4b1e      	ldr	r3, [pc, #120]	; (8008550 <HAL_RCC_OscConfig+0x4f8>)
 80084d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084d8:	4a1d      	ldr	r2, [pc, #116]	; (8008550 <HAL_RCC_OscConfig+0x4f8>)
 80084da:	f023 0301 	bic.w	r3, r3, #1
 80084de:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084e0:	f7fa fbfe 	bl	8002ce0 <HAL_GetTick>
 80084e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80084e6:	e008      	b.n	80084fa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084e8:	f7fa fbfa 	bl	8002ce0 <HAL_GetTick>
 80084ec:	4602      	mov	r2, r0
 80084ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f0:	1ad3      	subs	r3, r2, r3
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d901      	bls.n	80084fa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80084f6:	2303      	movs	r3, #3
 80084f8:	e200      	b.n	80088fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80084fa:	4b15      	ldr	r3, [pc, #84]	; (8008550 <HAL_RCC_OscConfig+0x4f8>)
 80084fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084fe:	f003 0302 	and.w	r3, r3, #2
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1f0      	bne.n	80084e8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f003 0320 	and.w	r3, r3, #32
 800850e:	2b00      	cmp	r3, #0
 8008510:	d039      	beq.n	8008586 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	699b      	ldr	r3, [r3, #24]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d01c      	beq.n	8008554 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800851a:	4b0d      	ldr	r3, [pc, #52]	; (8008550 <HAL_RCC_OscConfig+0x4f8>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a0c      	ldr	r2, [pc, #48]	; (8008550 <HAL_RCC_OscConfig+0x4f8>)
 8008520:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008524:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008526:	f7fa fbdb 	bl	8002ce0 <HAL_GetTick>
 800852a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800852c:	e008      	b.n	8008540 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800852e:	f7fa fbd7 	bl	8002ce0 <HAL_GetTick>
 8008532:	4602      	mov	r2, r0
 8008534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008536:	1ad3      	subs	r3, r2, r3
 8008538:	2b02      	cmp	r3, #2
 800853a:	d901      	bls.n	8008540 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800853c:	2303      	movs	r3, #3
 800853e:	e1dd      	b.n	80088fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008540:	4b03      	ldr	r3, [pc, #12]	; (8008550 <HAL_RCC_OscConfig+0x4f8>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008548:	2b00      	cmp	r3, #0
 800854a:	d0f0      	beq.n	800852e <HAL_RCC_OscConfig+0x4d6>
 800854c:	e01b      	b.n	8008586 <HAL_RCC_OscConfig+0x52e>
 800854e:	bf00      	nop
 8008550:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008554:	4b9b      	ldr	r3, [pc, #620]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a9a      	ldr	r2, [pc, #616]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 800855a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800855e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008560:	f7fa fbbe 	bl	8002ce0 <HAL_GetTick>
 8008564:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008566:	e008      	b.n	800857a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008568:	f7fa fbba 	bl	8002ce0 <HAL_GetTick>
 800856c:	4602      	mov	r2, r0
 800856e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008570:	1ad3      	subs	r3, r2, r3
 8008572:	2b02      	cmp	r3, #2
 8008574:	d901      	bls.n	800857a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008576:	2303      	movs	r3, #3
 8008578:	e1c0      	b.n	80088fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800857a:	4b92      	ldr	r3, [pc, #584]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008582:	2b00      	cmp	r3, #0
 8008584:	d1f0      	bne.n	8008568 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f003 0304 	and.w	r3, r3, #4
 800858e:	2b00      	cmp	r3, #0
 8008590:	f000 8081 	beq.w	8008696 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008594:	4b8c      	ldr	r3, [pc, #560]	; (80087c8 <HAL_RCC_OscConfig+0x770>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a8b      	ldr	r2, [pc, #556]	; (80087c8 <HAL_RCC_OscConfig+0x770>)
 800859a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800859e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80085a0:	f7fa fb9e 	bl	8002ce0 <HAL_GetTick>
 80085a4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80085a6:	e008      	b.n	80085ba <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085a8:	f7fa fb9a 	bl	8002ce0 <HAL_GetTick>
 80085ac:	4602      	mov	r2, r0
 80085ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b0:	1ad3      	subs	r3, r2, r3
 80085b2:	2b64      	cmp	r3, #100	; 0x64
 80085b4:	d901      	bls.n	80085ba <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80085b6:	2303      	movs	r3, #3
 80085b8:	e1a0      	b.n	80088fc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80085ba:	4b83      	ldr	r3, [pc, #524]	; (80087c8 <HAL_RCC_OscConfig+0x770>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d0f0      	beq.n	80085a8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	689b      	ldr	r3, [r3, #8]
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d106      	bne.n	80085dc <HAL_RCC_OscConfig+0x584>
 80085ce:	4b7d      	ldr	r3, [pc, #500]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 80085d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085d2:	4a7c      	ldr	r2, [pc, #496]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 80085d4:	f043 0301 	orr.w	r3, r3, #1
 80085d8:	6713      	str	r3, [r2, #112]	; 0x70
 80085da:	e02d      	b.n	8008638 <HAL_RCC_OscConfig+0x5e0>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d10c      	bne.n	80085fe <HAL_RCC_OscConfig+0x5a6>
 80085e4:	4b77      	ldr	r3, [pc, #476]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 80085e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085e8:	4a76      	ldr	r2, [pc, #472]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 80085ea:	f023 0301 	bic.w	r3, r3, #1
 80085ee:	6713      	str	r3, [r2, #112]	; 0x70
 80085f0:	4b74      	ldr	r3, [pc, #464]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 80085f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085f4:	4a73      	ldr	r2, [pc, #460]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 80085f6:	f023 0304 	bic.w	r3, r3, #4
 80085fa:	6713      	str	r3, [r2, #112]	; 0x70
 80085fc:	e01c      	b.n	8008638 <HAL_RCC_OscConfig+0x5e0>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	2b05      	cmp	r3, #5
 8008604:	d10c      	bne.n	8008620 <HAL_RCC_OscConfig+0x5c8>
 8008606:	4b6f      	ldr	r3, [pc, #444]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 8008608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800860a:	4a6e      	ldr	r2, [pc, #440]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 800860c:	f043 0304 	orr.w	r3, r3, #4
 8008610:	6713      	str	r3, [r2, #112]	; 0x70
 8008612:	4b6c      	ldr	r3, [pc, #432]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 8008614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008616:	4a6b      	ldr	r2, [pc, #428]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 8008618:	f043 0301 	orr.w	r3, r3, #1
 800861c:	6713      	str	r3, [r2, #112]	; 0x70
 800861e:	e00b      	b.n	8008638 <HAL_RCC_OscConfig+0x5e0>
 8008620:	4b68      	ldr	r3, [pc, #416]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 8008622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008624:	4a67      	ldr	r2, [pc, #412]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 8008626:	f023 0301 	bic.w	r3, r3, #1
 800862a:	6713      	str	r3, [r2, #112]	; 0x70
 800862c:	4b65      	ldr	r3, [pc, #404]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 800862e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008630:	4a64      	ldr	r2, [pc, #400]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 8008632:	f023 0304 	bic.w	r3, r3, #4
 8008636:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d015      	beq.n	800866c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008640:	f7fa fb4e 	bl	8002ce0 <HAL_GetTick>
 8008644:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008646:	e00a      	b.n	800865e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008648:	f7fa fb4a 	bl	8002ce0 <HAL_GetTick>
 800864c:	4602      	mov	r2, r0
 800864e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008650:	1ad3      	subs	r3, r2, r3
 8008652:	f241 3288 	movw	r2, #5000	; 0x1388
 8008656:	4293      	cmp	r3, r2
 8008658:	d901      	bls.n	800865e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800865a:	2303      	movs	r3, #3
 800865c:	e14e      	b.n	80088fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800865e:	4b59      	ldr	r3, [pc, #356]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 8008660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008662:	f003 0302 	and.w	r3, r3, #2
 8008666:	2b00      	cmp	r3, #0
 8008668:	d0ee      	beq.n	8008648 <HAL_RCC_OscConfig+0x5f0>
 800866a:	e014      	b.n	8008696 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800866c:	f7fa fb38 	bl	8002ce0 <HAL_GetTick>
 8008670:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008672:	e00a      	b.n	800868a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008674:	f7fa fb34 	bl	8002ce0 <HAL_GetTick>
 8008678:	4602      	mov	r2, r0
 800867a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867c:	1ad3      	subs	r3, r2, r3
 800867e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008682:	4293      	cmp	r3, r2
 8008684:	d901      	bls.n	800868a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008686:	2303      	movs	r3, #3
 8008688:	e138      	b.n	80088fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800868a:	4b4e      	ldr	r3, [pc, #312]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 800868c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800868e:	f003 0302 	and.w	r3, r3, #2
 8008692:	2b00      	cmp	r3, #0
 8008694:	d1ee      	bne.n	8008674 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869a:	2b00      	cmp	r3, #0
 800869c:	f000 812d 	beq.w	80088fa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80086a0:	4b48      	ldr	r3, [pc, #288]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 80086a2:	691b      	ldr	r3, [r3, #16]
 80086a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086a8:	2b18      	cmp	r3, #24
 80086aa:	f000 80bd 	beq.w	8008828 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	f040 809e 	bne.w	80087f4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086b8:	4b42      	ldr	r3, [pc, #264]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a41      	ldr	r2, [pc, #260]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 80086be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80086c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086c4:	f7fa fb0c 	bl	8002ce0 <HAL_GetTick>
 80086c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80086ca:	e008      	b.n	80086de <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086cc:	f7fa fb08 	bl	8002ce0 <HAL_GetTick>
 80086d0:	4602      	mov	r2, r0
 80086d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d4:	1ad3      	subs	r3, r2, r3
 80086d6:	2b02      	cmp	r3, #2
 80086d8:	d901      	bls.n	80086de <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80086da:	2303      	movs	r3, #3
 80086dc:	e10e      	b.n	80088fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80086de:	4b39      	ldr	r3, [pc, #228]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d1f0      	bne.n	80086cc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80086ea:	4b36      	ldr	r3, [pc, #216]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 80086ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086ee:	4b37      	ldr	r3, [pc, #220]	; (80087cc <HAL_RCC_OscConfig+0x774>)
 80086f0:	4013      	ands	r3, r2
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80086fa:	0112      	lsls	r2, r2, #4
 80086fc:	430a      	orrs	r2, r1
 80086fe:	4931      	ldr	r1, [pc, #196]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 8008700:	4313      	orrs	r3, r2
 8008702:	628b      	str	r3, [r1, #40]	; 0x28
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008708:	3b01      	subs	r3, #1
 800870a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008712:	3b01      	subs	r3, #1
 8008714:	025b      	lsls	r3, r3, #9
 8008716:	b29b      	uxth	r3, r3
 8008718:	431a      	orrs	r2, r3
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800871e:	3b01      	subs	r3, #1
 8008720:	041b      	lsls	r3, r3, #16
 8008722:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008726:	431a      	orrs	r2, r3
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800872c:	3b01      	subs	r3, #1
 800872e:	061b      	lsls	r3, r3, #24
 8008730:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008734:	4923      	ldr	r1, [pc, #140]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 8008736:	4313      	orrs	r3, r2
 8008738:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800873a:	4b22      	ldr	r3, [pc, #136]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 800873c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800873e:	4a21      	ldr	r2, [pc, #132]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 8008740:	f023 0301 	bic.w	r3, r3, #1
 8008744:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008746:	4b1f      	ldr	r3, [pc, #124]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 8008748:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800874a:	4b21      	ldr	r3, [pc, #132]	; (80087d0 <HAL_RCC_OscConfig+0x778>)
 800874c:	4013      	ands	r3, r2
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008752:	00d2      	lsls	r2, r2, #3
 8008754:	491b      	ldr	r1, [pc, #108]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 8008756:	4313      	orrs	r3, r2
 8008758:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800875a:	4b1a      	ldr	r3, [pc, #104]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 800875c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800875e:	f023 020c 	bic.w	r2, r3, #12
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008766:	4917      	ldr	r1, [pc, #92]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 8008768:	4313      	orrs	r3, r2
 800876a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800876c:	4b15      	ldr	r3, [pc, #84]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 800876e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008770:	f023 0202 	bic.w	r2, r3, #2
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008778:	4912      	ldr	r1, [pc, #72]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 800877a:	4313      	orrs	r3, r2
 800877c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800877e:	4b11      	ldr	r3, [pc, #68]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 8008780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008782:	4a10      	ldr	r2, [pc, #64]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 8008784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008788:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800878a:	4b0e      	ldr	r3, [pc, #56]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 800878c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800878e:	4a0d      	ldr	r2, [pc, #52]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 8008790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008794:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008796:	4b0b      	ldr	r3, [pc, #44]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 8008798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800879a:	4a0a      	ldr	r2, [pc, #40]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 800879c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80087a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80087a2:	4b08      	ldr	r3, [pc, #32]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 80087a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a6:	4a07      	ldr	r2, [pc, #28]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 80087a8:	f043 0301 	orr.w	r3, r3, #1
 80087ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80087ae:	4b05      	ldr	r3, [pc, #20]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a04      	ldr	r2, [pc, #16]	; (80087c4 <HAL_RCC_OscConfig+0x76c>)
 80087b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80087b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087ba:	f7fa fa91 	bl	8002ce0 <HAL_GetTick>
 80087be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80087c0:	e011      	b.n	80087e6 <HAL_RCC_OscConfig+0x78e>
 80087c2:	bf00      	nop
 80087c4:	58024400 	.word	0x58024400
 80087c8:	58024800 	.word	0x58024800
 80087cc:	fffffc0c 	.word	0xfffffc0c
 80087d0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087d4:	f7fa fa84 	bl	8002ce0 <HAL_GetTick>
 80087d8:	4602      	mov	r2, r0
 80087da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087dc:	1ad3      	subs	r3, r2, r3
 80087de:	2b02      	cmp	r3, #2
 80087e0:	d901      	bls.n	80087e6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80087e2:	2303      	movs	r3, #3
 80087e4:	e08a      	b.n	80088fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80087e6:	4b47      	ldr	r3, [pc, #284]	; (8008904 <HAL_RCC_OscConfig+0x8ac>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d0f0      	beq.n	80087d4 <HAL_RCC_OscConfig+0x77c>
 80087f2:	e082      	b.n	80088fa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087f4:	4b43      	ldr	r3, [pc, #268]	; (8008904 <HAL_RCC_OscConfig+0x8ac>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a42      	ldr	r2, [pc, #264]	; (8008904 <HAL_RCC_OscConfig+0x8ac>)
 80087fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80087fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008800:	f7fa fa6e 	bl	8002ce0 <HAL_GetTick>
 8008804:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008806:	e008      	b.n	800881a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008808:	f7fa fa6a 	bl	8002ce0 <HAL_GetTick>
 800880c:	4602      	mov	r2, r0
 800880e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008810:	1ad3      	subs	r3, r2, r3
 8008812:	2b02      	cmp	r3, #2
 8008814:	d901      	bls.n	800881a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008816:	2303      	movs	r3, #3
 8008818:	e070      	b.n	80088fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800881a:	4b3a      	ldr	r3, [pc, #232]	; (8008904 <HAL_RCC_OscConfig+0x8ac>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008822:	2b00      	cmp	r3, #0
 8008824:	d1f0      	bne.n	8008808 <HAL_RCC_OscConfig+0x7b0>
 8008826:	e068      	b.n	80088fa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008828:	4b36      	ldr	r3, [pc, #216]	; (8008904 <HAL_RCC_OscConfig+0x8ac>)
 800882a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800882c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800882e:	4b35      	ldr	r3, [pc, #212]	; (8008904 <HAL_RCC_OscConfig+0x8ac>)
 8008830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008832:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008838:	2b01      	cmp	r3, #1
 800883a:	d031      	beq.n	80088a0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	f003 0203 	and.w	r2, r3, #3
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008846:	429a      	cmp	r2, r3
 8008848:	d12a      	bne.n	80088a0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	091b      	lsrs	r3, r3, #4
 800884e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008856:	429a      	cmp	r2, r3
 8008858:	d122      	bne.n	80088a0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008864:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008866:	429a      	cmp	r2, r3
 8008868:	d11a      	bne.n	80088a0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	0a5b      	lsrs	r3, r3, #9
 800886e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008876:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008878:	429a      	cmp	r2, r3
 800887a:	d111      	bne.n	80088a0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	0c1b      	lsrs	r3, r3, #16
 8008880:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008888:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800888a:	429a      	cmp	r2, r3
 800888c:	d108      	bne.n	80088a0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	0e1b      	lsrs	r3, r3, #24
 8008892:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800889a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800889c:	429a      	cmp	r2, r3
 800889e:	d001      	beq.n	80088a4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	e02b      	b.n	80088fc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80088a4:	4b17      	ldr	r3, [pc, #92]	; (8008904 <HAL_RCC_OscConfig+0x8ac>)
 80088a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088a8:	08db      	lsrs	r3, r3, #3
 80088aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80088ae:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088b4:	693a      	ldr	r2, [r7, #16]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d01f      	beq.n	80088fa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80088ba:	4b12      	ldr	r3, [pc, #72]	; (8008904 <HAL_RCC_OscConfig+0x8ac>)
 80088bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088be:	4a11      	ldr	r2, [pc, #68]	; (8008904 <HAL_RCC_OscConfig+0x8ac>)
 80088c0:	f023 0301 	bic.w	r3, r3, #1
 80088c4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80088c6:	f7fa fa0b 	bl	8002ce0 <HAL_GetTick>
 80088ca:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80088cc:	bf00      	nop
 80088ce:	f7fa fa07 	bl	8002ce0 <HAL_GetTick>
 80088d2:	4602      	mov	r2, r0
 80088d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d0f9      	beq.n	80088ce <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80088da:	4b0a      	ldr	r3, [pc, #40]	; (8008904 <HAL_RCC_OscConfig+0x8ac>)
 80088dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088de:	4b0a      	ldr	r3, [pc, #40]	; (8008908 <HAL_RCC_OscConfig+0x8b0>)
 80088e0:	4013      	ands	r3, r2
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80088e6:	00d2      	lsls	r2, r2, #3
 80088e8:	4906      	ldr	r1, [pc, #24]	; (8008904 <HAL_RCC_OscConfig+0x8ac>)
 80088ea:	4313      	orrs	r3, r2
 80088ec:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80088ee:	4b05      	ldr	r3, [pc, #20]	; (8008904 <HAL_RCC_OscConfig+0x8ac>)
 80088f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f2:	4a04      	ldr	r2, [pc, #16]	; (8008904 <HAL_RCC_OscConfig+0x8ac>)
 80088f4:	f043 0301 	orr.w	r3, r3, #1
 80088f8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80088fa:	2300      	movs	r3, #0
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3730      	adds	r7, #48	; 0x30
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}
 8008904:	58024400 	.word	0x58024400
 8008908:	ffff0007 	.word	0xffff0007

0800890c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b086      	sub	sp, #24
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d101      	bne.n	8008920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	e19c      	b.n	8008c5a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008920:	4b8a      	ldr	r3, [pc, #552]	; (8008b4c <HAL_RCC_ClockConfig+0x240>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 030f 	and.w	r3, r3, #15
 8008928:	683a      	ldr	r2, [r7, #0]
 800892a:	429a      	cmp	r2, r3
 800892c:	d910      	bls.n	8008950 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800892e:	4b87      	ldr	r3, [pc, #540]	; (8008b4c <HAL_RCC_ClockConfig+0x240>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f023 020f 	bic.w	r2, r3, #15
 8008936:	4985      	ldr	r1, [pc, #532]	; (8008b4c <HAL_RCC_ClockConfig+0x240>)
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	4313      	orrs	r3, r2
 800893c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800893e:	4b83      	ldr	r3, [pc, #524]	; (8008b4c <HAL_RCC_ClockConfig+0x240>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f003 030f 	and.w	r3, r3, #15
 8008946:	683a      	ldr	r2, [r7, #0]
 8008948:	429a      	cmp	r2, r3
 800894a:	d001      	beq.n	8008950 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800894c:	2301      	movs	r3, #1
 800894e:	e184      	b.n	8008c5a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f003 0304 	and.w	r3, r3, #4
 8008958:	2b00      	cmp	r3, #0
 800895a:	d010      	beq.n	800897e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	691a      	ldr	r2, [r3, #16]
 8008960:	4b7b      	ldr	r3, [pc, #492]	; (8008b50 <HAL_RCC_ClockConfig+0x244>)
 8008962:	699b      	ldr	r3, [r3, #24]
 8008964:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008968:	429a      	cmp	r2, r3
 800896a:	d908      	bls.n	800897e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800896c:	4b78      	ldr	r3, [pc, #480]	; (8008b50 <HAL_RCC_ClockConfig+0x244>)
 800896e:	699b      	ldr	r3, [r3, #24]
 8008970:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	691b      	ldr	r3, [r3, #16]
 8008978:	4975      	ldr	r1, [pc, #468]	; (8008b50 <HAL_RCC_ClockConfig+0x244>)
 800897a:	4313      	orrs	r3, r2
 800897c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f003 0308 	and.w	r3, r3, #8
 8008986:	2b00      	cmp	r3, #0
 8008988:	d010      	beq.n	80089ac <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	695a      	ldr	r2, [r3, #20]
 800898e:	4b70      	ldr	r3, [pc, #448]	; (8008b50 <HAL_RCC_ClockConfig+0x244>)
 8008990:	69db      	ldr	r3, [r3, #28]
 8008992:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008996:	429a      	cmp	r2, r3
 8008998:	d908      	bls.n	80089ac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800899a:	4b6d      	ldr	r3, [pc, #436]	; (8008b50 <HAL_RCC_ClockConfig+0x244>)
 800899c:	69db      	ldr	r3, [r3, #28]
 800899e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	695b      	ldr	r3, [r3, #20]
 80089a6:	496a      	ldr	r1, [pc, #424]	; (8008b50 <HAL_RCC_ClockConfig+0x244>)
 80089a8:	4313      	orrs	r3, r2
 80089aa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f003 0310 	and.w	r3, r3, #16
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d010      	beq.n	80089da <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	699a      	ldr	r2, [r3, #24]
 80089bc:	4b64      	ldr	r3, [pc, #400]	; (8008b50 <HAL_RCC_ClockConfig+0x244>)
 80089be:	69db      	ldr	r3, [r3, #28]
 80089c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d908      	bls.n	80089da <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80089c8:	4b61      	ldr	r3, [pc, #388]	; (8008b50 <HAL_RCC_ClockConfig+0x244>)
 80089ca:	69db      	ldr	r3, [r3, #28]
 80089cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	699b      	ldr	r3, [r3, #24]
 80089d4:	495e      	ldr	r1, [pc, #376]	; (8008b50 <HAL_RCC_ClockConfig+0x244>)
 80089d6:	4313      	orrs	r3, r2
 80089d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f003 0320 	and.w	r3, r3, #32
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d010      	beq.n	8008a08 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	69da      	ldr	r2, [r3, #28]
 80089ea:	4b59      	ldr	r3, [pc, #356]	; (8008b50 <HAL_RCC_ClockConfig+0x244>)
 80089ec:	6a1b      	ldr	r3, [r3, #32]
 80089ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d908      	bls.n	8008a08 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80089f6:	4b56      	ldr	r3, [pc, #344]	; (8008b50 <HAL_RCC_ClockConfig+0x244>)
 80089f8:	6a1b      	ldr	r3, [r3, #32]
 80089fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	69db      	ldr	r3, [r3, #28]
 8008a02:	4953      	ldr	r1, [pc, #332]	; (8008b50 <HAL_RCC_ClockConfig+0x244>)
 8008a04:	4313      	orrs	r3, r2
 8008a06:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f003 0302 	and.w	r3, r3, #2
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d010      	beq.n	8008a36 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	68da      	ldr	r2, [r3, #12]
 8008a18:	4b4d      	ldr	r3, [pc, #308]	; (8008b50 <HAL_RCC_ClockConfig+0x244>)
 8008a1a:	699b      	ldr	r3, [r3, #24]
 8008a1c:	f003 030f 	and.w	r3, r3, #15
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d908      	bls.n	8008a36 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a24:	4b4a      	ldr	r3, [pc, #296]	; (8008b50 <HAL_RCC_ClockConfig+0x244>)
 8008a26:	699b      	ldr	r3, [r3, #24]
 8008a28:	f023 020f 	bic.w	r2, r3, #15
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	4947      	ldr	r1, [pc, #284]	; (8008b50 <HAL_RCC_ClockConfig+0x244>)
 8008a32:	4313      	orrs	r3, r2
 8008a34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f003 0301 	and.w	r3, r3, #1
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d055      	beq.n	8008aee <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008a42:	4b43      	ldr	r3, [pc, #268]	; (8008b50 <HAL_RCC_ClockConfig+0x244>)
 8008a44:	699b      	ldr	r3, [r3, #24]
 8008a46:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	4940      	ldr	r1, [pc, #256]	; (8008b50 <HAL_RCC_ClockConfig+0x244>)
 8008a50:	4313      	orrs	r3, r2
 8008a52:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	2b02      	cmp	r3, #2
 8008a5a:	d107      	bne.n	8008a6c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008a5c:	4b3c      	ldr	r3, [pc, #240]	; (8008b50 <HAL_RCC_ClockConfig+0x244>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d121      	bne.n	8008aac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e0f6      	b.n	8008c5a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	2b03      	cmp	r3, #3
 8008a72:	d107      	bne.n	8008a84 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008a74:	4b36      	ldr	r3, [pc, #216]	; (8008b50 <HAL_RCC_ClockConfig+0x244>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d115      	bne.n	8008aac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008a80:	2301      	movs	r3, #1
 8008a82:	e0ea      	b.n	8008c5a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d107      	bne.n	8008a9c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008a8c:	4b30      	ldr	r3, [pc, #192]	; (8008b50 <HAL_RCC_ClockConfig+0x244>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d109      	bne.n	8008aac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	e0de      	b.n	8008c5a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a9c:	4b2c      	ldr	r3, [pc, #176]	; (8008b50 <HAL_RCC_ClockConfig+0x244>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f003 0304 	and.w	r3, r3, #4
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d101      	bne.n	8008aac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e0d6      	b.n	8008c5a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008aac:	4b28      	ldr	r3, [pc, #160]	; (8008b50 <HAL_RCC_ClockConfig+0x244>)
 8008aae:	691b      	ldr	r3, [r3, #16]
 8008ab0:	f023 0207 	bic.w	r2, r3, #7
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	4925      	ldr	r1, [pc, #148]	; (8008b50 <HAL_RCC_ClockConfig+0x244>)
 8008aba:	4313      	orrs	r3, r2
 8008abc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008abe:	f7fa f90f 	bl	8002ce0 <HAL_GetTick>
 8008ac2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ac4:	e00a      	b.n	8008adc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ac6:	f7fa f90b 	bl	8002ce0 <HAL_GetTick>
 8008aca:	4602      	mov	r2, r0
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	1ad3      	subs	r3, r2, r3
 8008ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d901      	bls.n	8008adc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008ad8:	2303      	movs	r3, #3
 8008ada:	e0be      	b.n	8008c5a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008adc:	4b1c      	ldr	r3, [pc, #112]	; (8008b50 <HAL_RCC_ClockConfig+0x244>)
 8008ade:	691b      	ldr	r3, [r3, #16]
 8008ae0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	00db      	lsls	r3, r3, #3
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d1eb      	bne.n	8008ac6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f003 0302 	and.w	r3, r3, #2
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d010      	beq.n	8008b1c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	68da      	ldr	r2, [r3, #12]
 8008afe:	4b14      	ldr	r3, [pc, #80]	; (8008b50 <HAL_RCC_ClockConfig+0x244>)
 8008b00:	699b      	ldr	r3, [r3, #24]
 8008b02:	f003 030f 	and.w	r3, r3, #15
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d208      	bcs.n	8008b1c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b0a:	4b11      	ldr	r3, [pc, #68]	; (8008b50 <HAL_RCC_ClockConfig+0x244>)
 8008b0c:	699b      	ldr	r3, [r3, #24]
 8008b0e:	f023 020f 	bic.w	r2, r3, #15
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	490e      	ldr	r1, [pc, #56]	; (8008b50 <HAL_RCC_ClockConfig+0x244>)
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008b1c:	4b0b      	ldr	r3, [pc, #44]	; (8008b4c <HAL_RCC_ClockConfig+0x240>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f003 030f 	and.w	r3, r3, #15
 8008b24:	683a      	ldr	r2, [r7, #0]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d214      	bcs.n	8008b54 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b2a:	4b08      	ldr	r3, [pc, #32]	; (8008b4c <HAL_RCC_ClockConfig+0x240>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f023 020f 	bic.w	r2, r3, #15
 8008b32:	4906      	ldr	r1, [pc, #24]	; (8008b4c <HAL_RCC_ClockConfig+0x240>)
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b3a:	4b04      	ldr	r3, [pc, #16]	; (8008b4c <HAL_RCC_ClockConfig+0x240>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f003 030f 	and.w	r3, r3, #15
 8008b42:	683a      	ldr	r2, [r7, #0]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d005      	beq.n	8008b54 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	e086      	b.n	8008c5a <HAL_RCC_ClockConfig+0x34e>
 8008b4c:	52002000 	.word	0x52002000
 8008b50:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f003 0304 	and.w	r3, r3, #4
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d010      	beq.n	8008b82 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	691a      	ldr	r2, [r3, #16]
 8008b64:	4b3f      	ldr	r3, [pc, #252]	; (8008c64 <HAL_RCC_ClockConfig+0x358>)
 8008b66:	699b      	ldr	r3, [r3, #24]
 8008b68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d208      	bcs.n	8008b82 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008b70:	4b3c      	ldr	r3, [pc, #240]	; (8008c64 <HAL_RCC_ClockConfig+0x358>)
 8008b72:	699b      	ldr	r3, [r3, #24]
 8008b74:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	691b      	ldr	r3, [r3, #16]
 8008b7c:	4939      	ldr	r1, [pc, #228]	; (8008c64 <HAL_RCC_ClockConfig+0x358>)
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f003 0308 	and.w	r3, r3, #8
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d010      	beq.n	8008bb0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	695a      	ldr	r2, [r3, #20]
 8008b92:	4b34      	ldr	r3, [pc, #208]	; (8008c64 <HAL_RCC_ClockConfig+0x358>)
 8008b94:	69db      	ldr	r3, [r3, #28]
 8008b96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d208      	bcs.n	8008bb0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008b9e:	4b31      	ldr	r3, [pc, #196]	; (8008c64 <HAL_RCC_ClockConfig+0x358>)
 8008ba0:	69db      	ldr	r3, [r3, #28]
 8008ba2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	695b      	ldr	r3, [r3, #20]
 8008baa:	492e      	ldr	r1, [pc, #184]	; (8008c64 <HAL_RCC_ClockConfig+0x358>)
 8008bac:	4313      	orrs	r3, r2
 8008bae:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f003 0310 	and.w	r3, r3, #16
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d010      	beq.n	8008bde <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	699a      	ldr	r2, [r3, #24]
 8008bc0:	4b28      	ldr	r3, [pc, #160]	; (8008c64 <HAL_RCC_ClockConfig+0x358>)
 8008bc2:	69db      	ldr	r3, [r3, #28]
 8008bc4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d208      	bcs.n	8008bde <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008bcc:	4b25      	ldr	r3, [pc, #148]	; (8008c64 <HAL_RCC_ClockConfig+0x358>)
 8008bce:	69db      	ldr	r3, [r3, #28]
 8008bd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	699b      	ldr	r3, [r3, #24]
 8008bd8:	4922      	ldr	r1, [pc, #136]	; (8008c64 <HAL_RCC_ClockConfig+0x358>)
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f003 0320 	and.w	r3, r3, #32
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d010      	beq.n	8008c0c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	69da      	ldr	r2, [r3, #28]
 8008bee:	4b1d      	ldr	r3, [pc, #116]	; (8008c64 <HAL_RCC_ClockConfig+0x358>)
 8008bf0:	6a1b      	ldr	r3, [r3, #32]
 8008bf2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d208      	bcs.n	8008c0c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008bfa:	4b1a      	ldr	r3, [pc, #104]	; (8008c64 <HAL_RCC_ClockConfig+0x358>)
 8008bfc:	6a1b      	ldr	r3, [r3, #32]
 8008bfe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	69db      	ldr	r3, [r3, #28]
 8008c06:	4917      	ldr	r1, [pc, #92]	; (8008c64 <HAL_RCC_ClockConfig+0x358>)
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008c0c:	f000 f834 	bl	8008c78 <HAL_RCC_GetSysClockFreq>
 8008c10:	4602      	mov	r2, r0
 8008c12:	4b14      	ldr	r3, [pc, #80]	; (8008c64 <HAL_RCC_ClockConfig+0x358>)
 8008c14:	699b      	ldr	r3, [r3, #24]
 8008c16:	0a1b      	lsrs	r3, r3, #8
 8008c18:	f003 030f 	and.w	r3, r3, #15
 8008c1c:	4912      	ldr	r1, [pc, #72]	; (8008c68 <HAL_RCC_ClockConfig+0x35c>)
 8008c1e:	5ccb      	ldrb	r3, [r1, r3]
 8008c20:	f003 031f 	and.w	r3, r3, #31
 8008c24:	fa22 f303 	lsr.w	r3, r2, r3
 8008c28:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c2a:	4b0e      	ldr	r3, [pc, #56]	; (8008c64 <HAL_RCC_ClockConfig+0x358>)
 8008c2c:	699b      	ldr	r3, [r3, #24]
 8008c2e:	f003 030f 	and.w	r3, r3, #15
 8008c32:	4a0d      	ldr	r2, [pc, #52]	; (8008c68 <HAL_RCC_ClockConfig+0x35c>)
 8008c34:	5cd3      	ldrb	r3, [r2, r3]
 8008c36:	f003 031f 	and.w	r3, r3, #31
 8008c3a:	693a      	ldr	r2, [r7, #16]
 8008c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8008c40:	4a0a      	ldr	r2, [pc, #40]	; (8008c6c <HAL_RCC_ClockConfig+0x360>)
 8008c42:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008c44:	4a0a      	ldr	r2, [pc, #40]	; (8008c70 <HAL_RCC_ClockConfig+0x364>)
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008c4a:	4b0a      	ldr	r3, [pc, #40]	; (8008c74 <HAL_RCC_ClockConfig+0x368>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7f9 fffc 	bl	8002c4c <HAL_InitTick>
 8008c54:	4603      	mov	r3, r0
 8008c56:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3718      	adds	r7, #24
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	58024400 	.word	0x58024400
 8008c68:	08012a78 	.word	0x08012a78
 8008c6c:	24000008 	.word	0x24000008
 8008c70:	24000004 	.word	0x24000004
 8008c74:	2400000c 	.word	0x2400000c

08008c78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b089      	sub	sp, #36	; 0x24
 8008c7c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c7e:	4bb3      	ldr	r3, [pc, #716]	; (8008f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c80:	691b      	ldr	r3, [r3, #16]
 8008c82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c86:	2b18      	cmp	r3, #24
 8008c88:	f200 8155 	bhi.w	8008f36 <HAL_RCC_GetSysClockFreq+0x2be>
 8008c8c:	a201      	add	r2, pc, #4	; (adr r2, 8008c94 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c92:	bf00      	nop
 8008c94:	08008cf9 	.word	0x08008cf9
 8008c98:	08008f37 	.word	0x08008f37
 8008c9c:	08008f37 	.word	0x08008f37
 8008ca0:	08008f37 	.word	0x08008f37
 8008ca4:	08008f37 	.word	0x08008f37
 8008ca8:	08008f37 	.word	0x08008f37
 8008cac:	08008f37 	.word	0x08008f37
 8008cb0:	08008f37 	.word	0x08008f37
 8008cb4:	08008d1f 	.word	0x08008d1f
 8008cb8:	08008f37 	.word	0x08008f37
 8008cbc:	08008f37 	.word	0x08008f37
 8008cc0:	08008f37 	.word	0x08008f37
 8008cc4:	08008f37 	.word	0x08008f37
 8008cc8:	08008f37 	.word	0x08008f37
 8008ccc:	08008f37 	.word	0x08008f37
 8008cd0:	08008f37 	.word	0x08008f37
 8008cd4:	08008d25 	.word	0x08008d25
 8008cd8:	08008f37 	.word	0x08008f37
 8008cdc:	08008f37 	.word	0x08008f37
 8008ce0:	08008f37 	.word	0x08008f37
 8008ce4:	08008f37 	.word	0x08008f37
 8008ce8:	08008f37 	.word	0x08008f37
 8008cec:	08008f37 	.word	0x08008f37
 8008cf0:	08008f37 	.word	0x08008f37
 8008cf4:	08008d2b 	.word	0x08008d2b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cf8:	4b94      	ldr	r3, [pc, #592]	; (8008f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f003 0320 	and.w	r3, r3, #32
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d009      	beq.n	8008d18 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d04:	4b91      	ldr	r3, [pc, #580]	; (8008f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	08db      	lsrs	r3, r3, #3
 8008d0a:	f003 0303 	and.w	r3, r3, #3
 8008d0e:	4a90      	ldr	r2, [pc, #576]	; (8008f50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008d10:	fa22 f303 	lsr.w	r3, r2, r3
 8008d14:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008d16:	e111      	b.n	8008f3c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008d18:	4b8d      	ldr	r3, [pc, #564]	; (8008f50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008d1a:	61bb      	str	r3, [r7, #24]
      break;
 8008d1c:	e10e      	b.n	8008f3c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008d1e:	4b8d      	ldr	r3, [pc, #564]	; (8008f54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008d20:	61bb      	str	r3, [r7, #24]
      break;
 8008d22:	e10b      	b.n	8008f3c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008d24:	4b8c      	ldr	r3, [pc, #560]	; (8008f58 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008d26:	61bb      	str	r3, [r7, #24]
      break;
 8008d28:	e108      	b.n	8008f3c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d2a:	4b88      	ldr	r3, [pc, #544]	; (8008f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d2e:	f003 0303 	and.w	r3, r3, #3
 8008d32:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008d34:	4b85      	ldr	r3, [pc, #532]	; (8008f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d38:	091b      	lsrs	r3, r3, #4
 8008d3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d3e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008d40:	4b82      	ldr	r3, [pc, #520]	; (8008f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d44:	f003 0301 	and.w	r3, r3, #1
 8008d48:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008d4a:	4b80      	ldr	r3, [pc, #512]	; (8008f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d4e:	08db      	lsrs	r3, r3, #3
 8008d50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d54:	68fa      	ldr	r2, [r7, #12]
 8008d56:	fb02 f303 	mul.w	r3, r2, r3
 8008d5a:	ee07 3a90 	vmov	s15, r3
 8008d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d62:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	f000 80e1 	beq.w	8008f30 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	2b02      	cmp	r3, #2
 8008d72:	f000 8083 	beq.w	8008e7c <HAL_RCC_GetSysClockFreq+0x204>
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	2b02      	cmp	r3, #2
 8008d7a:	f200 80a1 	bhi.w	8008ec0 <HAL_RCC_GetSysClockFreq+0x248>
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d003      	beq.n	8008d8c <HAL_RCC_GetSysClockFreq+0x114>
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d056      	beq.n	8008e38 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008d8a:	e099      	b.n	8008ec0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d8c:	4b6f      	ldr	r3, [pc, #444]	; (8008f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 0320 	and.w	r3, r3, #32
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d02d      	beq.n	8008df4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d98:	4b6c      	ldr	r3, [pc, #432]	; (8008f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	08db      	lsrs	r3, r3, #3
 8008d9e:	f003 0303 	and.w	r3, r3, #3
 8008da2:	4a6b      	ldr	r2, [pc, #428]	; (8008f50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008da4:	fa22 f303 	lsr.w	r3, r2, r3
 8008da8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	ee07 3a90 	vmov	s15, r3
 8008db0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	ee07 3a90 	vmov	s15, r3
 8008dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dc2:	4b62      	ldr	r3, [pc, #392]	; (8008f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dca:	ee07 3a90 	vmov	s15, r3
 8008dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008dd6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008f5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008de2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dee:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008df2:	e087      	b.n	8008f04 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	ee07 3a90 	vmov	s15, r3
 8008dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dfe:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008f60 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e06:	4b51      	ldr	r3, [pc, #324]	; (8008f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e0e:	ee07 3a90 	vmov	s15, r3
 8008e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e16:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e1a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008f5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008e36:	e065      	b.n	8008f04 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	ee07 3a90 	vmov	s15, r3
 8008e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e42:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008f64 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e4a:	4b40      	ldr	r3, [pc, #256]	; (8008f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e52:	ee07 3a90 	vmov	s15, r3
 8008e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e5e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008f5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008e7a:	e043      	b.n	8008f04 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	ee07 3a90 	vmov	s15, r3
 8008e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e86:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008f68 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e8e:	4b2f      	ldr	r3, [pc, #188]	; (8008f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e96:	ee07 3a90 	vmov	s15, r3
 8008e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ea2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008f5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008eae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008ebe:	e021      	b.n	8008f04 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	ee07 3a90 	vmov	s15, r3
 8008ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eca:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008f64 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ed2:	4b1e      	ldr	r3, [pc, #120]	; (8008f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eda:	ee07 3a90 	vmov	s15, r3
 8008ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ee2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ee6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008f5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008efe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008f02:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008f04:	4b11      	ldr	r3, [pc, #68]	; (8008f4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f08:	0a5b      	lsrs	r3, r3, #9
 8008f0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f0e:	3301      	adds	r3, #1
 8008f10:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	ee07 3a90 	vmov	s15, r3
 8008f18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008f1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f28:	ee17 3a90 	vmov	r3, s15
 8008f2c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008f2e:	e005      	b.n	8008f3c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008f30:	2300      	movs	r3, #0
 8008f32:	61bb      	str	r3, [r7, #24]
      break;
 8008f34:	e002      	b.n	8008f3c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008f36:	4b07      	ldr	r3, [pc, #28]	; (8008f54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008f38:	61bb      	str	r3, [r7, #24]
      break;
 8008f3a:	bf00      	nop
  }

  return sysclockfreq;
 8008f3c:	69bb      	ldr	r3, [r7, #24]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3724      	adds	r7, #36	; 0x24
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr
 8008f4a:	bf00      	nop
 8008f4c:	58024400 	.word	0x58024400
 8008f50:	03d09000 	.word	0x03d09000
 8008f54:	003d0900 	.word	0x003d0900
 8008f58:	017d7840 	.word	0x017d7840
 8008f5c:	46000000 	.word	0x46000000
 8008f60:	4c742400 	.word	0x4c742400
 8008f64:	4a742400 	.word	0x4a742400
 8008f68:	4bbebc20 	.word	0x4bbebc20

08008f6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008f72:	f7ff fe81 	bl	8008c78 <HAL_RCC_GetSysClockFreq>
 8008f76:	4602      	mov	r2, r0
 8008f78:	4b10      	ldr	r3, [pc, #64]	; (8008fbc <HAL_RCC_GetHCLKFreq+0x50>)
 8008f7a:	699b      	ldr	r3, [r3, #24]
 8008f7c:	0a1b      	lsrs	r3, r3, #8
 8008f7e:	f003 030f 	and.w	r3, r3, #15
 8008f82:	490f      	ldr	r1, [pc, #60]	; (8008fc0 <HAL_RCC_GetHCLKFreq+0x54>)
 8008f84:	5ccb      	ldrb	r3, [r1, r3]
 8008f86:	f003 031f 	and.w	r3, r3, #31
 8008f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f8e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f90:	4b0a      	ldr	r3, [pc, #40]	; (8008fbc <HAL_RCC_GetHCLKFreq+0x50>)
 8008f92:	699b      	ldr	r3, [r3, #24]
 8008f94:	f003 030f 	and.w	r3, r3, #15
 8008f98:	4a09      	ldr	r2, [pc, #36]	; (8008fc0 <HAL_RCC_GetHCLKFreq+0x54>)
 8008f9a:	5cd3      	ldrb	r3, [r2, r3]
 8008f9c:	f003 031f 	and.w	r3, r3, #31
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8008fa6:	4a07      	ldr	r2, [pc, #28]	; (8008fc4 <HAL_RCC_GetHCLKFreq+0x58>)
 8008fa8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008faa:	4a07      	ldr	r2, [pc, #28]	; (8008fc8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008fb0:	4b04      	ldr	r3, [pc, #16]	; (8008fc4 <HAL_RCC_GetHCLKFreq+0x58>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3708      	adds	r7, #8
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	58024400 	.word	0x58024400
 8008fc0:	08012a78 	.word	0x08012a78
 8008fc4:	24000008 	.word	0x24000008
 8008fc8:	24000004 	.word	0x24000004

08008fcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008fd0:	f7ff ffcc 	bl	8008f6c <HAL_RCC_GetHCLKFreq>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	4b06      	ldr	r3, [pc, #24]	; (8008ff0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008fd8:	69db      	ldr	r3, [r3, #28]
 8008fda:	091b      	lsrs	r3, r3, #4
 8008fdc:	f003 0307 	and.w	r3, r3, #7
 8008fe0:	4904      	ldr	r1, [pc, #16]	; (8008ff4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008fe2:	5ccb      	ldrb	r3, [r1, r3]
 8008fe4:	f003 031f 	and.w	r3, r3, #31
 8008fe8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	58024400 	.word	0x58024400
 8008ff4:	08012a78 	.word	0x08012a78

08008ff8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008ffc:	f7ff ffb6 	bl	8008f6c <HAL_RCC_GetHCLKFreq>
 8009000:	4602      	mov	r2, r0
 8009002:	4b06      	ldr	r3, [pc, #24]	; (800901c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009004:	69db      	ldr	r3, [r3, #28]
 8009006:	0a1b      	lsrs	r3, r3, #8
 8009008:	f003 0307 	and.w	r3, r3, #7
 800900c:	4904      	ldr	r1, [pc, #16]	; (8009020 <HAL_RCC_GetPCLK2Freq+0x28>)
 800900e:	5ccb      	ldrb	r3, [r1, r3]
 8009010:	f003 031f 	and.w	r3, r3, #31
 8009014:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009018:	4618      	mov	r0, r3
 800901a:	bd80      	pop	{r7, pc}
 800901c:	58024400 	.word	0x58024400
 8009020:	08012a78 	.word	0x08012a78

08009024 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009024:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009028:	b0ca      	sub	sp, #296	; 0x128
 800902a:	af00      	add	r7, sp, #0
 800902c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009030:	2300      	movs	r3, #0
 8009032:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009036:	2300      	movs	r3, #0
 8009038:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800903c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009044:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009048:	2500      	movs	r5, #0
 800904a:	ea54 0305 	orrs.w	r3, r4, r5
 800904e:	d049      	beq.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009050:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009054:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009056:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800905a:	d02f      	beq.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800905c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009060:	d828      	bhi.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009062:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009066:	d01a      	beq.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009068:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800906c:	d822      	bhi.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800906e:	2b00      	cmp	r3, #0
 8009070:	d003      	beq.n	800907a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009072:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009076:	d007      	beq.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009078:	e01c      	b.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800907a:	4bb8      	ldr	r3, [pc, #736]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800907c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800907e:	4ab7      	ldr	r2, [pc, #732]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009084:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009086:	e01a      	b.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009088:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800908c:	3308      	adds	r3, #8
 800908e:	2102      	movs	r1, #2
 8009090:	4618      	mov	r0, r3
 8009092:	f002 fb61 	bl	800b758 <RCCEx_PLL2_Config>
 8009096:	4603      	mov	r3, r0
 8009098:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800909c:	e00f      	b.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800909e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090a2:	3328      	adds	r3, #40	; 0x28
 80090a4:	2102      	movs	r1, #2
 80090a6:	4618      	mov	r0, r3
 80090a8:	f002 fc08 	bl	800b8bc <RCCEx_PLL3_Config>
 80090ac:	4603      	mov	r3, r0
 80090ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80090b2:	e004      	b.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090b4:	2301      	movs	r3, #1
 80090b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80090ba:	e000      	b.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80090bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d10a      	bne.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80090c6:	4ba5      	ldr	r3, [pc, #660]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090ca:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80090ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090d4:	4aa1      	ldr	r2, [pc, #644]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090d6:	430b      	orrs	r3, r1
 80090d8:	6513      	str	r3, [r2, #80]	; 0x50
 80090da:	e003      	b.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80090e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ec:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80090f0:	f04f 0900 	mov.w	r9, #0
 80090f4:	ea58 0309 	orrs.w	r3, r8, r9
 80090f8:	d047      	beq.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80090fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009100:	2b04      	cmp	r3, #4
 8009102:	d82a      	bhi.n	800915a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009104:	a201      	add	r2, pc, #4	; (adr r2, 800910c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800910a:	bf00      	nop
 800910c:	08009121 	.word	0x08009121
 8009110:	0800912f 	.word	0x0800912f
 8009114:	08009145 	.word	0x08009145
 8009118:	08009163 	.word	0x08009163
 800911c:	08009163 	.word	0x08009163
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009120:	4b8e      	ldr	r3, [pc, #568]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009124:	4a8d      	ldr	r2, [pc, #564]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009126:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800912a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800912c:	e01a      	b.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800912e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009132:	3308      	adds	r3, #8
 8009134:	2100      	movs	r1, #0
 8009136:	4618      	mov	r0, r3
 8009138:	f002 fb0e 	bl	800b758 <RCCEx_PLL2_Config>
 800913c:	4603      	mov	r3, r0
 800913e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009142:	e00f      	b.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009148:	3328      	adds	r3, #40	; 0x28
 800914a:	2100      	movs	r1, #0
 800914c:	4618      	mov	r0, r3
 800914e:	f002 fbb5 	bl	800b8bc <RCCEx_PLL3_Config>
 8009152:	4603      	mov	r3, r0
 8009154:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009158:	e004      	b.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009160:	e000      	b.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009162:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009164:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009168:	2b00      	cmp	r3, #0
 800916a:	d10a      	bne.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800916c:	4b7b      	ldr	r3, [pc, #492]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800916e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009170:	f023 0107 	bic.w	r1, r3, #7
 8009174:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800917a:	4a78      	ldr	r2, [pc, #480]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800917c:	430b      	orrs	r3, r1
 800917e:	6513      	str	r3, [r2, #80]	; 0x50
 8009180:	e003      	b.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009182:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009186:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800918a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800918e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009192:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8009196:	f04f 0b00 	mov.w	fp, #0
 800919a:	ea5a 030b 	orrs.w	r3, sl, fp
 800919e:	d04c      	beq.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80091a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091aa:	d030      	beq.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80091ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091b0:	d829      	bhi.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80091b2:	2bc0      	cmp	r3, #192	; 0xc0
 80091b4:	d02d      	beq.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80091b6:	2bc0      	cmp	r3, #192	; 0xc0
 80091b8:	d825      	bhi.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80091ba:	2b80      	cmp	r3, #128	; 0x80
 80091bc:	d018      	beq.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80091be:	2b80      	cmp	r3, #128	; 0x80
 80091c0:	d821      	bhi.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d002      	beq.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80091c6:	2b40      	cmp	r3, #64	; 0x40
 80091c8:	d007      	beq.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80091ca:	e01c      	b.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091cc:	4b63      	ldr	r3, [pc, #396]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80091ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d0:	4a62      	ldr	r2, [pc, #392]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80091d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80091d8:	e01c      	b.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80091da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091de:	3308      	adds	r3, #8
 80091e0:	2100      	movs	r1, #0
 80091e2:	4618      	mov	r0, r3
 80091e4:	f002 fab8 	bl	800b758 <RCCEx_PLL2_Config>
 80091e8:	4603      	mov	r3, r0
 80091ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80091ee:	e011      	b.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80091f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091f4:	3328      	adds	r3, #40	; 0x28
 80091f6:	2100      	movs	r1, #0
 80091f8:	4618      	mov	r0, r3
 80091fa:	f002 fb5f 	bl	800b8bc <RCCEx_PLL3_Config>
 80091fe:	4603      	mov	r3, r0
 8009200:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009204:	e006      	b.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009206:	2301      	movs	r3, #1
 8009208:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800920c:	e002      	b.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800920e:	bf00      	nop
 8009210:	e000      	b.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009212:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009214:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009218:	2b00      	cmp	r3, #0
 800921a:	d10a      	bne.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800921c:	4b4f      	ldr	r3, [pc, #316]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800921e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009220:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8009224:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800922a:	4a4c      	ldr	r2, [pc, #304]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800922c:	430b      	orrs	r3, r1
 800922e:	6513      	str	r3, [r2, #80]	; 0x50
 8009230:	e003      	b.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009232:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009236:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800923a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800923e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009242:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8009246:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800924a:	2300      	movs	r3, #0
 800924c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009250:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8009254:	460b      	mov	r3, r1
 8009256:	4313      	orrs	r3, r2
 8009258:	d053      	beq.n	8009302 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800925a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800925e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009262:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009266:	d035      	beq.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009268:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800926c:	d82e      	bhi.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800926e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009272:	d031      	beq.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009274:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009278:	d828      	bhi.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800927a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800927e:	d01a      	beq.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009280:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009284:	d822      	bhi.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009286:	2b00      	cmp	r3, #0
 8009288:	d003      	beq.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800928a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800928e:	d007      	beq.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009290:	e01c      	b.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009292:	4b32      	ldr	r3, [pc, #200]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009296:	4a31      	ldr	r2, [pc, #196]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800929c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800929e:	e01c      	b.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80092a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092a4:	3308      	adds	r3, #8
 80092a6:	2100      	movs	r1, #0
 80092a8:	4618      	mov	r0, r3
 80092aa:	f002 fa55 	bl	800b758 <RCCEx_PLL2_Config>
 80092ae:	4603      	mov	r3, r0
 80092b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80092b4:	e011      	b.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80092b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092ba:	3328      	adds	r3, #40	; 0x28
 80092bc:	2100      	movs	r1, #0
 80092be:	4618      	mov	r0, r3
 80092c0:	f002 fafc 	bl	800b8bc <RCCEx_PLL3_Config>
 80092c4:	4603      	mov	r3, r0
 80092c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80092ca:	e006      	b.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80092cc:	2301      	movs	r3, #1
 80092ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80092d2:	e002      	b.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80092d4:	bf00      	nop
 80092d6:	e000      	b.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80092d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d10b      	bne.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80092e2:	4b1e      	ldr	r3, [pc, #120]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80092e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092e6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80092ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80092f2:	4a1a      	ldr	r2, [pc, #104]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80092f4:	430b      	orrs	r3, r1
 80092f6:	6593      	str	r3, [r2, #88]	; 0x58
 80092f8:	e003      	b.n	8009302 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009302:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800930e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009312:	2300      	movs	r3, #0
 8009314:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009318:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800931c:	460b      	mov	r3, r1
 800931e:	4313      	orrs	r3, r2
 8009320:	d056      	beq.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009322:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009326:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800932a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800932e:	d038      	beq.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009330:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009334:	d831      	bhi.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009336:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800933a:	d034      	beq.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800933c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009340:	d82b      	bhi.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009342:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009346:	d01d      	beq.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009348:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800934c:	d825      	bhi.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800934e:	2b00      	cmp	r3, #0
 8009350:	d006      	beq.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009352:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009356:	d00a      	beq.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009358:	e01f      	b.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800935a:	bf00      	nop
 800935c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009360:	4ba2      	ldr	r3, [pc, #648]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009364:	4aa1      	ldr	r2, [pc, #644]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009366:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800936a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800936c:	e01c      	b.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800936e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009372:	3308      	adds	r3, #8
 8009374:	2100      	movs	r1, #0
 8009376:	4618      	mov	r0, r3
 8009378:	f002 f9ee 	bl	800b758 <RCCEx_PLL2_Config>
 800937c:	4603      	mov	r3, r0
 800937e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009382:	e011      	b.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009388:	3328      	adds	r3, #40	; 0x28
 800938a:	2100      	movs	r1, #0
 800938c:	4618      	mov	r0, r3
 800938e:	f002 fa95 	bl	800b8bc <RCCEx_PLL3_Config>
 8009392:	4603      	mov	r3, r0
 8009394:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009398:	e006      	b.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80093a0:	e002      	b.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80093a2:	bf00      	nop
 80093a4:	e000      	b.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80093a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d10b      	bne.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80093b0:	4b8e      	ldr	r3, [pc, #568]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093b4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80093b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80093c0:	4a8a      	ldr	r2, [pc, #552]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093c2:	430b      	orrs	r3, r1
 80093c4:	6593      	str	r3, [r2, #88]	; 0x58
 80093c6:	e003      	b.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80093d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80093dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80093e0:	2300      	movs	r3, #0
 80093e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80093e6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80093ea:	460b      	mov	r3, r1
 80093ec:	4313      	orrs	r3, r2
 80093ee:	d03a      	beq.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80093f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093f6:	2b30      	cmp	r3, #48	; 0x30
 80093f8:	d01f      	beq.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80093fa:	2b30      	cmp	r3, #48	; 0x30
 80093fc:	d819      	bhi.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80093fe:	2b20      	cmp	r3, #32
 8009400:	d00c      	beq.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009402:	2b20      	cmp	r3, #32
 8009404:	d815      	bhi.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009406:	2b00      	cmp	r3, #0
 8009408:	d019      	beq.n	800943e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800940a:	2b10      	cmp	r3, #16
 800940c:	d111      	bne.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800940e:	4b77      	ldr	r3, [pc, #476]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009412:	4a76      	ldr	r2, [pc, #472]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009418:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800941a:	e011      	b.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800941c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009420:	3308      	adds	r3, #8
 8009422:	2102      	movs	r1, #2
 8009424:	4618      	mov	r0, r3
 8009426:	f002 f997 	bl	800b758 <RCCEx_PLL2_Config>
 800942a:	4603      	mov	r3, r0
 800942c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009430:	e006      	b.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009432:	2301      	movs	r3, #1
 8009434:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009438:	e002      	b.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800943a:	bf00      	nop
 800943c:	e000      	b.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800943e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009440:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009444:	2b00      	cmp	r3, #0
 8009446:	d10a      	bne.n	800945e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009448:	4b68      	ldr	r3, [pc, #416]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800944a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800944c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009456:	4a65      	ldr	r2, [pc, #404]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009458:	430b      	orrs	r3, r1
 800945a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800945c:	e003      	b.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800945e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009462:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009466:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800946a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800946e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009472:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009476:	2300      	movs	r3, #0
 8009478:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800947c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009480:	460b      	mov	r3, r1
 8009482:	4313      	orrs	r3, r2
 8009484:	d051      	beq.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800948a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800948c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009490:	d035      	beq.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009492:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009496:	d82e      	bhi.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009498:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800949c:	d031      	beq.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800949e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80094a2:	d828      	bhi.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80094a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094a8:	d01a      	beq.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80094aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094ae:	d822      	bhi.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d003      	beq.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80094b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094b8:	d007      	beq.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80094ba:	e01c      	b.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094bc:	4b4b      	ldr	r3, [pc, #300]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80094be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c0:	4a4a      	ldr	r2, [pc, #296]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80094c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80094c8:	e01c      	b.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80094ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094ce:	3308      	adds	r3, #8
 80094d0:	2100      	movs	r1, #0
 80094d2:	4618      	mov	r0, r3
 80094d4:	f002 f940 	bl	800b758 <RCCEx_PLL2_Config>
 80094d8:	4603      	mov	r3, r0
 80094da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80094de:	e011      	b.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80094e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094e4:	3328      	adds	r3, #40	; 0x28
 80094e6:	2100      	movs	r1, #0
 80094e8:	4618      	mov	r0, r3
 80094ea:	f002 f9e7 	bl	800b8bc <RCCEx_PLL3_Config>
 80094ee:	4603      	mov	r3, r0
 80094f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80094f4:	e006      	b.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094f6:	2301      	movs	r3, #1
 80094f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80094fc:	e002      	b.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80094fe:	bf00      	nop
 8009500:	e000      	b.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009502:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009504:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009508:	2b00      	cmp	r3, #0
 800950a:	d10a      	bne.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800950c:	4b37      	ldr	r3, [pc, #220]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800950e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009510:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009514:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800951a:	4a34      	ldr	r2, [pc, #208]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800951c:	430b      	orrs	r3, r1
 800951e:	6513      	str	r3, [r2, #80]	; 0x50
 8009520:	e003      	b.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009522:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009526:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800952a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800952e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009532:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009536:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800953a:	2300      	movs	r3, #0
 800953c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009540:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009544:	460b      	mov	r3, r1
 8009546:	4313      	orrs	r3, r2
 8009548:	d056      	beq.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800954a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800954e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009550:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009554:	d033      	beq.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009556:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800955a:	d82c      	bhi.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800955c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009560:	d02f      	beq.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009562:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009566:	d826      	bhi.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009568:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800956c:	d02b      	beq.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800956e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009572:	d820      	bhi.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009574:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009578:	d012      	beq.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800957a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800957e:	d81a      	bhi.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009580:	2b00      	cmp	r3, #0
 8009582:	d022      	beq.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009588:	d115      	bne.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800958a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800958e:	3308      	adds	r3, #8
 8009590:	2101      	movs	r1, #1
 8009592:	4618      	mov	r0, r3
 8009594:	f002 f8e0 	bl	800b758 <RCCEx_PLL2_Config>
 8009598:	4603      	mov	r3, r0
 800959a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800959e:	e015      	b.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80095a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095a4:	3328      	adds	r3, #40	; 0x28
 80095a6:	2101      	movs	r1, #1
 80095a8:	4618      	mov	r0, r3
 80095aa:	f002 f987 	bl	800b8bc <RCCEx_PLL3_Config>
 80095ae:	4603      	mov	r3, r0
 80095b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80095b4:	e00a      	b.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095b6:	2301      	movs	r3, #1
 80095b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80095bc:	e006      	b.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80095be:	bf00      	nop
 80095c0:	e004      	b.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80095c2:	bf00      	nop
 80095c4:	e002      	b.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80095c6:	bf00      	nop
 80095c8:	e000      	b.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80095ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d10d      	bne.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80095d4:	4b05      	ldr	r3, [pc, #20]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80095d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095d8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80095dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095e2:	4a02      	ldr	r2, [pc, #8]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80095e4:	430b      	orrs	r3, r1
 80095e6:	6513      	str	r3, [r2, #80]	; 0x50
 80095e8:	e006      	b.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80095ea:	bf00      	nop
 80095ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80095f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009600:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009604:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009608:	2300      	movs	r3, #0
 800960a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800960e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009612:	460b      	mov	r3, r1
 8009614:	4313      	orrs	r3, r2
 8009616:	d055      	beq.n	80096c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009618:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800961c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009620:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009624:	d033      	beq.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009626:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800962a:	d82c      	bhi.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800962c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009630:	d02f      	beq.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009636:	d826      	bhi.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009638:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800963c:	d02b      	beq.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800963e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009642:	d820      	bhi.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009644:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009648:	d012      	beq.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800964a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800964e:	d81a      	bhi.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009650:	2b00      	cmp	r3, #0
 8009652:	d022      	beq.n	800969a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009654:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009658:	d115      	bne.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800965a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800965e:	3308      	adds	r3, #8
 8009660:	2101      	movs	r1, #1
 8009662:	4618      	mov	r0, r3
 8009664:	f002 f878 	bl	800b758 <RCCEx_PLL2_Config>
 8009668:	4603      	mov	r3, r0
 800966a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800966e:	e015      	b.n	800969c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009670:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009674:	3328      	adds	r3, #40	; 0x28
 8009676:	2101      	movs	r1, #1
 8009678:	4618      	mov	r0, r3
 800967a:	f002 f91f 	bl	800b8bc <RCCEx_PLL3_Config>
 800967e:	4603      	mov	r3, r0
 8009680:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009684:	e00a      	b.n	800969c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009686:	2301      	movs	r3, #1
 8009688:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800968c:	e006      	b.n	800969c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800968e:	bf00      	nop
 8009690:	e004      	b.n	800969c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009692:	bf00      	nop
 8009694:	e002      	b.n	800969c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009696:	bf00      	nop
 8009698:	e000      	b.n	800969c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800969a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800969c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d10b      	bne.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80096a4:	4ba3      	ldr	r3, [pc, #652]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096a8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80096ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80096b4:	4a9f      	ldr	r2, [pc, #636]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096b6:	430b      	orrs	r3, r1
 80096b8:	6593      	str	r3, [r2, #88]	; 0x58
 80096ba:	e003      	b.n	80096c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80096c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096cc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80096d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80096d4:	2300      	movs	r3, #0
 80096d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80096da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80096de:	460b      	mov	r3, r1
 80096e0:	4313      	orrs	r3, r2
 80096e2:	d037      	beq.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80096e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096ee:	d00e      	beq.n	800970e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80096f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096f4:	d816      	bhi.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d018      	beq.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x708>
 80096fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096fe:	d111      	bne.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009700:	4b8c      	ldr	r3, [pc, #560]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009704:	4a8b      	ldr	r2, [pc, #556]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009706:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800970a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800970c:	e00f      	b.n	800972e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800970e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009712:	3308      	adds	r3, #8
 8009714:	2101      	movs	r1, #1
 8009716:	4618      	mov	r0, r3
 8009718:	f002 f81e 	bl	800b758 <RCCEx_PLL2_Config>
 800971c:	4603      	mov	r3, r0
 800971e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009722:	e004      	b.n	800972e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009724:	2301      	movs	r3, #1
 8009726:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800972a:	e000      	b.n	800972e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800972c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800972e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009732:	2b00      	cmp	r3, #0
 8009734:	d10a      	bne.n	800974c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009736:	4b7f      	ldr	r3, [pc, #508]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800973a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800973e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009744:	4a7b      	ldr	r2, [pc, #492]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009746:	430b      	orrs	r3, r1
 8009748:	6513      	str	r3, [r2, #80]	; 0x50
 800974a:	e003      	b.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800974c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009750:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009754:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009760:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009764:	2300      	movs	r3, #0
 8009766:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800976a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800976e:	460b      	mov	r3, r1
 8009770:	4313      	orrs	r3, r2
 8009772:	d039      	beq.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009774:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800977a:	2b03      	cmp	r3, #3
 800977c:	d81c      	bhi.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800977e:	a201      	add	r2, pc, #4	; (adr r2, 8009784 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009784:	080097c1 	.word	0x080097c1
 8009788:	08009795 	.word	0x08009795
 800978c:	080097a3 	.word	0x080097a3
 8009790:	080097c1 	.word	0x080097c1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009794:	4b67      	ldr	r3, [pc, #412]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009798:	4a66      	ldr	r2, [pc, #408]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800979a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800979e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80097a0:	e00f      	b.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80097a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097a6:	3308      	adds	r3, #8
 80097a8:	2102      	movs	r1, #2
 80097aa:	4618      	mov	r0, r3
 80097ac:	f001 ffd4 	bl	800b758 <RCCEx_PLL2_Config>
 80097b0:	4603      	mov	r3, r0
 80097b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80097b6:	e004      	b.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80097b8:	2301      	movs	r3, #1
 80097ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80097be:	e000      	b.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80097c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d10a      	bne.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80097ca:	4b5a      	ldr	r3, [pc, #360]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097ce:	f023 0103 	bic.w	r1, r3, #3
 80097d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097d8:	4a56      	ldr	r2, [pc, #344]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097da:	430b      	orrs	r3, r1
 80097dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80097de:	e003      	b.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80097e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80097f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80097f8:	2300      	movs	r3, #0
 80097fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80097fe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009802:	460b      	mov	r3, r1
 8009804:	4313      	orrs	r3, r2
 8009806:	f000 809f 	beq.w	8009948 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800980a:	4b4b      	ldr	r3, [pc, #300]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a4a      	ldr	r2, [pc, #296]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009814:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009816:	f7f9 fa63 	bl	8002ce0 <HAL_GetTick>
 800981a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800981e:	e00b      	b.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009820:	f7f9 fa5e 	bl	8002ce0 <HAL_GetTick>
 8009824:	4602      	mov	r2, r0
 8009826:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800982a:	1ad3      	subs	r3, r2, r3
 800982c:	2b64      	cmp	r3, #100	; 0x64
 800982e:	d903      	bls.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009830:	2303      	movs	r3, #3
 8009832:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009836:	e005      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009838:	4b3f      	ldr	r3, [pc, #252]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009840:	2b00      	cmp	r3, #0
 8009842:	d0ed      	beq.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009844:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009848:	2b00      	cmp	r3, #0
 800984a:	d179      	bne.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800984c:	4b39      	ldr	r3, [pc, #228]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800984e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009854:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009858:	4053      	eors	r3, r2
 800985a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800985e:	2b00      	cmp	r3, #0
 8009860:	d015      	beq.n	800988e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009862:	4b34      	ldr	r3, [pc, #208]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800986a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800986e:	4b31      	ldr	r3, [pc, #196]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009872:	4a30      	ldr	r2, [pc, #192]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009878:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800987a:	4b2e      	ldr	r3, [pc, #184]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800987c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800987e:	4a2d      	ldr	r2, [pc, #180]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009880:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009884:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009886:	4a2b      	ldr	r2, [pc, #172]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009888:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800988c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800988e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009892:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800989a:	d118      	bne.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800989c:	f7f9 fa20 	bl	8002ce0 <HAL_GetTick>
 80098a0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80098a4:	e00d      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80098a6:	f7f9 fa1b 	bl	8002ce0 <HAL_GetTick>
 80098aa:	4602      	mov	r2, r0
 80098ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80098b0:	1ad2      	subs	r2, r2, r3
 80098b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d903      	bls.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80098ba:	2303      	movs	r3, #3
 80098bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80098c0:	e005      	b.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80098c2:	4b1c      	ldr	r3, [pc, #112]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098c6:	f003 0302 	and.w	r3, r3, #2
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d0eb      	beq.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80098ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d129      	bne.n	800992a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80098d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80098de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098e6:	d10e      	bne.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80098e8:	4b12      	ldr	r3, [pc, #72]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098ea:	691b      	ldr	r3, [r3, #16]
 80098ec:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80098f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80098f8:	091a      	lsrs	r2, r3, #4
 80098fa:	4b10      	ldr	r3, [pc, #64]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80098fc:	4013      	ands	r3, r2
 80098fe:	4a0d      	ldr	r2, [pc, #52]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009900:	430b      	orrs	r3, r1
 8009902:	6113      	str	r3, [r2, #16]
 8009904:	e005      	b.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009906:	4b0b      	ldr	r3, [pc, #44]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009908:	691b      	ldr	r3, [r3, #16]
 800990a:	4a0a      	ldr	r2, [pc, #40]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800990c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009910:	6113      	str	r3, [r2, #16]
 8009912:	4b08      	ldr	r3, [pc, #32]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009914:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800991a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800991e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009922:	4a04      	ldr	r2, [pc, #16]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009924:	430b      	orrs	r3, r1
 8009926:	6713      	str	r3, [r2, #112]	; 0x70
 8009928:	e00e      	b.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800992a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800992e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8009932:	e009      	b.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009934:	58024400 	.word	0x58024400
 8009938:	58024800 	.word	0x58024800
 800993c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009940:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009944:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009948:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800994c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009950:	f002 0301 	and.w	r3, r2, #1
 8009954:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009958:	2300      	movs	r3, #0
 800995a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800995e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009962:	460b      	mov	r3, r1
 8009964:	4313      	orrs	r3, r2
 8009966:	f000 8089 	beq.w	8009a7c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800996a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800996e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009970:	2b28      	cmp	r3, #40	; 0x28
 8009972:	d86b      	bhi.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009974:	a201      	add	r2, pc, #4	; (adr r2, 800997c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800997a:	bf00      	nop
 800997c:	08009a55 	.word	0x08009a55
 8009980:	08009a4d 	.word	0x08009a4d
 8009984:	08009a4d 	.word	0x08009a4d
 8009988:	08009a4d 	.word	0x08009a4d
 800998c:	08009a4d 	.word	0x08009a4d
 8009990:	08009a4d 	.word	0x08009a4d
 8009994:	08009a4d 	.word	0x08009a4d
 8009998:	08009a4d 	.word	0x08009a4d
 800999c:	08009a21 	.word	0x08009a21
 80099a0:	08009a4d 	.word	0x08009a4d
 80099a4:	08009a4d 	.word	0x08009a4d
 80099a8:	08009a4d 	.word	0x08009a4d
 80099ac:	08009a4d 	.word	0x08009a4d
 80099b0:	08009a4d 	.word	0x08009a4d
 80099b4:	08009a4d 	.word	0x08009a4d
 80099b8:	08009a4d 	.word	0x08009a4d
 80099bc:	08009a37 	.word	0x08009a37
 80099c0:	08009a4d 	.word	0x08009a4d
 80099c4:	08009a4d 	.word	0x08009a4d
 80099c8:	08009a4d 	.word	0x08009a4d
 80099cc:	08009a4d 	.word	0x08009a4d
 80099d0:	08009a4d 	.word	0x08009a4d
 80099d4:	08009a4d 	.word	0x08009a4d
 80099d8:	08009a4d 	.word	0x08009a4d
 80099dc:	08009a55 	.word	0x08009a55
 80099e0:	08009a4d 	.word	0x08009a4d
 80099e4:	08009a4d 	.word	0x08009a4d
 80099e8:	08009a4d 	.word	0x08009a4d
 80099ec:	08009a4d 	.word	0x08009a4d
 80099f0:	08009a4d 	.word	0x08009a4d
 80099f4:	08009a4d 	.word	0x08009a4d
 80099f8:	08009a4d 	.word	0x08009a4d
 80099fc:	08009a55 	.word	0x08009a55
 8009a00:	08009a4d 	.word	0x08009a4d
 8009a04:	08009a4d 	.word	0x08009a4d
 8009a08:	08009a4d 	.word	0x08009a4d
 8009a0c:	08009a4d 	.word	0x08009a4d
 8009a10:	08009a4d 	.word	0x08009a4d
 8009a14:	08009a4d 	.word	0x08009a4d
 8009a18:	08009a4d 	.word	0x08009a4d
 8009a1c:	08009a55 	.word	0x08009a55
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a24:	3308      	adds	r3, #8
 8009a26:	2101      	movs	r1, #1
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f001 fe95 	bl	800b758 <RCCEx_PLL2_Config>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009a34:	e00f      	b.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a3a:	3328      	adds	r3, #40	; 0x28
 8009a3c:	2101      	movs	r1, #1
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f001 ff3c 	bl	800b8bc <RCCEx_PLL3_Config>
 8009a44:	4603      	mov	r3, r0
 8009a46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009a4a:	e004      	b.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009a52:	e000      	b.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009a54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d10a      	bne.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009a5e:	4bbf      	ldr	r3, [pc, #764]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a62:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8009a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a6c:	4abb      	ldr	r2, [pc, #748]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a6e:	430b      	orrs	r3, r1
 8009a70:	6553      	str	r3, [r2, #84]	; 0x54
 8009a72:	e003      	b.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a84:	f002 0302 	and.w	r3, r2, #2
 8009a88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009a92:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009a96:	460b      	mov	r3, r1
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	d041      	beq.n	8009b20 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009aa2:	2b05      	cmp	r3, #5
 8009aa4:	d824      	bhi.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009aa6:	a201      	add	r2, pc, #4	; (adr r2, 8009aac <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aac:	08009af9 	.word	0x08009af9
 8009ab0:	08009ac5 	.word	0x08009ac5
 8009ab4:	08009adb 	.word	0x08009adb
 8009ab8:	08009af9 	.word	0x08009af9
 8009abc:	08009af9 	.word	0x08009af9
 8009ac0:	08009af9 	.word	0x08009af9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ac8:	3308      	adds	r3, #8
 8009aca:	2101      	movs	r1, #1
 8009acc:	4618      	mov	r0, r3
 8009ace:	f001 fe43 	bl	800b758 <RCCEx_PLL2_Config>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009ad8:	e00f      	b.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ade:	3328      	adds	r3, #40	; 0x28
 8009ae0:	2101      	movs	r1, #1
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f001 feea 	bl	800b8bc <RCCEx_PLL3_Config>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009aee:	e004      	b.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009af0:	2301      	movs	r3, #1
 8009af2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009af6:	e000      	b.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009af8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009afa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d10a      	bne.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009b02:	4b96      	ldr	r3, [pc, #600]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b06:	f023 0107 	bic.w	r1, r3, #7
 8009b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b10:	4a92      	ldr	r2, [pc, #584]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b12:	430b      	orrs	r3, r1
 8009b14:	6553      	str	r3, [r2, #84]	; 0x54
 8009b16:	e003      	b.n	8009b20 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b1c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b28:	f002 0304 	and.w	r3, r2, #4
 8009b2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b30:	2300      	movs	r3, #0
 8009b32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009b36:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8009b3a:	460b      	mov	r3, r1
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	d044      	beq.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009b48:	2b05      	cmp	r3, #5
 8009b4a:	d825      	bhi.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009b4c:	a201      	add	r2, pc, #4	; (adr r2, 8009b54 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b52:	bf00      	nop
 8009b54:	08009ba1 	.word	0x08009ba1
 8009b58:	08009b6d 	.word	0x08009b6d
 8009b5c:	08009b83 	.word	0x08009b83
 8009b60:	08009ba1 	.word	0x08009ba1
 8009b64:	08009ba1 	.word	0x08009ba1
 8009b68:	08009ba1 	.word	0x08009ba1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b70:	3308      	adds	r3, #8
 8009b72:	2101      	movs	r1, #1
 8009b74:	4618      	mov	r0, r3
 8009b76:	f001 fdef 	bl	800b758 <RCCEx_PLL2_Config>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009b80:	e00f      	b.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b86:	3328      	adds	r3, #40	; 0x28
 8009b88:	2101      	movs	r1, #1
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f001 fe96 	bl	800b8bc <RCCEx_PLL3_Config>
 8009b90:	4603      	mov	r3, r0
 8009b92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009b96:	e004      	b.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009b9e:	e000      	b.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009ba0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d10b      	bne.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009baa:	4b6c      	ldr	r3, [pc, #432]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bae:	f023 0107 	bic.w	r1, r3, #7
 8009bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009bba:	4a68      	ldr	r2, [pc, #416]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009bbc:	430b      	orrs	r3, r1
 8009bbe:	6593      	str	r3, [r2, #88]	; 0x58
 8009bc0:	e003      	b.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd2:	f002 0320 	and.w	r3, r2, #32
 8009bd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009bda:	2300      	movs	r3, #0
 8009bdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009be0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009be4:	460b      	mov	r3, r1
 8009be6:	4313      	orrs	r3, r2
 8009be8:	d055      	beq.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009bf6:	d033      	beq.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009bf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009bfc:	d82c      	bhi.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c02:	d02f      	beq.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c08:	d826      	bhi.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009c0a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c0e:	d02b      	beq.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009c10:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c14:	d820      	bhi.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009c16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c1a:	d012      	beq.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009c1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c20:	d81a      	bhi.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d022      	beq.n	8009c6c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009c26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c2a:	d115      	bne.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c30:	3308      	adds	r3, #8
 8009c32:	2100      	movs	r1, #0
 8009c34:	4618      	mov	r0, r3
 8009c36:	f001 fd8f 	bl	800b758 <RCCEx_PLL2_Config>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009c40:	e015      	b.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c46:	3328      	adds	r3, #40	; 0x28
 8009c48:	2102      	movs	r1, #2
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f001 fe36 	bl	800b8bc <RCCEx_PLL3_Config>
 8009c50:	4603      	mov	r3, r0
 8009c52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009c56:	e00a      	b.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009c5e:	e006      	b.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009c60:	bf00      	nop
 8009c62:	e004      	b.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009c64:	bf00      	nop
 8009c66:	e002      	b.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009c68:	bf00      	nop
 8009c6a:	e000      	b.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009c6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d10b      	bne.n	8009c8e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009c76:	4b39      	ldr	r3, [pc, #228]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c7a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c86:	4a35      	ldr	r2, [pc, #212]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009c88:	430b      	orrs	r3, r1
 8009c8a:	6553      	str	r3, [r2, #84]	; 0x54
 8009c8c:	e003      	b.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8009ca2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009cac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	d058      	beq.n	8009d68 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009cbe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009cc2:	d033      	beq.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009cc4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009cc8:	d82c      	bhi.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cce:	d02f      	beq.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009cd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cd4:	d826      	bhi.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009cd6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009cda:	d02b      	beq.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009cdc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009ce0:	d820      	bhi.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009ce2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ce6:	d012      	beq.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009ce8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009cec:	d81a      	bhi.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d022      	beq.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009cf6:	d115      	bne.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cfc:	3308      	adds	r3, #8
 8009cfe:	2100      	movs	r1, #0
 8009d00:	4618      	mov	r0, r3
 8009d02:	f001 fd29 	bl	800b758 <RCCEx_PLL2_Config>
 8009d06:	4603      	mov	r3, r0
 8009d08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009d0c:	e015      	b.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d12:	3328      	adds	r3, #40	; 0x28
 8009d14:	2102      	movs	r1, #2
 8009d16:	4618      	mov	r0, r3
 8009d18:	f001 fdd0 	bl	800b8bc <RCCEx_PLL3_Config>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009d22:	e00a      	b.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d24:	2301      	movs	r3, #1
 8009d26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d2a:	e006      	b.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009d2c:	bf00      	nop
 8009d2e:	e004      	b.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009d30:	bf00      	nop
 8009d32:	e002      	b.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009d34:	bf00      	nop
 8009d36:	e000      	b.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009d38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d10e      	bne.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009d42:	4b06      	ldr	r3, [pc, #24]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d46:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8009d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d52:	4a02      	ldr	r2, [pc, #8]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009d54:	430b      	orrs	r3, r1
 8009d56:	6593      	str	r3, [r2, #88]	; 0x58
 8009d58:	e006      	b.n	8009d68 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009d5a:	bf00      	nop
 8009d5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d70:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8009d74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009d78:	2300      	movs	r3, #0
 8009d7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009d7e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8009d82:	460b      	mov	r3, r1
 8009d84:	4313      	orrs	r3, r2
 8009d86:	d055      	beq.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009d90:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009d94:	d033      	beq.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009d96:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009d9a:	d82c      	bhi.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009d9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009da0:	d02f      	beq.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009da2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009da6:	d826      	bhi.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009da8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009dac:	d02b      	beq.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009dae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009db2:	d820      	bhi.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009db4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009db8:	d012      	beq.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009dba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009dbe:	d81a      	bhi.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d022      	beq.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009dc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dc8:	d115      	bne.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dce:	3308      	adds	r3, #8
 8009dd0:	2100      	movs	r1, #0
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f001 fcc0 	bl	800b758 <RCCEx_PLL2_Config>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009dde:	e015      	b.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009de4:	3328      	adds	r3, #40	; 0x28
 8009de6:	2102      	movs	r1, #2
 8009de8:	4618      	mov	r0, r3
 8009dea:	f001 fd67 	bl	800b8bc <RCCEx_PLL3_Config>
 8009dee:	4603      	mov	r3, r0
 8009df0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009df4:	e00a      	b.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009df6:	2301      	movs	r3, #1
 8009df8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009dfc:	e006      	b.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009dfe:	bf00      	nop
 8009e00:	e004      	b.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009e02:	bf00      	nop
 8009e04:	e002      	b.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009e06:	bf00      	nop
 8009e08:	e000      	b.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009e0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d10b      	bne.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009e14:	4ba1      	ldr	r3, [pc, #644]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e18:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8009e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e20:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009e24:	4a9d      	ldr	r2, [pc, #628]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e26:	430b      	orrs	r3, r1
 8009e28:	6593      	str	r3, [r2, #88]	; 0x58
 8009e2a:	e003      	b.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e3c:	f002 0308 	and.w	r3, r2, #8
 8009e40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009e44:	2300      	movs	r3, #0
 8009e46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009e4a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8009e4e:	460b      	mov	r3, r1
 8009e50:	4313      	orrs	r3, r2
 8009e52:	d01e      	beq.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e60:	d10c      	bne.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e66:	3328      	adds	r3, #40	; 0x28
 8009e68:	2102      	movs	r1, #2
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f001 fd26 	bl	800b8bc <RCCEx_PLL3_Config>
 8009e70:	4603      	mov	r3, r0
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d002      	beq.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009e76:	2301      	movs	r3, #1
 8009e78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009e7c:	4b87      	ldr	r3, [pc, #540]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e80:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e8c:	4a83      	ldr	r2, [pc, #524]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e8e:	430b      	orrs	r3, r1
 8009e90:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9a:	f002 0310 	and.w	r3, r2, #16
 8009e9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009ea8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8009eac:	460b      	mov	r3, r1
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	d01e      	beq.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ebe:	d10c      	bne.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ec4:	3328      	adds	r3, #40	; 0x28
 8009ec6:	2102      	movs	r1, #2
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f001 fcf7 	bl	800b8bc <RCCEx_PLL3_Config>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d002      	beq.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009eda:	4b70      	ldr	r3, [pc, #448]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ede:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ee6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009eea:	4a6c      	ldr	r2, [pc, #432]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009eec:	430b      	orrs	r3, r1
 8009eee:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8009efc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009f00:	2300      	movs	r3, #0
 8009f02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009f06:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	d03e      	beq.n	8009f8e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009f18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f1c:	d022      	beq.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009f1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f22:	d81b      	bhi.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d003      	beq.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f2c:	d00b      	beq.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009f2e:	e015      	b.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f34:	3308      	adds	r3, #8
 8009f36:	2100      	movs	r1, #0
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f001 fc0d 	bl	800b758 <RCCEx_PLL2_Config>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009f44:	e00f      	b.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f4a:	3328      	adds	r3, #40	; 0x28
 8009f4c:	2102      	movs	r1, #2
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f001 fcb4 	bl	800b8bc <RCCEx_PLL3_Config>
 8009f54:	4603      	mov	r3, r0
 8009f56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009f5a:	e004      	b.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009f62:	e000      	b.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009f64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d10b      	bne.n	8009f86 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009f6e:	4b4b      	ldr	r3, [pc, #300]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f72:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009f7e:	4a47      	ldr	r2, [pc, #284]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f80:	430b      	orrs	r3, r1
 8009f82:	6593      	str	r3, [r2, #88]	; 0x58
 8009f84:	e003      	b.n	8009f8e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f96:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8009f9a:	67bb      	str	r3, [r7, #120]	; 0x78
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009fa0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	d03b      	beq.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fb2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009fb6:	d01f      	beq.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009fb8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009fbc:	d818      	bhi.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009fbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009fc2:	d003      	beq.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009fc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009fc8:	d007      	beq.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009fca:	e011      	b.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fcc:	4b33      	ldr	r3, [pc, #204]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd0:	4a32      	ldr	r2, [pc, #200]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009fd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009fd8:	e00f      	b.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fde:	3328      	adds	r3, #40	; 0x28
 8009fe0:	2101      	movs	r1, #1
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f001 fc6a 	bl	800b8bc <RCCEx_PLL3_Config>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009fee:	e004      	b.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009ff6:	e000      	b.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009ff8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ffa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d10b      	bne.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a002:	4b26      	ldr	r3, [pc, #152]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a006:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a00a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a00e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a012:	4a22      	ldr	r2, [pc, #136]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a014:	430b      	orrs	r3, r1
 800a016:	6553      	str	r3, [r2, #84]	; 0x54
 800a018:	e003      	b.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a01a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a01e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a022:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a02a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a02e:	673b      	str	r3, [r7, #112]	; 0x70
 800a030:	2300      	movs	r3, #0
 800a032:	677b      	str	r3, [r7, #116]	; 0x74
 800a034:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a038:	460b      	mov	r3, r1
 800a03a:	4313      	orrs	r3, r2
 800a03c:	d034      	beq.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a03e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a044:	2b00      	cmp	r3, #0
 800a046:	d003      	beq.n	800a050 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a04c:	d007      	beq.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a04e:	e011      	b.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a050:	4b12      	ldr	r3, [pc, #72]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a054:	4a11      	ldr	r2, [pc, #68]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a05a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a05c:	e00e      	b.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a05e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a062:	3308      	adds	r3, #8
 800a064:	2102      	movs	r1, #2
 800a066:	4618      	mov	r0, r3
 800a068:	f001 fb76 	bl	800b758 <RCCEx_PLL2_Config>
 800a06c:	4603      	mov	r3, r0
 800a06e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a072:	e003      	b.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a074:	2301      	movs	r3, #1
 800a076:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a07a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a07c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a080:	2b00      	cmp	r3, #0
 800a082:	d10d      	bne.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a084:	4b05      	ldr	r3, [pc, #20]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a088:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a08c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a092:	4a02      	ldr	r2, [pc, #8]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a094:	430b      	orrs	r3, r1
 800a096:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a098:	e006      	b.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a09a:	bf00      	nop
 800a09c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a0a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a0b4:	66bb      	str	r3, [r7, #104]	; 0x68
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a0ba:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a0be:	460b      	mov	r3, r1
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	d00c      	beq.n	800a0de <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a0c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0c8:	3328      	adds	r3, #40	; 0x28
 800a0ca:	2102      	movs	r1, #2
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f001 fbf5 	bl	800b8bc <RCCEx_PLL3_Config>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d002      	beq.n	800a0de <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a0de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a0ea:	663b      	str	r3, [r7, #96]	; 0x60
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	667b      	str	r3, [r7, #100]	; 0x64
 800a0f0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	d038      	beq.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a0fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a102:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a106:	d018      	beq.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a108:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a10c:	d811      	bhi.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a10e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a112:	d014      	beq.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a118:	d80b      	bhi.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d011      	beq.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a11e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a122:	d106      	bne.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a124:	4bc3      	ldr	r3, [pc, #780]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a128:	4ac2      	ldr	r2, [pc, #776]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a12a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a12e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a130:	e008      	b.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a132:	2301      	movs	r3, #1
 800a134:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a138:	e004      	b.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a13a:	bf00      	nop
 800a13c:	e002      	b.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a13e:	bf00      	nop
 800a140:	e000      	b.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a142:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a144:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d10b      	bne.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a14c:	4bb9      	ldr	r3, [pc, #740]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a14e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a150:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a154:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a158:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a15c:	4ab5      	ldr	r2, [pc, #724]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a15e:	430b      	orrs	r3, r1
 800a160:	6553      	str	r3, [r2, #84]	; 0x54
 800a162:	e003      	b.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a164:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a168:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a16c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a174:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a178:	65bb      	str	r3, [r7, #88]	; 0x58
 800a17a:	2300      	movs	r3, #0
 800a17c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a17e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a182:	460b      	mov	r3, r1
 800a184:	4313      	orrs	r3, r2
 800a186:	d009      	beq.n	800a19c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a188:	4baa      	ldr	r3, [pc, #680]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a18a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a18c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a190:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a196:	4aa7      	ldr	r2, [pc, #668]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a198:	430b      	orrs	r3, r1
 800a19a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a19c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a1a8:	653b      	str	r3, [r7, #80]	; 0x50
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	657b      	str	r3, [r7, #84]	; 0x54
 800a1ae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a1b2:	460b      	mov	r3, r1
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	d00a      	beq.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a1b8:	4b9e      	ldr	r3, [pc, #632]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1ba:	691b      	ldr	r3, [r3, #16]
 800a1bc:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a1c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a1c8:	4a9a      	ldr	r2, [pc, #616]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1ca:	430b      	orrs	r3, r1
 800a1cc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a1ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a1da:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1dc:	2300      	movs	r3, #0
 800a1de:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1e0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a1e4:	460b      	mov	r3, r1
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	d009      	beq.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a1ea:	4b92      	ldr	r3, [pc, #584]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1ee:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a1f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1f8:	4a8e      	ldr	r2, [pc, #568]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1fa:	430b      	orrs	r3, r1
 800a1fc:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a1fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a206:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a20a:	643b      	str	r3, [r7, #64]	; 0x40
 800a20c:	2300      	movs	r3, #0
 800a20e:	647b      	str	r3, [r7, #68]	; 0x44
 800a210:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a214:	460b      	mov	r3, r1
 800a216:	4313      	orrs	r3, r2
 800a218:	d00e      	beq.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a21a:	4b86      	ldr	r3, [pc, #536]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a21c:	691b      	ldr	r3, [r3, #16]
 800a21e:	4a85      	ldr	r2, [pc, #532]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a220:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a224:	6113      	str	r3, [r2, #16]
 800a226:	4b83      	ldr	r3, [pc, #524]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a228:	6919      	ldr	r1, [r3, #16]
 800a22a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a22e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a232:	4a80      	ldr	r2, [pc, #512]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a234:	430b      	orrs	r3, r1
 800a236:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a238:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a240:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a244:	63bb      	str	r3, [r7, #56]	; 0x38
 800a246:	2300      	movs	r3, #0
 800a248:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a24a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a24e:	460b      	mov	r3, r1
 800a250:	4313      	orrs	r3, r2
 800a252:	d009      	beq.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a254:	4b77      	ldr	r3, [pc, #476]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a258:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a25c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a262:	4a74      	ldr	r2, [pc, #464]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a264:	430b      	orrs	r3, r1
 800a266:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a268:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a270:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a274:	633b      	str	r3, [r7, #48]	; 0x30
 800a276:	2300      	movs	r3, #0
 800a278:	637b      	str	r3, [r7, #52]	; 0x34
 800a27a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a27e:	460b      	mov	r3, r1
 800a280:	4313      	orrs	r3, r2
 800a282:	d00a      	beq.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a284:	4b6b      	ldr	r3, [pc, #428]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a288:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800a28c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a290:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a294:	4a67      	ldr	r2, [pc, #412]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a296:	430b      	orrs	r3, r1
 800a298:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a29a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a2:	2100      	movs	r1, #0
 800a2a4:	62b9      	str	r1, [r7, #40]	; 0x28
 800a2a6:	f003 0301 	and.w	r3, r3, #1
 800a2aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a2ac:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	d011      	beq.n	800a2da <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a2b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2ba:	3308      	adds	r3, #8
 800a2bc:	2100      	movs	r1, #0
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f001 fa4a 	bl	800b758 <RCCEx_PLL2_Config>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a2ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d003      	beq.n	800a2da <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a2da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e2:	2100      	movs	r1, #0
 800a2e4:	6239      	str	r1, [r7, #32]
 800a2e6:	f003 0302 	and.w	r3, r3, #2
 800a2ea:	627b      	str	r3, [r7, #36]	; 0x24
 800a2ec:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	4313      	orrs	r3, r2
 800a2f4:	d011      	beq.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a2f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2fa:	3308      	adds	r3, #8
 800a2fc:	2101      	movs	r1, #1
 800a2fe:	4618      	mov	r0, r3
 800a300:	f001 fa2a 	bl	800b758 <RCCEx_PLL2_Config>
 800a304:	4603      	mov	r3, r0
 800a306:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a30a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d003      	beq.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a312:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a316:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a31a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a322:	2100      	movs	r1, #0
 800a324:	61b9      	str	r1, [r7, #24]
 800a326:	f003 0304 	and.w	r3, r3, #4
 800a32a:	61fb      	str	r3, [r7, #28]
 800a32c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a330:	460b      	mov	r3, r1
 800a332:	4313      	orrs	r3, r2
 800a334:	d011      	beq.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a33a:	3308      	adds	r3, #8
 800a33c:	2102      	movs	r1, #2
 800a33e:	4618      	mov	r0, r3
 800a340:	f001 fa0a 	bl	800b758 <RCCEx_PLL2_Config>
 800a344:	4603      	mov	r3, r0
 800a346:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a34a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d003      	beq.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a352:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a356:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a35a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a362:	2100      	movs	r1, #0
 800a364:	6139      	str	r1, [r7, #16]
 800a366:	f003 0308 	and.w	r3, r3, #8
 800a36a:	617b      	str	r3, [r7, #20]
 800a36c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a370:	460b      	mov	r3, r1
 800a372:	4313      	orrs	r3, r2
 800a374:	d011      	beq.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a376:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a37a:	3328      	adds	r3, #40	; 0x28
 800a37c:	2100      	movs	r1, #0
 800a37e:	4618      	mov	r0, r3
 800a380:	f001 fa9c 	bl	800b8bc <RCCEx_PLL3_Config>
 800a384:	4603      	mov	r3, r0
 800a386:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800a38a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d003      	beq.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a392:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a396:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a39a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a2:	2100      	movs	r1, #0
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	f003 0310 	and.w	r3, r3, #16
 800a3aa:	60fb      	str	r3, [r7, #12]
 800a3ac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a3b0:	460b      	mov	r3, r1
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	d011      	beq.n	800a3da <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a3b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3ba:	3328      	adds	r3, #40	; 0x28
 800a3bc:	2101      	movs	r1, #1
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f001 fa7c 	bl	800b8bc <RCCEx_PLL3_Config>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a3ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d003      	beq.n	800a3da <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a3da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e2:	2100      	movs	r1, #0
 800a3e4:	6039      	str	r1, [r7, #0]
 800a3e6:	f003 0320 	and.w	r3, r3, #32
 800a3ea:	607b      	str	r3, [r7, #4]
 800a3ec:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	d011      	beq.n	800a41a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a3f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3fa:	3328      	adds	r3, #40	; 0x28
 800a3fc:	2102      	movs	r1, #2
 800a3fe:	4618      	mov	r0, r3
 800a400:	f001 fa5c 	bl	800b8bc <RCCEx_PLL3_Config>
 800a404:	4603      	mov	r3, r0
 800a406:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a40a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d003      	beq.n	800a41a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a412:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a416:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800a41a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d101      	bne.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a422:	2300      	movs	r3, #0
 800a424:	e000      	b.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a426:	2301      	movs	r3, #1
}
 800a428:	4618      	mov	r0, r3
 800a42a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800a42e:	46bd      	mov	sp, r7
 800a430:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a434:	58024400 	.word	0x58024400

0800a438 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b090      	sub	sp, #64	; 0x40
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a442:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a446:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800a44a:	430b      	orrs	r3, r1
 800a44c:	f040 8094 	bne.w	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a450:	4b9e      	ldr	r3, [pc, #632]	; (800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a454:	f003 0307 	and.w	r3, r3, #7
 800a458:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a45c:	2b04      	cmp	r3, #4
 800a45e:	f200 8087 	bhi.w	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a462:	a201      	add	r2, pc, #4	; (adr r2, 800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a468:	0800a47d 	.word	0x0800a47d
 800a46c:	0800a4a5 	.word	0x0800a4a5
 800a470:	0800a4cd 	.word	0x0800a4cd
 800a474:	0800a569 	.word	0x0800a569
 800a478:	0800a4f5 	.word	0x0800a4f5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a47c:	4b93      	ldr	r3, [pc, #588]	; (800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a484:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a488:	d108      	bne.n	800a49c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a48a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a48e:	4618      	mov	r0, r3
 800a490:	f001 f810 	bl	800b4b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a496:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a498:	f000 bd45 	b.w	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a49c:	2300      	movs	r3, #0
 800a49e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4a0:	f000 bd41 	b.w	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a4a4:	4b89      	ldr	r3, [pc, #548]	; (800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a4ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a4b0:	d108      	bne.n	800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4b2:	f107 0318 	add.w	r3, r7, #24
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f000 fd54 	bl	800af64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a4bc:	69bb      	ldr	r3, [r7, #24]
 800a4be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4c0:	f000 bd31 	b.w	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4c8:	f000 bd2d 	b.w	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a4cc:	4b7f      	ldr	r3, [pc, #508]	; (800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4d8:	d108      	bne.n	800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4da:	f107 030c 	add.w	r3, r7, #12
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f000 fe94 	bl	800b20c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4e8:	f000 bd1d 	b.w	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4f0:	f000 bd19 	b.w	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a4f4:	4b75      	ldr	r3, [pc, #468]	; (800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a4fc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a4fe:	4b73      	ldr	r3, [pc, #460]	; (800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f003 0304 	and.w	r3, r3, #4
 800a506:	2b04      	cmp	r3, #4
 800a508:	d10c      	bne.n	800a524 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a50a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d109      	bne.n	800a524 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a510:	4b6e      	ldr	r3, [pc, #440]	; (800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	08db      	lsrs	r3, r3, #3
 800a516:	f003 0303 	and.w	r3, r3, #3
 800a51a:	4a6d      	ldr	r2, [pc, #436]	; (800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a51c:	fa22 f303 	lsr.w	r3, r2, r3
 800a520:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a522:	e01f      	b.n	800a564 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a524:	4b69      	ldr	r3, [pc, #420]	; (800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a52c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a530:	d106      	bne.n	800a540 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a534:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a538:	d102      	bne.n	800a540 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a53a:	4b66      	ldr	r3, [pc, #408]	; (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a53c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a53e:	e011      	b.n	800a564 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a540:	4b62      	ldr	r3, [pc, #392]	; (800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a548:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a54c:	d106      	bne.n	800a55c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a54e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a550:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a554:	d102      	bne.n	800a55c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a556:	4b60      	ldr	r3, [pc, #384]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a558:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a55a:	e003      	b.n	800a564 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a55c:	2300      	movs	r3, #0
 800a55e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a560:	f000 bce1 	b.w	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a564:	f000 bcdf 	b.w	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a568:	4b5c      	ldr	r3, [pc, #368]	; (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a56a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a56c:	f000 bcdb 	b.w	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a570:	2300      	movs	r3, #0
 800a572:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a574:	f000 bcd7 	b.w	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a578:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a57c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800a580:	430b      	orrs	r3, r1
 800a582:	f040 80ad 	bne.w	800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a586:	4b51      	ldr	r3, [pc, #324]	; (800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a58a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a58e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a596:	d056      	beq.n	800a646 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a59a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a59e:	f200 8090 	bhi.w	800a6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a4:	2bc0      	cmp	r3, #192	; 0xc0
 800a5a6:	f000 8088 	beq.w	800a6ba <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ac:	2bc0      	cmp	r3, #192	; 0xc0
 800a5ae:	f200 8088 	bhi.w	800a6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b4:	2b80      	cmp	r3, #128	; 0x80
 800a5b6:	d032      	beq.n	800a61e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ba:	2b80      	cmp	r3, #128	; 0x80
 800a5bc:	f200 8081 	bhi.w	800a6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d003      	beq.n	800a5ce <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c8:	2b40      	cmp	r3, #64	; 0x40
 800a5ca:	d014      	beq.n	800a5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a5cc:	e079      	b.n	800a6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a5ce:	4b3f      	ldr	r3, [pc, #252]	; (800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a5da:	d108      	bne.n	800a5ee <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a5dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f000 ff67 	bl	800b4b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5ea:	f000 bc9c 	b.w	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5f2:	f000 bc98 	b.w	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5f6:	4b35      	ldr	r3, [pc, #212]	; (800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a5fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a602:	d108      	bne.n	800a616 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a604:	f107 0318 	add.w	r3, r7, #24
 800a608:	4618      	mov	r0, r3
 800a60a:	f000 fcab 	bl	800af64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a60e:	69bb      	ldr	r3, [r7, #24]
 800a610:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a612:	f000 bc88 	b.w	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a616:	2300      	movs	r3, #0
 800a618:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a61a:	f000 bc84 	b.w	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a61e:	4b2b      	ldr	r3, [pc, #172]	; (800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a626:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a62a:	d108      	bne.n	800a63e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a62c:	f107 030c 	add.w	r3, r7, #12
 800a630:	4618      	mov	r0, r3
 800a632:	f000 fdeb 	bl	800b20c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a63a:	f000 bc74 	b.w	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a63e:	2300      	movs	r3, #0
 800a640:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a642:	f000 bc70 	b.w	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a646:	4b21      	ldr	r3, [pc, #132]	; (800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a64a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a64e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a650:	4b1e      	ldr	r3, [pc, #120]	; (800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f003 0304 	and.w	r3, r3, #4
 800a658:	2b04      	cmp	r3, #4
 800a65a:	d10c      	bne.n	800a676 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a65c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d109      	bne.n	800a676 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a662:	4b1a      	ldr	r3, [pc, #104]	; (800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	08db      	lsrs	r3, r3, #3
 800a668:	f003 0303 	and.w	r3, r3, #3
 800a66c:	4a18      	ldr	r2, [pc, #96]	; (800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a66e:	fa22 f303 	lsr.w	r3, r2, r3
 800a672:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a674:	e01f      	b.n	800a6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a676:	4b15      	ldr	r3, [pc, #84]	; (800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a67e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a682:	d106      	bne.n	800a692 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a686:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a68a:	d102      	bne.n	800a692 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a68c:	4b11      	ldr	r3, [pc, #68]	; (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a68e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a690:	e011      	b.n	800a6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a692:	4b0e      	ldr	r3, [pc, #56]	; (800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a69a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a69e:	d106      	bne.n	800a6ae <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a6a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6a6:	d102      	bne.n	800a6ae <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a6a8:	4b0b      	ldr	r3, [pc, #44]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a6aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6ac:	e003      	b.n	800a6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a6b2:	f000 bc38 	b.w	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a6b6:	f000 bc36 	b.w	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a6ba:	4b08      	ldr	r3, [pc, #32]	; (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a6bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6be:	f000 bc32 	b.w	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6c6:	f000 bc2e 	b.w	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a6ca:	bf00      	nop
 800a6cc:	58024400 	.word	0x58024400
 800a6d0:	03d09000 	.word	0x03d09000
 800a6d4:	003d0900 	.word	0x003d0900
 800a6d8:	017d7840 	.word	0x017d7840
 800a6dc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a6e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6e4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800a6e8:	430b      	orrs	r3, r1
 800a6ea:	f040 809c 	bne.w	800a826 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a6ee:	4b9e      	ldr	r3, [pc, #632]	; (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6f2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a6f6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a6fe:	d054      	beq.n	800a7aa <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a702:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a706:	f200 808b 	bhi.w	800a820 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a70c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a710:	f000 8083 	beq.w	800a81a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a716:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a71a:	f200 8081 	bhi.w	800a820 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a720:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a724:	d02f      	beq.n	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a728:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a72c:	d878      	bhi.n	800a820 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a730:	2b00      	cmp	r3, #0
 800a732:	d004      	beq.n	800a73e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a736:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a73a:	d012      	beq.n	800a762 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a73c:	e070      	b.n	800a820 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a73e:	4b8a      	ldr	r3, [pc, #552]	; (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a746:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a74a:	d107      	bne.n	800a75c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a74c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a750:	4618      	mov	r0, r3
 800a752:	f000 feaf 	bl	800b4b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a758:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a75a:	e3e4      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a75c:	2300      	movs	r3, #0
 800a75e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a760:	e3e1      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a762:	4b81      	ldr	r3, [pc, #516]	; (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a76a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a76e:	d107      	bne.n	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a770:	f107 0318 	add.w	r3, r7, #24
 800a774:	4618      	mov	r0, r3
 800a776:	f000 fbf5 	bl	800af64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a77a:	69bb      	ldr	r3, [r7, #24]
 800a77c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a77e:	e3d2      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a780:	2300      	movs	r3, #0
 800a782:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a784:	e3cf      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a786:	4b78      	ldr	r3, [pc, #480]	; (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a78e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a792:	d107      	bne.n	800a7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a794:	f107 030c 	add.w	r3, r7, #12
 800a798:	4618      	mov	r0, r3
 800a79a:	f000 fd37 	bl	800b20c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7a2:	e3c0      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7a8:	e3bd      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a7aa:	4b6f      	ldr	r3, [pc, #444]	; (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a7b2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a7b4:	4b6c      	ldr	r3, [pc, #432]	; (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f003 0304 	and.w	r3, r3, #4
 800a7bc:	2b04      	cmp	r3, #4
 800a7be:	d10c      	bne.n	800a7da <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a7c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d109      	bne.n	800a7da <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a7c6:	4b68      	ldr	r3, [pc, #416]	; (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	08db      	lsrs	r3, r3, #3
 800a7cc:	f003 0303 	and.w	r3, r3, #3
 800a7d0:	4a66      	ldr	r2, [pc, #408]	; (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a7d2:	fa22 f303 	lsr.w	r3, r2, r3
 800a7d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7d8:	e01e      	b.n	800a818 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a7da:	4b63      	ldr	r3, [pc, #396]	; (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7e6:	d106      	bne.n	800a7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a7e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a7ee:	d102      	bne.n	800a7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a7f0:	4b5f      	ldr	r3, [pc, #380]	; (800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a7f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7f4:	e010      	b.n	800a818 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a7f6:	4b5c      	ldr	r3, [pc, #368]	; (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a802:	d106      	bne.n	800a812 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a806:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a80a:	d102      	bne.n	800a812 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a80c:	4b59      	ldr	r3, [pc, #356]	; (800a974 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a80e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a810:	e002      	b.n	800a818 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a812:	2300      	movs	r3, #0
 800a814:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a816:	e386      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a818:	e385      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a81a:	4b57      	ldr	r3, [pc, #348]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a81c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a81e:	e382      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a820:	2300      	movs	r3, #0
 800a822:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a824:	e37f      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a826:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a82a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800a82e:	430b      	orrs	r3, r1
 800a830:	f040 80a7 	bne.w	800a982 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a834:	4b4c      	ldr	r3, [pc, #304]	; (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a838:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a83c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a840:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a844:	d055      	beq.n	800a8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a848:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a84c:	f200 8096 	bhi.w	800a97c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a852:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a856:	f000 8084 	beq.w	800a962 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a85c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a860:	f200 808c 	bhi.w	800a97c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a866:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a86a:	d030      	beq.n	800a8ce <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a86e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a872:	f200 8083 	bhi.w	800a97c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d004      	beq.n	800a886 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a87e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a882:	d012      	beq.n	800a8aa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a884:	e07a      	b.n	800a97c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a886:	4b38      	ldr	r3, [pc, #224]	; (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a88e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a892:	d107      	bne.n	800a8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a898:	4618      	mov	r0, r3
 800a89a:	f000 fe0b 	bl	800b4b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8a2:	e340      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8a8:	e33d      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8aa:	4b2f      	ldr	r3, [pc, #188]	; (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a8b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a8b6:	d107      	bne.n	800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8b8:	f107 0318 	add.w	r3, r7, #24
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f000 fb51 	bl	800af64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a8c2:	69bb      	ldr	r3, [r7, #24]
 800a8c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8c6:	e32e      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8cc:	e32b      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a8ce:	4b26      	ldr	r3, [pc, #152]	; (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a8d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8da:	d107      	bne.n	800a8ec <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8dc:	f107 030c 	add.w	r3, r7, #12
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f000 fc93 	bl	800b20c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8ea:	e31c      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8f0:	e319      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a8f2:	4b1d      	ldr	r3, [pc, #116]	; (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a8f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a8fa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a8fc:	4b1a      	ldr	r3, [pc, #104]	; (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f003 0304 	and.w	r3, r3, #4
 800a904:	2b04      	cmp	r3, #4
 800a906:	d10c      	bne.n	800a922 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d109      	bne.n	800a922 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a90e:	4b16      	ldr	r3, [pc, #88]	; (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	08db      	lsrs	r3, r3, #3
 800a914:	f003 0303 	and.w	r3, r3, #3
 800a918:	4a14      	ldr	r2, [pc, #80]	; (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a91a:	fa22 f303 	lsr.w	r3, r2, r3
 800a91e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a920:	e01e      	b.n	800a960 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a922:	4b11      	ldr	r3, [pc, #68]	; (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a92a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a92e:	d106      	bne.n	800a93e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a932:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a936:	d102      	bne.n	800a93e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a938:	4b0d      	ldr	r3, [pc, #52]	; (800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a93a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a93c:	e010      	b.n	800a960 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a93e:	4b0a      	ldr	r3, [pc, #40]	; (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a946:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a94a:	d106      	bne.n	800a95a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a94c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a94e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a952:	d102      	bne.n	800a95a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a954:	4b07      	ldr	r3, [pc, #28]	; (800a974 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a956:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a958:	e002      	b.n	800a960 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a95a:	2300      	movs	r3, #0
 800a95c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a95e:	e2e2      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a960:	e2e1      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a962:	4b05      	ldr	r3, [pc, #20]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a964:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a966:	e2de      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a968:	58024400 	.word	0x58024400
 800a96c:	03d09000 	.word	0x03d09000
 800a970:	003d0900 	.word	0x003d0900
 800a974:	017d7840 	.word	0x017d7840
 800a978:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a97c:	2300      	movs	r3, #0
 800a97e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a980:	e2d1      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a982:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a986:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800a98a:	430b      	orrs	r3, r1
 800a98c:	f040 809c 	bne.w	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a990:	4b93      	ldr	r3, [pc, #588]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a994:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a998:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a99c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a9a0:	d054      	beq.n	800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a9a8:	f200 808b 	bhi.w	800aac2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a9b2:	f000 8083 	beq.w	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a9bc:	f200 8081 	bhi.w	800aac2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9c6:	d02f      	beq.n	800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9ce:	d878      	bhi.n	800aac2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d004      	beq.n	800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9dc:	d012      	beq.n	800aa04 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a9de:	e070      	b.n	800aac2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a9e0:	4b7f      	ldr	r3, [pc, #508]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9ec:	d107      	bne.n	800a9fe <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a9ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f000 fd5e 	bl	800b4b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9fc:	e293      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa02:	e290      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa04:	4b76      	ldr	r3, [pc, #472]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa10:	d107      	bne.n	800aa22 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa12:	f107 0318 	add.w	r3, r7, #24
 800aa16:	4618      	mov	r0, r3
 800aa18:	f000 faa4 	bl	800af64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa1c:	69bb      	ldr	r3, [r7, #24]
 800aa1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa20:	e281      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa22:	2300      	movs	r3, #0
 800aa24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa26:	e27e      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa28:	4b6d      	ldr	r3, [pc, #436]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa34:	d107      	bne.n	800aa46 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa36:	f107 030c 	add.w	r3, r7, #12
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f000 fbe6 	bl	800b20c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa44:	e26f      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa46:	2300      	movs	r3, #0
 800aa48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa4a:	e26c      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aa4c:	4b64      	ldr	r3, [pc, #400]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aa54:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa56:	4b62      	ldr	r3, [pc, #392]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f003 0304 	and.w	r3, r3, #4
 800aa5e:	2b04      	cmp	r3, #4
 800aa60:	d10c      	bne.n	800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800aa62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d109      	bne.n	800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa68:	4b5d      	ldr	r3, [pc, #372]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	08db      	lsrs	r3, r3, #3
 800aa6e:	f003 0303 	and.w	r3, r3, #3
 800aa72:	4a5c      	ldr	r2, [pc, #368]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800aa74:	fa22 f303 	lsr.w	r3, r2, r3
 800aa78:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa7a:	e01e      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa7c:	4b58      	ldr	r3, [pc, #352]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa88:	d106      	bne.n	800aa98 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800aa8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa90:	d102      	bne.n	800aa98 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aa92:	4b55      	ldr	r3, [pc, #340]	; (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800aa94:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa96:	e010      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa98:	4b51      	ldr	r3, [pc, #324]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aaa0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aaa4:	d106      	bne.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800aaa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aaac:	d102      	bne.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aaae:	4b4f      	ldr	r3, [pc, #316]	; (800abec <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800aab0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aab2:	e002      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aab4:	2300      	movs	r3, #0
 800aab6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800aab8:	e235      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aaba:	e234      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aabc:	4b4c      	ldr	r3, [pc, #304]	; (800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800aabe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aac0:	e231      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800aac2:	2300      	movs	r3, #0
 800aac4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aac6:	e22e      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800aac8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aacc:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800aad0:	430b      	orrs	r3, r1
 800aad2:	f040 808f 	bne.w	800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800aad6:	4b42      	ldr	r3, [pc, #264]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aada:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800aade:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800aae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aae2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aae6:	d06b      	beq.n	800abc0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800aae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aaee:	d874      	bhi.n	800abda <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800aaf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aaf6:	d056      	beq.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800aaf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aafa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aafe:	d86c      	bhi.n	800abda <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ab00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab02:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ab06:	d03b      	beq.n	800ab80 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800ab08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab0a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ab0e:	d864      	bhi.n	800abda <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ab10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab16:	d021      	beq.n	800ab5c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800ab18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab1e:	d85c      	bhi.n	800abda <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ab20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d004      	beq.n	800ab30 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800ab26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab2c:	d004      	beq.n	800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800ab2e:	e054      	b.n	800abda <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800ab30:	f7fe fa4c 	bl	8008fcc <HAL_RCC_GetPCLK1Freq>
 800ab34:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ab36:	e1f6      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab38:	4b29      	ldr	r3, [pc, #164]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab44:	d107      	bne.n	800ab56 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab46:	f107 0318 	add.w	r3, r7, #24
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f000 fa0a 	bl	800af64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ab50:	69fb      	ldr	r3, [r7, #28]
 800ab52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab54:	e1e7      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab56:	2300      	movs	r3, #0
 800ab58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab5a:	e1e4      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab5c:	4b20      	ldr	r3, [pc, #128]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab68:	d107      	bne.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab6a:	f107 030c 	add.w	r3, r7, #12
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f000 fb4c 	bl	800b20c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab78:	e1d5      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab7e:	e1d2      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ab80:	4b17      	ldr	r3, [pc, #92]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f003 0304 	and.w	r3, r3, #4
 800ab88:	2b04      	cmp	r3, #4
 800ab8a:	d109      	bne.n	800aba0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab8c:	4b14      	ldr	r3, [pc, #80]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	08db      	lsrs	r3, r3, #3
 800ab92:	f003 0303 	and.w	r3, r3, #3
 800ab96:	4a13      	ldr	r2, [pc, #76]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ab98:	fa22 f303 	lsr.w	r3, r2, r3
 800ab9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab9e:	e1c2      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aba0:	2300      	movs	r3, #0
 800aba2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aba4:	e1bf      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800aba6:	4b0e      	ldr	r3, [pc, #56]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abb2:	d102      	bne.n	800abba <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800abb4:	4b0c      	ldr	r3, [pc, #48]	; (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800abb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abb8:	e1b5      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abba:	2300      	movs	r3, #0
 800abbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abbe:	e1b2      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800abc0:	4b07      	ldr	r3, [pc, #28]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abcc:	d102      	bne.n	800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800abce:	4b07      	ldr	r3, [pc, #28]	; (800abec <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800abd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abd2:	e1a8      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abd4:	2300      	movs	r3, #0
 800abd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abd8:	e1a5      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800abda:	2300      	movs	r3, #0
 800abdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abde:	e1a2      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800abe0:	58024400 	.word	0x58024400
 800abe4:	03d09000 	.word	0x03d09000
 800abe8:	003d0900 	.word	0x003d0900
 800abec:	017d7840 	.word	0x017d7840
 800abf0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800abf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abf8:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800abfc:	430b      	orrs	r3, r1
 800abfe:	d173      	bne.n	800ace8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ac00:	4b9c      	ldr	r3, [pc, #624]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ac08:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ac0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac10:	d02f      	beq.n	800ac72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ac12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac18:	d863      	bhi.n	800ace2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800ac1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d004      	beq.n	800ac2a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800ac20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac26:	d012      	beq.n	800ac4e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800ac28:	e05b      	b.n	800ace2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac2a:	4b92      	ldr	r3, [pc, #584]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac36:	d107      	bne.n	800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac38:	f107 0318 	add.w	r3, r7, #24
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f000 f991 	bl	800af64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ac42:	69bb      	ldr	r3, [r7, #24]
 800ac44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac46:	e16e      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac4c:	e16b      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac4e:	4b89      	ldr	r3, [pc, #548]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac5a:	d107      	bne.n	800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac5c:	f107 030c 	add.w	r3, r7, #12
 800ac60:	4618      	mov	r0, r3
 800ac62:	f000 fad3 	bl	800b20c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac6a:	e15c      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac70:	e159      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ac72:	4b80      	ldr	r3, [pc, #512]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ac7a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac7c:	4b7d      	ldr	r3, [pc, #500]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f003 0304 	and.w	r3, r3, #4
 800ac84:	2b04      	cmp	r3, #4
 800ac86:	d10c      	bne.n	800aca2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800ac88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d109      	bne.n	800aca2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac8e:	4b79      	ldr	r3, [pc, #484]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	08db      	lsrs	r3, r3, #3
 800ac94:	f003 0303 	and.w	r3, r3, #3
 800ac98:	4a77      	ldr	r2, [pc, #476]	; (800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ac9a:	fa22 f303 	lsr.w	r3, r2, r3
 800ac9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aca0:	e01e      	b.n	800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aca2:	4b74      	ldr	r3, [pc, #464]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acae:	d106      	bne.n	800acbe <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800acb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800acb6:	d102      	bne.n	800acbe <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800acb8:	4b70      	ldr	r3, [pc, #448]	; (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800acba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acbc:	e010      	b.n	800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800acbe:	4b6d      	ldr	r3, [pc, #436]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acca:	d106      	bne.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800accc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acd2:	d102      	bne.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800acd4:	4b6a      	ldr	r3, [pc, #424]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800acd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acd8:	e002      	b.n	800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800acda:	2300      	movs	r3, #0
 800acdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800acde:	e122      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ace0:	e121      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ace2:	2300      	movs	r3, #0
 800ace4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ace6:	e11e      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ace8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acec:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800acf0:	430b      	orrs	r3, r1
 800acf2:	d133      	bne.n	800ad5c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800acf4:	4b5f      	ldr	r3, [pc, #380]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800acf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800acfc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800acfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d004      	beq.n	800ad0e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800ad04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad0a:	d012      	beq.n	800ad32 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800ad0c:	e023      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad0e:	4b59      	ldr	r3, [pc, #356]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad1a:	d107      	bne.n	800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad20:	4618      	mov	r0, r3
 800ad22:	f000 fbc7 	bl	800b4b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad2a:	e0fc      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad30:	e0f9      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad32:	4b50      	ldr	r3, [pc, #320]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad3e:	d107      	bne.n	800ad50 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad40:	f107 0318 	add.w	r3, r7, #24
 800ad44:	4618      	mov	r0, r3
 800ad46:	f000 f90d 	bl	800af64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ad4a:	6a3b      	ldr	r3, [r7, #32]
 800ad4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad4e:	e0ea      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad50:	2300      	movs	r3, #0
 800ad52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad54:	e0e7      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ad56:	2300      	movs	r3, #0
 800ad58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad5a:	e0e4      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ad5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad60:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800ad64:	430b      	orrs	r3, r1
 800ad66:	f040 808d 	bne.w	800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800ad6a:	4b42      	ldr	r3, [pc, #264]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad6e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800ad72:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ad74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad7a:	d06b      	beq.n	800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800ad7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad82:	d874      	bhi.n	800ae6e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ad84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad8a:	d056      	beq.n	800ae3a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800ad8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad92:	d86c      	bhi.n	800ae6e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ad94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad96:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad9a:	d03b      	beq.n	800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800ad9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ada2:	d864      	bhi.n	800ae6e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ada4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ada6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adaa:	d021      	beq.n	800adf0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800adac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adb2:	d85c      	bhi.n	800ae6e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800adb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d004      	beq.n	800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800adba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800adc0:	d004      	beq.n	800adcc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800adc2:	e054      	b.n	800ae6e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800adc4:	f000 f8b8 	bl	800af38 <HAL_RCCEx_GetD3PCLK1Freq>
 800adc8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800adca:	e0ac      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800adcc:	4b29      	ldr	r3, [pc, #164]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800add4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800add8:	d107      	bne.n	800adea <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800adda:	f107 0318 	add.w	r3, r7, #24
 800adde:	4618      	mov	r0, r3
 800ade0:	f000 f8c0 	bl	800af64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ade4:	69fb      	ldr	r3, [r7, #28]
 800ade6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ade8:	e09d      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800adea:	2300      	movs	r3, #0
 800adec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adee:	e09a      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800adf0:	4b20      	ldr	r3, [pc, #128]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800adf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adfc:	d107      	bne.n	800ae0e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adfe:	f107 030c 	add.w	r3, r7, #12
 800ae02:	4618      	mov	r0, r3
 800ae04:	f000 fa02 	bl	800b20c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae0c:	e08b      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae12:	e088      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ae14:	4b17      	ldr	r3, [pc, #92]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f003 0304 	and.w	r3, r3, #4
 800ae1c:	2b04      	cmp	r3, #4
 800ae1e:	d109      	bne.n	800ae34 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae20:	4b14      	ldr	r3, [pc, #80]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	08db      	lsrs	r3, r3, #3
 800ae26:	f003 0303 	and.w	r3, r3, #3
 800ae2a:	4a13      	ldr	r2, [pc, #76]	; (800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ae2c:	fa22 f303 	lsr.w	r3, r2, r3
 800ae30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae32:	e078      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae34:	2300      	movs	r3, #0
 800ae36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae38:	e075      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ae3a:	4b0e      	ldr	r3, [pc, #56]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae46:	d102      	bne.n	800ae4e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800ae48:	4b0c      	ldr	r3, [pc, #48]	; (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ae4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae4c:	e06b      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae52:	e068      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ae54:	4b07      	ldr	r3, [pc, #28]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae60:	d102      	bne.n	800ae68 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800ae62:	4b07      	ldr	r3, [pc, #28]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ae64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae66:	e05e      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae6c:	e05b      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae72:	e058      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ae74:	58024400 	.word	0x58024400
 800ae78:	03d09000 	.word	0x03d09000
 800ae7c:	003d0900 	.word	0x003d0900
 800ae80:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ae84:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae88:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800ae8c:	430b      	orrs	r3, r1
 800ae8e:	d148      	bne.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ae90:	4b27      	ldr	r3, [pc, #156]	; (800af30 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ae92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ae98:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ae9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aea0:	d02a      	beq.n	800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800aea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aea8:	d838      	bhi.n	800af1c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800aeaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d004      	beq.n	800aeba <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800aeb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aeb6:	d00d      	beq.n	800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800aeb8:	e030      	b.n	800af1c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aeba:	4b1d      	ldr	r3, [pc, #116]	; (800af30 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aec2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aec6:	d102      	bne.n	800aece <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800aec8:	4b1a      	ldr	r3, [pc, #104]	; (800af34 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800aeca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aecc:	e02b      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aece:	2300      	movs	r3, #0
 800aed0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aed2:	e028      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aed4:	4b16      	ldr	r3, [pc, #88]	; (800af30 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aedc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aee0:	d107      	bne.n	800aef2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aee2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aee6:	4618      	mov	r0, r3
 800aee8:	f000 fae4 	bl	800b4b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aeec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aef0:	e019      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aef2:	2300      	movs	r3, #0
 800aef4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aef6:	e016      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aef8:	4b0d      	ldr	r3, [pc, #52]	; (800af30 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af04:	d107      	bne.n	800af16 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af06:	f107 0318 	add.w	r3, r7, #24
 800af0a:	4618      	mov	r0, r3
 800af0c:	f000 f82a 	bl	800af64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800af10:	69fb      	ldr	r3, [r7, #28]
 800af12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af14:	e007      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af16:	2300      	movs	r3, #0
 800af18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af1a:	e004      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800af1c:	2300      	movs	r3, #0
 800af1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af20:	e001      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800af22:	2300      	movs	r3, #0
 800af24:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800af26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3740      	adds	r7, #64	; 0x40
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}
 800af30:	58024400 	.word	0x58024400
 800af34:	017d7840 	.word	0x017d7840

0800af38 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800af3c:	f7fe f816 	bl	8008f6c <HAL_RCC_GetHCLKFreq>
 800af40:	4602      	mov	r2, r0
 800af42:	4b06      	ldr	r3, [pc, #24]	; (800af5c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800af44:	6a1b      	ldr	r3, [r3, #32]
 800af46:	091b      	lsrs	r3, r3, #4
 800af48:	f003 0307 	and.w	r3, r3, #7
 800af4c:	4904      	ldr	r1, [pc, #16]	; (800af60 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800af4e:	5ccb      	ldrb	r3, [r1, r3]
 800af50:	f003 031f 	and.w	r3, r3, #31
 800af54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800af58:	4618      	mov	r0, r3
 800af5a:	bd80      	pop	{r7, pc}
 800af5c:	58024400 	.word	0x58024400
 800af60:	08012a78 	.word	0x08012a78

0800af64 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800af64:	b480      	push	{r7}
 800af66:	b089      	sub	sp, #36	; 0x24
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af6c:	4ba1      	ldr	r3, [pc, #644]	; (800b1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af70:	f003 0303 	and.w	r3, r3, #3
 800af74:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800af76:	4b9f      	ldr	r3, [pc, #636]	; (800b1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af7a:	0b1b      	lsrs	r3, r3, #12
 800af7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af80:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800af82:	4b9c      	ldr	r3, [pc, #624]	; (800b1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af86:	091b      	lsrs	r3, r3, #4
 800af88:	f003 0301 	and.w	r3, r3, #1
 800af8c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800af8e:	4b99      	ldr	r3, [pc, #612]	; (800b1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af92:	08db      	lsrs	r3, r3, #3
 800af94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af98:	693a      	ldr	r2, [r7, #16]
 800af9a:	fb02 f303 	mul.w	r3, r2, r3
 800af9e:	ee07 3a90 	vmov	s15, r3
 800afa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afa6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	2b00      	cmp	r3, #0
 800afae:	f000 8111 	beq.w	800b1d4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800afb2:	69bb      	ldr	r3, [r7, #24]
 800afb4:	2b02      	cmp	r3, #2
 800afb6:	f000 8083 	beq.w	800b0c0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800afba:	69bb      	ldr	r3, [r7, #24]
 800afbc:	2b02      	cmp	r3, #2
 800afbe:	f200 80a1 	bhi.w	800b104 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800afc2:	69bb      	ldr	r3, [r7, #24]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d003      	beq.n	800afd0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800afc8:	69bb      	ldr	r3, [r7, #24]
 800afca:	2b01      	cmp	r3, #1
 800afcc:	d056      	beq.n	800b07c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800afce:	e099      	b.n	800b104 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800afd0:	4b88      	ldr	r3, [pc, #544]	; (800b1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f003 0320 	and.w	r3, r3, #32
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d02d      	beq.n	800b038 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800afdc:	4b85      	ldr	r3, [pc, #532]	; (800b1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	08db      	lsrs	r3, r3, #3
 800afe2:	f003 0303 	and.w	r3, r3, #3
 800afe6:	4a84      	ldr	r2, [pc, #528]	; (800b1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800afe8:	fa22 f303 	lsr.w	r3, r2, r3
 800afec:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	ee07 3a90 	vmov	s15, r3
 800aff4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	ee07 3a90 	vmov	s15, r3
 800affe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b006:	4b7b      	ldr	r3, [pc, #492]	; (800b1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b00a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b00e:	ee07 3a90 	vmov	s15, r3
 800b012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b016:	ed97 6a03 	vldr	s12, [r7, #12]
 800b01a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b1fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b01e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b026:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b02a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b02e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b032:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b036:	e087      	b.n	800b148 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	ee07 3a90 	vmov	s15, r3
 800b03e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b042:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b200 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b04a:	4b6a      	ldr	r3, [pc, #424]	; (800b1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b04c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b04e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b052:	ee07 3a90 	vmov	s15, r3
 800b056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b05a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b05e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b1fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b06a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b06e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b072:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b076:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b07a:	e065      	b.n	800b148 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	ee07 3a90 	vmov	s15, r3
 800b082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b086:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b204 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b08a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b08e:	4b59      	ldr	r3, [pc, #356]	; (800b1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b096:	ee07 3a90 	vmov	s15, r3
 800b09a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b09e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b1fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b0a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0be:	e043      	b.n	800b148 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b0c0:	697b      	ldr	r3, [r7, #20]
 800b0c2:	ee07 3a90 	vmov	s15, r3
 800b0c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b208 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b0ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0d2:	4b48      	ldr	r3, [pc, #288]	; (800b1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0da:	ee07 3a90 	vmov	s15, r3
 800b0de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b1fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b0ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b102:	e021      	b.n	800b148 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	ee07 3a90 	vmov	s15, r3
 800b10a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b10e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b204 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b116:	4b37      	ldr	r3, [pc, #220]	; (800b1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b11a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b11e:	ee07 3a90 	vmov	s15, r3
 800b122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b126:	ed97 6a03 	vldr	s12, [r7, #12]
 800b12a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b1fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b12e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b136:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b13a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b13e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b142:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b146:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b148:	4b2a      	ldr	r3, [pc, #168]	; (800b1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b14a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b14c:	0a5b      	lsrs	r3, r3, #9
 800b14e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b152:	ee07 3a90 	vmov	s15, r3
 800b156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b15a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b15e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b162:	edd7 6a07 	vldr	s13, [r7, #28]
 800b166:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b16a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b16e:	ee17 2a90 	vmov	r2, s15
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b176:	4b1f      	ldr	r3, [pc, #124]	; (800b1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b17a:	0c1b      	lsrs	r3, r3, #16
 800b17c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b180:	ee07 3a90 	vmov	s15, r3
 800b184:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b188:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b18c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b190:	edd7 6a07 	vldr	s13, [r7, #28]
 800b194:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b198:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b19c:	ee17 2a90 	vmov	r2, s15
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b1a4:	4b13      	ldr	r3, [pc, #76]	; (800b1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1a8:	0e1b      	lsrs	r3, r3, #24
 800b1aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1ae:	ee07 3a90 	vmov	s15, r3
 800b1b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b1ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1be:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1ca:	ee17 2a90 	vmov	r2, s15
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b1d2:	e008      	b.n	800b1e6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	609a      	str	r2, [r3, #8]
}
 800b1e6:	bf00      	nop
 800b1e8:	3724      	adds	r7, #36	; 0x24
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f0:	4770      	bx	lr
 800b1f2:	bf00      	nop
 800b1f4:	58024400 	.word	0x58024400
 800b1f8:	03d09000 	.word	0x03d09000
 800b1fc:	46000000 	.word	0x46000000
 800b200:	4c742400 	.word	0x4c742400
 800b204:	4a742400 	.word	0x4a742400
 800b208:	4bbebc20 	.word	0x4bbebc20

0800b20c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b20c:	b480      	push	{r7}
 800b20e:	b089      	sub	sp, #36	; 0x24
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b214:	4ba1      	ldr	r3, [pc, #644]	; (800b49c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b218:	f003 0303 	and.w	r3, r3, #3
 800b21c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b21e:	4b9f      	ldr	r3, [pc, #636]	; (800b49c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b222:	0d1b      	lsrs	r3, r3, #20
 800b224:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b228:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b22a:	4b9c      	ldr	r3, [pc, #624]	; (800b49c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b22c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b22e:	0a1b      	lsrs	r3, r3, #8
 800b230:	f003 0301 	and.w	r3, r3, #1
 800b234:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b236:	4b99      	ldr	r3, [pc, #612]	; (800b49c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b23a:	08db      	lsrs	r3, r3, #3
 800b23c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b240:	693a      	ldr	r2, [r7, #16]
 800b242:	fb02 f303 	mul.w	r3, r2, r3
 800b246:	ee07 3a90 	vmov	s15, r3
 800b24a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b24e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	2b00      	cmp	r3, #0
 800b256:	f000 8111 	beq.w	800b47c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b25a:	69bb      	ldr	r3, [r7, #24]
 800b25c:	2b02      	cmp	r3, #2
 800b25e:	f000 8083 	beq.w	800b368 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b262:	69bb      	ldr	r3, [r7, #24]
 800b264:	2b02      	cmp	r3, #2
 800b266:	f200 80a1 	bhi.w	800b3ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b26a:	69bb      	ldr	r3, [r7, #24]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d003      	beq.n	800b278 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b270:	69bb      	ldr	r3, [r7, #24]
 800b272:	2b01      	cmp	r3, #1
 800b274:	d056      	beq.n	800b324 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b276:	e099      	b.n	800b3ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b278:	4b88      	ldr	r3, [pc, #544]	; (800b49c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f003 0320 	and.w	r3, r3, #32
 800b280:	2b00      	cmp	r3, #0
 800b282:	d02d      	beq.n	800b2e0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b284:	4b85      	ldr	r3, [pc, #532]	; (800b49c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	08db      	lsrs	r3, r3, #3
 800b28a:	f003 0303 	and.w	r3, r3, #3
 800b28e:	4a84      	ldr	r2, [pc, #528]	; (800b4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b290:	fa22 f303 	lsr.w	r3, r2, r3
 800b294:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	ee07 3a90 	vmov	s15, r3
 800b29c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2a0:	697b      	ldr	r3, [r7, #20]
 800b2a2:	ee07 3a90 	vmov	s15, r3
 800b2a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2ae:	4b7b      	ldr	r3, [pc, #492]	; (800b49c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2b6:	ee07 3a90 	vmov	s15, r3
 800b2ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2be:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b2c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b2de:	e087      	b.n	800b3f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	ee07 3a90 	vmov	s15, r3
 800b2e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2ea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b4a8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b2ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2f2:	4b6a      	ldr	r3, [pc, #424]	; (800b49c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2fa:	ee07 3a90 	vmov	s15, r3
 800b2fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b302:	ed97 6a03 	vldr	s12, [r7, #12]
 800b306:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b30a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b30e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b312:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b31a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b31e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b322:	e065      	b.n	800b3f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b324:	697b      	ldr	r3, [r7, #20]
 800b326:	ee07 3a90 	vmov	s15, r3
 800b32a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b32e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b4ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b336:	4b59      	ldr	r3, [pc, #356]	; (800b49c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b33a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b33e:	ee07 3a90 	vmov	s15, r3
 800b342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b346:	ed97 6a03 	vldr	s12, [r7, #12]
 800b34a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b34e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b356:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b35a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b35e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b362:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b366:	e043      	b.n	800b3f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	ee07 3a90 	vmov	s15, r3
 800b36e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b372:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b4b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b37a:	4b48      	ldr	r3, [pc, #288]	; (800b49c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b37c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b37e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b382:	ee07 3a90 	vmov	s15, r3
 800b386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b38a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b38e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b39a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b39e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3aa:	e021      	b.n	800b3f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b3ac:	697b      	ldr	r3, [r7, #20]
 800b3ae:	ee07 3a90 	vmov	s15, r3
 800b3b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b4ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b3ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3be:	4b37      	ldr	r3, [pc, #220]	; (800b49c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3c6:	ee07 3a90 	vmov	s15, r3
 800b3ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b3d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3ee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b3f0:	4b2a      	ldr	r3, [pc, #168]	; (800b49c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3f4:	0a5b      	lsrs	r3, r3, #9
 800b3f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3fa:	ee07 3a90 	vmov	s15, r3
 800b3fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b402:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b406:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b40a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b40e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b412:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b416:	ee17 2a90 	vmov	r2, s15
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b41e:	4b1f      	ldr	r3, [pc, #124]	; (800b49c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b422:	0c1b      	lsrs	r3, r3, #16
 800b424:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b428:	ee07 3a90 	vmov	s15, r3
 800b42c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b430:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b434:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b438:	edd7 6a07 	vldr	s13, [r7, #28]
 800b43c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b440:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b444:	ee17 2a90 	vmov	r2, s15
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b44c:	4b13      	ldr	r3, [pc, #76]	; (800b49c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b44e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b450:	0e1b      	lsrs	r3, r3, #24
 800b452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b456:	ee07 3a90 	vmov	s15, r3
 800b45a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b45e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b462:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b466:	edd7 6a07 	vldr	s13, [r7, #28]
 800b46a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b46e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b472:	ee17 2a90 	vmov	r2, s15
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b47a:	e008      	b.n	800b48e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2200      	movs	r2, #0
 800b480:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2200      	movs	r2, #0
 800b486:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2200      	movs	r2, #0
 800b48c:	609a      	str	r2, [r3, #8]
}
 800b48e:	bf00      	nop
 800b490:	3724      	adds	r7, #36	; 0x24
 800b492:	46bd      	mov	sp, r7
 800b494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b498:	4770      	bx	lr
 800b49a:	bf00      	nop
 800b49c:	58024400 	.word	0x58024400
 800b4a0:	03d09000 	.word	0x03d09000
 800b4a4:	46000000 	.word	0x46000000
 800b4a8:	4c742400 	.word	0x4c742400
 800b4ac:	4a742400 	.word	0x4a742400
 800b4b0:	4bbebc20 	.word	0x4bbebc20

0800b4b4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b089      	sub	sp, #36	; 0x24
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b4bc:	4ba0      	ldr	r3, [pc, #640]	; (800b740 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4c0:	f003 0303 	and.w	r3, r3, #3
 800b4c4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b4c6:	4b9e      	ldr	r3, [pc, #632]	; (800b740 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4ca:	091b      	lsrs	r3, r3, #4
 800b4cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b4d0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b4d2:	4b9b      	ldr	r3, [pc, #620]	; (800b740 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4d6:	f003 0301 	and.w	r3, r3, #1
 800b4da:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b4dc:	4b98      	ldr	r3, [pc, #608]	; (800b740 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4e0:	08db      	lsrs	r3, r3, #3
 800b4e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b4e6:	693a      	ldr	r2, [r7, #16]
 800b4e8:	fb02 f303 	mul.w	r3, r2, r3
 800b4ec:	ee07 3a90 	vmov	s15, r3
 800b4f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4f4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	f000 8111 	beq.w	800b722 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b500:	69bb      	ldr	r3, [r7, #24]
 800b502:	2b02      	cmp	r3, #2
 800b504:	f000 8083 	beq.w	800b60e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b508:	69bb      	ldr	r3, [r7, #24]
 800b50a:	2b02      	cmp	r3, #2
 800b50c:	f200 80a1 	bhi.w	800b652 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b510:	69bb      	ldr	r3, [r7, #24]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d003      	beq.n	800b51e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b516:	69bb      	ldr	r3, [r7, #24]
 800b518:	2b01      	cmp	r3, #1
 800b51a:	d056      	beq.n	800b5ca <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b51c:	e099      	b.n	800b652 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b51e:	4b88      	ldr	r3, [pc, #544]	; (800b740 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f003 0320 	and.w	r3, r3, #32
 800b526:	2b00      	cmp	r3, #0
 800b528:	d02d      	beq.n	800b586 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b52a:	4b85      	ldr	r3, [pc, #532]	; (800b740 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	08db      	lsrs	r3, r3, #3
 800b530:	f003 0303 	and.w	r3, r3, #3
 800b534:	4a83      	ldr	r2, [pc, #524]	; (800b744 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b536:	fa22 f303 	lsr.w	r3, r2, r3
 800b53a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	ee07 3a90 	vmov	s15, r3
 800b542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	ee07 3a90 	vmov	s15, r3
 800b54c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b550:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b554:	4b7a      	ldr	r3, [pc, #488]	; (800b740 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b55c:	ee07 3a90 	vmov	s15, r3
 800b560:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b564:	ed97 6a03 	vldr	s12, [r7, #12]
 800b568:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b748 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b56c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b570:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b574:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b578:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b57c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b580:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b584:	e087      	b.n	800b696 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	ee07 3a90 	vmov	s15, r3
 800b58c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b590:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b74c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b594:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b598:	4b69      	ldr	r3, [pc, #420]	; (800b740 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b59a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b59c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5a0:	ee07 3a90 	vmov	s15, r3
 800b5a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5a8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5ac:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b748 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b5b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b5c8:	e065      	b.n	800b696 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	ee07 3a90 	vmov	s15, r3
 800b5d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5d4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b750 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b5d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5dc:	4b58      	ldr	r3, [pc, #352]	; (800b740 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5e4:	ee07 3a90 	vmov	s15, r3
 800b5e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5ec:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5f0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b748 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b5f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b600:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b604:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b608:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b60c:	e043      	b.n	800b696 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	ee07 3a90 	vmov	s15, r3
 800b614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b618:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b754 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b61c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b620:	4b47      	ldr	r3, [pc, #284]	; (800b740 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b628:	ee07 3a90 	vmov	s15, r3
 800b62c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b630:	ed97 6a03 	vldr	s12, [r7, #12]
 800b634:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b748 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b638:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b63c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b640:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b644:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b64c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b650:	e021      	b.n	800b696 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	ee07 3a90 	vmov	s15, r3
 800b658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b65c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b74c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b660:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b664:	4b36      	ldr	r3, [pc, #216]	; (800b740 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b66c:	ee07 3a90 	vmov	s15, r3
 800b670:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b674:	ed97 6a03 	vldr	s12, [r7, #12]
 800b678:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b748 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b67c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b680:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b684:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b688:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b68c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b690:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b694:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b696:	4b2a      	ldr	r3, [pc, #168]	; (800b740 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b69a:	0a5b      	lsrs	r3, r3, #9
 800b69c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6a0:	ee07 3a90 	vmov	s15, r3
 800b6a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b6ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6b0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6bc:	ee17 2a90 	vmov	r2, s15
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b6c4:	4b1e      	ldr	r3, [pc, #120]	; (800b740 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6c8:	0c1b      	lsrs	r3, r3, #16
 800b6ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6ce:	ee07 3a90 	vmov	s15, r3
 800b6d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b6da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6de:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6ea:	ee17 2a90 	vmov	r2, s15
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b6f2:	4b13      	ldr	r3, [pc, #76]	; (800b740 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6f6:	0e1b      	lsrs	r3, r3, #24
 800b6f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6fc:	ee07 3a90 	vmov	s15, r3
 800b700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b704:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b708:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b70c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b710:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b714:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b718:	ee17 2a90 	vmov	r2, s15
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b720:	e008      	b.n	800b734 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2200      	movs	r2, #0
 800b726:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2200      	movs	r2, #0
 800b72c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2200      	movs	r2, #0
 800b732:	609a      	str	r2, [r3, #8]
}
 800b734:	bf00      	nop
 800b736:	3724      	adds	r7, #36	; 0x24
 800b738:	46bd      	mov	sp, r7
 800b73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73e:	4770      	bx	lr
 800b740:	58024400 	.word	0x58024400
 800b744:	03d09000 	.word	0x03d09000
 800b748:	46000000 	.word	0x46000000
 800b74c:	4c742400 	.word	0x4c742400
 800b750:	4a742400 	.word	0x4a742400
 800b754:	4bbebc20 	.word	0x4bbebc20

0800b758 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b084      	sub	sp, #16
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b762:	2300      	movs	r3, #0
 800b764:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b766:	4b53      	ldr	r3, [pc, #332]	; (800b8b4 <RCCEx_PLL2_Config+0x15c>)
 800b768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b76a:	f003 0303 	and.w	r3, r3, #3
 800b76e:	2b03      	cmp	r3, #3
 800b770:	d101      	bne.n	800b776 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b772:	2301      	movs	r3, #1
 800b774:	e099      	b.n	800b8aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b776:	4b4f      	ldr	r3, [pc, #316]	; (800b8b4 <RCCEx_PLL2_Config+0x15c>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	4a4e      	ldr	r2, [pc, #312]	; (800b8b4 <RCCEx_PLL2_Config+0x15c>)
 800b77c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b780:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b782:	f7f7 faad 	bl	8002ce0 <HAL_GetTick>
 800b786:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b788:	e008      	b.n	800b79c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b78a:	f7f7 faa9 	bl	8002ce0 <HAL_GetTick>
 800b78e:	4602      	mov	r2, r0
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	1ad3      	subs	r3, r2, r3
 800b794:	2b02      	cmp	r3, #2
 800b796:	d901      	bls.n	800b79c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b798:	2303      	movs	r3, #3
 800b79a:	e086      	b.n	800b8aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b79c:	4b45      	ldr	r3, [pc, #276]	; (800b8b4 <RCCEx_PLL2_Config+0x15c>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d1f0      	bne.n	800b78a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b7a8:	4b42      	ldr	r3, [pc, #264]	; (800b8b4 <RCCEx_PLL2_Config+0x15c>)
 800b7aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	031b      	lsls	r3, r3, #12
 800b7b6:	493f      	ldr	r1, [pc, #252]	; (800b8b4 <RCCEx_PLL2_Config+0x15c>)
 800b7b8:	4313      	orrs	r3, r2
 800b7ba:	628b      	str	r3, [r1, #40]	; 0x28
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	3b01      	subs	r3, #1
 800b7c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	689b      	ldr	r3, [r3, #8]
 800b7ca:	3b01      	subs	r3, #1
 800b7cc:	025b      	lsls	r3, r3, #9
 800b7ce:	b29b      	uxth	r3, r3
 800b7d0:	431a      	orrs	r2, r3
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	68db      	ldr	r3, [r3, #12]
 800b7d6:	3b01      	subs	r3, #1
 800b7d8:	041b      	lsls	r3, r3, #16
 800b7da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b7de:	431a      	orrs	r2, r3
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	691b      	ldr	r3, [r3, #16]
 800b7e4:	3b01      	subs	r3, #1
 800b7e6:	061b      	lsls	r3, r3, #24
 800b7e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b7ec:	4931      	ldr	r1, [pc, #196]	; (800b8b4 <RCCEx_PLL2_Config+0x15c>)
 800b7ee:	4313      	orrs	r3, r2
 800b7f0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b7f2:	4b30      	ldr	r3, [pc, #192]	; (800b8b4 <RCCEx_PLL2_Config+0x15c>)
 800b7f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	695b      	ldr	r3, [r3, #20]
 800b7fe:	492d      	ldr	r1, [pc, #180]	; (800b8b4 <RCCEx_PLL2_Config+0x15c>)
 800b800:	4313      	orrs	r3, r2
 800b802:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b804:	4b2b      	ldr	r3, [pc, #172]	; (800b8b4 <RCCEx_PLL2_Config+0x15c>)
 800b806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b808:	f023 0220 	bic.w	r2, r3, #32
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	699b      	ldr	r3, [r3, #24]
 800b810:	4928      	ldr	r1, [pc, #160]	; (800b8b4 <RCCEx_PLL2_Config+0x15c>)
 800b812:	4313      	orrs	r3, r2
 800b814:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b816:	4b27      	ldr	r3, [pc, #156]	; (800b8b4 <RCCEx_PLL2_Config+0x15c>)
 800b818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b81a:	4a26      	ldr	r2, [pc, #152]	; (800b8b4 <RCCEx_PLL2_Config+0x15c>)
 800b81c:	f023 0310 	bic.w	r3, r3, #16
 800b820:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b822:	4b24      	ldr	r3, [pc, #144]	; (800b8b4 <RCCEx_PLL2_Config+0x15c>)
 800b824:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b826:	4b24      	ldr	r3, [pc, #144]	; (800b8b8 <RCCEx_PLL2_Config+0x160>)
 800b828:	4013      	ands	r3, r2
 800b82a:	687a      	ldr	r2, [r7, #4]
 800b82c:	69d2      	ldr	r2, [r2, #28]
 800b82e:	00d2      	lsls	r2, r2, #3
 800b830:	4920      	ldr	r1, [pc, #128]	; (800b8b4 <RCCEx_PLL2_Config+0x15c>)
 800b832:	4313      	orrs	r3, r2
 800b834:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b836:	4b1f      	ldr	r3, [pc, #124]	; (800b8b4 <RCCEx_PLL2_Config+0x15c>)
 800b838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b83a:	4a1e      	ldr	r2, [pc, #120]	; (800b8b4 <RCCEx_PLL2_Config+0x15c>)
 800b83c:	f043 0310 	orr.w	r3, r3, #16
 800b840:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d106      	bne.n	800b856 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b848:	4b1a      	ldr	r3, [pc, #104]	; (800b8b4 <RCCEx_PLL2_Config+0x15c>)
 800b84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b84c:	4a19      	ldr	r2, [pc, #100]	; (800b8b4 <RCCEx_PLL2_Config+0x15c>)
 800b84e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b852:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b854:	e00f      	b.n	800b876 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	2b01      	cmp	r3, #1
 800b85a:	d106      	bne.n	800b86a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b85c:	4b15      	ldr	r3, [pc, #84]	; (800b8b4 <RCCEx_PLL2_Config+0x15c>)
 800b85e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b860:	4a14      	ldr	r2, [pc, #80]	; (800b8b4 <RCCEx_PLL2_Config+0x15c>)
 800b862:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b866:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b868:	e005      	b.n	800b876 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b86a:	4b12      	ldr	r3, [pc, #72]	; (800b8b4 <RCCEx_PLL2_Config+0x15c>)
 800b86c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b86e:	4a11      	ldr	r2, [pc, #68]	; (800b8b4 <RCCEx_PLL2_Config+0x15c>)
 800b870:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b874:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b876:	4b0f      	ldr	r3, [pc, #60]	; (800b8b4 <RCCEx_PLL2_Config+0x15c>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	4a0e      	ldr	r2, [pc, #56]	; (800b8b4 <RCCEx_PLL2_Config+0x15c>)
 800b87c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b880:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b882:	f7f7 fa2d 	bl	8002ce0 <HAL_GetTick>
 800b886:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b888:	e008      	b.n	800b89c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b88a:	f7f7 fa29 	bl	8002ce0 <HAL_GetTick>
 800b88e:	4602      	mov	r2, r0
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	1ad3      	subs	r3, r2, r3
 800b894:	2b02      	cmp	r3, #2
 800b896:	d901      	bls.n	800b89c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b898:	2303      	movs	r3, #3
 800b89a:	e006      	b.n	800b8aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b89c:	4b05      	ldr	r3, [pc, #20]	; (800b8b4 <RCCEx_PLL2_Config+0x15c>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d0f0      	beq.n	800b88a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b8a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3710      	adds	r7, #16
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}
 800b8b2:	bf00      	nop
 800b8b4:	58024400 	.word	0x58024400
 800b8b8:	ffff0007 	.word	0xffff0007

0800b8bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b8ca:	4b53      	ldr	r3, [pc, #332]	; (800ba18 <RCCEx_PLL3_Config+0x15c>)
 800b8cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8ce:	f003 0303 	and.w	r3, r3, #3
 800b8d2:	2b03      	cmp	r3, #3
 800b8d4:	d101      	bne.n	800b8da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	e099      	b.n	800ba0e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b8da:	4b4f      	ldr	r3, [pc, #316]	; (800ba18 <RCCEx_PLL3_Config+0x15c>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	4a4e      	ldr	r2, [pc, #312]	; (800ba18 <RCCEx_PLL3_Config+0x15c>)
 800b8e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b8e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b8e6:	f7f7 f9fb 	bl	8002ce0 <HAL_GetTick>
 800b8ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b8ec:	e008      	b.n	800b900 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b8ee:	f7f7 f9f7 	bl	8002ce0 <HAL_GetTick>
 800b8f2:	4602      	mov	r2, r0
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	1ad3      	subs	r3, r2, r3
 800b8f8:	2b02      	cmp	r3, #2
 800b8fa:	d901      	bls.n	800b900 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b8fc:	2303      	movs	r3, #3
 800b8fe:	e086      	b.n	800ba0e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b900:	4b45      	ldr	r3, [pc, #276]	; (800ba18 <RCCEx_PLL3_Config+0x15c>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d1f0      	bne.n	800b8ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b90c:	4b42      	ldr	r3, [pc, #264]	; (800ba18 <RCCEx_PLL3_Config+0x15c>)
 800b90e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b910:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	051b      	lsls	r3, r3, #20
 800b91a:	493f      	ldr	r1, [pc, #252]	; (800ba18 <RCCEx_PLL3_Config+0x15c>)
 800b91c:	4313      	orrs	r3, r2
 800b91e:	628b      	str	r3, [r1, #40]	; 0x28
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	685b      	ldr	r3, [r3, #4]
 800b924:	3b01      	subs	r3, #1
 800b926:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	689b      	ldr	r3, [r3, #8]
 800b92e:	3b01      	subs	r3, #1
 800b930:	025b      	lsls	r3, r3, #9
 800b932:	b29b      	uxth	r3, r3
 800b934:	431a      	orrs	r2, r3
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	68db      	ldr	r3, [r3, #12]
 800b93a:	3b01      	subs	r3, #1
 800b93c:	041b      	lsls	r3, r3, #16
 800b93e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b942:	431a      	orrs	r2, r3
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	691b      	ldr	r3, [r3, #16]
 800b948:	3b01      	subs	r3, #1
 800b94a:	061b      	lsls	r3, r3, #24
 800b94c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b950:	4931      	ldr	r1, [pc, #196]	; (800ba18 <RCCEx_PLL3_Config+0x15c>)
 800b952:	4313      	orrs	r3, r2
 800b954:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b956:	4b30      	ldr	r3, [pc, #192]	; (800ba18 <RCCEx_PLL3_Config+0x15c>)
 800b958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b95a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	695b      	ldr	r3, [r3, #20]
 800b962:	492d      	ldr	r1, [pc, #180]	; (800ba18 <RCCEx_PLL3_Config+0x15c>)
 800b964:	4313      	orrs	r3, r2
 800b966:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b968:	4b2b      	ldr	r3, [pc, #172]	; (800ba18 <RCCEx_PLL3_Config+0x15c>)
 800b96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b96c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	699b      	ldr	r3, [r3, #24]
 800b974:	4928      	ldr	r1, [pc, #160]	; (800ba18 <RCCEx_PLL3_Config+0x15c>)
 800b976:	4313      	orrs	r3, r2
 800b978:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b97a:	4b27      	ldr	r3, [pc, #156]	; (800ba18 <RCCEx_PLL3_Config+0x15c>)
 800b97c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b97e:	4a26      	ldr	r2, [pc, #152]	; (800ba18 <RCCEx_PLL3_Config+0x15c>)
 800b980:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b984:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b986:	4b24      	ldr	r3, [pc, #144]	; (800ba18 <RCCEx_PLL3_Config+0x15c>)
 800b988:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b98a:	4b24      	ldr	r3, [pc, #144]	; (800ba1c <RCCEx_PLL3_Config+0x160>)
 800b98c:	4013      	ands	r3, r2
 800b98e:	687a      	ldr	r2, [r7, #4]
 800b990:	69d2      	ldr	r2, [r2, #28]
 800b992:	00d2      	lsls	r2, r2, #3
 800b994:	4920      	ldr	r1, [pc, #128]	; (800ba18 <RCCEx_PLL3_Config+0x15c>)
 800b996:	4313      	orrs	r3, r2
 800b998:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b99a:	4b1f      	ldr	r3, [pc, #124]	; (800ba18 <RCCEx_PLL3_Config+0x15c>)
 800b99c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b99e:	4a1e      	ldr	r2, [pc, #120]	; (800ba18 <RCCEx_PLL3_Config+0x15c>)
 800b9a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b9a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d106      	bne.n	800b9ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b9ac:	4b1a      	ldr	r3, [pc, #104]	; (800ba18 <RCCEx_PLL3_Config+0x15c>)
 800b9ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b0:	4a19      	ldr	r2, [pc, #100]	; (800ba18 <RCCEx_PLL3_Config+0x15c>)
 800b9b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b9b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b9b8:	e00f      	b.n	800b9da <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	d106      	bne.n	800b9ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b9c0:	4b15      	ldr	r3, [pc, #84]	; (800ba18 <RCCEx_PLL3_Config+0x15c>)
 800b9c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9c4:	4a14      	ldr	r2, [pc, #80]	; (800ba18 <RCCEx_PLL3_Config+0x15c>)
 800b9c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b9ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b9cc:	e005      	b.n	800b9da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b9ce:	4b12      	ldr	r3, [pc, #72]	; (800ba18 <RCCEx_PLL3_Config+0x15c>)
 800b9d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9d2:	4a11      	ldr	r2, [pc, #68]	; (800ba18 <RCCEx_PLL3_Config+0x15c>)
 800b9d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b9d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b9da:	4b0f      	ldr	r3, [pc, #60]	; (800ba18 <RCCEx_PLL3_Config+0x15c>)
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	4a0e      	ldr	r2, [pc, #56]	; (800ba18 <RCCEx_PLL3_Config+0x15c>)
 800b9e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b9e6:	f7f7 f97b 	bl	8002ce0 <HAL_GetTick>
 800b9ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b9ec:	e008      	b.n	800ba00 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b9ee:	f7f7 f977 	bl	8002ce0 <HAL_GetTick>
 800b9f2:	4602      	mov	r2, r0
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	1ad3      	subs	r3, r2, r3
 800b9f8:	2b02      	cmp	r3, #2
 800b9fa:	d901      	bls.n	800ba00 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b9fc:	2303      	movs	r3, #3
 800b9fe:	e006      	b.n	800ba0e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ba00:	4b05      	ldr	r3, [pc, #20]	; (800ba18 <RCCEx_PLL3_Config+0x15c>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d0f0      	beq.n	800b9ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ba0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	3710      	adds	r7, #16
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}
 800ba16:	bf00      	nop
 800ba18:	58024400 	.word	0x58024400
 800ba1c:	ffff0007 	.word	0xffff0007

0800ba20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b082      	sub	sp, #8
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d101      	bne.n	800ba32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ba2e:	2301      	movs	r3, #1
 800ba30:	e049      	b.n	800bac6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba38:	b2db      	uxtb	r3, r3
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d106      	bne.n	800ba4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2200      	movs	r2, #0
 800ba42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f7f6 fd8a 	bl	8002560 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2202      	movs	r2, #2
 800ba50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681a      	ldr	r2, [r3, #0]
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	3304      	adds	r3, #4
 800ba5c:	4619      	mov	r1, r3
 800ba5e:	4610      	mov	r0, r2
 800ba60:	f001 fa9e 	bl	800cfa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2201      	movs	r2, #1
 800ba68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2201      	movs	r2, #1
 800ba70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2201      	movs	r2, #1
 800ba78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2201      	movs	r2, #1
 800ba80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2201      	movs	r2, #1
 800ba88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2201      	movs	r2, #1
 800ba90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2201      	movs	r2, #1
 800ba98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2201      	movs	r2, #1
 800baa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2201      	movs	r2, #1
 800baa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2201      	movs	r2, #1
 800bab0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2201      	movs	r2, #1
 800bab8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2201      	movs	r2, #1
 800bac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bac4:	2300      	movs	r3, #0
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3708      	adds	r7, #8
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}
	...

0800bad0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b085      	sub	sp, #20
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bade:	b2db      	uxtb	r3, r3
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d001      	beq.n	800bae8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bae4:	2301      	movs	r3, #1
 800bae6:	e054      	b.n	800bb92 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2202      	movs	r2, #2
 800baec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	68da      	ldr	r2, [r3, #12]
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f042 0201 	orr.w	r2, r2, #1
 800bafe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	4a26      	ldr	r2, [pc, #152]	; (800bba0 <HAL_TIM_Base_Start_IT+0xd0>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d022      	beq.n	800bb50 <HAL_TIM_Base_Start_IT+0x80>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb12:	d01d      	beq.n	800bb50 <HAL_TIM_Base_Start_IT+0x80>
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	4a22      	ldr	r2, [pc, #136]	; (800bba4 <HAL_TIM_Base_Start_IT+0xd4>)
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d018      	beq.n	800bb50 <HAL_TIM_Base_Start_IT+0x80>
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	4a21      	ldr	r2, [pc, #132]	; (800bba8 <HAL_TIM_Base_Start_IT+0xd8>)
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d013      	beq.n	800bb50 <HAL_TIM_Base_Start_IT+0x80>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	4a1f      	ldr	r2, [pc, #124]	; (800bbac <HAL_TIM_Base_Start_IT+0xdc>)
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	d00e      	beq.n	800bb50 <HAL_TIM_Base_Start_IT+0x80>
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	4a1e      	ldr	r2, [pc, #120]	; (800bbb0 <HAL_TIM_Base_Start_IT+0xe0>)
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	d009      	beq.n	800bb50 <HAL_TIM_Base_Start_IT+0x80>
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	4a1c      	ldr	r2, [pc, #112]	; (800bbb4 <HAL_TIM_Base_Start_IT+0xe4>)
 800bb42:	4293      	cmp	r3, r2
 800bb44:	d004      	beq.n	800bb50 <HAL_TIM_Base_Start_IT+0x80>
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	4a1b      	ldr	r2, [pc, #108]	; (800bbb8 <HAL_TIM_Base_Start_IT+0xe8>)
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	d115      	bne.n	800bb7c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	689a      	ldr	r2, [r3, #8]
 800bb56:	4b19      	ldr	r3, [pc, #100]	; (800bbbc <HAL_TIM_Base_Start_IT+0xec>)
 800bb58:	4013      	ands	r3, r2
 800bb5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	2b06      	cmp	r3, #6
 800bb60:	d015      	beq.n	800bb8e <HAL_TIM_Base_Start_IT+0xbe>
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb68:	d011      	beq.n	800bb8e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	681a      	ldr	r2, [r3, #0]
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f042 0201 	orr.w	r2, r2, #1
 800bb78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb7a:	e008      	b.n	800bb8e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	681a      	ldr	r2, [r3, #0]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f042 0201 	orr.w	r2, r2, #1
 800bb8a:	601a      	str	r2, [r3, #0]
 800bb8c:	e000      	b.n	800bb90 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bb90:	2300      	movs	r3, #0
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3714      	adds	r7, #20
 800bb96:	46bd      	mov	sp, r7
 800bb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9c:	4770      	bx	lr
 800bb9e:	bf00      	nop
 800bba0:	40010000 	.word	0x40010000
 800bba4:	40000400 	.word	0x40000400
 800bba8:	40000800 	.word	0x40000800
 800bbac:	40000c00 	.word	0x40000c00
 800bbb0:	40010400 	.word	0x40010400
 800bbb4:	40001800 	.word	0x40001800
 800bbb8:	40014000 	.word	0x40014000
 800bbbc:	00010007 	.word	0x00010007

0800bbc0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b083      	sub	sp, #12
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	68da      	ldr	r2, [r3, #12]
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	f022 0201 	bic.w	r2, r2, #1
 800bbd6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	6a1a      	ldr	r2, [r3, #32]
 800bbde:	f241 1311 	movw	r3, #4369	; 0x1111
 800bbe2:	4013      	ands	r3, r2
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d10f      	bne.n	800bc08 <HAL_TIM_Base_Stop_IT+0x48>
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	6a1a      	ldr	r2, [r3, #32]
 800bbee:	f240 4344 	movw	r3, #1092	; 0x444
 800bbf2:	4013      	ands	r3, r2
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d107      	bne.n	800bc08 <HAL_TIM_Base_Stop_IT+0x48>
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	681a      	ldr	r2, [r3, #0]
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f022 0201 	bic.w	r2, r2, #1
 800bc06:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800bc10:	2300      	movs	r3, #0
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	370c      	adds	r7, #12
 800bc16:	46bd      	mov	sp, r7
 800bc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1c:	4770      	bx	lr

0800bc1e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bc1e:	b580      	push	{r7, lr}
 800bc20:	b082      	sub	sp, #8
 800bc22:	af00      	add	r7, sp, #0
 800bc24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d101      	bne.n	800bc30 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	e049      	b.n	800bcc4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc36:	b2db      	uxtb	r3, r3
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d106      	bne.n	800bc4a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f000 f841 	bl	800bccc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2202      	movs	r2, #2
 800bc4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681a      	ldr	r2, [r3, #0]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	3304      	adds	r3, #4
 800bc5a:	4619      	mov	r1, r3
 800bc5c:	4610      	mov	r0, r2
 800bc5e:	f001 f99f 	bl	800cfa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2201      	movs	r2, #1
 800bc66:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2201      	movs	r2, #1
 800bc76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2201      	movs	r2, #1
 800bc7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2201      	movs	r2, #1
 800bc86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2201      	movs	r2, #1
 800bc8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2201      	movs	r2, #1
 800bc96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2201      	movs	r2, #1
 800bca6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2201      	movs	r2, #1
 800bcae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2201      	movs	r2, #1
 800bcb6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2201      	movs	r2, #1
 800bcbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bcc2:	2300      	movs	r3, #0
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3708      	adds	r7, #8
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}

0800bccc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b083      	sub	sp, #12
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bcd4:	bf00      	nop
 800bcd6:	370c      	adds	r7, #12
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcde:	4770      	bx	lr

0800bce0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b084      	sub	sp, #16
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
 800bce8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d109      	bne.n	800bd04 <HAL_TIM_PWM_Start+0x24>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bcf6:	b2db      	uxtb	r3, r3
 800bcf8:	2b01      	cmp	r3, #1
 800bcfa:	bf14      	ite	ne
 800bcfc:	2301      	movne	r3, #1
 800bcfe:	2300      	moveq	r3, #0
 800bd00:	b2db      	uxtb	r3, r3
 800bd02:	e03c      	b.n	800bd7e <HAL_TIM_PWM_Start+0x9e>
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	2b04      	cmp	r3, #4
 800bd08:	d109      	bne.n	800bd1e <HAL_TIM_PWM_Start+0x3e>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bd10:	b2db      	uxtb	r3, r3
 800bd12:	2b01      	cmp	r3, #1
 800bd14:	bf14      	ite	ne
 800bd16:	2301      	movne	r3, #1
 800bd18:	2300      	moveq	r3, #0
 800bd1a:	b2db      	uxtb	r3, r3
 800bd1c:	e02f      	b.n	800bd7e <HAL_TIM_PWM_Start+0x9e>
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	2b08      	cmp	r3, #8
 800bd22:	d109      	bne.n	800bd38 <HAL_TIM_PWM_Start+0x58>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bd2a:	b2db      	uxtb	r3, r3
 800bd2c:	2b01      	cmp	r3, #1
 800bd2e:	bf14      	ite	ne
 800bd30:	2301      	movne	r3, #1
 800bd32:	2300      	moveq	r3, #0
 800bd34:	b2db      	uxtb	r3, r3
 800bd36:	e022      	b.n	800bd7e <HAL_TIM_PWM_Start+0x9e>
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	2b0c      	cmp	r3, #12
 800bd3c:	d109      	bne.n	800bd52 <HAL_TIM_PWM_Start+0x72>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd44:	b2db      	uxtb	r3, r3
 800bd46:	2b01      	cmp	r3, #1
 800bd48:	bf14      	ite	ne
 800bd4a:	2301      	movne	r3, #1
 800bd4c:	2300      	moveq	r3, #0
 800bd4e:	b2db      	uxtb	r3, r3
 800bd50:	e015      	b.n	800bd7e <HAL_TIM_PWM_Start+0x9e>
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	2b10      	cmp	r3, #16
 800bd56:	d109      	bne.n	800bd6c <HAL_TIM_PWM_Start+0x8c>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bd5e:	b2db      	uxtb	r3, r3
 800bd60:	2b01      	cmp	r3, #1
 800bd62:	bf14      	ite	ne
 800bd64:	2301      	movne	r3, #1
 800bd66:	2300      	moveq	r3, #0
 800bd68:	b2db      	uxtb	r3, r3
 800bd6a:	e008      	b.n	800bd7e <HAL_TIM_PWM_Start+0x9e>
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bd72:	b2db      	uxtb	r3, r3
 800bd74:	2b01      	cmp	r3, #1
 800bd76:	bf14      	ite	ne
 800bd78:	2301      	movne	r3, #1
 800bd7a:	2300      	moveq	r3, #0
 800bd7c:	b2db      	uxtb	r3, r3
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d001      	beq.n	800bd86 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800bd82:	2301      	movs	r3, #1
 800bd84:	e0a1      	b.n	800beca <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d104      	bne.n	800bd96 <HAL_TIM_PWM_Start+0xb6>
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2202      	movs	r2, #2
 800bd90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bd94:	e023      	b.n	800bdde <HAL_TIM_PWM_Start+0xfe>
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	2b04      	cmp	r3, #4
 800bd9a:	d104      	bne.n	800bda6 <HAL_TIM_PWM_Start+0xc6>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2202      	movs	r2, #2
 800bda0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bda4:	e01b      	b.n	800bdde <HAL_TIM_PWM_Start+0xfe>
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	2b08      	cmp	r3, #8
 800bdaa:	d104      	bne.n	800bdb6 <HAL_TIM_PWM_Start+0xd6>
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2202      	movs	r2, #2
 800bdb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bdb4:	e013      	b.n	800bdde <HAL_TIM_PWM_Start+0xfe>
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	2b0c      	cmp	r3, #12
 800bdba:	d104      	bne.n	800bdc6 <HAL_TIM_PWM_Start+0xe6>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2202      	movs	r2, #2
 800bdc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bdc4:	e00b      	b.n	800bdde <HAL_TIM_PWM_Start+0xfe>
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	2b10      	cmp	r3, #16
 800bdca:	d104      	bne.n	800bdd6 <HAL_TIM_PWM_Start+0xf6>
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2202      	movs	r2, #2
 800bdd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bdd4:	e003      	b.n	800bdde <HAL_TIM_PWM_Start+0xfe>
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2202      	movs	r2, #2
 800bdda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	2201      	movs	r2, #1
 800bde4:	6839      	ldr	r1, [r7, #0]
 800bde6:	4618      	mov	r0, r3
 800bde8:	f001 fefc 	bl	800dbe4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	4a38      	ldr	r2, [pc, #224]	; (800bed4 <HAL_TIM_PWM_Start+0x1f4>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	d013      	beq.n	800be1e <HAL_TIM_PWM_Start+0x13e>
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	4a37      	ldr	r2, [pc, #220]	; (800bed8 <HAL_TIM_PWM_Start+0x1f8>)
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d00e      	beq.n	800be1e <HAL_TIM_PWM_Start+0x13e>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	4a35      	ldr	r2, [pc, #212]	; (800bedc <HAL_TIM_PWM_Start+0x1fc>)
 800be06:	4293      	cmp	r3, r2
 800be08:	d009      	beq.n	800be1e <HAL_TIM_PWM_Start+0x13e>
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	4a34      	ldr	r2, [pc, #208]	; (800bee0 <HAL_TIM_PWM_Start+0x200>)
 800be10:	4293      	cmp	r3, r2
 800be12:	d004      	beq.n	800be1e <HAL_TIM_PWM_Start+0x13e>
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	4a32      	ldr	r2, [pc, #200]	; (800bee4 <HAL_TIM_PWM_Start+0x204>)
 800be1a:	4293      	cmp	r3, r2
 800be1c:	d101      	bne.n	800be22 <HAL_TIM_PWM_Start+0x142>
 800be1e:	2301      	movs	r3, #1
 800be20:	e000      	b.n	800be24 <HAL_TIM_PWM_Start+0x144>
 800be22:	2300      	movs	r3, #0
 800be24:	2b00      	cmp	r3, #0
 800be26:	d007      	beq.n	800be38 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800be36:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	4a25      	ldr	r2, [pc, #148]	; (800bed4 <HAL_TIM_PWM_Start+0x1f4>)
 800be3e:	4293      	cmp	r3, r2
 800be40:	d022      	beq.n	800be88 <HAL_TIM_PWM_Start+0x1a8>
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be4a:	d01d      	beq.n	800be88 <HAL_TIM_PWM_Start+0x1a8>
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	4a25      	ldr	r2, [pc, #148]	; (800bee8 <HAL_TIM_PWM_Start+0x208>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d018      	beq.n	800be88 <HAL_TIM_PWM_Start+0x1a8>
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	4a24      	ldr	r2, [pc, #144]	; (800beec <HAL_TIM_PWM_Start+0x20c>)
 800be5c:	4293      	cmp	r3, r2
 800be5e:	d013      	beq.n	800be88 <HAL_TIM_PWM_Start+0x1a8>
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	4a22      	ldr	r2, [pc, #136]	; (800bef0 <HAL_TIM_PWM_Start+0x210>)
 800be66:	4293      	cmp	r3, r2
 800be68:	d00e      	beq.n	800be88 <HAL_TIM_PWM_Start+0x1a8>
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	4a1a      	ldr	r2, [pc, #104]	; (800bed8 <HAL_TIM_PWM_Start+0x1f8>)
 800be70:	4293      	cmp	r3, r2
 800be72:	d009      	beq.n	800be88 <HAL_TIM_PWM_Start+0x1a8>
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	4a1e      	ldr	r2, [pc, #120]	; (800bef4 <HAL_TIM_PWM_Start+0x214>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d004      	beq.n	800be88 <HAL_TIM_PWM_Start+0x1a8>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	4a16      	ldr	r2, [pc, #88]	; (800bedc <HAL_TIM_PWM_Start+0x1fc>)
 800be84:	4293      	cmp	r3, r2
 800be86:	d115      	bne.n	800beb4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	689a      	ldr	r2, [r3, #8]
 800be8e:	4b1a      	ldr	r3, [pc, #104]	; (800bef8 <HAL_TIM_PWM_Start+0x218>)
 800be90:	4013      	ands	r3, r2
 800be92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	2b06      	cmp	r3, #6
 800be98:	d015      	beq.n	800bec6 <HAL_TIM_PWM_Start+0x1e6>
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bea0:	d011      	beq.n	800bec6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	681a      	ldr	r2, [r3, #0]
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f042 0201 	orr.w	r2, r2, #1
 800beb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800beb2:	e008      	b.n	800bec6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	681a      	ldr	r2, [r3, #0]
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f042 0201 	orr.w	r2, r2, #1
 800bec2:	601a      	str	r2, [r3, #0]
 800bec4:	e000      	b.n	800bec8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bec6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bec8:	2300      	movs	r3, #0
}
 800beca:	4618      	mov	r0, r3
 800becc:	3710      	adds	r7, #16
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}
 800bed2:	bf00      	nop
 800bed4:	40010000 	.word	0x40010000
 800bed8:	40010400 	.word	0x40010400
 800bedc:	40014000 	.word	0x40014000
 800bee0:	40014400 	.word	0x40014400
 800bee4:	40014800 	.word	0x40014800
 800bee8:	40000400 	.word	0x40000400
 800beec:	40000800 	.word	0x40000800
 800bef0:	40000c00 	.word	0x40000c00
 800bef4:	40001800 	.word	0x40001800
 800bef8:	00010007 	.word	0x00010007

0800befc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b082      	sub	sp, #8
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d101      	bne.n	800bf0e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	e049      	b.n	800bfa2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf14:	b2db      	uxtb	r3, r3
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d106      	bne.n	800bf28 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f000 f841 	bl	800bfaa <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2202      	movs	r2, #2
 800bf2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681a      	ldr	r2, [r3, #0]
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	3304      	adds	r3, #4
 800bf38:	4619      	mov	r1, r3
 800bf3a:	4610      	mov	r0, r2
 800bf3c:	f001 f830 	bl	800cfa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2201      	movs	r2, #1
 800bf44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2201      	movs	r2, #1
 800bf4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2201      	movs	r2, #1
 800bf54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2201      	movs	r2, #1
 800bf5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2201      	movs	r2, #1
 800bf64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2201      	movs	r2, #1
 800bf74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2201      	movs	r2, #1
 800bf84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2201      	movs	r2, #1
 800bf8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2201      	movs	r2, #1
 800bf94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bfa0:	2300      	movs	r3, #0
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3708      	adds	r7, #8
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}

0800bfaa <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800bfaa:	b480      	push	{r7}
 800bfac:	b083      	sub	sp, #12
 800bfae:	af00      	add	r7, sp, #0
 800bfb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800bfb2:	bf00      	nop
 800bfb4:	370c      	adds	r7, #12
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbc:	4770      	bx	lr
	...

0800bfc0 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b084      	sub	sp, #16
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
 800bfc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d104      	bne.n	800bfda <HAL_TIM_IC_Start+0x1a>
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bfd6:	b2db      	uxtb	r3, r3
 800bfd8:	e023      	b.n	800c022 <HAL_TIM_IC_Start+0x62>
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	2b04      	cmp	r3, #4
 800bfde:	d104      	bne.n	800bfea <HAL_TIM_IC_Start+0x2a>
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bfe6:	b2db      	uxtb	r3, r3
 800bfe8:	e01b      	b.n	800c022 <HAL_TIM_IC_Start+0x62>
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	2b08      	cmp	r3, #8
 800bfee:	d104      	bne.n	800bffa <HAL_TIM_IC_Start+0x3a>
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bff6:	b2db      	uxtb	r3, r3
 800bff8:	e013      	b.n	800c022 <HAL_TIM_IC_Start+0x62>
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	2b0c      	cmp	r3, #12
 800bffe:	d104      	bne.n	800c00a <HAL_TIM_IC_Start+0x4a>
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c006:	b2db      	uxtb	r3, r3
 800c008:	e00b      	b.n	800c022 <HAL_TIM_IC_Start+0x62>
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	2b10      	cmp	r3, #16
 800c00e:	d104      	bne.n	800c01a <HAL_TIM_IC_Start+0x5a>
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c016:	b2db      	uxtb	r3, r3
 800c018:	e003      	b.n	800c022 <HAL_TIM_IC_Start+0x62>
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c020:	b2db      	uxtb	r3, r3
 800c022:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d104      	bne.n	800c034 <HAL_TIM_IC_Start+0x74>
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c030:	b2db      	uxtb	r3, r3
 800c032:	e013      	b.n	800c05c <HAL_TIM_IC_Start+0x9c>
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	2b04      	cmp	r3, #4
 800c038:	d104      	bne.n	800c044 <HAL_TIM_IC_Start+0x84>
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c040:	b2db      	uxtb	r3, r3
 800c042:	e00b      	b.n	800c05c <HAL_TIM_IC_Start+0x9c>
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	2b08      	cmp	r3, #8
 800c048:	d104      	bne.n	800c054 <HAL_TIM_IC_Start+0x94>
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c050:	b2db      	uxtb	r3, r3
 800c052:	e003      	b.n	800c05c <HAL_TIM_IC_Start+0x9c>
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800c05a:	b2db      	uxtb	r3, r3
 800c05c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800c05e:	7bfb      	ldrb	r3, [r7, #15]
 800c060:	2b01      	cmp	r3, #1
 800c062:	d102      	bne.n	800c06a <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800c064:	7bbb      	ldrb	r3, [r7, #14]
 800c066:	2b01      	cmp	r3, #1
 800c068:	d001      	beq.n	800c06e <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 800c06a:	2301      	movs	r3, #1
 800c06c:	e097      	b.n	800c19e <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d104      	bne.n	800c07e <HAL_TIM_IC_Start+0xbe>
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2202      	movs	r2, #2
 800c078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c07c:	e023      	b.n	800c0c6 <HAL_TIM_IC_Start+0x106>
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	2b04      	cmp	r3, #4
 800c082:	d104      	bne.n	800c08e <HAL_TIM_IC_Start+0xce>
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2202      	movs	r2, #2
 800c088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c08c:	e01b      	b.n	800c0c6 <HAL_TIM_IC_Start+0x106>
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	2b08      	cmp	r3, #8
 800c092:	d104      	bne.n	800c09e <HAL_TIM_IC_Start+0xde>
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2202      	movs	r2, #2
 800c098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c09c:	e013      	b.n	800c0c6 <HAL_TIM_IC_Start+0x106>
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	2b0c      	cmp	r3, #12
 800c0a2:	d104      	bne.n	800c0ae <HAL_TIM_IC_Start+0xee>
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2202      	movs	r2, #2
 800c0a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c0ac:	e00b      	b.n	800c0c6 <HAL_TIM_IC_Start+0x106>
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	2b10      	cmp	r3, #16
 800c0b2:	d104      	bne.n	800c0be <HAL_TIM_IC_Start+0xfe>
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2202      	movs	r2, #2
 800c0b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c0bc:	e003      	b.n	800c0c6 <HAL_TIM_IC_Start+0x106>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2202      	movs	r2, #2
 800c0c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d104      	bne.n	800c0d6 <HAL_TIM_IC_Start+0x116>
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2202      	movs	r2, #2
 800c0d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c0d4:	e013      	b.n	800c0fe <HAL_TIM_IC_Start+0x13e>
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	2b04      	cmp	r3, #4
 800c0da:	d104      	bne.n	800c0e6 <HAL_TIM_IC_Start+0x126>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2202      	movs	r2, #2
 800c0e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c0e4:	e00b      	b.n	800c0fe <HAL_TIM_IC_Start+0x13e>
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	2b08      	cmp	r3, #8
 800c0ea:	d104      	bne.n	800c0f6 <HAL_TIM_IC_Start+0x136>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2202      	movs	r2, #2
 800c0f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c0f4:	e003      	b.n	800c0fe <HAL_TIM_IC_Start+0x13e>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2202      	movs	r2, #2
 800c0fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	2201      	movs	r2, #1
 800c104:	6839      	ldr	r1, [r7, #0]
 800c106:	4618      	mov	r0, r3
 800c108:	f001 fd6c 	bl	800dbe4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	4a25      	ldr	r2, [pc, #148]	; (800c1a8 <HAL_TIM_IC_Start+0x1e8>)
 800c112:	4293      	cmp	r3, r2
 800c114:	d022      	beq.n	800c15c <HAL_TIM_IC_Start+0x19c>
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c11e:	d01d      	beq.n	800c15c <HAL_TIM_IC_Start+0x19c>
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	4a21      	ldr	r2, [pc, #132]	; (800c1ac <HAL_TIM_IC_Start+0x1ec>)
 800c126:	4293      	cmp	r3, r2
 800c128:	d018      	beq.n	800c15c <HAL_TIM_IC_Start+0x19c>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	4a20      	ldr	r2, [pc, #128]	; (800c1b0 <HAL_TIM_IC_Start+0x1f0>)
 800c130:	4293      	cmp	r3, r2
 800c132:	d013      	beq.n	800c15c <HAL_TIM_IC_Start+0x19c>
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	4a1e      	ldr	r2, [pc, #120]	; (800c1b4 <HAL_TIM_IC_Start+0x1f4>)
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d00e      	beq.n	800c15c <HAL_TIM_IC_Start+0x19c>
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	4a1d      	ldr	r2, [pc, #116]	; (800c1b8 <HAL_TIM_IC_Start+0x1f8>)
 800c144:	4293      	cmp	r3, r2
 800c146:	d009      	beq.n	800c15c <HAL_TIM_IC_Start+0x19c>
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	4a1b      	ldr	r2, [pc, #108]	; (800c1bc <HAL_TIM_IC_Start+0x1fc>)
 800c14e:	4293      	cmp	r3, r2
 800c150:	d004      	beq.n	800c15c <HAL_TIM_IC_Start+0x19c>
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	4a1a      	ldr	r2, [pc, #104]	; (800c1c0 <HAL_TIM_IC_Start+0x200>)
 800c158:	4293      	cmp	r3, r2
 800c15a:	d115      	bne.n	800c188 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	689a      	ldr	r2, [r3, #8]
 800c162:	4b18      	ldr	r3, [pc, #96]	; (800c1c4 <HAL_TIM_IC_Start+0x204>)
 800c164:	4013      	ands	r3, r2
 800c166:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	2b06      	cmp	r3, #6
 800c16c:	d015      	beq.n	800c19a <HAL_TIM_IC_Start+0x1da>
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c174:	d011      	beq.n	800c19a <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	681a      	ldr	r2, [r3, #0]
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	f042 0201 	orr.w	r2, r2, #1
 800c184:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c186:	e008      	b.n	800c19a <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	681a      	ldr	r2, [r3, #0]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f042 0201 	orr.w	r2, r2, #1
 800c196:	601a      	str	r2, [r3, #0]
 800c198:	e000      	b.n	800c19c <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c19a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c19c:	2300      	movs	r3, #0
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3710      	adds	r7, #16
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}
 800c1a6:	bf00      	nop
 800c1a8:	40010000 	.word	0x40010000
 800c1ac:	40000400 	.word	0x40000400
 800c1b0:	40000800 	.word	0x40000800
 800c1b4:	40000c00 	.word	0x40000c00
 800c1b8:	40010400 	.word	0x40010400
 800c1bc:	40001800 	.word	0x40001800
 800c1c0:	40014000 	.word	0x40014000
 800c1c4:	00010007 	.word	0x00010007

0800c1c8 <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b082      	sub	sp, #8
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
 800c1d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	6839      	ldr	r1, [r7, #0]
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f001 fd02 	bl	800dbe4 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	6a1a      	ldr	r2, [r3, #32]
 800c1e6:	f241 1311 	movw	r3, #4369	; 0x1111
 800c1ea:	4013      	ands	r3, r2
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d10f      	bne.n	800c210 <HAL_TIM_IC_Stop+0x48>
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	6a1a      	ldr	r2, [r3, #32]
 800c1f6:	f240 4344 	movw	r3, #1092	; 0x444
 800c1fa:	4013      	ands	r3, r2
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d107      	bne.n	800c210 <HAL_TIM_IC_Stop+0x48>
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	681a      	ldr	r2, [r3, #0]
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f022 0201 	bic.w	r2, r2, #1
 800c20e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d104      	bne.n	800c220 <HAL_TIM_IC_Stop+0x58>
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2201      	movs	r2, #1
 800c21a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c21e:	e023      	b.n	800c268 <HAL_TIM_IC_Stop+0xa0>
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	2b04      	cmp	r3, #4
 800c224:	d104      	bne.n	800c230 <HAL_TIM_IC_Stop+0x68>
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2201      	movs	r2, #1
 800c22a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c22e:	e01b      	b.n	800c268 <HAL_TIM_IC_Stop+0xa0>
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	2b08      	cmp	r3, #8
 800c234:	d104      	bne.n	800c240 <HAL_TIM_IC_Stop+0x78>
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2201      	movs	r2, #1
 800c23a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c23e:	e013      	b.n	800c268 <HAL_TIM_IC_Stop+0xa0>
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	2b0c      	cmp	r3, #12
 800c244:	d104      	bne.n	800c250 <HAL_TIM_IC_Stop+0x88>
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2201      	movs	r2, #1
 800c24a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c24e:	e00b      	b.n	800c268 <HAL_TIM_IC_Stop+0xa0>
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	2b10      	cmp	r3, #16
 800c254:	d104      	bne.n	800c260 <HAL_TIM_IC_Stop+0x98>
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2201      	movs	r2, #1
 800c25a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c25e:	e003      	b.n	800c268 <HAL_TIM_IC_Stop+0xa0>
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2201      	movs	r2, #1
 800c264:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d104      	bne.n	800c278 <HAL_TIM_IC_Stop+0xb0>
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2201      	movs	r2, #1
 800c272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c276:	e013      	b.n	800c2a0 <HAL_TIM_IC_Stop+0xd8>
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	2b04      	cmp	r3, #4
 800c27c:	d104      	bne.n	800c288 <HAL_TIM_IC_Stop+0xc0>
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2201      	movs	r2, #1
 800c282:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c286:	e00b      	b.n	800c2a0 <HAL_TIM_IC_Stop+0xd8>
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	2b08      	cmp	r3, #8
 800c28c:	d104      	bne.n	800c298 <HAL_TIM_IC_Stop+0xd0>
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2201      	movs	r2, #1
 800c292:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c296:	e003      	b.n	800c2a0 <HAL_TIM_IC_Stop+0xd8>
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2201      	movs	r2, #1
 800c29c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 800c2a0:	2300      	movs	r3, #0
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3708      	adds	r7, #8
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}
	...

0800c2ac <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b084      	sub	sp, #16
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d104      	bne.n	800c2ca <HAL_TIM_IC_Start_IT+0x1e>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c2c6:	b2db      	uxtb	r3, r3
 800c2c8:	e023      	b.n	800c312 <HAL_TIM_IC_Start_IT+0x66>
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	2b04      	cmp	r3, #4
 800c2ce:	d104      	bne.n	800c2da <HAL_TIM_IC_Start_IT+0x2e>
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c2d6:	b2db      	uxtb	r3, r3
 800c2d8:	e01b      	b.n	800c312 <HAL_TIM_IC_Start_IT+0x66>
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	2b08      	cmp	r3, #8
 800c2de:	d104      	bne.n	800c2ea <HAL_TIM_IC_Start_IT+0x3e>
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c2e6:	b2db      	uxtb	r3, r3
 800c2e8:	e013      	b.n	800c312 <HAL_TIM_IC_Start_IT+0x66>
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	2b0c      	cmp	r3, #12
 800c2ee:	d104      	bne.n	800c2fa <HAL_TIM_IC_Start_IT+0x4e>
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c2f6:	b2db      	uxtb	r3, r3
 800c2f8:	e00b      	b.n	800c312 <HAL_TIM_IC_Start_IT+0x66>
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	2b10      	cmp	r3, #16
 800c2fe:	d104      	bne.n	800c30a <HAL_TIM_IC_Start_IT+0x5e>
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c306:	b2db      	uxtb	r3, r3
 800c308:	e003      	b.n	800c312 <HAL_TIM_IC_Start_IT+0x66>
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c310:	b2db      	uxtb	r3, r3
 800c312:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d104      	bne.n	800c324 <HAL_TIM_IC_Start_IT+0x78>
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c320:	b2db      	uxtb	r3, r3
 800c322:	e013      	b.n	800c34c <HAL_TIM_IC_Start_IT+0xa0>
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	2b04      	cmp	r3, #4
 800c328:	d104      	bne.n	800c334 <HAL_TIM_IC_Start_IT+0x88>
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c330:	b2db      	uxtb	r3, r3
 800c332:	e00b      	b.n	800c34c <HAL_TIM_IC_Start_IT+0xa0>
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	2b08      	cmp	r3, #8
 800c338:	d104      	bne.n	800c344 <HAL_TIM_IC_Start_IT+0x98>
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c340:	b2db      	uxtb	r3, r3
 800c342:	e003      	b.n	800c34c <HAL_TIM_IC_Start_IT+0xa0>
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800c34a:	b2db      	uxtb	r3, r3
 800c34c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800c34e:	7bbb      	ldrb	r3, [r7, #14]
 800c350:	2b01      	cmp	r3, #1
 800c352:	d102      	bne.n	800c35a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800c354:	7b7b      	ldrb	r3, [r7, #13]
 800c356:	2b01      	cmp	r3, #1
 800c358:	d001      	beq.n	800c35e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800c35a:	2301      	movs	r3, #1
 800c35c:	e0e2      	b.n	800c524 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d104      	bne.n	800c36e <HAL_TIM_IC_Start_IT+0xc2>
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2202      	movs	r2, #2
 800c368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c36c:	e023      	b.n	800c3b6 <HAL_TIM_IC_Start_IT+0x10a>
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	2b04      	cmp	r3, #4
 800c372:	d104      	bne.n	800c37e <HAL_TIM_IC_Start_IT+0xd2>
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2202      	movs	r2, #2
 800c378:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c37c:	e01b      	b.n	800c3b6 <HAL_TIM_IC_Start_IT+0x10a>
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	2b08      	cmp	r3, #8
 800c382:	d104      	bne.n	800c38e <HAL_TIM_IC_Start_IT+0xe2>
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2202      	movs	r2, #2
 800c388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c38c:	e013      	b.n	800c3b6 <HAL_TIM_IC_Start_IT+0x10a>
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	2b0c      	cmp	r3, #12
 800c392:	d104      	bne.n	800c39e <HAL_TIM_IC_Start_IT+0xf2>
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2202      	movs	r2, #2
 800c398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c39c:	e00b      	b.n	800c3b6 <HAL_TIM_IC_Start_IT+0x10a>
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	2b10      	cmp	r3, #16
 800c3a2:	d104      	bne.n	800c3ae <HAL_TIM_IC_Start_IT+0x102>
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2202      	movs	r2, #2
 800c3a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c3ac:	e003      	b.n	800c3b6 <HAL_TIM_IC_Start_IT+0x10a>
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2202      	movs	r2, #2
 800c3b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d104      	bne.n	800c3c6 <HAL_TIM_IC_Start_IT+0x11a>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2202      	movs	r2, #2
 800c3c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c3c4:	e013      	b.n	800c3ee <HAL_TIM_IC_Start_IT+0x142>
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	2b04      	cmp	r3, #4
 800c3ca:	d104      	bne.n	800c3d6 <HAL_TIM_IC_Start_IT+0x12a>
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2202      	movs	r2, #2
 800c3d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c3d4:	e00b      	b.n	800c3ee <HAL_TIM_IC_Start_IT+0x142>
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	2b08      	cmp	r3, #8
 800c3da:	d104      	bne.n	800c3e6 <HAL_TIM_IC_Start_IT+0x13a>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2202      	movs	r2, #2
 800c3e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c3e4:	e003      	b.n	800c3ee <HAL_TIM_IC_Start_IT+0x142>
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2202      	movs	r2, #2
 800c3ea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	2b0c      	cmp	r3, #12
 800c3f2:	d841      	bhi.n	800c478 <HAL_TIM_IC_Start_IT+0x1cc>
 800c3f4:	a201      	add	r2, pc, #4	; (adr r2, 800c3fc <HAL_TIM_IC_Start_IT+0x150>)
 800c3f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3fa:	bf00      	nop
 800c3fc:	0800c431 	.word	0x0800c431
 800c400:	0800c479 	.word	0x0800c479
 800c404:	0800c479 	.word	0x0800c479
 800c408:	0800c479 	.word	0x0800c479
 800c40c:	0800c443 	.word	0x0800c443
 800c410:	0800c479 	.word	0x0800c479
 800c414:	0800c479 	.word	0x0800c479
 800c418:	0800c479 	.word	0x0800c479
 800c41c:	0800c455 	.word	0x0800c455
 800c420:	0800c479 	.word	0x0800c479
 800c424:	0800c479 	.word	0x0800c479
 800c428:	0800c479 	.word	0x0800c479
 800c42c:	0800c467 	.word	0x0800c467
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	68da      	ldr	r2, [r3, #12]
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f042 0202 	orr.w	r2, r2, #2
 800c43e:	60da      	str	r2, [r3, #12]
      break;
 800c440:	e01d      	b.n	800c47e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	68da      	ldr	r2, [r3, #12]
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f042 0204 	orr.w	r2, r2, #4
 800c450:	60da      	str	r2, [r3, #12]
      break;
 800c452:	e014      	b.n	800c47e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	68da      	ldr	r2, [r3, #12]
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	f042 0208 	orr.w	r2, r2, #8
 800c462:	60da      	str	r2, [r3, #12]
      break;
 800c464:	e00b      	b.n	800c47e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	68da      	ldr	r2, [r3, #12]
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	f042 0210 	orr.w	r2, r2, #16
 800c474:	60da      	str	r2, [r3, #12]
      break;
 800c476:	e002      	b.n	800c47e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800c478:	2301      	movs	r3, #1
 800c47a:	73fb      	strb	r3, [r7, #15]
      break;
 800c47c:	bf00      	nop
  }

  if (status == HAL_OK)
 800c47e:	7bfb      	ldrb	r3, [r7, #15]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d14e      	bne.n	800c522 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	2201      	movs	r2, #1
 800c48a:	6839      	ldr	r1, [r7, #0]
 800c48c:	4618      	mov	r0, r3
 800c48e:	f001 fba9 	bl	800dbe4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	4a25      	ldr	r2, [pc, #148]	; (800c52c <HAL_TIM_IC_Start_IT+0x280>)
 800c498:	4293      	cmp	r3, r2
 800c49a:	d022      	beq.n	800c4e2 <HAL_TIM_IC_Start_IT+0x236>
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4a4:	d01d      	beq.n	800c4e2 <HAL_TIM_IC_Start_IT+0x236>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	4a21      	ldr	r2, [pc, #132]	; (800c530 <HAL_TIM_IC_Start_IT+0x284>)
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	d018      	beq.n	800c4e2 <HAL_TIM_IC_Start_IT+0x236>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	4a1f      	ldr	r2, [pc, #124]	; (800c534 <HAL_TIM_IC_Start_IT+0x288>)
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d013      	beq.n	800c4e2 <HAL_TIM_IC_Start_IT+0x236>
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	4a1e      	ldr	r2, [pc, #120]	; (800c538 <HAL_TIM_IC_Start_IT+0x28c>)
 800c4c0:	4293      	cmp	r3, r2
 800c4c2:	d00e      	beq.n	800c4e2 <HAL_TIM_IC_Start_IT+0x236>
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	4a1c      	ldr	r2, [pc, #112]	; (800c53c <HAL_TIM_IC_Start_IT+0x290>)
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d009      	beq.n	800c4e2 <HAL_TIM_IC_Start_IT+0x236>
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	4a1b      	ldr	r2, [pc, #108]	; (800c540 <HAL_TIM_IC_Start_IT+0x294>)
 800c4d4:	4293      	cmp	r3, r2
 800c4d6:	d004      	beq.n	800c4e2 <HAL_TIM_IC_Start_IT+0x236>
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4a19      	ldr	r2, [pc, #100]	; (800c544 <HAL_TIM_IC_Start_IT+0x298>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d115      	bne.n	800c50e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	689a      	ldr	r2, [r3, #8]
 800c4e8:	4b17      	ldr	r3, [pc, #92]	; (800c548 <HAL_TIM_IC_Start_IT+0x29c>)
 800c4ea:	4013      	ands	r3, r2
 800c4ec:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	2b06      	cmp	r3, #6
 800c4f2:	d015      	beq.n	800c520 <HAL_TIM_IC_Start_IT+0x274>
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4fa:	d011      	beq.n	800c520 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	681a      	ldr	r2, [r3, #0]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f042 0201 	orr.w	r2, r2, #1
 800c50a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c50c:	e008      	b.n	800c520 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	681a      	ldr	r2, [r3, #0]
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	f042 0201 	orr.w	r2, r2, #1
 800c51c:	601a      	str	r2, [r3, #0]
 800c51e:	e000      	b.n	800c522 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c520:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800c522:	7bfb      	ldrb	r3, [r7, #15]
}
 800c524:	4618      	mov	r0, r3
 800c526:	3710      	adds	r7, #16
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}
 800c52c:	40010000 	.word	0x40010000
 800c530:	40000400 	.word	0x40000400
 800c534:	40000800 	.word	0x40000800
 800c538:	40000c00 	.word	0x40000c00
 800c53c:	40010400 	.word	0x40010400
 800c540:	40001800 	.word	0x40001800
 800c544:	40014000 	.word	0x40014000
 800c548:	00010007 	.word	0x00010007

0800c54c <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b084      	sub	sp, #16
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
 800c554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c556:	2300      	movs	r3, #0
 800c558:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	2b0c      	cmp	r3, #12
 800c55e:	d841      	bhi.n	800c5e4 <HAL_TIM_IC_Stop_IT+0x98>
 800c560:	a201      	add	r2, pc, #4	; (adr r2, 800c568 <HAL_TIM_IC_Stop_IT+0x1c>)
 800c562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c566:	bf00      	nop
 800c568:	0800c59d 	.word	0x0800c59d
 800c56c:	0800c5e5 	.word	0x0800c5e5
 800c570:	0800c5e5 	.word	0x0800c5e5
 800c574:	0800c5e5 	.word	0x0800c5e5
 800c578:	0800c5af 	.word	0x0800c5af
 800c57c:	0800c5e5 	.word	0x0800c5e5
 800c580:	0800c5e5 	.word	0x0800c5e5
 800c584:	0800c5e5 	.word	0x0800c5e5
 800c588:	0800c5c1 	.word	0x0800c5c1
 800c58c:	0800c5e5 	.word	0x0800c5e5
 800c590:	0800c5e5 	.word	0x0800c5e5
 800c594:	0800c5e5 	.word	0x0800c5e5
 800c598:	0800c5d3 	.word	0x0800c5d3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	68da      	ldr	r2, [r3, #12]
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f022 0202 	bic.w	r2, r2, #2
 800c5aa:	60da      	str	r2, [r3, #12]
      break;
 800c5ac:	e01d      	b.n	800c5ea <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	68da      	ldr	r2, [r3, #12]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f022 0204 	bic.w	r2, r2, #4
 800c5bc:	60da      	str	r2, [r3, #12]
      break;
 800c5be:	e014      	b.n	800c5ea <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	68da      	ldr	r2, [r3, #12]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	f022 0208 	bic.w	r2, r2, #8
 800c5ce:	60da      	str	r2, [r3, #12]
      break;
 800c5d0:	e00b      	b.n	800c5ea <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	68da      	ldr	r2, [r3, #12]
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	f022 0210 	bic.w	r2, r2, #16
 800c5e0:	60da      	str	r2, [r3, #12]
      break;
 800c5e2:	e002      	b.n	800c5ea <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	73fb      	strb	r3, [r7, #15]
      break;
 800c5e8:	bf00      	nop
  }

  if (status == HAL_OK)
 800c5ea:	7bfb      	ldrb	r3, [r7, #15]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d166      	bne.n	800c6be <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	6839      	ldr	r1, [r7, #0]
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f001 faf3 	bl	800dbe4 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	6a1a      	ldr	r2, [r3, #32]
 800c604:	f241 1311 	movw	r3, #4369	; 0x1111
 800c608:	4013      	ands	r3, r2
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d10f      	bne.n	800c62e <HAL_TIM_IC_Stop_IT+0xe2>
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	6a1a      	ldr	r2, [r3, #32]
 800c614:	f240 4344 	movw	r3, #1092	; 0x444
 800c618:	4013      	ands	r3, r2
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d107      	bne.n	800c62e <HAL_TIM_IC_Stop_IT+0xe2>
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	681a      	ldr	r2, [r3, #0]
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f022 0201 	bic.w	r2, r2, #1
 800c62c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d104      	bne.n	800c63e <HAL_TIM_IC_Stop_IT+0xf2>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2201      	movs	r2, #1
 800c638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c63c:	e023      	b.n	800c686 <HAL_TIM_IC_Stop_IT+0x13a>
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	2b04      	cmp	r3, #4
 800c642:	d104      	bne.n	800c64e <HAL_TIM_IC_Stop_IT+0x102>
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2201      	movs	r2, #1
 800c648:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c64c:	e01b      	b.n	800c686 <HAL_TIM_IC_Stop_IT+0x13a>
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	2b08      	cmp	r3, #8
 800c652:	d104      	bne.n	800c65e <HAL_TIM_IC_Stop_IT+0x112>
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2201      	movs	r2, #1
 800c658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c65c:	e013      	b.n	800c686 <HAL_TIM_IC_Stop_IT+0x13a>
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	2b0c      	cmp	r3, #12
 800c662:	d104      	bne.n	800c66e <HAL_TIM_IC_Stop_IT+0x122>
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2201      	movs	r2, #1
 800c668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c66c:	e00b      	b.n	800c686 <HAL_TIM_IC_Stop_IT+0x13a>
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	2b10      	cmp	r3, #16
 800c672:	d104      	bne.n	800c67e <HAL_TIM_IC_Stop_IT+0x132>
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2201      	movs	r2, #1
 800c678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c67c:	e003      	b.n	800c686 <HAL_TIM_IC_Stop_IT+0x13a>
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2201      	movs	r2, #1
 800c682:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d104      	bne.n	800c696 <HAL_TIM_IC_Stop_IT+0x14a>
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2201      	movs	r2, #1
 800c690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c694:	e013      	b.n	800c6be <HAL_TIM_IC_Stop_IT+0x172>
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	2b04      	cmp	r3, #4
 800c69a:	d104      	bne.n	800c6a6 <HAL_TIM_IC_Stop_IT+0x15a>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2201      	movs	r2, #1
 800c6a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c6a4:	e00b      	b.n	800c6be <HAL_TIM_IC_Stop_IT+0x172>
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	2b08      	cmp	r3, #8
 800c6aa:	d104      	bne.n	800c6b6 <HAL_TIM_IC_Stop_IT+0x16a>
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2201      	movs	r2, #1
 800c6b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c6b4:	e003      	b.n	800c6be <HAL_TIM_IC_Stop_IT+0x172>
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2201      	movs	r2, #1
 800c6ba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 800c6be:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3710      	adds	r7, #16
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}

0800c6c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b082      	sub	sp, #8
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	691b      	ldr	r3, [r3, #16]
 800c6d6:	f003 0302 	and.w	r3, r3, #2
 800c6da:	2b02      	cmp	r3, #2
 800c6dc:	d122      	bne.n	800c724 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	68db      	ldr	r3, [r3, #12]
 800c6e4:	f003 0302 	and.w	r3, r3, #2
 800c6e8:	2b02      	cmp	r3, #2
 800c6ea:	d11b      	bne.n	800c724 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	f06f 0202 	mvn.w	r2, #2
 800c6f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2201      	movs	r2, #1
 800c6fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	699b      	ldr	r3, [r3, #24]
 800c702:	f003 0303 	and.w	r3, r3, #3
 800c706:	2b00      	cmp	r3, #0
 800c708:	d003      	beq.n	800c712 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f7f4 ff88 	bl	8001620 <HAL_TIM_IC_CaptureCallback>
 800c710:	e005      	b.n	800c71e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f000 fc26 	bl	800cf64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f000 fc2d 	bl	800cf78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2200      	movs	r2, #0
 800c722:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	691b      	ldr	r3, [r3, #16]
 800c72a:	f003 0304 	and.w	r3, r3, #4
 800c72e:	2b04      	cmp	r3, #4
 800c730:	d122      	bne.n	800c778 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	68db      	ldr	r3, [r3, #12]
 800c738:	f003 0304 	and.w	r3, r3, #4
 800c73c:	2b04      	cmp	r3, #4
 800c73e:	d11b      	bne.n	800c778 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	f06f 0204 	mvn.w	r2, #4
 800c748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2202      	movs	r2, #2
 800c74e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	699b      	ldr	r3, [r3, #24]
 800c756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d003      	beq.n	800c766 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f7f4 ff5e 	bl	8001620 <HAL_TIM_IC_CaptureCallback>
 800c764:	e005      	b.n	800c772 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c766:	6878      	ldr	r0, [r7, #4]
 800c768:	f000 fbfc 	bl	800cf64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f000 fc03 	bl	800cf78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2200      	movs	r2, #0
 800c776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	691b      	ldr	r3, [r3, #16]
 800c77e:	f003 0308 	and.w	r3, r3, #8
 800c782:	2b08      	cmp	r3, #8
 800c784:	d122      	bne.n	800c7cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	68db      	ldr	r3, [r3, #12]
 800c78c:	f003 0308 	and.w	r3, r3, #8
 800c790:	2b08      	cmp	r3, #8
 800c792:	d11b      	bne.n	800c7cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f06f 0208 	mvn.w	r2, #8
 800c79c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2204      	movs	r2, #4
 800c7a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	69db      	ldr	r3, [r3, #28]
 800c7aa:	f003 0303 	and.w	r3, r3, #3
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d003      	beq.n	800c7ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f7f4 ff34 	bl	8001620 <HAL_TIM_IC_CaptureCallback>
 800c7b8:	e005      	b.n	800c7c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	f000 fbd2 	bl	800cf64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f000 fbd9 	bl	800cf78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	691b      	ldr	r3, [r3, #16]
 800c7d2:	f003 0310 	and.w	r3, r3, #16
 800c7d6:	2b10      	cmp	r3, #16
 800c7d8:	d122      	bne.n	800c820 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	68db      	ldr	r3, [r3, #12]
 800c7e0:	f003 0310 	and.w	r3, r3, #16
 800c7e4:	2b10      	cmp	r3, #16
 800c7e6:	d11b      	bne.n	800c820 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f06f 0210 	mvn.w	r2, #16
 800c7f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2208      	movs	r2, #8
 800c7f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	69db      	ldr	r3, [r3, #28]
 800c7fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c802:	2b00      	cmp	r3, #0
 800c804:	d003      	beq.n	800c80e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f7f4 ff0a 	bl	8001620 <HAL_TIM_IC_CaptureCallback>
 800c80c:	e005      	b.n	800c81a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f000 fba8 	bl	800cf64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f000 fbaf 	bl	800cf78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2200      	movs	r2, #0
 800c81e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	691b      	ldr	r3, [r3, #16]
 800c826:	f003 0301 	and.w	r3, r3, #1
 800c82a:	2b01      	cmp	r3, #1
 800c82c:	d10e      	bne.n	800c84c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	68db      	ldr	r3, [r3, #12]
 800c834:	f003 0301 	and.w	r3, r3, #1
 800c838:	2b01      	cmp	r3, #1
 800c83a:	d107      	bne.n	800c84c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	f06f 0201 	mvn.w	r2, #1
 800c844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f7f4 febc 	bl	80015c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	691b      	ldr	r3, [r3, #16]
 800c852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c856:	2b80      	cmp	r3, #128	; 0x80
 800c858:	d10e      	bne.n	800c878 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	68db      	ldr	r3, [r3, #12]
 800c860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c864:	2b80      	cmp	r3, #128	; 0x80
 800c866:	d107      	bne.n	800c878 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f001 fa74 	bl	800dd60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	691b      	ldr	r3, [r3, #16]
 800c87e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c886:	d10e      	bne.n	800c8a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	68db      	ldr	r3, [r3, #12]
 800c88e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c892:	2b80      	cmp	r3, #128	; 0x80
 800c894:	d107      	bne.n	800c8a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c89e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f001 fa67 	bl	800dd74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	691b      	ldr	r3, [r3, #16]
 800c8ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8b0:	2b40      	cmp	r3, #64	; 0x40
 800c8b2:	d10e      	bne.n	800c8d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	68db      	ldr	r3, [r3, #12]
 800c8ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8be:	2b40      	cmp	r3, #64	; 0x40
 800c8c0:	d107      	bne.n	800c8d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c8ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c8cc:	6878      	ldr	r0, [r7, #4]
 800c8ce:	f000 fb5d 	bl	800cf8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	691b      	ldr	r3, [r3, #16]
 800c8d8:	f003 0320 	and.w	r3, r3, #32
 800c8dc:	2b20      	cmp	r3, #32
 800c8de:	d10e      	bne.n	800c8fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	68db      	ldr	r3, [r3, #12]
 800c8e6:	f003 0320 	and.w	r3, r3, #32
 800c8ea:	2b20      	cmp	r3, #32
 800c8ec:	d107      	bne.n	800c8fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	f06f 0220 	mvn.w	r2, #32
 800c8f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f001 fa27 	bl	800dd4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c8fe:	bf00      	nop
 800c900:	3708      	adds	r7, #8
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}

0800c906 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800c906:	b580      	push	{r7, lr}
 800c908:	b086      	sub	sp, #24
 800c90a:	af00      	add	r7, sp, #0
 800c90c:	60f8      	str	r0, [r7, #12]
 800c90e:	60b9      	str	r1, [r7, #8]
 800c910:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c912:	2300      	movs	r3, #0
 800c914:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c91c:	2b01      	cmp	r3, #1
 800c91e:	d101      	bne.n	800c924 <HAL_TIM_IC_ConfigChannel+0x1e>
 800c920:	2302      	movs	r3, #2
 800c922:	e088      	b.n	800ca36 <HAL_TIM_IC_ConfigChannel+0x130>
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2201      	movs	r2, #1
 800c928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d11b      	bne.n	800c96a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800c93a:	68bb      	ldr	r3, [r7, #8]
 800c93c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800c942:	f000 ff87 	bl	800d854 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	699a      	ldr	r2, [r3, #24]
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	f022 020c 	bic.w	r2, r2, #12
 800c954:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	6999      	ldr	r1, [r3, #24]
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	689a      	ldr	r2, [r3, #8]
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	430a      	orrs	r2, r1
 800c966:	619a      	str	r2, [r3, #24]
 800c968:	e060      	b.n	800ca2c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2b04      	cmp	r3, #4
 800c96e:	d11c      	bne.n	800c9aa <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800c97c:	68bb      	ldr	r3, [r7, #8]
 800c97e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800c980:	f001 f80b 	bl	800d99a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	699a      	ldr	r2, [r3, #24]
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c992:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	6999      	ldr	r1, [r3, #24]
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	689b      	ldr	r3, [r3, #8]
 800c99e:	021a      	lsls	r2, r3, #8
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	430a      	orrs	r2, r1
 800c9a6:	619a      	str	r2, [r3, #24]
 800c9a8:	e040      	b.n	800ca2c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2b08      	cmp	r3, #8
 800c9ae:	d11b      	bne.n	800c9e8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800c9c0:	f001 f858 	bl	800da74 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	69da      	ldr	r2, [r3, #28]
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	f022 020c 	bic.w	r2, r2, #12
 800c9d2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	69d9      	ldr	r1, [r3, #28]
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	689a      	ldr	r2, [r3, #8]
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	430a      	orrs	r2, r1
 800c9e4:	61da      	str	r2, [r3, #28]
 800c9e6:	e021      	b.n	800ca2c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2b0c      	cmp	r3, #12
 800c9ec:	d11c      	bne.n	800ca28 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800c9f6:	68bb      	ldr	r3, [r7, #8]
 800c9f8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800c9fe:	f001 f875 	bl	800daec <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	69da      	ldr	r2, [r3, #28]
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800ca10:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	69d9      	ldr	r1, [r3, #28]
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	689b      	ldr	r3, [r3, #8]
 800ca1c:	021a      	lsls	r2, r3, #8
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	430a      	orrs	r2, r1
 800ca24:	61da      	str	r2, [r3, #28]
 800ca26:	e001      	b.n	800ca2c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800ca28:	2301      	movs	r3, #1
 800ca2a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ca34:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	3718      	adds	r7, #24
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}
	...

0800ca40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b086      	sub	sp, #24
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	60f8      	str	r0, [r7, #12]
 800ca48:	60b9      	str	r1, [r7, #8]
 800ca4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca56:	2b01      	cmp	r3, #1
 800ca58:	d101      	bne.n	800ca5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ca5a:	2302      	movs	r3, #2
 800ca5c:	e0ff      	b.n	800cc5e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	2201      	movs	r2, #1
 800ca62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2b14      	cmp	r3, #20
 800ca6a:	f200 80f0 	bhi.w	800cc4e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ca6e:	a201      	add	r2, pc, #4	; (adr r2, 800ca74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ca70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca74:	0800cac9 	.word	0x0800cac9
 800ca78:	0800cc4f 	.word	0x0800cc4f
 800ca7c:	0800cc4f 	.word	0x0800cc4f
 800ca80:	0800cc4f 	.word	0x0800cc4f
 800ca84:	0800cb09 	.word	0x0800cb09
 800ca88:	0800cc4f 	.word	0x0800cc4f
 800ca8c:	0800cc4f 	.word	0x0800cc4f
 800ca90:	0800cc4f 	.word	0x0800cc4f
 800ca94:	0800cb4b 	.word	0x0800cb4b
 800ca98:	0800cc4f 	.word	0x0800cc4f
 800ca9c:	0800cc4f 	.word	0x0800cc4f
 800caa0:	0800cc4f 	.word	0x0800cc4f
 800caa4:	0800cb8b 	.word	0x0800cb8b
 800caa8:	0800cc4f 	.word	0x0800cc4f
 800caac:	0800cc4f 	.word	0x0800cc4f
 800cab0:	0800cc4f 	.word	0x0800cc4f
 800cab4:	0800cbcd 	.word	0x0800cbcd
 800cab8:	0800cc4f 	.word	0x0800cc4f
 800cabc:	0800cc4f 	.word	0x0800cc4f
 800cac0:	0800cc4f 	.word	0x0800cc4f
 800cac4:	0800cc0d 	.word	0x0800cc0d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	68b9      	ldr	r1, [r7, #8]
 800cace:	4618      	mov	r0, r3
 800cad0:	f000 fb00 	bl	800d0d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	699a      	ldr	r2, [r3, #24]
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f042 0208 	orr.w	r2, r2, #8
 800cae2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	699a      	ldr	r2, [r3, #24]
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f022 0204 	bic.w	r2, r2, #4
 800caf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	6999      	ldr	r1, [r3, #24]
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	691a      	ldr	r2, [r3, #16]
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	430a      	orrs	r2, r1
 800cb04:	619a      	str	r2, [r3, #24]
      break;
 800cb06:	e0a5      	b.n	800cc54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	68b9      	ldr	r1, [r7, #8]
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f000 fb70 	bl	800d1f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	699a      	ldr	r2, [r3, #24]
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	699a      	ldr	r2, [r3, #24]
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cb32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	6999      	ldr	r1, [r3, #24]
 800cb3a:	68bb      	ldr	r3, [r7, #8]
 800cb3c:	691b      	ldr	r3, [r3, #16]
 800cb3e:	021a      	lsls	r2, r3, #8
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	430a      	orrs	r2, r1
 800cb46:	619a      	str	r2, [r3, #24]
      break;
 800cb48:	e084      	b.n	800cc54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	68b9      	ldr	r1, [r7, #8]
 800cb50:	4618      	mov	r0, r3
 800cb52:	f000 fbd9 	bl	800d308 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	69da      	ldr	r2, [r3, #28]
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	f042 0208 	orr.w	r2, r2, #8
 800cb64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	69da      	ldr	r2, [r3, #28]
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	f022 0204 	bic.w	r2, r2, #4
 800cb74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	69d9      	ldr	r1, [r3, #28]
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	691a      	ldr	r2, [r3, #16]
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	430a      	orrs	r2, r1
 800cb86:	61da      	str	r2, [r3, #28]
      break;
 800cb88:	e064      	b.n	800cc54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	68b9      	ldr	r1, [r7, #8]
 800cb90:	4618      	mov	r0, r3
 800cb92:	f000 fc41 	bl	800d418 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	69da      	ldr	r2, [r3, #28]
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cba4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	69da      	ldr	r2, [r3, #28]
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cbb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	69d9      	ldr	r1, [r3, #28]
 800cbbc:	68bb      	ldr	r3, [r7, #8]
 800cbbe:	691b      	ldr	r3, [r3, #16]
 800cbc0:	021a      	lsls	r2, r3, #8
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	430a      	orrs	r2, r1
 800cbc8:	61da      	str	r2, [r3, #28]
      break;
 800cbca:	e043      	b.n	800cc54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	68b9      	ldr	r1, [r7, #8]
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f000 fc8a 	bl	800d4ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	f042 0208 	orr.w	r2, r2, #8
 800cbe6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	f022 0204 	bic.w	r2, r2, #4
 800cbf6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	691a      	ldr	r2, [r3, #16]
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	430a      	orrs	r2, r1
 800cc08:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cc0a:	e023      	b.n	800cc54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	68b9      	ldr	r1, [r7, #8]
 800cc12:	4618      	mov	r0, r3
 800cc14:	f000 fcce 	bl	800d5b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cc26:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc36:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cc3e:	68bb      	ldr	r3, [r7, #8]
 800cc40:	691b      	ldr	r3, [r3, #16]
 800cc42:	021a      	lsls	r2, r3, #8
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	430a      	orrs	r2, r1
 800cc4a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cc4c:	e002      	b.n	800cc54 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cc4e:	2301      	movs	r3, #1
 800cc50:	75fb      	strb	r3, [r7, #23]
      break;
 800cc52:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	2200      	movs	r2, #0
 800cc58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cc5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	3718      	adds	r7, #24
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}
 800cc66:	bf00      	nop

0800cc68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b084      	sub	sp, #16
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
 800cc70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cc72:	2300      	movs	r3, #0
 800cc74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc7c:	2b01      	cmp	r3, #1
 800cc7e:	d101      	bne.n	800cc84 <HAL_TIM_ConfigClockSource+0x1c>
 800cc80:	2302      	movs	r3, #2
 800cc82:	e0dc      	b.n	800ce3e <HAL_TIM_ConfigClockSource+0x1d6>
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2201      	movs	r2, #1
 800cc88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2202      	movs	r2, #2
 800cc90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	689b      	ldr	r3, [r3, #8]
 800cc9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cc9c:	68ba      	ldr	r2, [r7, #8]
 800cc9e:	4b6a      	ldr	r3, [pc, #424]	; (800ce48 <HAL_TIM_ConfigClockSource+0x1e0>)
 800cca0:	4013      	ands	r3, r2
 800cca2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ccaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	68ba      	ldr	r2, [r7, #8]
 800ccb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	4a64      	ldr	r2, [pc, #400]	; (800ce4c <HAL_TIM_ConfigClockSource+0x1e4>)
 800ccba:	4293      	cmp	r3, r2
 800ccbc:	f000 80a9 	beq.w	800ce12 <HAL_TIM_ConfigClockSource+0x1aa>
 800ccc0:	4a62      	ldr	r2, [pc, #392]	; (800ce4c <HAL_TIM_ConfigClockSource+0x1e4>)
 800ccc2:	4293      	cmp	r3, r2
 800ccc4:	f200 80ae 	bhi.w	800ce24 <HAL_TIM_ConfigClockSource+0x1bc>
 800ccc8:	4a61      	ldr	r2, [pc, #388]	; (800ce50 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ccca:	4293      	cmp	r3, r2
 800cccc:	f000 80a1 	beq.w	800ce12 <HAL_TIM_ConfigClockSource+0x1aa>
 800ccd0:	4a5f      	ldr	r2, [pc, #380]	; (800ce50 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ccd2:	4293      	cmp	r3, r2
 800ccd4:	f200 80a6 	bhi.w	800ce24 <HAL_TIM_ConfigClockSource+0x1bc>
 800ccd8:	4a5e      	ldr	r2, [pc, #376]	; (800ce54 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	f000 8099 	beq.w	800ce12 <HAL_TIM_ConfigClockSource+0x1aa>
 800cce0:	4a5c      	ldr	r2, [pc, #368]	; (800ce54 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cce2:	4293      	cmp	r3, r2
 800cce4:	f200 809e 	bhi.w	800ce24 <HAL_TIM_ConfigClockSource+0x1bc>
 800cce8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ccec:	f000 8091 	beq.w	800ce12 <HAL_TIM_ConfigClockSource+0x1aa>
 800ccf0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ccf4:	f200 8096 	bhi.w	800ce24 <HAL_TIM_ConfigClockSource+0x1bc>
 800ccf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ccfc:	f000 8089 	beq.w	800ce12 <HAL_TIM_ConfigClockSource+0x1aa>
 800cd00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd04:	f200 808e 	bhi.w	800ce24 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd0c:	d03e      	beq.n	800cd8c <HAL_TIM_ConfigClockSource+0x124>
 800cd0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd12:	f200 8087 	bhi.w	800ce24 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd1a:	f000 8086 	beq.w	800ce2a <HAL_TIM_ConfigClockSource+0x1c2>
 800cd1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd22:	d87f      	bhi.n	800ce24 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd24:	2b70      	cmp	r3, #112	; 0x70
 800cd26:	d01a      	beq.n	800cd5e <HAL_TIM_ConfigClockSource+0xf6>
 800cd28:	2b70      	cmp	r3, #112	; 0x70
 800cd2a:	d87b      	bhi.n	800ce24 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd2c:	2b60      	cmp	r3, #96	; 0x60
 800cd2e:	d050      	beq.n	800cdd2 <HAL_TIM_ConfigClockSource+0x16a>
 800cd30:	2b60      	cmp	r3, #96	; 0x60
 800cd32:	d877      	bhi.n	800ce24 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd34:	2b50      	cmp	r3, #80	; 0x50
 800cd36:	d03c      	beq.n	800cdb2 <HAL_TIM_ConfigClockSource+0x14a>
 800cd38:	2b50      	cmp	r3, #80	; 0x50
 800cd3a:	d873      	bhi.n	800ce24 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd3c:	2b40      	cmp	r3, #64	; 0x40
 800cd3e:	d058      	beq.n	800cdf2 <HAL_TIM_ConfigClockSource+0x18a>
 800cd40:	2b40      	cmp	r3, #64	; 0x40
 800cd42:	d86f      	bhi.n	800ce24 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd44:	2b30      	cmp	r3, #48	; 0x30
 800cd46:	d064      	beq.n	800ce12 <HAL_TIM_ConfigClockSource+0x1aa>
 800cd48:	2b30      	cmp	r3, #48	; 0x30
 800cd4a:	d86b      	bhi.n	800ce24 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd4c:	2b20      	cmp	r3, #32
 800cd4e:	d060      	beq.n	800ce12 <HAL_TIM_ConfigClockSource+0x1aa>
 800cd50:	2b20      	cmp	r3, #32
 800cd52:	d867      	bhi.n	800ce24 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d05c      	beq.n	800ce12 <HAL_TIM_ConfigClockSource+0x1aa>
 800cd58:	2b10      	cmp	r3, #16
 800cd5a:	d05a      	beq.n	800ce12 <HAL_TIM_ConfigClockSource+0x1aa>
 800cd5c:	e062      	b.n	800ce24 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cd6e:	f000 ff19 	bl	800dba4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	689b      	ldr	r3, [r3, #8]
 800cd78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cd7a:	68bb      	ldr	r3, [r7, #8]
 800cd7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cd80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	68ba      	ldr	r2, [r7, #8]
 800cd88:	609a      	str	r2, [r3, #8]
      break;
 800cd8a:	e04f      	b.n	800ce2c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cd9c:	f000 ff02 	bl	800dba4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	689a      	ldr	r2, [r3, #8]
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cdae:	609a      	str	r2, [r3, #8]
      break;
 800cdb0:	e03c      	b.n	800ce2c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cdbe:	461a      	mov	r2, r3
 800cdc0:	f000 fdbc 	bl	800d93c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	2150      	movs	r1, #80	; 0x50
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f000 fecc 	bl	800db68 <TIM_ITRx_SetConfig>
      break;
 800cdd0:	e02c      	b.n	800ce2c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cdde:	461a      	mov	r2, r3
 800cde0:	f000 fe18 	bl	800da14 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	2160      	movs	r1, #96	; 0x60
 800cdea:	4618      	mov	r0, r3
 800cdec:	f000 febc 	bl	800db68 <TIM_ITRx_SetConfig>
      break;
 800cdf0:	e01c      	b.n	800ce2c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cdfe:	461a      	mov	r2, r3
 800ce00:	f000 fd9c 	bl	800d93c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	2140      	movs	r1, #64	; 0x40
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f000 feac 	bl	800db68 <TIM_ITRx_SetConfig>
      break;
 800ce10:	e00c      	b.n	800ce2c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681a      	ldr	r2, [r3, #0]
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	4610      	mov	r0, r2
 800ce1e:	f000 fea3 	bl	800db68 <TIM_ITRx_SetConfig>
      break;
 800ce22:	e003      	b.n	800ce2c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ce24:	2301      	movs	r3, #1
 800ce26:	73fb      	strb	r3, [r7, #15]
      break;
 800ce28:	e000      	b.n	800ce2c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ce2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2201      	movs	r2, #1
 800ce30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2200      	movs	r2, #0
 800ce38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ce3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce3e:	4618      	mov	r0, r3
 800ce40:	3710      	adds	r7, #16
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bd80      	pop	{r7, pc}
 800ce46:	bf00      	nop
 800ce48:	ffceff88 	.word	0xffceff88
 800ce4c:	00100040 	.word	0x00100040
 800ce50:	00100030 	.word	0x00100030
 800ce54:	00100020 	.word	0x00100020

0800ce58 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b082      	sub	sp, #8
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
 800ce60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce68:	2b01      	cmp	r3, #1
 800ce6a:	d101      	bne.n	800ce70 <HAL_TIM_SlaveConfigSynchro+0x18>
 800ce6c:	2302      	movs	r3, #2
 800ce6e:	e031      	b.n	800ced4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2201      	movs	r2, #1
 800ce74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2202      	movs	r2, #2
 800ce7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800ce80:	6839      	ldr	r1, [r7, #0]
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f000 fbfc 	bl	800d680 <TIM_SlaveTimer_SetConfig>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d009      	beq.n	800cea2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2201      	movs	r2, #1
 800ce92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2200      	movs	r2, #0
 800ce9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800ce9e:	2301      	movs	r3, #1
 800cea0:	e018      	b.n	800ced4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	68da      	ldr	r2, [r3, #12]
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ceb0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	68da      	ldr	r2, [r3, #12]
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cec0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	2201      	movs	r2, #1
 800cec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2200      	movs	r2, #0
 800cece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ced2:	2300      	movs	r3, #0
}
 800ced4:	4618      	mov	r0, r3
 800ced6:	3708      	adds	r7, #8
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}

0800cedc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cedc:	b480      	push	{r7}
 800cede:	b085      	sub	sp, #20
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
 800cee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800cee6:	2300      	movs	r3, #0
 800cee8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	2b0c      	cmp	r3, #12
 800ceee:	d831      	bhi.n	800cf54 <HAL_TIM_ReadCapturedValue+0x78>
 800cef0:	a201      	add	r2, pc, #4	; (adr r2, 800cef8 <HAL_TIM_ReadCapturedValue+0x1c>)
 800cef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cef6:	bf00      	nop
 800cef8:	0800cf2d 	.word	0x0800cf2d
 800cefc:	0800cf55 	.word	0x0800cf55
 800cf00:	0800cf55 	.word	0x0800cf55
 800cf04:	0800cf55 	.word	0x0800cf55
 800cf08:	0800cf37 	.word	0x0800cf37
 800cf0c:	0800cf55 	.word	0x0800cf55
 800cf10:	0800cf55 	.word	0x0800cf55
 800cf14:	0800cf55 	.word	0x0800cf55
 800cf18:	0800cf41 	.word	0x0800cf41
 800cf1c:	0800cf55 	.word	0x0800cf55
 800cf20:	0800cf55 	.word	0x0800cf55
 800cf24:	0800cf55 	.word	0x0800cf55
 800cf28:	0800cf4b 	.word	0x0800cf4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf32:	60fb      	str	r3, [r7, #12]

      break;
 800cf34:	e00f      	b.n	800cf56 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf3c:	60fb      	str	r3, [r7, #12]

      break;
 800cf3e:	e00a      	b.n	800cf56 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf46:	60fb      	str	r3, [r7, #12]

      break;
 800cf48:	e005      	b.n	800cf56 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf50:	60fb      	str	r3, [r7, #12]

      break;
 800cf52:	e000      	b.n	800cf56 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800cf54:	bf00      	nop
  }

  return tmpreg;
 800cf56:	68fb      	ldr	r3, [r7, #12]
}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	3714      	adds	r7, #20
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf62:	4770      	bx	lr

0800cf64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cf64:	b480      	push	{r7}
 800cf66:	b083      	sub	sp, #12
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cf6c:	bf00      	nop
 800cf6e:	370c      	adds	r7, #12
 800cf70:	46bd      	mov	sp, r7
 800cf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf76:	4770      	bx	lr

0800cf78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cf78:	b480      	push	{r7}
 800cf7a:	b083      	sub	sp, #12
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cf80:	bf00      	nop
 800cf82:	370c      	adds	r7, #12
 800cf84:	46bd      	mov	sp, r7
 800cf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8a:	4770      	bx	lr

0800cf8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b083      	sub	sp, #12
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cf94:	bf00      	nop
 800cf96:	370c      	adds	r7, #12
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9e:	4770      	bx	lr

0800cfa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cfa0:	b480      	push	{r7}
 800cfa2:	b085      	sub	sp, #20
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
 800cfa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	4a40      	ldr	r2, [pc, #256]	; (800d0b4 <TIM_Base_SetConfig+0x114>)
 800cfb4:	4293      	cmp	r3, r2
 800cfb6:	d013      	beq.n	800cfe0 <TIM_Base_SetConfig+0x40>
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cfbe:	d00f      	beq.n	800cfe0 <TIM_Base_SetConfig+0x40>
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	4a3d      	ldr	r2, [pc, #244]	; (800d0b8 <TIM_Base_SetConfig+0x118>)
 800cfc4:	4293      	cmp	r3, r2
 800cfc6:	d00b      	beq.n	800cfe0 <TIM_Base_SetConfig+0x40>
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	4a3c      	ldr	r2, [pc, #240]	; (800d0bc <TIM_Base_SetConfig+0x11c>)
 800cfcc:	4293      	cmp	r3, r2
 800cfce:	d007      	beq.n	800cfe0 <TIM_Base_SetConfig+0x40>
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	4a3b      	ldr	r2, [pc, #236]	; (800d0c0 <TIM_Base_SetConfig+0x120>)
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	d003      	beq.n	800cfe0 <TIM_Base_SetConfig+0x40>
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	4a3a      	ldr	r2, [pc, #232]	; (800d0c4 <TIM_Base_SetConfig+0x124>)
 800cfdc:	4293      	cmp	r3, r2
 800cfde:	d108      	bne.n	800cff2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cfe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	685b      	ldr	r3, [r3, #4]
 800cfec:	68fa      	ldr	r2, [r7, #12]
 800cfee:	4313      	orrs	r3, r2
 800cff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	4a2f      	ldr	r2, [pc, #188]	; (800d0b4 <TIM_Base_SetConfig+0x114>)
 800cff6:	4293      	cmp	r3, r2
 800cff8:	d01f      	beq.n	800d03a <TIM_Base_SetConfig+0x9a>
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d000:	d01b      	beq.n	800d03a <TIM_Base_SetConfig+0x9a>
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	4a2c      	ldr	r2, [pc, #176]	; (800d0b8 <TIM_Base_SetConfig+0x118>)
 800d006:	4293      	cmp	r3, r2
 800d008:	d017      	beq.n	800d03a <TIM_Base_SetConfig+0x9a>
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	4a2b      	ldr	r2, [pc, #172]	; (800d0bc <TIM_Base_SetConfig+0x11c>)
 800d00e:	4293      	cmp	r3, r2
 800d010:	d013      	beq.n	800d03a <TIM_Base_SetConfig+0x9a>
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	4a2a      	ldr	r2, [pc, #168]	; (800d0c0 <TIM_Base_SetConfig+0x120>)
 800d016:	4293      	cmp	r3, r2
 800d018:	d00f      	beq.n	800d03a <TIM_Base_SetConfig+0x9a>
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	4a29      	ldr	r2, [pc, #164]	; (800d0c4 <TIM_Base_SetConfig+0x124>)
 800d01e:	4293      	cmp	r3, r2
 800d020:	d00b      	beq.n	800d03a <TIM_Base_SetConfig+0x9a>
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	4a28      	ldr	r2, [pc, #160]	; (800d0c8 <TIM_Base_SetConfig+0x128>)
 800d026:	4293      	cmp	r3, r2
 800d028:	d007      	beq.n	800d03a <TIM_Base_SetConfig+0x9a>
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	4a27      	ldr	r2, [pc, #156]	; (800d0cc <TIM_Base_SetConfig+0x12c>)
 800d02e:	4293      	cmp	r3, r2
 800d030:	d003      	beq.n	800d03a <TIM_Base_SetConfig+0x9a>
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	4a26      	ldr	r2, [pc, #152]	; (800d0d0 <TIM_Base_SetConfig+0x130>)
 800d036:	4293      	cmp	r3, r2
 800d038:	d108      	bne.n	800d04c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	68db      	ldr	r3, [r3, #12]
 800d046:	68fa      	ldr	r2, [r7, #12]
 800d048:	4313      	orrs	r3, r2
 800d04a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	695b      	ldr	r3, [r3, #20]
 800d056:	4313      	orrs	r3, r2
 800d058:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	68fa      	ldr	r2, [r7, #12]
 800d05e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	689a      	ldr	r2, [r3, #8]
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	681a      	ldr	r2, [r3, #0]
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	4a10      	ldr	r2, [pc, #64]	; (800d0b4 <TIM_Base_SetConfig+0x114>)
 800d074:	4293      	cmp	r3, r2
 800d076:	d00f      	beq.n	800d098 <TIM_Base_SetConfig+0xf8>
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	4a12      	ldr	r2, [pc, #72]	; (800d0c4 <TIM_Base_SetConfig+0x124>)
 800d07c:	4293      	cmp	r3, r2
 800d07e:	d00b      	beq.n	800d098 <TIM_Base_SetConfig+0xf8>
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	4a11      	ldr	r2, [pc, #68]	; (800d0c8 <TIM_Base_SetConfig+0x128>)
 800d084:	4293      	cmp	r3, r2
 800d086:	d007      	beq.n	800d098 <TIM_Base_SetConfig+0xf8>
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	4a10      	ldr	r2, [pc, #64]	; (800d0cc <TIM_Base_SetConfig+0x12c>)
 800d08c:	4293      	cmp	r3, r2
 800d08e:	d003      	beq.n	800d098 <TIM_Base_SetConfig+0xf8>
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	4a0f      	ldr	r2, [pc, #60]	; (800d0d0 <TIM_Base_SetConfig+0x130>)
 800d094:	4293      	cmp	r3, r2
 800d096:	d103      	bne.n	800d0a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	691a      	ldr	r2, [r3, #16]
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2201      	movs	r2, #1
 800d0a4:	615a      	str	r2, [r3, #20]
}
 800d0a6:	bf00      	nop
 800d0a8:	3714      	adds	r7, #20
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b0:	4770      	bx	lr
 800d0b2:	bf00      	nop
 800d0b4:	40010000 	.word	0x40010000
 800d0b8:	40000400 	.word	0x40000400
 800d0bc:	40000800 	.word	0x40000800
 800d0c0:	40000c00 	.word	0x40000c00
 800d0c4:	40010400 	.word	0x40010400
 800d0c8:	40014000 	.word	0x40014000
 800d0cc:	40014400 	.word	0x40014400
 800d0d0:	40014800 	.word	0x40014800

0800d0d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d0d4:	b480      	push	{r7}
 800d0d6:	b087      	sub	sp, #28
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
 800d0dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	6a1b      	ldr	r3, [r3, #32]
 800d0e2:	f023 0201 	bic.w	r2, r3, #1
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	6a1b      	ldr	r3, [r3, #32]
 800d0ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	685b      	ldr	r3, [r3, #4]
 800d0f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	699b      	ldr	r3, [r3, #24]
 800d0fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d0fc:	68fa      	ldr	r2, [r7, #12]
 800d0fe:	4b37      	ldr	r3, [pc, #220]	; (800d1dc <TIM_OC1_SetConfig+0x108>)
 800d100:	4013      	ands	r3, r2
 800d102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	f023 0303 	bic.w	r3, r3, #3
 800d10a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	68fa      	ldr	r2, [r7, #12]
 800d112:	4313      	orrs	r3, r2
 800d114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d116:	697b      	ldr	r3, [r7, #20]
 800d118:	f023 0302 	bic.w	r3, r3, #2
 800d11c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	689b      	ldr	r3, [r3, #8]
 800d122:	697a      	ldr	r2, [r7, #20]
 800d124:	4313      	orrs	r3, r2
 800d126:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	4a2d      	ldr	r2, [pc, #180]	; (800d1e0 <TIM_OC1_SetConfig+0x10c>)
 800d12c:	4293      	cmp	r3, r2
 800d12e:	d00f      	beq.n	800d150 <TIM_OC1_SetConfig+0x7c>
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	4a2c      	ldr	r2, [pc, #176]	; (800d1e4 <TIM_OC1_SetConfig+0x110>)
 800d134:	4293      	cmp	r3, r2
 800d136:	d00b      	beq.n	800d150 <TIM_OC1_SetConfig+0x7c>
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	4a2b      	ldr	r2, [pc, #172]	; (800d1e8 <TIM_OC1_SetConfig+0x114>)
 800d13c:	4293      	cmp	r3, r2
 800d13e:	d007      	beq.n	800d150 <TIM_OC1_SetConfig+0x7c>
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	4a2a      	ldr	r2, [pc, #168]	; (800d1ec <TIM_OC1_SetConfig+0x118>)
 800d144:	4293      	cmp	r3, r2
 800d146:	d003      	beq.n	800d150 <TIM_OC1_SetConfig+0x7c>
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	4a29      	ldr	r2, [pc, #164]	; (800d1f0 <TIM_OC1_SetConfig+0x11c>)
 800d14c:	4293      	cmp	r3, r2
 800d14e:	d10c      	bne.n	800d16a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d150:	697b      	ldr	r3, [r7, #20]
 800d152:	f023 0308 	bic.w	r3, r3, #8
 800d156:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	68db      	ldr	r3, [r3, #12]
 800d15c:	697a      	ldr	r2, [r7, #20]
 800d15e:	4313      	orrs	r3, r2
 800d160:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d162:	697b      	ldr	r3, [r7, #20]
 800d164:	f023 0304 	bic.w	r3, r3, #4
 800d168:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	4a1c      	ldr	r2, [pc, #112]	; (800d1e0 <TIM_OC1_SetConfig+0x10c>)
 800d16e:	4293      	cmp	r3, r2
 800d170:	d00f      	beq.n	800d192 <TIM_OC1_SetConfig+0xbe>
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	4a1b      	ldr	r2, [pc, #108]	; (800d1e4 <TIM_OC1_SetConfig+0x110>)
 800d176:	4293      	cmp	r3, r2
 800d178:	d00b      	beq.n	800d192 <TIM_OC1_SetConfig+0xbe>
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	4a1a      	ldr	r2, [pc, #104]	; (800d1e8 <TIM_OC1_SetConfig+0x114>)
 800d17e:	4293      	cmp	r3, r2
 800d180:	d007      	beq.n	800d192 <TIM_OC1_SetConfig+0xbe>
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	4a19      	ldr	r2, [pc, #100]	; (800d1ec <TIM_OC1_SetConfig+0x118>)
 800d186:	4293      	cmp	r3, r2
 800d188:	d003      	beq.n	800d192 <TIM_OC1_SetConfig+0xbe>
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	4a18      	ldr	r2, [pc, #96]	; (800d1f0 <TIM_OC1_SetConfig+0x11c>)
 800d18e:	4293      	cmp	r3, r2
 800d190:	d111      	bne.n	800d1b6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d192:	693b      	ldr	r3, [r7, #16]
 800d194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d198:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d19a:	693b      	ldr	r3, [r7, #16]
 800d19c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d1a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	695b      	ldr	r3, [r3, #20]
 800d1a6:	693a      	ldr	r2, [r7, #16]
 800d1a8:	4313      	orrs	r3, r2
 800d1aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	699b      	ldr	r3, [r3, #24]
 800d1b0:	693a      	ldr	r2, [r7, #16]
 800d1b2:	4313      	orrs	r3, r2
 800d1b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	693a      	ldr	r2, [r7, #16]
 800d1ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	68fa      	ldr	r2, [r7, #12]
 800d1c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	685a      	ldr	r2, [r3, #4]
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	697a      	ldr	r2, [r7, #20]
 800d1ce:	621a      	str	r2, [r3, #32]
}
 800d1d0:	bf00      	nop
 800d1d2:	371c      	adds	r7, #28
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1da:	4770      	bx	lr
 800d1dc:	fffeff8f 	.word	0xfffeff8f
 800d1e0:	40010000 	.word	0x40010000
 800d1e4:	40010400 	.word	0x40010400
 800d1e8:	40014000 	.word	0x40014000
 800d1ec:	40014400 	.word	0x40014400
 800d1f0:	40014800 	.word	0x40014800

0800d1f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d1f4:	b480      	push	{r7}
 800d1f6:	b087      	sub	sp, #28
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
 800d1fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6a1b      	ldr	r3, [r3, #32]
 800d202:	f023 0210 	bic.w	r2, r3, #16
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6a1b      	ldr	r3, [r3, #32]
 800d20e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	685b      	ldr	r3, [r3, #4]
 800d214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	699b      	ldr	r3, [r3, #24]
 800d21a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d21c:	68fa      	ldr	r2, [r7, #12]
 800d21e:	4b34      	ldr	r3, [pc, #208]	; (800d2f0 <TIM_OC2_SetConfig+0xfc>)
 800d220:	4013      	ands	r3, r2
 800d222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d22a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	021b      	lsls	r3, r3, #8
 800d232:	68fa      	ldr	r2, [r7, #12]
 800d234:	4313      	orrs	r3, r2
 800d236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	f023 0320 	bic.w	r3, r3, #32
 800d23e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d240:	683b      	ldr	r3, [r7, #0]
 800d242:	689b      	ldr	r3, [r3, #8]
 800d244:	011b      	lsls	r3, r3, #4
 800d246:	697a      	ldr	r2, [r7, #20]
 800d248:	4313      	orrs	r3, r2
 800d24a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	4a29      	ldr	r2, [pc, #164]	; (800d2f4 <TIM_OC2_SetConfig+0x100>)
 800d250:	4293      	cmp	r3, r2
 800d252:	d003      	beq.n	800d25c <TIM_OC2_SetConfig+0x68>
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	4a28      	ldr	r2, [pc, #160]	; (800d2f8 <TIM_OC2_SetConfig+0x104>)
 800d258:	4293      	cmp	r3, r2
 800d25a:	d10d      	bne.n	800d278 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d25c:	697b      	ldr	r3, [r7, #20]
 800d25e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d262:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	68db      	ldr	r3, [r3, #12]
 800d268:	011b      	lsls	r3, r3, #4
 800d26a:	697a      	ldr	r2, [r7, #20]
 800d26c:	4313      	orrs	r3, r2
 800d26e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d270:	697b      	ldr	r3, [r7, #20]
 800d272:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d276:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	4a1e      	ldr	r2, [pc, #120]	; (800d2f4 <TIM_OC2_SetConfig+0x100>)
 800d27c:	4293      	cmp	r3, r2
 800d27e:	d00f      	beq.n	800d2a0 <TIM_OC2_SetConfig+0xac>
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	4a1d      	ldr	r2, [pc, #116]	; (800d2f8 <TIM_OC2_SetConfig+0x104>)
 800d284:	4293      	cmp	r3, r2
 800d286:	d00b      	beq.n	800d2a0 <TIM_OC2_SetConfig+0xac>
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	4a1c      	ldr	r2, [pc, #112]	; (800d2fc <TIM_OC2_SetConfig+0x108>)
 800d28c:	4293      	cmp	r3, r2
 800d28e:	d007      	beq.n	800d2a0 <TIM_OC2_SetConfig+0xac>
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	4a1b      	ldr	r2, [pc, #108]	; (800d300 <TIM_OC2_SetConfig+0x10c>)
 800d294:	4293      	cmp	r3, r2
 800d296:	d003      	beq.n	800d2a0 <TIM_OC2_SetConfig+0xac>
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	4a1a      	ldr	r2, [pc, #104]	; (800d304 <TIM_OC2_SetConfig+0x110>)
 800d29c:	4293      	cmp	r3, r2
 800d29e:	d113      	bne.n	800d2c8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d2a0:	693b      	ldr	r3, [r7, #16]
 800d2a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d2a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d2a8:	693b      	ldr	r3, [r7, #16]
 800d2aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d2ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	695b      	ldr	r3, [r3, #20]
 800d2b4:	009b      	lsls	r3, r3, #2
 800d2b6:	693a      	ldr	r2, [r7, #16]
 800d2b8:	4313      	orrs	r3, r2
 800d2ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	699b      	ldr	r3, [r3, #24]
 800d2c0:	009b      	lsls	r3, r3, #2
 800d2c2:	693a      	ldr	r2, [r7, #16]
 800d2c4:	4313      	orrs	r3, r2
 800d2c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	693a      	ldr	r2, [r7, #16]
 800d2cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	68fa      	ldr	r2, [r7, #12]
 800d2d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	685a      	ldr	r2, [r3, #4]
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	697a      	ldr	r2, [r7, #20]
 800d2e0:	621a      	str	r2, [r3, #32]
}
 800d2e2:	bf00      	nop
 800d2e4:	371c      	adds	r7, #28
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ec:	4770      	bx	lr
 800d2ee:	bf00      	nop
 800d2f0:	feff8fff 	.word	0xfeff8fff
 800d2f4:	40010000 	.word	0x40010000
 800d2f8:	40010400 	.word	0x40010400
 800d2fc:	40014000 	.word	0x40014000
 800d300:	40014400 	.word	0x40014400
 800d304:	40014800 	.word	0x40014800

0800d308 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d308:	b480      	push	{r7}
 800d30a:	b087      	sub	sp, #28
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
 800d310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	6a1b      	ldr	r3, [r3, #32]
 800d316:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6a1b      	ldr	r3, [r3, #32]
 800d322:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	685b      	ldr	r3, [r3, #4]
 800d328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	69db      	ldr	r3, [r3, #28]
 800d32e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d330:	68fa      	ldr	r2, [r7, #12]
 800d332:	4b33      	ldr	r3, [pc, #204]	; (800d400 <TIM_OC3_SetConfig+0xf8>)
 800d334:	4013      	ands	r3, r2
 800d336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	f023 0303 	bic.w	r3, r3, #3
 800d33e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	68fa      	ldr	r2, [r7, #12]
 800d346:	4313      	orrs	r3, r2
 800d348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d350:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	689b      	ldr	r3, [r3, #8]
 800d356:	021b      	lsls	r3, r3, #8
 800d358:	697a      	ldr	r2, [r7, #20]
 800d35a:	4313      	orrs	r3, r2
 800d35c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	4a28      	ldr	r2, [pc, #160]	; (800d404 <TIM_OC3_SetConfig+0xfc>)
 800d362:	4293      	cmp	r3, r2
 800d364:	d003      	beq.n	800d36e <TIM_OC3_SetConfig+0x66>
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	4a27      	ldr	r2, [pc, #156]	; (800d408 <TIM_OC3_SetConfig+0x100>)
 800d36a:	4293      	cmp	r3, r2
 800d36c:	d10d      	bne.n	800d38a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d374:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	68db      	ldr	r3, [r3, #12]
 800d37a:	021b      	lsls	r3, r3, #8
 800d37c:	697a      	ldr	r2, [r7, #20]
 800d37e:	4313      	orrs	r3, r2
 800d380:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d382:	697b      	ldr	r3, [r7, #20]
 800d384:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d388:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	4a1d      	ldr	r2, [pc, #116]	; (800d404 <TIM_OC3_SetConfig+0xfc>)
 800d38e:	4293      	cmp	r3, r2
 800d390:	d00f      	beq.n	800d3b2 <TIM_OC3_SetConfig+0xaa>
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	4a1c      	ldr	r2, [pc, #112]	; (800d408 <TIM_OC3_SetConfig+0x100>)
 800d396:	4293      	cmp	r3, r2
 800d398:	d00b      	beq.n	800d3b2 <TIM_OC3_SetConfig+0xaa>
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	4a1b      	ldr	r2, [pc, #108]	; (800d40c <TIM_OC3_SetConfig+0x104>)
 800d39e:	4293      	cmp	r3, r2
 800d3a0:	d007      	beq.n	800d3b2 <TIM_OC3_SetConfig+0xaa>
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	4a1a      	ldr	r2, [pc, #104]	; (800d410 <TIM_OC3_SetConfig+0x108>)
 800d3a6:	4293      	cmp	r3, r2
 800d3a8:	d003      	beq.n	800d3b2 <TIM_OC3_SetConfig+0xaa>
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	4a19      	ldr	r2, [pc, #100]	; (800d414 <TIM_OC3_SetConfig+0x10c>)
 800d3ae:	4293      	cmp	r3, r2
 800d3b0:	d113      	bne.n	800d3da <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d3b2:	693b      	ldr	r3, [r7, #16]
 800d3b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d3b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d3ba:	693b      	ldr	r3, [r7, #16]
 800d3bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d3c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	695b      	ldr	r3, [r3, #20]
 800d3c6:	011b      	lsls	r3, r3, #4
 800d3c8:	693a      	ldr	r2, [r7, #16]
 800d3ca:	4313      	orrs	r3, r2
 800d3cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	699b      	ldr	r3, [r3, #24]
 800d3d2:	011b      	lsls	r3, r3, #4
 800d3d4:	693a      	ldr	r2, [r7, #16]
 800d3d6:	4313      	orrs	r3, r2
 800d3d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	693a      	ldr	r2, [r7, #16]
 800d3de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	68fa      	ldr	r2, [r7, #12]
 800d3e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	685a      	ldr	r2, [r3, #4]
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	697a      	ldr	r2, [r7, #20]
 800d3f2:	621a      	str	r2, [r3, #32]
}
 800d3f4:	bf00      	nop
 800d3f6:	371c      	adds	r7, #28
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fe:	4770      	bx	lr
 800d400:	fffeff8f 	.word	0xfffeff8f
 800d404:	40010000 	.word	0x40010000
 800d408:	40010400 	.word	0x40010400
 800d40c:	40014000 	.word	0x40014000
 800d410:	40014400 	.word	0x40014400
 800d414:	40014800 	.word	0x40014800

0800d418 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d418:	b480      	push	{r7}
 800d41a:	b087      	sub	sp, #28
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
 800d420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6a1b      	ldr	r3, [r3, #32]
 800d426:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	6a1b      	ldr	r3, [r3, #32]
 800d432:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	685b      	ldr	r3, [r3, #4]
 800d438:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	69db      	ldr	r3, [r3, #28]
 800d43e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d440:	68fa      	ldr	r2, [r7, #12]
 800d442:	4b24      	ldr	r3, [pc, #144]	; (800d4d4 <TIM_OC4_SetConfig+0xbc>)
 800d444:	4013      	ands	r3, r2
 800d446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d44e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	021b      	lsls	r3, r3, #8
 800d456:	68fa      	ldr	r2, [r7, #12]
 800d458:	4313      	orrs	r3, r2
 800d45a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d462:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	689b      	ldr	r3, [r3, #8]
 800d468:	031b      	lsls	r3, r3, #12
 800d46a:	693a      	ldr	r2, [r7, #16]
 800d46c:	4313      	orrs	r3, r2
 800d46e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	4a19      	ldr	r2, [pc, #100]	; (800d4d8 <TIM_OC4_SetConfig+0xc0>)
 800d474:	4293      	cmp	r3, r2
 800d476:	d00f      	beq.n	800d498 <TIM_OC4_SetConfig+0x80>
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	4a18      	ldr	r2, [pc, #96]	; (800d4dc <TIM_OC4_SetConfig+0xc4>)
 800d47c:	4293      	cmp	r3, r2
 800d47e:	d00b      	beq.n	800d498 <TIM_OC4_SetConfig+0x80>
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	4a17      	ldr	r2, [pc, #92]	; (800d4e0 <TIM_OC4_SetConfig+0xc8>)
 800d484:	4293      	cmp	r3, r2
 800d486:	d007      	beq.n	800d498 <TIM_OC4_SetConfig+0x80>
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	4a16      	ldr	r2, [pc, #88]	; (800d4e4 <TIM_OC4_SetConfig+0xcc>)
 800d48c:	4293      	cmp	r3, r2
 800d48e:	d003      	beq.n	800d498 <TIM_OC4_SetConfig+0x80>
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	4a15      	ldr	r2, [pc, #84]	; (800d4e8 <TIM_OC4_SetConfig+0xd0>)
 800d494:	4293      	cmp	r3, r2
 800d496:	d109      	bne.n	800d4ac <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d498:	697b      	ldr	r3, [r7, #20]
 800d49a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d49e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	695b      	ldr	r3, [r3, #20]
 800d4a4:	019b      	lsls	r3, r3, #6
 800d4a6:	697a      	ldr	r2, [r7, #20]
 800d4a8:	4313      	orrs	r3, r2
 800d4aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	697a      	ldr	r2, [r7, #20]
 800d4b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	68fa      	ldr	r2, [r7, #12]
 800d4b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	685a      	ldr	r2, [r3, #4]
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	693a      	ldr	r2, [r7, #16]
 800d4c4:	621a      	str	r2, [r3, #32]
}
 800d4c6:	bf00      	nop
 800d4c8:	371c      	adds	r7, #28
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d0:	4770      	bx	lr
 800d4d2:	bf00      	nop
 800d4d4:	feff8fff 	.word	0xfeff8fff
 800d4d8:	40010000 	.word	0x40010000
 800d4dc:	40010400 	.word	0x40010400
 800d4e0:	40014000 	.word	0x40014000
 800d4e4:	40014400 	.word	0x40014400
 800d4e8:	40014800 	.word	0x40014800

0800d4ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d4ec:	b480      	push	{r7}
 800d4ee:	b087      	sub	sp, #28
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
 800d4f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6a1b      	ldr	r3, [r3, #32]
 800d4fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6a1b      	ldr	r3, [r3, #32]
 800d506:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	685b      	ldr	r3, [r3, #4]
 800d50c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d514:	68fa      	ldr	r2, [r7, #12]
 800d516:	4b21      	ldr	r3, [pc, #132]	; (800d59c <TIM_OC5_SetConfig+0xb0>)
 800d518:	4013      	ands	r3, r2
 800d51a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	68fa      	ldr	r2, [r7, #12]
 800d522:	4313      	orrs	r3, r2
 800d524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d526:	693b      	ldr	r3, [r7, #16]
 800d528:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d52c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d52e:	683b      	ldr	r3, [r7, #0]
 800d530:	689b      	ldr	r3, [r3, #8]
 800d532:	041b      	lsls	r3, r3, #16
 800d534:	693a      	ldr	r2, [r7, #16]
 800d536:	4313      	orrs	r3, r2
 800d538:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	4a18      	ldr	r2, [pc, #96]	; (800d5a0 <TIM_OC5_SetConfig+0xb4>)
 800d53e:	4293      	cmp	r3, r2
 800d540:	d00f      	beq.n	800d562 <TIM_OC5_SetConfig+0x76>
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	4a17      	ldr	r2, [pc, #92]	; (800d5a4 <TIM_OC5_SetConfig+0xb8>)
 800d546:	4293      	cmp	r3, r2
 800d548:	d00b      	beq.n	800d562 <TIM_OC5_SetConfig+0x76>
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	4a16      	ldr	r2, [pc, #88]	; (800d5a8 <TIM_OC5_SetConfig+0xbc>)
 800d54e:	4293      	cmp	r3, r2
 800d550:	d007      	beq.n	800d562 <TIM_OC5_SetConfig+0x76>
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	4a15      	ldr	r2, [pc, #84]	; (800d5ac <TIM_OC5_SetConfig+0xc0>)
 800d556:	4293      	cmp	r3, r2
 800d558:	d003      	beq.n	800d562 <TIM_OC5_SetConfig+0x76>
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	4a14      	ldr	r2, [pc, #80]	; (800d5b0 <TIM_OC5_SetConfig+0xc4>)
 800d55e:	4293      	cmp	r3, r2
 800d560:	d109      	bne.n	800d576 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d562:	697b      	ldr	r3, [r7, #20]
 800d564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d568:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	695b      	ldr	r3, [r3, #20]
 800d56e:	021b      	lsls	r3, r3, #8
 800d570:	697a      	ldr	r2, [r7, #20]
 800d572:	4313      	orrs	r3, r2
 800d574:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	697a      	ldr	r2, [r7, #20]
 800d57a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	68fa      	ldr	r2, [r7, #12]
 800d580:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	685a      	ldr	r2, [r3, #4]
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	693a      	ldr	r2, [r7, #16]
 800d58e:	621a      	str	r2, [r3, #32]
}
 800d590:	bf00      	nop
 800d592:	371c      	adds	r7, #28
 800d594:	46bd      	mov	sp, r7
 800d596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59a:	4770      	bx	lr
 800d59c:	fffeff8f 	.word	0xfffeff8f
 800d5a0:	40010000 	.word	0x40010000
 800d5a4:	40010400 	.word	0x40010400
 800d5a8:	40014000 	.word	0x40014000
 800d5ac:	40014400 	.word	0x40014400
 800d5b0:	40014800 	.word	0x40014800

0800d5b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d5b4:	b480      	push	{r7}
 800d5b6:	b087      	sub	sp, #28
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
 800d5bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	6a1b      	ldr	r3, [r3, #32]
 800d5c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6a1b      	ldr	r3, [r3, #32]
 800d5ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	685b      	ldr	r3, [r3, #4]
 800d5d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d5dc:	68fa      	ldr	r2, [r7, #12]
 800d5de:	4b22      	ldr	r3, [pc, #136]	; (800d668 <TIM_OC6_SetConfig+0xb4>)
 800d5e0:	4013      	ands	r3, r2
 800d5e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	021b      	lsls	r3, r3, #8
 800d5ea:	68fa      	ldr	r2, [r7, #12]
 800d5ec:	4313      	orrs	r3, r2
 800d5ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d5f0:	693b      	ldr	r3, [r7, #16]
 800d5f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d5f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	689b      	ldr	r3, [r3, #8]
 800d5fc:	051b      	lsls	r3, r3, #20
 800d5fe:	693a      	ldr	r2, [r7, #16]
 800d600:	4313      	orrs	r3, r2
 800d602:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	4a19      	ldr	r2, [pc, #100]	; (800d66c <TIM_OC6_SetConfig+0xb8>)
 800d608:	4293      	cmp	r3, r2
 800d60a:	d00f      	beq.n	800d62c <TIM_OC6_SetConfig+0x78>
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	4a18      	ldr	r2, [pc, #96]	; (800d670 <TIM_OC6_SetConfig+0xbc>)
 800d610:	4293      	cmp	r3, r2
 800d612:	d00b      	beq.n	800d62c <TIM_OC6_SetConfig+0x78>
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	4a17      	ldr	r2, [pc, #92]	; (800d674 <TIM_OC6_SetConfig+0xc0>)
 800d618:	4293      	cmp	r3, r2
 800d61a:	d007      	beq.n	800d62c <TIM_OC6_SetConfig+0x78>
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	4a16      	ldr	r2, [pc, #88]	; (800d678 <TIM_OC6_SetConfig+0xc4>)
 800d620:	4293      	cmp	r3, r2
 800d622:	d003      	beq.n	800d62c <TIM_OC6_SetConfig+0x78>
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	4a15      	ldr	r2, [pc, #84]	; (800d67c <TIM_OC6_SetConfig+0xc8>)
 800d628:	4293      	cmp	r3, r2
 800d62a:	d109      	bne.n	800d640 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d62c:	697b      	ldr	r3, [r7, #20]
 800d62e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d632:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	695b      	ldr	r3, [r3, #20]
 800d638:	029b      	lsls	r3, r3, #10
 800d63a:	697a      	ldr	r2, [r7, #20]
 800d63c:	4313      	orrs	r3, r2
 800d63e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	697a      	ldr	r2, [r7, #20]
 800d644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	68fa      	ldr	r2, [r7, #12]
 800d64a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d64c:	683b      	ldr	r3, [r7, #0]
 800d64e:	685a      	ldr	r2, [r3, #4]
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	693a      	ldr	r2, [r7, #16]
 800d658:	621a      	str	r2, [r3, #32]
}
 800d65a:	bf00      	nop
 800d65c:	371c      	adds	r7, #28
 800d65e:	46bd      	mov	sp, r7
 800d660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d664:	4770      	bx	lr
 800d666:	bf00      	nop
 800d668:	feff8fff 	.word	0xfeff8fff
 800d66c:	40010000 	.word	0x40010000
 800d670:	40010400 	.word	0x40010400
 800d674:	40014000 	.word	0x40014000
 800d678:	40014400 	.word	0x40014400
 800d67c:	40014800 	.word	0x40014800

0800d680 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b086      	sub	sp, #24
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
 800d688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d68a:	2300      	movs	r3, #0
 800d68c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	689b      	ldr	r3, [r3, #8]
 800d694:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d696:	693a      	ldr	r2, [r7, #16]
 800d698:	4b65      	ldr	r3, [pc, #404]	; (800d830 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800d69a:	4013      	ands	r3, r2
 800d69c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	685b      	ldr	r3, [r3, #4]
 800d6a2:	693a      	ldr	r2, [r7, #16]
 800d6a4:	4313      	orrs	r3, r2
 800d6a6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800d6a8:	693a      	ldr	r2, [r7, #16]
 800d6aa:	4b62      	ldr	r3, [pc, #392]	; (800d834 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800d6ac:	4013      	ands	r3, r2
 800d6ae:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	693a      	ldr	r2, [r7, #16]
 800d6b6:	4313      	orrs	r3, r2
 800d6b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	693a      	ldr	r2, [r7, #16]
 800d6c0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	685b      	ldr	r3, [r3, #4]
 800d6c6:	4a5c      	ldr	r2, [pc, #368]	; (800d838 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	f000 80ab 	beq.w	800d824 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d6ce:	4a5a      	ldr	r2, [pc, #360]	; (800d838 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800d6d0:	4293      	cmp	r3, r2
 800d6d2:	f200 80a4 	bhi.w	800d81e <TIM_SlaveTimer_SetConfig+0x19e>
 800d6d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d6da:	f000 80a3 	beq.w	800d824 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d6de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d6e2:	f200 809c 	bhi.w	800d81e <TIM_SlaveTimer_SetConfig+0x19e>
 800d6e6:	4a55      	ldr	r2, [pc, #340]	; (800d83c <TIM_SlaveTimer_SetConfig+0x1bc>)
 800d6e8:	4293      	cmp	r3, r2
 800d6ea:	f000 809b 	beq.w	800d824 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d6ee:	4a53      	ldr	r2, [pc, #332]	; (800d83c <TIM_SlaveTimer_SetConfig+0x1bc>)
 800d6f0:	4293      	cmp	r3, r2
 800d6f2:	f200 8094 	bhi.w	800d81e <TIM_SlaveTimer_SetConfig+0x19e>
 800d6f6:	4a52      	ldr	r2, [pc, #328]	; (800d840 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800d6f8:	4293      	cmp	r3, r2
 800d6fa:	f000 8093 	beq.w	800d824 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d6fe:	4a50      	ldr	r2, [pc, #320]	; (800d840 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800d700:	4293      	cmp	r3, r2
 800d702:	f200 808c 	bhi.w	800d81e <TIM_SlaveTimer_SetConfig+0x19e>
 800d706:	4a4f      	ldr	r2, [pc, #316]	; (800d844 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800d708:	4293      	cmp	r3, r2
 800d70a:	f000 808b 	beq.w	800d824 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d70e:	4a4d      	ldr	r2, [pc, #308]	; (800d844 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800d710:	4293      	cmp	r3, r2
 800d712:	f200 8084 	bhi.w	800d81e <TIM_SlaveTimer_SetConfig+0x19e>
 800d716:	4a4c      	ldr	r2, [pc, #304]	; (800d848 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800d718:	4293      	cmp	r3, r2
 800d71a:	f000 8083 	beq.w	800d824 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d71e:	4a4a      	ldr	r2, [pc, #296]	; (800d848 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800d720:	4293      	cmp	r3, r2
 800d722:	d87c      	bhi.n	800d81e <TIM_SlaveTimer_SetConfig+0x19e>
 800d724:	4a49      	ldr	r2, [pc, #292]	; (800d84c <TIM_SlaveTimer_SetConfig+0x1cc>)
 800d726:	4293      	cmp	r3, r2
 800d728:	d07c      	beq.n	800d824 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d72a:	4a48      	ldr	r2, [pc, #288]	; (800d84c <TIM_SlaveTimer_SetConfig+0x1cc>)
 800d72c:	4293      	cmp	r3, r2
 800d72e:	d876      	bhi.n	800d81e <TIM_SlaveTimer_SetConfig+0x19e>
 800d730:	4a47      	ldr	r2, [pc, #284]	; (800d850 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800d732:	4293      	cmp	r3, r2
 800d734:	d076      	beq.n	800d824 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d736:	4a46      	ldr	r2, [pc, #280]	; (800d850 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800d738:	4293      	cmp	r3, r2
 800d73a:	d870      	bhi.n	800d81e <TIM_SlaveTimer_SetConfig+0x19e>
 800d73c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d740:	d070      	beq.n	800d824 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d742:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d746:	d86a      	bhi.n	800d81e <TIM_SlaveTimer_SetConfig+0x19e>
 800d748:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d74c:	d06a      	beq.n	800d824 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d74e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d752:	d864      	bhi.n	800d81e <TIM_SlaveTimer_SetConfig+0x19e>
 800d754:	2b70      	cmp	r3, #112	; 0x70
 800d756:	d01a      	beq.n	800d78e <TIM_SlaveTimer_SetConfig+0x10e>
 800d758:	2b70      	cmp	r3, #112	; 0x70
 800d75a:	d860      	bhi.n	800d81e <TIM_SlaveTimer_SetConfig+0x19e>
 800d75c:	2b60      	cmp	r3, #96	; 0x60
 800d75e:	d054      	beq.n	800d80a <TIM_SlaveTimer_SetConfig+0x18a>
 800d760:	2b60      	cmp	r3, #96	; 0x60
 800d762:	d85c      	bhi.n	800d81e <TIM_SlaveTimer_SetConfig+0x19e>
 800d764:	2b50      	cmp	r3, #80	; 0x50
 800d766:	d046      	beq.n	800d7f6 <TIM_SlaveTimer_SetConfig+0x176>
 800d768:	2b50      	cmp	r3, #80	; 0x50
 800d76a:	d858      	bhi.n	800d81e <TIM_SlaveTimer_SetConfig+0x19e>
 800d76c:	2b40      	cmp	r3, #64	; 0x40
 800d76e:	d019      	beq.n	800d7a4 <TIM_SlaveTimer_SetConfig+0x124>
 800d770:	2b40      	cmp	r3, #64	; 0x40
 800d772:	d854      	bhi.n	800d81e <TIM_SlaveTimer_SetConfig+0x19e>
 800d774:	2b30      	cmp	r3, #48	; 0x30
 800d776:	d055      	beq.n	800d824 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d778:	2b30      	cmp	r3, #48	; 0x30
 800d77a:	d850      	bhi.n	800d81e <TIM_SlaveTimer_SetConfig+0x19e>
 800d77c:	2b20      	cmp	r3, #32
 800d77e:	d051      	beq.n	800d824 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d780:	2b20      	cmp	r3, #32
 800d782:	d84c      	bhi.n	800d81e <TIM_SlaveTimer_SetConfig+0x19e>
 800d784:	2b00      	cmp	r3, #0
 800d786:	d04d      	beq.n	800d824 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d788:	2b10      	cmp	r3, #16
 800d78a:	d04b      	beq.n	800d824 <TIM_SlaveTimer_SetConfig+0x1a4>
 800d78c:	e047      	b.n	800d81e <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800d79e:	f000 fa01 	bl	800dba4 <TIM_ETR_SetConfig>
      break;
 800d7a2:	e040      	b.n	800d826 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	2b05      	cmp	r3, #5
 800d7aa:	d101      	bne.n	800d7b0 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 800d7ac:	2301      	movs	r3, #1
 800d7ae:	e03b      	b.n	800d828 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	6a1b      	ldr	r3, [r3, #32]
 800d7b6:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	6a1a      	ldr	r2, [r3, #32]
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	f022 0201 	bic.w	r2, r2, #1
 800d7c6:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	699b      	ldr	r3, [r3, #24]
 800d7ce:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d7d0:	68bb      	ldr	r3, [r7, #8]
 800d7d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d7d6:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	691b      	ldr	r3, [r3, #16]
 800d7dc:	011b      	lsls	r3, r3, #4
 800d7de:	68ba      	ldr	r2, [r7, #8]
 800d7e0:	4313      	orrs	r3, r2
 800d7e2:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	68ba      	ldr	r2, [r7, #8]
 800d7ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	68fa      	ldr	r2, [r7, #12]
 800d7f2:	621a      	str	r2, [r3, #32]
      break;
 800d7f4:	e017      	b.n	800d826 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d802:	461a      	mov	r2, r3
 800d804:	f000 f89a 	bl	800d93c <TIM_TI1_ConfigInputStage>
      break;
 800d808:	e00d      	b.n	800d826 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d816:	461a      	mov	r2, r3
 800d818:	f000 f8fc 	bl	800da14 <TIM_TI2_ConfigInputStage>
      break;
 800d81c:	e003      	b.n	800d826 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800d81e:	2301      	movs	r3, #1
 800d820:	75fb      	strb	r3, [r7, #23]
      break;
 800d822:	e000      	b.n	800d826 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 800d824:	bf00      	nop
  }

  return status;
 800d826:	7dfb      	ldrb	r3, [r7, #23]
}
 800d828:	4618      	mov	r0, r3
 800d82a:	3718      	adds	r7, #24
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}
 800d830:	ffcfff8f 	.word	0xffcfff8f
 800d834:	fffefff8 	.word	0xfffefff8
 800d838:	00200010 	.word	0x00200010
 800d83c:	00100070 	.word	0x00100070
 800d840:	00100060 	.word	0x00100060
 800d844:	00100050 	.word	0x00100050
 800d848:	00100040 	.word	0x00100040
 800d84c:	00100030 	.word	0x00100030
 800d850:	00100020 	.word	0x00100020

0800d854 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800d854:	b480      	push	{r7}
 800d856:	b087      	sub	sp, #28
 800d858:	af00      	add	r7, sp, #0
 800d85a:	60f8      	str	r0, [r7, #12]
 800d85c:	60b9      	str	r1, [r7, #8]
 800d85e:	607a      	str	r2, [r7, #4]
 800d860:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	6a1b      	ldr	r3, [r3, #32]
 800d866:	f023 0201 	bic.w	r2, r3, #1
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	699b      	ldr	r3, [r3, #24]
 800d872:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	6a1b      	ldr	r3, [r3, #32]
 800d878:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	4a28      	ldr	r2, [pc, #160]	; (800d920 <TIM_TI1_SetConfig+0xcc>)
 800d87e:	4293      	cmp	r3, r2
 800d880:	d01b      	beq.n	800d8ba <TIM_TI1_SetConfig+0x66>
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d888:	d017      	beq.n	800d8ba <TIM_TI1_SetConfig+0x66>
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	4a25      	ldr	r2, [pc, #148]	; (800d924 <TIM_TI1_SetConfig+0xd0>)
 800d88e:	4293      	cmp	r3, r2
 800d890:	d013      	beq.n	800d8ba <TIM_TI1_SetConfig+0x66>
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	4a24      	ldr	r2, [pc, #144]	; (800d928 <TIM_TI1_SetConfig+0xd4>)
 800d896:	4293      	cmp	r3, r2
 800d898:	d00f      	beq.n	800d8ba <TIM_TI1_SetConfig+0x66>
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	4a23      	ldr	r2, [pc, #140]	; (800d92c <TIM_TI1_SetConfig+0xd8>)
 800d89e:	4293      	cmp	r3, r2
 800d8a0:	d00b      	beq.n	800d8ba <TIM_TI1_SetConfig+0x66>
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	4a22      	ldr	r2, [pc, #136]	; (800d930 <TIM_TI1_SetConfig+0xdc>)
 800d8a6:	4293      	cmp	r3, r2
 800d8a8:	d007      	beq.n	800d8ba <TIM_TI1_SetConfig+0x66>
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	4a21      	ldr	r2, [pc, #132]	; (800d934 <TIM_TI1_SetConfig+0xe0>)
 800d8ae:	4293      	cmp	r3, r2
 800d8b0:	d003      	beq.n	800d8ba <TIM_TI1_SetConfig+0x66>
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	4a20      	ldr	r2, [pc, #128]	; (800d938 <TIM_TI1_SetConfig+0xe4>)
 800d8b6:	4293      	cmp	r3, r2
 800d8b8:	d101      	bne.n	800d8be <TIM_TI1_SetConfig+0x6a>
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	e000      	b.n	800d8c0 <TIM_TI1_SetConfig+0x6c>
 800d8be:	2300      	movs	r3, #0
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d008      	beq.n	800d8d6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800d8c4:	697b      	ldr	r3, [r7, #20]
 800d8c6:	f023 0303 	bic.w	r3, r3, #3
 800d8ca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800d8cc:	697a      	ldr	r2, [r7, #20]
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	4313      	orrs	r3, r2
 800d8d2:	617b      	str	r3, [r7, #20]
 800d8d4:	e003      	b.n	800d8de <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800d8d6:	697b      	ldr	r3, [r7, #20]
 800d8d8:	f043 0301 	orr.w	r3, r3, #1
 800d8dc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d8de:	697b      	ldr	r3, [r7, #20]
 800d8e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d8e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	011b      	lsls	r3, r3, #4
 800d8ea:	b2db      	uxtb	r3, r3
 800d8ec:	697a      	ldr	r2, [r7, #20]
 800d8ee:	4313      	orrs	r3, r2
 800d8f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d8f2:	693b      	ldr	r3, [r7, #16]
 800d8f4:	f023 030a 	bic.w	r3, r3, #10
 800d8f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	f003 030a 	and.w	r3, r3, #10
 800d900:	693a      	ldr	r2, [r7, #16]
 800d902:	4313      	orrs	r3, r2
 800d904:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	697a      	ldr	r2, [r7, #20]
 800d90a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	693a      	ldr	r2, [r7, #16]
 800d910:	621a      	str	r2, [r3, #32]
}
 800d912:	bf00      	nop
 800d914:	371c      	adds	r7, #28
 800d916:	46bd      	mov	sp, r7
 800d918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91c:	4770      	bx	lr
 800d91e:	bf00      	nop
 800d920:	40010000 	.word	0x40010000
 800d924:	40000400 	.word	0x40000400
 800d928:	40000800 	.word	0x40000800
 800d92c:	40000c00 	.word	0x40000c00
 800d930:	40010400 	.word	0x40010400
 800d934:	40001800 	.word	0x40001800
 800d938:	40014000 	.word	0x40014000

0800d93c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d93c:	b480      	push	{r7}
 800d93e:	b087      	sub	sp, #28
 800d940:	af00      	add	r7, sp, #0
 800d942:	60f8      	str	r0, [r7, #12]
 800d944:	60b9      	str	r1, [r7, #8]
 800d946:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	6a1b      	ldr	r3, [r3, #32]
 800d94c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	6a1b      	ldr	r3, [r3, #32]
 800d952:	f023 0201 	bic.w	r2, r3, #1
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	699b      	ldr	r3, [r3, #24]
 800d95e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d960:	693b      	ldr	r3, [r7, #16]
 800d962:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d966:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	011b      	lsls	r3, r3, #4
 800d96c:	693a      	ldr	r2, [r7, #16]
 800d96e:	4313      	orrs	r3, r2
 800d970:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d972:	697b      	ldr	r3, [r7, #20]
 800d974:	f023 030a 	bic.w	r3, r3, #10
 800d978:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d97a:	697a      	ldr	r2, [r7, #20]
 800d97c:	68bb      	ldr	r3, [r7, #8]
 800d97e:	4313      	orrs	r3, r2
 800d980:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	693a      	ldr	r2, [r7, #16]
 800d986:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	697a      	ldr	r2, [r7, #20]
 800d98c:	621a      	str	r2, [r3, #32]
}
 800d98e:	bf00      	nop
 800d990:	371c      	adds	r7, #28
 800d992:	46bd      	mov	sp, r7
 800d994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d998:	4770      	bx	lr

0800d99a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d99a:	b480      	push	{r7}
 800d99c:	b087      	sub	sp, #28
 800d99e:	af00      	add	r7, sp, #0
 800d9a0:	60f8      	str	r0, [r7, #12]
 800d9a2:	60b9      	str	r1, [r7, #8]
 800d9a4:	607a      	str	r2, [r7, #4]
 800d9a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	6a1b      	ldr	r3, [r3, #32]
 800d9ac:	f023 0210 	bic.w	r2, r3, #16
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	699b      	ldr	r3, [r3, #24]
 800d9b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	6a1b      	ldr	r3, [r3, #32]
 800d9be:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800d9c0:	697b      	ldr	r3, [r7, #20]
 800d9c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d9c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	021b      	lsls	r3, r3, #8
 800d9cc:	697a      	ldr	r2, [r7, #20]
 800d9ce:	4313      	orrs	r3, r2
 800d9d0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d9d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	031b      	lsls	r3, r3, #12
 800d9de:	b29b      	uxth	r3, r3
 800d9e0:	697a      	ldr	r2, [r7, #20]
 800d9e2:	4313      	orrs	r3, r2
 800d9e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d9e6:	693b      	ldr	r3, [r7, #16]
 800d9e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d9ec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800d9ee:	68bb      	ldr	r3, [r7, #8]
 800d9f0:	011b      	lsls	r3, r3, #4
 800d9f2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d9f6:	693a      	ldr	r2, [r7, #16]
 800d9f8:	4313      	orrs	r3, r2
 800d9fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	697a      	ldr	r2, [r7, #20]
 800da00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	693a      	ldr	r2, [r7, #16]
 800da06:	621a      	str	r2, [r3, #32]
}
 800da08:	bf00      	nop
 800da0a:	371c      	adds	r7, #28
 800da0c:	46bd      	mov	sp, r7
 800da0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da12:	4770      	bx	lr

0800da14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800da14:	b480      	push	{r7}
 800da16:	b087      	sub	sp, #28
 800da18:	af00      	add	r7, sp, #0
 800da1a:	60f8      	str	r0, [r7, #12]
 800da1c:	60b9      	str	r1, [r7, #8]
 800da1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	6a1b      	ldr	r3, [r3, #32]
 800da24:	f023 0210 	bic.w	r2, r3, #16
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	699b      	ldr	r3, [r3, #24]
 800da30:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	6a1b      	ldr	r3, [r3, #32]
 800da36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800da38:	697b      	ldr	r3, [r7, #20]
 800da3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800da3e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	031b      	lsls	r3, r3, #12
 800da44:	697a      	ldr	r2, [r7, #20]
 800da46:	4313      	orrs	r3, r2
 800da48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800da4a:	693b      	ldr	r3, [r7, #16]
 800da4c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800da50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	011b      	lsls	r3, r3, #4
 800da56:	693a      	ldr	r2, [r7, #16]
 800da58:	4313      	orrs	r3, r2
 800da5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	697a      	ldr	r2, [r7, #20]
 800da60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	693a      	ldr	r2, [r7, #16]
 800da66:	621a      	str	r2, [r3, #32]
}
 800da68:	bf00      	nop
 800da6a:	371c      	adds	r7, #28
 800da6c:	46bd      	mov	sp, r7
 800da6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da72:	4770      	bx	lr

0800da74 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800da74:	b480      	push	{r7}
 800da76:	b087      	sub	sp, #28
 800da78:	af00      	add	r7, sp, #0
 800da7a:	60f8      	str	r0, [r7, #12]
 800da7c:	60b9      	str	r1, [r7, #8]
 800da7e:	607a      	str	r2, [r7, #4]
 800da80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	6a1b      	ldr	r3, [r3, #32]
 800da86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	69db      	ldr	r3, [r3, #28]
 800da92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	6a1b      	ldr	r3, [r3, #32]
 800da98:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	f023 0303 	bic.w	r3, r3, #3
 800daa0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800daa2:	697a      	ldr	r2, [r7, #20]
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	4313      	orrs	r3, r2
 800daa8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dab0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	011b      	lsls	r3, r3, #4
 800dab6:	b2db      	uxtb	r3, r3
 800dab8:	697a      	ldr	r2, [r7, #20]
 800daba:	4313      	orrs	r3, r2
 800dabc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800dabe:	693b      	ldr	r3, [r7, #16]
 800dac0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800dac4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800dac6:	68bb      	ldr	r3, [r7, #8]
 800dac8:	021b      	lsls	r3, r3, #8
 800daca:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800dace:	693a      	ldr	r2, [r7, #16]
 800dad0:	4313      	orrs	r3, r2
 800dad2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	697a      	ldr	r2, [r7, #20]
 800dad8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	693a      	ldr	r2, [r7, #16]
 800dade:	621a      	str	r2, [r3, #32]
}
 800dae0:	bf00      	nop
 800dae2:	371c      	adds	r7, #28
 800dae4:	46bd      	mov	sp, r7
 800dae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daea:	4770      	bx	lr

0800daec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800daec:	b480      	push	{r7}
 800daee:	b087      	sub	sp, #28
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	60f8      	str	r0, [r7, #12]
 800daf4:	60b9      	str	r1, [r7, #8]
 800daf6:	607a      	str	r2, [r7, #4]
 800daf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	6a1b      	ldr	r3, [r3, #32]
 800dafe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	69db      	ldr	r3, [r3, #28]
 800db0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	6a1b      	ldr	r3, [r3, #32]
 800db10:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db18:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	021b      	lsls	r3, r3, #8
 800db1e:	697a      	ldr	r2, [r7, #20]
 800db20:	4313      	orrs	r3, r2
 800db22:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800db24:	697b      	ldr	r3, [r7, #20]
 800db26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800db2a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	031b      	lsls	r3, r3, #12
 800db30:	b29b      	uxth	r3, r3
 800db32:	697a      	ldr	r2, [r7, #20]
 800db34:	4313      	orrs	r3, r2
 800db36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800db38:	693b      	ldr	r3, [r7, #16]
 800db3a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800db3e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	031b      	lsls	r3, r3, #12
 800db44:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800db48:	693a      	ldr	r2, [r7, #16]
 800db4a:	4313      	orrs	r3, r2
 800db4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	697a      	ldr	r2, [r7, #20]
 800db52:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	693a      	ldr	r2, [r7, #16]
 800db58:	621a      	str	r2, [r3, #32]
}
 800db5a:	bf00      	nop
 800db5c:	371c      	adds	r7, #28
 800db5e:	46bd      	mov	sp, r7
 800db60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db64:	4770      	bx	lr
	...

0800db68 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800db68:	b480      	push	{r7}
 800db6a:	b085      	sub	sp, #20
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
 800db70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	689b      	ldr	r3, [r3, #8]
 800db76:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800db78:	68fa      	ldr	r2, [r7, #12]
 800db7a:	4b09      	ldr	r3, [pc, #36]	; (800dba0 <TIM_ITRx_SetConfig+0x38>)
 800db7c:	4013      	ands	r3, r2
 800db7e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800db80:	683a      	ldr	r2, [r7, #0]
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	4313      	orrs	r3, r2
 800db86:	f043 0307 	orr.w	r3, r3, #7
 800db8a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	68fa      	ldr	r2, [r7, #12]
 800db90:	609a      	str	r2, [r3, #8]
}
 800db92:	bf00      	nop
 800db94:	3714      	adds	r7, #20
 800db96:	46bd      	mov	sp, r7
 800db98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9c:	4770      	bx	lr
 800db9e:	bf00      	nop
 800dba0:	ffcfff8f 	.word	0xffcfff8f

0800dba4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dba4:	b480      	push	{r7}
 800dba6:	b087      	sub	sp, #28
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	60f8      	str	r0, [r7, #12]
 800dbac:	60b9      	str	r1, [r7, #8]
 800dbae:	607a      	str	r2, [r7, #4]
 800dbb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	689b      	ldr	r3, [r3, #8]
 800dbb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dbbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	021a      	lsls	r2, r3, #8
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	431a      	orrs	r2, r3
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	4313      	orrs	r3, r2
 800dbcc:	697a      	ldr	r2, [r7, #20]
 800dbce:	4313      	orrs	r3, r2
 800dbd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	697a      	ldr	r2, [r7, #20]
 800dbd6:	609a      	str	r2, [r3, #8]
}
 800dbd8:	bf00      	nop
 800dbda:	371c      	adds	r7, #28
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe2:	4770      	bx	lr

0800dbe4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800dbe4:	b480      	push	{r7}
 800dbe6:	b087      	sub	sp, #28
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	60f8      	str	r0, [r7, #12]
 800dbec:	60b9      	str	r1, [r7, #8]
 800dbee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dbf0:	68bb      	ldr	r3, [r7, #8]
 800dbf2:	f003 031f 	and.w	r3, r3, #31
 800dbf6:	2201      	movs	r2, #1
 800dbf8:	fa02 f303 	lsl.w	r3, r2, r3
 800dbfc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	6a1a      	ldr	r2, [r3, #32]
 800dc02:	697b      	ldr	r3, [r7, #20]
 800dc04:	43db      	mvns	r3, r3
 800dc06:	401a      	ands	r2, r3
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	6a1a      	ldr	r2, [r3, #32]
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	f003 031f 	and.w	r3, r3, #31
 800dc16:	6879      	ldr	r1, [r7, #4]
 800dc18:	fa01 f303 	lsl.w	r3, r1, r3
 800dc1c:	431a      	orrs	r2, r3
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	621a      	str	r2, [r3, #32]
}
 800dc22:	bf00      	nop
 800dc24:	371c      	adds	r7, #28
 800dc26:	46bd      	mov	sp, r7
 800dc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2c:	4770      	bx	lr
	...

0800dc30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dc30:	b480      	push	{r7}
 800dc32:	b085      	sub	sp, #20
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
 800dc38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc40:	2b01      	cmp	r3, #1
 800dc42:	d101      	bne.n	800dc48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dc44:	2302      	movs	r3, #2
 800dc46:	e06d      	b.n	800dd24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2201      	movs	r2, #1
 800dc4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2202      	movs	r2, #2
 800dc54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	685b      	ldr	r3, [r3, #4]
 800dc5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	689b      	ldr	r3, [r3, #8]
 800dc66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	4a30      	ldr	r2, [pc, #192]	; (800dd30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dc6e:	4293      	cmp	r3, r2
 800dc70:	d004      	beq.n	800dc7c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	4a2f      	ldr	r2, [pc, #188]	; (800dd34 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dc78:	4293      	cmp	r3, r2
 800dc7a:	d108      	bne.n	800dc8e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800dc82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	685b      	ldr	r3, [r3, #4]
 800dc88:	68fa      	ldr	r2, [r7, #12]
 800dc8a:	4313      	orrs	r3, r2
 800dc8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc94:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	68fa      	ldr	r2, [r7, #12]
 800dc9c:	4313      	orrs	r3, r2
 800dc9e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	68fa      	ldr	r2, [r7, #12]
 800dca6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	4a20      	ldr	r2, [pc, #128]	; (800dd30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dcae:	4293      	cmp	r3, r2
 800dcb0:	d022      	beq.n	800dcf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dcba:	d01d      	beq.n	800dcf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	4a1d      	ldr	r2, [pc, #116]	; (800dd38 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800dcc2:	4293      	cmp	r3, r2
 800dcc4:	d018      	beq.n	800dcf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	4a1c      	ldr	r2, [pc, #112]	; (800dd3c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800dccc:	4293      	cmp	r3, r2
 800dcce:	d013      	beq.n	800dcf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	4a1a      	ldr	r2, [pc, #104]	; (800dd40 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800dcd6:	4293      	cmp	r3, r2
 800dcd8:	d00e      	beq.n	800dcf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	4a15      	ldr	r2, [pc, #84]	; (800dd34 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dce0:	4293      	cmp	r3, r2
 800dce2:	d009      	beq.n	800dcf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	4a16      	ldr	r2, [pc, #88]	; (800dd44 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800dcea:	4293      	cmp	r3, r2
 800dcec:	d004      	beq.n	800dcf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	4a15      	ldr	r2, [pc, #84]	; (800dd48 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dcf4:	4293      	cmp	r3, r2
 800dcf6:	d10c      	bne.n	800dd12 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dcf8:	68bb      	ldr	r3, [r7, #8]
 800dcfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dcfe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dd00:	683b      	ldr	r3, [r7, #0]
 800dd02:	689b      	ldr	r3, [r3, #8]
 800dd04:	68ba      	ldr	r2, [r7, #8]
 800dd06:	4313      	orrs	r3, r2
 800dd08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	68ba      	ldr	r2, [r7, #8]
 800dd10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	2201      	movs	r2, #1
 800dd16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dd22:	2300      	movs	r3, #0
}
 800dd24:	4618      	mov	r0, r3
 800dd26:	3714      	adds	r7, #20
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2e:	4770      	bx	lr
 800dd30:	40010000 	.word	0x40010000
 800dd34:	40010400 	.word	0x40010400
 800dd38:	40000400 	.word	0x40000400
 800dd3c:	40000800 	.word	0x40000800
 800dd40:	40000c00 	.word	0x40000c00
 800dd44:	40001800 	.word	0x40001800
 800dd48:	40014000 	.word	0x40014000

0800dd4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dd4c:	b480      	push	{r7}
 800dd4e:	b083      	sub	sp, #12
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dd54:	bf00      	nop
 800dd56:	370c      	adds	r7, #12
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5e:	4770      	bx	lr

0800dd60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dd60:	b480      	push	{r7}
 800dd62:	b083      	sub	sp, #12
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dd68:	bf00      	nop
 800dd6a:	370c      	adds	r7, #12
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd72:	4770      	bx	lr

0800dd74 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dd74:	b480      	push	{r7}
 800dd76:	b083      	sub	sp, #12
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dd7c:	bf00      	nop
 800dd7e:	370c      	adds	r7, #12
 800dd80:	46bd      	mov	sp, r7
 800dd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd86:	4770      	bx	lr

0800dd88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b082      	sub	sp, #8
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d101      	bne.n	800dd9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dd96:	2301      	movs	r3, #1
 800dd98:	e042      	b.n	800de20 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d106      	bne.n	800ddb2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	2200      	movs	r2, #0
 800dda8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	f7f4 fa55 	bl	800225c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	2224      	movs	r2, #36	; 0x24
 800ddb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	681a      	ldr	r2, [r3, #0]
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	f022 0201 	bic.w	r2, r2, #1
 800ddc8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ddca:	6878      	ldr	r0, [r7, #4]
 800ddcc:	f000 fce0 	bl	800e790 <UART_SetConfig>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	2b01      	cmp	r3, #1
 800ddd4:	d101      	bne.n	800ddda <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ddd6:	2301      	movs	r3, #1
 800ddd8:	e022      	b.n	800de20 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d002      	beq.n	800dde8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800dde2:	6878      	ldr	r0, [r7, #4]
 800dde4:	f001 fa3c 	bl	800f260 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	685a      	ldr	r2, [r3, #4]
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ddf6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	689a      	ldr	r2, [r3, #8]
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800de06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	681a      	ldr	r2, [r3, #0]
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	f042 0201 	orr.w	r2, r2, #1
 800de16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800de18:	6878      	ldr	r0, [r7, #4]
 800de1a:	f001 fac3 	bl	800f3a4 <UART_CheckIdleState>
 800de1e:	4603      	mov	r3, r0
}
 800de20:	4618      	mov	r0, r3
 800de22:	3708      	adds	r7, #8
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}

0800de28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b08a      	sub	sp, #40	; 0x28
 800de2c:	af02      	add	r7, sp, #8
 800de2e:	60f8      	str	r0, [r7, #12]
 800de30:	60b9      	str	r1, [r7, #8]
 800de32:	603b      	str	r3, [r7, #0]
 800de34:	4613      	mov	r3, r2
 800de36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de3e:	2b20      	cmp	r3, #32
 800de40:	d17b      	bne.n	800df3a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800de42:	68bb      	ldr	r3, [r7, #8]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d002      	beq.n	800de4e <HAL_UART_Transmit+0x26>
 800de48:	88fb      	ldrh	r3, [r7, #6]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d101      	bne.n	800de52 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800de4e:	2301      	movs	r3, #1
 800de50:	e074      	b.n	800df3c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	2200      	movs	r2, #0
 800de56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	2221      	movs	r2, #33	; 0x21
 800de5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800de62:	f7f4 ff3d 	bl	8002ce0 <HAL_GetTick>
 800de66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	88fa      	ldrh	r2, [r7, #6]
 800de6c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	88fa      	ldrh	r2, [r7, #6]
 800de74:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	689b      	ldr	r3, [r3, #8]
 800de7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de80:	d108      	bne.n	800de94 <HAL_UART_Transmit+0x6c>
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	691b      	ldr	r3, [r3, #16]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d104      	bne.n	800de94 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800de8a:	2300      	movs	r3, #0
 800de8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800de8e:	68bb      	ldr	r3, [r7, #8]
 800de90:	61bb      	str	r3, [r7, #24]
 800de92:	e003      	b.n	800de9c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800de98:	2300      	movs	r3, #0
 800de9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800de9c:	e030      	b.n	800df00 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	9300      	str	r3, [sp, #0]
 800dea2:	697b      	ldr	r3, [r7, #20]
 800dea4:	2200      	movs	r2, #0
 800dea6:	2180      	movs	r1, #128	; 0x80
 800dea8:	68f8      	ldr	r0, [r7, #12]
 800deaa:	f001 fb25 	bl	800f4f8 <UART_WaitOnFlagUntilTimeout>
 800deae:	4603      	mov	r3, r0
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d005      	beq.n	800dec0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	2220      	movs	r2, #32
 800deb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800debc:	2303      	movs	r3, #3
 800debe:	e03d      	b.n	800df3c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800dec0:	69fb      	ldr	r3, [r7, #28]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d10b      	bne.n	800dede <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800dec6:	69bb      	ldr	r3, [r7, #24]
 800dec8:	881b      	ldrh	r3, [r3, #0]
 800deca:	461a      	mov	r2, r3
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ded4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ded6:	69bb      	ldr	r3, [r7, #24]
 800ded8:	3302      	adds	r3, #2
 800deda:	61bb      	str	r3, [r7, #24]
 800dedc:	e007      	b.n	800deee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800dede:	69fb      	ldr	r3, [r7, #28]
 800dee0:	781a      	ldrb	r2, [r3, #0]
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800dee8:	69fb      	ldr	r3, [r7, #28]
 800deea:	3301      	adds	r3, #1
 800deec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800def4:	b29b      	uxth	r3, r3
 800def6:	3b01      	subs	r3, #1
 800def8:	b29a      	uxth	r2, r3
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800df06:	b29b      	uxth	r3, r3
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d1c8      	bne.n	800de9e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	9300      	str	r3, [sp, #0]
 800df10:	697b      	ldr	r3, [r7, #20]
 800df12:	2200      	movs	r2, #0
 800df14:	2140      	movs	r1, #64	; 0x40
 800df16:	68f8      	ldr	r0, [r7, #12]
 800df18:	f001 faee 	bl	800f4f8 <UART_WaitOnFlagUntilTimeout>
 800df1c:	4603      	mov	r3, r0
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d005      	beq.n	800df2e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	2220      	movs	r2, #32
 800df26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800df2a:	2303      	movs	r3, #3
 800df2c:	e006      	b.n	800df3c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	2220      	movs	r2, #32
 800df32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800df36:	2300      	movs	r3, #0
 800df38:	e000      	b.n	800df3c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800df3a:	2302      	movs	r3, #2
  }
}
 800df3c:	4618      	mov	r0, r3
 800df3e:	3720      	adds	r7, #32
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}

0800df44 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b08a      	sub	sp, #40	; 0x28
 800df48:	af00      	add	r7, sp, #0
 800df4a:	60f8      	str	r0, [r7, #12]
 800df4c:	60b9      	str	r1, [r7, #8]
 800df4e:	4613      	mov	r3, r2
 800df50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df58:	2b20      	cmp	r3, #32
 800df5a:	d137      	bne.n	800dfcc <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800df5c:	68bb      	ldr	r3, [r7, #8]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d002      	beq.n	800df68 <HAL_UART_Receive_DMA+0x24>
 800df62:	88fb      	ldrh	r3, [r7, #6]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d101      	bne.n	800df6c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800df68:	2301      	movs	r3, #1
 800df6a:	e030      	b.n	800dfce <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	2200      	movs	r2, #0
 800df70:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	4a18      	ldr	r2, [pc, #96]	; (800dfd8 <HAL_UART_Receive_DMA+0x94>)
 800df78:	4293      	cmp	r3, r2
 800df7a:	d01f      	beq.n	800dfbc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	685b      	ldr	r3, [r3, #4]
 800df82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800df86:	2b00      	cmp	r3, #0
 800df88:	d018      	beq.n	800dfbc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df90:	697b      	ldr	r3, [r7, #20]
 800df92:	e853 3f00 	ldrex	r3, [r3]
 800df96:	613b      	str	r3, [r7, #16]
   return(result);
 800df98:	693b      	ldr	r3, [r7, #16]
 800df9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800df9e:	627b      	str	r3, [r7, #36]	; 0x24
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	461a      	mov	r2, r3
 800dfa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa8:	623b      	str	r3, [r7, #32]
 800dfaa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfac:	69f9      	ldr	r1, [r7, #28]
 800dfae:	6a3a      	ldr	r2, [r7, #32]
 800dfb0:	e841 2300 	strex	r3, r2, [r1]
 800dfb4:	61bb      	str	r3, [r7, #24]
   return(result);
 800dfb6:	69bb      	ldr	r3, [r7, #24]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d1e6      	bne.n	800df8a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800dfbc:	88fb      	ldrh	r3, [r7, #6]
 800dfbe:	461a      	mov	r2, r3
 800dfc0:	68b9      	ldr	r1, [r7, #8]
 800dfc2:	68f8      	ldr	r0, [r7, #12]
 800dfc4:	f001 fb00 	bl	800f5c8 <UART_Start_Receive_DMA>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	e000      	b.n	800dfce <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800dfcc:	2302      	movs	r3, #2
  }
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3728      	adds	r7, #40	; 0x28
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}
 800dfd6:	bf00      	nop
 800dfd8:	58000c00 	.word	0x58000c00

0800dfdc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b0ba      	sub	sp, #232	; 0xe8
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	69db      	ldr	r3, [r3, #28]
 800dfea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	689b      	ldr	r3, [r3, #8]
 800dffe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e002:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e006:	f640 030f 	movw	r3, #2063	; 0x80f
 800e00a:	4013      	ands	r3, r2
 800e00c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e010:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e014:	2b00      	cmp	r3, #0
 800e016:	d11b      	bne.n	800e050 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e01c:	f003 0320 	and.w	r3, r3, #32
 800e020:	2b00      	cmp	r3, #0
 800e022:	d015      	beq.n	800e050 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e028:	f003 0320 	and.w	r3, r3, #32
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d105      	bne.n	800e03c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e030:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d009      	beq.n	800e050 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e040:	2b00      	cmp	r3, #0
 800e042:	f000 8377 	beq.w	800e734 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e04a:	6878      	ldr	r0, [r7, #4]
 800e04c:	4798      	blx	r3
      }
      return;
 800e04e:	e371      	b.n	800e734 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e050:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e054:	2b00      	cmp	r3, #0
 800e056:	f000 8123 	beq.w	800e2a0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e05a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e05e:	4b8d      	ldr	r3, [pc, #564]	; (800e294 <HAL_UART_IRQHandler+0x2b8>)
 800e060:	4013      	ands	r3, r2
 800e062:	2b00      	cmp	r3, #0
 800e064:	d106      	bne.n	800e074 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e066:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e06a:	4b8b      	ldr	r3, [pc, #556]	; (800e298 <HAL_UART_IRQHandler+0x2bc>)
 800e06c:	4013      	ands	r3, r2
 800e06e:	2b00      	cmp	r3, #0
 800e070:	f000 8116 	beq.w	800e2a0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e078:	f003 0301 	and.w	r3, r3, #1
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d011      	beq.n	800e0a4 <HAL_UART_IRQHandler+0xc8>
 800e080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d00b      	beq.n	800e0a4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	2201      	movs	r2, #1
 800e092:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e09a:	f043 0201 	orr.w	r2, r3, #1
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e0a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e0a8:	f003 0302 	and.w	r3, r3, #2
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d011      	beq.n	800e0d4 <HAL_UART_IRQHandler+0xf8>
 800e0b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e0b4:	f003 0301 	and.w	r3, r3, #1
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d00b      	beq.n	800e0d4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	2202      	movs	r2, #2
 800e0c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0ca:	f043 0204 	orr.w	r2, r3, #4
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e0d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e0d8:	f003 0304 	and.w	r3, r3, #4
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d011      	beq.n	800e104 <HAL_UART_IRQHandler+0x128>
 800e0e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e0e4:	f003 0301 	and.w	r3, r3, #1
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d00b      	beq.n	800e104 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	2204      	movs	r2, #4
 800e0f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0fa:	f043 0202 	orr.w	r2, r3, #2
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e108:	f003 0308 	and.w	r3, r3, #8
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d017      	beq.n	800e140 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e114:	f003 0320 	and.w	r3, r3, #32
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d105      	bne.n	800e128 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e11c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e120:	4b5c      	ldr	r3, [pc, #368]	; (800e294 <HAL_UART_IRQHandler+0x2b8>)
 800e122:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e124:	2b00      	cmp	r3, #0
 800e126:	d00b      	beq.n	800e140 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	2208      	movs	r2, #8
 800e12e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e136:	f043 0208 	orr.w	r2, r3, #8
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e144:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d012      	beq.n	800e172 <HAL_UART_IRQHandler+0x196>
 800e14c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e150:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e154:	2b00      	cmp	r3, #0
 800e156:	d00c      	beq.n	800e172 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e160:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e168:	f043 0220 	orr.w	r2, r3, #32
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e178:	2b00      	cmp	r3, #0
 800e17a:	f000 82dd 	beq.w	800e738 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e17e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e182:	f003 0320 	and.w	r3, r3, #32
 800e186:	2b00      	cmp	r3, #0
 800e188:	d013      	beq.n	800e1b2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e18a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e18e:	f003 0320 	and.w	r3, r3, #32
 800e192:	2b00      	cmp	r3, #0
 800e194:	d105      	bne.n	800e1a2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e196:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e19a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d007      	beq.n	800e1b2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d003      	beq.n	800e1b2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e1b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	689b      	ldr	r3, [r3, #8]
 800e1c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1c6:	2b40      	cmp	r3, #64	; 0x40
 800e1c8:	d005      	beq.n	800e1d6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e1ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e1ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d054      	beq.n	800e280 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e1d6:	6878      	ldr	r0, [r7, #4]
 800e1d8:	f001 fade 	bl	800f798 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	689b      	ldr	r3, [r3, #8]
 800e1e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1e6:	2b40      	cmp	r3, #64	; 0x40
 800e1e8:	d146      	bne.n	800e278 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	3308      	adds	r3, #8
 800e1f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e1f8:	e853 3f00 	ldrex	r3, [r3]
 800e1fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e200:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e204:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e208:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	3308      	adds	r3, #8
 800e212:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e216:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e21a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e21e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e222:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e226:	e841 2300 	strex	r3, r2, [r1]
 800e22a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e22e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e232:	2b00      	cmp	r3, #0
 800e234:	d1d9      	bne.n	800e1ea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d017      	beq.n	800e270 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e246:	4a15      	ldr	r2, [pc, #84]	; (800e29c <HAL_UART_IRQHandler+0x2c0>)
 800e248:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e250:	4618      	mov	r0, r3
 800e252:	f7f7 fcf5 	bl	8005c40 <HAL_DMA_Abort_IT>
 800e256:	4603      	mov	r3, r0
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d019      	beq.n	800e290 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e264:	687a      	ldr	r2, [r7, #4]
 800e266:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800e26a:	4610      	mov	r0, r2
 800e26c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e26e:	e00f      	b.n	800e290 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e270:	6878      	ldr	r0, [r7, #4]
 800e272:	f7f3 f98f 	bl	8001594 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e276:	e00b      	b.n	800e290 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e278:	6878      	ldr	r0, [r7, #4]
 800e27a:	f7f3 f98b 	bl	8001594 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e27e:	e007      	b.n	800e290 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	f7f3 f987 	bl	8001594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2200      	movs	r2, #0
 800e28a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800e28e:	e253      	b.n	800e738 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e290:	bf00      	nop
    return;
 800e292:	e251      	b.n	800e738 <HAL_UART_IRQHandler+0x75c>
 800e294:	10000001 	.word	0x10000001
 800e298:	04000120 	.word	0x04000120
 800e29c:	0800fa4b 	.word	0x0800fa4b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2a4:	2b01      	cmp	r3, #1
 800e2a6:	f040 81e7 	bne.w	800e678 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e2aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2ae:	f003 0310 	and.w	r3, r3, #16
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	f000 81e0 	beq.w	800e678 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e2b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2bc:	f003 0310 	and.w	r3, r3, #16
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	f000 81d9 	beq.w	800e678 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	2210      	movs	r2, #16
 800e2cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	689b      	ldr	r3, [r3, #8]
 800e2d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2d8:	2b40      	cmp	r3, #64	; 0x40
 800e2da:	f040 8151 	bne.w	800e580 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	4a96      	ldr	r2, [pc, #600]	; (800e540 <HAL_UART_IRQHandler+0x564>)
 800e2e8:	4293      	cmp	r3, r2
 800e2ea:	d068      	beq.n	800e3be <HAL_UART_IRQHandler+0x3e2>
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	4a93      	ldr	r2, [pc, #588]	; (800e544 <HAL_UART_IRQHandler+0x568>)
 800e2f6:	4293      	cmp	r3, r2
 800e2f8:	d061      	beq.n	800e3be <HAL_UART_IRQHandler+0x3e2>
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	4a91      	ldr	r2, [pc, #580]	; (800e548 <HAL_UART_IRQHandler+0x56c>)
 800e304:	4293      	cmp	r3, r2
 800e306:	d05a      	beq.n	800e3be <HAL_UART_IRQHandler+0x3e2>
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	4a8e      	ldr	r2, [pc, #568]	; (800e54c <HAL_UART_IRQHandler+0x570>)
 800e312:	4293      	cmp	r3, r2
 800e314:	d053      	beq.n	800e3be <HAL_UART_IRQHandler+0x3e2>
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	4a8c      	ldr	r2, [pc, #560]	; (800e550 <HAL_UART_IRQHandler+0x574>)
 800e320:	4293      	cmp	r3, r2
 800e322:	d04c      	beq.n	800e3be <HAL_UART_IRQHandler+0x3e2>
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	4a89      	ldr	r2, [pc, #548]	; (800e554 <HAL_UART_IRQHandler+0x578>)
 800e32e:	4293      	cmp	r3, r2
 800e330:	d045      	beq.n	800e3be <HAL_UART_IRQHandler+0x3e2>
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	4a87      	ldr	r2, [pc, #540]	; (800e558 <HAL_UART_IRQHandler+0x57c>)
 800e33c:	4293      	cmp	r3, r2
 800e33e:	d03e      	beq.n	800e3be <HAL_UART_IRQHandler+0x3e2>
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	4a84      	ldr	r2, [pc, #528]	; (800e55c <HAL_UART_IRQHandler+0x580>)
 800e34a:	4293      	cmp	r3, r2
 800e34c:	d037      	beq.n	800e3be <HAL_UART_IRQHandler+0x3e2>
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	4a82      	ldr	r2, [pc, #520]	; (800e560 <HAL_UART_IRQHandler+0x584>)
 800e358:	4293      	cmp	r3, r2
 800e35a:	d030      	beq.n	800e3be <HAL_UART_IRQHandler+0x3e2>
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	4a7f      	ldr	r2, [pc, #508]	; (800e564 <HAL_UART_IRQHandler+0x588>)
 800e366:	4293      	cmp	r3, r2
 800e368:	d029      	beq.n	800e3be <HAL_UART_IRQHandler+0x3e2>
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	4a7d      	ldr	r2, [pc, #500]	; (800e568 <HAL_UART_IRQHandler+0x58c>)
 800e374:	4293      	cmp	r3, r2
 800e376:	d022      	beq.n	800e3be <HAL_UART_IRQHandler+0x3e2>
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	4a7a      	ldr	r2, [pc, #488]	; (800e56c <HAL_UART_IRQHandler+0x590>)
 800e382:	4293      	cmp	r3, r2
 800e384:	d01b      	beq.n	800e3be <HAL_UART_IRQHandler+0x3e2>
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	4a78      	ldr	r2, [pc, #480]	; (800e570 <HAL_UART_IRQHandler+0x594>)
 800e390:	4293      	cmp	r3, r2
 800e392:	d014      	beq.n	800e3be <HAL_UART_IRQHandler+0x3e2>
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	4a75      	ldr	r2, [pc, #468]	; (800e574 <HAL_UART_IRQHandler+0x598>)
 800e39e:	4293      	cmp	r3, r2
 800e3a0:	d00d      	beq.n	800e3be <HAL_UART_IRQHandler+0x3e2>
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	4a73      	ldr	r2, [pc, #460]	; (800e578 <HAL_UART_IRQHandler+0x59c>)
 800e3ac:	4293      	cmp	r3, r2
 800e3ae:	d006      	beq.n	800e3be <HAL_UART_IRQHandler+0x3e2>
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	4a70      	ldr	r2, [pc, #448]	; (800e57c <HAL_UART_IRQHandler+0x5a0>)
 800e3ba:	4293      	cmp	r3, r2
 800e3bc:	d106      	bne.n	800e3cc <HAL_UART_IRQHandler+0x3f0>
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	685b      	ldr	r3, [r3, #4]
 800e3c8:	b29b      	uxth	r3, r3
 800e3ca:	e005      	b.n	800e3d8 <HAL_UART_IRQHandler+0x3fc>
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	685b      	ldr	r3, [r3, #4]
 800e3d6:	b29b      	uxth	r3, r3
 800e3d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e3dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	f000 81ab 	beq.w	800e73c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e3ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e3f0:	429a      	cmp	r2, r3
 800e3f2:	f080 81a3 	bcs.w	800e73c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e3fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e406:	69db      	ldr	r3, [r3, #28]
 800e408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e40c:	f000 8087 	beq.w	800e51e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e418:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e41c:	e853 3f00 	ldrex	r3, [r3]
 800e420:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e424:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e428:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e42c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	461a      	mov	r2, r3
 800e436:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e43a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e43e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e442:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e446:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e44a:	e841 2300 	strex	r3, r2, [r1]
 800e44e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e452:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e456:	2b00      	cmp	r3, #0
 800e458:	d1da      	bne.n	800e410 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	3308      	adds	r3, #8
 800e460:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e462:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e464:	e853 3f00 	ldrex	r3, [r3]
 800e468:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e46a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e46c:	f023 0301 	bic.w	r3, r3, #1
 800e470:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	3308      	adds	r3, #8
 800e47a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e47e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e482:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e484:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e486:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e48a:	e841 2300 	strex	r3, r2, [r1]
 800e48e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e490:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e492:	2b00      	cmp	r3, #0
 800e494:	d1e1      	bne.n	800e45a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	3308      	adds	r3, #8
 800e49c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e49e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e4a0:	e853 3f00 	ldrex	r3, [r3]
 800e4a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e4a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e4a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e4ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	3308      	adds	r3, #8
 800e4b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e4ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e4bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e4c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e4c2:	e841 2300 	strex	r3, r2, [r1]
 800e4c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e4c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d1e3      	bne.n	800e496 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	2220      	movs	r2, #32
 800e4d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	2200      	movs	r2, #0
 800e4da:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4e4:	e853 3f00 	ldrex	r3, [r3]
 800e4e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e4ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e4ec:	f023 0310 	bic.w	r3, r3, #16
 800e4f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	461a      	mov	r2, r3
 800e4fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e4fe:	65bb      	str	r3, [r7, #88]	; 0x58
 800e500:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e502:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e504:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e506:	e841 2300 	strex	r3, r2, [r1]
 800e50a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e50c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d1e4      	bne.n	800e4dc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e518:	4618      	mov	r0, r3
 800e51a:	f7f7 f873 	bl	8005604 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	2202      	movs	r2, #2
 800e522:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e530:	b29b      	uxth	r3, r3
 800e532:	1ad3      	subs	r3, r2, r3
 800e534:	b29b      	uxth	r3, r3
 800e536:	4619      	mov	r1, r3
 800e538:	6878      	ldr	r0, [r7, #4]
 800e53a:	f000 f91d 	bl	800e778 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e53e:	e0fd      	b.n	800e73c <HAL_UART_IRQHandler+0x760>
 800e540:	40020010 	.word	0x40020010
 800e544:	40020028 	.word	0x40020028
 800e548:	40020040 	.word	0x40020040
 800e54c:	40020058 	.word	0x40020058
 800e550:	40020070 	.word	0x40020070
 800e554:	40020088 	.word	0x40020088
 800e558:	400200a0 	.word	0x400200a0
 800e55c:	400200b8 	.word	0x400200b8
 800e560:	40020410 	.word	0x40020410
 800e564:	40020428 	.word	0x40020428
 800e568:	40020440 	.word	0x40020440
 800e56c:	40020458 	.word	0x40020458
 800e570:	40020470 	.word	0x40020470
 800e574:	40020488 	.word	0x40020488
 800e578:	400204a0 	.word	0x400204a0
 800e57c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e58c:	b29b      	uxth	r3, r3
 800e58e:	1ad3      	subs	r3, r2, r3
 800e590:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e59a:	b29b      	uxth	r3, r3
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	f000 80cf 	beq.w	800e740 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800e5a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	f000 80ca 	beq.w	800e740 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5b4:	e853 3f00 	ldrex	r3, [r3]
 800e5b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e5ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e5c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	461a      	mov	r2, r3
 800e5ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e5ce:	647b      	str	r3, [r7, #68]	; 0x44
 800e5d0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e5d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e5d6:	e841 2300 	strex	r3, r2, [r1]
 800e5da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e5dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d1e4      	bne.n	800e5ac <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	3308      	adds	r3, #8
 800e5e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ec:	e853 3f00 	ldrex	r3, [r3]
 800e5f0:	623b      	str	r3, [r7, #32]
   return(result);
 800e5f2:	6a3a      	ldr	r2, [r7, #32]
 800e5f4:	4b55      	ldr	r3, [pc, #340]	; (800e74c <HAL_UART_IRQHandler+0x770>)
 800e5f6:	4013      	ands	r3, r2
 800e5f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	3308      	adds	r3, #8
 800e602:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e606:	633a      	str	r2, [r7, #48]	; 0x30
 800e608:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e60a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e60c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e60e:	e841 2300 	strex	r3, r2, [r1]
 800e612:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e616:	2b00      	cmp	r3, #0
 800e618:	d1e3      	bne.n	800e5e2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	2220      	movs	r2, #32
 800e61e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	2200      	movs	r2, #0
 800e626:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2200      	movs	r2, #0
 800e62c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e634:	693b      	ldr	r3, [r7, #16]
 800e636:	e853 3f00 	ldrex	r3, [r3]
 800e63a:	60fb      	str	r3, [r7, #12]
   return(result);
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	f023 0310 	bic.w	r3, r3, #16
 800e642:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	461a      	mov	r2, r3
 800e64c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e650:	61fb      	str	r3, [r7, #28]
 800e652:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e654:	69b9      	ldr	r1, [r7, #24]
 800e656:	69fa      	ldr	r2, [r7, #28]
 800e658:	e841 2300 	strex	r3, r2, [r1]
 800e65c:	617b      	str	r3, [r7, #20]
   return(result);
 800e65e:	697b      	ldr	r3, [r7, #20]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d1e4      	bne.n	800e62e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	2202      	movs	r2, #2
 800e668:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e66a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e66e:	4619      	mov	r1, r3
 800e670:	6878      	ldr	r0, [r7, #4]
 800e672:	f000 f881 	bl	800e778 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e676:	e063      	b.n	800e740 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e67c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e680:	2b00      	cmp	r3, #0
 800e682:	d00e      	beq.n	800e6a2 <HAL_UART_IRQHandler+0x6c6>
 800e684:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e688:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d008      	beq.n	800e6a2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e698:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	f001 fa16 	bl	800facc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e6a0:	e051      	b.n	800e746 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e6a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d014      	beq.n	800e6d8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e6ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e6b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d105      	bne.n	800e6c6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e6ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e6be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d008      	beq.n	800e6d8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d03a      	beq.n	800e744 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	4798      	blx	r3
    }
    return;
 800e6d6:	e035      	b.n	800e744 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e6d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d009      	beq.n	800e6f8 <HAL_UART_IRQHandler+0x71c>
 800e6e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e6e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d003      	beq.n	800e6f8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	f001 f9c0 	bl	800fa76 <UART_EndTransmit_IT>
    return;
 800e6f6:	e026      	b.n	800e746 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e6f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e700:	2b00      	cmp	r3, #0
 800e702:	d009      	beq.n	800e718 <HAL_UART_IRQHandler+0x73c>
 800e704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e708:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d003      	beq.n	800e718 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e710:	6878      	ldr	r0, [r7, #4]
 800e712:	f001 f9ef 	bl	800faf4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e716:	e016      	b.n	800e746 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e71c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e720:	2b00      	cmp	r3, #0
 800e722:	d010      	beq.n	800e746 <HAL_UART_IRQHandler+0x76a>
 800e724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e728:	2b00      	cmp	r3, #0
 800e72a:	da0c      	bge.n	800e746 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e72c:	6878      	ldr	r0, [r7, #4]
 800e72e:	f001 f9d7 	bl	800fae0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e732:	e008      	b.n	800e746 <HAL_UART_IRQHandler+0x76a>
      return;
 800e734:	bf00      	nop
 800e736:	e006      	b.n	800e746 <HAL_UART_IRQHandler+0x76a>
    return;
 800e738:	bf00      	nop
 800e73a:	e004      	b.n	800e746 <HAL_UART_IRQHandler+0x76a>
      return;
 800e73c:	bf00      	nop
 800e73e:	e002      	b.n	800e746 <HAL_UART_IRQHandler+0x76a>
      return;
 800e740:	bf00      	nop
 800e742:	e000      	b.n	800e746 <HAL_UART_IRQHandler+0x76a>
    return;
 800e744:	bf00      	nop
  }
}
 800e746:	37e8      	adds	r7, #232	; 0xe8
 800e748:	46bd      	mov	sp, r7
 800e74a:	bd80      	pop	{r7, pc}
 800e74c:	effffffe 	.word	0xeffffffe

0800e750 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e750:	b480      	push	{r7}
 800e752:	b083      	sub	sp, #12
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e758:	bf00      	nop
 800e75a:	370c      	adds	r7, #12
 800e75c:	46bd      	mov	sp, r7
 800e75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e762:	4770      	bx	lr

0800e764 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e764:	b480      	push	{r7}
 800e766:	b083      	sub	sp, #12
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e76c:	bf00      	nop
 800e76e:	370c      	adds	r7, #12
 800e770:	46bd      	mov	sp, r7
 800e772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e776:	4770      	bx	lr

0800e778 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e778:	b480      	push	{r7}
 800e77a:	b083      	sub	sp, #12
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
 800e780:	460b      	mov	r3, r1
 800e782:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e784:	bf00      	nop
 800e786:	370c      	adds	r7, #12
 800e788:	46bd      	mov	sp, r7
 800e78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78e:	4770      	bx	lr

0800e790 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e794:	b092      	sub	sp, #72	; 0x48
 800e796:	af00      	add	r7, sp, #0
 800e798:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e79a:	2300      	movs	r3, #0
 800e79c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e7a0:	697b      	ldr	r3, [r7, #20]
 800e7a2:	689a      	ldr	r2, [r3, #8]
 800e7a4:	697b      	ldr	r3, [r7, #20]
 800e7a6:	691b      	ldr	r3, [r3, #16]
 800e7a8:	431a      	orrs	r2, r3
 800e7aa:	697b      	ldr	r3, [r7, #20]
 800e7ac:	695b      	ldr	r3, [r3, #20]
 800e7ae:	431a      	orrs	r2, r3
 800e7b0:	697b      	ldr	r3, [r7, #20]
 800e7b2:	69db      	ldr	r3, [r3, #28]
 800e7b4:	4313      	orrs	r3, r2
 800e7b6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e7b8:	697b      	ldr	r3, [r7, #20]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	681a      	ldr	r2, [r3, #0]
 800e7be:	4bbe      	ldr	r3, [pc, #760]	; (800eab8 <UART_SetConfig+0x328>)
 800e7c0:	4013      	ands	r3, r2
 800e7c2:	697a      	ldr	r2, [r7, #20]
 800e7c4:	6812      	ldr	r2, [r2, #0]
 800e7c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e7c8:	430b      	orrs	r3, r1
 800e7ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e7cc:	697b      	ldr	r3, [r7, #20]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	685b      	ldr	r3, [r3, #4]
 800e7d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e7d6:	697b      	ldr	r3, [r7, #20]
 800e7d8:	68da      	ldr	r2, [r3, #12]
 800e7da:	697b      	ldr	r3, [r7, #20]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	430a      	orrs	r2, r1
 800e7e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e7e2:	697b      	ldr	r3, [r7, #20]
 800e7e4:	699b      	ldr	r3, [r3, #24]
 800e7e6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	4ab3      	ldr	r2, [pc, #716]	; (800eabc <UART_SetConfig+0x32c>)
 800e7ee:	4293      	cmp	r3, r2
 800e7f0:	d004      	beq.n	800e7fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e7f2:	697b      	ldr	r3, [r7, #20]
 800e7f4:	6a1b      	ldr	r3, [r3, #32]
 800e7f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e7f8:	4313      	orrs	r3, r2
 800e7fa:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e7fc:	697b      	ldr	r3, [r7, #20]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	689a      	ldr	r2, [r3, #8]
 800e802:	4baf      	ldr	r3, [pc, #700]	; (800eac0 <UART_SetConfig+0x330>)
 800e804:	4013      	ands	r3, r2
 800e806:	697a      	ldr	r2, [r7, #20]
 800e808:	6812      	ldr	r2, [r2, #0]
 800e80a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e80c:	430b      	orrs	r3, r1
 800e80e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e810:	697b      	ldr	r3, [r7, #20]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e816:	f023 010f 	bic.w	r1, r3, #15
 800e81a:	697b      	ldr	r3, [r7, #20]
 800e81c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e81e:	697b      	ldr	r3, [r7, #20]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	430a      	orrs	r2, r1
 800e824:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e826:	697b      	ldr	r3, [r7, #20]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	4aa6      	ldr	r2, [pc, #664]	; (800eac4 <UART_SetConfig+0x334>)
 800e82c:	4293      	cmp	r3, r2
 800e82e:	d177      	bne.n	800e920 <UART_SetConfig+0x190>
 800e830:	4ba5      	ldr	r3, [pc, #660]	; (800eac8 <UART_SetConfig+0x338>)
 800e832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e834:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e838:	2b28      	cmp	r3, #40	; 0x28
 800e83a:	d86d      	bhi.n	800e918 <UART_SetConfig+0x188>
 800e83c:	a201      	add	r2, pc, #4	; (adr r2, 800e844 <UART_SetConfig+0xb4>)
 800e83e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e842:	bf00      	nop
 800e844:	0800e8e9 	.word	0x0800e8e9
 800e848:	0800e919 	.word	0x0800e919
 800e84c:	0800e919 	.word	0x0800e919
 800e850:	0800e919 	.word	0x0800e919
 800e854:	0800e919 	.word	0x0800e919
 800e858:	0800e919 	.word	0x0800e919
 800e85c:	0800e919 	.word	0x0800e919
 800e860:	0800e919 	.word	0x0800e919
 800e864:	0800e8f1 	.word	0x0800e8f1
 800e868:	0800e919 	.word	0x0800e919
 800e86c:	0800e919 	.word	0x0800e919
 800e870:	0800e919 	.word	0x0800e919
 800e874:	0800e919 	.word	0x0800e919
 800e878:	0800e919 	.word	0x0800e919
 800e87c:	0800e919 	.word	0x0800e919
 800e880:	0800e919 	.word	0x0800e919
 800e884:	0800e8f9 	.word	0x0800e8f9
 800e888:	0800e919 	.word	0x0800e919
 800e88c:	0800e919 	.word	0x0800e919
 800e890:	0800e919 	.word	0x0800e919
 800e894:	0800e919 	.word	0x0800e919
 800e898:	0800e919 	.word	0x0800e919
 800e89c:	0800e919 	.word	0x0800e919
 800e8a0:	0800e919 	.word	0x0800e919
 800e8a4:	0800e901 	.word	0x0800e901
 800e8a8:	0800e919 	.word	0x0800e919
 800e8ac:	0800e919 	.word	0x0800e919
 800e8b0:	0800e919 	.word	0x0800e919
 800e8b4:	0800e919 	.word	0x0800e919
 800e8b8:	0800e919 	.word	0x0800e919
 800e8bc:	0800e919 	.word	0x0800e919
 800e8c0:	0800e919 	.word	0x0800e919
 800e8c4:	0800e909 	.word	0x0800e909
 800e8c8:	0800e919 	.word	0x0800e919
 800e8cc:	0800e919 	.word	0x0800e919
 800e8d0:	0800e919 	.word	0x0800e919
 800e8d4:	0800e919 	.word	0x0800e919
 800e8d8:	0800e919 	.word	0x0800e919
 800e8dc:	0800e919 	.word	0x0800e919
 800e8e0:	0800e919 	.word	0x0800e919
 800e8e4:	0800e911 	.word	0x0800e911
 800e8e8:	2301      	movs	r3, #1
 800e8ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8ee:	e222      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800e8f0:	2304      	movs	r3, #4
 800e8f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8f6:	e21e      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800e8f8:	2308      	movs	r3, #8
 800e8fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8fe:	e21a      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800e900:	2310      	movs	r3, #16
 800e902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e906:	e216      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800e908:	2320      	movs	r3, #32
 800e90a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e90e:	e212      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800e910:	2340      	movs	r3, #64	; 0x40
 800e912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e916:	e20e      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800e918:	2380      	movs	r3, #128	; 0x80
 800e91a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e91e:	e20a      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800e920:	697b      	ldr	r3, [r7, #20]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	4a69      	ldr	r2, [pc, #420]	; (800eacc <UART_SetConfig+0x33c>)
 800e926:	4293      	cmp	r3, r2
 800e928:	d130      	bne.n	800e98c <UART_SetConfig+0x1fc>
 800e92a:	4b67      	ldr	r3, [pc, #412]	; (800eac8 <UART_SetConfig+0x338>)
 800e92c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e92e:	f003 0307 	and.w	r3, r3, #7
 800e932:	2b05      	cmp	r3, #5
 800e934:	d826      	bhi.n	800e984 <UART_SetConfig+0x1f4>
 800e936:	a201      	add	r2, pc, #4	; (adr r2, 800e93c <UART_SetConfig+0x1ac>)
 800e938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e93c:	0800e955 	.word	0x0800e955
 800e940:	0800e95d 	.word	0x0800e95d
 800e944:	0800e965 	.word	0x0800e965
 800e948:	0800e96d 	.word	0x0800e96d
 800e94c:	0800e975 	.word	0x0800e975
 800e950:	0800e97d 	.word	0x0800e97d
 800e954:	2300      	movs	r3, #0
 800e956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e95a:	e1ec      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800e95c:	2304      	movs	r3, #4
 800e95e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e962:	e1e8      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800e964:	2308      	movs	r3, #8
 800e966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e96a:	e1e4      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800e96c:	2310      	movs	r3, #16
 800e96e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e972:	e1e0      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800e974:	2320      	movs	r3, #32
 800e976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e97a:	e1dc      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800e97c:	2340      	movs	r3, #64	; 0x40
 800e97e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e982:	e1d8      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800e984:	2380      	movs	r3, #128	; 0x80
 800e986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e98a:	e1d4      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800e98c:	697b      	ldr	r3, [r7, #20]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	4a4f      	ldr	r2, [pc, #316]	; (800ead0 <UART_SetConfig+0x340>)
 800e992:	4293      	cmp	r3, r2
 800e994:	d130      	bne.n	800e9f8 <UART_SetConfig+0x268>
 800e996:	4b4c      	ldr	r3, [pc, #304]	; (800eac8 <UART_SetConfig+0x338>)
 800e998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e99a:	f003 0307 	and.w	r3, r3, #7
 800e99e:	2b05      	cmp	r3, #5
 800e9a0:	d826      	bhi.n	800e9f0 <UART_SetConfig+0x260>
 800e9a2:	a201      	add	r2, pc, #4	; (adr r2, 800e9a8 <UART_SetConfig+0x218>)
 800e9a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9a8:	0800e9c1 	.word	0x0800e9c1
 800e9ac:	0800e9c9 	.word	0x0800e9c9
 800e9b0:	0800e9d1 	.word	0x0800e9d1
 800e9b4:	0800e9d9 	.word	0x0800e9d9
 800e9b8:	0800e9e1 	.word	0x0800e9e1
 800e9bc:	0800e9e9 	.word	0x0800e9e9
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9c6:	e1b6      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800e9c8:	2304      	movs	r3, #4
 800e9ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9ce:	e1b2      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800e9d0:	2308      	movs	r3, #8
 800e9d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9d6:	e1ae      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800e9d8:	2310      	movs	r3, #16
 800e9da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9de:	e1aa      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800e9e0:	2320      	movs	r3, #32
 800e9e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9e6:	e1a6      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800e9e8:	2340      	movs	r3, #64	; 0x40
 800e9ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9ee:	e1a2      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800e9f0:	2380      	movs	r3, #128	; 0x80
 800e9f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9f6:	e19e      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800e9f8:	697b      	ldr	r3, [r7, #20]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	4a35      	ldr	r2, [pc, #212]	; (800ead4 <UART_SetConfig+0x344>)
 800e9fe:	4293      	cmp	r3, r2
 800ea00:	d130      	bne.n	800ea64 <UART_SetConfig+0x2d4>
 800ea02:	4b31      	ldr	r3, [pc, #196]	; (800eac8 <UART_SetConfig+0x338>)
 800ea04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea06:	f003 0307 	and.w	r3, r3, #7
 800ea0a:	2b05      	cmp	r3, #5
 800ea0c:	d826      	bhi.n	800ea5c <UART_SetConfig+0x2cc>
 800ea0e:	a201      	add	r2, pc, #4	; (adr r2, 800ea14 <UART_SetConfig+0x284>)
 800ea10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea14:	0800ea2d 	.word	0x0800ea2d
 800ea18:	0800ea35 	.word	0x0800ea35
 800ea1c:	0800ea3d 	.word	0x0800ea3d
 800ea20:	0800ea45 	.word	0x0800ea45
 800ea24:	0800ea4d 	.word	0x0800ea4d
 800ea28:	0800ea55 	.word	0x0800ea55
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea32:	e180      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800ea34:	2304      	movs	r3, #4
 800ea36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea3a:	e17c      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800ea3c:	2308      	movs	r3, #8
 800ea3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea42:	e178      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800ea44:	2310      	movs	r3, #16
 800ea46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea4a:	e174      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800ea4c:	2320      	movs	r3, #32
 800ea4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea52:	e170      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800ea54:	2340      	movs	r3, #64	; 0x40
 800ea56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea5a:	e16c      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800ea5c:	2380      	movs	r3, #128	; 0x80
 800ea5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea62:	e168      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800ea64:	697b      	ldr	r3, [r7, #20]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	4a1b      	ldr	r2, [pc, #108]	; (800ead8 <UART_SetConfig+0x348>)
 800ea6a:	4293      	cmp	r3, r2
 800ea6c:	d142      	bne.n	800eaf4 <UART_SetConfig+0x364>
 800ea6e:	4b16      	ldr	r3, [pc, #88]	; (800eac8 <UART_SetConfig+0x338>)
 800ea70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea72:	f003 0307 	and.w	r3, r3, #7
 800ea76:	2b05      	cmp	r3, #5
 800ea78:	d838      	bhi.n	800eaec <UART_SetConfig+0x35c>
 800ea7a:	a201      	add	r2, pc, #4	; (adr r2, 800ea80 <UART_SetConfig+0x2f0>)
 800ea7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea80:	0800ea99 	.word	0x0800ea99
 800ea84:	0800eaa1 	.word	0x0800eaa1
 800ea88:	0800eaa9 	.word	0x0800eaa9
 800ea8c:	0800eab1 	.word	0x0800eab1
 800ea90:	0800eadd 	.word	0x0800eadd
 800ea94:	0800eae5 	.word	0x0800eae5
 800ea98:	2300      	movs	r3, #0
 800ea9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea9e:	e14a      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800eaa0:	2304      	movs	r3, #4
 800eaa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaa6:	e146      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800eaa8:	2308      	movs	r3, #8
 800eaaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaae:	e142      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800eab0:	2310      	movs	r3, #16
 800eab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eab6:	e13e      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800eab8:	cfff69f3 	.word	0xcfff69f3
 800eabc:	58000c00 	.word	0x58000c00
 800eac0:	11fff4ff 	.word	0x11fff4ff
 800eac4:	40011000 	.word	0x40011000
 800eac8:	58024400 	.word	0x58024400
 800eacc:	40004400 	.word	0x40004400
 800ead0:	40004800 	.word	0x40004800
 800ead4:	40004c00 	.word	0x40004c00
 800ead8:	40005000 	.word	0x40005000
 800eadc:	2320      	movs	r3, #32
 800eade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eae2:	e128      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800eae4:	2340      	movs	r3, #64	; 0x40
 800eae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaea:	e124      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800eaec:	2380      	movs	r3, #128	; 0x80
 800eaee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaf2:	e120      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800eaf4:	697b      	ldr	r3, [r7, #20]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	4acb      	ldr	r2, [pc, #812]	; (800ee28 <UART_SetConfig+0x698>)
 800eafa:	4293      	cmp	r3, r2
 800eafc:	d176      	bne.n	800ebec <UART_SetConfig+0x45c>
 800eafe:	4bcb      	ldr	r3, [pc, #812]	; (800ee2c <UART_SetConfig+0x69c>)
 800eb00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800eb06:	2b28      	cmp	r3, #40	; 0x28
 800eb08:	d86c      	bhi.n	800ebe4 <UART_SetConfig+0x454>
 800eb0a:	a201      	add	r2, pc, #4	; (adr r2, 800eb10 <UART_SetConfig+0x380>)
 800eb0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb10:	0800ebb5 	.word	0x0800ebb5
 800eb14:	0800ebe5 	.word	0x0800ebe5
 800eb18:	0800ebe5 	.word	0x0800ebe5
 800eb1c:	0800ebe5 	.word	0x0800ebe5
 800eb20:	0800ebe5 	.word	0x0800ebe5
 800eb24:	0800ebe5 	.word	0x0800ebe5
 800eb28:	0800ebe5 	.word	0x0800ebe5
 800eb2c:	0800ebe5 	.word	0x0800ebe5
 800eb30:	0800ebbd 	.word	0x0800ebbd
 800eb34:	0800ebe5 	.word	0x0800ebe5
 800eb38:	0800ebe5 	.word	0x0800ebe5
 800eb3c:	0800ebe5 	.word	0x0800ebe5
 800eb40:	0800ebe5 	.word	0x0800ebe5
 800eb44:	0800ebe5 	.word	0x0800ebe5
 800eb48:	0800ebe5 	.word	0x0800ebe5
 800eb4c:	0800ebe5 	.word	0x0800ebe5
 800eb50:	0800ebc5 	.word	0x0800ebc5
 800eb54:	0800ebe5 	.word	0x0800ebe5
 800eb58:	0800ebe5 	.word	0x0800ebe5
 800eb5c:	0800ebe5 	.word	0x0800ebe5
 800eb60:	0800ebe5 	.word	0x0800ebe5
 800eb64:	0800ebe5 	.word	0x0800ebe5
 800eb68:	0800ebe5 	.word	0x0800ebe5
 800eb6c:	0800ebe5 	.word	0x0800ebe5
 800eb70:	0800ebcd 	.word	0x0800ebcd
 800eb74:	0800ebe5 	.word	0x0800ebe5
 800eb78:	0800ebe5 	.word	0x0800ebe5
 800eb7c:	0800ebe5 	.word	0x0800ebe5
 800eb80:	0800ebe5 	.word	0x0800ebe5
 800eb84:	0800ebe5 	.word	0x0800ebe5
 800eb88:	0800ebe5 	.word	0x0800ebe5
 800eb8c:	0800ebe5 	.word	0x0800ebe5
 800eb90:	0800ebd5 	.word	0x0800ebd5
 800eb94:	0800ebe5 	.word	0x0800ebe5
 800eb98:	0800ebe5 	.word	0x0800ebe5
 800eb9c:	0800ebe5 	.word	0x0800ebe5
 800eba0:	0800ebe5 	.word	0x0800ebe5
 800eba4:	0800ebe5 	.word	0x0800ebe5
 800eba8:	0800ebe5 	.word	0x0800ebe5
 800ebac:	0800ebe5 	.word	0x0800ebe5
 800ebb0:	0800ebdd 	.word	0x0800ebdd
 800ebb4:	2301      	movs	r3, #1
 800ebb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebba:	e0bc      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800ebbc:	2304      	movs	r3, #4
 800ebbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebc2:	e0b8      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800ebc4:	2308      	movs	r3, #8
 800ebc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebca:	e0b4      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800ebcc:	2310      	movs	r3, #16
 800ebce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebd2:	e0b0      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800ebd4:	2320      	movs	r3, #32
 800ebd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebda:	e0ac      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800ebdc:	2340      	movs	r3, #64	; 0x40
 800ebde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebe2:	e0a8      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800ebe4:	2380      	movs	r3, #128	; 0x80
 800ebe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebea:	e0a4      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800ebec:	697b      	ldr	r3, [r7, #20]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	4a8f      	ldr	r2, [pc, #572]	; (800ee30 <UART_SetConfig+0x6a0>)
 800ebf2:	4293      	cmp	r3, r2
 800ebf4:	d130      	bne.n	800ec58 <UART_SetConfig+0x4c8>
 800ebf6:	4b8d      	ldr	r3, [pc, #564]	; (800ee2c <UART_SetConfig+0x69c>)
 800ebf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebfa:	f003 0307 	and.w	r3, r3, #7
 800ebfe:	2b05      	cmp	r3, #5
 800ec00:	d826      	bhi.n	800ec50 <UART_SetConfig+0x4c0>
 800ec02:	a201      	add	r2, pc, #4	; (adr r2, 800ec08 <UART_SetConfig+0x478>)
 800ec04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec08:	0800ec21 	.word	0x0800ec21
 800ec0c:	0800ec29 	.word	0x0800ec29
 800ec10:	0800ec31 	.word	0x0800ec31
 800ec14:	0800ec39 	.word	0x0800ec39
 800ec18:	0800ec41 	.word	0x0800ec41
 800ec1c:	0800ec49 	.word	0x0800ec49
 800ec20:	2300      	movs	r3, #0
 800ec22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec26:	e086      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800ec28:	2304      	movs	r3, #4
 800ec2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec2e:	e082      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800ec30:	2308      	movs	r3, #8
 800ec32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec36:	e07e      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800ec38:	2310      	movs	r3, #16
 800ec3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec3e:	e07a      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800ec40:	2320      	movs	r3, #32
 800ec42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec46:	e076      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800ec48:	2340      	movs	r3, #64	; 0x40
 800ec4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec4e:	e072      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800ec50:	2380      	movs	r3, #128	; 0x80
 800ec52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec56:	e06e      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800ec58:	697b      	ldr	r3, [r7, #20]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	4a75      	ldr	r2, [pc, #468]	; (800ee34 <UART_SetConfig+0x6a4>)
 800ec5e:	4293      	cmp	r3, r2
 800ec60:	d130      	bne.n	800ecc4 <UART_SetConfig+0x534>
 800ec62:	4b72      	ldr	r3, [pc, #456]	; (800ee2c <UART_SetConfig+0x69c>)
 800ec64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec66:	f003 0307 	and.w	r3, r3, #7
 800ec6a:	2b05      	cmp	r3, #5
 800ec6c:	d826      	bhi.n	800ecbc <UART_SetConfig+0x52c>
 800ec6e:	a201      	add	r2, pc, #4	; (adr r2, 800ec74 <UART_SetConfig+0x4e4>)
 800ec70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec74:	0800ec8d 	.word	0x0800ec8d
 800ec78:	0800ec95 	.word	0x0800ec95
 800ec7c:	0800ec9d 	.word	0x0800ec9d
 800ec80:	0800eca5 	.word	0x0800eca5
 800ec84:	0800ecad 	.word	0x0800ecad
 800ec88:	0800ecb5 	.word	0x0800ecb5
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec92:	e050      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800ec94:	2304      	movs	r3, #4
 800ec96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec9a:	e04c      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800ec9c:	2308      	movs	r3, #8
 800ec9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eca2:	e048      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800eca4:	2310      	movs	r3, #16
 800eca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecaa:	e044      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800ecac:	2320      	movs	r3, #32
 800ecae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecb2:	e040      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800ecb4:	2340      	movs	r3, #64	; 0x40
 800ecb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecba:	e03c      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800ecbc:	2380      	movs	r3, #128	; 0x80
 800ecbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecc2:	e038      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800ecc4:	697b      	ldr	r3, [r7, #20]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	4a5b      	ldr	r2, [pc, #364]	; (800ee38 <UART_SetConfig+0x6a8>)
 800ecca:	4293      	cmp	r3, r2
 800eccc:	d130      	bne.n	800ed30 <UART_SetConfig+0x5a0>
 800ecce:	4b57      	ldr	r3, [pc, #348]	; (800ee2c <UART_SetConfig+0x69c>)
 800ecd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ecd2:	f003 0307 	and.w	r3, r3, #7
 800ecd6:	2b05      	cmp	r3, #5
 800ecd8:	d826      	bhi.n	800ed28 <UART_SetConfig+0x598>
 800ecda:	a201      	add	r2, pc, #4	; (adr r2, 800ece0 <UART_SetConfig+0x550>)
 800ecdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ece0:	0800ecf9 	.word	0x0800ecf9
 800ece4:	0800ed01 	.word	0x0800ed01
 800ece8:	0800ed09 	.word	0x0800ed09
 800ecec:	0800ed11 	.word	0x0800ed11
 800ecf0:	0800ed19 	.word	0x0800ed19
 800ecf4:	0800ed21 	.word	0x0800ed21
 800ecf8:	2302      	movs	r3, #2
 800ecfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecfe:	e01a      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800ed00:	2304      	movs	r3, #4
 800ed02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed06:	e016      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800ed08:	2308      	movs	r3, #8
 800ed0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed0e:	e012      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800ed10:	2310      	movs	r3, #16
 800ed12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed16:	e00e      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800ed18:	2320      	movs	r3, #32
 800ed1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed1e:	e00a      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800ed20:	2340      	movs	r3, #64	; 0x40
 800ed22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed26:	e006      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800ed28:	2380      	movs	r3, #128	; 0x80
 800ed2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed2e:	e002      	b.n	800ed36 <UART_SetConfig+0x5a6>
 800ed30:	2380      	movs	r3, #128	; 0x80
 800ed32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ed36:	697b      	ldr	r3, [r7, #20]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	4a3f      	ldr	r2, [pc, #252]	; (800ee38 <UART_SetConfig+0x6a8>)
 800ed3c:	4293      	cmp	r3, r2
 800ed3e:	f040 80f8 	bne.w	800ef32 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ed42:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ed46:	2b20      	cmp	r3, #32
 800ed48:	dc46      	bgt.n	800edd8 <UART_SetConfig+0x648>
 800ed4a:	2b02      	cmp	r3, #2
 800ed4c:	f2c0 8082 	blt.w	800ee54 <UART_SetConfig+0x6c4>
 800ed50:	3b02      	subs	r3, #2
 800ed52:	2b1e      	cmp	r3, #30
 800ed54:	d87e      	bhi.n	800ee54 <UART_SetConfig+0x6c4>
 800ed56:	a201      	add	r2, pc, #4	; (adr r2, 800ed5c <UART_SetConfig+0x5cc>)
 800ed58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed5c:	0800eddf 	.word	0x0800eddf
 800ed60:	0800ee55 	.word	0x0800ee55
 800ed64:	0800ede7 	.word	0x0800ede7
 800ed68:	0800ee55 	.word	0x0800ee55
 800ed6c:	0800ee55 	.word	0x0800ee55
 800ed70:	0800ee55 	.word	0x0800ee55
 800ed74:	0800edf7 	.word	0x0800edf7
 800ed78:	0800ee55 	.word	0x0800ee55
 800ed7c:	0800ee55 	.word	0x0800ee55
 800ed80:	0800ee55 	.word	0x0800ee55
 800ed84:	0800ee55 	.word	0x0800ee55
 800ed88:	0800ee55 	.word	0x0800ee55
 800ed8c:	0800ee55 	.word	0x0800ee55
 800ed90:	0800ee55 	.word	0x0800ee55
 800ed94:	0800ee07 	.word	0x0800ee07
 800ed98:	0800ee55 	.word	0x0800ee55
 800ed9c:	0800ee55 	.word	0x0800ee55
 800eda0:	0800ee55 	.word	0x0800ee55
 800eda4:	0800ee55 	.word	0x0800ee55
 800eda8:	0800ee55 	.word	0x0800ee55
 800edac:	0800ee55 	.word	0x0800ee55
 800edb0:	0800ee55 	.word	0x0800ee55
 800edb4:	0800ee55 	.word	0x0800ee55
 800edb8:	0800ee55 	.word	0x0800ee55
 800edbc:	0800ee55 	.word	0x0800ee55
 800edc0:	0800ee55 	.word	0x0800ee55
 800edc4:	0800ee55 	.word	0x0800ee55
 800edc8:	0800ee55 	.word	0x0800ee55
 800edcc:	0800ee55 	.word	0x0800ee55
 800edd0:	0800ee55 	.word	0x0800ee55
 800edd4:	0800ee47 	.word	0x0800ee47
 800edd8:	2b40      	cmp	r3, #64	; 0x40
 800edda:	d037      	beq.n	800ee4c <UART_SetConfig+0x6bc>
 800eddc:	e03a      	b.n	800ee54 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800edde:	f7fc f8ab 	bl	800af38 <HAL_RCCEx_GetD3PCLK1Freq>
 800ede2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ede4:	e03c      	b.n	800ee60 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ede6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800edea:	4618      	mov	r0, r3
 800edec:	f7fc f8ba 	bl	800af64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800edf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800edf4:	e034      	b.n	800ee60 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800edf6:	f107 0318 	add.w	r3, r7, #24
 800edfa:	4618      	mov	r0, r3
 800edfc:	f7fc fa06 	bl	800b20c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ee00:	69fb      	ldr	r3, [r7, #28]
 800ee02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee04:	e02c      	b.n	800ee60 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ee06:	4b09      	ldr	r3, [pc, #36]	; (800ee2c <UART_SetConfig+0x69c>)
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	f003 0320 	and.w	r3, r3, #32
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d016      	beq.n	800ee40 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ee12:	4b06      	ldr	r3, [pc, #24]	; (800ee2c <UART_SetConfig+0x69c>)
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	08db      	lsrs	r3, r3, #3
 800ee18:	f003 0303 	and.w	r3, r3, #3
 800ee1c:	4a07      	ldr	r2, [pc, #28]	; (800ee3c <UART_SetConfig+0x6ac>)
 800ee1e:	fa22 f303 	lsr.w	r3, r2, r3
 800ee22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ee24:	e01c      	b.n	800ee60 <UART_SetConfig+0x6d0>
 800ee26:	bf00      	nop
 800ee28:	40011400 	.word	0x40011400
 800ee2c:	58024400 	.word	0x58024400
 800ee30:	40007800 	.word	0x40007800
 800ee34:	40007c00 	.word	0x40007c00
 800ee38:	58000c00 	.word	0x58000c00
 800ee3c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ee40:	4b9d      	ldr	r3, [pc, #628]	; (800f0b8 <UART_SetConfig+0x928>)
 800ee42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee44:	e00c      	b.n	800ee60 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ee46:	4b9d      	ldr	r3, [pc, #628]	; (800f0bc <UART_SetConfig+0x92c>)
 800ee48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee4a:	e009      	b.n	800ee60 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ee4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ee50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee52:	e005      	b.n	800ee60 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ee54:	2300      	movs	r3, #0
 800ee56:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ee58:	2301      	movs	r3, #1
 800ee5a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ee5e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ee60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	f000 81de 	beq.w	800f224 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ee68:	697b      	ldr	r3, [r7, #20]
 800ee6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee6c:	4a94      	ldr	r2, [pc, #592]	; (800f0c0 <UART_SetConfig+0x930>)
 800ee6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee72:	461a      	mov	r2, r3
 800ee74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee76:	fbb3 f3f2 	udiv	r3, r3, r2
 800ee7a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ee7c:	697b      	ldr	r3, [r7, #20]
 800ee7e:	685a      	ldr	r2, [r3, #4]
 800ee80:	4613      	mov	r3, r2
 800ee82:	005b      	lsls	r3, r3, #1
 800ee84:	4413      	add	r3, r2
 800ee86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee88:	429a      	cmp	r2, r3
 800ee8a:	d305      	bcc.n	800ee98 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ee8c:	697b      	ldr	r3, [r7, #20]
 800ee8e:	685b      	ldr	r3, [r3, #4]
 800ee90:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ee92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee94:	429a      	cmp	r2, r3
 800ee96:	d903      	bls.n	800eea0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ee98:	2301      	movs	r3, #1
 800ee9a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ee9e:	e1c1      	b.n	800f224 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eea2:	2200      	movs	r2, #0
 800eea4:	60bb      	str	r3, [r7, #8]
 800eea6:	60fa      	str	r2, [r7, #12]
 800eea8:	697b      	ldr	r3, [r7, #20]
 800eeaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eeac:	4a84      	ldr	r2, [pc, #528]	; (800f0c0 <UART_SetConfig+0x930>)
 800eeae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eeb2:	b29b      	uxth	r3, r3
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	603b      	str	r3, [r7, #0]
 800eeb8:	607a      	str	r2, [r7, #4]
 800eeba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eebe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800eec2:	f7f1 fa65 	bl	8000390 <__aeabi_uldivmod>
 800eec6:	4602      	mov	r2, r0
 800eec8:	460b      	mov	r3, r1
 800eeca:	4610      	mov	r0, r2
 800eecc:	4619      	mov	r1, r3
 800eece:	f04f 0200 	mov.w	r2, #0
 800eed2:	f04f 0300 	mov.w	r3, #0
 800eed6:	020b      	lsls	r3, r1, #8
 800eed8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800eedc:	0202      	lsls	r2, r0, #8
 800eede:	6979      	ldr	r1, [r7, #20]
 800eee0:	6849      	ldr	r1, [r1, #4]
 800eee2:	0849      	lsrs	r1, r1, #1
 800eee4:	2000      	movs	r0, #0
 800eee6:	460c      	mov	r4, r1
 800eee8:	4605      	mov	r5, r0
 800eeea:	eb12 0804 	adds.w	r8, r2, r4
 800eeee:	eb43 0905 	adc.w	r9, r3, r5
 800eef2:	697b      	ldr	r3, [r7, #20]
 800eef4:	685b      	ldr	r3, [r3, #4]
 800eef6:	2200      	movs	r2, #0
 800eef8:	469a      	mov	sl, r3
 800eefa:	4693      	mov	fp, r2
 800eefc:	4652      	mov	r2, sl
 800eefe:	465b      	mov	r3, fp
 800ef00:	4640      	mov	r0, r8
 800ef02:	4649      	mov	r1, r9
 800ef04:	f7f1 fa44 	bl	8000390 <__aeabi_uldivmod>
 800ef08:	4602      	mov	r2, r0
 800ef0a:	460b      	mov	r3, r1
 800ef0c:	4613      	mov	r3, r2
 800ef0e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ef10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ef16:	d308      	bcc.n	800ef2a <UART_SetConfig+0x79a>
 800ef18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ef1e:	d204      	bcs.n	800ef2a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ef20:	697b      	ldr	r3, [r7, #20]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef26:	60da      	str	r2, [r3, #12]
 800ef28:	e17c      	b.n	800f224 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ef2a:	2301      	movs	r3, #1
 800ef2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ef30:	e178      	b.n	800f224 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	69db      	ldr	r3, [r3, #28]
 800ef36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ef3a:	f040 80c5 	bne.w	800f0c8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ef3e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ef42:	2b20      	cmp	r3, #32
 800ef44:	dc48      	bgt.n	800efd8 <UART_SetConfig+0x848>
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	db7b      	blt.n	800f042 <UART_SetConfig+0x8b2>
 800ef4a:	2b20      	cmp	r3, #32
 800ef4c:	d879      	bhi.n	800f042 <UART_SetConfig+0x8b2>
 800ef4e:	a201      	add	r2, pc, #4	; (adr r2, 800ef54 <UART_SetConfig+0x7c4>)
 800ef50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef54:	0800efdf 	.word	0x0800efdf
 800ef58:	0800efe7 	.word	0x0800efe7
 800ef5c:	0800f043 	.word	0x0800f043
 800ef60:	0800f043 	.word	0x0800f043
 800ef64:	0800efef 	.word	0x0800efef
 800ef68:	0800f043 	.word	0x0800f043
 800ef6c:	0800f043 	.word	0x0800f043
 800ef70:	0800f043 	.word	0x0800f043
 800ef74:	0800efff 	.word	0x0800efff
 800ef78:	0800f043 	.word	0x0800f043
 800ef7c:	0800f043 	.word	0x0800f043
 800ef80:	0800f043 	.word	0x0800f043
 800ef84:	0800f043 	.word	0x0800f043
 800ef88:	0800f043 	.word	0x0800f043
 800ef8c:	0800f043 	.word	0x0800f043
 800ef90:	0800f043 	.word	0x0800f043
 800ef94:	0800f00f 	.word	0x0800f00f
 800ef98:	0800f043 	.word	0x0800f043
 800ef9c:	0800f043 	.word	0x0800f043
 800efa0:	0800f043 	.word	0x0800f043
 800efa4:	0800f043 	.word	0x0800f043
 800efa8:	0800f043 	.word	0x0800f043
 800efac:	0800f043 	.word	0x0800f043
 800efb0:	0800f043 	.word	0x0800f043
 800efb4:	0800f043 	.word	0x0800f043
 800efb8:	0800f043 	.word	0x0800f043
 800efbc:	0800f043 	.word	0x0800f043
 800efc0:	0800f043 	.word	0x0800f043
 800efc4:	0800f043 	.word	0x0800f043
 800efc8:	0800f043 	.word	0x0800f043
 800efcc:	0800f043 	.word	0x0800f043
 800efd0:	0800f043 	.word	0x0800f043
 800efd4:	0800f035 	.word	0x0800f035
 800efd8:	2b40      	cmp	r3, #64	; 0x40
 800efda:	d02e      	beq.n	800f03a <UART_SetConfig+0x8aa>
 800efdc:	e031      	b.n	800f042 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800efde:	f7f9 fff5 	bl	8008fcc <HAL_RCC_GetPCLK1Freq>
 800efe2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800efe4:	e033      	b.n	800f04e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800efe6:	f7fa f807 	bl	8008ff8 <HAL_RCC_GetPCLK2Freq>
 800efea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800efec:	e02f      	b.n	800f04e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800efee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eff2:	4618      	mov	r0, r3
 800eff4:	f7fb ffb6 	bl	800af64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800eff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800effa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800effc:	e027      	b.n	800f04e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800effe:	f107 0318 	add.w	r3, r7, #24
 800f002:	4618      	mov	r0, r3
 800f004:	f7fc f902 	bl	800b20c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f008:	69fb      	ldr	r3, [r7, #28]
 800f00a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f00c:	e01f      	b.n	800f04e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f00e:	4b2d      	ldr	r3, [pc, #180]	; (800f0c4 <UART_SetConfig+0x934>)
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	f003 0320 	and.w	r3, r3, #32
 800f016:	2b00      	cmp	r3, #0
 800f018:	d009      	beq.n	800f02e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f01a:	4b2a      	ldr	r3, [pc, #168]	; (800f0c4 <UART_SetConfig+0x934>)
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	08db      	lsrs	r3, r3, #3
 800f020:	f003 0303 	and.w	r3, r3, #3
 800f024:	4a24      	ldr	r2, [pc, #144]	; (800f0b8 <UART_SetConfig+0x928>)
 800f026:	fa22 f303 	lsr.w	r3, r2, r3
 800f02a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f02c:	e00f      	b.n	800f04e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f02e:	4b22      	ldr	r3, [pc, #136]	; (800f0b8 <UART_SetConfig+0x928>)
 800f030:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f032:	e00c      	b.n	800f04e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f034:	4b21      	ldr	r3, [pc, #132]	; (800f0bc <UART_SetConfig+0x92c>)
 800f036:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f038:	e009      	b.n	800f04e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f03a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f03e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f040:	e005      	b.n	800f04e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f042:	2300      	movs	r3, #0
 800f044:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f046:	2301      	movs	r3, #1
 800f048:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f04c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f04e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f050:	2b00      	cmp	r3, #0
 800f052:	f000 80e7 	beq.w	800f224 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f056:	697b      	ldr	r3, [r7, #20]
 800f058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f05a:	4a19      	ldr	r2, [pc, #100]	; (800f0c0 <UART_SetConfig+0x930>)
 800f05c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f060:	461a      	mov	r2, r3
 800f062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f064:	fbb3 f3f2 	udiv	r3, r3, r2
 800f068:	005a      	lsls	r2, r3, #1
 800f06a:	697b      	ldr	r3, [r7, #20]
 800f06c:	685b      	ldr	r3, [r3, #4]
 800f06e:	085b      	lsrs	r3, r3, #1
 800f070:	441a      	add	r2, r3
 800f072:	697b      	ldr	r3, [r7, #20]
 800f074:	685b      	ldr	r3, [r3, #4]
 800f076:	fbb2 f3f3 	udiv	r3, r2, r3
 800f07a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f07e:	2b0f      	cmp	r3, #15
 800f080:	d916      	bls.n	800f0b0 <UART_SetConfig+0x920>
 800f082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f088:	d212      	bcs.n	800f0b0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f08c:	b29b      	uxth	r3, r3
 800f08e:	f023 030f 	bic.w	r3, r3, #15
 800f092:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f096:	085b      	lsrs	r3, r3, #1
 800f098:	b29b      	uxth	r3, r3
 800f09a:	f003 0307 	and.w	r3, r3, #7
 800f09e:	b29a      	uxth	r2, r3
 800f0a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f0a2:	4313      	orrs	r3, r2
 800f0a4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f0a6:	697b      	ldr	r3, [r7, #20]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f0ac:	60da      	str	r2, [r3, #12]
 800f0ae:	e0b9      	b.n	800f224 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f0b0:	2301      	movs	r3, #1
 800f0b2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f0b6:	e0b5      	b.n	800f224 <UART_SetConfig+0xa94>
 800f0b8:	03d09000 	.word	0x03d09000
 800f0bc:	003d0900 	.word	0x003d0900
 800f0c0:	08012a90 	.word	0x08012a90
 800f0c4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f0c8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f0cc:	2b20      	cmp	r3, #32
 800f0ce:	dc49      	bgt.n	800f164 <UART_SetConfig+0x9d4>
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	db7c      	blt.n	800f1ce <UART_SetConfig+0xa3e>
 800f0d4:	2b20      	cmp	r3, #32
 800f0d6:	d87a      	bhi.n	800f1ce <UART_SetConfig+0xa3e>
 800f0d8:	a201      	add	r2, pc, #4	; (adr r2, 800f0e0 <UART_SetConfig+0x950>)
 800f0da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0de:	bf00      	nop
 800f0e0:	0800f16b 	.word	0x0800f16b
 800f0e4:	0800f173 	.word	0x0800f173
 800f0e8:	0800f1cf 	.word	0x0800f1cf
 800f0ec:	0800f1cf 	.word	0x0800f1cf
 800f0f0:	0800f17b 	.word	0x0800f17b
 800f0f4:	0800f1cf 	.word	0x0800f1cf
 800f0f8:	0800f1cf 	.word	0x0800f1cf
 800f0fc:	0800f1cf 	.word	0x0800f1cf
 800f100:	0800f18b 	.word	0x0800f18b
 800f104:	0800f1cf 	.word	0x0800f1cf
 800f108:	0800f1cf 	.word	0x0800f1cf
 800f10c:	0800f1cf 	.word	0x0800f1cf
 800f110:	0800f1cf 	.word	0x0800f1cf
 800f114:	0800f1cf 	.word	0x0800f1cf
 800f118:	0800f1cf 	.word	0x0800f1cf
 800f11c:	0800f1cf 	.word	0x0800f1cf
 800f120:	0800f19b 	.word	0x0800f19b
 800f124:	0800f1cf 	.word	0x0800f1cf
 800f128:	0800f1cf 	.word	0x0800f1cf
 800f12c:	0800f1cf 	.word	0x0800f1cf
 800f130:	0800f1cf 	.word	0x0800f1cf
 800f134:	0800f1cf 	.word	0x0800f1cf
 800f138:	0800f1cf 	.word	0x0800f1cf
 800f13c:	0800f1cf 	.word	0x0800f1cf
 800f140:	0800f1cf 	.word	0x0800f1cf
 800f144:	0800f1cf 	.word	0x0800f1cf
 800f148:	0800f1cf 	.word	0x0800f1cf
 800f14c:	0800f1cf 	.word	0x0800f1cf
 800f150:	0800f1cf 	.word	0x0800f1cf
 800f154:	0800f1cf 	.word	0x0800f1cf
 800f158:	0800f1cf 	.word	0x0800f1cf
 800f15c:	0800f1cf 	.word	0x0800f1cf
 800f160:	0800f1c1 	.word	0x0800f1c1
 800f164:	2b40      	cmp	r3, #64	; 0x40
 800f166:	d02e      	beq.n	800f1c6 <UART_SetConfig+0xa36>
 800f168:	e031      	b.n	800f1ce <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f16a:	f7f9 ff2f 	bl	8008fcc <HAL_RCC_GetPCLK1Freq>
 800f16e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f170:	e033      	b.n	800f1da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f172:	f7f9 ff41 	bl	8008ff8 <HAL_RCC_GetPCLK2Freq>
 800f176:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f178:	e02f      	b.n	800f1da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f17a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f17e:	4618      	mov	r0, r3
 800f180:	f7fb fef0 	bl	800af64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f186:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f188:	e027      	b.n	800f1da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f18a:	f107 0318 	add.w	r3, r7, #24
 800f18e:	4618      	mov	r0, r3
 800f190:	f7fc f83c 	bl	800b20c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f194:	69fb      	ldr	r3, [r7, #28]
 800f196:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f198:	e01f      	b.n	800f1da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f19a:	4b2d      	ldr	r3, [pc, #180]	; (800f250 <UART_SetConfig+0xac0>)
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	f003 0320 	and.w	r3, r3, #32
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d009      	beq.n	800f1ba <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f1a6:	4b2a      	ldr	r3, [pc, #168]	; (800f250 <UART_SetConfig+0xac0>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	08db      	lsrs	r3, r3, #3
 800f1ac:	f003 0303 	and.w	r3, r3, #3
 800f1b0:	4a28      	ldr	r2, [pc, #160]	; (800f254 <UART_SetConfig+0xac4>)
 800f1b2:	fa22 f303 	lsr.w	r3, r2, r3
 800f1b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f1b8:	e00f      	b.n	800f1da <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f1ba:	4b26      	ldr	r3, [pc, #152]	; (800f254 <UART_SetConfig+0xac4>)
 800f1bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1be:	e00c      	b.n	800f1da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f1c0:	4b25      	ldr	r3, [pc, #148]	; (800f258 <UART_SetConfig+0xac8>)
 800f1c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1c4:	e009      	b.n	800f1da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f1c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f1ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1cc:	e005      	b.n	800f1da <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f1d2:	2301      	movs	r3, #1
 800f1d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f1d8:	bf00      	nop
    }

    if (pclk != 0U)
 800f1da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d021      	beq.n	800f224 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f1e0:	697b      	ldr	r3, [r7, #20]
 800f1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1e4:	4a1d      	ldr	r2, [pc, #116]	; (800f25c <UART_SetConfig+0xacc>)
 800f1e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f1ea:	461a      	mov	r2, r3
 800f1ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1ee:	fbb3 f2f2 	udiv	r2, r3, r2
 800f1f2:	697b      	ldr	r3, [r7, #20]
 800f1f4:	685b      	ldr	r3, [r3, #4]
 800f1f6:	085b      	lsrs	r3, r3, #1
 800f1f8:	441a      	add	r2, r3
 800f1fa:	697b      	ldr	r3, [r7, #20]
 800f1fc:	685b      	ldr	r3, [r3, #4]
 800f1fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800f202:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f206:	2b0f      	cmp	r3, #15
 800f208:	d909      	bls.n	800f21e <UART_SetConfig+0xa8e>
 800f20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f20c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f210:	d205      	bcs.n	800f21e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f214:	b29a      	uxth	r2, r3
 800f216:	697b      	ldr	r3, [r7, #20]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	60da      	str	r2, [r3, #12]
 800f21c:	e002      	b.n	800f224 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f21e:	2301      	movs	r3, #1
 800f220:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f224:	697b      	ldr	r3, [r7, #20]
 800f226:	2201      	movs	r2, #1
 800f228:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f22c:	697b      	ldr	r3, [r7, #20]
 800f22e:	2201      	movs	r2, #1
 800f230:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f234:	697b      	ldr	r3, [r7, #20]
 800f236:	2200      	movs	r2, #0
 800f238:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f23a:	697b      	ldr	r3, [r7, #20]
 800f23c:	2200      	movs	r2, #0
 800f23e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f240:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f244:	4618      	mov	r0, r3
 800f246:	3748      	adds	r7, #72	; 0x48
 800f248:	46bd      	mov	sp, r7
 800f24a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f24e:	bf00      	nop
 800f250:	58024400 	.word	0x58024400
 800f254:	03d09000 	.word	0x03d09000
 800f258:	003d0900 	.word	0x003d0900
 800f25c:	08012a90 	.word	0x08012a90

0800f260 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f260:	b480      	push	{r7}
 800f262:	b083      	sub	sp, #12
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f26c:	f003 0301 	and.w	r3, r3, #1
 800f270:	2b00      	cmp	r3, #0
 800f272:	d00a      	beq.n	800f28a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	685b      	ldr	r3, [r3, #4]
 800f27a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	430a      	orrs	r2, r1
 800f288:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f28e:	f003 0302 	and.w	r3, r3, #2
 800f292:	2b00      	cmp	r3, #0
 800f294:	d00a      	beq.n	800f2ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	685b      	ldr	r3, [r3, #4]
 800f29c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	430a      	orrs	r2, r1
 800f2aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2b0:	f003 0304 	and.w	r3, r3, #4
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d00a      	beq.n	800f2ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	685b      	ldr	r3, [r3, #4]
 800f2be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	430a      	orrs	r2, r1
 800f2cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2d2:	f003 0308 	and.w	r3, r3, #8
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d00a      	beq.n	800f2f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	685b      	ldr	r3, [r3, #4]
 800f2e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	430a      	orrs	r2, r1
 800f2ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2f4:	f003 0310 	and.w	r3, r3, #16
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d00a      	beq.n	800f312 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	689b      	ldr	r3, [r3, #8]
 800f302:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	430a      	orrs	r2, r1
 800f310:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f316:	f003 0320 	and.w	r3, r3, #32
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d00a      	beq.n	800f334 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	689b      	ldr	r3, [r3, #8]
 800f324:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	430a      	orrs	r2, r1
 800f332:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d01a      	beq.n	800f376 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	685b      	ldr	r3, [r3, #4]
 800f346:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	430a      	orrs	r2, r1
 800f354:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f35a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f35e:	d10a      	bne.n	800f376 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	685b      	ldr	r3, [r3, #4]
 800f366:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	430a      	orrs	r2, r1
 800f374:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f37a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d00a      	beq.n	800f398 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	685b      	ldr	r3, [r3, #4]
 800f388:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	430a      	orrs	r2, r1
 800f396:	605a      	str	r2, [r3, #4]
  }
}
 800f398:	bf00      	nop
 800f39a:	370c      	adds	r7, #12
 800f39c:	46bd      	mov	sp, r7
 800f39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a2:	4770      	bx	lr

0800f3a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b098      	sub	sp, #96	; 0x60
 800f3a8:	af02      	add	r7, sp, #8
 800f3aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f3b4:	f7f3 fc94 	bl	8002ce0 <HAL_GetTick>
 800f3b8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	f003 0308 	and.w	r3, r3, #8
 800f3c4:	2b08      	cmp	r3, #8
 800f3c6:	d12f      	bne.n	800f428 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f3c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f3cc:	9300      	str	r3, [sp, #0]
 800f3ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f3d6:	6878      	ldr	r0, [r7, #4]
 800f3d8:	f000 f88e 	bl	800f4f8 <UART_WaitOnFlagUntilTimeout>
 800f3dc:	4603      	mov	r3, r0
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d022      	beq.n	800f428 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3ea:	e853 3f00 	ldrex	r3, [r3]
 800f3ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f3f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f3f6:	653b      	str	r3, [r7, #80]	; 0x50
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	461a      	mov	r2, r3
 800f3fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f400:	647b      	str	r3, [r7, #68]	; 0x44
 800f402:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f404:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f406:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f408:	e841 2300 	strex	r3, r2, [r1]
 800f40c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f40e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f410:	2b00      	cmp	r3, #0
 800f412:	d1e6      	bne.n	800f3e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2220      	movs	r2, #32
 800f418:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	2200      	movs	r2, #0
 800f420:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f424:	2303      	movs	r3, #3
 800f426:	e063      	b.n	800f4f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	f003 0304 	and.w	r3, r3, #4
 800f432:	2b04      	cmp	r3, #4
 800f434:	d149      	bne.n	800f4ca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f436:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f43a:	9300      	str	r3, [sp, #0]
 800f43c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f43e:	2200      	movs	r2, #0
 800f440:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f444:	6878      	ldr	r0, [r7, #4]
 800f446:	f000 f857 	bl	800f4f8 <UART_WaitOnFlagUntilTimeout>
 800f44a:	4603      	mov	r3, r0
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d03c      	beq.n	800f4ca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f458:	e853 3f00 	ldrex	r3, [r3]
 800f45c:	623b      	str	r3, [r7, #32]
   return(result);
 800f45e:	6a3b      	ldr	r3, [r7, #32]
 800f460:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f464:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	461a      	mov	r2, r3
 800f46c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f46e:	633b      	str	r3, [r7, #48]	; 0x30
 800f470:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f472:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f476:	e841 2300 	strex	r3, r2, [r1]
 800f47a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d1e6      	bne.n	800f450 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	3308      	adds	r3, #8
 800f488:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f48a:	693b      	ldr	r3, [r7, #16]
 800f48c:	e853 3f00 	ldrex	r3, [r3]
 800f490:	60fb      	str	r3, [r7, #12]
   return(result);
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	f023 0301 	bic.w	r3, r3, #1
 800f498:	64bb      	str	r3, [r7, #72]	; 0x48
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	3308      	adds	r3, #8
 800f4a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f4a2:	61fa      	str	r2, [r7, #28]
 800f4a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4a6:	69b9      	ldr	r1, [r7, #24]
 800f4a8:	69fa      	ldr	r2, [r7, #28]
 800f4aa:	e841 2300 	strex	r3, r2, [r1]
 800f4ae:	617b      	str	r3, [r7, #20]
   return(result);
 800f4b0:	697b      	ldr	r3, [r7, #20]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d1e5      	bne.n	800f482 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	2220      	movs	r2, #32
 800f4ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f4c6:	2303      	movs	r3, #3
 800f4c8:	e012      	b.n	800f4f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	2220      	movs	r2, #32
 800f4ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	2220      	movs	r2, #32
 800f4d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	2200      	movs	r2, #0
 800f4de:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	2200      	movs	r2, #0
 800f4ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f4ee:	2300      	movs	r3, #0
}
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	3758      	adds	r7, #88	; 0x58
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	bd80      	pop	{r7, pc}

0800f4f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b084      	sub	sp, #16
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	60f8      	str	r0, [r7, #12]
 800f500:	60b9      	str	r1, [r7, #8]
 800f502:	603b      	str	r3, [r7, #0]
 800f504:	4613      	mov	r3, r2
 800f506:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f508:	e049      	b.n	800f59e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f50a:	69bb      	ldr	r3, [r7, #24]
 800f50c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f510:	d045      	beq.n	800f59e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f512:	f7f3 fbe5 	bl	8002ce0 <HAL_GetTick>
 800f516:	4602      	mov	r2, r0
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	1ad3      	subs	r3, r2, r3
 800f51c:	69ba      	ldr	r2, [r7, #24]
 800f51e:	429a      	cmp	r2, r3
 800f520:	d302      	bcc.n	800f528 <UART_WaitOnFlagUntilTimeout+0x30>
 800f522:	69bb      	ldr	r3, [r7, #24]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d101      	bne.n	800f52c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f528:	2303      	movs	r3, #3
 800f52a:	e048      	b.n	800f5be <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	f003 0304 	and.w	r3, r3, #4
 800f536:	2b00      	cmp	r3, #0
 800f538:	d031      	beq.n	800f59e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	69db      	ldr	r3, [r3, #28]
 800f540:	f003 0308 	and.w	r3, r3, #8
 800f544:	2b08      	cmp	r3, #8
 800f546:	d110      	bne.n	800f56a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	2208      	movs	r2, #8
 800f54e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800f550:	68f8      	ldr	r0, [r7, #12]
 800f552:	f000 f921 	bl	800f798 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	2208      	movs	r2, #8
 800f55a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	2200      	movs	r2, #0
 800f562:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800f566:	2301      	movs	r3, #1
 800f568:	e029      	b.n	800f5be <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	69db      	ldr	r3, [r3, #28]
 800f570:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f574:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f578:	d111      	bne.n	800f59e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f582:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f584:	68f8      	ldr	r0, [r7, #12]
 800f586:	f000 f907 	bl	800f798 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	2220      	movs	r2, #32
 800f58e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	2200      	movs	r2, #0
 800f596:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f59a:	2303      	movs	r3, #3
 800f59c:	e00f      	b.n	800f5be <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	69da      	ldr	r2, [r3, #28]
 800f5a4:	68bb      	ldr	r3, [r7, #8]
 800f5a6:	4013      	ands	r3, r2
 800f5a8:	68ba      	ldr	r2, [r7, #8]
 800f5aa:	429a      	cmp	r2, r3
 800f5ac:	bf0c      	ite	eq
 800f5ae:	2301      	moveq	r3, #1
 800f5b0:	2300      	movne	r3, #0
 800f5b2:	b2db      	uxtb	r3, r3
 800f5b4:	461a      	mov	r2, r3
 800f5b6:	79fb      	ldrb	r3, [r7, #7]
 800f5b8:	429a      	cmp	r2, r3
 800f5ba:	d0a6      	beq.n	800f50a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f5bc:	2300      	movs	r3, #0
}
 800f5be:	4618      	mov	r0, r3
 800f5c0:	3710      	adds	r7, #16
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}
	...

0800f5c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b096      	sub	sp, #88	; 0x58
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	60f8      	str	r0, [r7, #12]
 800f5d0:	60b9      	str	r1, [r7, #8]
 800f5d2:	4613      	mov	r3, r2
 800f5d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	68ba      	ldr	r2, [r7, #8]
 800f5da:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	88fa      	ldrh	r2, [r7, #6]
 800f5e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	2222      	movs	r2, #34	; 0x22
 800f5f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d02d      	beq.n	800f65a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f604:	4a40      	ldr	r2, [pc, #256]	; (800f708 <UART_Start_Receive_DMA+0x140>)
 800f606:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f60e:	4a3f      	ldr	r2, [pc, #252]	; (800f70c <UART_Start_Receive_DMA+0x144>)
 800f610:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f618:	4a3d      	ldr	r2, [pc, #244]	; (800f710 <UART_Start_Receive_DMA+0x148>)
 800f61a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f622:	2200      	movs	r2, #0
 800f624:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	3324      	adds	r3, #36	; 0x24
 800f632:	4619      	mov	r1, r3
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f638:	461a      	mov	r2, r3
 800f63a:	88fb      	ldrh	r3, [r7, #6]
 800f63c:	f7f5 fd78 	bl	8005130 <HAL_DMA_Start_IT>
 800f640:	4603      	mov	r3, r0
 800f642:	2b00      	cmp	r3, #0
 800f644:	d009      	beq.n	800f65a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	2210      	movs	r2, #16
 800f64a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	2220      	movs	r2, #32
 800f652:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800f656:	2301      	movs	r3, #1
 800f658:	e051      	b.n	800f6fe <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	691b      	ldr	r3, [r3, #16]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d018      	beq.n	800f694 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f66a:	e853 3f00 	ldrex	r3, [r3]
 800f66e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f676:	657b      	str	r3, [r7, #84]	; 0x54
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	461a      	mov	r2, r3
 800f67e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f680:	64bb      	str	r3, [r7, #72]	; 0x48
 800f682:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f684:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f686:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f688:	e841 2300 	strex	r3, r2, [r1]
 800f68c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f68e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f690:	2b00      	cmp	r3, #0
 800f692:	d1e6      	bne.n	800f662 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	3308      	adds	r3, #8
 800f69a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f69e:	e853 3f00 	ldrex	r3, [r3]
 800f6a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6a6:	f043 0301 	orr.w	r3, r3, #1
 800f6aa:	653b      	str	r3, [r7, #80]	; 0x50
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	3308      	adds	r3, #8
 800f6b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f6b4:	637a      	str	r2, [r7, #52]	; 0x34
 800f6b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f6ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f6bc:	e841 2300 	strex	r3, r2, [r1]
 800f6c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d1e5      	bne.n	800f694 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	3308      	adds	r3, #8
 800f6ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6d0:	697b      	ldr	r3, [r7, #20]
 800f6d2:	e853 3f00 	ldrex	r3, [r3]
 800f6d6:	613b      	str	r3, [r7, #16]
   return(result);
 800f6d8:	693b      	ldr	r3, [r7, #16]
 800f6da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f6de:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	3308      	adds	r3, #8
 800f6e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f6e8:	623a      	str	r2, [r7, #32]
 800f6ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6ec:	69f9      	ldr	r1, [r7, #28]
 800f6ee:	6a3a      	ldr	r2, [r7, #32]
 800f6f0:	e841 2300 	strex	r3, r2, [r1]
 800f6f4:	61bb      	str	r3, [r7, #24]
   return(result);
 800f6f6:	69bb      	ldr	r3, [r7, #24]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d1e5      	bne.n	800f6c8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800f6fc:	2300      	movs	r3, #0
}
 800f6fe:	4618      	mov	r0, r3
 800f700:	3758      	adds	r7, #88	; 0x58
 800f702:	46bd      	mov	sp, r7
 800f704:	bd80      	pop	{r7, pc}
 800f706:	bf00      	nop
 800f708:	0800f865 	.word	0x0800f865
 800f70c:	0800f98d 	.word	0x0800f98d
 800f710:	0800f9cb 	.word	0x0800f9cb

0800f714 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f714:	b480      	push	{r7}
 800f716:	b08f      	sub	sp, #60	; 0x3c
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f722:	6a3b      	ldr	r3, [r7, #32]
 800f724:	e853 3f00 	ldrex	r3, [r3]
 800f728:	61fb      	str	r3, [r7, #28]
   return(result);
 800f72a:	69fb      	ldr	r3, [r7, #28]
 800f72c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f730:	637b      	str	r3, [r7, #52]	; 0x34
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	461a      	mov	r2, r3
 800f738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f73a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f73c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f73e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f742:	e841 2300 	strex	r3, r2, [r1]
 800f746:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d1e6      	bne.n	800f71c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	3308      	adds	r3, #8
 800f754:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	e853 3f00 	ldrex	r3, [r3]
 800f75c:	60bb      	str	r3, [r7, #8]
   return(result);
 800f75e:	68bb      	ldr	r3, [r7, #8]
 800f760:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f764:	633b      	str	r3, [r7, #48]	; 0x30
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	3308      	adds	r3, #8
 800f76c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f76e:	61ba      	str	r2, [r7, #24]
 800f770:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f772:	6979      	ldr	r1, [r7, #20]
 800f774:	69ba      	ldr	r2, [r7, #24]
 800f776:	e841 2300 	strex	r3, r2, [r1]
 800f77a:	613b      	str	r3, [r7, #16]
   return(result);
 800f77c:	693b      	ldr	r3, [r7, #16]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d1e5      	bne.n	800f74e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	2220      	movs	r2, #32
 800f786:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800f78a:	bf00      	nop
 800f78c:	373c      	adds	r7, #60	; 0x3c
 800f78e:	46bd      	mov	sp, r7
 800f790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f794:	4770      	bx	lr
	...

0800f798 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f798:	b480      	push	{r7}
 800f79a:	b095      	sub	sp, #84	; 0x54
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7a8:	e853 3f00 	ldrex	r3, [r3]
 800f7ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f7b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	461a      	mov	r2, r3
 800f7bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7be:	643b      	str	r3, [r7, #64]	; 0x40
 800f7c0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f7c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f7c6:	e841 2300 	strex	r3, r2, [r1]
 800f7ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d1e6      	bne.n	800f7a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	3308      	adds	r3, #8
 800f7d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7da:	6a3b      	ldr	r3, [r7, #32]
 800f7dc:	e853 3f00 	ldrex	r3, [r3]
 800f7e0:	61fb      	str	r3, [r7, #28]
   return(result);
 800f7e2:	69fa      	ldr	r2, [r7, #28]
 800f7e4:	4b1e      	ldr	r3, [pc, #120]	; (800f860 <UART_EndRxTransfer+0xc8>)
 800f7e6:	4013      	ands	r3, r2
 800f7e8:	64bb      	str	r3, [r7, #72]	; 0x48
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	3308      	adds	r3, #8
 800f7f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f7f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f7f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f7f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7fa:	e841 2300 	strex	r3, r2, [r1]
 800f7fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f802:	2b00      	cmp	r3, #0
 800f804:	d1e5      	bne.n	800f7d2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f80a:	2b01      	cmp	r3, #1
 800f80c:	d118      	bne.n	800f840 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	e853 3f00 	ldrex	r3, [r3]
 800f81a:	60bb      	str	r3, [r7, #8]
   return(result);
 800f81c:	68bb      	ldr	r3, [r7, #8]
 800f81e:	f023 0310 	bic.w	r3, r3, #16
 800f822:	647b      	str	r3, [r7, #68]	; 0x44
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	461a      	mov	r2, r3
 800f82a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f82c:	61bb      	str	r3, [r7, #24]
 800f82e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f830:	6979      	ldr	r1, [r7, #20]
 800f832:	69ba      	ldr	r2, [r7, #24]
 800f834:	e841 2300 	strex	r3, r2, [r1]
 800f838:	613b      	str	r3, [r7, #16]
   return(result);
 800f83a:	693b      	ldr	r3, [r7, #16]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d1e6      	bne.n	800f80e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	2220      	movs	r2, #32
 800f844:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	2200      	movs	r2, #0
 800f84c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	2200      	movs	r2, #0
 800f852:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f854:	bf00      	nop
 800f856:	3754      	adds	r7, #84	; 0x54
 800f858:	46bd      	mov	sp, r7
 800f85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85e:	4770      	bx	lr
 800f860:	effffffe 	.word	0xeffffffe

0800f864 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b09c      	sub	sp, #112	; 0x70
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f870:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	69db      	ldr	r3, [r3, #28]
 800f876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f87a:	d071      	beq.n	800f960 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800f87c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f87e:	2200      	movs	r2, #0
 800f880:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f88a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f88c:	e853 3f00 	ldrex	r3, [r3]
 800f890:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f894:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f898:	66bb      	str	r3, [r7, #104]	; 0x68
 800f89a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	461a      	mov	r2, r3
 800f8a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f8a2:	65bb      	str	r3, [r7, #88]	; 0x58
 800f8a4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f8a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f8aa:	e841 2300 	strex	r3, r2, [r1]
 800f8ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f8b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d1e6      	bne.n	800f884 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f8b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	3308      	adds	r3, #8
 800f8bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8c0:	e853 3f00 	ldrex	r3, [r3]
 800f8c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f8c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8c8:	f023 0301 	bic.w	r3, r3, #1
 800f8cc:	667b      	str	r3, [r7, #100]	; 0x64
 800f8ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	3308      	adds	r3, #8
 800f8d4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f8d6:	647a      	str	r2, [r7, #68]	; 0x44
 800f8d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f8dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f8de:	e841 2300 	strex	r3, r2, [r1]
 800f8e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f8e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d1e5      	bne.n	800f8b6 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f8ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	3308      	adds	r3, #8
 800f8f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8f4:	e853 3f00 	ldrex	r3, [r3]
 800f8f8:	623b      	str	r3, [r7, #32]
   return(result);
 800f8fa:	6a3b      	ldr	r3, [r7, #32]
 800f8fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f900:	663b      	str	r3, [r7, #96]	; 0x60
 800f902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	3308      	adds	r3, #8
 800f908:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f90a:	633a      	str	r2, [r7, #48]	; 0x30
 800f90c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f90e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f912:	e841 2300 	strex	r3, r2, [r1]
 800f916:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d1e5      	bne.n	800f8ea <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f91e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f920:	2220      	movs	r2, #32
 800f922:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f92a:	2b01      	cmp	r3, #1
 800f92c:	d118      	bne.n	800f960 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f92e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f934:	693b      	ldr	r3, [r7, #16]
 800f936:	e853 3f00 	ldrex	r3, [r3]
 800f93a:	60fb      	str	r3, [r7, #12]
   return(result);
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	f023 0310 	bic.w	r3, r3, #16
 800f942:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	461a      	mov	r2, r3
 800f94a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f94c:	61fb      	str	r3, [r7, #28]
 800f94e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f950:	69b9      	ldr	r1, [r7, #24]
 800f952:	69fa      	ldr	r2, [r7, #28]
 800f954:	e841 2300 	strex	r3, r2, [r1]
 800f958:	617b      	str	r3, [r7, #20]
   return(result);
 800f95a:	697b      	ldr	r3, [r7, #20]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d1e6      	bne.n	800f92e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f962:	2200      	movs	r2, #0
 800f964:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f968:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f96a:	2b01      	cmp	r3, #1
 800f96c:	d107      	bne.n	800f97e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f96e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f970:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f974:	4619      	mov	r1, r3
 800f976:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f978:	f7fe fefe 	bl	800e778 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f97c:	e002      	b.n	800f984 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800f97e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f980:	f7f1 fd66 	bl	8001450 <HAL_UART_RxCpltCallback>
}
 800f984:	bf00      	nop
 800f986:	3770      	adds	r7, #112	; 0x70
 800f988:	46bd      	mov	sp, r7
 800f98a:	bd80      	pop	{r7, pc}

0800f98c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b084      	sub	sp, #16
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f998:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	2201      	movs	r2, #1
 800f99e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9a4:	2b01      	cmp	r3, #1
 800f9a6:	d109      	bne.n	800f9bc <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f9ae:	085b      	lsrs	r3, r3, #1
 800f9b0:	b29b      	uxth	r3, r3
 800f9b2:	4619      	mov	r1, r3
 800f9b4:	68f8      	ldr	r0, [r7, #12]
 800f9b6:	f7fe fedf 	bl	800e778 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f9ba:	e002      	b.n	800f9c2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800f9bc:	68f8      	ldr	r0, [r7, #12]
 800f9be:	f7fe fed1 	bl	800e764 <HAL_UART_RxHalfCpltCallback>
}
 800f9c2:	bf00      	nop
 800f9c4:	3710      	adds	r7, #16
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	bd80      	pop	{r7, pc}

0800f9ca <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f9ca:	b580      	push	{r7, lr}
 800f9cc:	b086      	sub	sp, #24
 800f9ce:	af00      	add	r7, sp, #0
 800f9d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9d6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f9d8:	697b      	ldr	r3, [r7, #20]
 800f9da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f9de:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f9e0:	697b      	ldr	r3, [r7, #20]
 800f9e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f9e6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f9e8:	697b      	ldr	r3, [r7, #20]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	689b      	ldr	r3, [r3, #8]
 800f9ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f9f2:	2b80      	cmp	r3, #128	; 0x80
 800f9f4:	d109      	bne.n	800fa0a <UART_DMAError+0x40>
 800f9f6:	693b      	ldr	r3, [r7, #16]
 800f9f8:	2b21      	cmp	r3, #33	; 0x21
 800f9fa:	d106      	bne.n	800fa0a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f9fc:	697b      	ldr	r3, [r7, #20]
 800f9fe:	2200      	movs	r2, #0
 800fa00:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800fa04:	6978      	ldr	r0, [r7, #20]
 800fa06:	f7ff fe85 	bl	800f714 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fa0a:	697b      	ldr	r3, [r7, #20]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	689b      	ldr	r3, [r3, #8]
 800fa10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa14:	2b40      	cmp	r3, #64	; 0x40
 800fa16:	d109      	bne.n	800fa2c <UART_DMAError+0x62>
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	2b22      	cmp	r3, #34	; 0x22
 800fa1c:	d106      	bne.n	800fa2c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800fa1e:	697b      	ldr	r3, [r7, #20]
 800fa20:	2200      	movs	r2, #0
 800fa22:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800fa26:	6978      	ldr	r0, [r7, #20]
 800fa28:	f7ff feb6 	bl	800f798 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fa2c:	697b      	ldr	r3, [r7, #20]
 800fa2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa32:	f043 0210 	orr.w	r2, r3, #16
 800fa36:	697b      	ldr	r3, [r7, #20]
 800fa38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fa3c:	6978      	ldr	r0, [r7, #20]
 800fa3e:	f7f1 fda9 	bl	8001594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fa42:	bf00      	nop
 800fa44:	3718      	adds	r7, #24
 800fa46:	46bd      	mov	sp, r7
 800fa48:	bd80      	pop	{r7, pc}

0800fa4a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fa4a:	b580      	push	{r7, lr}
 800fa4c:	b084      	sub	sp, #16
 800fa4e:	af00      	add	r7, sp, #0
 800fa50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	2200      	movs	r2, #0
 800fa64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fa68:	68f8      	ldr	r0, [r7, #12]
 800fa6a:	f7f1 fd93 	bl	8001594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fa6e:	bf00      	nop
 800fa70:	3710      	adds	r7, #16
 800fa72:	46bd      	mov	sp, r7
 800fa74:	bd80      	pop	{r7, pc}

0800fa76 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fa76:	b580      	push	{r7, lr}
 800fa78:	b088      	sub	sp, #32
 800fa7a:	af00      	add	r7, sp, #0
 800fa7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	e853 3f00 	ldrex	r3, [r3]
 800fa8a:	60bb      	str	r3, [r7, #8]
   return(result);
 800fa8c:	68bb      	ldr	r3, [r7, #8]
 800fa8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa92:	61fb      	str	r3, [r7, #28]
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	461a      	mov	r2, r3
 800fa9a:	69fb      	ldr	r3, [r7, #28]
 800fa9c:	61bb      	str	r3, [r7, #24]
 800fa9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faa0:	6979      	ldr	r1, [r7, #20]
 800faa2:	69ba      	ldr	r2, [r7, #24]
 800faa4:	e841 2300 	strex	r3, r2, [r1]
 800faa8:	613b      	str	r3, [r7, #16]
   return(result);
 800faaa:	693b      	ldr	r3, [r7, #16]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d1e6      	bne.n	800fa7e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	2220      	movs	r2, #32
 800fab4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	2200      	movs	r2, #0
 800fabc:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fabe:	6878      	ldr	r0, [r7, #4]
 800fac0:	f7fe fe46 	bl	800e750 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fac4:	bf00      	nop
 800fac6:	3720      	adds	r7, #32
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}

0800facc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800facc:	b480      	push	{r7}
 800face:	b083      	sub	sp, #12
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fad4:	bf00      	nop
 800fad6:	370c      	adds	r7, #12
 800fad8:	46bd      	mov	sp, r7
 800fada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fade:	4770      	bx	lr

0800fae0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fae0:	b480      	push	{r7}
 800fae2:	b083      	sub	sp, #12
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fae8:	bf00      	nop
 800faea:	370c      	adds	r7, #12
 800faec:	46bd      	mov	sp, r7
 800faee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf2:	4770      	bx	lr

0800faf4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800faf4:	b480      	push	{r7}
 800faf6:	b083      	sub	sp, #12
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fafc:	bf00      	nop
 800fafe:	370c      	adds	r7, #12
 800fb00:	46bd      	mov	sp, r7
 800fb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb06:	4770      	bx	lr

0800fb08 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fb08:	b480      	push	{r7}
 800fb0a:	b085      	sub	sp, #20
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fb16:	2b01      	cmp	r3, #1
 800fb18:	d101      	bne.n	800fb1e <HAL_UARTEx_DisableFifoMode+0x16>
 800fb1a:	2302      	movs	r3, #2
 800fb1c:	e027      	b.n	800fb6e <HAL_UARTEx_DisableFifoMode+0x66>
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	2201      	movs	r2, #1
 800fb22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	2224      	movs	r2, #36	; 0x24
 800fb2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	681a      	ldr	r2, [r3, #0]
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	f022 0201 	bic.w	r2, r2, #1
 800fb44:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fb4c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	2200      	movs	r2, #0
 800fb52:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	68fa      	ldr	r2, [r7, #12]
 800fb5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	2220      	movs	r2, #32
 800fb60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	2200      	movs	r2, #0
 800fb68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fb6c:	2300      	movs	r3, #0
}
 800fb6e:	4618      	mov	r0, r3
 800fb70:	3714      	adds	r7, #20
 800fb72:	46bd      	mov	sp, r7
 800fb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb78:	4770      	bx	lr

0800fb7a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fb7a:	b580      	push	{r7, lr}
 800fb7c:	b084      	sub	sp, #16
 800fb7e:	af00      	add	r7, sp, #0
 800fb80:	6078      	str	r0, [r7, #4]
 800fb82:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fb8a:	2b01      	cmp	r3, #1
 800fb8c:	d101      	bne.n	800fb92 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fb8e:	2302      	movs	r3, #2
 800fb90:	e02d      	b.n	800fbee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	2201      	movs	r2, #1
 800fb96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	2224      	movs	r2, #36	; 0x24
 800fb9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	681a      	ldr	r2, [r3, #0]
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	f022 0201 	bic.w	r2, r2, #1
 800fbb8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	689b      	ldr	r3, [r3, #8]
 800fbc0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	683a      	ldr	r2, [r7, #0]
 800fbca:	430a      	orrs	r2, r1
 800fbcc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fbce:	6878      	ldr	r0, [r7, #4]
 800fbd0:	f000 f850 	bl	800fc74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	68fa      	ldr	r2, [r7, #12]
 800fbda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	2220      	movs	r2, #32
 800fbe0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fbec:	2300      	movs	r3, #0
}
 800fbee:	4618      	mov	r0, r3
 800fbf0:	3710      	adds	r7, #16
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	bd80      	pop	{r7, pc}

0800fbf6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fbf6:	b580      	push	{r7, lr}
 800fbf8:	b084      	sub	sp, #16
 800fbfa:	af00      	add	r7, sp, #0
 800fbfc:	6078      	str	r0, [r7, #4]
 800fbfe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fc06:	2b01      	cmp	r3, #1
 800fc08:	d101      	bne.n	800fc0e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fc0a:	2302      	movs	r3, #2
 800fc0c:	e02d      	b.n	800fc6a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	2201      	movs	r2, #1
 800fc12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	2224      	movs	r2, #36	; 0x24
 800fc1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	681a      	ldr	r2, [r3, #0]
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	f022 0201 	bic.w	r2, r2, #1
 800fc34:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	689b      	ldr	r3, [r3, #8]
 800fc3c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	683a      	ldr	r2, [r7, #0]
 800fc46:	430a      	orrs	r2, r1
 800fc48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fc4a:	6878      	ldr	r0, [r7, #4]
 800fc4c:	f000 f812 	bl	800fc74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	68fa      	ldr	r2, [r7, #12]
 800fc56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	2220      	movs	r2, #32
 800fc5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	2200      	movs	r2, #0
 800fc64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fc68:	2300      	movs	r3, #0
}
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	3710      	adds	r7, #16
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	bd80      	pop	{r7, pc}
	...

0800fc74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fc74:	b480      	push	{r7}
 800fc76:	b085      	sub	sp, #20
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d108      	bne.n	800fc96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	2201      	movs	r2, #1
 800fc88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	2201      	movs	r2, #1
 800fc90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fc94:	e031      	b.n	800fcfa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fc96:	2310      	movs	r3, #16
 800fc98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fc9a:	2310      	movs	r3, #16
 800fc9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	689b      	ldr	r3, [r3, #8]
 800fca4:	0e5b      	lsrs	r3, r3, #25
 800fca6:	b2db      	uxtb	r3, r3
 800fca8:	f003 0307 	and.w	r3, r3, #7
 800fcac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	689b      	ldr	r3, [r3, #8]
 800fcb4:	0f5b      	lsrs	r3, r3, #29
 800fcb6:	b2db      	uxtb	r3, r3
 800fcb8:	f003 0307 	and.w	r3, r3, #7
 800fcbc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fcbe:	7bbb      	ldrb	r3, [r7, #14]
 800fcc0:	7b3a      	ldrb	r2, [r7, #12]
 800fcc2:	4911      	ldr	r1, [pc, #68]	; (800fd08 <UARTEx_SetNbDataToProcess+0x94>)
 800fcc4:	5c8a      	ldrb	r2, [r1, r2]
 800fcc6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fcca:	7b3a      	ldrb	r2, [r7, #12]
 800fccc:	490f      	ldr	r1, [pc, #60]	; (800fd0c <UARTEx_SetNbDataToProcess+0x98>)
 800fcce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fcd0:	fb93 f3f2 	sdiv	r3, r3, r2
 800fcd4:	b29a      	uxth	r2, r3
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fcdc:	7bfb      	ldrb	r3, [r7, #15]
 800fcde:	7b7a      	ldrb	r2, [r7, #13]
 800fce0:	4909      	ldr	r1, [pc, #36]	; (800fd08 <UARTEx_SetNbDataToProcess+0x94>)
 800fce2:	5c8a      	ldrb	r2, [r1, r2]
 800fce4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fce8:	7b7a      	ldrb	r2, [r7, #13]
 800fcea:	4908      	ldr	r1, [pc, #32]	; (800fd0c <UARTEx_SetNbDataToProcess+0x98>)
 800fcec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fcee:	fb93 f3f2 	sdiv	r3, r3, r2
 800fcf2:	b29a      	uxth	r2, r3
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800fcfa:	bf00      	nop
 800fcfc:	3714      	adds	r7, #20
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd04:	4770      	bx	lr
 800fd06:	bf00      	nop
 800fd08:	08012aa8 	.word	0x08012aa8
 800fd0c:	08012ab0 	.word	0x08012ab0

0800fd10 <__cvt>:
 800fd10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd12:	ed2d 8b02 	vpush	{d8}
 800fd16:	eeb0 8b40 	vmov.f64	d8, d0
 800fd1a:	b085      	sub	sp, #20
 800fd1c:	4617      	mov	r7, r2
 800fd1e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800fd20:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800fd22:	ee18 2a90 	vmov	r2, s17
 800fd26:	f025 0520 	bic.w	r5, r5, #32
 800fd2a:	2a00      	cmp	r2, #0
 800fd2c:	bfb6      	itet	lt
 800fd2e:	222d      	movlt	r2, #45	; 0x2d
 800fd30:	2200      	movge	r2, #0
 800fd32:	eeb1 8b40 	vneglt.f64	d8, d0
 800fd36:	2d46      	cmp	r5, #70	; 0x46
 800fd38:	460c      	mov	r4, r1
 800fd3a:	701a      	strb	r2, [r3, #0]
 800fd3c:	d004      	beq.n	800fd48 <__cvt+0x38>
 800fd3e:	2d45      	cmp	r5, #69	; 0x45
 800fd40:	d100      	bne.n	800fd44 <__cvt+0x34>
 800fd42:	3401      	adds	r4, #1
 800fd44:	2102      	movs	r1, #2
 800fd46:	e000      	b.n	800fd4a <__cvt+0x3a>
 800fd48:	2103      	movs	r1, #3
 800fd4a:	ab03      	add	r3, sp, #12
 800fd4c:	9301      	str	r3, [sp, #4]
 800fd4e:	ab02      	add	r3, sp, #8
 800fd50:	9300      	str	r3, [sp, #0]
 800fd52:	4622      	mov	r2, r4
 800fd54:	4633      	mov	r3, r6
 800fd56:	eeb0 0b48 	vmov.f64	d0, d8
 800fd5a:	f000 fe51 	bl	8010a00 <_dtoa_r>
 800fd5e:	2d47      	cmp	r5, #71	; 0x47
 800fd60:	d101      	bne.n	800fd66 <__cvt+0x56>
 800fd62:	07fb      	lsls	r3, r7, #31
 800fd64:	d51a      	bpl.n	800fd9c <__cvt+0x8c>
 800fd66:	2d46      	cmp	r5, #70	; 0x46
 800fd68:	eb00 0204 	add.w	r2, r0, r4
 800fd6c:	d10c      	bne.n	800fd88 <__cvt+0x78>
 800fd6e:	7803      	ldrb	r3, [r0, #0]
 800fd70:	2b30      	cmp	r3, #48	; 0x30
 800fd72:	d107      	bne.n	800fd84 <__cvt+0x74>
 800fd74:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fd78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd7c:	bf1c      	itt	ne
 800fd7e:	f1c4 0401 	rsbne	r4, r4, #1
 800fd82:	6034      	strne	r4, [r6, #0]
 800fd84:	6833      	ldr	r3, [r6, #0]
 800fd86:	441a      	add	r2, r3
 800fd88:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fd8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd90:	bf08      	it	eq
 800fd92:	9203      	streq	r2, [sp, #12]
 800fd94:	2130      	movs	r1, #48	; 0x30
 800fd96:	9b03      	ldr	r3, [sp, #12]
 800fd98:	4293      	cmp	r3, r2
 800fd9a:	d307      	bcc.n	800fdac <__cvt+0x9c>
 800fd9c:	9b03      	ldr	r3, [sp, #12]
 800fd9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fda0:	1a1b      	subs	r3, r3, r0
 800fda2:	6013      	str	r3, [r2, #0]
 800fda4:	b005      	add	sp, #20
 800fda6:	ecbd 8b02 	vpop	{d8}
 800fdaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdac:	1c5c      	adds	r4, r3, #1
 800fdae:	9403      	str	r4, [sp, #12]
 800fdb0:	7019      	strb	r1, [r3, #0]
 800fdb2:	e7f0      	b.n	800fd96 <__cvt+0x86>

0800fdb4 <__exponent>:
 800fdb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	2900      	cmp	r1, #0
 800fdba:	bfb8      	it	lt
 800fdbc:	4249      	neglt	r1, r1
 800fdbe:	f803 2b02 	strb.w	r2, [r3], #2
 800fdc2:	bfb4      	ite	lt
 800fdc4:	222d      	movlt	r2, #45	; 0x2d
 800fdc6:	222b      	movge	r2, #43	; 0x2b
 800fdc8:	2909      	cmp	r1, #9
 800fdca:	7042      	strb	r2, [r0, #1]
 800fdcc:	dd2a      	ble.n	800fe24 <__exponent+0x70>
 800fdce:	f10d 0207 	add.w	r2, sp, #7
 800fdd2:	4617      	mov	r7, r2
 800fdd4:	260a      	movs	r6, #10
 800fdd6:	4694      	mov	ip, r2
 800fdd8:	fb91 f5f6 	sdiv	r5, r1, r6
 800fddc:	fb06 1415 	mls	r4, r6, r5, r1
 800fde0:	3430      	adds	r4, #48	; 0x30
 800fde2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800fde6:	460c      	mov	r4, r1
 800fde8:	2c63      	cmp	r4, #99	; 0x63
 800fdea:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800fdee:	4629      	mov	r1, r5
 800fdf0:	dcf1      	bgt.n	800fdd6 <__exponent+0x22>
 800fdf2:	3130      	adds	r1, #48	; 0x30
 800fdf4:	f1ac 0402 	sub.w	r4, ip, #2
 800fdf8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800fdfc:	1c41      	adds	r1, r0, #1
 800fdfe:	4622      	mov	r2, r4
 800fe00:	42ba      	cmp	r2, r7
 800fe02:	d30a      	bcc.n	800fe1a <__exponent+0x66>
 800fe04:	f10d 0209 	add.w	r2, sp, #9
 800fe08:	eba2 020c 	sub.w	r2, r2, ip
 800fe0c:	42bc      	cmp	r4, r7
 800fe0e:	bf88      	it	hi
 800fe10:	2200      	movhi	r2, #0
 800fe12:	4413      	add	r3, r2
 800fe14:	1a18      	subs	r0, r3, r0
 800fe16:	b003      	add	sp, #12
 800fe18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe1a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800fe1e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800fe22:	e7ed      	b.n	800fe00 <__exponent+0x4c>
 800fe24:	2330      	movs	r3, #48	; 0x30
 800fe26:	3130      	adds	r1, #48	; 0x30
 800fe28:	7083      	strb	r3, [r0, #2]
 800fe2a:	70c1      	strb	r1, [r0, #3]
 800fe2c:	1d03      	adds	r3, r0, #4
 800fe2e:	e7f1      	b.n	800fe14 <__exponent+0x60>

0800fe30 <_printf_float>:
 800fe30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe34:	b08b      	sub	sp, #44	; 0x2c
 800fe36:	460c      	mov	r4, r1
 800fe38:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800fe3c:	4616      	mov	r6, r2
 800fe3e:	461f      	mov	r7, r3
 800fe40:	4605      	mov	r5, r0
 800fe42:	f000 fccd 	bl	80107e0 <_localeconv_r>
 800fe46:	f8d0 b000 	ldr.w	fp, [r0]
 800fe4a:	4658      	mov	r0, fp
 800fe4c:	f7f0 fa98 	bl	8000380 <strlen>
 800fe50:	2300      	movs	r3, #0
 800fe52:	9308      	str	r3, [sp, #32]
 800fe54:	f8d8 3000 	ldr.w	r3, [r8]
 800fe58:	f894 9018 	ldrb.w	r9, [r4, #24]
 800fe5c:	6822      	ldr	r2, [r4, #0]
 800fe5e:	3307      	adds	r3, #7
 800fe60:	f023 0307 	bic.w	r3, r3, #7
 800fe64:	f103 0108 	add.w	r1, r3, #8
 800fe68:	f8c8 1000 	str.w	r1, [r8]
 800fe6c:	ed93 0b00 	vldr	d0, [r3]
 800fe70:	ed9f 6b97 	vldr	d6, [pc, #604]	; 80100d0 <_printf_float+0x2a0>
 800fe74:	eeb0 7bc0 	vabs.f64	d7, d0
 800fe78:	eeb4 7b46 	vcmp.f64	d7, d6
 800fe7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe80:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800fe84:	4682      	mov	sl, r0
 800fe86:	dd24      	ble.n	800fed2 <_printf_float+0xa2>
 800fe88:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800fe8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe90:	d502      	bpl.n	800fe98 <_printf_float+0x68>
 800fe92:	232d      	movs	r3, #45	; 0x2d
 800fe94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe98:	498f      	ldr	r1, [pc, #572]	; (80100d8 <_printf_float+0x2a8>)
 800fe9a:	4b90      	ldr	r3, [pc, #576]	; (80100dc <_printf_float+0x2ac>)
 800fe9c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800fea0:	bf94      	ite	ls
 800fea2:	4688      	movls	r8, r1
 800fea4:	4698      	movhi	r8, r3
 800fea6:	2303      	movs	r3, #3
 800fea8:	6123      	str	r3, [r4, #16]
 800feaa:	f022 0204 	bic.w	r2, r2, #4
 800feae:	2300      	movs	r3, #0
 800feb0:	6022      	str	r2, [r4, #0]
 800feb2:	9304      	str	r3, [sp, #16]
 800feb4:	9700      	str	r7, [sp, #0]
 800feb6:	4633      	mov	r3, r6
 800feb8:	aa09      	add	r2, sp, #36	; 0x24
 800feba:	4621      	mov	r1, r4
 800febc:	4628      	mov	r0, r5
 800febe:	f000 f9d1 	bl	8010264 <_printf_common>
 800fec2:	3001      	adds	r0, #1
 800fec4:	f040 808a 	bne.w	800ffdc <_printf_float+0x1ac>
 800fec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fecc:	b00b      	add	sp, #44	; 0x2c
 800fece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fed2:	eeb4 0b40 	vcmp.f64	d0, d0
 800fed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feda:	d709      	bvc.n	800fef0 <_printf_float+0xc0>
 800fedc:	ee10 3a90 	vmov	r3, s1
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	bfbc      	itt	lt
 800fee4:	232d      	movlt	r3, #45	; 0x2d
 800fee6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800feea:	497d      	ldr	r1, [pc, #500]	; (80100e0 <_printf_float+0x2b0>)
 800feec:	4b7d      	ldr	r3, [pc, #500]	; (80100e4 <_printf_float+0x2b4>)
 800feee:	e7d5      	b.n	800fe9c <_printf_float+0x6c>
 800fef0:	6863      	ldr	r3, [r4, #4]
 800fef2:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800fef6:	9104      	str	r1, [sp, #16]
 800fef8:	1c59      	adds	r1, r3, #1
 800fefa:	d13c      	bne.n	800ff76 <_printf_float+0x146>
 800fefc:	2306      	movs	r3, #6
 800fefe:	6063      	str	r3, [r4, #4]
 800ff00:	2300      	movs	r3, #0
 800ff02:	9303      	str	r3, [sp, #12]
 800ff04:	ab08      	add	r3, sp, #32
 800ff06:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800ff0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ff0e:	ab07      	add	r3, sp, #28
 800ff10:	6861      	ldr	r1, [r4, #4]
 800ff12:	9300      	str	r3, [sp, #0]
 800ff14:	6022      	str	r2, [r4, #0]
 800ff16:	f10d 031b 	add.w	r3, sp, #27
 800ff1a:	4628      	mov	r0, r5
 800ff1c:	f7ff fef8 	bl	800fd10 <__cvt>
 800ff20:	9b04      	ldr	r3, [sp, #16]
 800ff22:	9907      	ldr	r1, [sp, #28]
 800ff24:	2b47      	cmp	r3, #71	; 0x47
 800ff26:	4680      	mov	r8, r0
 800ff28:	d108      	bne.n	800ff3c <_printf_float+0x10c>
 800ff2a:	1cc8      	adds	r0, r1, #3
 800ff2c:	db02      	blt.n	800ff34 <_printf_float+0x104>
 800ff2e:	6863      	ldr	r3, [r4, #4]
 800ff30:	4299      	cmp	r1, r3
 800ff32:	dd41      	ble.n	800ffb8 <_printf_float+0x188>
 800ff34:	f1a9 0902 	sub.w	r9, r9, #2
 800ff38:	fa5f f989 	uxtb.w	r9, r9
 800ff3c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ff40:	d820      	bhi.n	800ff84 <_printf_float+0x154>
 800ff42:	3901      	subs	r1, #1
 800ff44:	464a      	mov	r2, r9
 800ff46:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ff4a:	9107      	str	r1, [sp, #28]
 800ff4c:	f7ff ff32 	bl	800fdb4 <__exponent>
 800ff50:	9a08      	ldr	r2, [sp, #32]
 800ff52:	9004      	str	r0, [sp, #16]
 800ff54:	1813      	adds	r3, r2, r0
 800ff56:	2a01      	cmp	r2, #1
 800ff58:	6123      	str	r3, [r4, #16]
 800ff5a:	dc02      	bgt.n	800ff62 <_printf_float+0x132>
 800ff5c:	6822      	ldr	r2, [r4, #0]
 800ff5e:	07d2      	lsls	r2, r2, #31
 800ff60:	d501      	bpl.n	800ff66 <_printf_float+0x136>
 800ff62:	3301      	adds	r3, #1
 800ff64:	6123      	str	r3, [r4, #16]
 800ff66:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d0a2      	beq.n	800feb4 <_printf_float+0x84>
 800ff6e:	232d      	movs	r3, #45	; 0x2d
 800ff70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff74:	e79e      	b.n	800feb4 <_printf_float+0x84>
 800ff76:	9904      	ldr	r1, [sp, #16]
 800ff78:	2947      	cmp	r1, #71	; 0x47
 800ff7a:	d1c1      	bne.n	800ff00 <_printf_float+0xd0>
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d1bf      	bne.n	800ff00 <_printf_float+0xd0>
 800ff80:	2301      	movs	r3, #1
 800ff82:	e7bc      	b.n	800fefe <_printf_float+0xce>
 800ff84:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800ff88:	d118      	bne.n	800ffbc <_printf_float+0x18c>
 800ff8a:	2900      	cmp	r1, #0
 800ff8c:	6863      	ldr	r3, [r4, #4]
 800ff8e:	dd0b      	ble.n	800ffa8 <_printf_float+0x178>
 800ff90:	6121      	str	r1, [r4, #16]
 800ff92:	b913      	cbnz	r3, 800ff9a <_printf_float+0x16a>
 800ff94:	6822      	ldr	r2, [r4, #0]
 800ff96:	07d0      	lsls	r0, r2, #31
 800ff98:	d502      	bpl.n	800ffa0 <_printf_float+0x170>
 800ff9a:	3301      	adds	r3, #1
 800ff9c:	440b      	add	r3, r1
 800ff9e:	6123      	str	r3, [r4, #16]
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	65a1      	str	r1, [r4, #88]	; 0x58
 800ffa4:	9304      	str	r3, [sp, #16]
 800ffa6:	e7de      	b.n	800ff66 <_printf_float+0x136>
 800ffa8:	b913      	cbnz	r3, 800ffb0 <_printf_float+0x180>
 800ffaa:	6822      	ldr	r2, [r4, #0]
 800ffac:	07d2      	lsls	r2, r2, #31
 800ffae:	d501      	bpl.n	800ffb4 <_printf_float+0x184>
 800ffb0:	3302      	adds	r3, #2
 800ffb2:	e7f4      	b.n	800ff9e <_printf_float+0x16e>
 800ffb4:	2301      	movs	r3, #1
 800ffb6:	e7f2      	b.n	800ff9e <_printf_float+0x16e>
 800ffb8:	f04f 0967 	mov.w	r9, #103	; 0x67
 800ffbc:	9b08      	ldr	r3, [sp, #32]
 800ffbe:	4299      	cmp	r1, r3
 800ffc0:	db05      	blt.n	800ffce <_printf_float+0x19e>
 800ffc2:	6823      	ldr	r3, [r4, #0]
 800ffc4:	6121      	str	r1, [r4, #16]
 800ffc6:	07d8      	lsls	r0, r3, #31
 800ffc8:	d5ea      	bpl.n	800ffa0 <_printf_float+0x170>
 800ffca:	1c4b      	adds	r3, r1, #1
 800ffcc:	e7e7      	b.n	800ff9e <_printf_float+0x16e>
 800ffce:	2900      	cmp	r1, #0
 800ffd0:	bfd4      	ite	le
 800ffd2:	f1c1 0202 	rsble	r2, r1, #2
 800ffd6:	2201      	movgt	r2, #1
 800ffd8:	4413      	add	r3, r2
 800ffda:	e7e0      	b.n	800ff9e <_printf_float+0x16e>
 800ffdc:	6823      	ldr	r3, [r4, #0]
 800ffde:	055a      	lsls	r2, r3, #21
 800ffe0:	d407      	bmi.n	800fff2 <_printf_float+0x1c2>
 800ffe2:	6923      	ldr	r3, [r4, #16]
 800ffe4:	4642      	mov	r2, r8
 800ffe6:	4631      	mov	r1, r6
 800ffe8:	4628      	mov	r0, r5
 800ffea:	47b8      	blx	r7
 800ffec:	3001      	adds	r0, #1
 800ffee:	d12a      	bne.n	8010046 <_printf_float+0x216>
 800fff0:	e76a      	b.n	800fec8 <_printf_float+0x98>
 800fff2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800fff6:	f240 80e0 	bls.w	80101ba <_printf_float+0x38a>
 800fffa:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800fffe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010006:	d133      	bne.n	8010070 <_printf_float+0x240>
 8010008:	4a37      	ldr	r2, [pc, #220]	; (80100e8 <_printf_float+0x2b8>)
 801000a:	2301      	movs	r3, #1
 801000c:	4631      	mov	r1, r6
 801000e:	4628      	mov	r0, r5
 8010010:	47b8      	blx	r7
 8010012:	3001      	adds	r0, #1
 8010014:	f43f af58 	beq.w	800fec8 <_printf_float+0x98>
 8010018:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801001c:	429a      	cmp	r2, r3
 801001e:	db02      	blt.n	8010026 <_printf_float+0x1f6>
 8010020:	6823      	ldr	r3, [r4, #0]
 8010022:	07d8      	lsls	r0, r3, #31
 8010024:	d50f      	bpl.n	8010046 <_printf_float+0x216>
 8010026:	4653      	mov	r3, sl
 8010028:	465a      	mov	r2, fp
 801002a:	4631      	mov	r1, r6
 801002c:	4628      	mov	r0, r5
 801002e:	47b8      	blx	r7
 8010030:	3001      	adds	r0, #1
 8010032:	f43f af49 	beq.w	800fec8 <_printf_float+0x98>
 8010036:	f04f 0800 	mov.w	r8, #0
 801003a:	f104 091a 	add.w	r9, r4, #26
 801003e:	9b08      	ldr	r3, [sp, #32]
 8010040:	3b01      	subs	r3, #1
 8010042:	4543      	cmp	r3, r8
 8010044:	dc09      	bgt.n	801005a <_printf_float+0x22a>
 8010046:	6823      	ldr	r3, [r4, #0]
 8010048:	079b      	lsls	r3, r3, #30
 801004a:	f100 8106 	bmi.w	801025a <_printf_float+0x42a>
 801004e:	68e0      	ldr	r0, [r4, #12]
 8010050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010052:	4298      	cmp	r0, r3
 8010054:	bfb8      	it	lt
 8010056:	4618      	movlt	r0, r3
 8010058:	e738      	b.n	800fecc <_printf_float+0x9c>
 801005a:	2301      	movs	r3, #1
 801005c:	464a      	mov	r2, r9
 801005e:	4631      	mov	r1, r6
 8010060:	4628      	mov	r0, r5
 8010062:	47b8      	blx	r7
 8010064:	3001      	adds	r0, #1
 8010066:	f43f af2f 	beq.w	800fec8 <_printf_float+0x98>
 801006a:	f108 0801 	add.w	r8, r8, #1
 801006e:	e7e6      	b.n	801003e <_printf_float+0x20e>
 8010070:	9b07      	ldr	r3, [sp, #28]
 8010072:	2b00      	cmp	r3, #0
 8010074:	dc3a      	bgt.n	80100ec <_printf_float+0x2bc>
 8010076:	4a1c      	ldr	r2, [pc, #112]	; (80100e8 <_printf_float+0x2b8>)
 8010078:	2301      	movs	r3, #1
 801007a:	4631      	mov	r1, r6
 801007c:	4628      	mov	r0, r5
 801007e:	47b8      	blx	r7
 8010080:	3001      	adds	r0, #1
 8010082:	f43f af21 	beq.w	800fec8 <_printf_float+0x98>
 8010086:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801008a:	4313      	orrs	r3, r2
 801008c:	d102      	bne.n	8010094 <_printf_float+0x264>
 801008e:	6823      	ldr	r3, [r4, #0]
 8010090:	07d9      	lsls	r1, r3, #31
 8010092:	d5d8      	bpl.n	8010046 <_printf_float+0x216>
 8010094:	4653      	mov	r3, sl
 8010096:	465a      	mov	r2, fp
 8010098:	4631      	mov	r1, r6
 801009a:	4628      	mov	r0, r5
 801009c:	47b8      	blx	r7
 801009e:	3001      	adds	r0, #1
 80100a0:	f43f af12 	beq.w	800fec8 <_printf_float+0x98>
 80100a4:	f04f 0900 	mov.w	r9, #0
 80100a8:	f104 0a1a 	add.w	sl, r4, #26
 80100ac:	9b07      	ldr	r3, [sp, #28]
 80100ae:	425b      	negs	r3, r3
 80100b0:	454b      	cmp	r3, r9
 80100b2:	dc01      	bgt.n	80100b8 <_printf_float+0x288>
 80100b4:	9b08      	ldr	r3, [sp, #32]
 80100b6:	e795      	b.n	800ffe4 <_printf_float+0x1b4>
 80100b8:	2301      	movs	r3, #1
 80100ba:	4652      	mov	r2, sl
 80100bc:	4631      	mov	r1, r6
 80100be:	4628      	mov	r0, r5
 80100c0:	47b8      	blx	r7
 80100c2:	3001      	adds	r0, #1
 80100c4:	f43f af00 	beq.w	800fec8 <_printf_float+0x98>
 80100c8:	f109 0901 	add.w	r9, r9, #1
 80100cc:	e7ee      	b.n	80100ac <_printf_float+0x27c>
 80100ce:	bf00      	nop
 80100d0:	ffffffff 	.word	0xffffffff
 80100d4:	7fefffff 	.word	0x7fefffff
 80100d8:	08012ab8 	.word	0x08012ab8
 80100dc:	08012abc 	.word	0x08012abc
 80100e0:	08012ac0 	.word	0x08012ac0
 80100e4:	08012ac4 	.word	0x08012ac4
 80100e8:	08012ac8 	.word	0x08012ac8
 80100ec:	9a08      	ldr	r2, [sp, #32]
 80100ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80100f0:	429a      	cmp	r2, r3
 80100f2:	bfa8      	it	ge
 80100f4:	461a      	movge	r2, r3
 80100f6:	2a00      	cmp	r2, #0
 80100f8:	4691      	mov	r9, r2
 80100fa:	dc38      	bgt.n	801016e <_printf_float+0x33e>
 80100fc:	2300      	movs	r3, #0
 80100fe:	9305      	str	r3, [sp, #20]
 8010100:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010104:	f104 021a 	add.w	r2, r4, #26
 8010108:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801010a:	9905      	ldr	r1, [sp, #20]
 801010c:	9304      	str	r3, [sp, #16]
 801010e:	eba3 0309 	sub.w	r3, r3, r9
 8010112:	428b      	cmp	r3, r1
 8010114:	dc33      	bgt.n	801017e <_printf_float+0x34e>
 8010116:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801011a:	429a      	cmp	r2, r3
 801011c:	db3c      	blt.n	8010198 <_printf_float+0x368>
 801011e:	6823      	ldr	r3, [r4, #0]
 8010120:	07da      	lsls	r2, r3, #31
 8010122:	d439      	bmi.n	8010198 <_printf_float+0x368>
 8010124:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8010128:	eba2 0903 	sub.w	r9, r2, r3
 801012c:	9b04      	ldr	r3, [sp, #16]
 801012e:	1ad2      	subs	r2, r2, r3
 8010130:	4591      	cmp	r9, r2
 8010132:	bfa8      	it	ge
 8010134:	4691      	movge	r9, r2
 8010136:	f1b9 0f00 	cmp.w	r9, #0
 801013a:	dc35      	bgt.n	80101a8 <_printf_float+0x378>
 801013c:	f04f 0800 	mov.w	r8, #0
 8010140:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010144:	f104 0a1a 	add.w	sl, r4, #26
 8010148:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801014c:	1a9b      	subs	r3, r3, r2
 801014e:	eba3 0309 	sub.w	r3, r3, r9
 8010152:	4543      	cmp	r3, r8
 8010154:	f77f af77 	ble.w	8010046 <_printf_float+0x216>
 8010158:	2301      	movs	r3, #1
 801015a:	4652      	mov	r2, sl
 801015c:	4631      	mov	r1, r6
 801015e:	4628      	mov	r0, r5
 8010160:	47b8      	blx	r7
 8010162:	3001      	adds	r0, #1
 8010164:	f43f aeb0 	beq.w	800fec8 <_printf_float+0x98>
 8010168:	f108 0801 	add.w	r8, r8, #1
 801016c:	e7ec      	b.n	8010148 <_printf_float+0x318>
 801016e:	4613      	mov	r3, r2
 8010170:	4631      	mov	r1, r6
 8010172:	4642      	mov	r2, r8
 8010174:	4628      	mov	r0, r5
 8010176:	47b8      	blx	r7
 8010178:	3001      	adds	r0, #1
 801017a:	d1bf      	bne.n	80100fc <_printf_float+0x2cc>
 801017c:	e6a4      	b.n	800fec8 <_printf_float+0x98>
 801017e:	2301      	movs	r3, #1
 8010180:	4631      	mov	r1, r6
 8010182:	4628      	mov	r0, r5
 8010184:	9204      	str	r2, [sp, #16]
 8010186:	47b8      	blx	r7
 8010188:	3001      	adds	r0, #1
 801018a:	f43f ae9d 	beq.w	800fec8 <_printf_float+0x98>
 801018e:	9b05      	ldr	r3, [sp, #20]
 8010190:	9a04      	ldr	r2, [sp, #16]
 8010192:	3301      	adds	r3, #1
 8010194:	9305      	str	r3, [sp, #20]
 8010196:	e7b7      	b.n	8010108 <_printf_float+0x2d8>
 8010198:	4653      	mov	r3, sl
 801019a:	465a      	mov	r2, fp
 801019c:	4631      	mov	r1, r6
 801019e:	4628      	mov	r0, r5
 80101a0:	47b8      	blx	r7
 80101a2:	3001      	adds	r0, #1
 80101a4:	d1be      	bne.n	8010124 <_printf_float+0x2f4>
 80101a6:	e68f      	b.n	800fec8 <_printf_float+0x98>
 80101a8:	9a04      	ldr	r2, [sp, #16]
 80101aa:	464b      	mov	r3, r9
 80101ac:	4442      	add	r2, r8
 80101ae:	4631      	mov	r1, r6
 80101b0:	4628      	mov	r0, r5
 80101b2:	47b8      	blx	r7
 80101b4:	3001      	adds	r0, #1
 80101b6:	d1c1      	bne.n	801013c <_printf_float+0x30c>
 80101b8:	e686      	b.n	800fec8 <_printf_float+0x98>
 80101ba:	9a08      	ldr	r2, [sp, #32]
 80101bc:	2a01      	cmp	r2, #1
 80101be:	dc01      	bgt.n	80101c4 <_printf_float+0x394>
 80101c0:	07db      	lsls	r3, r3, #31
 80101c2:	d537      	bpl.n	8010234 <_printf_float+0x404>
 80101c4:	2301      	movs	r3, #1
 80101c6:	4642      	mov	r2, r8
 80101c8:	4631      	mov	r1, r6
 80101ca:	4628      	mov	r0, r5
 80101cc:	47b8      	blx	r7
 80101ce:	3001      	adds	r0, #1
 80101d0:	f43f ae7a 	beq.w	800fec8 <_printf_float+0x98>
 80101d4:	4653      	mov	r3, sl
 80101d6:	465a      	mov	r2, fp
 80101d8:	4631      	mov	r1, r6
 80101da:	4628      	mov	r0, r5
 80101dc:	47b8      	blx	r7
 80101de:	3001      	adds	r0, #1
 80101e0:	f43f ae72 	beq.w	800fec8 <_printf_float+0x98>
 80101e4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80101e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80101ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101f0:	9b08      	ldr	r3, [sp, #32]
 80101f2:	d01a      	beq.n	801022a <_printf_float+0x3fa>
 80101f4:	3b01      	subs	r3, #1
 80101f6:	f108 0201 	add.w	r2, r8, #1
 80101fa:	4631      	mov	r1, r6
 80101fc:	4628      	mov	r0, r5
 80101fe:	47b8      	blx	r7
 8010200:	3001      	adds	r0, #1
 8010202:	d10e      	bne.n	8010222 <_printf_float+0x3f2>
 8010204:	e660      	b.n	800fec8 <_printf_float+0x98>
 8010206:	2301      	movs	r3, #1
 8010208:	464a      	mov	r2, r9
 801020a:	4631      	mov	r1, r6
 801020c:	4628      	mov	r0, r5
 801020e:	47b8      	blx	r7
 8010210:	3001      	adds	r0, #1
 8010212:	f43f ae59 	beq.w	800fec8 <_printf_float+0x98>
 8010216:	f108 0801 	add.w	r8, r8, #1
 801021a:	9b08      	ldr	r3, [sp, #32]
 801021c:	3b01      	subs	r3, #1
 801021e:	4543      	cmp	r3, r8
 8010220:	dcf1      	bgt.n	8010206 <_printf_float+0x3d6>
 8010222:	9b04      	ldr	r3, [sp, #16]
 8010224:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010228:	e6dd      	b.n	800ffe6 <_printf_float+0x1b6>
 801022a:	f04f 0800 	mov.w	r8, #0
 801022e:	f104 091a 	add.w	r9, r4, #26
 8010232:	e7f2      	b.n	801021a <_printf_float+0x3ea>
 8010234:	2301      	movs	r3, #1
 8010236:	4642      	mov	r2, r8
 8010238:	e7df      	b.n	80101fa <_printf_float+0x3ca>
 801023a:	2301      	movs	r3, #1
 801023c:	464a      	mov	r2, r9
 801023e:	4631      	mov	r1, r6
 8010240:	4628      	mov	r0, r5
 8010242:	47b8      	blx	r7
 8010244:	3001      	adds	r0, #1
 8010246:	f43f ae3f 	beq.w	800fec8 <_printf_float+0x98>
 801024a:	f108 0801 	add.w	r8, r8, #1
 801024e:	68e3      	ldr	r3, [r4, #12]
 8010250:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010252:	1a5b      	subs	r3, r3, r1
 8010254:	4543      	cmp	r3, r8
 8010256:	dcf0      	bgt.n	801023a <_printf_float+0x40a>
 8010258:	e6f9      	b.n	801004e <_printf_float+0x21e>
 801025a:	f04f 0800 	mov.w	r8, #0
 801025e:	f104 0919 	add.w	r9, r4, #25
 8010262:	e7f4      	b.n	801024e <_printf_float+0x41e>

08010264 <_printf_common>:
 8010264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010268:	4616      	mov	r6, r2
 801026a:	4699      	mov	r9, r3
 801026c:	688a      	ldr	r2, [r1, #8]
 801026e:	690b      	ldr	r3, [r1, #16]
 8010270:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010274:	4293      	cmp	r3, r2
 8010276:	bfb8      	it	lt
 8010278:	4613      	movlt	r3, r2
 801027a:	6033      	str	r3, [r6, #0]
 801027c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010280:	4607      	mov	r7, r0
 8010282:	460c      	mov	r4, r1
 8010284:	b10a      	cbz	r2, 801028a <_printf_common+0x26>
 8010286:	3301      	adds	r3, #1
 8010288:	6033      	str	r3, [r6, #0]
 801028a:	6823      	ldr	r3, [r4, #0]
 801028c:	0699      	lsls	r1, r3, #26
 801028e:	bf42      	ittt	mi
 8010290:	6833      	ldrmi	r3, [r6, #0]
 8010292:	3302      	addmi	r3, #2
 8010294:	6033      	strmi	r3, [r6, #0]
 8010296:	6825      	ldr	r5, [r4, #0]
 8010298:	f015 0506 	ands.w	r5, r5, #6
 801029c:	d106      	bne.n	80102ac <_printf_common+0x48>
 801029e:	f104 0a19 	add.w	sl, r4, #25
 80102a2:	68e3      	ldr	r3, [r4, #12]
 80102a4:	6832      	ldr	r2, [r6, #0]
 80102a6:	1a9b      	subs	r3, r3, r2
 80102a8:	42ab      	cmp	r3, r5
 80102aa:	dc26      	bgt.n	80102fa <_printf_common+0x96>
 80102ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80102b0:	1e13      	subs	r3, r2, #0
 80102b2:	6822      	ldr	r2, [r4, #0]
 80102b4:	bf18      	it	ne
 80102b6:	2301      	movne	r3, #1
 80102b8:	0692      	lsls	r2, r2, #26
 80102ba:	d42b      	bmi.n	8010314 <_printf_common+0xb0>
 80102bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80102c0:	4649      	mov	r1, r9
 80102c2:	4638      	mov	r0, r7
 80102c4:	47c0      	blx	r8
 80102c6:	3001      	adds	r0, #1
 80102c8:	d01e      	beq.n	8010308 <_printf_common+0xa4>
 80102ca:	6823      	ldr	r3, [r4, #0]
 80102cc:	6922      	ldr	r2, [r4, #16]
 80102ce:	f003 0306 	and.w	r3, r3, #6
 80102d2:	2b04      	cmp	r3, #4
 80102d4:	bf02      	ittt	eq
 80102d6:	68e5      	ldreq	r5, [r4, #12]
 80102d8:	6833      	ldreq	r3, [r6, #0]
 80102da:	1aed      	subeq	r5, r5, r3
 80102dc:	68a3      	ldr	r3, [r4, #8]
 80102de:	bf0c      	ite	eq
 80102e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80102e4:	2500      	movne	r5, #0
 80102e6:	4293      	cmp	r3, r2
 80102e8:	bfc4      	itt	gt
 80102ea:	1a9b      	subgt	r3, r3, r2
 80102ec:	18ed      	addgt	r5, r5, r3
 80102ee:	2600      	movs	r6, #0
 80102f0:	341a      	adds	r4, #26
 80102f2:	42b5      	cmp	r5, r6
 80102f4:	d11a      	bne.n	801032c <_printf_common+0xc8>
 80102f6:	2000      	movs	r0, #0
 80102f8:	e008      	b.n	801030c <_printf_common+0xa8>
 80102fa:	2301      	movs	r3, #1
 80102fc:	4652      	mov	r2, sl
 80102fe:	4649      	mov	r1, r9
 8010300:	4638      	mov	r0, r7
 8010302:	47c0      	blx	r8
 8010304:	3001      	adds	r0, #1
 8010306:	d103      	bne.n	8010310 <_printf_common+0xac>
 8010308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801030c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010310:	3501      	adds	r5, #1
 8010312:	e7c6      	b.n	80102a2 <_printf_common+0x3e>
 8010314:	18e1      	adds	r1, r4, r3
 8010316:	1c5a      	adds	r2, r3, #1
 8010318:	2030      	movs	r0, #48	; 0x30
 801031a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801031e:	4422      	add	r2, r4
 8010320:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010324:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010328:	3302      	adds	r3, #2
 801032a:	e7c7      	b.n	80102bc <_printf_common+0x58>
 801032c:	2301      	movs	r3, #1
 801032e:	4622      	mov	r2, r4
 8010330:	4649      	mov	r1, r9
 8010332:	4638      	mov	r0, r7
 8010334:	47c0      	blx	r8
 8010336:	3001      	adds	r0, #1
 8010338:	d0e6      	beq.n	8010308 <_printf_common+0xa4>
 801033a:	3601      	adds	r6, #1
 801033c:	e7d9      	b.n	80102f2 <_printf_common+0x8e>
	...

08010340 <_printf_i>:
 8010340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010344:	7e0f      	ldrb	r7, [r1, #24]
 8010346:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010348:	2f78      	cmp	r7, #120	; 0x78
 801034a:	4691      	mov	r9, r2
 801034c:	4680      	mov	r8, r0
 801034e:	460c      	mov	r4, r1
 8010350:	469a      	mov	sl, r3
 8010352:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010356:	d807      	bhi.n	8010368 <_printf_i+0x28>
 8010358:	2f62      	cmp	r7, #98	; 0x62
 801035a:	d80a      	bhi.n	8010372 <_printf_i+0x32>
 801035c:	2f00      	cmp	r7, #0
 801035e:	f000 80d4 	beq.w	801050a <_printf_i+0x1ca>
 8010362:	2f58      	cmp	r7, #88	; 0x58
 8010364:	f000 80c0 	beq.w	80104e8 <_printf_i+0x1a8>
 8010368:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801036c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010370:	e03a      	b.n	80103e8 <_printf_i+0xa8>
 8010372:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010376:	2b15      	cmp	r3, #21
 8010378:	d8f6      	bhi.n	8010368 <_printf_i+0x28>
 801037a:	a101      	add	r1, pc, #4	; (adr r1, 8010380 <_printf_i+0x40>)
 801037c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010380:	080103d9 	.word	0x080103d9
 8010384:	080103ed 	.word	0x080103ed
 8010388:	08010369 	.word	0x08010369
 801038c:	08010369 	.word	0x08010369
 8010390:	08010369 	.word	0x08010369
 8010394:	08010369 	.word	0x08010369
 8010398:	080103ed 	.word	0x080103ed
 801039c:	08010369 	.word	0x08010369
 80103a0:	08010369 	.word	0x08010369
 80103a4:	08010369 	.word	0x08010369
 80103a8:	08010369 	.word	0x08010369
 80103ac:	080104f1 	.word	0x080104f1
 80103b0:	08010419 	.word	0x08010419
 80103b4:	080104ab 	.word	0x080104ab
 80103b8:	08010369 	.word	0x08010369
 80103bc:	08010369 	.word	0x08010369
 80103c0:	08010513 	.word	0x08010513
 80103c4:	08010369 	.word	0x08010369
 80103c8:	08010419 	.word	0x08010419
 80103cc:	08010369 	.word	0x08010369
 80103d0:	08010369 	.word	0x08010369
 80103d4:	080104b3 	.word	0x080104b3
 80103d8:	682b      	ldr	r3, [r5, #0]
 80103da:	1d1a      	adds	r2, r3, #4
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	602a      	str	r2, [r5, #0]
 80103e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80103e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80103e8:	2301      	movs	r3, #1
 80103ea:	e09f      	b.n	801052c <_printf_i+0x1ec>
 80103ec:	6820      	ldr	r0, [r4, #0]
 80103ee:	682b      	ldr	r3, [r5, #0]
 80103f0:	0607      	lsls	r7, r0, #24
 80103f2:	f103 0104 	add.w	r1, r3, #4
 80103f6:	6029      	str	r1, [r5, #0]
 80103f8:	d501      	bpl.n	80103fe <_printf_i+0xbe>
 80103fa:	681e      	ldr	r6, [r3, #0]
 80103fc:	e003      	b.n	8010406 <_printf_i+0xc6>
 80103fe:	0646      	lsls	r6, r0, #25
 8010400:	d5fb      	bpl.n	80103fa <_printf_i+0xba>
 8010402:	f9b3 6000 	ldrsh.w	r6, [r3]
 8010406:	2e00      	cmp	r6, #0
 8010408:	da03      	bge.n	8010412 <_printf_i+0xd2>
 801040a:	232d      	movs	r3, #45	; 0x2d
 801040c:	4276      	negs	r6, r6
 801040e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010412:	485a      	ldr	r0, [pc, #360]	; (801057c <_printf_i+0x23c>)
 8010414:	230a      	movs	r3, #10
 8010416:	e012      	b.n	801043e <_printf_i+0xfe>
 8010418:	682b      	ldr	r3, [r5, #0]
 801041a:	6820      	ldr	r0, [r4, #0]
 801041c:	1d19      	adds	r1, r3, #4
 801041e:	6029      	str	r1, [r5, #0]
 8010420:	0605      	lsls	r5, r0, #24
 8010422:	d501      	bpl.n	8010428 <_printf_i+0xe8>
 8010424:	681e      	ldr	r6, [r3, #0]
 8010426:	e002      	b.n	801042e <_printf_i+0xee>
 8010428:	0641      	lsls	r1, r0, #25
 801042a:	d5fb      	bpl.n	8010424 <_printf_i+0xe4>
 801042c:	881e      	ldrh	r6, [r3, #0]
 801042e:	4853      	ldr	r0, [pc, #332]	; (801057c <_printf_i+0x23c>)
 8010430:	2f6f      	cmp	r7, #111	; 0x6f
 8010432:	bf0c      	ite	eq
 8010434:	2308      	moveq	r3, #8
 8010436:	230a      	movne	r3, #10
 8010438:	2100      	movs	r1, #0
 801043a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801043e:	6865      	ldr	r5, [r4, #4]
 8010440:	60a5      	str	r5, [r4, #8]
 8010442:	2d00      	cmp	r5, #0
 8010444:	bfa2      	ittt	ge
 8010446:	6821      	ldrge	r1, [r4, #0]
 8010448:	f021 0104 	bicge.w	r1, r1, #4
 801044c:	6021      	strge	r1, [r4, #0]
 801044e:	b90e      	cbnz	r6, 8010454 <_printf_i+0x114>
 8010450:	2d00      	cmp	r5, #0
 8010452:	d04b      	beq.n	80104ec <_printf_i+0x1ac>
 8010454:	4615      	mov	r5, r2
 8010456:	fbb6 f1f3 	udiv	r1, r6, r3
 801045a:	fb03 6711 	mls	r7, r3, r1, r6
 801045e:	5dc7      	ldrb	r7, [r0, r7]
 8010460:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010464:	4637      	mov	r7, r6
 8010466:	42bb      	cmp	r3, r7
 8010468:	460e      	mov	r6, r1
 801046a:	d9f4      	bls.n	8010456 <_printf_i+0x116>
 801046c:	2b08      	cmp	r3, #8
 801046e:	d10b      	bne.n	8010488 <_printf_i+0x148>
 8010470:	6823      	ldr	r3, [r4, #0]
 8010472:	07de      	lsls	r6, r3, #31
 8010474:	d508      	bpl.n	8010488 <_printf_i+0x148>
 8010476:	6923      	ldr	r3, [r4, #16]
 8010478:	6861      	ldr	r1, [r4, #4]
 801047a:	4299      	cmp	r1, r3
 801047c:	bfde      	ittt	le
 801047e:	2330      	movle	r3, #48	; 0x30
 8010480:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010484:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010488:	1b52      	subs	r2, r2, r5
 801048a:	6122      	str	r2, [r4, #16]
 801048c:	f8cd a000 	str.w	sl, [sp]
 8010490:	464b      	mov	r3, r9
 8010492:	aa03      	add	r2, sp, #12
 8010494:	4621      	mov	r1, r4
 8010496:	4640      	mov	r0, r8
 8010498:	f7ff fee4 	bl	8010264 <_printf_common>
 801049c:	3001      	adds	r0, #1
 801049e:	d14a      	bne.n	8010536 <_printf_i+0x1f6>
 80104a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80104a4:	b004      	add	sp, #16
 80104a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104aa:	6823      	ldr	r3, [r4, #0]
 80104ac:	f043 0320 	orr.w	r3, r3, #32
 80104b0:	6023      	str	r3, [r4, #0]
 80104b2:	4833      	ldr	r0, [pc, #204]	; (8010580 <_printf_i+0x240>)
 80104b4:	2778      	movs	r7, #120	; 0x78
 80104b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80104ba:	6823      	ldr	r3, [r4, #0]
 80104bc:	6829      	ldr	r1, [r5, #0]
 80104be:	061f      	lsls	r7, r3, #24
 80104c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80104c4:	d402      	bmi.n	80104cc <_printf_i+0x18c>
 80104c6:	065f      	lsls	r7, r3, #25
 80104c8:	bf48      	it	mi
 80104ca:	b2b6      	uxthmi	r6, r6
 80104cc:	07df      	lsls	r7, r3, #31
 80104ce:	bf48      	it	mi
 80104d0:	f043 0320 	orrmi.w	r3, r3, #32
 80104d4:	6029      	str	r1, [r5, #0]
 80104d6:	bf48      	it	mi
 80104d8:	6023      	strmi	r3, [r4, #0]
 80104da:	b91e      	cbnz	r6, 80104e4 <_printf_i+0x1a4>
 80104dc:	6823      	ldr	r3, [r4, #0]
 80104de:	f023 0320 	bic.w	r3, r3, #32
 80104e2:	6023      	str	r3, [r4, #0]
 80104e4:	2310      	movs	r3, #16
 80104e6:	e7a7      	b.n	8010438 <_printf_i+0xf8>
 80104e8:	4824      	ldr	r0, [pc, #144]	; (801057c <_printf_i+0x23c>)
 80104ea:	e7e4      	b.n	80104b6 <_printf_i+0x176>
 80104ec:	4615      	mov	r5, r2
 80104ee:	e7bd      	b.n	801046c <_printf_i+0x12c>
 80104f0:	682b      	ldr	r3, [r5, #0]
 80104f2:	6826      	ldr	r6, [r4, #0]
 80104f4:	6961      	ldr	r1, [r4, #20]
 80104f6:	1d18      	adds	r0, r3, #4
 80104f8:	6028      	str	r0, [r5, #0]
 80104fa:	0635      	lsls	r5, r6, #24
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	d501      	bpl.n	8010504 <_printf_i+0x1c4>
 8010500:	6019      	str	r1, [r3, #0]
 8010502:	e002      	b.n	801050a <_printf_i+0x1ca>
 8010504:	0670      	lsls	r0, r6, #25
 8010506:	d5fb      	bpl.n	8010500 <_printf_i+0x1c0>
 8010508:	8019      	strh	r1, [r3, #0]
 801050a:	2300      	movs	r3, #0
 801050c:	6123      	str	r3, [r4, #16]
 801050e:	4615      	mov	r5, r2
 8010510:	e7bc      	b.n	801048c <_printf_i+0x14c>
 8010512:	682b      	ldr	r3, [r5, #0]
 8010514:	1d1a      	adds	r2, r3, #4
 8010516:	602a      	str	r2, [r5, #0]
 8010518:	681d      	ldr	r5, [r3, #0]
 801051a:	6862      	ldr	r2, [r4, #4]
 801051c:	2100      	movs	r1, #0
 801051e:	4628      	mov	r0, r5
 8010520:	f7ef fede 	bl	80002e0 <memchr>
 8010524:	b108      	cbz	r0, 801052a <_printf_i+0x1ea>
 8010526:	1b40      	subs	r0, r0, r5
 8010528:	6060      	str	r0, [r4, #4]
 801052a:	6863      	ldr	r3, [r4, #4]
 801052c:	6123      	str	r3, [r4, #16]
 801052e:	2300      	movs	r3, #0
 8010530:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010534:	e7aa      	b.n	801048c <_printf_i+0x14c>
 8010536:	6923      	ldr	r3, [r4, #16]
 8010538:	462a      	mov	r2, r5
 801053a:	4649      	mov	r1, r9
 801053c:	4640      	mov	r0, r8
 801053e:	47d0      	blx	sl
 8010540:	3001      	adds	r0, #1
 8010542:	d0ad      	beq.n	80104a0 <_printf_i+0x160>
 8010544:	6823      	ldr	r3, [r4, #0]
 8010546:	079b      	lsls	r3, r3, #30
 8010548:	d413      	bmi.n	8010572 <_printf_i+0x232>
 801054a:	68e0      	ldr	r0, [r4, #12]
 801054c:	9b03      	ldr	r3, [sp, #12]
 801054e:	4298      	cmp	r0, r3
 8010550:	bfb8      	it	lt
 8010552:	4618      	movlt	r0, r3
 8010554:	e7a6      	b.n	80104a4 <_printf_i+0x164>
 8010556:	2301      	movs	r3, #1
 8010558:	4632      	mov	r2, r6
 801055a:	4649      	mov	r1, r9
 801055c:	4640      	mov	r0, r8
 801055e:	47d0      	blx	sl
 8010560:	3001      	adds	r0, #1
 8010562:	d09d      	beq.n	80104a0 <_printf_i+0x160>
 8010564:	3501      	adds	r5, #1
 8010566:	68e3      	ldr	r3, [r4, #12]
 8010568:	9903      	ldr	r1, [sp, #12]
 801056a:	1a5b      	subs	r3, r3, r1
 801056c:	42ab      	cmp	r3, r5
 801056e:	dcf2      	bgt.n	8010556 <_printf_i+0x216>
 8010570:	e7eb      	b.n	801054a <_printf_i+0x20a>
 8010572:	2500      	movs	r5, #0
 8010574:	f104 0619 	add.w	r6, r4, #25
 8010578:	e7f5      	b.n	8010566 <_printf_i+0x226>
 801057a:	bf00      	nop
 801057c:	08012aca 	.word	0x08012aca
 8010580:	08012adb 	.word	0x08012adb

08010584 <std>:
 8010584:	2300      	movs	r3, #0
 8010586:	b510      	push	{r4, lr}
 8010588:	4604      	mov	r4, r0
 801058a:	e9c0 3300 	strd	r3, r3, [r0]
 801058e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010592:	6083      	str	r3, [r0, #8]
 8010594:	8181      	strh	r1, [r0, #12]
 8010596:	6643      	str	r3, [r0, #100]	; 0x64
 8010598:	81c2      	strh	r2, [r0, #14]
 801059a:	6183      	str	r3, [r0, #24]
 801059c:	4619      	mov	r1, r3
 801059e:	2208      	movs	r2, #8
 80105a0:	305c      	adds	r0, #92	; 0x5c
 80105a2:	f000 f914 	bl	80107ce <memset>
 80105a6:	4b0d      	ldr	r3, [pc, #52]	; (80105dc <std+0x58>)
 80105a8:	6263      	str	r3, [r4, #36]	; 0x24
 80105aa:	4b0d      	ldr	r3, [pc, #52]	; (80105e0 <std+0x5c>)
 80105ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80105ae:	4b0d      	ldr	r3, [pc, #52]	; (80105e4 <std+0x60>)
 80105b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80105b2:	4b0d      	ldr	r3, [pc, #52]	; (80105e8 <std+0x64>)
 80105b4:	6323      	str	r3, [r4, #48]	; 0x30
 80105b6:	4b0d      	ldr	r3, [pc, #52]	; (80105ec <std+0x68>)
 80105b8:	6224      	str	r4, [r4, #32]
 80105ba:	429c      	cmp	r4, r3
 80105bc:	d006      	beq.n	80105cc <std+0x48>
 80105be:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80105c2:	4294      	cmp	r4, r2
 80105c4:	d002      	beq.n	80105cc <std+0x48>
 80105c6:	33d0      	adds	r3, #208	; 0xd0
 80105c8:	429c      	cmp	r4, r3
 80105ca:	d105      	bne.n	80105d8 <std+0x54>
 80105cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80105d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105d4:	f000 b978 	b.w	80108c8 <__retarget_lock_init_recursive>
 80105d8:	bd10      	pop	{r4, pc}
 80105da:	bf00      	nop
 80105dc:	08010749 	.word	0x08010749
 80105e0:	0801076b 	.word	0x0801076b
 80105e4:	080107a3 	.word	0x080107a3
 80105e8:	080107c7 	.word	0x080107c7
 80105ec:	24000864 	.word	0x24000864

080105f0 <stdio_exit_handler>:
 80105f0:	4a02      	ldr	r2, [pc, #8]	; (80105fc <stdio_exit_handler+0xc>)
 80105f2:	4903      	ldr	r1, [pc, #12]	; (8010600 <stdio_exit_handler+0x10>)
 80105f4:	4803      	ldr	r0, [pc, #12]	; (8010604 <stdio_exit_handler+0x14>)
 80105f6:	f000 b869 	b.w	80106cc <_fwalk_sglue>
 80105fa:	bf00      	nop
 80105fc:	24000014 	.word	0x24000014
 8010600:	0801218d 	.word	0x0801218d
 8010604:	24000020 	.word	0x24000020

08010608 <cleanup_stdio>:
 8010608:	6841      	ldr	r1, [r0, #4]
 801060a:	4b0c      	ldr	r3, [pc, #48]	; (801063c <cleanup_stdio+0x34>)
 801060c:	4299      	cmp	r1, r3
 801060e:	b510      	push	{r4, lr}
 8010610:	4604      	mov	r4, r0
 8010612:	d001      	beq.n	8010618 <cleanup_stdio+0x10>
 8010614:	f001 fdba 	bl	801218c <_fflush_r>
 8010618:	68a1      	ldr	r1, [r4, #8]
 801061a:	4b09      	ldr	r3, [pc, #36]	; (8010640 <cleanup_stdio+0x38>)
 801061c:	4299      	cmp	r1, r3
 801061e:	d002      	beq.n	8010626 <cleanup_stdio+0x1e>
 8010620:	4620      	mov	r0, r4
 8010622:	f001 fdb3 	bl	801218c <_fflush_r>
 8010626:	68e1      	ldr	r1, [r4, #12]
 8010628:	4b06      	ldr	r3, [pc, #24]	; (8010644 <cleanup_stdio+0x3c>)
 801062a:	4299      	cmp	r1, r3
 801062c:	d004      	beq.n	8010638 <cleanup_stdio+0x30>
 801062e:	4620      	mov	r0, r4
 8010630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010634:	f001 bdaa 	b.w	801218c <_fflush_r>
 8010638:	bd10      	pop	{r4, pc}
 801063a:	bf00      	nop
 801063c:	24000864 	.word	0x24000864
 8010640:	240008cc 	.word	0x240008cc
 8010644:	24000934 	.word	0x24000934

08010648 <global_stdio_init.part.0>:
 8010648:	b510      	push	{r4, lr}
 801064a:	4b0b      	ldr	r3, [pc, #44]	; (8010678 <global_stdio_init.part.0+0x30>)
 801064c:	4c0b      	ldr	r4, [pc, #44]	; (801067c <global_stdio_init.part.0+0x34>)
 801064e:	4a0c      	ldr	r2, [pc, #48]	; (8010680 <global_stdio_init.part.0+0x38>)
 8010650:	601a      	str	r2, [r3, #0]
 8010652:	4620      	mov	r0, r4
 8010654:	2200      	movs	r2, #0
 8010656:	2104      	movs	r1, #4
 8010658:	f7ff ff94 	bl	8010584 <std>
 801065c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8010660:	2201      	movs	r2, #1
 8010662:	2109      	movs	r1, #9
 8010664:	f7ff ff8e 	bl	8010584 <std>
 8010668:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801066c:	2202      	movs	r2, #2
 801066e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010672:	2112      	movs	r1, #18
 8010674:	f7ff bf86 	b.w	8010584 <std>
 8010678:	2400099c 	.word	0x2400099c
 801067c:	24000864 	.word	0x24000864
 8010680:	080105f1 	.word	0x080105f1

08010684 <__sfp_lock_acquire>:
 8010684:	4801      	ldr	r0, [pc, #4]	; (801068c <__sfp_lock_acquire+0x8>)
 8010686:	f000 b920 	b.w	80108ca <__retarget_lock_acquire_recursive>
 801068a:	bf00      	nop
 801068c:	240009a5 	.word	0x240009a5

08010690 <__sfp_lock_release>:
 8010690:	4801      	ldr	r0, [pc, #4]	; (8010698 <__sfp_lock_release+0x8>)
 8010692:	f000 b91b 	b.w	80108cc <__retarget_lock_release_recursive>
 8010696:	bf00      	nop
 8010698:	240009a5 	.word	0x240009a5

0801069c <__sinit>:
 801069c:	b510      	push	{r4, lr}
 801069e:	4604      	mov	r4, r0
 80106a0:	f7ff fff0 	bl	8010684 <__sfp_lock_acquire>
 80106a4:	6a23      	ldr	r3, [r4, #32]
 80106a6:	b11b      	cbz	r3, 80106b0 <__sinit+0x14>
 80106a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106ac:	f7ff bff0 	b.w	8010690 <__sfp_lock_release>
 80106b0:	4b04      	ldr	r3, [pc, #16]	; (80106c4 <__sinit+0x28>)
 80106b2:	6223      	str	r3, [r4, #32]
 80106b4:	4b04      	ldr	r3, [pc, #16]	; (80106c8 <__sinit+0x2c>)
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d1f5      	bne.n	80106a8 <__sinit+0xc>
 80106bc:	f7ff ffc4 	bl	8010648 <global_stdio_init.part.0>
 80106c0:	e7f2      	b.n	80106a8 <__sinit+0xc>
 80106c2:	bf00      	nop
 80106c4:	08010609 	.word	0x08010609
 80106c8:	2400099c 	.word	0x2400099c

080106cc <_fwalk_sglue>:
 80106cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106d0:	4607      	mov	r7, r0
 80106d2:	4688      	mov	r8, r1
 80106d4:	4614      	mov	r4, r2
 80106d6:	2600      	movs	r6, #0
 80106d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80106dc:	f1b9 0901 	subs.w	r9, r9, #1
 80106e0:	d505      	bpl.n	80106ee <_fwalk_sglue+0x22>
 80106e2:	6824      	ldr	r4, [r4, #0]
 80106e4:	2c00      	cmp	r4, #0
 80106e6:	d1f7      	bne.n	80106d8 <_fwalk_sglue+0xc>
 80106e8:	4630      	mov	r0, r6
 80106ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106ee:	89ab      	ldrh	r3, [r5, #12]
 80106f0:	2b01      	cmp	r3, #1
 80106f2:	d907      	bls.n	8010704 <_fwalk_sglue+0x38>
 80106f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80106f8:	3301      	adds	r3, #1
 80106fa:	d003      	beq.n	8010704 <_fwalk_sglue+0x38>
 80106fc:	4629      	mov	r1, r5
 80106fe:	4638      	mov	r0, r7
 8010700:	47c0      	blx	r8
 8010702:	4306      	orrs	r6, r0
 8010704:	3568      	adds	r5, #104	; 0x68
 8010706:	e7e9      	b.n	80106dc <_fwalk_sglue+0x10>

08010708 <siprintf>:
 8010708:	b40e      	push	{r1, r2, r3}
 801070a:	b500      	push	{lr}
 801070c:	b09c      	sub	sp, #112	; 0x70
 801070e:	ab1d      	add	r3, sp, #116	; 0x74
 8010710:	9002      	str	r0, [sp, #8]
 8010712:	9006      	str	r0, [sp, #24]
 8010714:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010718:	4809      	ldr	r0, [pc, #36]	; (8010740 <siprintf+0x38>)
 801071a:	9107      	str	r1, [sp, #28]
 801071c:	9104      	str	r1, [sp, #16]
 801071e:	4909      	ldr	r1, [pc, #36]	; (8010744 <siprintf+0x3c>)
 8010720:	f853 2b04 	ldr.w	r2, [r3], #4
 8010724:	9105      	str	r1, [sp, #20]
 8010726:	6800      	ldr	r0, [r0, #0]
 8010728:	9301      	str	r3, [sp, #4]
 801072a:	a902      	add	r1, sp, #8
 801072c:	f001 fbaa 	bl	8011e84 <_svfiprintf_r>
 8010730:	9b02      	ldr	r3, [sp, #8]
 8010732:	2200      	movs	r2, #0
 8010734:	701a      	strb	r2, [r3, #0]
 8010736:	b01c      	add	sp, #112	; 0x70
 8010738:	f85d eb04 	ldr.w	lr, [sp], #4
 801073c:	b003      	add	sp, #12
 801073e:	4770      	bx	lr
 8010740:	2400006c 	.word	0x2400006c
 8010744:	ffff0208 	.word	0xffff0208

08010748 <__sread>:
 8010748:	b510      	push	{r4, lr}
 801074a:	460c      	mov	r4, r1
 801074c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010750:	f000 f86c 	bl	801082c <_read_r>
 8010754:	2800      	cmp	r0, #0
 8010756:	bfab      	itete	ge
 8010758:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801075a:	89a3      	ldrhlt	r3, [r4, #12]
 801075c:	181b      	addge	r3, r3, r0
 801075e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010762:	bfac      	ite	ge
 8010764:	6563      	strge	r3, [r4, #84]	; 0x54
 8010766:	81a3      	strhlt	r3, [r4, #12]
 8010768:	bd10      	pop	{r4, pc}

0801076a <__swrite>:
 801076a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801076e:	461f      	mov	r7, r3
 8010770:	898b      	ldrh	r3, [r1, #12]
 8010772:	05db      	lsls	r3, r3, #23
 8010774:	4605      	mov	r5, r0
 8010776:	460c      	mov	r4, r1
 8010778:	4616      	mov	r6, r2
 801077a:	d505      	bpl.n	8010788 <__swrite+0x1e>
 801077c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010780:	2302      	movs	r3, #2
 8010782:	2200      	movs	r2, #0
 8010784:	f000 f840 	bl	8010808 <_lseek_r>
 8010788:	89a3      	ldrh	r3, [r4, #12]
 801078a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801078e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010792:	81a3      	strh	r3, [r4, #12]
 8010794:	4632      	mov	r2, r6
 8010796:	463b      	mov	r3, r7
 8010798:	4628      	mov	r0, r5
 801079a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801079e:	f000 b857 	b.w	8010850 <_write_r>

080107a2 <__sseek>:
 80107a2:	b510      	push	{r4, lr}
 80107a4:	460c      	mov	r4, r1
 80107a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107aa:	f000 f82d 	bl	8010808 <_lseek_r>
 80107ae:	1c43      	adds	r3, r0, #1
 80107b0:	89a3      	ldrh	r3, [r4, #12]
 80107b2:	bf15      	itete	ne
 80107b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80107b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80107ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80107be:	81a3      	strheq	r3, [r4, #12]
 80107c0:	bf18      	it	ne
 80107c2:	81a3      	strhne	r3, [r4, #12]
 80107c4:	bd10      	pop	{r4, pc}

080107c6 <__sclose>:
 80107c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107ca:	f000 b80d 	b.w	80107e8 <_close_r>

080107ce <memset>:
 80107ce:	4402      	add	r2, r0
 80107d0:	4603      	mov	r3, r0
 80107d2:	4293      	cmp	r3, r2
 80107d4:	d100      	bne.n	80107d8 <memset+0xa>
 80107d6:	4770      	bx	lr
 80107d8:	f803 1b01 	strb.w	r1, [r3], #1
 80107dc:	e7f9      	b.n	80107d2 <memset+0x4>
	...

080107e0 <_localeconv_r>:
 80107e0:	4800      	ldr	r0, [pc, #0]	; (80107e4 <_localeconv_r+0x4>)
 80107e2:	4770      	bx	lr
 80107e4:	24000160 	.word	0x24000160

080107e8 <_close_r>:
 80107e8:	b538      	push	{r3, r4, r5, lr}
 80107ea:	4d06      	ldr	r5, [pc, #24]	; (8010804 <_close_r+0x1c>)
 80107ec:	2300      	movs	r3, #0
 80107ee:	4604      	mov	r4, r0
 80107f0:	4608      	mov	r0, r1
 80107f2:	602b      	str	r3, [r5, #0]
 80107f4:	f7f2 f8d1 	bl	800299a <_close>
 80107f8:	1c43      	adds	r3, r0, #1
 80107fa:	d102      	bne.n	8010802 <_close_r+0x1a>
 80107fc:	682b      	ldr	r3, [r5, #0]
 80107fe:	b103      	cbz	r3, 8010802 <_close_r+0x1a>
 8010800:	6023      	str	r3, [r4, #0]
 8010802:	bd38      	pop	{r3, r4, r5, pc}
 8010804:	240009a0 	.word	0x240009a0

08010808 <_lseek_r>:
 8010808:	b538      	push	{r3, r4, r5, lr}
 801080a:	4d07      	ldr	r5, [pc, #28]	; (8010828 <_lseek_r+0x20>)
 801080c:	4604      	mov	r4, r0
 801080e:	4608      	mov	r0, r1
 8010810:	4611      	mov	r1, r2
 8010812:	2200      	movs	r2, #0
 8010814:	602a      	str	r2, [r5, #0]
 8010816:	461a      	mov	r2, r3
 8010818:	f7f2 f8e6 	bl	80029e8 <_lseek>
 801081c:	1c43      	adds	r3, r0, #1
 801081e:	d102      	bne.n	8010826 <_lseek_r+0x1e>
 8010820:	682b      	ldr	r3, [r5, #0]
 8010822:	b103      	cbz	r3, 8010826 <_lseek_r+0x1e>
 8010824:	6023      	str	r3, [r4, #0]
 8010826:	bd38      	pop	{r3, r4, r5, pc}
 8010828:	240009a0 	.word	0x240009a0

0801082c <_read_r>:
 801082c:	b538      	push	{r3, r4, r5, lr}
 801082e:	4d07      	ldr	r5, [pc, #28]	; (801084c <_read_r+0x20>)
 8010830:	4604      	mov	r4, r0
 8010832:	4608      	mov	r0, r1
 8010834:	4611      	mov	r1, r2
 8010836:	2200      	movs	r2, #0
 8010838:	602a      	str	r2, [r5, #0]
 801083a:	461a      	mov	r2, r3
 801083c:	f7f2 f874 	bl	8002928 <_read>
 8010840:	1c43      	adds	r3, r0, #1
 8010842:	d102      	bne.n	801084a <_read_r+0x1e>
 8010844:	682b      	ldr	r3, [r5, #0]
 8010846:	b103      	cbz	r3, 801084a <_read_r+0x1e>
 8010848:	6023      	str	r3, [r4, #0]
 801084a:	bd38      	pop	{r3, r4, r5, pc}
 801084c:	240009a0 	.word	0x240009a0

08010850 <_write_r>:
 8010850:	b538      	push	{r3, r4, r5, lr}
 8010852:	4d07      	ldr	r5, [pc, #28]	; (8010870 <_write_r+0x20>)
 8010854:	4604      	mov	r4, r0
 8010856:	4608      	mov	r0, r1
 8010858:	4611      	mov	r1, r2
 801085a:	2200      	movs	r2, #0
 801085c:	602a      	str	r2, [r5, #0]
 801085e:	461a      	mov	r2, r3
 8010860:	f7f2 f87f 	bl	8002962 <_write>
 8010864:	1c43      	adds	r3, r0, #1
 8010866:	d102      	bne.n	801086e <_write_r+0x1e>
 8010868:	682b      	ldr	r3, [r5, #0]
 801086a:	b103      	cbz	r3, 801086e <_write_r+0x1e>
 801086c:	6023      	str	r3, [r4, #0]
 801086e:	bd38      	pop	{r3, r4, r5, pc}
 8010870:	240009a0 	.word	0x240009a0

08010874 <__errno>:
 8010874:	4b01      	ldr	r3, [pc, #4]	; (801087c <__errno+0x8>)
 8010876:	6818      	ldr	r0, [r3, #0]
 8010878:	4770      	bx	lr
 801087a:	bf00      	nop
 801087c:	2400006c 	.word	0x2400006c

08010880 <__libc_init_array>:
 8010880:	b570      	push	{r4, r5, r6, lr}
 8010882:	4d0d      	ldr	r5, [pc, #52]	; (80108b8 <__libc_init_array+0x38>)
 8010884:	4c0d      	ldr	r4, [pc, #52]	; (80108bc <__libc_init_array+0x3c>)
 8010886:	1b64      	subs	r4, r4, r5
 8010888:	10a4      	asrs	r4, r4, #2
 801088a:	2600      	movs	r6, #0
 801088c:	42a6      	cmp	r6, r4
 801088e:	d109      	bne.n	80108a4 <__libc_init_array+0x24>
 8010890:	4d0b      	ldr	r5, [pc, #44]	; (80108c0 <__libc_init_array+0x40>)
 8010892:	4c0c      	ldr	r4, [pc, #48]	; (80108c4 <__libc_init_array+0x44>)
 8010894:	f002 f810 	bl	80128b8 <_init>
 8010898:	1b64      	subs	r4, r4, r5
 801089a:	10a4      	asrs	r4, r4, #2
 801089c:	2600      	movs	r6, #0
 801089e:	42a6      	cmp	r6, r4
 80108a0:	d105      	bne.n	80108ae <__libc_init_array+0x2e>
 80108a2:	bd70      	pop	{r4, r5, r6, pc}
 80108a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80108a8:	4798      	blx	r3
 80108aa:	3601      	adds	r6, #1
 80108ac:	e7ee      	b.n	801088c <__libc_init_array+0xc>
 80108ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80108b2:	4798      	blx	r3
 80108b4:	3601      	adds	r6, #1
 80108b6:	e7f2      	b.n	801089e <__libc_init_array+0x1e>
 80108b8:	08012e34 	.word	0x08012e34
 80108bc:	08012e34 	.word	0x08012e34
 80108c0:	08012e34 	.word	0x08012e34
 80108c4:	08012e38 	.word	0x08012e38

080108c8 <__retarget_lock_init_recursive>:
 80108c8:	4770      	bx	lr

080108ca <__retarget_lock_acquire_recursive>:
 80108ca:	4770      	bx	lr

080108cc <__retarget_lock_release_recursive>:
 80108cc:	4770      	bx	lr

080108ce <memcpy>:
 80108ce:	440a      	add	r2, r1
 80108d0:	4291      	cmp	r1, r2
 80108d2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80108d6:	d100      	bne.n	80108da <memcpy+0xc>
 80108d8:	4770      	bx	lr
 80108da:	b510      	push	{r4, lr}
 80108dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80108e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80108e4:	4291      	cmp	r1, r2
 80108e6:	d1f9      	bne.n	80108dc <memcpy+0xe>
 80108e8:	bd10      	pop	{r4, pc}

080108ea <quorem>:
 80108ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108ee:	6903      	ldr	r3, [r0, #16]
 80108f0:	690c      	ldr	r4, [r1, #16]
 80108f2:	42a3      	cmp	r3, r4
 80108f4:	4607      	mov	r7, r0
 80108f6:	db7e      	blt.n	80109f6 <quorem+0x10c>
 80108f8:	3c01      	subs	r4, #1
 80108fa:	f101 0814 	add.w	r8, r1, #20
 80108fe:	f100 0514 	add.w	r5, r0, #20
 8010902:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010906:	9301      	str	r3, [sp, #4]
 8010908:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801090c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010910:	3301      	adds	r3, #1
 8010912:	429a      	cmp	r2, r3
 8010914:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010918:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801091c:	fbb2 f6f3 	udiv	r6, r2, r3
 8010920:	d331      	bcc.n	8010986 <quorem+0x9c>
 8010922:	f04f 0e00 	mov.w	lr, #0
 8010926:	4640      	mov	r0, r8
 8010928:	46ac      	mov	ip, r5
 801092a:	46f2      	mov	sl, lr
 801092c:	f850 2b04 	ldr.w	r2, [r0], #4
 8010930:	b293      	uxth	r3, r2
 8010932:	fb06 e303 	mla	r3, r6, r3, lr
 8010936:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801093a:	0c1a      	lsrs	r2, r3, #16
 801093c:	b29b      	uxth	r3, r3
 801093e:	ebaa 0303 	sub.w	r3, sl, r3
 8010942:	f8dc a000 	ldr.w	sl, [ip]
 8010946:	fa13 f38a 	uxtah	r3, r3, sl
 801094a:	fb06 220e 	mla	r2, r6, lr, r2
 801094e:	9300      	str	r3, [sp, #0]
 8010950:	9b00      	ldr	r3, [sp, #0]
 8010952:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010956:	b292      	uxth	r2, r2
 8010958:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801095c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010960:	f8bd 3000 	ldrh.w	r3, [sp]
 8010964:	4581      	cmp	r9, r0
 8010966:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801096a:	f84c 3b04 	str.w	r3, [ip], #4
 801096e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010972:	d2db      	bcs.n	801092c <quorem+0x42>
 8010974:	f855 300b 	ldr.w	r3, [r5, fp]
 8010978:	b92b      	cbnz	r3, 8010986 <quorem+0x9c>
 801097a:	9b01      	ldr	r3, [sp, #4]
 801097c:	3b04      	subs	r3, #4
 801097e:	429d      	cmp	r5, r3
 8010980:	461a      	mov	r2, r3
 8010982:	d32c      	bcc.n	80109de <quorem+0xf4>
 8010984:	613c      	str	r4, [r7, #16]
 8010986:	4638      	mov	r0, r7
 8010988:	f001 f922 	bl	8011bd0 <__mcmp>
 801098c:	2800      	cmp	r0, #0
 801098e:	db22      	blt.n	80109d6 <quorem+0xec>
 8010990:	3601      	adds	r6, #1
 8010992:	4629      	mov	r1, r5
 8010994:	2000      	movs	r0, #0
 8010996:	f858 2b04 	ldr.w	r2, [r8], #4
 801099a:	f8d1 c000 	ldr.w	ip, [r1]
 801099e:	b293      	uxth	r3, r2
 80109a0:	1ac3      	subs	r3, r0, r3
 80109a2:	0c12      	lsrs	r2, r2, #16
 80109a4:	fa13 f38c 	uxtah	r3, r3, ip
 80109a8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80109ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80109b0:	b29b      	uxth	r3, r3
 80109b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80109b6:	45c1      	cmp	r9, r8
 80109b8:	f841 3b04 	str.w	r3, [r1], #4
 80109bc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80109c0:	d2e9      	bcs.n	8010996 <quorem+0xac>
 80109c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80109c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80109ca:	b922      	cbnz	r2, 80109d6 <quorem+0xec>
 80109cc:	3b04      	subs	r3, #4
 80109ce:	429d      	cmp	r5, r3
 80109d0:	461a      	mov	r2, r3
 80109d2:	d30a      	bcc.n	80109ea <quorem+0x100>
 80109d4:	613c      	str	r4, [r7, #16]
 80109d6:	4630      	mov	r0, r6
 80109d8:	b003      	add	sp, #12
 80109da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109de:	6812      	ldr	r2, [r2, #0]
 80109e0:	3b04      	subs	r3, #4
 80109e2:	2a00      	cmp	r2, #0
 80109e4:	d1ce      	bne.n	8010984 <quorem+0x9a>
 80109e6:	3c01      	subs	r4, #1
 80109e8:	e7c9      	b.n	801097e <quorem+0x94>
 80109ea:	6812      	ldr	r2, [r2, #0]
 80109ec:	3b04      	subs	r3, #4
 80109ee:	2a00      	cmp	r2, #0
 80109f0:	d1f0      	bne.n	80109d4 <quorem+0xea>
 80109f2:	3c01      	subs	r4, #1
 80109f4:	e7eb      	b.n	80109ce <quorem+0xe4>
 80109f6:	2000      	movs	r0, #0
 80109f8:	e7ee      	b.n	80109d8 <quorem+0xee>
 80109fa:	0000      	movs	r0, r0
 80109fc:	0000      	movs	r0, r0
	...

08010a00 <_dtoa_r>:
 8010a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a04:	ed2d 8b02 	vpush	{d8}
 8010a08:	69c5      	ldr	r5, [r0, #28]
 8010a0a:	b091      	sub	sp, #68	; 0x44
 8010a0c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010a10:	ec59 8b10 	vmov	r8, r9, d0
 8010a14:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8010a16:	9106      	str	r1, [sp, #24]
 8010a18:	4606      	mov	r6, r0
 8010a1a:	9208      	str	r2, [sp, #32]
 8010a1c:	930c      	str	r3, [sp, #48]	; 0x30
 8010a1e:	b975      	cbnz	r5, 8010a3e <_dtoa_r+0x3e>
 8010a20:	2010      	movs	r0, #16
 8010a22:	f000 fda5 	bl	8011570 <malloc>
 8010a26:	4602      	mov	r2, r0
 8010a28:	61f0      	str	r0, [r6, #28]
 8010a2a:	b920      	cbnz	r0, 8010a36 <_dtoa_r+0x36>
 8010a2c:	4ba6      	ldr	r3, [pc, #664]	; (8010cc8 <_dtoa_r+0x2c8>)
 8010a2e:	21ef      	movs	r1, #239	; 0xef
 8010a30:	48a6      	ldr	r0, [pc, #664]	; (8010ccc <_dtoa_r+0x2cc>)
 8010a32:	f001 fbfd 	bl	8012230 <__assert_func>
 8010a36:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010a3a:	6005      	str	r5, [r0, #0]
 8010a3c:	60c5      	str	r5, [r0, #12]
 8010a3e:	69f3      	ldr	r3, [r6, #28]
 8010a40:	6819      	ldr	r1, [r3, #0]
 8010a42:	b151      	cbz	r1, 8010a5a <_dtoa_r+0x5a>
 8010a44:	685a      	ldr	r2, [r3, #4]
 8010a46:	604a      	str	r2, [r1, #4]
 8010a48:	2301      	movs	r3, #1
 8010a4a:	4093      	lsls	r3, r2
 8010a4c:	608b      	str	r3, [r1, #8]
 8010a4e:	4630      	mov	r0, r6
 8010a50:	f000 fe82 	bl	8011758 <_Bfree>
 8010a54:	69f3      	ldr	r3, [r6, #28]
 8010a56:	2200      	movs	r2, #0
 8010a58:	601a      	str	r2, [r3, #0]
 8010a5a:	f1b9 0300 	subs.w	r3, r9, #0
 8010a5e:	bfbb      	ittet	lt
 8010a60:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010a64:	9303      	strlt	r3, [sp, #12]
 8010a66:	2300      	movge	r3, #0
 8010a68:	2201      	movlt	r2, #1
 8010a6a:	bfac      	ite	ge
 8010a6c:	6023      	strge	r3, [r4, #0]
 8010a6e:	6022      	strlt	r2, [r4, #0]
 8010a70:	4b97      	ldr	r3, [pc, #604]	; (8010cd0 <_dtoa_r+0x2d0>)
 8010a72:	9c03      	ldr	r4, [sp, #12]
 8010a74:	43a3      	bics	r3, r4
 8010a76:	d11c      	bne.n	8010ab2 <_dtoa_r+0xb2>
 8010a78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010a7a:	f242 730f 	movw	r3, #9999	; 0x270f
 8010a7e:	6013      	str	r3, [r2, #0]
 8010a80:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8010a84:	ea53 0308 	orrs.w	r3, r3, r8
 8010a88:	f000 84fb 	beq.w	8011482 <_dtoa_r+0xa82>
 8010a8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010a8e:	b963      	cbnz	r3, 8010aaa <_dtoa_r+0xaa>
 8010a90:	4b90      	ldr	r3, [pc, #576]	; (8010cd4 <_dtoa_r+0x2d4>)
 8010a92:	e020      	b.n	8010ad6 <_dtoa_r+0xd6>
 8010a94:	4b90      	ldr	r3, [pc, #576]	; (8010cd8 <_dtoa_r+0x2d8>)
 8010a96:	9301      	str	r3, [sp, #4]
 8010a98:	3308      	adds	r3, #8
 8010a9a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8010a9c:	6013      	str	r3, [r2, #0]
 8010a9e:	9801      	ldr	r0, [sp, #4]
 8010aa0:	b011      	add	sp, #68	; 0x44
 8010aa2:	ecbd 8b02 	vpop	{d8}
 8010aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010aaa:	4b8a      	ldr	r3, [pc, #552]	; (8010cd4 <_dtoa_r+0x2d4>)
 8010aac:	9301      	str	r3, [sp, #4]
 8010aae:	3303      	adds	r3, #3
 8010ab0:	e7f3      	b.n	8010a9a <_dtoa_r+0x9a>
 8010ab2:	ed9d 8b02 	vldr	d8, [sp, #8]
 8010ab6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010abe:	d10c      	bne.n	8010ada <_dtoa_r+0xda>
 8010ac0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010ac2:	2301      	movs	r3, #1
 8010ac4:	6013      	str	r3, [r2, #0]
 8010ac6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	f000 84d7 	beq.w	801147c <_dtoa_r+0xa7c>
 8010ace:	4b83      	ldr	r3, [pc, #524]	; (8010cdc <_dtoa_r+0x2dc>)
 8010ad0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8010ad2:	6013      	str	r3, [r2, #0]
 8010ad4:	3b01      	subs	r3, #1
 8010ad6:	9301      	str	r3, [sp, #4]
 8010ad8:	e7e1      	b.n	8010a9e <_dtoa_r+0x9e>
 8010ada:	aa0e      	add	r2, sp, #56	; 0x38
 8010adc:	a90f      	add	r1, sp, #60	; 0x3c
 8010ade:	4630      	mov	r0, r6
 8010ae0:	eeb0 0b48 	vmov.f64	d0, d8
 8010ae4:	f001 f91a 	bl	8011d1c <__d2b>
 8010ae8:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8010aec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010aee:	4605      	mov	r5, r0
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d046      	beq.n	8010b82 <_dtoa_r+0x182>
 8010af4:	eeb0 7b48 	vmov.f64	d7, d8
 8010af8:	ee18 1a90 	vmov	r1, s17
 8010afc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010b00:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8010b04:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8010b08:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010b0c:	2000      	movs	r0, #0
 8010b0e:	ee07 1a90 	vmov	s15, r1
 8010b12:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8010b16:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8010cb0 <_dtoa_r+0x2b0>
 8010b1a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010b1e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8010cb8 <_dtoa_r+0x2b8>
 8010b22:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010b26:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8010cc0 <_dtoa_r+0x2c0>
 8010b2a:	ee07 3a90 	vmov	s15, r3
 8010b2e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8010b32:	eeb0 7b46 	vmov.f64	d7, d6
 8010b36:	eea4 7b05 	vfma.f64	d7, d4, d5
 8010b3a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8010b3e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b46:	ee16 ba90 	vmov	fp, s13
 8010b4a:	9009      	str	r0, [sp, #36]	; 0x24
 8010b4c:	d508      	bpl.n	8010b60 <_dtoa_r+0x160>
 8010b4e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8010b52:	eeb4 6b47 	vcmp.f64	d6, d7
 8010b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b5a:	bf18      	it	ne
 8010b5c:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8010b60:	f1bb 0f16 	cmp.w	fp, #22
 8010b64:	d82b      	bhi.n	8010bbe <_dtoa_r+0x1be>
 8010b66:	495e      	ldr	r1, [pc, #376]	; (8010ce0 <_dtoa_r+0x2e0>)
 8010b68:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8010b6c:	ed91 7b00 	vldr	d7, [r1]
 8010b70:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b78:	d501      	bpl.n	8010b7e <_dtoa_r+0x17e>
 8010b7a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010b7e:	2100      	movs	r1, #0
 8010b80:	e01e      	b.n	8010bc0 <_dtoa_r+0x1c0>
 8010b82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010b84:	4413      	add	r3, r2
 8010b86:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8010b8a:	2920      	cmp	r1, #32
 8010b8c:	bfc1      	itttt	gt
 8010b8e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8010b92:	408c      	lslgt	r4, r1
 8010b94:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8010b98:	fa28 f101 	lsrgt.w	r1, r8, r1
 8010b9c:	bfd6      	itet	le
 8010b9e:	f1c1 0120 	rsble	r1, r1, #32
 8010ba2:	4321      	orrgt	r1, r4
 8010ba4:	fa08 f101 	lslle.w	r1, r8, r1
 8010ba8:	ee07 1a90 	vmov	s15, r1
 8010bac:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010bb0:	3b01      	subs	r3, #1
 8010bb2:	ee17 1a90 	vmov	r1, s15
 8010bb6:	2001      	movs	r0, #1
 8010bb8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8010bbc:	e7a7      	b.n	8010b0e <_dtoa_r+0x10e>
 8010bbe:	2101      	movs	r1, #1
 8010bc0:	1ad2      	subs	r2, r2, r3
 8010bc2:	1e53      	subs	r3, r2, #1
 8010bc4:	9305      	str	r3, [sp, #20]
 8010bc6:	bf45      	ittet	mi
 8010bc8:	f1c2 0301 	rsbmi	r3, r2, #1
 8010bcc:	9304      	strmi	r3, [sp, #16]
 8010bce:	2300      	movpl	r3, #0
 8010bd0:	2300      	movmi	r3, #0
 8010bd2:	bf4c      	ite	mi
 8010bd4:	9305      	strmi	r3, [sp, #20]
 8010bd6:	9304      	strpl	r3, [sp, #16]
 8010bd8:	f1bb 0f00 	cmp.w	fp, #0
 8010bdc:	910b      	str	r1, [sp, #44]	; 0x2c
 8010bde:	db18      	blt.n	8010c12 <_dtoa_r+0x212>
 8010be0:	9b05      	ldr	r3, [sp, #20]
 8010be2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8010be6:	445b      	add	r3, fp
 8010be8:	9305      	str	r3, [sp, #20]
 8010bea:	2300      	movs	r3, #0
 8010bec:	9a06      	ldr	r2, [sp, #24]
 8010bee:	2a09      	cmp	r2, #9
 8010bf0:	d848      	bhi.n	8010c84 <_dtoa_r+0x284>
 8010bf2:	2a05      	cmp	r2, #5
 8010bf4:	bfc4      	itt	gt
 8010bf6:	3a04      	subgt	r2, #4
 8010bf8:	9206      	strgt	r2, [sp, #24]
 8010bfa:	9a06      	ldr	r2, [sp, #24]
 8010bfc:	f1a2 0202 	sub.w	r2, r2, #2
 8010c00:	bfcc      	ite	gt
 8010c02:	2400      	movgt	r4, #0
 8010c04:	2401      	movle	r4, #1
 8010c06:	2a03      	cmp	r2, #3
 8010c08:	d847      	bhi.n	8010c9a <_dtoa_r+0x29a>
 8010c0a:	e8df f002 	tbb	[pc, r2]
 8010c0e:	2d0b      	.short	0x2d0b
 8010c10:	392b      	.short	0x392b
 8010c12:	9b04      	ldr	r3, [sp, #16]
 8010c14:	2200      	movs	r2, #0
 8010c16:	eba3 030b 	sub.w	r3, r3, fp
 8010c1a:	9304      	str	r3, [sp, #16]
 8010c1c:	920a      	str	r2, [sp, #40]	; 0x28
 8010c1e:	f1cb 0300 	rsb	r3, fp, #0
 8010c22:	e7e3      	b.n	8010bec <_dtoa_r+0x1ec>
 8010c24:	2200      	movs	r2, #0
 8010c26:	9207      	str	r2, [sp, #28]
 8010c28:	9a08      	ldr	r2, [sp, #32]
 8010c2a:	2a00      	cmp	r2, #0
 8010c2c:	dc38      	bgt.n	8010ca0 <_dtoa_r+0x2a0>
 8010c2e:	f04f 0a01 	mov.w	sl, #1
 8010c32:	46d1      	mov	r9, sl
 8010c34:	4652      	mov	r2, sl
 8010c36:	f8cd a020 	str.w	sl, [sp, #32]
 8010c3a:	69f7      	ldr	r7, [r6, #28]
 8010c3c:	2100      	movs	r1, #0
 8010c3e:	2004      	movs	r0, #4
 8010c40:	f100 0c14 	add.w	ip, r0, #20
 8010c44:	4594      	cmp	ip, r2
 8010c46:	d930      	bls.n	8010caa <_dtoa_r+0x2aa>
 8010c48:	6079      	str	r1, [r7, #4]
 8010c4a:	4630      	mov	r0, r6
 8010c4c:	930d      	str	r3, [sp, #52]	; 0x34
 8010c4e:	f000 fd43 	bl	80116d8 <_Balloc>
 8010c52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010c54:	9001      	str	r0, [sp, #4]
 8010c56:	4602      	mov	r2, r0
 8010c58:	2800      	cmp	r0, #0
 8010c5a:	d145      	bne.n	8010ce8 <_dtoa_r+0x2e8>
 8010c5c:	4b21      	ldr	r3, [pc, #132]	; (8010ce4 <_dtoa_r+0x2e4>)
 8010c5e:	f240 11af 	movw	r1, #431	; 0x1af
 8010c62:	e6e5      	b.n	8010a30 <_dtoa_r+0x30>
 8010c64:	2201      	movs	r2, #1
 8010c66:	e7de      	b.n	8010c26 <_dtoa_r+0x226>
 8010c68:	2200      	movs	r2, #0
 8010c6a:	9207      	str	r2, [sp, #28]
 8010c6c:	9a08      	ldr	r2, [sp, #32]
 8010c6e:	eb0b 0a02 	add.w	sl, fp, r2
 8010c72:	f10a 0901 	add.w	r9, sl, #1
 8010c76:	464a      	mov	r2, r9
 8010c78:	2a01      	cmp	r2, #1
 8010c7a:	bfb8      	it	lt
 8010c7c:	2201      	movlt	r2, #1
 8010c7e:	e7dc      	b.n	8010c3a <_dtoa_r+0x23a>
 8010c80:	2201      	movs	r2, #1
 8010c82:	e7f2      	b.n	8010c6a <_dtoa_r+0x26a>
 8010c84:	2401      	movs	r4, #1
 8010c86:	2200      	movs	r2, #0
 8010c88:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8010c8c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8010c90:	2100      	movs	r1, #0
 8010c92:	46d1      	mov	r9, sl
 8010c94:	2212      	movs	r2, #18
 8010c96:	9108      	str	r1, [sp, #32]
 8010c98:	e7cf      	b.n	8010c3a <_dtoa_r+0x23a>
 8010c9a:	2201      	movs	r2, #1
 8010c9c:	9207      	str	r2, [sp, #28]
 8010c9e:	e7f5      	b.n	8010c8c <_dtoa_r+0x28c>
 8010ca0:	f8dd a020 	ldr.w	sl, [sp, #32]
 8010ca4:	46d1      	mov	r9, sl
 8010ca6:	4652      	mov	r2, sl
 8010ca8:	e7c7      	b.n	8010c3a <_dtoa_r+0x23a>
 8010caa:	3101      	adds	r1, #1
 8010cac:	0040      	lsls	r0, r0, #1
 8010cae:	e7c7      	b.n	8010c40 <_dtoa_r+0x240>
 8010cb0:	636f4361 	.word	0x636f4361
 8010cb4:	3fd287a7 	.word	0x3fd287a7
 8010cb8:	8b60c8b3 	.word	0x8b60c8b3
 8010cbc:	3fc68a28 	.word	0x3fc68a28
 8010cc0:	509f79fb 	.word	0x509f79fb
 8010cc4:	3fd34413 	.word	0x3fd34413
 8010cc8:	08012af9 	.word	0x08012af9
 8010ccc:	08012b10 	.word	0x08012b10
 8010cd0:	7ff00000 	.word	0x7ff00000
 8010cd4:	08012af5 	.word	0x08012af5
 8010cd8:	08012aec 	.word	0x08012aec
 8010cdc:	08012ac9 	.word	0x08012ac9
 8010ce0:	08012c00 	.word	0x08012c00
 8010ce4:	08012b68 	.word	0x08012b68
 8010ce8:	69f2      	ldr	r2, [r6, #28]
 8010cea:	9901      	ldr	r1, [sp, #4]
 8010cec:	6011      	str	r1, [r2, #0]
 8010cee:	f1b9 0f0e 	cmp.w	r9, #14
 8010cf2:	d86c      	bhi.n	8010dce <_dtoa_r+0x3ce>
 8010cf4:	2c00      	cmp	r4, #0
 8010cf6:	d06a      	beq.n	8010dce <_dtoa_r+0x3ce>
 8010cf8:	f1bb 0f00 	cmp.w	fp, #0
 8010cfc:	f340 80a0 	ble.w	8010e40 <_dtoa_r+0x440>
 8010d00:	4ac1      	ldr	r2, [pc, #772]	; (8011008 <_dtoa_r+0x608>)
 8010d02:	f00b 010f 	and.w	r1, fp, #15
 8010d06:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8010d0a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010d0e:	ed92 7b00 	vldr	d7, [r2]
 8010d12:	ea4f 122b 	mov.w	r2, fp, asr #4
 8010d16:	f000 8087 	beq.w	8010e28 <_dtoa_r+0x428>
 8010d1a:	49bc      	ldr	r1, [pc, #752]	; (801100c <_dtoa_r+0x60c>)
 8010d1c:	ed91 6b08 	vldr	d6, [r1, #32]
 8010d20:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8010d24:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010d28:	f002 020f 	and.w	r2, r2, #15
 8010d2c:	2103      	movs	r1, #3
 8010d2e:	48b7      	ldr	r0, [pc, #732]	; (801100c <_dtoa_r+0x60c>)
 8010d30:	2a00      	cmp	r2, #0
 8010d32:	d17b      	bne.n	8010e2c <_dtoa_r+0x42c>
 8010d34:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010d38:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010d3c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010d40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010d42:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010d46:	2a00      	cmp	r2, #0
 8010d48:	f000 80a0 	beq.w	8010e8c <_dtoa_r+0x48c>
 8010d4c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010d50:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d58:	f140 8098 	bpl.w	8010e8c <_dtoa_r+0x48c>
 8010d5c:	f1b9 0f00 	cmp.w	r9, #0
 8010d60:	f000 8094 	beq.w	8010e8c <_dtoa_r+0x48c>
 8010d64:	f1ba 0f00 	cmp.w	sl, #0
 8010d68:	dd2f      	ble.n	8010dca <_dtoa_r+0x3ca>
 8010d6a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8010d6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010d72:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010d76:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8010d7a:	3101      	adds	r1, #1
 8010d7c:	4654      	mov	r4, sl
 8010d7e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010d82:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8010d86:	ee07 1a90 	vmov	s15, r1
 8010d8a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010d8e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8010d92:	ee15 7a90 	vmov	r7, s11
 8010d96:	ec51 0b15 	vmov	r0, r1, d5
 8010d9a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8010d9e:	2c00      	cmp	r4, #0
 8010da0:	d177      	bne.n	8010e92 <_dtoa_r+0x492>
 8010da2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010da6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010daa:	ec41 0b17 	vmov	d7, r0, r1
 8010dae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010db6:	f300 826a 	bgt.w	801128e <_dtoa_r+0x88e>
 8010dba:	eeb1 7b47 	vneg.f64	d7, d7
 8010dbe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dc6:	f100 8260 	bmi.w	801128a <_dtoa_r+0x88a>
 8010dca:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010dce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010dd0:	2a00      	cmp	r2, #0
 8010dd2:	f2c0 811d 	blt.w	8011010 <_dtoa_r+0x610>
 8010dd6:	f1bb 0f0e 	cmp.w	fp, #14
 8010dda:	f300 8119 	bgt.w	8011010 <_dtoa_r+0x610>
 8010dde:	4b8a      	ldr	r3, [pc, #552]	; (8011008 <_dtoa_r+0x608>)
 8010de0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010de4:	ed93 6b00 	vldr	d6, [r3]
 8010de8:	9b08      	ldr	r3, [sp, #32]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	f280 80b7 	bge.w	8010f5e <_dtoa_r+0x55e>
 8010df0:	f1b9 0f00 	cmp.w	r9, #0
 8010df4:	f300 80b3 	bgt.w	8010f5e <_dtoa_r+0x55e>
 8010df8:	f040 8246 	bne.w	8011288 <_dtoa_r+0x888>
 8010dfc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010e00:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010e04:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010e08:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e10:	464c      	mov	r4, r9
 8010e12:	464f      	mov	r7, r9
 8010e14:	f280 821c 	bge.w	8011250 <_dtoa_r+0x850>
 8010e18:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010e1c:	2331      	movs	r3, #49	; 0x31
 8010e1e:	f808 3b01 	strb.w	r3, [r8], #1
 8010e22:	f10b 0b01 	add.w	fp, fp, #1
 8010e26:	e218      	b.n	801125a <_dtoa_r+0x85a>
 8010e28:	2102      	movs	r1, #2
 8010e2a:	e780      	b.n	8010d2e <_dtoa_r+0x32e>
 8010e2c:	07d4      	lsls	r4, r2, #31
 8010e2e:	d504      	bpl.n	8010e3a <_dtoa_r+0x43a>
 8010e30:	ed90 6b00 	vldr	d6, [r0]
 8010e34:	3101      	adds	r1, #1
 8010e36:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010e3a:	1052      	asrs	r2, r2, #1
 8010e3c:	3008      	adds	r0, #8
 8010e3e:	e777      	b.n	8010d30 <_dtoa_r+0x330>
 8010e40:	d022      	beq.n	8010e88 <_dtoa_r+0x488>
 8010e42:	f1cb 0200 	rsb	r2, fp, #0
 8010e46:	4970      	ldr	r1, [pc, #448]	; (8011008 <_dtoa_r+0x608>)
 8010e48:	f002 000f 	and.w	r0, r2, #15
 8010e4c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8010e50:	ed91 7b00 	vldr	d7, [r1]
 8010e54:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010e58:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010e5c:	486b      	ldr	r0, [pc, #428]	; (801100c <_dtoa_r+0x60c>)
 8010e5e:	1112      	asrs	r2, r2, #4
 8010e60:	2400      	movs	r4, #0
 8010e62:	2102      	movs	r1, #2
 8010e64:	b92a      	cbnz	r2, 8010e72 <_dtoa_r+0x472>
 8010e66:	2c00      	cmp	r4, #0
 8010e68:	f43f af6a 	beq.w	8010d40 <_dtoa_r+0x340>
 8010e6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010e70:	e766      	b.n	8010d40 <_dtoa_r+0x340>
 8010e72:	07d7      	lsls	r7, r2, #31
 8010e74:	d505      	bpl.n	8010e82 <_dtoa_r+0x482>
 8010e76:	ed90 6b00 	vldr	d6, [r0]
 8010e7a:	3101      	adds	r1, #1
 8010e7c:	2401      	movs	r4, #1
 8010e7e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010e82:	1052      	asrs	r2, r2, #1
 8010e84:	3008      	adds	r0, #8
 8010e86:	e7ed      	b.n	8010e64 <_dtoa_r+0x464>
 8010e88:	2102      	movs	r1, #2
 8010e8a:	e759      	b.n	8010d40 <_dtoa_r+0x340>
 8010e8c:	465a      	mov	r2, fp
 8010e8e:	464c      	mov	r4, r9
 8010e90:	e775      	b.n	8010d7e <_dtoa_r+0x37e>
 8010e92:	ec41 0b17 	vmov	d7, r0, r1
 8010e96:	495c      	ldr	r1, [pc, #368]	; (8011008 <_dtoa_r+0x608>)
 8010e98:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8010e9c:	ed11 4b02 	vldr	d4, [r1, #-8]
 8010ea0:	9901      	ldr	r1, [sp, #4]
 8010ea2:	440c      	add	r4, r1
 8010ea4:	9907      	ldr	r1, [sp, #28]
 8010ea6:	b351      	cbz	r1, 8010efe <_dtoa_r+0x4fe>
 8010ea8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8010eac:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8010eb0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010eb4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8010eb8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010ebc:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010ec0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010ec4:	ee14 1a90 	vmov	r1, s9
 8010ec8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010ecc:	3130      	adds	r1, #48	; 0x30
 8010ece:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010ed2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eda:	f808 1b01 	strb.w	r1, [r8], #1
 8010ede:	d439      	bmi.n	8010f54 <_dtoa_r+0x554>
 8010ee0:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010ee4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8010ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eec:	d472      	bmi.n	8010fd4 <_dtoa_r+0x5d4>
 8010eee:	45a0      	cmp	r8, r4
 8010ef0:	f43f af6b 	beq.w	8010dca <_dtoa_r+0x3ca>
 8010ef4:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010ef8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010efc:	e7e0      	b.n	8010ec0 <_dtoa_r+0x4c0>
 8010efe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010f02:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010f06:	4620      	mov	r0, r4
 8010f08:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010f0c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010f10:	ee14 1a90 	vmov	r1, s9
 8010f14:	3130      	adds	r1, #48	; 0x30
 8010f16:	f808 1b01 	strb.w	r1, [r8], #1
 8010f1a:	45a0      	cmp	r8, r4
 8010f1c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010f20:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010f24:	d118      	bne.n	8010f58 <_dtoa_r+0x558>
 8010f26:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010f2a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010f2e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f36:	dc4d      	bgt.n	8010fd4 <_dtoa_r+0x5d4>
 8010f38:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010f3c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f44:	f57f af41 	bpl.w	8010dca <_dtoa_r+0x3ca>
 8010f48:	4680      	mov	r8, r0
 8010f4a:	3801      	subs	r0, #1
 8010f4c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8010f50:	2b30      	cmp	r3, #48	; 0x30
 8010f52:	d0f9      	beq.n	8010f48 <_dtoa_r+0x548>
 8010f54:	4693      	mov	fp, r2
 8010f56:	e02a      	b.n	8010fae <_dtoa_r+0x5ae>
 8010f58:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010f5c:	e7d6      	b.n	8010f0c <_dtoa_r+0x50c>
 8010f5e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010f62:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8010f66:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010f6a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8010f6e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8010f72:	ee15 3a10 	vmov	r3, s10
 8010f76:	3330      	adds	r3, #48	; 0x30
 8010f78:	f808 3b01 	strb.w	r3, [r8], #1
 8010f7c:	9b01      	ldr	r3, [sp, #4]
 8010f7e:	eba8 0303 	sub.w	r3, r8, r3
 8010f82:	4599      	cmp	r9, r3
 8010f84:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010f88:	eea3 7b46 	vfms.f64	d7, d3, d6
 8010f8c:	d133      	bne.n	8010ff6 <_dtoa_r+0x5f6>
 8010f8e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010f92:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f9a:	dc1a      	bgt.n	8010fd2 <_dtoa_r+0x5d2>
 8010f9c:	eeb4 7b46 	vcmp.f64	d7, d6
 8010fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fa4:	d103      	bne.n	8010fae <_dtoa_r+0x5ae>
 8010fa6:	ee15 3a10 	vmov	r3, s10
 8010faa:	07d9      	lsls	r1, r3, #31
 8010fac:	d411      	bmi.n	8010fd2 <_dtoa_r+0x5d2>
 8010fae:	4629      	mov	r1, r5
 8010fb0:	4630      	mov	r0, r6
 8010fb2:	f000 fbd1 	bl	8011758 <_Bfree>
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010fba:	f888 3000 	strb.w	r3, [r8]
 8010fbe:	f10b 0301 	add.w	r3, fp, #1
 8010fc2:	6013      	str	r3, [r2, #0]
 8010fc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	f43f ad69 	beq.w	8010a9e <_dtoa_r+0x9e>
 8010fcc:	f8c3 8000 	str.w	r8, [r3]
 8010fd0:	e565      	b.n	8010a9e <_dtoa_r+0x9e>
 8010fd2:	465a      	mov	r2, fp
 8010fd4:	4643      	mov	r3, r8
 8010fd6:	4698      	mov	r8, r3
 8010fd8:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8010fdc:	2939      	cmp	r1, #57	; 0x39
 8010fde:	d106      	bne.n	8010fee <_dtoa_r+0x5ee>
 8010fe0:	9901      	ldr	r1, [sp, #4]
 8010fe2:	4299      	cmp	r1, r3
 8010fe4:	d1f7      	bne.n	8010fd6 <_dtoa_r+0x5d6>
 8010fe6:	9801      	ldr	r0, [sp, #4]
 8010fe8:	2130      	movs	r1, #48	; 0x30
 8010fea:	3201      	adds	r2, #1
 8010fec:	7001      	strb	r1, [r0, #0]
 8010fee:	7819      	ldrb	r1, [r3, #0]
 8010ff0:	3101      	adds	r1, #1
 8010ff2:	7019      	strb	r1, [r3, #0]
 8010ff4:	e7ae      	b.n	8010f54 <_dtoa_r+0x554>
 8010ff6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010ffa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011002:	d1b2      	bne.n	8010f6a <_dtoa_r+0x56a>
 8011004:	e7d3      	b.n	8010fae <_dtoa_r+0x5ae>
 8011006:	bf00      	nop
 8011008:	08012c00 	.word	0x08012c00
 801100c:	08012bd8 	.word	0x08012bd8
 8011010:	9907      	ldr	r1, [sp, #28]
 8011012:	2900      	cmp	r1, #0
 8011014:	f000 80d0 	beq.w	80111b8 <_dtoa_r+0x7b8>
 8011018:	9906      	ldr	r1, [sp, #24]
 801101a:	2901      	cmp	r1, #1
 801101c:	f300 80b4 	bgt.w	8011188 <_dtoa_r+0x788>
 8011020:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011022:	2900      	cmp	r1, #0
 8011024:	f000 80ac 	beq.w	8011180 <_dtoa_r+0x780>
 8011028:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801102c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8011030:	461c      	mov	r4, r3
 8011032:	9309      	str	r3, [sp, #36]	; 0x24
 8011034:	9b04      	ldr	r3, [sp, #16]
 8011036:	4413      	add	r3, r2
 8011038:	9304      	str	r3, [sp, #16]
 801103a:	9b05      	ldr	r3, [sp, #20]
 801103c:	2101      	movs	r1, #1
 801103e:	4413      	add	r3, r2
 8011040:	4630      	mov	r0, r6
 8011042:	9305      	str	r3, [sp, #20]
 8011044:	f000 fc3e 	bl	80118c4 <__i2b>
 8011048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801104a:	4607      	mov	r7, r0
 801104c:	f1b8 0f00 	cmp.w	r8, #0
 8011050:	d00d      	beq.n	801106e <_dtoa_r+0x66e>
 8011052:	9a05      	ldr	r2, [sp, #20]
 8011054:	2a00      	cmp	r2, #0
 8011056:	dd0a      	ble.n	801106e <_dtoa_r+0x66e>
 8011058:	4542      	cmp	r2, r8
 801105a:	9904      	ldr	r1, [sp, #16]
 801105c:	bfa8      	it	ge
 801105e:	4642      	movge	r2, r8
 8011060:	1a89      	subs	r1, r1, r2
 8011062:	9104      	str	r1, [sp, #16]
 8011064:	9905      	ldr	r1, [sp, #20]
 8011066:	eba8 0802 	sub.w	r8, r8, r2
 801106a:	1a8a      	subs	r2, r1, r2
 801106c:	9205      	str	r2, [sp, #20]
 801106e:	b303      	cbz	r3, 80110b2 <_dtoa_r+0x6b2>
 8011070:	9a07      	ldr	r2, [sp, #28]
 8011072:	2a00      	cmp	r2, #0
 8011074:	f000 80a5 	beq.w	80111c2 <_dtoa_r+0x7c2>
 8011078:	2c00      	cmp	r4, #0
 801107a:	dd13      	ble.n	80110a4 <_dtoa_r+0x6a4>
 801107c:	4639      	mov	r1, r7
 801107e:	4622      	mov	r2, r4
 8011080:	4630      	mov	r0, r6
 8011082:	930d      	str	r3, [sp, #52]	; 0x34
 8011084:	f000 fcde 	bl	8011a44 <__pow5mult>
 8011088:	462a      	mov	r2, r5
 801108a:	4601      	mov	r1, r0
 801108c:	4607      	mov	r7, r0
 801108e:	4630      	mov	r0, r6
 8011090:	f000 fc2e 	bl	80118f0 <__multiply>
 8011094:	4629      	mov	r1, r5
 8011096:	9009      	str	r0, [sp, #36]	; 0x24
 8011098:	4630      	mov	r0, r6
 801109a:	f000 fb5d 	bl	8011758 <_Bfree>
 801109e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80110a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80110a2:	4615      	mov	r5, r2
 80110a4:	1b1a      	subs	r2, r3, r4
 80110a6:	d004      	beq.n	80110b2 <_dtoa_r+0x6b2>
 80110a8:	4629      	mov	r1, r5
 80110aa:	4630      	mov	r0, r6
 80110ac:	f000 fcca 	bl	8011a44 <__pow5mult>
 80110b0:	4605      	mov	r5, r0
 80110b2:	2101      	movs	r1, #1
 80110b4:	4630      	mov	r0, r6
 80110b6:	f000 fc05 	bl	80118c4 <__i2b>
 80110ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110bc:	2b00      	cmp	r3, #0
 80110be:	4604      	mov	r4, r0
 80110c0:	f340 8081 	ble.w	80111c6 <_dtoa_r+0x7c6>
 80110c4:	461a      	mov	r2, r3
 80110c6:	4601      	mov	r1, r0
 80110c8:	4630      	mov	r0, r6
 80110ca:	f000 fcbb 	bl	8011a44 <__pow5mult>
 80110ce:	9b06      	ldr	r3, [sp, #24]
 80110d0:	2b01      	cmp	r3, #1
 80110d2:	4604      	mov	r4, r0
 80110d4:	dd7a      	ble.n	80111cc <_dtoa_r+0x7cc>
 80110d6:	2300      	movs	r3, #0
 80110d8:	9309      	str	r3, [sp, #36]	; 0x24
 80110da:	6922      	ldr	r2, [r4, #16]
 80110dc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80110e0:	6910      	ldr	r0, [r2, #16]
 80110e2:	f000 fba1 	bl	8011828 <__hi0bits>
 80110e6:	f1c0 0020 	rsb	r0, r0, #32
 80110ea:	9b05      	ldr	r3, [sp, #20]
 80110ec:	4418      	add	r0, r3
 80110ee:	f010 001f 	ands.w	r0, r0, #31
 80110f2:	f000 8093 	beq.w	801121c <_dtoa_r+0x81c>
 80110f6:	f1c0 0220 	rsb	r2, r0, #32
 80110fa:	2a04      	cmp	r2, #4
 80110fc:	f340 8085 	ble.w	801120a <_dtoa_r+0x80a>
 8011100:	9b04      	ldr	r3, [sp, #16]
 8011102:	f1c0 001c 	rsb	r0, r0, #28
 8011106:	4403      	add	r3, r0
 8011108:	9304      	str	r3, [sp, #16]
 801110a:	9b05      	ldr	r3, [sp, #20]
 801110c:	4480      	add	r8, r0
 801110e:	4403      	add	r3, r0
 8011110:	9305      	str	r3, [sp, #20]
 8011112:	9b04      	ldr	r3, [sp, #16]
 8011114:	2b00      	cmp	r3, #0
 8011116:	dd05      	ble.n	8011124 <_dtoa_r+0x724>
 8011118:	4629      	mov	r1, r5
 801111a:	461a      	mov	r2, r3
 801111c:	4630      	mov	r0, r6
 801111e:	f000 fceb 	bl	8011af8 <__lshift>
 8011122:	4605      	mov	r5, r0
 8011124:	9b05      	ldr	r3, [sp, #20]
 8011126:	2b00      	cmp	r3, #0
 8011128:	dd05      	ble.n	8011136 <_dtoa_r+0x736>
 801112a:	4621      	mov	r1, r4
 801112c:	461a      	mov	r2, r3
 801112e:	4630      	mov	r0, r6
 8011130:	f000 fce2 	bl	8011af8 <__lshift>
 8011134:	4604      	mov	r4, r0
 8011136:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011138:	2b00      	cmp	r3, #0
 801113a:	d071      	beq.n	8011220 <_dtoa_r+0x820>
 801113c:	4621      	mov	r1, r4
 801113e:	4628      	mov	r0, r5
 8011140:	f000 fd46 	bl	8011bd0 <__mcmp>
 8011144:	2800      	cmp	r0, #0
 8011146:	da6b      	bge.n	8011220 <_dtoa_r+0x820>
 8011148:	2300      	movs	r3, #0
 801114a:	4629      	mov	r1, r5
 801114c:	220a      	movs	r2, #10
 801114e:	4630      	mov	r0, r6
 8011150:	f000 fb24 	bl	801179c <__multadd>
 8011154:	9b07      	ldr	r3, [sp, #28]
 8011156:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801115a:	4605      	mov	r5, r0
 801115c:	2b00      	cmp	r3, #0
 801115e:	f000 8197 	beq.w	8011490 <_dtoa_r+0xa90>
 8011162:	4639      	mov	r1, r7
 8011164:	2300      	movs	r3, #0
 8011166:	220a      	movs	r2, #10
 8011168:	4630      	mov	r0, r6
 801116a:	f000 fb17 	bl	801179c <__multadd>
 801116e:	f1ba 0f00 	cmp.w	sl, #0
 8011172:	4607      	mov	r7, r0
 8011174:	f300 8093 	bgt.w	801129e <_dtoa_r+0x89e>
 8011178:	9b06      	ldr	r3, [sp, #24]
 801117a:	2b02      	cmp	r3, #2
 801117c:	dc57      	bgt.n	801122e <_dtoa_r+0x82e>
 801117e:	e08e      	b.n	801129e <_dtoa_r+0x89e>
 8011180:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011182:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011186:	e751      	b.n	801102c <_dtoa_r+0x62c>
 8011188:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 801118c:	42a3      	cmp	r3, r4
 801118e:	bfbf      	itttt	lt
 8011190:	1ae2      	sublt	r2, r4, r3
 8011192:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8011194:	189b      	addlt	r3, r3, r2
 8011196:	930a      	strlt	r3, [sp, #40]	; 0x28
 8011198:	bfae      	itee	ge
 801119a:	1b1c      	subge	r4, r3, r4
 801119c:	4623      	movlt	r3, r4
 801119e:	2400      	movlt	r4, #0
 80111a0:	f1b9 0f00 	cmp.w	r9, #0
 80111a4:	bfb5      	itete	lt
 80111a6:	9a04      	ldrlt	r2, [sp, #16]
 80111a8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80111ac:	eba2 0809 	sublt.w	r8, r2, r9
 80111b0:	464a      	movge	r2, r9
 80111b2:	bfb8      	it	lt
 80111b4:	2200      	movlt	r2, #0
 80111b6:	e73c      	b.n	8011032 <_dtoa_r+0x632>
 80111b8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80111bc:	9f07      	ldr	r7, [sp, #28]
 80111be:	461c      	mov	r4, r3
 80111c0:	e744      	b.n	801104c <_dtoa_r+0x64c>
 80111c2:	461a      	mov	r2, r3
 80111c4:	e770      	b.n	80110a8 <_dtoa_r+0x6a8>
 80111c6:	9b06      	ldr	r3, [sp, #24]
 80111c8:	2b01      	cmp	r3, #1
 80111ca:	dc18      	bgt.n	80111fe <_dtoa_r+0x7fe>
 80111cc:	9b02      	ldr	r3, [sp, #8]
 80111ce:	b9b3      	cbnz	r3, 80111fe <_dtoa_r+0x7fe>
 80111d0:	9b03      	ldr	r3, [sp, #12]
 80111d2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80111d6:	b9a2      	cbnz	r2, 8011202 <_dtoa_r+0x802>
 80111d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80111dc:	0d12      	lsrs	r2, r2, #20
 80111de:	0512      	lsls	r2, r2, #20
 80111e0:	b18a      	cbz	r2, 8011206 <_dtoa_r+0x806>
 80111e2:	9b04      	ldr	r3, [sp, #16]
 80111e4:	3301      	adds	r3, #1
 80111e6:	9304      	str	r3, [sp, #16]
 80111e8:	9b05      	ldr	r3, [sp, #20]
 80111ea:	3301      	adds	r3, #1
 80111ec:	9305      	str	r3, [sp, #20]
 80111ee:	2301      	movs	r3, #1
 80111f0:	9309      	str	r3, [sp, #36]	; 0x24
 80111f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	f47f af70 	bne.w	80110da <_dtoa_r+0x6da>
 80111fa:	2001      	movs	r0, #1
 80111fc:	e775      	b.n	80110ea <_dtoa_r+0x6ea>
 80111fe:	2300      	movs	r3, #0
 8011200:	e7f6      	b.n	80111f0 <_dtoa_r+0x7f0>
 8011202:	9b02      	ldr	r3, [sp, #8]
 8011204:	e7f4      	b.n	80111f0 <_dtoa_r+0x7f0>
 8011206:	9209      	str	r2, [sp, #36]	; 0x24
 8011208:	e7f3      	b.n	80111f2 <_dtoa_r+0x7f2>
 801120a:	d082      	beq.n	8011112 <_dtoa_r+0x712>
 801120c:	9b04      	ldr	r3, [sp, #16]
 801120e:	321c      	adds	r2, #28
 8011210:	4413      	add	r3, r2
 8011212:	9304      	str	r3, [sp, #16]
 8011214:	9b05      	ldr	r3, [sp, #20]
 8011216:	4490      	add	r8, r2
 8011218:	4413      	add	r3, r2
 801121a:	e779      	b.n	8011110 <_dtoa_r+0x710>
 801121c:	4602      	mov	r2, r0
 801121e:	e7f5      	b.n	801120c <_dtoa_r+0x80c>
 8011220:	f1b9 0f00 	cmp.w	r9, #0
 8011224:	dc36      	bgt.n	8011294 <_dtoa_r+0x894>
 8011226:	9b06      	ldr	r3, [sp, #24]
 8011228:	2b02      	cmp	r3, #2
 801122a:	dd33      	ble.n	8011294 <_dtoa_r+0x894>
 801122c:	46ca      	mov	sl, r9
 801122e:	f1ba 0f00 	cmp.w	sl, #0
 8011232:	d10d      	bne.n	8011250 <_dtoa_r+0x850>
 8011234:	4621      	mov	r1, r4
 8011236:	4653      	mov	r3, sl
 8011238:	2205      	movs	r2, #5
 801123a:	4630      	mov	r0, r6
 801123c:	f000 faae 	bl	801179c <__multadd>
 8011240:	4601      	mov	r1, r0
 8011242:	4604      	mov	r4, r0
 8011244:	4628      	mov	r0, r5
 8011246:	f000 fcc3 	bl	8011bd0 <__mcmp>
 801124a:	2800      	cmp	r0, #0
 801124c:	f73f ade4 	bgt.w	8010e18 <_dtoa_r+0x418>
 8011250:	9b08      	ldr	r3, [sp, #32]
 8011252:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011256:	ea6f 0b03 	mvn.w	fp, r3
 801125a:	f04f 0900 	mov.w	r9, #0
 801125e:	4621      	mov	r1, r4
 8011260:	4630      	mov	r0, r6
 8011262:	f000 fa79 	bl	8011758 <_Bfree>
 8011266:	2f00      	cmp	r7, #0
 8011268:	f43f aea1 	beq.w	8010fae <_dtoa_r+0x5ae>
 801126c:	f1b9 0f00 	cmp.w	r9, #0
 8011270:	d005      	beq.n	801127e <_dtoa_r+0x87e>
 8011272:	45b9      	cmp	r9, r7
 8011274:	d003      	beq.n	801127e <_dtoa_r+0x87e>
 8011276:	4649      	mov	r1, r9
 8011278:	4630      	mov	r0, r6
 801127a:	f000 fa6d 	bl	8011758 <_Bfree>
 801127e:	4639      	mov	r1, r7
 8011280:	4630      	mov	r0, r6
 8011282:	f000 fa69 	bl	8011758 <_Bfree>
 8011286:	e692      	b.n	8010fae <_dtoa_r+0x5ae>
 8011288:	2400      	movs	r4, #0
 801128a:	4627      	mov	r7, r4
 801128c:	e7e0      	b.n	8011250 <_dtoa_r+0x850>
 801128e:	4693      	mov	fp, r2
 8011290:	4627      	mov	r7, r4
 8011292:	e5c1      	b.n	8010e18 <_dtoa_r+0x418>
 8011294:	9b07      	ldr	r3, [sp, #28]
 8011296:	46ca      	mov	sl, r9
 8011298:	2b00      	cmp	r3, #0
 801129a:	f000 8100 	beq.w	801149e <_dtoa_r+0xa9e>
 801129e:	f1b8 0f00 	cmp.w	r8, #0
 80112a2:	dd05      	ble.n	80112b0 <_dtoa_r+0x8b0>
 80112a4:	4639      	mov	r1, r7
 80112a6:	4642      	mov	r2, r8
 80112a8:	4630      	mov	r0, r6
 80112aa:	f000 fc25 	bl	8011af8 <__lshift>
 80112ae:	4607      	mov	r7, r0
 80112b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d05d      	beq.n	8011372 <_dtoa_r+0x972>
 80112b6:	6879      	ldr	r1, [r7, #4]
 80112b8:	4630      	mov	r0, r6
 80112ba:	f000 fa0d 	bl	80116d8 <_Balloc>
 80112be:	4680      	mov	r8, r0
 80112c0:	b928      	cbnz	r0, 80112ce <_dtoa_r+0x8ce>
 80112c2:	4b82      	ldr	r3, [pc, #520]	; (80114cc <_dtoa_r+0xacc>)
 80112c4:	4602      	mov	r2, r0
 80112c6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80112ca:	f7ff bbb1 	b.w	8010a30 <_dtoa_r+0x30>
 80112ce:	693a      	ldr	r2, [r7, #16]
 80112d0:	3202      	adds	r2, #2
 80112d2:	0092      	lsls	r2, r2, #2
 80112d4:	f107 010c 	add.w	r1, r7, #12
 80112d8:	300c      	adds	r0, #12
 80112da:	f7ff faf8 	bl	80108ce <memcpy>
 80112de:	2201      	movs	r2, #1
 80112e0:	4641      	mov	r1, r8
 80112e2:	4630      	mov	r0, r6
 80112e4:	f000 fc08 	bl	8011af8 <__lshift>
 80112e8:	9b01      	ldr	r3, [sp, #4]
 80112ea:	3301      	adds	r3, #1
 80112ec:	9304      	str	r3, [sp, #16]
 80112ee:	9b01      	ldr	r3, [sp, #4]
 80112f0:	4453      	add	r3, sl
 80112f2:	9308      	str	r3, [sp, #32]
 80112f4:	9b02      	ldr	r3, [sp, #8]
 80112f6:	f003 0301 	and.w	r3, r3, #1
 80112fa:	46b9      	mov	r9, r7
 80112fc:	9307      	str	r3, [sp, #28]
 80112fe:	4607      	mov	r7, r0
 8011300:	9b04      	ldr	r3, [sp, #16]
 8011302:	4621      	mov	r1, r4
 8011304:	3b01      	subs	r3, #1
 8011306:	4628      	mov	r0, r5
 8011308:	9302      	str	r3, [sp, #8]
 801130a:	f7ff faee 	bl	80108ea <quorem>
 801130e:	4603      	mov	r3, r0
 8011310:	3330      	adds	r3, #48	; 0x30
 8011312:	9005      	str	r0, [sp, #20]
 8011314:	4649      	mov	r1, r9
 8011316:	4628      	mov	r0, r5
 8011318:	9309      	str	r3, [sp, #36]	; 0x24
 801131a:	f000 fc59 	bl	8011bd0 <__mcmp>
 801131e:	463a      	mov	r2, r7
 8011320:	4682      	mov	sl, r0
 8011322:	4621      	mov	r1, r4
 8011324:	4630      	mov	r0, r6
 8011326:	f000 fc6f 	bl	8011c08 <__mdiff>
 801132a:	68c2      	ldr	r2, [r0, #12]
 801132c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801132e:	4680      	mov	r8, r0
 8011330:	bb0a      	cbnz	r2, 8011376 <_dtoa_r+0x976>
 8011332:	4601      	mov	r1, r0
 8011334:	4628      	mov	r0, r5
 8011336:	f000 fc4b 	bl	8011bd0 <__mcmp>
 801133a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801133c:	4602      	mov	r2, r0
 801133e:	4641      	mov	r1, r8
 8011340:	4630      	mov	r0, r6
 8011342:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8011346:	f000 fa07 	bl	8011758 <_Bfree>
 801134a:	9b06      	ldr	r3, [sp, #24]
 801134c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801134e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8011352:	ea43 0102 	orr.w	r1, r3, r2
 8011356:	9b07      	ldr	r3, [sp, #28]
 8011358:	4319      	orrs	r1, r3
 801135a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801135c:	d10d      	bne.n	801137a <_dtoa_r+0x97a>
 801135e:	2b39      	cmp	r3, #57	; 0x39
 8011360:	d029      	beq.n	80113b6 <_dtoa_r+0x9b6>
 8011362:	f1ba 0f00 	cmp.w	sl, #0
 8011366:	dd01      	ble.n	801136c <_dtoa_r+0x96c>
 8011368:	9b05      	ldr	r3, [sp, #20]
 801136a:	3331      	adds	r3, #49	; 0x31
 801136c:	9a02      	ldr	r2, [sp, #8]
 801136e:	7013      	strb	r3, [r2, #0]
 8011370:	e775      	b.n	801125e <_dtoa_r+0x85e>
 8011372:	4638      	mov	r0, r7
 8011374:	e7b8      	b.n	80112e8 <_dtoa_r+0x8e8>
 8011376:	2201      	movs	r2, #1
 8011378:	e7e1      	b.n	801133e <_dtoa_r+0x93e>
 801137a:	f1ba 0f00 	cmp.w	sl, #0
 801137e:	db06      	blt.n	801138e <_dtoa_r+0x98e>
 8011380:	9906      	ldr	r1, [sp, #24]
 8011382:	ea41 0a0a 	orr.w	sl, r1, sl
 8011386:	9907      	ldr	r1, [sp, #28]
 8011388:	ea5a 0a01 	orrs.w	sl, sl, r1
 801138c:	d120      	bne.n	80113d0 <_dtoa_r+0x9d0>
 801138e:	2a00      	cmp	r2, #0
 8011390:	ddec      	ble.n	801136c <_dtoa_r+0x96c>
 8011392:	4629      	mov	r1, r5
 8011394:	2201      	movs	r2, #1
 8011396:	4630      	mov	r0, r6
 8011398:	9304      	str	r3, [sp, #16]
 801139a:	f000 fbad 	bl	8011af8 <__lshift>
 801139e:	4621      	mov	r1, r4
 80113a0:	4605      	mov	r5, r0
 80113a2:	f000 fc15 	bl	8011bd0 <__mcmp>
 80113a6:	2800      	cmp	r0, #0
 80113a8:	9b04      	ldr	r3, [sp, #16]
 80113aa:	dc02      	bgt.n	80113b2 <_dtoa_r+0x9b2>
 80113ac:	d1de      	bne.n	801136c <_dtoa_r+0x96c>
 80113ae:	07da      	lsls	r2, r3, #31
 80113b0:	d5dc      	bpl.n	801136c <_dtoa_r+0x96c>
 80113b2:	2b39      	cmp	r3, #57	; 0x39
 80113b4:	d1d8      	bne.n	8011368 <_dtoa_r+0x968>
 80113b6:	9a02      	ldr	r2, [sp, #8]
 80113b8:	2339      	movs	r3, #57	; 0x39
 80113ba:	7013      	strb	r3, [r2, #0]
 80113bc:	4643      	mov	r3, r8
 80113be:	4698      	mov	r8, r3
 80113c0:	3b01      	subs	r3, #1
 80113c2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80113c6:	2a39      	cmp	r2, #57	; 0x39
 80113c8:	d051      	beq.n	801146e <_dtoa_r+0xa6e>
 80113ca:	3201      	adds	r2, #1
 80113cc:	701a      	strb	r2, [r3, #0]
 80113ce:	e746      	b.n	801125e <_dtoa_r+0x85e>
 80113d0:	2a00      	cmp	r2, #0
 80113d2:	dd03      	ble.n	80113dc <_dtoa_r+0x9dc>
 80113d4:	2b39      	cmp	r3, #57	; 0x39
 80113d6:	d0ee      	beq.n	80113b6 <_dtoa_r+0x9b6>
 80113d8:	3301      	adds	r3, #1
 80113da:	e7c7      	b.n	801136c <_dtoa_r+0x96c>
 80113dc:	9a04      	ldr	r2, [sp, #16]
 80113de:	9908      	ldr	r1, [sp, #32]
 80113e0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80113e4:	428a      	cmp	r2, r1
 80113e6:	d02b      	beq.n	8011440 <_dtoa_r+0xa40>
 80113e8:	4629      	mov	r1, r5
 80113ea:	2300      	movs	r3, #0
 80113ec:	220a      	movs	r2, #10
 80113ee:	4630      	mov	r0, r6
 80113f0:	f000 f9d4 	bl	801179c <__multadd>
 80113f4:	45b9      	cmp	r9, r7
 80113f6:	4605      	mov	r5, r0
 80113f8:	f04f 0300 	mov.w	r3, #0
 80113fc:	f04f 020a 	mov.w	r2, #10
 8011400:	4649      	mov	r1, r9
 8011402:	4630      	mov	r0, r6
 8011404:	d107      	bne.n	8011416 <_dtoa_r+0xa16>
 8011406:	f000 f9c9 	bl	801179c <__multadd>
 801140a:	4681      	mov	r9, r0
 801140c:	4607      	mov	r7, r0
 801140e:	9b04      	ldr	r3, [sp, #16]
 8011410:	3301      	adds	r3, #1
 8011412:	9304      	str	r3, [sp, #16]
 8011414:	e774      	b.n	8011300 <_dtoa_r+0x900>
 8011416:	f000 f9c1 	bl	801179c <__multadd>
 801141a:	4639      	mov	r1, r7
 801141c:	4681      	mov	r9, r0
 801141e:	2300      	movs	r3, #0
 8011420:	220a      	movs	r2, #10
 8011422:	4630      	mov	r0, r6
 8011424:	f000 f9ba 	bl	801179c <__multadd>
 8011428:	4607      	mov	r7, r0
 801142a:	e7f0      	b.n	801140e <_dtoa_r+0xa0e>
 801142c:	f1ba 0f00 	cmp.w	sl, #0
 8011430:	9a01      	ldr	r2, [sp, #4]
 8011432:	bfcc      	ite	gt
 8011434:	46d0      	movgt	r8, sl
 8011436:	f04f 0801 	movle.w	r8, #1
 801143a:	4490      	add	r8, r2
 801143c:	f04f 0900 	mov.w	r9, #0
 8011440:	4629      	mov	r1, r5
 8011442:	2201      	movs	r2, #1
 8011444:	4630      	mov	r0, r6
 8011446:	9302      	str	r3, [sp, #8]
 8011448:	f000 fb56 	bl	8011af8 <__lshift>
 801144c:	4621      	mov	r1, r4
 801144e:	4605      	mov	r5, r0
 8011450:	f000 fbbe 	bl	8011bd0 <__mcmp>
 8011454:	2800      	cmp	r0, #0
 8011456:	dcb1      	bgt.n	80113bc <_dtoa_r+0x9bc>
 8011458:	d102      	bne.n	8011460 <_dtoa_r+0xa60>
 801145a:	9b02      	ldr	r3, [sp, #8]
 801145c:	07db      	lsls	r3, r3, #31
 801145e:	d4ad      	bmi.n	80113bc <_dtoa_r+0x9bc>
 8011460:	4643      	mov	r3, r8
 8011462:	4698      	mov	r8, r3
 8011464:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011468:	2a30      	cmp	r2, #48	; 0x30
 801146a:	d0fa      	beq.n	8011462 <_dtoa_r+0xa62>
 801146c:	e6f7      	b.n	801125e <_dtoa_r+0x85e>
 801146e:	9a01      	ldr	r2, [sp, #4]
 8011470:	429a      	cmp	r2, r3
 8011472:	d1a4      	bne.n	80113be <_dtoa_r+0x9be>
 8011474:	f10b 0b01 	add.w	fp, fp, #1
 8011478:	2331      	movs	r3, #49	; 0x31
 801147a:	e778      	b.n	801136e <_dtoa_r+0x96e>
 801147c:	4b14      	ldr	r3, [pc, #80]	; (80114d0 <_dtoa_r+0xad0>)
 801147e:	f7ff bb2a 	b.w	8010ad6 <_dtoa_r+0xd6>
 8011482:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011484:	2b00      	cmp	r3, #0
 8011486:	f47f ab05 	bne.w	8010a94 <_dtoa_r+0x94>
 801148a:	4b12      	ldr	r3, [pc, #72]	; (80114d4 <_dtoa_r+0xad4>)
 801148c:	f7ff bb23 	b.w	8010ad6 <_dtoa_r+0xd6>
 8011490:	f1ba 0f00 	cmp.w	sl, #0
 8011494:	dc03      	bgt.n	801149e <_dtoa_r+0xa9e>
 8011496:	9b06      	ldr	r3, [sp, #24]
 8011498:	2b02      	cmp	r3, #2
 801149a:	f73f aec8 	bgt.w	801122e <_dtoa_r+0x82e>
 801149e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80114a2:	4621      	mov	r1, r4
 80114a4:	4628      	mov	r0, r5
 80114a6:	f7ff fa20 	bl	80108ea <quorem>
 80114aa:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80114ae:	f808 3b01 	strb.w	r3, [r8], #1
 80114b2:	9a01      	ldr	r2, [sp, #4]
 80114b4:	eba8 0202 	sub.w	r2, r8, r2
 80114b8:	4592      	cmp	sl, r2
 80114ba:	ddb7      	ble.n	801142c <_dtoa_r+0xa2c>
 80114bc:	4629      	mov	r1, r5
 80114be:	2300      	movs	r3, #0
 80114c0:	220a      	movs	r2, #10
 80114c2:	4630      	mov	r0, r6
 80114c4:	f000 f96a 	bl	801179c <__multadd>
 80114c8:	4605      	mov	r5, r0
 80114ca:	e7ea      	b.n	80114a2 <_dtoa_r+0xaa2>
 80114cc:	08012b68 	.word	0x08012b68
 80114d0:	08012ac8 	.word	0x08012ac8
 80114d4:	08012aec 	.word	0x08012aec

080114d8 <_free_r>:
 80114d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80114da:	2900      	cmp	r1, #0
 80114dc:	d044      	beq.n	8011568 <_free_r+0x90>
 80114de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80114e2:	9001      	str	r0, [sp, #4]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	f1a1 0404 	sub.w	r4, r1, #4
 80114ea:	bfb8      	it	lt
 80114ec:	18e4      	addlt	r4, r4, r3
 80114ee:	f000 f8e7 	bl	80116c0 <__malloc_lock>
 80114f2:	4a1e      	ldr	r2, [pc, #120]	; (801156c <_free_r+0x94>)
 80114f4:	9801      	ldr	r0, [sp, #4]
 80114f6:	6813      	ldr	r3, [r2, #0]
 80114f8:	b933      	cbnz	r3, 8011508 <_free_r+0x30>
 80114fa:	6063      	str	r3, [r4, #4]
 80114fc:	6014      	str	r4, [r2, #0]
 80114fe:	b003      	add	sp, #12
 8011500:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011504:	f000 b8e2 	b.w	80116cc <__malloc_unlock>
 8011508:	42a3      	cmp	r3, r4
 801150a:	d908      	bls.n	801151e <_free_r+0x46>
 801150c:	6825      	ldr	r5, [r4, #0]
 801150e:	1961      	adds	r1, r4, r5
 8011510:	428b      	cmp	r3, r1
 8011512:	bf01      	itttt	eq
 8011514:	6819      	ldreq	r1, [r3, #0]
 8011516:	685b      	ldreq	r3, [r3, #4]
 8011518:	1949      	addeq	r1, r1, r5
 801151a:	6021      	streq	r1, [r4, #0]
 801151c:	e7ed      	b.n	80114fa <_free_r+0x22>
 801151e:	461a      	mov	r2, r3
 8011520:	685b      	ldr	r3, [r3, #4]
 8011522:	b10b      	cbz	r3, 8011528 <_free_r+0x50>
 8011524:	42a3      	cmp	r3, r4
 8011526:	d9fa      	bls.n	801151e <_free_r+0x46>
 8011528:	6811      	ldr	r1, [r2, #0]
 801152a:	1855      	adds	r5, r2, r1
 801152c:	42a5      	cmp	r5, r4
 801152e:	d10b      	bne.n	8011548 <_free_r+0x70>
 8011530:	6824      	ldr	r4, [r4, #0]
 8011532:	4421      	add	r1, r4
 8011534:	1854      	adds	r4, r2, r1
 8011536:	42a3      	cmp	r3, r4
 8011538:	6011      	str	r1, [r2, #0]
 801153a:	d1e0      	bne.n	80114fe <_free_r+0x26>
 801153c:	681c      	ldr	r4, [r3, #0]
 801153e:	685b      	ldr	r3, [r3, #4]
 8011540:	6053      	str	r3, [r2, #4]
 8011542:	440c      	add	r4, r1
 8011544:	6014      	str	r4, [r2, #0]
 8011546:	e7da      	b.n	80114fe <_free_r+0x26>
 8011548:	d902      	bls.n	8011550 <_free_r+0x78>
 801154a:	230c      	movs	r3, #12
 801154c:	6003      	str	r3, [r0, #0]
 801154e:	e7d6      	b.n	80114fe <_free_r+0x26>
 8011550:	6825      	ldr	r5, [r4, #0]
 8011552:	1961      	adds	r1, r4, r5
 8011554:	428b      	cmp	r3, r1
 8011556:	bf04      	itt	eq
 8011558:	6819      	ldreq	r1, [r3, #0]
 801155a:	685b      	ldreq	r3, [r3, #4]
 801155c:	6063      	str	r3, [r4, #4]
 801155e:	bf04      	itt	eq
 8011560:	1949      	addeq	r1, r1, r5
 8011562:	6021      	streq	r1, [r4, #0]
 8011564:	6054      	str	r4, [r2, #4]
 8011566:	e7ca      	b.n	80114fe <_free_r+0x26>
 8011568:	b003      	add	sp, #12
 801156a:	bd30      	pop	{r4, r5, pc}
 801156c:	240009a8 	.word	0x240009a8

08011570 <malloc>:
 8011570:	4b02      	ldr	r3, [pc, #8]	; (801157c <malloc+0xc>)
 8011572:	4601      	mov	r1, r0
 8011574:	6818      	ldr	r0, [r3, #0]
 8011576:	f000 b823 	b.w	80115c0 <_malloc_r>
 801157a:	bf00      	nop
 801157c:	2400006c 	.word	0x2400006c

08011580 <sbrk_aligned>:
 8011580:	b570      	push	{r4, r5, r6, lr}
 8011582:	4e0e      	ldr	r6, [pc, #56]	; (80115bc <sbrk_aligned+0x3c>)
 8011584:	460c      	mov	r4, r1
 8011586:	6831      	ldr	r1, [r6, #0]
 8011588:	4605      	mov	r5, r0
 801158a:	b911      	cbnz	r1, 8011592 <sbrk_aligned+0x12>
 801158c:	f000 fe40 	bl	8012210 <_sbrk_r>
 8011590:	6030      	str	r0, [r6, #0]
 8011592:	4621      	mov	r1, r4
 8011594:	4628      	mov	r0, r5
 8011596:	f000 fe3b 	bl	8012210 <_sbrk_r>
 801159a:	1c43      	adds	r3, r0, #1
 801159c:	d00a      	beq.n	80115b4 <sbrk_aligned+0x34>
 801159e:	1cc4      	adds	r4, r0, #3
 80115a0:	f024 0403 	bic.w	r4, r4, #3
 80115a4:	42a0      	cmp	r0, r4
 80115a6:	d007      	beq.n	80115b8 <sbrk_aligned+0x38>
 80115a8:	1a21      	subs	r1, r4, r0
 80115aa:	4628      	mov	r0, r5
 80115ac:	f000 fe30 	bl	8012210 <_sbrk_r>
 80115b0:	3001      	adds	r0, #1
 80115b2:	d101      	bne.n	80115b8 <sbrk_aligned+0x38>
 80115b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80115b8:	4620      	mov	r0, r4
 80115ba:	bd70      	pop	{r4, r5, r6, pc}
 80115bc:	240009ac 	.word	0x240009ac

080115c0 <_malloc_r>:
 80115c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115c4:	1ccd      	adds	r5, r1, #3
 80115c6:	f025 0503 	bic.w	r5, r5, #3
 80115ca:	3508      	adds	r5, #8
 80115cc:	2d0c      	cmp	r5, #12
 80115ce:	bf38      	it	cc
 80115d0:	250c      	movcc	r5, #12
 80115d2:	2d00      	cmp	r5, #0
 80115d4:	4607      	mov	r7, r0
 80115d6:	db01      	blt.n	80115dc <_malloc_r+0x1c>
 80115d8:	42a9      	cmp	r1, r5
 80115da:	d905      	bls.n	80115e8 <_malloc_r+0x28>
 80115dc:	230c      	movs	r3, #12
 80115de:	603b      	str	r3, [r7, #0]
 80115e0:	2600      	movs	r6, #0
 80115e2:	4630      	mov	r0, r6
 80115e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80116bc <_malloc_r+0xfc>
 80115ec:	f000 f868 	bl	80116c0 <__malloc_lock>
 80115f0:	f8d8 3000 	ldr.w	r3, [r8]
 80115f4:	461c      	mov	r4, r3
 80115f6:	bb5c      	cbnz	r4, 8011650 <_malloc_r+0x90>
 80115f8:	4629      	mov	r1, r5
 80115fa:	4638      	mov	r0, r7
 80115fc:	f7ff ffc0 	bl	8011580 <sbrk_aligned>
 8011600:	1c43      	adds	r3, r0, #1
 8011602:	4604      	mov	r4, r0
 8011604:	d155      	bne.n	80116b2 <_malloc_r+0xf2>
 8011606:	f8d8 4000 	ldr.w	r4, [r8]
 801160a:	4626      	mov	r6, r4
 801160c:	2e00      	cmp	r6, #0
 801160e:	d145      	bne.n	801169c <_malloc_r+0xdc>
 8011610:	2c00      	cmp	r4, #0
 8011612:	d048      	beq.n	80116a6 <_malloc_r+0xe6>
 8011614:	6823      	ldr	r3, [r4, #0]
 8011616:	4631      	mov	r1, r6
 8011618:	4638      	mov	r0, r7
 801161a:	eb04 0903 	add.w	r9, r4, r3
 801161e:	f000 fdf7 	bl	8012210 <_sbrk_r>
 8011622:	4581      	cmp	r9, r0
 8011624:	d13f      	bne.n	80116a6 <_malloc_r+0xe6>
 8011626:	6821      	ldr	r1, [r4, #0]
 8011628:	1a6d      	subs	r5, r5, r1
 801162a:	4629      	mov	r1, r5
 801162c:	4638      	mov	r0, r7
 801162e:	f7ff ffa7 	bl	8011580 <sbrk_aligned>
 8011632:	3001      	adds	r0, #1
 8011634:	d037      	beq.n	80116a6 <_malloc_r+0xe6>
 8011636:	6823      	ldr	r3, [r4, #0]
 8011638:	442b      	add	r3, r5
 801163a:	6023      	str	r3, [r4, #0]
 801163c:	f8d8 3000 	ldr.w	r3, [r8]
 8011640:	2b00      	cmp	r3, #0
 8011642:	d038      	beq.n	80116b6 <_malloc_r+0xf6>
 8011644:	685a      	ldr	r2, [r3, #4]
 8011646:	42a2      	cmp	r2, r4
 8011648:	d12b      	bne.n	80116a2 <_malloc_r+0xe2>
 801164a:	2200      	movs	r2, #0
 801164c:	605a      	str	r2, [r3, #4]
 801164e:	e00f      	b.n	8011670 <_malloc_r+0xb0>
 8011650:	6822      	ldr	r2, [r4, #0]
 8011652:	1b52      	subs	r2, r2, r5
 8011654:	d41f      	bmi.n	8011696 <_malloc_r+0xd6>
 8011656:	2a0b      	cmp	r2, #11
 8011658:	d917      	bls.n	801168a <_malloc_r+0xca>
 801165a:	1961      	adds	r1, r4, r5
 801165c:	42a3      	cmp	r3, r4
 801165e:	6025      	str	r5, [r4, #0]
 8011660:	bf18      	it	ne
 8011662:	6059      	strne	r1, [r3, #4]
 8011664:	6863      	ldr	r3, [r4, #4]
 8011666:	bf08      	it	eq
 8011668:	f8c8 1000 	streq.w	r1, [r8]
 801166c:	5162      	str	r2, [r4, r5]
 801166e:	604b      	str	r3, [r1, #4]
 8011670:	4638      	mov	r0, r7
 8011672:	f104 060b 	add.w	r6, r4, #11
 8011676:	f000 f829 	bl	80116cc <__malloc_unlock>
 801167a:	f026 0607 	bic.w	r6, r6, #7
 801167e:	1d23      	adds	r3, r4, #4
 8011680:	1af2      	subs	r2, r6, r3
 8011682:	d0ae      	beq.n	80115e2 <_malloc_r+0x22>
 8011684:	1b9b      	subs	r3, r3, r6
 8011686:	50a3      	str	r3, [r4, r2]
 8011688:	e7ab      	b.n	80115e2 <_malloc_r+0x22>
 801168a:	42a3      	cmp	r3, r4
 801168c:	6862      	ldr	r2, [r4, #4]
 801168e:	d1dd      	bne.n	801164c <_malloc_r+0x8c>
 8011690:	f8c8 2000 	str.w	r2, [r8]
 8011694:	e7ec      	b.n	8011670 <_malloc_r+0xb0>
 8011696:	4623      	mov	r3, r4
 8011698:	6864      	ldr	r4, [r4, #4]
 801169a:	e7ac      	b.n	80115f6 <_malloc_r+0x36>
 801169c:	4634      	mov	r4, r6
 801169e:	6876      	ldr	r6, [r6, #4]
 80116a0:	e7b4      	b.n	801160c <_malloc_r+0x4c>
 80116a2:	4613      	mov	r3, r2
 80116a4:	e7cc      	b.n	8011640 <_malloc_r+0x80>
 80116a6:	230c      	movs	r3, #12
 80116a8:	603b      	str	r3, [r7, #0]
 80116aa:	4638      	mov	r0, r7
 80116ac:	f000 f80e 	bl	80116cc <__malloc_unlock>
 80116b0:	e797      	b.n	80115e2 <_malloc_r+0x22>
 80116b2:	6025      	str	r5, [r4, #0]
 80116b4:	e7dc      	b.n	8011670 <_malloc_r+0xb0>
 80116b6:	605b      	str	r3, [r3, #4]
 80116b8:	deff      	udf	#255	; 0xff
 80116ba:	bf00      	nop
 80116bc:	240009a8 	.word	0x240009a8

080116c0 <__malloc_lock>:
 80116c0:	4801      	ldr	r0, [pc, #4]	; (80116c8 <__malloc_lock+0x8>)
 80116c2:	f7ff b902 	b.w	80108ca <__retarget_lock_acquire_recursive>
 80116c6:	bf00      	nop
 80116c8:	240009a4 	.word	0x240009a4

080116cc <__malloc_unlock>:
 80116cc:	4801      	ldr	r0, [pc, #4]	; (80116d4 <__malloc_unlock+0x8>)
 80116ce:	f7ff b8fd 	b.w	80108cc <__retarget_lock_release_recursive>
 80116d2:	bf00      	nop
 80116d4:	240009a4 	.word	0x240009a4

080116d8 <_Balloc>:
 80116d8:	b570      	push	{r4, r5, r6, lr}
 80116da:	69c6      	ldr	r6, [r0, #28]
 80116dc:	4604      	mov	r4, r0
 80116de:	460d      	mov	r5, r1
 80116e0:	b976      	cbnz	r6, 8011700 <_Balloc+0x28>
 80116e2:	2010      	movs	r0, #16
 80116e4:	f7ff ff44 	bl	8011570 <malloc>
 80116e8:	4602      	mov	r2, r0
 80116ea:	61e0      	str	r0, [r4, #28]
 80116ec:	b920      	cbnz	r0, 80116f8 <_Balloc+0x20>
 80116ee:	4b18      	ldr	r3, [pc, #96]	; (8011750 <_Balloc+0x78>)
 80116f0:	4818      	ldr	r0, [pc, #96]	; (8011754 <_Balloc+0x7c>)
 80116f2:	216b      	movs	r1, #107	; 0x6b
 80116f4:	f000 fd9c 	bl	8012230 <__assert_func>
 80116f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80116fc:	6006      	str	r6, [r0, #0]
 80116fe:	60c6      	str	r6, [r0, #12]
 8011700:	69e6      	ldr	r6, [r4, #28]
 8011702:	68f3      	ldr	r3, [r6, #12]
 8011704:	b183      	cbz	r3, 8011728 <_Balloc+0x50>
 8011706:	69e3      	ldr	r3, [r4, #28]
 8011708:	68db      	ldr	r3, [r3, #12]
 801170a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801170e:	b9b8      	cbnz	r0, 8011740 <_Balloc+0x68>
 8011710:	2101      	movs	r1, #1
 8011712:	fa01 f605 	lsl.w	r6, r1, r5
 8011716:	1d72      	adds	r2, r6, #5
 8011718:	0092      	lsls	r2, r2, #2
 801171a:	4620      	mov	r0, r4
 801171c:	f000 fda6 	bl	801226c <_calloc_r>
 8011720:	b160      	cbz	r0, 801173c <_Balloc+0x64>
 8011722:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011726:	e00e      	b.n	8011746 <_Balloc+0x6e>
 8011728:	2221      	movs	r2, #33	; 0x21
 801172a:	2104      	movs	r1, #4
 801172c:	4620      	mov	r0, r4
 801172e:	f000 fd9d 	bl	801226c <_calloc_r>
 8011732:	69e3      	ldr	r3, [r4, #28]
 8011734:	60f0      	str	r0, [r6, #12]
 8011736:	68db      	ldr	r3, [r3, #12]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d1e4      	bne.n	8011706 <_Balloc+0x2e>
 801173c:	2000      	movs	r0, #0
 801173e:	bd70      	pop	{r4, r5, r6, pc}
 8011740:	6802      	ldr	r2, [r0, #0]
 8011742:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011746:	2300      	movs	r3, #0
 8011748:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801174c:	e7f7      	b.n	801173e <_Balloc+0x66>
 801174e:	bf00      	nop
 8011750:	08012af9 	.word	0x08012af9
 8011754:	08012b79 	.word	0x08012b79

08011758 <_Bfree>:
 8011758:	b570      	push	{r4, r5, r6, lr}
 801175a:	69c6      	ldr	r6, [r0, #28]
 801175c:	4605      	mov	r5, r0
 801175e:	460c      	mov	r4, r1
 8011760:	b976      	cbnz	r6, 8011780 <_Bfree+0x28>
 8011762:	2010      	movs	r0, #16
 8011764:	f7ff ff04 	bl	8011570 <malloc>
 8011768:	4602      	mov	r2, r0
 801176a:	61e8      	str	r0, [r5, #28]
 801176c:	b920      	cbnz	r0, 8011778 <_Bfree+0x20>
 801176e:	4b09      	ldr	r3, [pc, #36]	; (8011794 <_Bfree+0x3c>)
 8011770:	4809      	ldr	r0, [pc, #36]	; (8011798 <_Bfree+0x40>)
 8011772:	218f      	movs	r1, #143	; 0x8f
 8011774:	f000 fd5c 	bl	8012230 <__assert_func>
 8011778:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801177c:	6006      	str	r6, [r0, #0]
 801177e:	60c6      	str	r6, [r0, #12]
 8011780:	b13c      	cbz	r4, 8011792 <_Bfree+0x3a>
 8011782:	69eb      	ldr	r3, [r5, #28]
 8011784:	6862      	ldr	r2, [r4, #4]
 8011786:	68db      	ldr	r3, [r3, #12]
 8011788:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801178c:	6021      	str	r1, [r4, #0]
 801178e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011792:	bd70      	pop	{r4, r5, r6, pc}
 8011794:	08012af9 	.word	0x08012af9
 8011798:	08012b79 	.word	0x08012b79

0801179c <__multadd>:
 801179c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117a0:	690d      	ldr	r5, [r1, #16]
 80117a2:	4607      	mov	r7, r0
 80117a4:	460c      	mov	r4, r1
 80117a6:	461e      	mov	r6, r3
 80117a8:	f101 0c14 	add.w	ip, r1, #20
 80117ac:	2000      	movs	r0, #0
 80117ae:	f8dc 3000 	ldr.w	r3, [ip]
 80117b2:	b299      	uxth	r1, r3
 80117b4:	fb02 6101 	mla	r1, r2, r1, r6
 80117b8:	0c1e      	lsrs	r6, r3, #16
 80117ba:	0c0b      	lsrs	r3, r1, #16
 80117bc:	fb02 3306 	mla	r3, r2, r6, r3
 80117c0:	b289      	uxth	r1, r1
 80117c2:	3001      	adds	r0, #1
 80117c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80117c8:	4285      	cmp	r5, r0
 80117ca:	f84c 1b04 	str.w	r1, [ip], #4
 80117ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80117d2:	dcec      	bgt.n	80117ae <__multadd+0x12>
 80117d4:	b30e      	cbz	r6, 801181a <__multadd+0x7e>
 80117d6:	68a3      	ldr	r3, [r4, #8]
 80117d8:	42ab      	cmp	r3, r5
 80117da:	dc19      	bgt.n	8011810 <__multadd+0x74>
 80117dc:	6861      	ldr	r1, [r4, #4]
 80117de:	4638      	mov	r0, r7
 80117e0:	3101      	adds	r1, #1
 80117e2:	f7ff ff79 	bl	80116d8 <_Balloc>
 80117e6:	4680      	mov	r8, r0
 80117e8:	b928      	cbnz	r0, 80117f6 <__multadd+0x5a>
 80117ea:	4602      	mov	r2, r0
 80117ec:	4b0c      	ldr	r3, [pc, #48]	; (8011820 <__multadd+0x84>)
 80117ee:	480d      	ldr	r0, [pc, #52]	; (8011824 <__multadd+0x88>)
 80117f0:	21ba      	movs	r1, #186	; 0xba
 80117f2:	f000 fd1d 	bl	8012230 <__assert_func>
 80117f6:	6922      	ldr	r2, [r4, #16]
 80117f8:	3202      	adds	r2, #2
 80117fa:	f104 010c 	add.w	r1, r4, #12
 80117fe:	0092      	lsls	r2, r2, #2
 8011800:	300c      	adds	r0, #12
 8011802:	f7ff f864 	bl	80108ce <memcpy>
 8011806:	4621      	mov	r1, r4
 8011808:	4638      	mov	r0, r7
 801180a:	f7ff ffa5 	bl	8011758 <_Bfree>
 801180e:	4644      	mov	r4, r8
 8011810:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011814:	3501      	adds	r5, #1
 8011816:	615e      	str	r6, [r3, #20]
 8011818:	6125      	str	r5, [r4, #16]
 801181a:	4620      	mov	r0, r4
 801181c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011820:	08012b68 	.word	0x08012b68
 8011824:	08012b79 	.word	0x08012b79

08011828 <__hi0bits>:
 8011828:	0c03      	lsrs	r3, r0, #16
 801182a:	041b      	lsls	r3, r3, #16
 801182c:	b9d3      	cbnz	r3, 8011864 <__hi0bits+0x3c>
 801182e:	0400      	lsls	r0, r0, #16
 8011830:	2310      	movs	r3, #16
 8011832:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011836:	bf04      	itt	eq
 8011838:	0200      	lsleq	r0, r0, #8
 801183a:	3308      	addeq	r3, #8
 801183c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011840:	bf04      	itt	eq
 8011842:	0100      	lsleq	r0, r0, #4
 8011844:	3304      	addeq	r3, #4
 8011846:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801184a:	bf04      	itt	eq
 801184c:	0080      	lsleq	r0, r0, #2
 801184e:	3302      	addeq	r3, #2
 8011850:	2800      	cmp	r0, #0
 8011852:	db05      	blt.n	8011860 <__hi0bits+0x38>
 8011854:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011858:	f103 0301 	add.w	r3, r3, #1
 801185c:	bf08      	it	eq
 801185e:	2320      	moveq	r3, #32
 8011860:	4618      	mov	r0, r3
 8011862:	4770      	bx	lr
 8011864:	2300      	movs	r3, #0
 8011866:	e7e4      	b.n	8011832 <__hi0bits+0xa>

08011868 <__lo0bits>:
 8011868:	6803      	ldr	r3, [r0, #0]
 801186a:	f013 0207 	ands.w	r2, r3, #7
 801186e:	d00c      	beq.n	801188a <__lo0bits+0x22>
 8011870:	07d9      	lsls	r1, r3, #31
 8011872:	d422      	bmi.n	80118ba <__lo0bits+0x52>
 8011874:	079a      	lsls	r2, r3, #30
 8011876:	bf49      	itett	mi
 8011878:	085b      	lsrmi	r3, r3, #1
 801187a:	089b      	lsrpl	r3, r3, #2
 801187c:	6003      	strmi	r3, [r0, #0]
 801187e:	2201      	movmi	r2, #1
 8011880:	bf5c      	itt	pl
 8011882:	6003      	strpl	r3, [r0, #0]
 8011884:	2202      	movpl	r2, #2
 8011886:	4610      	mov	r0, r2
 8011888:	4770      	bx	lr
 801188a:	b299      	uxth	r1, r3
 801188c:	b909      	cbnz	r1, 8011892 <__lo0bits+0x2a>
 801188e:	0c1b      	lsrs	r3, r3, #16
 8011890:	2210      	movs	r2, #16
 8011892:	b2d9      	uxtb	r1, r3
 8011894:	b909      	cbnz	r1, 801189a <__lo0bits+0x32>
 8011896:	3208      	adds	r2, #8
 8011898:	0a1b      	lsrs	r3, r3, #8
 801189a:	0719      	lsls	r1, r3, #28
 801189c:	bf04      	itt	eq
 801189e:	091b      	lsreq	r3, r3, #4
 80118a0:	3204      	addeq	r2, #4
 80118a2:	0799      	lsls	r1, r3, #30
 80118a4:	bf04      	itt	eq
 80118a6:	089b      	lsreq	r3, r3, #2
 80118a8:	3202      	addeq	r2, #2
 80118aa:	07d9      	lsls	r1, r3, #31
 80118ac:	d403      	bmi.n	80118b6 <__lo0bits+0x4e>
 80118ae:	085b      	lsrs	r3, r3, #1
 80118b0:	f102 0201 	add.w	r2, r2, #1
 80118b4:	d003      	beq.n	80118be <__lo0bits+0x56>
 80118b6:	6003      	str	r3, [r0, #0]
 80118b8:	e7e5      	b.n	8011886 <__lo0bits+0x1e>
 80118ba:	2200      	movs	r2, #0
 80118bc:	e7e3      	b.n	8011886 <__lo0bits+0x1e>
 80118be:	2220      	movs	r2, #32
 80118c0:	e7e1      	b.n	8011886 <__lo0bits+0x1e>
	...

080118c4 <__i2b>:
 80118c4:	b510      	push	{r4, lr}
 80118c6:	460c      	mov	r4, r1
 80118c8:	2101      	movs	r1, #1
 80118ca:	f7ff ff05 	bl	80116d8 <_Balloc>
 80118ce:	4602      	mov	r2, r0
 80118d0:	b928      	cbnz	r0, 80118de <__i2b+0x1a>
 80118d2:	4b05      	ldr	r3, [pc, #20]	; (80118e8 <__i2b+0x24>)
 80118d4:	4805      	ldr	r0, [pc, #20]	; (80118ec <__i2b+0x28>)
 80118d6:	f240 1145 	movw	r1, #325	; 0x145
 80118da:	f000 fca9 	bl	8012230 <__assert_func>
 80118de:	2301      	movs	r3, #1
 80118e0:	6144      	str	r4, [r0, #20]
 80118e2:	6103      	str	r3, [r0, #16]
 80118e4:	bd10      	pop	{r4, pc}
 80118e6:	bf00      	nop
 80118e8:	08012b68 	.word	0x08012b68
 80118ec:	08012b79 	.word	0x08012b79

080118f0 <__multiply>:
 80118f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118f4:	4691      	mov	r9, r2
 80118f6:	690a      	ldr	r2, [r1, #16]
 80118f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80118fc:	429a      	cmp	r2, r3
 80118fe:	bfb8      	it	lt
 8011900:	460b      	movlt	r3, r1
 8011902:	460c      	mov	r4, r1
 8011904:	bfbc      	itt	lt
 8011906:	464c      	movlt	r4, r9
 8011908:	4699      	movlt	r9, r3
 801190a:	6927      	ldr	r7, [r4, #16]
 801190c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011910:	68a3      	ldr	r3, [r4, #8]
 8011912:	6861      	ldr	r1, [r4, #4]
 8011914:	eb07 060a 	add.w	r6, r7, sl
 8011918:	42b3      	cmp	r3, r6
 801191a:	b085      	sub	sp, #20
 801191c:	bfb8      	it	lt
 801191e:	3101      	addlt	r1, #1
 8011920:	f7ff feda 	bl	80116d8 <_Balloc>
 8011924:	b930      	cbnz	r0, 8011934 <__multiply+0x44>
 8011926:	4602      	mov	r2, r0
 8011928:	4b44      	ldr	r3, [pc, #272]	; (8011a3c <__multiply+0x14c>)
 801192a:	4845      	ldr	r0, [pc, #276]	; (8011a40 <__multiply+0x150>)
 801192c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8011930:	f000 fc7e 	bl	8012230 <__assert_func>
 8011934:	f100 0514 	add.w	r5, r0, #20
 8011938:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801193c:	462b      	mov	r3, r5
 801193e:	2200      	movs	r2, #0
 8011940:	4543      	cmp	r3, r8
 8011942:	d321      	bcc.n	8011988 <__multiply+0x98>
 8011944:	f104 0314 	add.w	r3, r4, #20
 8011948:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801194c:	f109 0314 	add.w	r3, r9, #20
 8011950:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011954:	9202      	str	r2, [sp, #8]
 8011956:	1b3a      	subs	r2, r7, r4
 8011958:	3a15      	subs	r2, #21
 801195a:	f022 0203 	bic.w	r2, r2, #3
 801195e:	3204      	adds	r2, #4
 8011960:	f104 0115 	add.w	r1, r4, #21
 8011964:	428f      	cmp	r7, r1
 8011966:	bf38      	it	cc
 8011968:	2204      	movcc	r2, #4
 801196a:	9201      	str	r2, [sp, #4]
 801196c:	9a02      	ldr	r2, [sp, #8]
 801196e:	9303      	str	r3, [sp, #12]
 8011970:	429a      	cmp	r2, r3
 8011972:	d80c      	bhi.n	801198e <__multiply+0x9e>
 8011974:	2e00      	cmp	r6, #0
 8011976:	dd03      	ble.n	8011980 <__multiply+0x90>
 8011978:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801197c:	2b00      	cmp	r3, #0
 801197e:	d05b      	beq.n	8011a38 <__multiply+0x148>
 8011980:	6106      	str	r6, [r0, #16]
 8011982:	b005      	add	sp, #20
 8011984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011988:	f843 2b04 	str.w	r2, [r3], #4
 801198c:	e7d8      	b.n	8011940 <__multiply+0x50>
 801198e:	f8b3 a000 	ldrh.w	sl, [r3]
 8011992:	f1ba 0f00 	cmp.w	sl, #0
 8011996:	d024      	beq.n	80119e2 <__multiply+0xf2>
 8011998:	f104 0e14 	add.w	lr, r4, #20
 801199c:	46a9      	mov	r9, r5
 801199e:	f04f 0c00 	mov.w	ip, #0
 80119a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80119a6:	f8d9 1000 	ldr.w	r1, [r9]
 80119aa:	fa1f fb82 	uxth.w	fp, r2
 80119ae:	b289      	uxth	r1, r1
 80119b0:	fb0a 110b 	mla	r1, sl, fp, r1
 80119b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80119b8:	f8d9 2000 	ldr.w	r2, [r9]
 80119bc:	4461      	add	r1, ip
 80119be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80119c2:	fb0a c20b 	mla	r2, sl, fp, ip
 80119c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80119ca:	b289      	uxth	r1, r1
 80119cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80119d0:	4577      	cmp	r7, lr
 80119d2:	f849 1b04 	str.w	r1, [r9], #4
 80119d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80119da:	d8e2      	bhi.n	80119a2 <__multiply+0xb2>
 80119dc:	9a01      	ldr	r2, [sp, #4]
 80119de:	f845 c002 	str.w	ip, [r5, r2]
 80119e2:	9a03      	ldr	r2, [sp, #12]
 80119e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80119e8:	3304      	adds	r3, #4
 80119ea:	f1b9 0f00 	cmp.w	r9, #0
 80119ee:	d021      	beq.n	8011a34 <__multiply+0x144>
 80119f0:	6829      	ldr	r1, [r5, #0]
 80119f2:	f104 0c14 	add.w	ip, r4, #20
 80119f6:	46ae      	mov	lr, r5
 80119f8:	f04f 0a00 	mov.w	sl, #0
 80119fc:	f8bc b000 	ldrh.w	fp, [ip]
 8011a00:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011a04:	fb09 220b 	mla	r2, r9, fp, r2
 8011a08:	4452      	add	r2, sl
 8011a0a:	b289      	uxth	r1, r1
 8011a0c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011a10:	f84e 1b04 	str.w	r1, [lr], #4
 8011a14:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011a18:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011a1c:	f8be 1000 	ldrh.w	r1, [lr]
 8011a20:	fb09 110a 	mla	r1, r9, sl, r1
 8011a24:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8011a28:	4567      	cmp	r7, ip
 8011a2a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011a2e:	d8e5      	bhi.n	80119fc <__multiply+0x10c>
 8011a30:	9a01      	ldr	r2, [sp, #4]
 8011a32:	50a9      	str	r1, [r5, r2]
 8011a34:	3504      	adds	r5, #4
 8011a36:	e799      	b.n	801196c <__multiply+0x7c>
 8011a38:	3e01      	subs	r6, #1
 8011a3a:	e79b      	b.n	8011974 <__multiply+0x84>
 8011a3c:	08012b68 	.word	0x08012b68
 8011a40:	08012b79 	.word	0x08012b79

08011a44 <__pow5mult>:
 8011a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a48:	4615      	mov	r5, r2
 8011a4a:	f012 0203 	ands.w	r2, r2, #3
 8011a4e:	4606      	mov	r6, r0
 8011a50:	460f      	mov	r7, r1
 8011a52:	d007      	beq.n	8011a64 <__pow5mult+0x20>
 8011a54:	4c25      	ldr	r4, [pc, #148]	; (8011aec <__pow5mult+0xa8>)
 8011a56:	3a01      	subs	r2, #1
 8011a58:	2300      	movs	r3, #0
 8011a5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011a5e:	f7ff fe9d 	bl	801179c <__multadd>
 8011a62:	4607      	mov	r7, r0
 8011a64:	10ad      	asrs	r5, r5, #2
 8011a66:	d03d      	beq.n	8011ae4 <__pow5mult+0xa0>
 8011a68:	69f4      	ldr	r4, [r6, #28]
 8011a6a:	b97c      	cbnz	r4, 8011a8c <__pow5mult+0x48>
 8011a6c:	2010      	movs	r0, #16
 8011a6e:	f7ff fd7f 	bl	8011570 <malloc>
 8011a72:	4602      	mov	r2, r0
 8011a74:	61f0      	str	r0, [r6, #28]
 8011a76:	b928      	cbnz	r0, 8011a84 <__pow5mult+0x40>
 8011a78:	4b1d      	ldr	r3, [pc, #116]	; (8011af0 <__pow5mult+0xac>)
 8011a7a:	481e      	ldr	r0, [pc, #120]	; (8011af4 <__pow5mult+0xb0>)
 8011a7c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8011a80:	f000 fbd6 	bl	8012230 <__assert_func>
 8011a84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011a88:	6004      	str	r4, [r0, #0]
 8011a8a:	60c4      	str	r4, [r0, #12]
 8011a8c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8011a90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011a94:	b94c      	cbnz	r4, 8011aaa <__pow5mult+0x66>
 8011a96:	f240 2171 	movw	r1, #625	; 0x271
 8011a9a:	4630      	mov	r0, r6
 8011a9c:	f7ff ff12 	bl	80118c4 <__i2b>
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	f8c8 0008 	str.w	r0, [r8, #8]
 8011aa6:	4604      	mov	r4, r0
 8011aa8:	6003      	str	r3, [r0, #0]
 8011aaa:	f04f 0900 	mov.w	r9, #0
 8011aae:	07eb      	lsls	r3, r5, #31
 8011ab0:	d50a      	bpl.n	8011ac8 <__pow5mult+0x84>
 8011ab2:	4639      	mov	r1, r7
 8011ab4:	4622      	mov	r2, r4
 8011ab6:	4630      	mov	r0, r6
 8011ab8:	f7ff ff1a 	bl	80118f0 <__multiply>
 8011abc:	4639      	mov	r1, r7
 8011abe:	4680      	mov	r8, r0
 8011ac0:	4630      	mov	r0, r6
 8011ac2:	f7ff fe49 	bl	8011758 <_Bfree>
 8011ac6:	4647      	mov	r7, r8
 8011ac8:	106d      	asrs	r5, r5, #1
 8011aca:	d00b      	beq.n	8011ae4 <__pow5mult+0xa0>
 8011acc:	6820      	ldr	r0, [r4, #0]
 8011ace:	b938      	cbnz	r0, 8011ae0 <__pow5mult+0x9c>
 8011ad0:	4622      	mov	r2, r4
 8011ad2:	4621      	mov	r1, r4
 8011ad4:	4630      	mov	r0, r6
 8011ad6:	f7ff ff0b 	bl	80118f0 <__multiply>
 8011ada:	6020      	str	r0, [r4, #0]
 8011adc:	f8c0 9000 	str.w	r9, [r0]
 8011ae0:	4604      	mov	r4, r0
 8011ae2:	e7e4      	b.n	8011aae <__pow5mult+0x6a>
 8011ae4:	4638      	mov	r0, r7
 8011ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011aea:	bf00      	nop
 8011aec:	08012cc8 	.word	0x08012cc8
 8011af0:	08012af9 	.word	0x08012af9
 8011af4:	08012b79 	.word	0x08012b79

08011af8 <__lshift>:
 8011af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011afc:	460c      	mov	r4, r1
 8011afe:	6849      	ldr	r1, [r1, #4]
 8011b00:	6923      	ldr	r3, [r4, #16]
 8011b02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011b06:	68a3      	ldr	r3, [r4, #8]
 8011b08:	4607      	mov	r7, r0
 8011b0a:	4691      	mov	r9, r2
 8011b0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011b10:	f108 0601 	add.w	r6, r8, #1
 8011b14:	42b3      	cmp	r3, r6
 8011b16:	db0b      	blt.n	8011b30 <__lshift+0x38>
 8011b18:	4638      	mov	r0, r7
 8011b1a:	f7ff fddd 	bl	80116d8 <_Balloc>
 8011b1e:	4605      	mov	r5, r0
 8011b20:	b948      	cbnz	r0, 8011b36 <__lshift+0x3e>
 8011b22:	4602      	mov	r2, r0
 8011b24:	4b28      	ldr	r3, [pc, #160]	; (8011bc8 <__lshift+0xd0>)
 8011b26:	4829      	ldr	r0, [pc, #164]	; (8011bcc <__lshift+0xd4>)
 8011b28:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8011b2c:	f000 fb80 	bl	8012230 <__assert_func>
 8011b30:	3101      	adds	r1, #1
 8011b32:	005b      	lsls	r3, r3, #1
 8011b34:	e7ee      	b.n	8011b14 <__lshift+0x1c>
 8011b36:	2300      	movs	r3, #0
 8011b38:	f100 0114 	add.w	r1, r0, #20
 8011b3c:	f100 0210 	add.w	r2, r0, #16
 8011b40:	4618      	mov	r0, r3
 8011b42:	4553      	cmp	r3, sl
 8011b44:	db33      	blt.n	8011bae <__lshift+0xb6>
 8011b46:	6920      	ldr	r0, [r4, #16]
 8011b48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011b4c:	f104 0314 	add.w	r3, r4, #20
 8011b50:	f019 091f 	ands.w	r9, r9, #31
 8011b54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011b58:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011b5c:	d02b      	beq.n	8011bb6 <__lshift+0xbe>
 8011b5e:	f1c9 0e20 	rsb	lr, r9, #32
 8011b62:	468a      	mov	sl, r1
 8011b64:	2200      	movs	r2, #0
 8011b66:	6818      	ldr	r0, [r3, #0]
 8011b68:	fa00 f009 	lsl.w	r0, r0, r9
 8011b6c:	4310      	orrs	r0, r2
 8011b6e:	f84a 0b04 	str.w	r0, [sl], #4
 8011b72:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b76:	459c      	cmp	ip, r3
 8011b78:	fa22 f20e 	lsr.w	r2, r2, lr
 8011b7c:	d8f3      	bhi.n	8011b66 <__lshift+0x6e>
 8011b7e:	ebac 0304 	sub.w	r3, ip, r4
 8011b82:	3b15      	subs	r3, #21
 8011b84:	f023 0303 	bic.w	r3, r3, #3
 8011b88:	3304      	adds	r3, #4
 8011b8a:	f104 0015 	add.w	r0, r4, #21
 8011b8e:	4584      	cmp	ip, r0
 8011b90:	bf38      	it	cc
 8011b92:	2304      	movcc	r3, #4
 8011b94:	50ca      	str	r2, [r1, r3]
 8011b96:	b10a      	cbz	r2, 8011b9c <__lshift+0xa4>
 8011b98:	f108 0602 	add.w	r6, r8, #2
 8011b9c:	3e01      	subs	r6, #1
 8011b9e:	4638      	mov	r0, r7
 8011ba0:	612e      	str	r6, [r5, #16]
 8011ba2:	4621      	mov	r1, r4
 8011ba4:	f7ff fdd8 	bl	8011758 <_Bfree>
 8011ba8:	4628      	mov	r0, r5
 8011baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bae:	f842 0f04 	str.w	r0, [r2, #4]!
 8011bb2:	3301      	adds	r3, #1
 8011bb4:	e7c5      	b.n	8011b42 <__lshift+0x4a>
 8011bb6:	3904      	subs	r1, #4
 8011bb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8011bbc:	f841 2f04 	str.w	r2, [r1, #4]!
 8011bc0:	459c      	cmp	ip, r3
 8011bc2:	d8f9      	bhi.n	8011bb8 <__lshift+0xc0>
 8011bc4:	e7ea      	b.n	8011b9c <__lshift+0xa4>
 8011bc6:	bf00      	nop
 8011bc8:	08012b68 	.word	0x08012b68
 8011bcc:	08012b79 	.word	0x08012b79

08011bd0 <__mcmp>:
 8011bd0:	b530      	push	{r4, r5, lr}
 8011bd2:	6902      	ldr	r2, [r0, #16]
 8011bd4:	690c      	ldr	r4, [r1, #16]
 8011bd6:	1b12      	subs	r2, r2, r4
 8011bd8:	d10e      	bne.n	8011bf8 <__mcmp+0x28>
 8011bda:	f100 0314 	add.w	r3, r0, #20
 8011bde:	3114      	adds	r1, #20
 8011be0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011be4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011be8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011bec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011bf0:	42a5      	cmp	r5, r4
 8011bf2:	d003      	beq.n	8011bfc <__mcmp+0x2c>
 8011bf4:	d305      	bcc.n	8011c02 <__mcmp+0x32>
 8011bf6:	2201      	movs	r2, #1
 8011bf8:	4610      	mov	r0, r2
 8011bfa:	bd30      	pop	{r4, r5, pc}
 8011bfc:	4283      	cmp	r3, r0
 8011bfe:	d3f3      	bcc.n	8011be8 <__mcmp+0x18>
 8011c00:	e7fa      	b.n	8011bf8 <__mcmp+0x28>
 8011c02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011c06:	e7f7      	b.n	8011bf8 <__mcmp+0x28>

08011c08 <__mdiff>:
 8011c08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c0c:	460c      	mov	r4, r1
 8011c0e:	4606      	mov	r6, r0
 8011c10:	4611      	mov	r1, r2
 8011c12:	4620      	mov	r0, r4
 8011c14:	4690      	mov	r8, r2
 8011c16:	f7ff ffdb 	bl	8011bd0 <__mcmp>
 8011c1a:	1e05      	subs	r5, r0, #0
 8011c1c:	d110      	bne.n	8011c40 <__mdiff+0x38>
 8011c1e:	4629      	mov	r1, r5
 8011c20:	4630      	mov	r0, r6
 8011c22:	f7ff fd59 	bl	80116d8 <_Balloc>
 8011c26:	b930      	cbnz	r0, 8011c36 <__mdiff+0x2e>
 8011c28:	4b3a      	ldr	r3, [pc, #232]	; (8011d14 <__mdiff+0x10c>)
 8011c2a:	4602      	mov	r2, r0
 8011c2c:	f240 2137 	movw	r1, #567	; 0x237
 8011c30:	4839      	ldr	r0, [pc, #228]	; (8011d18 <__mdiff+0x110>)
 8011c32:	f000 fafd 	bl	8012230 <__assert_func>
 8011c36:	2301      	movs	r3, #1
 8011c38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011c3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c40:	bfa4      	itt	ge
 8011c42:	4643      	movge	r3, r8
 8011c44:	46a0      	movge	r8, r4
 8011c46:	4630      	mov	r0, r6
 8011c48:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011c4c:	bfa6      	itte	ge
 8011c4e:	461c      	movge	r4, r3
 8011c50:	2500      	movge	r5, #0
 8011c52:	2501      	movlt	r5, #1
 8011c54:	f7ff fd40 	bl	80116d8 <_Balloc>
 8011c58:	b920      	cbnz	r0, 8011c64 <__mdiff+0x5c>
 8011c5a:	4b2e      	ldr	r3, [pc, #184]	; (8011d14 <__mdiff+0x10c>)
 8011c5c:	4602      	mov	r2, r0
 8011c5e:	f240 2145 	movw	r1, #581	; 0x245
 8011c62:	e7e5      	b.n	8011c30 <__mdiff+0x28>
 8011c64:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011c68:	6926      	ldr	r6, [r4, #16]
 8011c6a:	60c5      	str	r5, [r0, #12]
 8011c6c:	f104 0914 	add.w	r9, r4, #20
 8011c70:	f108 0514 	add.w	r5, r8, #20
 8011c74:	f100 0e14 	add.w	lr, r0, #20
 8011c78:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011c7c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011c80:	f108 0210 	add.w	r2, r8, #16
 8011c84:	46f2      	mov	sl, lr
 8011c86:	2100      	movs	r1, #0
 8011c88:	f859 3b04 	ldr.w	r3, [r9], #4
 8011c8c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011c90:	fa11 f88b 	uxtah	r8, r1, fp
 8011c94:	b299      	uxth	r1, r3
 8011c96:	0c1b      	lsrs	r3, r3, #16
 8011c98:	eba8 0801 	sub.w	r8, r8, r1
 8011c9c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011ca0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011ca4:	fa1f f888 	uxth.w	r8, r8
 8011ca8:	1419      	asrs	r1, r3, #16
 8011caa:	454e      	cmp	r6, r9
 8011cac:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011cb0:	f84a 3b04 	str.w	r3, [sl], #4
 8011cb4:	d8e8      	bhi.n	8011c88 <__mdiff+0x80>
 8011cb6:	1b33      	subs	r3, r6, r4
 8011cb8:	3b15      	subs	r3, #21
 8011cba:	f023 0303 	bic.w	r3, r3, #3
 8011cbe:	3304      	adds	r3, #4
 8011cc0:	3415      	adds	r4, #21
 8011cc2:	42a6      	cmp	r6, r4
 8011cc4:	bf38      	it	cc
 8011cc6:	2304      	movcc	r3, #4
 8011cc8:	441d      	add	r5, r3
 8011cca:	4473      	add	r3, lr
 8011ccc:	469e      	mov	lr, r3
 8011cce:	462e      	mov	r6, r5
 8011cd0:	4566      	cmp	r6, ip
 8011cd2:	d30e      	bcc.n	8011cf2 <__mdiff+0xea>
 8011cd4:	f10c 0203 	add.w	r2, ip, #3
 8011cd8:	1b52      	subs	r2, r2, r5
 8011cda:	f022 0203 	bic.w	r2, r2, #3
 8011cde:	3d03      	subs	r5, #3
 8011ce0:	45ac      	cmp	ip, r5
 8011ce2:	bf38      	it	cc
 8011ce4:	2200      	movcc	r2, #0
 8011ce6:	4413      	add	r3, r2
 8011ce8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011cec:	b17a      	cbz	r2, 8011d0e <__mdiff+0x106>
 8011cee:	6107      	str	r7, [r0, #16]
 8011cf0:	e7a4      	b.n	8011c3c <__mdiff+0x34>
 8011cf2:	f856 8b04 	ldr.w	r8, [r6], #4
 8011cf6:	fa11 f288 	uxtah	r2, r1, r8
 8011cfa:	1414      	asrs	r4, r2, #16
 8011cfc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011d00:	b292      	uxth	r2, r2
 8011d02:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011d06:	f84e 2b04 	str.w	r2, [lr], #4
 8011d0a:	1421      	asrs	r1, r4, #16
 8011d0c:	e7e0      	b.n	8011cd0 <__mdiff+0xc8>
 8011d0e:	3f01      	subs	r7, #1
 8011d10:	e7ea      	b.n	8011ce8 <__mdiff+0xe0>
 8011d12:	bf00      	nop
 8011d14:	08012b68 	.word	0x08012b68
 8011d18:	08012b79 	.word	0x08012b79

08011d1c <__d2b>:
 8011d1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011d20:	460f      	mov	r7, r1
 8011d22:	2101      	movs	r1, #1
 8011d24:	ec59 8b10 	vmov	r8, r9, d0
 8011d28:	4616      	mov	r6, r2
 8011d2a:	f7ff fcd5 	bl	80116d8 <_Balloc>
 8011d2e:	4604      	mov	r4, r0
 8011d30:	b930      	cbnz	r0, 8011d40 <__d2b+0x24>
 8011d32:	4602      	mov	r2, r0
 8011d34:	4b24      	ldr	r3, [pc, #144]	; (8011dc8 <__d2b+0xac>)
 8011d36:	4825      	ldr	r0, [pc, #148]	; (8011dcc <__d2b+0xb0>)
 8011d38:	f240 310f 	movw	r1, #783	; 0x30f
 8011d3c:	f000 fa78 	bl	8012230 <__assert_func>
 8011d40:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011d44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011d48:	bb2d      	cbnz	r5, 8011d96 <__d2b+0x7a>
 8011d4a:	9301      	str	r3, [sp, #4]
 8011d4c:	f1b8 0300 	subs.w	r3, r8, #0
 8011d50:	d026      	beq.n	8011da0 <__d2b+0x84>
 8011d52:	4668      	mov	r0, sp
 8011d54:	9300      	str	r3, [sp, #0]
 8011d56:	f7ff fd87 	bl	8011868 <__lo0bits>
 8011d5a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011d5e:	b1e8      	cbz	r0, 8011d9c <__d2b+0x80>
 8011d60:	f1c0 0320 	rsb	r3, r0, #32
 8011d64:	fa02 f303 	lsl.w	r3, r2, r3
 8011d68:	430b      	orrs	r3, r1
 8011d6a:	40c2      	lsrs	r2, r0
 8011d6c:	6163      	str	r3, [r4, #20]
 8011d6e:	9201      	str	r2, [sp, #4]
 8011d70:	9b01      	ldr	r3, [sp, #4]
 8011d72:	61a3      	str	r3, [r4, #24]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	bf14      	ite	ne
 8011d78:	2202      	movne	r2, #2
 8011d7a:	2201      	moveq	r2, #1
 8011d7c:	6122      	str	r2, [r4, #16]
 8011d7e:	b1bd      	cbz	r5, 8011db0 <__d2b+0x94>
 8011d80:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011d84:	4405      	add	r5, r0
 8011d86:	603d      	str	r5, [r7, #0]
 8011d88:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011d8c:	6030      	str	r0, [r6, #0]
 8011d8e:	4620      	mov	r0, r4
 8011d90:	b003      	add	sp, #12
 8011d92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011d9a:	e7d6      	b.n	8011d4a <__d2b+0x2e>
 8011d9c:	6161      	str	r1, [r4, #20]
 8011d9e:	e7e7      	b.n	8011d70 <__d2b+0x54>
 8011da0:	a801      	add	r0, sp, #4
 8011da2:	f7ff fd61 	bl	8011868 <__lo0bits>
 8011da6:	9b01      	ldr	r3, [sp, #4]
 8011da8:	6163      	str	r3, [r4, #20]
 8011daa:	3020      	adds	r0, #32
 8011dac:	2201      	movs	r2, #1
 8011dae:	e7e5      	b.n	8011d7c <__d2b+0x60>
 8011db0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011db4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011db8:	6038      	str	r0, [r7, #0]
 8011dba:	6918      	ldr	r0, [r3, #16]
 8011dbc:	f7ff fd34 	bl	8011828 <__hi0bits>
 8011dc0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011dc4:	e7e2      	b.n	8011d8c <__d2b+0x70>
 8011dc6:	bf00      	nop
 8011dc8:	08012b68 	.word	0x08012b68
 8011dcc:	08012b79 	.word	0x08012b79

08011dd0 <__ssputs_r>:
 8011dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011dd4:	688e      	ldr	r6, [r1, #8]
 8011dd6:	461f      	mov	r7, r3
 8011dd8:	42be      	cmp	r6, r7
 8011dda:	680b      	ldr	r3, [r1, #0]
 8011ddc:	4682      	mov	sl, r0
 8011dde:	460c      	mov	r4, r1
 8011de0:	4690      	mov	r8, r2
 8011de2:	d82c      	bhi.n	8011e3e <__ssputs_r+0x6e>
 8011de4:	898a      	ldrh	r2, [r1, #12]
 8011de6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011dea:	d026      	beq.n	8011e3a <__ssputs_r+0x6a>
 8011dec:	6965      	ldr	r5, [r4, #20]
 8011dee:	6909      	ldr	r1, [r1, #16]
 8011df0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011df4:	eba3 0901 	sub.w	r9, r3, r1
 8011df8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011dfc:	1c7b      	adds	r3, r7, #1
 8011dfe:	444b      	add	r3, r9
 8011e00:	106d      	asrs	r5, r5, #1
 8011e02:	429d      	cmp	r5, r3
 8011e04:	bf38      	it	cc
 8011e06:	461d      	movcc	r5, r3
 8011e08:	0553      	lsls	r3, r2, #21
 8011e0a:	d527      	bpl.n	8011e5c <__ssputs_r+0x8c>
 8011e0c:	4629      	mov	r1, r5
 8011e0e:	f7ff fbd7 	bl	80115c0 <_malloc_r>
 8011e12:	4606      	mov	r6, r0
 8011e14:	b360      	cbz	r0, 8011e70 <__ssputs_r+0xa0>
 8011e16:	6921      	ldr	r1, [r4, #16]
 8011e18:	464a      	mov	r2, r9
 8011e1a:	f7fe fd58 	bl	80108ce <memcpy>
 8011e1e:	89a3      	ldrh	r3, [r4, #12]
 8011e20:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e28:	81a3      	strh	r3, [r4, #12]
 8011e2a:	6126      	str	r6, [r4, #16]
 8011e2c:	6165      	str	r5, [r4, #20]
 8011e2e:	444e      	add	r6, r9
 8011e30:	eba5 0509 	sub.w	r5, r5, r9
 8011e34:	6026      	str	r6, [r4, #0]
 8011e36:	60a5      	str	r5, [r4, #8]
 8011e38:	463e      	mov	r6, r7
 8011e3a:	42be      	cmp	r6, r7
 8011e3c:	d900      	bls.n	8011e40 <__ssputs_r+0x70>
 8011e3e:	463e      	mov	r6, r7
 8011e40:	6820      	ldr	r0, [r4, #0]
 8011e42:	4632      	mov	r2, r6
 8011e44:	4641      	mov	r1, r8
 8011e46:	f000 f9c9 	bl	80121dc <memmove>
 8011e4a:	68a3      	ldr	r3, [r4, #8]
 8011e4c:	1b9b      	subs	r3, r3, r6
 8011e4e:	60a3      	str	r3, [r4, #8]
 8011e50:	6823      	ldr	r3, [r4, #0]
 8011e52:	4433      	add	r3, r6
 8011e54:	6023      	str	r3, [r4, #0]
 8011e56:	2000      	movs	r0, #0
 8011e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e5c:	462a      	mov	r2, r5
 8011e5e:	f000 fa2d 	bl	80122bc <_realloc_r>
 8011e62:	4606      	mov	r6, r0
 8011e64:	2800      	cmp	r0, #0
 8011e66:	d1e0      	bne.n	8011e2a <__ssputs_r+0x5a>
 8011e68:	6921      	ldr	r1, [r4, #16]
 8011e6a:	4650      	mov	r0, sl
 8011e6c:	f7ff fb34 	bl	80114d8 <_free_r>
 8011e70:	230c      	movs	r3, #12
 8011e72:	f8ca 3000 	str.w	r3, [sl]
 8011e76:	89a3      	ldrh	r3, [r4, #12]
 8011e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e7c:	81a3      	strh	r3, [r4, #12]
 8011e7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e82:	e7e9      	b.n	8011e58 <__ssputs_r+0x88>

08011e84 <_svfiprintf_r>:
 8011e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e88:	4698      	mov	r8, r3
 8011e8a:	898b      	ldrh	r3, [r1, #12]
 8011e8c:	061b      	lsls	r3, r3, #24
 8011e8e:	b09d      	sub	sp, #116	; 0x74
 8011e90:	4607      	mov	r7, r0
 8011e92:	460d      	mov	r5, r1
 8011e94:	4614      	mov	r4, r2
 8011e96:	d50e      	bpl.n	8011eb6 <_svfiprintf_r+0x32>
 8011e98:	690b      	ldr	r3, [r1, #16]
 8011e9a:	b963      	cbnz	r3, 8011eb6 <_svfiprintf_r+0x32>
 8011e9c:	2140      	movs	r1, #64	; 0x40
 8011e9e:	f7ff fb8f 	bl	80115c0 <_malloc_r>
 8011ea2:	6028      	str	r0, [r5, #0]
 8011ea4:	6128      	str	r0, [r5, #16]
 8011ea6:	b920      	cbnz	r0, 8011eb2 <_svfiprintf_r+0x2e>
 8011ea8:	230c      	movs	r3, #12
 8011eaa:	603b      	str	r3, [r7, #0]
 8011eac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011eb0:	e0d0      	b.n	8012054 <_svfiprintf_r+0x1d0>
 8011eb2:	2340      	movs	r3, #64	; 0x40
 8011eb4:	616b      	str	r3, [r5, #20]
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	9309      	str	r3, [sp, #36]	; 0x24
 8011eba:	2320      	movs	r3, #32
 8011ebc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011ec0:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ec4:	2330      	movs	r3, #48	; 0x30
 8011ec6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801206c <_svfiprintf_r+0x1e8>
 8011eca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011ece:	f04f 0901 	mov.w	r9, #1
 8011ed2:	4623      	mov	r3, r4
 8011ed4:	469a      	mov	sl, r3
 8011ed6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011eda:	b10a      	cbz	r2, 8011ee0 <_svfiprintf_r+0x5c>
 8011edc:	2a25      	cmp	r2, #37	; 0x25
 8011ede:	d1f9      	bne.n	8011ed4 <_svfiprintf_r+0x50>
 8011ee0:	ebba 0b04 	subs.w	fp, sl, r4
 8011ee4:	d00b      	beq.n	8011efe <_svfiprintf_r+0x7a>
 8011ee6:	465b      	mov	r3, fp
 8011ee8:	4622      	mov	r2, r4
 8011eea:	4629      	mov	r1, r5
 8011eec:	4638      	mov	r0, r7
 8011eee:	f7ff ff6f 	bl	8011dd0 <__ssputs_r>
 8011ef2:	3001      	adds	r0, #1
 8011ef4:	f000 80a9 	beq.w	801204a <_svfiprintf_r+0x1c6>
 8011ef8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011efa:	445a      	add	r2, fp
 8011efc:	9209      	str	r2, [sp, #36]	; 0x24
 8011efe:	f89a 3000 	ldrb.w	r3, [sl]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	f000 80a1 	beq.w	801204a <_svfiprintf_r+0x1c6>
 8011f08:	2300      	movs	r3, #0
 8011f0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011f0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f12:	f10a 0a01 	add.w	sl, sl, #1
 8011f16:	9304      	str	r3, [sp, #16]
 8011f18:	9307      	str	r3, [sp, #28]
 8011f1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011f1e:	931a      	str	r3, [sp, #104]	; 0x68
 8011f20:	4654      	mov	r4, sl
 8011f22:	2205      	movs	r2, #5
 8011f24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f28:	4850      	ldr	r0, [pc, #320]	; (801206c <_svfiprintf_r+0x1e8>)
 8011f2a:	f7ee f9d9 	bl	80002e0 <memchr>
 8011f2e:	9a04      	ldr	r2, [sp, #16]
 8011f30:	b9d8      	cbnz	r0, 8011f6a <_svfiprintf_r+0xe6>
 8011f32:	06d0      	lsls	r0, r2, #27
 8011f34:	bf44      	itt	mi
 8011f36:	2320      	movmi	r3, #32
 8011f38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f3c:	0711      	lsls	r1, r2, #28
 8011f3e:	bf44      	itt	mi
 8011f40:	232b      	movmi	r3, #43	; 0x2b
 8011f42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f46:	f89a 3000 	ldrb.w	r3, [sl]
 8011f4a:	2b2a      	cmp	r3, #42	; 0x2a
 8011f4c:	d015      	beq.n	8011f7a <_svfiprintf_r+0xf6>
 8011f4e:	9a07      	ldr	r2, [sp, #28]
 8011f50:	4654      	mov	r4, sl
 8011f52:	2000      	movs	r0, #0
 8011f54:	f04f 0c0a 	mov.w	ip, #10
 8011f58:	4621      	mov	r1, r4
 8011f5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f5e:	3b30      	subs	r3, #48	; 0x30
 8011f60:	2b09      	cmp	r3, #9
 8011f62:	d94d      	bls.n	8012000 <_svfiprintf_r+0x17c>
 8011f64:	b1b0      	cbz	r0, 8011f94 <_svfiprintf_r+0x110>
 8011f66:	9207      	str	r2, [sp, #28]
 8011f68:	e014      	b.n	8011f94 <_svfiprintf_r+0x110>
 8011f6a:	eba0 0308 	sub.w	r3, r0, r8
 8011f6e:	fa09 f303 	lsl.w	r3, r9, r3
 8011f72:	4313      	orrs	r3, r2
 8011f74:	9304      	str	r3, [sp, #16]
 8011f76:	46a2      	mov	sl, r4
 8011f78:	e7d2      	b.n	8011f20 <_svfiprintf_r+0x9c>
 8011f7a:	9b03      	ldr	r3, [sp, #12]
 8011f7c:	1d19      	adds	r1, r3, #4
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	9103      	str	r1, [sp, #12]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	bfbb      	ittet	lt
 8011f86:	425b      	neglt	r3, r3
 8011f88:	f042 0202 	orrlt.w	r2, r2, #2
 8011f8c:	9307      	strge	r3, [sp, #28]
 8011f8e:	9307      	strlt	r3, [sp, #28]
 8011f90:	bfb8      	it	lt
 8011f92:	9204      	strlt	r2, [sp, #16]
 8011f94:	7823      	ldrb	r3, [r4, #0]
 8011f96:	2b2e      	cmp	r3, #46	; 0x2e
 8011f98:	d10c      	bne.n	8011fb4 <_svfiprintf_r+0x130>
 8011f9a:	7863      	ldrb	r3, [r4, #1]
 8011f9c:	2b2a      	cmp	r3, #42	; 0x2a
 8011f9e:	d134      	bne.n	801200a <_svfiprintf_r+0x186>
 8011fa0:	9b03      	ldr	r3, [sp, #12]
 8011fa2:	1d1a      	adds	r2, r3, #4
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	9203      	str	r2, [sp, #12]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	bfb8      	it	lt
 8011fac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011fb0:	3402      	adds	r4, #2
 8011fb2:	9305      	str	r3, [sp, #20]
 8011fb4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801207c <_svfiprintf_r+0x1f8>
 8011fb8:	7821      	ldrb	r1, [r4, #0]
 8011fba:	2203      	movs	r2, #3
 8011fbc:	4650      	mov	r0, sl
 8011fbe:	f7ee f98f 	bl	80002e0 <memchr>
 8011fc2:	b138      	cbz	r0, 8011fd4 <_svfiprintf_r+0x150>
 8011fc4:	9b04      	ldr	r3, [sp, #16]
 8011fc6:	eba0 000a 	sub.w	r0, r0, sl
 8011fca:	2240      	movs	r2, #64	; 0x40
 8011fcc:	4082      	lsls	r2, r0
 8011fce:	4313      	orrs	r3, r2
 8011fd0:	3401      	adds	r4, #1
 8011fd2:	9304      	str	r3, [sp, #16]
 8011fd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fd8:	4825      	ldr	r0, [pc, #148]	; (8012070 <_svfiprintf_r+0x1ec>)
 8011fda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011fde:	2206      	movs	r2, #6
 8011fe0:	f7ee f97e 	bl	80002e0 <memchr>
 8011fe4:	2800      	cmp	r0, #0
 8011fe6:	d038      	beq.n	801205a <_svfiprintf_r+0x1d6>
 8011fe8:	4b22      	ldr	r3, [pc, #136]	; (8012074 <_svfiprintf_r+0x1f0>)
 8011fea:	bb1b      	cbnz	r3, 8012034 <_svfiprintf_r+0x1b0>
 8011fec:	9b03      	ldr	r3, [sp, #12]
 8011fee:	3307      	adds	r3, #7
 8011ff0:	f023 0307 	bic.w	r3, r3, #7
 8011ff4:	3308      	adds	r3, #8
 8011ff6:	9303      	str	r3, [sp, #12]
 8011ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ffa:	4433      	add	r3, r6
 8011ffc:	9309      	str	r3, [sp, #36]	; 0x24
 8011ffe:	e768      	b.n	8011ed2 <_svfiprintf_r+0x4e>
 8012000:	fb0c 3202 	mla	r2, ip, r2, r3
 8012004:	460c      	mov	r4, r1
 8012006:	2001      	movs	r0, #1
 8012008:	e7a6      	b.n	8011f58 <_svfiprintf_r+0xd4>
 801200a:	2300      	movs	r3, #0
 801200c:	3401      	adds	r4, #1
 801200e:	9305      	str	r3, [sp, #20]
 8012010:	4619      	mov	r1, r3
 8012012:	f04f 0c0a 	mov.w	ip, #10
 8012016:	4620      	mov	r0, r4
 8012018:	f810 2b01 	ldrb.w	r2, [r0], #1
 801201c:	3a30      	subs	r2, #48	; 0x30
 801201e:	2a09      	cmp	r2, #9
 8012020:	d903      	bls.n	801202a <_svfiprintf_r+0x1a6>
 8012022:	2b00      	cmp	r3, #0
 8012024:	d0c6      	beq.n	8011fb4 <_svfiprintf_r+0x130>
 8012026:	9105      	str	r1, [sp, #20]
 8012028:	e7c4      	b.n	8011fb4 <_svfiprintf_r+0x130>
 801202a:	fb0c 2101 	mla	r1, ip, r1, r2
 801202e:	4604      	mov	r4, r0
 8012030:	2301      	movs	r3, #1
 8012032:	e7f0      	b.n	8012016 <_svfiprintf_r+0x192>
 8012034:	ab03      	add	r3, sp, #12
 8012036:	9300      	str	r3, [sp, #0]
 8012038:	462a      	mov	r2, r5
 801203a:	4b0f      	ldr	r3, [pc, #60]	; (8012078 <_svfiprintf_r+0x1f4>)
 801203c:	a904      	add	r1, sp, #16
 801203e:	4638      	mov	r0, r7
 8012040:	f7fd fef6 	bl	800fe30 <_printf_float>
 8012044:	1c42      	adds	r2, r0, #1
 8012046:	4606      	mov	r6, r0
 8012048:	d1d6      	bne.n	8011ff8 <_svfiprintf_r+0x174>
 801204a:	89ab      	ldrh	r3, [r5, #12]
 801204c:	065b      	lsls	r3, r3, #25
 801204e:	f53f af2d 	bmi.w	8011eac <_svfiprintf_r+0x28>
 8012052:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012054:	b01d      	add	sp, #116	; 0x74
 8012056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801205a:	ab03      	add	r3, sp, #12
 801205c:	9300      	str	r3, [sp, #0]
 801205e:	462a      	mov	r2, r5
 8012060:	4b05      	ldr	r3, [pc, #20]	; (8012078 <_svfiprintf_r+0x1f4>)
 8012062:	a904      	add	r1, sp, #16
 8012064:	4638      	mov	r0, r7
 8012066:	f7fe f96b 	bl	8010340 <_printf_i>
 801206a:	e7eb      	b.n	8012044 <_svfiprintf_r+0x1c0>
 801206c:	08012cd4 	.word	0x08012cd4
 8012070:	08012cde 	.word	0x08012cde
 8012074:	0800fe31 	.word	0x0800fe31
 8012078:	08011dd1 	.word	0x08011dd1
 801207c:	08012cda 	.word	0x08012cda

08012080 <__sflush_r>:
 8012080:	898a      	ldrh	r2, [r1, #12]
 8012082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012086:	4605      	mov	r5, r0
 8012088:	0710      	lsls	r0, r2, #28
 801208a:	460c      	mov	r4, r1
 801208c:	d458      	bmi.n	8012140 <__sflush_r+0xc0>
 801208e:	684b      	ldr	r3, [r1, #4]
 8012090:	2b00      	cmp	r3, #0
 8012092:	dc05      	bgt.n	80120a0 <__sflush_r+0x20>
 8012094:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012096:	2b00      	cmp	r3, #0
 8012098:	dc02      	bgt.n	80120a0 <__sflush_r+0x20>
 801209a:	2000      	movs	r0, #0
 801209c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80120a2:	2e00      	cmp	r6, #0
 80120a4:	d0f9      	beq.n	801209a <__sflush_r+0x1a>
 80120a6:	2300      	movs	r3, #0
 80120a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80120ac:	682f      	ldr	r7, [r5, #0]
 80120ae:	6a21      	ldr	r1, [r4, #32]
 80120b0:	602b      	str	r3, [r5, #0]
 80120b2:	d032      	beq.n	801211a <__sflush_r+0x9a>
 80120b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80120b6:	89a3      	ldrh	r3, [r4, #12]
 80120b8:	075a      	lsls	r2, r3, #29
 80120ba:	d505      	bpl.n	80120c8 <__sflush_r+0x48>
 80120bc:	6863      	ldr	r3, [r4, #4]
 80120be:	1ac0      	subs	r0, r0, r3
 80120c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80120c2:	b10b      	cbz	r3, 80120c8 <__sflush_r+0x48>
 80120c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80120c6:	1ac0      	subs	r0, r0, r3
 80120c8:	2300      	movs	r3, #0
 80120ca:	4602      	mov	r2, r0
 80120cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80120ce:	6a21      	ldr	r1, [r4, #32]
 80120d0:	4628      	mov	r0, r5
 80120d2:	47b0      	blx	r6
 80120d4:	1c43      	adds	r3, r0, #1
 80120d6:	89a3      	ldrh	r3, [r4, #12]
 80120d8:	d106      	bne.n	80120e8 <__sflush_r+0x68>
 80120da:	6829      	ldr	r1, [r5, #0]
 80120dc:	291d      	cmp	r1, #29
 80120de:	d82b      	bhi.n	8012138 <__sflush_r+0xb8>
 80120e0:	4a29      	ldr	r2, [pc, #164]	; (8012188 <__sflush_r+0x108>)
 80120e2:	410a      	asrs	r2, r1
 80120e4:	07d6      	lsls	r6, r2, #31
 80120e6:	d427      	bmi.n	8012138 <__sflush_r+0xb8>
 80120e8:	2200      	movs	r2, #0
 80120ea:	6062      	str	r2, [r4, #4]
 80120ec:	04d9      	lsls	r1, r3, #19
 80120ee:	6922      	ldr	r2, [r4, #16]
 80120f0:	6022      	str	r2, [r4, #0]
 80120f2:	d504      	bpl.n	80120fe <__sflush_r+0x7e>
 80120f4:	1c42      	adds	r2, r0, #1
 80120f6:	d101      	bne.n	80120fc <__sflush_r+0x7c>
 80120f8:	682b      	ldr	r3, [r5, #0]
 80120fa:	b903      	cbnz	r3, 80120fe <__sflush_r+0x7e>
 80120fc:	6560      	str	r0, [r4, #84]	; 0x54
 80120fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012100:	602f      	str	r7, [r5, #0]
 8012102:	2900      	cmp	r1, #0
 8012104:	d0c9      	beq.n	801209a <__sflush_r+0x1a>
 8012106:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801210a:	4299      	cmp	r1, r3
 801210c:	d002      	beq.n	8012114 <__sflush_r+0x94>
 801210e:	4628      	mov	r0, r5
 8012110:	f7ff f9e2 	bl	80114d8 <_free_r>
 8012114:	2000      	movs	r0, #0
 8012116:	6360      	str	r0, [r4, #52]	; 0x34
 8012118:	e7c0      	b.n	801209c <__sflush_r+0x1c>
 801211a:	2301      	movs	r3, #1
 801211c:	4628      	mov	r0, r5
 801211e:	47b0      	blx	r6
 8012120:	1c41      	adds	r1, r0, #1
 8012122:	d1c8      	bne.n	80120b6 <__sflush_r+0x36>
 8012124:	682b      	ldr	r3, [r5, #0]
 8012126:	2b00      	cmp	r3, #0
 8012128:	d0c5      	beq.n	80120b6 <__sflush_r+0x36>
 801212a:	2b1d      	cmp	r3, #29
 801212c:	d001      	beq.n	8012132 <__sflush_r+0xb2>
 801212e:	2b16      	cmp	r3, #22
 8012130:	d101      	bne.n	8012136 <__sflush_r+0xb6>
 8012132:	602f      	str	r7, [r5, #0]
 8012134:	e7b1      	b.n	801209a <__sflush_r+0x1a>
 8012136:	89a3      	ldrh	r3, [r4, #12]
 8012138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801213c:	81a3      	strh	r3, [r4, #12]
 801213e:	e7ad      	b.n	801209c <__sflush_r+0x1c>
 8012140:	690f      	ldr	r7, [r1, #16]
 8012142:	2f00      	cmp	r7, #0
 8012144:	d0a9      	beq.n	801209a <__sflush_r+0x1a>
 8012146:	0793      	lsls	r3, r2, #30
 8012148:	680e      	ldr	r6, [r1, #0]
 801214a:	bf08      	it	eq
 801214c:	694b      	ldreq	r3, [r1, #20]
 801214e:	600f      	str	r7, [r1, #0]
 8012150:	bf18      	it	ne
 8012152:	2300      	movne	r3, #0
 8012154:	eba6 0807 	sub.w	r8, r6, r7
 8012158:	608b      	str	r3, [r1, #8]
 801215a:	f1b8 0f00 	cmp.w	r8, #0
 801215e:	dd9c      	ble.n	801209a <__sflush_r+0x1a>
 8012160:	6a21      	ldr	r1, [r4, #32]
 8012162:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012164:	4643      	mov	r3, r8
 8012166:	463a      	mov	r2, r7
 8012168:	4628      	mov	r0, r5
 801216a:	47b0      	blx	r6
 801216c:	2800      	cmp	r0, #0
 801216e:	dc06      	bgt.n	801217e <__sflush_r+0xfe>
 8012170:	89a3      	ldrh	r3, [r4, #12]
 8012172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012176:	81a3      	strh	r3, [r4, #12]
 8012178:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801217c:	e78e      	b.n	801209c <__sflush_r+0x1c>
 801217e:	4407      	add	r7, r0
 8012180:	eba8 0800 	sub.w	r8, r8, r0
 8012184:	e7e9      	b.n	801215a <__sflush_r+0xda>
 8012186:	bf00      	nop
 8012188:	dfbffffe 	.word	0xdfbffffe

0801218c <_fflush_r>:
 801218c:	b538      	push	{r3, r4, r5, lr}
 801218e:	690b      	ldr	r3, [r1, #16]
 8012190:	4605      	mov	r5, r0
 8012192:	460c      	mov	r4, r1
 8012194:	b913      	cbnz	r3, 801219c <_fflush_r+0x10>
 8012196:	2500      	movs	r5, #0
 8012198:	4628      	mov	r0, r5
 801219a:	bd38      	pop	{r3, r4, r5, pc}
 801219c:	b118      	cbz	r0, 80121a6 <_fflush_r+0x1a>
 801219e:	6a03      	ldr	r3, [r0, #32]
 80121a0:	b90b      	cbnz	r3, 80121a6 <_fflush_r+0x1a>
 80121a2:	f7fe fa7b 	bl	801069c <__sinit>
 80121a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d0f3      	beq.n	8012196 <_fflush_r+0xa>
 80121ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80121b0:	07d0      	lsls	r0, r2, #31
 80121b2:	d404      	bmi.n	80121be <_fflush_r+0x32>
 80121b4:	0599      	lsls	r1, r3, #22
 80121b6:	d402      	bmi.n	80121be <_fflush_r+0x32>
 80121b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80121ba:	f7fe fb86 	bl	80108ca <__retarget_lock_acquire_recursive>
 80121be:	4628      	mov	r0, r5
 80121c0:	4621      	mov	r1, r4
 80121c2:	f7ff ff5d 	bl	8012080 <__sflush_r>
 80121c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80121c8:	07da      	lsls	r2, r3, #31
 80121ca:	4605      	mov	r5, r0
 80121cc:	d4e4      	bmi.n	8012198 <_fflush_r+0xc>
 80121ce:	89a3      	ldrh	r3, [r4, #12]
 80121d0:	059b      	lsls	r3, r3, #22
 80121d2:	d4e1      	bmi.n	8012198 <_fflush_r+0xc>
 80121d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80121d6:	f7fe fb79 	bl	80108cc <__retarget_lock_release_recursive>
 80121da:	e7dd      	b.n	8012198 <_fflush_r+0xc>

080121dc <memmove>:
 80121dc:	4288      	cmp	r0, r1
 80121de:	b510      	push	{r4, lr}
 80121e0:	eb01 0402 	add.w	r4, r1, r2
 80121e4:	d902      	bls.n	80121ec <memmove+0x10>
 80121e6:	4284      	cmp	r4, r0
 80121e8:	4623      	mov	r3, r4
 80121ea:	d807      	bhi.n	80121fc <memmove+0x20>
 80121ec:	1e43      	subs	r3, r0, #1
 80121ee:	42a1      	cmp	r1, r4
 80121f0:	d008      	beq.n	8012204 <memmove+0x28>
 80121f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80121f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80121fa:	e7f8      	b.n	80121ee <memmove+0x12>
 80121fc:	4402      	add	r2, r0
 80121fe:	4601      	mov	r1, r0
 8012200:	428a      	cmp	r2, r1
 8012202:	d100      	bne.n	8012206 <memmove+0x2a>
 8012204:	bd10      	pop	{r4, pc}
 8012206:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801220a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801220e:	e7f7      	b.n	8012200 <memmove+0x24>

08012210 <_sbrk_r>:
 8012210:	b538      	push	{r3, r4, r5, lr}
 8012212:	4d06      	ldr	r5, [pc, #24]	; (801222c <_sbrk_r+0x1c>)
 8012214:	2300      	movs	r3, #0
 8012216:	4604      	mov	r4, r0
 8012218:	4608      	mov	r0, r1
 801221a:	602b      	str	r3, [r5, #0]
 801221c:	f7f0 fbf2 	bl	8002a04 <_sbrk>
 8012220:	1c43      	adds	r3, r0, #1
 8012222:	d102      	bne.n	801222a <_sbrk_r+0x1a>
 8012224:	682b      	ldr	r3, [r5, #0]
 8012226:	b103      	cbz	r3, 801222a <_sbrk_r+0x1a>
 8012228:	6023      	str	r3, [r4, #0]
 801222a:	bd38      	pop	{r3, r4, r5, pc}
 801222c:	240009a0 	.word	0x240009a0

08012230 <__assert_func>:
 8012230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012232:	4614      	mov	r4, r2
 8012234:	461a      	mov	r2, r3
 8012236:	4b09      	ldr	r3, [pc, #36]	; (801225c <__assert_func+0x2c>)
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	4605      	mov	r5, r0
 801223c:	68d8      	ldr	r0, [r3, #12]
 801223e:	b14c      	cbz	r4, 8012254 <__assert_func+0x24>
 8012240:	4b07      	ldr	r3, [pc, #28]	; (8012260 <__assert_func+0x30>)
 8012242:	9100      	str	r1, [sp, #0]
 8012244:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012248:	4906      	ldr	r1, [pc, #24]	; (8012264 <__assert_func+0x34>)
 801224a:	462b      	mov	r3, r5
 801224c:	f000 f872 	bl	8012334 <fiprintf>
 8012250:	f000 f882 	bl	8012358 <abort>
 8012254:	4b04      	ldr	r3, [pc, #16]	; (8012268 <__assert_func+0x38>)
 8012256:	461c      	mov	r4, r3
 8012258:	e7f3      	b.n	8012242 <__assert_func+0x12>
 801225a:	bf00      	nop
 801225c:	2400006c 	.word	0x2400006c
 8012260:	08012cef 	.word	0x08012cef
 8012264:	08012cfc 	.word	0x08012cfc
 8012268:	08012d2a 	.word	0x08012d2a

0801226c <_calloc_r>:
 801226c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801226e:	fba1 2402 	umull	r2, r4, r1, r2
 8012272:	b94c      	cbnz	r4, 8012288 <_calloc_r+0x1c>
 8012274:	4611      	mov	r1, r2
 8012276:	9201      	str	r2, [sp, #4]
 8012278:	f7ff f9a2 	bl	80115c0 <_malloc_r>
 801227c:	9a01      	ldr	r2, [sp, #4]
 801227e:	4605      	mov	r5, r0
 8012280:	b930      	cbnz	r0, 8012290 <_calloc_r+0x24>
 8012282:	4628      	mov	r0, r5
 8012284:	b003      	add	sp, #12
 8012286:	bd30      	pop	{r4, r5, pc}
 8012288:	220c      	movs	r2, #12
 801228a:	6002      	str	r2, [r0, #0]
 801228c:	2500      	movs	r5, #0
 801228e:	e7f8      	b.n	8012282 <_calloc_r+0x16>
 8012290:	4621      	mov	r1, r4
 8012292:	f7fe fa9c 	bl	80107ce <memset>
 8012296:	e7f4      	b.n	8012282 <_calloc_r+0x16>

08012298 <__ascii_mbtowc>:
 8012298:	b082      	sub	sp, #8
 801229a:	b901      	cbnz	r1, 801229e <__ascii_mbtowc+0x6>
 801229c:	a901      	add	r1, sp, #4
 801229e:	b142      	cbz	r2, 80122b2 <__ascii_mbtowc+0x1a>
 80122a0:	b14b      	cbz	r3, 80122b6 <__ascii_mbtowc+0x1e>
 80122a2:	7813      	ldrb	r3, [r2, #0]
 80122a4:	600b      	str	r3, [r1, #0]
 80122a6:	7812      	ldrb	r2, [r2, #0]
 80122a8:	1e10      	subs	r0, r2, #0
 80122aa:	bf18      	it	ne
 80122ac:	2001      	movne	r0, #1
 80122ae:	b002      	add	sp, #8
 80122b0:	4770      	bx	lr
 80122b2:	4610      	mov	r0, r2
 80122b4:	e7fb      	b.n	80122ae <__ascii_mbtowc+0x16>
 80122b6:	f06f 0001 	mvn.w	r0, #1
 80122ba:	e7f8      	b.n	80122ae <__ascii_mbtowc+0x16>

080122bc <_realloc_r>:
 80122bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122c0:	4680      	mov	r8, r0
 80122c2:	4614      	mov	r4, r2
 80122c4:	460e      	mov	r6, r1
 80122c6:	b921      	cbnz	r1, 80122d2 <_realloc_r+0x16>
 80122c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80122cc:	4611      	mov	r1, r2
 80122ce:	f7ff b977 	b.w	80115c0 <_malloc_r>
 80122d2:	b92a      	cbnz	r2, 80122e0 <_realloc_r+0x24>
 80122d4:	f7ff f900 	bl	80114d8 <_free_r>
 80122d8:	4625      	mov	r5, r4
 80122da:	4628      	mov	r0, r5
 80122dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122e0:	f000 f841 	bl	8012366 <_malloc_usable_size_r>
 80122e4:	4284      	cmp	r4, r0
 80122e6:	4607      	mov	r7, r0
 80122e8:	d802      	bhi.n	80122f0 <_realloc_r+0x34>
 80122ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80122ee:	d812      	bhi.n	8012316 <_realloc_r+0x5a>
 80122f0:	4621      	mov	r1, r4
 80122f2:	4640      	mov	r0, r8
 80122f4:	f7ff f964 	bl	80115c0 <_malloc_r>
 80122f8:	4605      	mov	r5, r0
 80122fa:	2800      	cmp	r0, #0
 80122fc:	d0ed      	beq.n	80122da <_realloc_r+0x1e>
 80122fe:	42bc      	cmp	r4, r7
 8012300:	4622      	mov	r2, r4
 8012302:	4631      	mov	r1, r6
 8012304:	bf28      	it	cs
 8012306:	463a      	movcs	r2, r7
 8012308:	f7fe fae1 	bl	80108ce <memcpy>
 801230c:	4631      	mov	r1, r6
 801230e:	4640      	mov	r0, r8
 8012310:	f7ff f8e2 	bl	80114d8 <_free_r>
 8012314:	e7e1      	b.n	80122da <_realloc_r+0x1e>
 8012316:	4635      	mov	r5, r6
 8012318:	e7df      	b.n	80122da <_realloc_r+0x1e>

0801231a <__ascii_wctomb>:
 801231a:	b149      	cbz	r1, 8012330 <__ascii_wctomb+0x16>
 801231c:	2aff      	cmp	r2, #255	; 0xff
 801231e:	bf85      	ittet	hi
 8012320:	238a      	movhi	r3, #138	; 0x8a
 8012322:	6003      	strhi	r3, [r0, #0]
 8012324:	700a      	strbls	r2, [r1, #0]
 8012326:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801232a:	bf98      	it	ls
 801232c:	2001      	movls	r0, #1
 801232e:	4770      	bx	lr
 8012330:	4608      	mov	r0, r1
 8012332:	4770      	bx	lr

08012334 <fiprintf>:
 8012334:	b40e      	push	{r1, r2, r3}
 8012336:	b503      	push	{r0, r1, lr}
 8012338:	4601      	mov	r1, r0
 801233a:	ab03      	add	r3, sp, #12
 801233c:	4805      	ldr	r0, [pc, #20]	; (8012354 <fiprintf+0x20>)
 801233e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012342:	6800      	ldr	r0, [r0, #0]
 8012344:	9301      	str	r3, [sp, #4]
 8012346:	f000 f83f 	bl	80123c8 <_vfiprintf_r>
 801234a:	b002      	add	sp, #8
 801234c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012350:	b003      	add	sp, #12
 8012352:	4770      	bx	lr
 8012354:	2400006c 	.word	0x2400006c

08012358 <abort>:
 8012358:	b508      	push	{r3, lr}
 801235a:	2006      	movs	r0, #6
 801235c:	f000 fa0c 	bl	8012778 <raise>
 8012360:	2001      	movs	r0, #1
 8012362:	f7f0 fad7 	bl	8002914 <_exit>

08012366 <_malloc_usable_size_r>:
 8012366:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801236a:	1f18      	subs	r0, r3, #4
 801236c:	2b00      	cmp	r3, #0
 801236e:	bfbc      	itt	lt
 8012370:	580b      	ldrlt	r3, [r1, r0]
 8012372:	18c0      	addlt	r0, r0, r3
 8012374:	4770      	bx	lr

08012376 <__sfputc_r>:
 8012376:	6893      	ldr	r3, [r2, #8]
 8012378:	3b01      	subs	r3, #1
 801237a:	2b00      	cmp	r3, #0
 801237c:	b410      	push	{r4}
 801237e:	6093      	str	r3, [r2, #8]
 8012380:	da08      	bge.n	8012394 <__sfputc_r+0x1e>
 8012382:	6994      	ldr	r4, [r2, #24]
 8012384:	42a3      	cmp	r3, r4
 8012386:	db01      	blt.n	801238c <__sfputc_r+0x16>
 8012388:	290a      	cmp	r1, #10
 801238a:	d103      	bne.n	8012394 <__sfputc_r+0x1e>
 801238c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012390:	f000 b934 	b.w	80125fc <__swbuf_r>
 8012394:	6813      	ldr	r3, [r2, #0]
 8012396:	1c58      	adds	r0, r3, #1
 8012398:	6010      	str	r0, [r2, #0]
 801239a:	7019      	strb	r1, [r3, #0]
 801239c:	4608      	mov	r0, r1
 801239e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80123a2:	4770      	bx	lr

080123a4 <__sfputs_r>:
 80123a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123a6:	4606      	mov	r6, r0
 80123a8:	460f      	mov	r7, r1
 80123aa:	4614      	mov	r4, r2
 80123ac:	18d5      	adds	r5, r2, r3
 80123ae:	42ac      	cmp	r4, r5
 80123b0:	d101      	bne.n	80123b6 <__sfputs_r+0x12>
 80123b2:	2000      	movs	r0, #0
 80123b4:	e007      	b.n	80123c6 <__sfputs_r+0x22>
 80123b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123ba:	463a      	mov	r2, r7
 80123bc:	4630      	mov	r0, r6
 80123be:	f7ff ffda 	bl	8012376 <__sfputc_r>
 80123c2:	1c43      	adds	r3, r0, #1
 80123c4:	d1f3      	bne.n	80123ae <__sfputs_r+0xa>
 80123c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080123c8 <_vfiprintf_r>:
 80123c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123cc:	460d      	mov	r5, r1
 80123ce:	b09d      	sub	sp, #116	; 0x74
 80123d0:	4614      	mov	r4, r2
 80123d2:	4698      	mov	r8, r3
 80123d4:	4606      	mov	r6, r0
 80123d6:	b118      	cbz	r0, 80123e0 <_vfiprintf_r+0x18>
 80123d8:	6a03      	ldr	r3, [r0, #32]
 80123da:	b90b      	cbnz	r3, 80123e0 <_vfiprintf_r+0x18>
 80123dc:	f7fe f95e 	bl	801069c <__sinit>
 80123e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80123e2:	07d9      	lsls	r1, r3, #31
 80123e4:	d405      	bmi.n	80123f2 <_vfiprintf_r+0x2a>
 80123e6:	89ab      	ldrh	r3, [r5, #12]
 80123e8:	059a      	lsls	r2, r3, #22
 80123ea:	d402      	bmi.n	80123f2 <_vfiprintf_r+0x2a>
 80123ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80123ee:	f7fe fa6c 	bl	80108ca <__retarget_lock_acquire_recursive>
 80123f2:	89ab      	ldrh	r3, [r5, #12]
 80123f4:	071b      	lsls	r3, r3, #28
 80123f6:	d501      	bpl.n	80123fc <_vfiprintf_r+0x34>
 80123f8:	692b      	ldr	r3, [r5, #16]
 80123fa:	b99b      	cbnz	r3, 8012424 <_vfiprintf_r+0x5c>
 80123fc:	4629      	mov	r1, r5
 80123fe:	4630      	mov	r0, r6
 8012400:	f000 f93a 	bl	8012678 <__swsetup_r>
 8012404:	b170      	cbz	r0, 8012424 <_vfiprintf_r+0x5c>
 8012406:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012408:	07dc      	lsls	r4, r3, #31
 801240a:	d504      	bpl.n	8012416 <_vfiprintf_r+0x4e>
 801240c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012410:	b01d      	add	sp, #116	; 0x74
 8012412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012416:	89ab      	ldrh	r3, [r5, #12]
 8012418:	0598      	lsls	r0, r3, #22
 801241a:	d4f7      	bmi.n	801240c <_vfiprintf_r+0x44>
 801241c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801241e:	f7fe fa55 	bl	80108cc <__retarget_lock_release_recursive>
 8012422:	e7f3      	b.n	801240c <_vfiprintf_r+0x44>
 8012424:	2300      	movs	r3, #0
 8012426:	9309      	str	r3, [sp, #36]	; 0x24
 8012428:	2320      	movs	r3, #32
 801242a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801242e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012432:	2330      	movs	r3, #48	; 0x30
 8012434:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80125e8 <_vfiprintf_r+0x220>
 8012438:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801243c:	f04f 0901 	mov.w	r9, #1
 8012440:	4623      	mov	r3, r4
 8012442:	469a      	mov	sl, r3
 8012444:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012448:	b10a      	cbz	r2, 801244e <_vfiprintf_r+0x86>
 801244a:	2a25      	cmp	r2, #37	; 0x25
 801244c:	d1f9      	bne.n	8012442 <_vfiprintf_r+0x7a>
 801244e:	ebba 0b04 	subs.w	fp, sl, r4
 8012452:	d00b      	beq.n	801246c <_vfiprintf_r+0xa4>
 8012454:	465b      	mov	r3, fp
 8012456:	4622      	mov	r2, r4
 8012458:	4629      	mov	r1, r5
 801245a:	4630      	mov	r0, r6
 801245c:	f7ff ffa2 	bl	80123a4 <__sfputs_r>
 8012460:	3001      	adds	r0, #1
 8012462:	f000 80a9 	beq.w	80125b8 <_vfiprintf_r+0x1f0>
 8012466:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012468:	445a      	add	r2, fp
 801246a:	9209      	str	r2, [sp, #36]	; 0x24
 801246c:	f89a 3000 	ldrb.w	r3, [sl]
 8012470:	2b00      	cmp	r3, #0
 8012472:	f000 80a1 	beq.w	80125b8 <_vfiprintf_r+0x1f0>
 8012476:	2300      	movs	r3, #0
 8012478:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801247c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012480:	f10a 0a01 	add.w	sl, sl, #1
 8012484:	9304      	str	r3, [sp, #16]
 8012486:	9307      	str	r3, [sp, #28]
 8012488:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801248c:	931a      	str	r3, [sp, #104]	; 0x68
 801248e:	4654      	mov	r4, sl
 8012490:	2205      	movs	r2, #5
 8012492:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012496:	4854      	ldr	r0, [pc, #336]	; (80125e8 <_vfiprintf_r+0x220>)
 8012498:	f7ed ff22 	bl	80002e0 <memchr>
 801249c:	9a04      	ldr	r2, [sp, #16]
 801249e:	b9d8      	cbnz	r0, 80124d8 <_vfiprintf_r+0x110>
 80124a0:	06d1      	lsls	r1, r2, #27
 80124a2:	bf44      	itt	mi
 80124a4:	2320      	movmi	r3, #32
 80124a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80124aa:	0713      	lsls	r3, r2, #28
 80124ac:	bf44      	itt	mi
 80124ae:	232b      	movmi	r3, #43	; 0x2b
 80124b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80124b4:	f89a 3000 	ldrb.w	r3, [sl]
 80124b8:	2b2a      	cmp	r3, #42	; 0x2a
 80124ba:	d015      	beq.n	80124e8 <_vfiprintf_r+0x120>
 80124bc:	9a07      	ldr	r2, [sp, #28]
 80124be:	4654      	mov	r4, sl
 80124c0:	2000      	movs	r0, #0
 80124c2:	f04f 0c0a 	mov.w	ip, #10
 80124c6:	4621      	mov	r1, r4
 80124c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80124cc:	3b30      	subs	r3, #48	; 0x30
 80124ce:	2b09      	cmp	r3, #9
 80124d0:	d94d      	bls.n	801256e <_vfiprintf_r+0x1a6>
 80124d2:	b1b0      	cbz	r0, 8012502 <_vfiprintf_r+0x13a>
 80124d4:	9207      	str	r2, [sp, #28]
 80124d6:	e014      	b.n	8012502 <_vfiprintf_r+0x13a>
 80124d8:	eba0 0308 	sub.w	r3, r0, r8
 80124dc:	fa09 f303 	lsl.w	r3, r9, r3
 80124e0:	4313      	orrs	r3, r2
 80124e2:	9304      	str	r3, [sp, #16]
 80124e4:	46a2      	mov	sl, r4
 80124e6:	e7d2      	b.n	801248e <_vfiprintf_r+0xc6>
 80124e8:	9b03      	ldr	r3, [sp, #12]
 80124ea:	1d19      	adds	r1, r3, #4
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	9103      	str	r1, [sp, #12]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	bfbb      	ittet	lt
 80124f4:	425b      	neglt	r3, r3
 80124f6:	f042 0202 	orrlt.w	r2, r2, #2
 80124fa:	9307      	strge	r3, [sp, #28]
 80124fc:	9307      	strlt	r3, [sp, #28]
 80124fe:	bfb8      	it	lt
 8012500:	9204      	strlt	r2, [sp, #16]
 8012502:	7823      	ldrb	r3, [r4, #0]
 8012504:	2b2e      	cmp	r3, #46	; 0x2e
 8012506:	d10c      	bne.n	8012522 <_vfiprintf_r+0x15a>
 8012508:	7863      	ldrb	r3, [r4, #1]
 801250a:	2b2a      	cmp	r3, #42	; 0x2a
 801250c:	d134      	bne.n	8012578 <_vfiprintf_r+0x1b0>
 801250e:	9b03      	ldr	r3, [sp, #12]
 8012510:	1d1a      	adds	r2, r3, #4
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	9203      	str	r2, [sp, #12]
 8012516:	2b00      	cmp	r3, #0
 8012518:	bfb8      	it	lt
 801251a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801251e:	3402      	adds	r4, #2
 8012520:	9305      	str	r3, [sp, #20]
 8012522:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80125f8 <_vfiprintf_r+0x230>
 8012526:	7821      	ldrb	r1, [r4, #0]
 8012528:	2203      	movs	r2, #3
 801252a:	4650      	mov	r0, sl
 801252c:	f7ed fed8 	bl	80002e0 <memchr>
 8012530:	b138      	cbz	r0, 8012542 <_vfiprintf_r+0x17a>
 8012532:	9b04      	ldr	r3, [sp, #16]
 8012534:	eba0 000a 	sub.w	r0, r0, sl
 8012538:	2240      	movs	r2, #64	; 0x40
 801253a:	4082      	lsls	r2, r0
 801253c:	4313      	orrs	r3, r2
 801253e:	3401      	adds	r4, #1
 8012540:	9304      	str	r3, [sp, #16]
 8012542:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012546:	4829      	ldr	r0, [pc, #164]	; (80125ec <_vfiprintf_r+0x224>)
 8012548:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801254c:	2206      	movs	r2, #6
 801254e:	f7ed fec7 	bl	80002e0 <memchr>
 8012552:	2800      	cmp	r0, #0
 8012554:	d03f      	beq.n	80125d6 <_vfiprintf_r+0x20e>
 8012556:	4b26      	ldr	r3, [pc, #152]	; (80125f0 <_vfiprintf_r+0x228>)
 8012558:	bb1b      	cbnz	r3, 80125a2 <_vfiprintf_r+0x1da>
 801255a:	9b03      	ldr	r3, [sp, #12]
 801255c:	3307      	adds	r3, #7
 801255e:	f023 0307 	bic.w	r3, r3, #7
 8012562:	3308      	adds	r3, #8
 8012564:	9303      	str	r3, [sp, #12]
 8012566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012568:	443b      	add	r3, r7
 801256a:	9309      	str	r3, [sp, #36]	; 0x24
 801256c:	e768      	b.n	8012440 <_vfiprintf_r+0x78>
 801256e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012572:	460c      	mov	r4, r1
 8012574:	2001      	movs	r0, #1
 8012576:	e7a6      	b.n	80124c6 <_vfiprintf_r+0xfe>
 8012578:	2300      	movs	r3, #0
 801257a:	3401      	adds	r4, #1
 801257c:	9305      	str	r3, [sp, #20]
 801257e:	4619      	mov	r1, r3
 8012580:	f04f 0c0a 	mov.w	ip, #10
 8012584:	4620      	mov	r0, r4
 8012586:	f810 2b01 	ldrb.w	r2, [r0], #1
 801258a:	3a30      	subs	r2, #48	; 0x30
 801258c:	2a09      	cmp	r2, #9
 801258e:	d903      	bls.n	8012598 <_vfiprintf_r+0x1d0>
 8012590:	2b00      	cmp	r3, #0
 8012592:	d0c6      	beq.n	8012522 <_vfiprintf_r+0x15a>
 8012594:	9105      	str	r1, [sp, #20]
 8012596:	e7c4      	b.n	8012522 <_vfiprintf_r+0x15a>
 8012598:	fb0c 2101 	mla	r1, ip, r1, r2
 801259c:	4604      	mov	r4, r0
 801259e:	2301      	movs	r3, #1
 80125a0:	e7f0      	b.n	8012584 <_vfiprintf_r+0x1bc>
 80125a2:	ab03      	add	r3, sp, #12
 80125a4:	9300      	str	r3, [sp, #0]
 80125a6:	462a      	mov	r2, r5
 80125a8:	4b12      	ldr	r3, [pc, #72]	; (80125f4 <_vfiprintf_r+0x22c>)
 80125aa:	a904      	add	r1, sp, #16
 80125ac:	4630      	mov	r0, r6
 80125ae:	f7fd fc3f 	bl	800fe30 <_printf_float>
 80125b2:	4607      	mov	r7, r0
 80125b4:	1c78      	adds	r0, r7, #1
 80125b6:	d1d6      	bne.n	8012566 <_vfiprintf_r+0x19e>
 80125b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80125ba:	07d9      	lsls	r1, r3, #31
 80125bc:	d405      	bmi.n	80125ca <_vfiprintf_r+0x202>
 80125be:	89ab      	ldrh	r3, [r5, #12]
 80125c0:	059a      	lsls	r2, r3, #22
 80125c2:	d402      	bmi.n	80125ca <_vfiprintf_r+0x202>
 80125c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80125c6:	f7fe f981 	bl	80108cc <__retarget_lock_release_recursive>
 80125ca:	89ab      	ldrh	r3, [r5, #12]
 80125cc:	065b      	lsls	r3, r3, #25
 80125ce:	f53f af1d 	bmi.w	801240c <_vfiprintf_r+0x44>
 80125d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80125d4:	e71c      	b.n	8012410 <_vfiprintf_r+0x48>
 80125d6:	ab03      	add	r3, sp, #12
 80125d8:	9300      	str	r3, [sp, #0]
 80125da:	462a      	mov	r2, r5
 80125dc:	4b05      	ldr	r3, [pc, #20]	; (80125f4 <_vfiprintf_r+0x22c>)
 80125de:	a904      	add	r1, sp, #16
 80125e0:	4630      	mov	r0, r6
 80125e2:	f7fd fead 	bl	8010340 <_printf_i>
 80125e6:	e7e4      	b.n	80125b2 <_vfiprintf_r+0x1ea>
 80125e8:	08012cd4 	.word	0x08012cd4
 80125ec:	08012cde 	.word	0x08012cde
 80125f0:	0800fe31 	.word	0x0800fe31
 80125f4:	080123a5 	.word	0x080123a5
 80125f8:	08012cda 	.word	0x08012cda

080125fc <__swbuf_r>:
 80125fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125fe:	460e      	mov	r6, r1
 8012600:	4614      	mov	r4, r2
 8012602:	4605      	mov	r5, r0
 8012604:	b118      	cbz	r0, 801260e <__swbuf_r+0x12>
 8012606:	6a03      	ldr	r3, [r0, #32]
 8012608:	b90b      	cbnz	r3, 801260e <__swbuf_r+0x12>
 801260a:	f7fe f847 	bl	801069c <__sinit>
 801260e:	69a3      	ldr	r3, [r4, #24]
 8012610:	60a3      	str	r3, [r4, #8]
 8012612:	89a3      	ldrh	r3, [r4, #12]
 8012614:	071a      	lsls	r2, r3, #28
 8012616:	d525      	bpl.n	8012664 <__swbuf_r+0x68>
 8012618:	6923      	ldr	r3, [r4, #16]
 801261a:	b31b      	cbz	r3, 8012664 <__swbuf_r+0x68>
 801261c:	6823      	ldr	r3, [r4, #0]
 801261e:	6922      	ldr	r2, [r4, #16]
 8012620:	1a98      	subs	r0, r3, r2
 8012622:	6963      	ldr	r3, [r4, #20]
 8012624:	b2f6      	uxtb	r6, r6
 8012626:	4283      	cmp	r3, r0
 8012628:	4637      	mov	r7, r6
 801262a:	dc04      	bgt.n	8012636 <__swbuf_r+0x3a>
 801262c:	4621      	mov	r1, r4
 801262e:	4628      	mov	r0, r5
 8012630:	f7ff fdac 	bl	801218c <_fflush_r>
 8012634:	b9e0      	cbnz	r0, 8012670 <__swbuf_r+0x74>
 8012636:	68a3      	ldr	r3, [r4, #8]
 8012638:	3b01      	subs	r3, #1
 801263a:	60a3      	str	r3, [r4, #8]
 801263c:	6823      	ldr	r3, [r4, #0]
 801263e:	1c5a      	adds	r2, r3, #1
 8012640:	6022      	str	r2, [r4, #0]
 8012642:	701e      	strb	r6, [r3, #0]
 8012644:	6962      	ldr	r2, [r4, #20]
 8012646:	1c43      	adds	r3, r0, #1
 8012648:	429a      	cmp	r2, r3
 801264a:	d004      	beq.n	8012656 <__swbuf_r+0x5a>
 801264c:	89a3      	ldrh	r3, [r4, #12]
 801264e:	07db      	lsls	r3, r3, #31
 8012650:	d506      	bpl.n	8012660 <__swbuf_r+0x64>
 8012652:	2e0a      	cmp	r6, #10
 8012654:	d104      	bne.n	8012660 <__swbuf_r+0x64>
 8012656:	4621      	mov	r1, r4
 8012658:	4628      	mov	r0, r5
 801265a:	f7ff fd97 	bl	801218c <_fflush_r>
 801265e:	b938      	cbnz	r0, 8012670 <__swbuf_r+0x74>
 8012660:	4638      	mov	r0, r7
 8012662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012664:	4621      	mov	r1, r4
 8012666:	4628      	mov	r0, r5
 8012668:	f000 f806 	bl	8012678 <__swsetup_r>
 801266c:	2800      	cmp	r0, #0
 801266e:	d0d5      	beq.n	801261c <__swbuf_r+0x20>
 8012670:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012674:	e7f4      	b.n	8012660 <__swbuf_r+0x64>
	...

08012678 <__swsetup_r>:
 8012678:	b538      	push	{r3, r4, r5, lr}
 801267a:	4b2a      	ldr	r3, [pc, #168]	; (8012724 <__swsetup_r+0xac>)
 801267c:	4605      	mov	r5, r0
 801267e:	6818      	ldr	r0, [r3, #0]
 8012680:	460c      	mov	r4, r1
 8012682:	b118      	cbz	r0, 801268c <__swsetup_r+0x14>
 8012684:	6a03      	ldr	r3, [r0, #32]
 8012686:	b90b      	cbnz	r3, 801268c <__swsetup_r+0x14>
 8012688:	f7fe f808 	bl	801069c <__sinit>
 801268c:	89a3      	ldrh	r3, [r4, #12]
 801268e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012692:	0718      	lsls	r0, r3, #28
 8012694:	d422      	bmi.n	80126dc <__swsetup_r+0x64>
 8012696:	06d9      	lsls	r1, r3, #27
 8012698:	d407      	bmi.n	80126aa <__swsetup_r+0x32>
 801269a:	2309      	movs	r3, #9
 801269c:	602b      	str	r3, [r5, #0]
 801269e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80126a2:	81a3      	strh	r3, [r4, #12]
 80126a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80126a8:	e034      	b.n	8012714 <__swsetup_r+0x9c>
 80126aa:	0758      	lsls	r0, r3, #29
 80126ac:	d512      	bpl.n	80126d4 <__swsetup_r+0x5c>
 80126ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80126b0:	b141      	cbz	r1, 80126c4 <__swsetup_r+0x4c>
 80126b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80126b6:	4299      	cmp	r1, r3
 80126b8:	d002      	beq.n	80126c0 <__swsetup_r+0x48>
 80126ba:	4628      	mov	r0, r5
 80126bc:	f7fe ff0c 	bl	80114d8 <_free_r>
 80126c0:	2300      	movs	r3, #0
 80126c2:	6363      	str	r3, [r4, #52]	; 0x34
 80126c4:	89a3      	ldrh	r3, [r4, #12]
 80126c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80126ca:	81a3      	strh	r3, [r4, #12]
 80126cc:	2300      	movs	r3, #0
 80126ce:	6063      	str	r3, [r4, #4]
 80126d0:	6923      	ldr	r3, [r4, #16]
 80126d2:	6023      	str	r3, [r4, #0]
 80126d4:	89a3      	ldrh	r3, [r4, #12]
 80126d6:	f043 0308 	orr.w	r3, r3, #8
 80126da:	81a3      	strh	r3, [r4, #12]
 80126dc:	6923      	ldr	r3, [r4, #16]
 80126de:	b94b      	cbnz	r3, 80126f4 <__swsetup_r+0x7c>
 80126e0:	89a3      	ldrh	r3, [r4, #12]
 80126e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80126e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80126ea:	d003      	beq.n	80126f4 <__swsetup_r+0x7c>
 80126ec:	4621      	mov	r1, r4
 80126ee:	4628      	mov	r0, r5
 80126f0:	f000 f884 	bl	80127fc <__smakebuf_r>
 80126f4:	89a0      	ldrh	r0, [r4, #12]
 80126f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80126fa:	f010 0301 	ands.w	r3, r0, #1
 80126fe:	d00a      	beq.n	8012716 <__swsetup_r+0x9e>
 8012700:	2300      	movs	r3, #0
 8012702:	60a3      	str	r3, [r4, #8]
 8012704:	6963      	ldr	r3, [r4, #20]
 8012706:	425b      	negs	r3, r3
 8012708:	61a3      	str	r3, [r4, #24]
 801270a:	6923      	ldr	r3, [r4, #16]
 801270c:	b943      	cbnz	r3, 8012720 <__swsetup_r+0xa8>
 801270e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012712:	d1c4      	bne.n	801269e <__swsetup_r+0x26>
 8012714:	bd38      	pop	{r3, r4, r5, pc}
 8012716:	0781      	lsls	r1, r0, #30
 8012718:	bf58      	it	pl
 801271a:	6963      	ldrpl	r3, [r4, #20]
 801271c:	60a3      	str	r3, [r4, #8]
 801271e:	e7f4      	b.n	801270a <__swsetup_r+0x92>
 8012720:	2000      	movs	r0, #0
 8012722:	e7f7      	b.n	8012714 <__swsetup_r+0x9c>
 8012724:	2400006c 	.word	0x2400006c

08012728 <_raise_r>:
 8012728:	291f      	cmp	r1, #31
 801272a:	b538      	push	{r3, r4, r5, lr}
 801272c:	4604      	mov	r4, r0
 801272e:	460d      	mov	r5, r1
 8012730:	d904      	bls.n	801273c <_raise_r+0x14>
 8012732:	2316      	movs	r3, #22
 8012734:	6003      	str	r3, [r0, #0]
 8012736:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801273a:	bd38      	pop	{r3, r4, r5, pc}
 801273c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801273e:	b112      	cbz	r2, 8012746 <_raise_r+0x1e>
 8012740:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012744:	b94b      	cbnz	r3, 801275a <_raise_r+0x32>
 8012746:	4620      	mov	r0, r4
 8012748:	f000 f830 	bl	80127ac <_getpid_r>
 801274c:	462a      	mov	r2, r5
 801274e:	4601      	mov	r1, r0
 8012750:	4620      	mov	r0, r4
 8012752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012756:	f000 b817 	b.w	8012788 <_kill_r>
 801275a:	2b01      	cmp	r3, #1
 801275c:	d00a      	beq.n	8012774 <_raise_r+0x4c>
 801275e:	1c59      	adds	r1, r3, #1
 8012760:	d103      	bne.n	801276a <_raise_r+0x42>
 8012762:	2316      	movs	r3, #22
 8012764:	6003      	str	r3, [r0, #0]
 8012766:	2001      	movs	r0, #1
 8012768:	e7e7      	b.n	801273a <_raise_r+0x12>
 801276a:	2400      	movs	r4, #0
 801276c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012770:	4628      	mov	r0, r5
 8012772:	4798      	blx	r3
 8012774:	2000      	movs	r0, #0
 8012776:	e7e0      	b.n	801273a <_raise_r+0x12>

08012778 <raise>:
 8012778:	4b02      	ldr	r3, [pc, #8]	; (8012784 <raise+0xc>)
 801277a:	4601      	mov	r1, r0
 801277c:	6818      	ldr	r0, [r3, #0]
 801277e:	f7ff bfd3 	b.w	8012728 <_raise_r>
 8012782:	bf00      	nop
 8012784:	2400006c 	.word	0x2400006c

08012788 <_kill_r>:
 8012788:	b538      	push	{r3, r4, r5, lr}
 801278a:	4d07      	ldr	r5, [pc, #28]	; (80127a8 <_kill_r+0x20>)
 801278c:	2300      	movs	r3, #0
 801278e:	4604      	mov	r4, r0
 8012790:	4608      	mov	r0, r1
 8012792:	4611      	mov	r1, r2
 8012794:	602b      	str	r3, [r5, #0]
 8012796:	f7f0 f8ad 	bl	80028f4 <_kill>
 801279a:	1c43      	adds	r3, r0, #1
 801279c:	d102      	bne.n	80127a4 <_kill_r+0x1c>
 801279e:	682b      	ldr	r3, [r5, #0]
 80127a0:	b103      	cbz	r3, 80127a4 <_kill_r+0x1c>
 80127a2:	6023      	str	r3, [r4, #0]
 80127a4:	bd38      	pop	{r3, r4, r5, pc}
 80127a6:	bf00      	nop
 80127a8:	240009a0 	.word	0x240009a0

080127ac <_getpid_r>:
 80127ac:	f7f0 b89a 	b.w	80028e4 <_getpid>

080127b0 <__swhatbuf_r>:
 80127b0:	b570      	push	{r4, r5, r6, lr}
 80127b2:	460c      	mov	r4, r1
 80127b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127b8:	2900      	cmp	r1, #0
 80127ba:	b096      	sub	sp, #88	; 0x58
 80127bc:	4615      	mov	r5, r2
 80127be:	461e      	mov	r6, r3
 80127c0:	da0d      	bge.n	80127de <__swhatbuf_r+0x2e>
 80127c2:	89a3      	ldrh	r3, [r4, #12]
 80127c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80127c8:	f04f 0100 	mov.w	r1, #0
 80127cc:	bf0c      	ite	eq
 80127ce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80127d2:	2340      	movne	r3, #64	; 0x40
 80127d4:	2000      	movs	r0, #0
 80127d6:	6031      	str	r1, [r6, #0]
 80127d8:	602b      	str	r3, [r5, #0]
 80127da:	b016      	add	sp, #88	; 0x58
 80127dc:	bd70      	pop	{r4, r5, r6, pc}
 80127de:	466a      	mov	r2, sp
 80127e0:	f000 f848 	bl	8012874 <_fstat_r>
 80127e4:	2800      	cmp	r0, #0
 80127e6:	dbec      	blt.n	80127c2 <__swhatbuf_r+0x12>
 80127e8:	9901      	ldr	r1, [sp, #4]
 80127ea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80127ee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80127f2:	4259      	negs	r1, r3
 80127f4:	4159      	adcs	r1, r3
 80127f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80127fa:	e7eb      	b.n	80127d4 <__swhatbuf_r+0x24>

080127fc <__smakebuf_r>:
 80127fc:	898b      	ldrh	r3, [r1, #12]
 80127fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012800:	079d      	lsls	r5, r3, #30
 8012802:	4606      	mov	r6, r0
 8012804:	460c      	mov	r4, r1
 8012806:	d507      	bpl.n	8012818 <__smakebuf_r+0x1c>
 8012808:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801280c:	6023      	str	r3, [r4, #0]
 801280e:	6123      	str	r3, [r4, #16]
 8012810:	2301      	movs	r3, #1
 8012812:	6163      	str	r3, [r4, #20]
 8012814:	b002      	add	sp, #8
 8012816:	bd70      	pop	{r4, r5, r6, pc}
 8012818:	ab01      	add	r3, sp, #4
 801281a:	466a      	mov	r2, sp
 801281c:	f7ff ffc8 	bl	80127b0 <__swhatbuf_r>
 8012820:	9900      	ldr	r1, [sp, #0]
 8012822:	4605      	mov	r5, r0
 8012824:	4630      	mov	r0, r6
 8012826:	f7fe fecb 	bl	80115c0 <_malloc_r>
 801282a:	b948      	cbnz	r0, 8012840 <__smakebuf_r+0x44>
 801282c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012830:	059a      	lsls	r2, r3, #22
 8012832:	d4ef      	bmi.n	8012814 <__smakebuf_r+0x18>
 8012834:	f023 0303 	bic.w	r3, r3, #3
 8012838:	f043 0302 	orr.w	r3, r3, #2
 801283c:	81a3      	strh	r3, [r4, #12]
 801283e:	e7e3      	b.n	8012808 <__smakebuf_r+0xc>
 8012840:	89a3      	ldrh	r3, [r4, #12]
 8012842:	6020      	str	r0, [r4, #0]
 8012844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012848:	81a3      	strh	r3, [r4, #12]
 801284a:	9b00      	ldr	r3, [sp, #0]
 801284c:	6163      	str	r3, [r4, #20]
 801284e:	9b01      	ldr	r3, [sp, #4]
 8012850:	6120      	str	r0, [r4, #16]
 8012852:	b15b      	cbz	r3, 801286c <__smakebuf_r+0x70>
 8012854:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012858:	4630      	mov	r0, r6
 801285a:	f000 f81d 	bl	8012898 <_isatty_r>
 801285e:	b128      	cbz	r0, 801286c <__smakebuf_r+0x70>
 8012860:	89a3      	ldrh	r3, [r4, #12]
 8012862:	f023 0303 	bic.w	r3, r3, #3
 8012866:	f043 0301 	orr.w	r3, r3, #1
 801286a:	81a3      	strh	r3, [r4, #12]
 801286c:	89a3      	ldrh	r3, [r4, #12]
 801286e:	431d      	orrs	r5, r3
 8012870:	81a5      	strh	r5, [r4, #12]
 8012872:	e7cf      	b.n	8012814 <__smakebuf_r+0x18>

08012874 <_fstat_r>:
 8012874:	b538      	push	{r3, r4, r5, lr}
 8012876:	4d07      	ldr	r5, [pc, #28]	; (8012894 <_fstat_r+0x20>)
 8012878:	2300      	movs	r3, #0
 801287a:	4604      	mov	r4, r0
 801287c:	4608      	mov	r0, r1
 801287e:	4611      	mov	r1, r2
 8012880:	602b      	str	r3, [r5, #0]
 8012882:	f7f0 f896 	bl	80029b2 <_fstat>
 8012886:	1c43      	adds	r3, r0, #1
 8012888:	d102      	bne.n	8012890 <_fstat_r+0x1c>
 801288a:	682b      	ldr	r3, [r5, #0]
 801288c:	b103      	cbz	r3, 8012890 <_fstat_r+0x1c>
 801288e:	6023      	str	r3, [r4, #0]
 8012890:	bd38      	pop	{r3, r4, r5, pc}
 8012892:	bf00      	nop
 8012894:	240009a0 	.word	0x240009a0

08012898 <_isatty_r>:
 8012898:	b538      	push	{r3, r4, r5, lr}
 801289a:	4d06      	ldr	r5, [pc, #24]	; (80128b4 <_isatty_r+0x1c>)
 801289c:	2300      	movs	r3, #0
 801289e:	4604      	mov	r4, r0
 80128a0:	4608      	mov	r0, r1
 80128a2:	602b      	str	r3, [r5, #0]
 80128a4:	f7f0 f895 	bl	80029d2 <_isatty>
 80128a8:	1c43      	adds	r3, r0, #1
 80128aa:	d102      	bne.n	80128b2 <_isatty_r+0x1a>
 80128ac:	682b      	ldr	r3, [r5, #0]
 80128ae:	b103      	cbz	r3, 80128b2 <_isatty_r+0x1a>
 80128b0:	6023      	str	r3, [r4, #0]
 80128b2:	bd38      	pop	{r3, r4, r5, pc}
 80128b4:	240009a0 	.word	0x240009a0

080128b8 <_init>:
 80128b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128ba:	bf00      	nop
 80128bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80128be:	bc08      	pop	{r3}
 80128c0:	469e      	mov	lr, r3
 80128c2:	4770      	bx	lr

080128c4 <_fini>:
 80128c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128c6:	bf00      	nop
 80128c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80128ca:	bc08      	pop	{r3}
 80128cc:	469e      	mov	lr, r3
 80128ce:	4770      	bx	lr
