
h750_amp_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd34  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  0800cfd8  0800cfd8  0001cfd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d3c4  0800d3c4  0001d3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d3cc  0800d3cc  0001d3cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d3d0  0800d3d0  0001d3d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001d8  24000000  0800d3d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000300  240001d8  0800d5ac  000201d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240004d8  0800d5ac  000204d8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020206  2**0
                  CONTENTS, READONLY
 11 .debug_info   00015e7b  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000028af  00000000  00000000  000360c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000f98  00000000  00000000  00038978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000bff  00000000  00000000  00039910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003909c  00000000  00000000  0003a50f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00015162  00000000  00000000  000735ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016ea43  00000000  00000000  0008870d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000514c  00000000  00000000  001f7150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000065  00000000  00000000  001fc29c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800cfbc 	.word	0x0800cfbc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	0800cfbc 	.word	0x0800cfbc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	0000      	movs	r0, r0
	...

08000690 <force_test>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void force_test(){
 8000690:	b580      	push	{r7, lr}
 8000692:	b0b0      	sub	sp, #192	; 0xc0
 8000694:	af0e      	add	r7, sp, #56	; 0x38
	float force[8];
	for(uint8_t i=0;i<8;++i){
 8000696:	2300      	movs	r3, #0
 8000698:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800069c:	e021      	b.n	80006e2 <force_test+0x52>
		force[i]=(float)force_raw[i]*3.3/0xFFFF;
 800069e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80006a2:	4a45      	ldr	r2, [pc, #276]	; (80007b8 <force_test+0x128>)
 80006a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006a8:	ee07 3a90 	vmov	s15, r3
 80006ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006b4:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80007a8 <force_test+0x118>
 80006b8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006bc:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 80007b0 <force_test+0x120>
 80006c0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006c4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80006c8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	3388      	adds	r3, #136	; 0x88
 80006d0:	443b      	add	r3, r7
 80006d2:	3b24      	subs	r3, #36	; 0x24
 80006d4:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t i=0;i<8;++i){
 80006d8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80006dc:	3301      	adds	r3, #1
 80006de:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80006e2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80006e6:	2b07      	cmp	r3, #7
 80006e8:	d9d9      	bls.n	800069e <force_test+0xe>
	}
	char msg[100]={0};
 80006ea:	2300      	movs	r3, #0
 80006ec:	603b      	str	r3, [r7, #0]
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	2260      	movs	r2, #96	; 0x60
 80006f2:	2100      	movs	r1, #0
 80006f4:	4618      	mov	r0, r3
 80006f6:	f00a fbee 	bl	800aed6 <memset>
	sprintf(msg,"Force: %0.2f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f\n",force[0],force[1],force[2],force[3],force[4],force[5],force[6],force[7]);
 80006fa:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80006fe:	eeb7 0ae7 	vcvt.f64.f32	d0, s15
 8000702:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8000706:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800070a:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 800070e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000712:	edd7 5a1c 	vldr	s11, [r7, #112]	; 0x70
 8000716:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 800071a:	edd7 4a1d 	vldr	s9, [r7, #116]	; 0x74
 800071e:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8000722:	edd7 3a1e 	vldr	s7, [r7, #120]	; 0x78
 8000726:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 800072a:	edd7 2a1f 	vldr	s5, [r7, #124]	; 0x7c
 800072e:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
 8000732:	edd7 1a20 	vldr	s3, [r7, #128]	; 0x80
 8000736:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
 800073a:	4638      	mov	r0, r7
 800073c:	ed8d 1b0c 	vstr	d1, [sp, #48]	; 0x30
 8000740:	ed8d 2b0a 	vstr	d2, [sp, #40]	; 0x28
 8000744:	ed8d 3b08 	vstr	d3, [sp, #32]
 8000748:	ed8d 4b06 	vstr	d4, [sp, #24]
 800074c:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000750:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000754:	ed8d 7b00 	vstr	d7, [sp]
 8000758:	ec53 2b10 	vmov	r2, r3, d0
 800075c:	4917      	ldr	r1, [pc, #92]	; (80007bc <force_test+0x12c>)
 800075e:	f00a fb57 	bl	800ae10 <siprintf>
	uint8_t i=0;
 8000762:	2300      	movs	r3, #0
 8000764:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
	while(msg[i]!=0 && i<100){
 8000768:	e00c      	b.n	8000784 <force_test+0xf4>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)(&msg[i++]), 1, 1);
 800076a:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800076e:	1c5a      	adds	r2, r3, #1
 8000770:	f887 2086 	strb.w	r2, [r7, #134]	; 0x86
 8000774:	461a      	mov	r2, r3
 8000776:	463b      	mov	r3, r7
 8000778:	1899      	adds	r1, r3, r2
 800077a:	2301      	movs	r3, #1
 800077c:	2201      	movs	r2, #1
 800077e:	4810      	ldr	r0, [pc, #64]	; (80007c0 <force_test+0x130>)
 8000780:	f008 fd36 	bl	80091f0 <HAL_UART_Transmit>
	while(msg[i]!=0 && i<100){
 8000784:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000788:	3388      	adds	r3, #136	; 0x88
 800078a:	443b      	add	r3, r7
 800078c:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d003      	beq.n	800079c <force_test+0x10c>
 8000794:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000798:	2b63      	cmp	r3, #99	; 0x63
 800079a:	d9e6      	bls.n	800076a <force_test+0xda>
	}
}
 800079c:	bf00      	nop
 800079e:	3788      	adds	r7, #136	; 0x88
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	f3af 8000 	nop.w
 80007a8:	66666666 	.word	0x66666666
 80007ac:	400a6666 	.word	0x400a6666
 80007b0:	00000000 	.word	0x00000000
 80007b4:	40efffe0 	.word	0x40efffe0
 80007b8:	24000364 	.word	0x24000364
 80007bc:	0800cfd8 	.word	0x0800cfd8
 80007c0:	240002d0 	.word	0x240002d0

080007c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c8:	f000 fd96 	bl	80012f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007cc:	f000 f81e 	bl	800080c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d0:	f000 f9f0 	bl	8000bb4 <MX_GPIO_Init>
  MX_DMA_Init();
 80007d4:	f000 f9ce 	bl	8000b74 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80007d8:	f000 f980 	bl	8000adc <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 80007dc:	f000 f890 	bl	8000900 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1,force_raw,8);
 80007e0:	2208      	movs	r2, #8
 80007e2:	4907      	ldr	r1, [pc, #28]	; (8000800 <main+0x3c>)
 80007e4:	4807      	ldr	r0, [pc, #28]	; (8000804 <main+0x40>)
 80007e6:	f001 f9f3 	bl	8001bd0 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  force_test();
 80007ea:	f7ff ff51 	bl	8000690 <force_test>
	  HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 80007ee:	2108      	movs	r1, #8
 80007f0:	4805      	ldr	r0, [pc, #20]	; (8000808 <main+0x44>)
 80007f2:	f004 ff74 	bl	80056de <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80007f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007fa:	f000 fe0f 	bl	800141c <HAL_Delay>
	  force_test();
 80007fe:	e7f4      	b.n	80007ea <main+0x26>
 8000800:	24000364 	.word	0x24000364
 8000804:	240001f4 	.word	0x240001f4
 8000808:	58020c00 	.word	0x58020c00

0800080c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b09c      	sub	sp, #112	; 0x70
 8000810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000816:	224c      	movs	r2, #76	; 0x4c
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f00a fb5b 	bl	800aed6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	2220      	movs	r2, #32
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f00a fb55 	bl	800aed6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800082c:	2002      	movs	r0, #2
 800082e:	f004 ff71 	bl	8005714 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000832:	2300      	movs	r3, #0
 8000834:	603b      	str	r3, [r7, #0]
 8000836:	4b30      	ldr	r3, [pc, #192]	; (80008f8 <SystemClock_Config+0xec>)
 8000838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800083a:	4a2f      	ldr	r2, [pc, #188]	; (80008f8 <SystemClock_Config+0xec>)
 800083c:	f023 0301 	bic.w	r3, r3, #1
 8000840:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000842:	4b2d      	ldr	r3, [pc, #180]	; (80008f8 <SystemClock_Config+0xec>)
 8000844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	4b2b      	ldr	r3, [pc, #172]	; (80008fc <SystemClock_Config+0xf0>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	4a2a      	ldr	r2, [pc, #168]	; (80008fc <SystemClock_Config+0xf0>)
 8000852:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000856:	6193      	str	r3, [r2, #24]
 8000858:	4b28      	ldr	r3, [pc, #160]	; (80008fc <SystemClock_Config+0xf0>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000864:	bf00      	nop
 8000866:	4b25      	ldr	r3, [pc, #148]	; (80008fc <SystemClock_Config+0xf0>)
 8000868:	699b      	ldr	r3, [r3, #24]
 800086a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800086e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000872:	d1f8      	bne.n	8000866 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000874:	2301      	movs	r3, #1
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000878:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087e:	2302      	movs	r3, #2
 8000880:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000882:	2302      	movs	r3, #2
 8000884:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000886:	2305      	movs	r3, #5
 8000888:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 800088a:	23a0      	movs	r3, #160	; 0xa0
 800088c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800088e:	2302      	movs	r3, #2
 8000890:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000892:	2302      	movs	r3, #2
 8000894:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000896:	2302      	movs	r3, #2
 8000898:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800089a:	2308      	movs	r3, #8
 800089c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800089e:	2300      	movs	r3, #0
 80008a0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008aa:	4618      	mov	r0, r3
 80008ac:	f004 ff6c 	bl	8005788 <HAL_RCC_OscConfig>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <SystemClock_Config+0xae>
  {
    Error_Handler();
 80008b6:	f000 f9ef 	bl	8000c98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ba:	233f      	movs	r3, #63	; 0x3f
 80008bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008be:	2303      	movs	r3, #3
 80008c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 80008c6:	2309      	movs	r3, #9
 80008c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008ca:	2340      	movs	r3, #64	; 0x40
 80008cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008ce:	2340      	movs	r3, #64	; 0x40
 80008d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008d8:	2340      	movs	r3, #64	; 0x40
 80008da:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	2101      	movs	r1, #1
 80008e0:	4618      	mov	r0, r3
 80008e2:	f005 fbab 	bl	800603c <HAL_RCC_ClockConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80008ec:	f000 f9d4 	bl	8000c98 <Error_Handler>
  }
}
 80008f0:	bf00      	nop
 80008f2:	3770      	adds	r7, #112	; 0x70
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	58000400 	.word	0x58000400
 80008fc:	58024800 	.word	0x58024800

08000900 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	; 0x28
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000912:	463b      	mov	r3, r7
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
 8000920:	615a      	str	r2, [r3, #20]
 8000922:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000924:	4b63      	ldr	r3, [pc, #396]	; (8000ab4 <MX_ADC1_Init+0x1b4>)
 8000926:	4a64      	ldr	r2, [pc, #400]	; (8000ab8 <MX_ADC1_Init+0x1b8>)
 8000928:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 800092a:	4b62      	ldr	r3, [pc, #392]	; (8000ab4 <MX_ADC1_Init+0x1b4>)
 800092c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000930:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000932:	4b60      	ldr	r3, [pc, #384]	; (8000ab4 <MX_ADC1_Init+0x1b4>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000938:	4b5e      	ldr	r3, [pc, #376]	; (8000ab4 <MX_ADC1_Init+0x1b4>)
 800093a:	2201      	movs	r2, #1
 800093c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800093e:	4b5d      	ldr	r3, [pc, #372]	; (8000ab4 <MX_ADC1_Init+0x1b4>)
 8000940:	2204      	movs	r2, #4
 8000942:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000944:	4b5b      	ldr	r3, [pc, #364]	; (8000ab4 <MX_ADC1_Init+0x1b4>)
 8000946:	2200      	movs	r2, #0
 8000948:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800094a:	4b5a      	ldr	r3, [pc, #360]	; (8000ab4 <MX_ADC1_Init+0x1b4>)
 800094c:	2201      	movs	r2, #1
 800094e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 8;
 8000950:	4b58      	ldr	r3, [pc, #352]	; (8000ab4 <MX_ADC1_Init+0x1b4>)
 8000952:	2208      	movs	r2, #8
 8000954:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000956:	4b57      	ldr	r3, [pc, #348]	; (8000ab4 <MX_ADC1_Init+0x1b4>)
 8000958:	2200      	movs	r2, #0
 800095a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800095c:	4b55      	ldr	r3, [pc, #340]	; (8000ab4 <MX_ADC1_Init+0x1b4>)
 800095e:	2200      	movs	r2, #0
 8000960:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000962:	4b54      	ldr	r3, [pc, #336]	; (8000ab4 <MX_ADC1_Init+0x1b4>)
 8000964:	2200      	movs	r2, #0
 8000966:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000968:	4b52      	ldr	r3, [pc, #328]	; (8000ab4 <MX_ADC1_Init+0x1b4>)
 800096a:	2203      	movs	r2, #3
 800096c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800096e:	4b51      	ldr	r3, [pc, #324]	; (8000ab4 <MX_ADC1_Init+0x1b4>)
 8000970:	2200      	movs	r2, #0
 8000972:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000974:	4b4f      	ldr	r3, [pc, #316]	; (8000ab4 <MX_ADC1_Init+0x1b4>)
 8000976:	2200      	movs	r2, #0
 8000978:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800097a:	4b4e      	ldr	r3, [pc, #312]	; (8000ab4 <MX_ADC1_Init+0x1b4>)
 800097c:	2200      	movs	r2, #0
 800097e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000982:	484c      	ldr	r0, [pc, #304]	; (8000ab4 <MX_ADC1_Init+0x1b4>)
 8000984:	f000 ff82 	bl	800188c <HAL_ADC_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800098e:	f000 f983 	bl	8000c98 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	4845      	ldr	r0, [pc, #276]	; (8000ab4 <MX_ADC1_Init+0x1b4>)
 800099e:	f002 fa0f 	bl	8002dc0 <HAL_ADCEx_MultiModeConfigChannel>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80009a8:	f000 f976 	bl	8000c98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80009ac:	4b43      	ldr	r3, [pc, #268]	; (8000abc <MX_ADC1_Init+0x1bc>)
 80009ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009b0:	2306      	movs	r3, #6
 80009b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 80009b4:	2304      	movs	r3, #4
 80009b6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009b8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80009bc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009be:	2304      	movs	r3, #4
 80009c0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80009c6:	2300      	movs	r3, #0
 80009c8:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ca:	463b      	mov	r3, r7
 80009cc:	4619      	mov	r1, r3
 80009ce:	4839      	ldr	r0, [pc, #228]	; (8000ab4 <MX_ADC1_Init+0x1b4>)
 80009d0:	f001 fc24 	bl	800221c <HAL_ADC_ConfigChannel>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80009da:	f000 f95d 	bl	8000c98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80009de:	4b38      	ldr	r3, [pc, #224]	; (8000ac0 <MX_ADC1_Init+0x1c0>)
 80009e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009e2:	230c      	movs	r3, #12
 80009e4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009e6:	463b      	mov	r3, r7
 80009e8:	4619      	mov	r1, r3
 80009ea:	4832      	ldr	r0, [pc, #200]	; (8000ab4 <MX_ADC1_Init+0x1b4>)
 80009ec:	f001 fc16 	bl	800221c <HAL_ADC_ConfigChannel>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80009f6:	f000 f94f 	bl	8000c98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80009fa:	4b32      	ldr	r3, [pc, #200]	; (8000ac4 <MX_ADC1_Init+0x1c4>)
 80009fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80009fe:	2312      	movs	r3, #18
 8000a00:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a02:	463b      	mov	r3, r7
 8000a04:	4619      	mov	r1, r3
 8000a06:	482b      	ldr	r0, [pc, #172]	; (8000ab4 <MX_ADC1_Init+0x1b4>)
 8000a08:	f001 fc08 	bl	800221c <HAL_ADC_ConfigChannel>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000a12:	f000 f941 	bl	8000c98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a16:	4b2c      	ldr	r3, [pc, #176]	; (8000ac8 <MX_ADC1_Init+0x1c8>)
 8000a18:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000a1a:	2318      	movs	r3, #24
 8000a1c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a1e:	463b      	mov	r3, r7
 8000a20:	4619      	mov	r1, r3
 8000a22:	4824      	ldr	r0, [pc, #144]	; (8000ab4 <MX_ADC1_Init+0x1b4>)
 8000a24:	f001 fbfa 	bl	800221c <HAL_ADC_ConfigChannel>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000a2e:	f000 f933 	bl	8000c98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000a32:	4b26      	ldr	r3, [pc, #152]	; (8000acc <MX_ADC1_Init+0x1cc>)
 8000a34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000a36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a3c:	463b      	mov	r3, r7
 8000a3e:	4619      	mov	r1, r3
 8000a40:	481c      	ldr	r0, [pc, #112]	; (8000ab4 <MX_ADC1_Init+0x1b4>)
 8000a42:	f001 fbeb 	bl	800221c <HAL_ADC_ConfigChannel>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 8000a4c:	f000 f924 	bl	8000c98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a50:	4b1f      	ldr	r3, [pc, #124]	; (8000ad0 <MX_ADC1_Init+0x1d0>)
 8000a52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000a54:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000a58:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a5a:	463b      	mov	r3, r7
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4815      	ldr	r0, [pc, #84]	; (8000ab4 <MX_ADC1_Init+0x1b4>)
 8000a60:	f001 fbdc 	bl	800221c <HAL_ADC_ConfigChannel>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 8000a6a:	f000 f915 	bl	8000c98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000a6e:	4b19      	ldr	r3, [pc, #100]	; (8000ad4 <MX_ADC1_Init+0x1d4>)
 8000a70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000a72:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000a76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a78:	463b      	mov	r3, r7
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	480d      	ldr	r0, [pc, #52]	; (8000ab4 <MX_ADC1_Init+0x1b4>)
 8000a7e:	f001 fbcd 	bl	800221c <HAL_ADC_ConfigChannel>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8000a88:	f000 f906 	bl	8000c98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8000a8c:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <MX_ADC1_Init+0x1d8>)
 8000a8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000a90:	f44f 7389 	mov.w	r3, #274	; 0x112
 8000a94:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a96:	463b      	mov	r3, r7
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4806      	ldr	r0, [pc, #24]	; (8000ab4 <MX_ADC1_Init+0x1b4>)
 8000a9c:	f001 fbbe 	bl	800221c <HAL_ADC_ConfigChannel>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_ADC1_Init+0x1aa>
  {
    Error_Handler();
 8000aa6:	f000 f8f7 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	3728      	adds	r7, #40	; 0x28
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	240001f4 	.word	0x240001f4
 8000ab8:	40022000 	.word	0x40022000
 8000abc:	0c900008 	.word	0x0c900008
 8000ac0:	10c00010 	.word	0x10c00010
 8000ac4:	14f00020 	.word	0x14f00020
 8000ac8:	21800100 	.word	0x21800100
 8000acc:	25b00200 	.word	0x25b00200
 8000ad0:	2a000400 	.word	0x2a000400
 8000ad4:	2e300800 	.word	0x2e300800
 8000ad8:	4b840000 	.word	0x4b840000

08000adc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000ae0:	4b22      	ldr	r3, [pc, #136]	; (8000b6c <MX_LPUART1_UART_Init+0x90>)
 8000ae2:	4a23      	ldr	r2, [pc, #140]	; (8000b70 <MX_LPUART1_UART_Init+0x94>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000ae6:	4b21      	ldr	r3, [pc, #132]	; (8000b6c <MX_LPUART1_UART_Init+0x90>)
 8000ae8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aec:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aee:	4b1f      	ldr	r3, [pc, #124]	; (8000b6c <MX_LPUART1_UART_Init+0x90>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000af4:	4b1d      	ldr	r3, [pc, #116]	; (8000b6c <MX_LPUART1_UART_Init+0x90>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000afa:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <MX_LPUART1_UART_Init+0x90>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b00:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <MX_LPUART1_UART_Init+0x90>)
 8000b02:	220c      	movs	r2, #12
 8000b04:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b06:	4b19      	ldr	r3, [pc, #100]	; (8000b6c <MX_LPUART1_UART_Init+0x90>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b0c:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <MX_LPUART1_UART_Init+0x90>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b12:	4b16      	ldr	r3, [pc, #88]	; (8000b6c <MX_LPUART1_UART_Init+0x90>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b18:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <MX_LPUART1_UART_Init+0x90>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000b1e:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <MX_LPUART1_UART_Init+0x90>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000b24:	4811      	ldr	r0, [pc, #68]	; (8000b6c <MX_LPUART1_UART_Init+0x90>)
 8000b26:	f008 fb13 	bl	8009150 <HAL_UART_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b30:	f000 f8b2 	bl	8000c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b34:	2100      	movs	r1, #0
 8000b36:	480d      	ldr	r0, [pc, #52]	; (8000b6c <MX_LPUART1_UART_Init+0x90>)
 8000b38:	f009 fba3 	bl	800a282 <HAL_UARTEx_SetTxFifoThreshold>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b42:	f000 f8a9 	bl	8000c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b46:	2100      	movs	r1, #0
 8000b48:	4808      	ldr	r0, [pc, #32]	; (8000b6c <MX_LPUART1_UART_Init+0x90>)
 8000b4a:	f009 fbd8 	bl	800a2fe <HAL_UARTEx_SetRxFifoThreshold>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b54:	f000 f8a0 	bl	8000c98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000b58:	4804      	ldr	r0, [pc, #16]	; (8000b6c <MX_LPUART1_UART_Init+0x90>)
 8000b5a:	f009 fb59 	bl	800a210 <HAL_UARTEx_DisableFifoMode>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b64:	f000 f898 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	240002d0 	.word	0x240002d0
 8000b70:	58000c00 	.word	0x58000c00

08000b74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <MX_DMA_Init+0x3c>)
 8000b7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b80:	4a0b      	ldr	r2, [pc, #44]	; (8000bb0 <MX_DMA_Init+0x3c>)
 8000b82:	f043 0301 	orr.w	r3, r3, #1
 8000b86:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <MX_DMA_Init+0x3c>)
 8000b8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b90:	f003 0301 	and.w	r3, r3, #1
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	200b      	movs	r0, #11
 8000b9e:	f002 fac8 	bl	8003132 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ba2:	200b      	movs	r0, #11
 8000ba4:	f002 fadf 	bl	8003166 <HAL_NVIC_EnableIRQ>

}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	58024400 	.word	0x58024400

08000bb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08a      	sub	sp, #40	; 0x28
 8000bb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
 8000bc8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bca:	4b31      	ldr	r3, [pc, #196]	; (8000c90 <MX_GPIO_Init+0xdc>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd0:	4a2f      	ldr	r2, [pc, #188]	; (8000c90 <MX_GPIO_Init+0xdc>)
 8000bd2:	f043 0304 	orr.w	r3, r3, #4
 8000bd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bda:	4b2d      	ldr	r3, [pc, #180]	; (8000c90 <MX_GPIO_Init+0xdc>)
 8000bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be0:	f003 0304 	and.w	r3, r3, #4
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000be8:	4b29      	ldr	r3, [pc, #164]	; (8000c90 <MX_GPIO_Init+0xdc>)
 8000bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bee:	4a28      	ldr	r2, [pc, #160]	; (8000c90 <MX_GPIO_Init+0xdc>)
 8000bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf8:	4b25      	ldr	r3, [pc, #148]	; (8000c90 <MX_GPIO_Init+0xdc>)
 8000bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	4b22      	ldr	r3, [pc, #136]	; (8000c90 <MX_GPIO_Init+0xdc>)
 8000c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0c:	4a20      	ldr	r2, [pc, #128]	; (8000c90 <MX_GPIO_Init+0xdc>)
 8000c0e:	f043 0301 	orr.w	r3, r3, #1
 8000c12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c16:	4b1e      	ldr	r3, [pc, #120]	; (8000c90 <MX_GPIO_Init+0xdc>)
 8000c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1c:	f003 0301 	and.w	r3, r3, #1
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c24:	4b1a      	ldr	r3, [pc, #104]	; (8000c90 <MX_GPIO_Init+0xdc>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a19      	ldr	r2, [pc, #100]	; (8000c90 <MX_GPIO_Init+0xdc>)
 8000c2c:	f043 0302 	orr.w	r3, r3, #2
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b16      	ldr	r3, [pc, #88]	; (8000c90 <MX_GPIO_Init+0xdc>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0302 	and.w	r3, r3, #2
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c42:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <MX_GPIO_Init+0xdc>)
 8000c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c48:	4a11      	ldr	r2, [pc, #68]	; (8000c90 <MX_GPIO_Init+0xdc>)
 8000c4a:	f043 0308 	orr.w	r3, r3, #8
 8000c4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c52:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <MX_GPIO_Init+0xdc>)
 8000c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c58:	f003 0308 	and.w	r3, r3, #8
 8000c5c:	603b      	str	r3, [r7, #0]
 8000c5e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2108      	movs	r1, #8
 8000c64:	480b      	ldr	r0, [pc, #44]	; (8000c94 <MX_GPIO_Init+0xe0>)
 8000c66:	f004 fd21 	bl	80056ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8000c6a:	2308      	movs	r3, #8
 8000c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2300      	movs	r3, #0
 8000c78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4804      	ldr	r0, [pc, #16]	; (8000c94 <MX_GPIO_Init+0xe0>)
 8000c82:	f004 fb63 	bl	800534c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c86:	bf00      	nop
 8000c88:	3728      	adds	r7, #40	; 0x28
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	58024400 	.word	0x58024400
 8000c94:	58020c00 	.word	0x58020c00

08000c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c9c:	b672      	cpsid	i
}
 8000c9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <Error_Handler+0x8>
	...

08000ca4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000caa:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <HAL_MspInit+0x30>)
 8000cac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cb0:	4a08      	ldr	r2, [pc, #32]	; (8000cd4 <HAL_MspInit+0x30>)
 8000cb2:	f043 0302 	orr.w	r3, r3, #2
 8000cb6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_MspInit+0x30>)
 8000cbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cc0:	f003 0302 	and.w	r3, r3, #2
 8000cc4:	607b      	str	r3, [r7, #4]
 8000cc6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	58024400 	.word	0x58024400

08000cd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b0bc      	sub	sp, #240	; 0xf0
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cf0:	f107 0318 	add.w	r3, r7, #24
 8000cf4:	22c0      	movs	r2, #192	; 0xc0
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f00a f8ec 	bl	800aed6 <memset>
  if(hadc->Instance==ADC1)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a66      	ldr	r2, [pc, #408]	; (8000e9c <HAL_ADC_MspInit+0x1c4>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	f040 80c4 	bne.w	8000e92 <HAL_ADC_MspInit+0x1ba>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d0a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000d0e:	f04f 0300 	mov.w	r3, #0
 8000d12:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
 8000d16:	2319      	movs	r3, #25
 8000d18:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 200;
 8000d1a:	23c8      	movs	r3, #200	; 0xc8
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000d1e:	2304      	movs	r3, #4
 8000d20:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000d22:	2302      	movs	r3, #2
 8000d24:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000d26:	2302      	movs	r3, #2
 8000d28:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000d36:	2300      	movs	r3, #0
 8000d38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d3c:	f107 0318 	add.w	r3, r7, #24
 8000d40:	4618      	mov	r0, r3
 8000d42:	f005 fd07 	bl	8006754 <HAL_RCCEx_PeriphCLKConfig>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8000d4c:	f7ff ffa4 	bl	8000c98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d50:	4b53      	ldr	r3, [pc, #332]	; (8000ea0 <HAL_ADC_MspInit+0x1c8>)
 8000d52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d56:	4a52      	ldr	r2, [pc, #328]	; (8000ea0 <HAL_ADC_MspInit+0x1c8>)
 8000d58:	f043 0320 	orr.w	r3, r3, #32
 8000d5c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d60:	4b4f      	ldr	r3, [pc, #316]	; (8000ea0 <HAL_ADC_MspInit+0x1c8>)
 8000d62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d66:	f003 0320 	and.w	r3, r3, #32
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6e:	4b4c      	ldr	r3, [pc, #304]	; (8000ea0 <HAL_ADC_MspInit+0x1c8>)
 8000d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d74:	4a4a      	ldr	r2, [pc, #296]	; (8000ea0 <HAL_ADC_MspInit+0x1c8>)
 8000d76:	f043 0304 	orr.w	r3, r3, #4
 8000d7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d7e:	4b48      	ldr	r3, [pc, #288]	; (8000ea0 <HAL_ADC_MspInit+0x1c8>)
 8000d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d84:	f003 0304 	and.w	r3, r3, #4
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8c:	4b44      	ldr	r3, [pc, #272]	; (8000ea0 <HAL_ADC_MspInit+0x1c8>)
 8000d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d92:	4a43      	ldr	r2, [pc, #268]	; (8000ea0 <HAL_ADC_MspInit+0x1c8>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d9c:	4b40      	ldr	r3, [pc, #256]	; (8000ea0 <HAL_ADC_MspInit+0x1c8>)
 8000d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000daa:	4b3d      	ldr	r3, [pc, #244]	; (8000ea0 <HAL_ADC_MspInit+0x1c8>)
 8000dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db0:	4a3b      	ldr	r2, [pc, #236]	; (8000ea0 <HAL_ADC_MspInit+0x1c8>)
 8000db2:	f043 0302 	orr.w	r3, r3, #2
 8000db6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dba:	4b39      	ldr	r3, [pc, #228]	; (8000ea0 <HAL_ADC_MspInit+0x1c8>)
 8000dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc0:	f003 0302 	and.w	r3, r3, #2
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = F06_Pin|F07_Pin|F01_Pin|F04_Pin;
 8000dc8:	2333      	movs	r3, #51	; 0x33
 8000dca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dda:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000dde:	4619      	mov	r1, r3
 8000de0:	4830      	ldr	r0, [pc, #192]	; (8000ea4 <HAL_ADC_MspInit+0x1cc>)
 8000de2:	f004 fab3 	bl	800534c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = F03_Pin|F00_Pin;
 8000de6:	2350      	movs	r3, #80	; 0x50
 8000de8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dec:	2303      	movs	r3, #3
 8000dee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	482a      	ldr	r0, [pc, #168]	; (8000ea8 <HAL_ADC_MspInit+0x1d0>)
 8000e00:	f004 faa4 	bl	800534c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = F05_Pin|F02_Pin;
 8000e04:	2303      	movs	r3, #3
 8000e06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e16:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4823      	ldr	r0, [pc, #140]	; (8000eac <HAL_ADC_MspInit+0x1d4>)
 8000e1e:	f004 fa95 	bl	800534c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000e22:	4b23      	ldr	r3, [pc, #140]	; (8000eb0 <HAL_ADC_MspInit+0x1d8>)
 8000e24:	4a23      	ldr	r2, [pc, #140]	; (8000eb4 <HAL_ADC_MspInit+0x1dc>)
 8000e26:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000e28:	4b21      	ldr	r3, [pc, #132]	; (8000eb0 <HAL_ADC_MspInit+0x1d8>)
 8000e2a:	2209      	movs	r2, #9
 8000e2c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e2e:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <HAL_ADC_MspInit+0x1d8>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e34:	4b1e      	ldr	r3, [pc, #120]	; (8000eb0 <HAL_ADC_MspInit+0x1d8>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e3a:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <HAL_ADC_MspInit+0x1d8>)
 8000e3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e40:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e42:	4b1b      	ldr	r3, [pc, #108]	; (8000eb0 <HAL_ADC_MspInit+0x1d8>)
 8000e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e48:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e4a:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <HAL_ADC_MspInit+0x1d8>)
 8000e4c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e50:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e52:	4b17      	ldr	r3, [pc, #92]	; (8000eb0 <HAL_ADC_MspInit+0x1d8>)
 8000e54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e58:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e5a:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <HAL_ADC_MspInit+0x1d8>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e60:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <HAL_ADC_MspInit+0x1d8>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e66:	4812      	ldr	r0, [pc, #72]	; (8000eb0 <HAL_ADC_MspInit+0x1d8>)
 8000e68:	f002 f998 	bl	800319c <HAL_DMA_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <HAL_ADC_MspInit+0x19e>
    {
      Error_Handler();
 8000e72:	f7ff ff11 	bl	8000c98 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a0d      	ldr	r2, [pc, #52]	; (8000eb0 <HAL_ADC_MspInit+0x1d8>)
 8000e7a:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e7c:	4a0c      	ldr	r2, [pc, #48]	; (8000eb0 <HAL_ADC_MspInit+0x1d8>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2100      	movs	r1, #0
 8000e86:	2012      	movs	r0, #18
 8000e88:	f002 f953 	bl	8003132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000e8c:	2012      	movs	r0, #18
 8000e8e:	f002 f96a 	bl	8003166 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e92:	bf00      	nop
 8000e94:	37f0      	adds	r7, #240	; 0xf0
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40022000 	.word	0x40022000
 8000ea0:	58024400 	.word	0x58024400
 8000ea4:	58020800 	.word	0x58020800
 8000ea8:	58020000 	.word	0x58020000
 8000eac:	58020400 	.word	0x58020400
 8000eb0:	24000258 	.word	0x24000258
 8000eb4:	40020010 	.word	0x40020010

08000eb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b0ba      	sub	sp, #232	; 0xe8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ed0:	f107 0310 	add.w	r3, r7, #16
 8000ed4:	22c0      	movs	r2, #192	; 0xc0
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f009 fffc 	bl	800aed6 <memset>
  if(huart->Instance==LPUART1)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a27      	ldr	r2, [pc, #156]	; (8000f80 <HAL_UART_MspInit+0xc8>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d146      	bne.n	8000f76 <HAL_UART_MspInit+0xbe>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000ee8:	f04f 0204 	mov.w	r2, #4
 8000eec:	f04f 0300 	mov.w	r3, #0
 8000ef0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000efa:	f107 0310 	add.w	r3, r7, #16
 8000efe:	4618      	mov	r0, r3
 8000f00:	f005 fc28 	bl	8006754 <HAL_RCCEx_PeriphCLKConfig>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f0a:	f7ff fec5 	bl	8000c98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000f0e:	4b1d      	ldr	r3, [pc, #116]	; (8000f84 <HAL_UART_MspInit+0xcc>)
 8000f10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f14:	4a1b      	ldr	r2, [pc, #108]	; (8000f84 <HAL_UART_MspInit+0xcc>)
 8000f16:	f043 0308 	orr.w	r3, r3, #8
 8000f1a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f1e:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <HAL_UART_MspInit+0xcc>)
 8000f20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f24:	f003 0308 	and.w	r3, r3, #8
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2c:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <HAL_UART_MspInit+0xcc>)
 8000f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f32:	4a14      	ldr	r2, [pc, #80]	; (8000f84 <HAL_UART_MspInit+0xcc>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f3c:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <HAL_UART_MspInit+0xcc>)
 8000f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f4a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 8000f64:	2303      	movs	r3, #3
 8000f66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4805      	ldr	r0, [pc, #20]	; (8000f88 <HAL_UART_MspInit+0xd0>)
 8000f72:	f004 f9eb 	bl	800534c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000f76:	bf00      	nop
 8000f78:	37e8      	adds	r7, #232	; 0xe8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	58000c00 	.word	0x58000c00
 8000f84:	58024400 	.word	0x58024400
 8000f88:	58020000 	.word	0x58020000

08000f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <NMI_Handler+0x4>

08000f92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f96:	e7fe      	b.n	8000f96 <HardFault_Handler+0x4>

08000f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <MemManage_Handler+0x4>

08000f9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa2:	e7fe      	b.n	8000fa2 <BusFault_Handler+0x4>

08000fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <UsageFault_Handler+0x4>

08000faa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd8:	f000 fa00 	bl	80013dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fe4:	4802      	ldr	r0, [pc, #8]	; (8000ff0 <DMA1_Stream0_IRQHandler+0x10>)
 8000fe6:	f002 fe9f 	bl	8003d28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	24000258 	.word	0x24000258

08000ff4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ff8:	4802      	ldr	r0, [pc, #8]	; (8001004 <ADC_IRQHandler+0x10>)
 8000ffa:	f000 fead 	bl	8001d58 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	240001f4 	.word	0x240001f4

08001008 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return 1;
 800100c:	2301      	movs	r3, #1
}
 800100e:	4618      	mov	r0, r3
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <_kill>:

int _kill(int pid, int sig)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001022:	f009 ffab 	bl	800af7c <__errno>
 8001026:	4603      	mov	r3, r0
 8001028:	2216      	movs	r2, #22
 800102a:	601a      	str	r2, [r3, #0]
  return -1;
 800102c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <_exit>:

void _exit (int status)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001040:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff ffe7 	bl	8001018 <_kill>
  while (1) {}    /* Make sure we hang here */
 800104a:	e7fe      	b.n	800104a <_exit+0x12>

0800104c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	e00a      	b.n	8001074 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800105e:	f3af 8000 	nop.w
 8001062:	4601      	mov	r1, r0
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	1c5a      	adds	r2, r3, #1
 8001068:	60ba      	str	r2, [r7, #8]
 800106a:	b2ca      	uxtb	r2, r1
 800106c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	3301      	adds	r3, #1
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	697a      	ldr	r2, [r7, #20]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	429a      	cmp	r2, r3
 800107a:	dbf0      	blt.n	800105e <_read+0x12>
  }

  return len;
 800107c:	687b      	ldr	r3, [r7, #4]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b086      	sub	sp, #24
 800108a:	af00      	add	r7, sp, #0
 800108c:	60f8      	str	r0, [r7, #12]
 800108e:	60b9      	str	r1, [r7, #8]
 8001090:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
 8001096:	e009      	b.n	80010ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	1c5a      	adds	r2, r3, #1
 800109c:	60ba      	str	r2, [r7, #8]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	3301      	adds	r3, #1
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	dbf1      	blt.n	8001098 <_write+0x12>
  }
  return len;
 80010b4:	687b      	ldr	r3, [r7, #4]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <_close>:

int _close(int file)
{
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b083      	sub	sp, #12
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
 80010de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010e6:	605a      	str	r2, [r3, #4]
  return 0;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <_isatty>:

int _isatty(int file)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010fe:	2301      	movs	r3, #1
}
 8001100:	4618      	mov	r0, r3
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3714      	adds	r7, #20
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001130:	4a14      	ldr	r2, [pc, #80]	; (8001184 <_sbrk+0x5c>)
 8001132:	4b15      	ldr	r3, [pc, #84]	; (8001188 <_sbrk+0x60>)
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800113c:	4b13      	ldr	r3, [pc, #76]	; (800118c <_sbrk+0x64>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d102      	bne.n	800114a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <_sbrk+0x64>)
 8001146:	4a12      	ldr	r2, [pc, #72]	; (8001190 <_sbrk+0x68>)
 8001148:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <_sbrk+0x64>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4413      	add	r3, r2
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	429a      	cmp	r2, r3
 8001156:	d207      	bcs.n	8001168 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001158:	f009 ff10 	bl	800af7c <__errno>
 800115c:	4603      	mov	r3, r0
 800115e:	220c      	movs	r2, #12
 8001160:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001162:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001166:	e009      	b.n	800117c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <_sbrk+0x64>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800116e:	4b07      	ldr	r3, [pc, #28]	; (800118c <_sbrk+0x64>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	4a05      	ldr	r2, [pc, #20]	; (800118c <_sbrk+0x64>)
 8001178:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800117a:	68fb      	ldr	r3, [r7, #12]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	24080000 	.word	0x24080000
 8001188:	00000400 	.word	0x00000400
 800118c:	24000384 	.word	0x24000384
 8001190:	240004d8 	.word	0x240004d8

08001194 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001198:	4b37      	ldr	r3, [pc, #220]	; (8001278 <SystemInit+0xe4>)
 800119a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800119e:	4a36      	ldr	r2, [pc, #216]	; (8001278 <SystemInit+0xe4>)
 80011a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011a8:	4b34      	ldr	r3, [pc, #208]	; (800127c <SystemInit+0xe8>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 030f 	and.w	r3, r3, #15
 80011b0:	2b06      	cmp	r3, #6
 80011b2:	d807      	bhi.n	80011c4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011b4:	4b31      	ldr	r3, [pc, #196]	; (800127c <SystemInit+0xe8>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f023 030f 	bic.w	r3, r3, #15
 80011bc:	4a2f      	ldr	r2, [pc, #188]	; (800127c <SystemInit+0xe8>)
 80011be:	f043 0307 	orr.w	r3, r3, #7
 80011c2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011c4:	4b2e      	ldr	r3, [pc, #184]	; (8001280 <SystemInit+0xec>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a2d      	ldr	r2, [pc, #180]	; (8001280 <SystemInit+0xec>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011d0:	4b2b      	ldr	r3, [pc, #172]	; (8001280 <SystemInit+0xec>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011d6:	4b2a      	ldr	r3, [pc, #168]	; (8001280 <SystemInit+0xec>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	4929      	ldr	r1, [pc, #164]	; (8001280 <SystemInit+0xec>)
 80011dc:	4b29      	ldr	r3, [pc, #164]	; (8001284 <SystemInit+0xf0>)
 80011de:	4013      	ands	r3, r2
 80011e0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011e2:	4b26      	ldr	r3, [pc, #152]	; (800127c <SystemInit+0xe8>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0308 	and.w	r3, r3, #8
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d007      	beq.n	80011fe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011ee:	4b23      	ldr	r3, [pc, #140]	; (800127c <SystemInit+0xe8>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f023 030f 	bic.w	r3, r3, #15
 80011f6:	4a21      	ldr	r2, [pc, #132]	; (800127c <SystemInit+0xe8>)
 80011f8:	f043 0307 	orr.w	r3, r3, #7
 80011fc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011fe:	4b20      	ldr	r3, [pc, #128]	; (8001280 <SystemInit+0xec>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001204:	4b1e      	ldr	r3, [pc, #120]	; (8001280 <SystemInit+0xec>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800120a:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <SystemInit+0xec>)
 800120c:	2200      	movs	r2, #0
 800120e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001210:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <SystemInit+0xec>)
 8001212:	4a1d      	ldr	r2, [pc, #116]	; (8001288 <SystemInit+0xf4>)
 8001214:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001216:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <SystemInit+0xec>)
 8001218:	4a1c      	ldr	r2, [pc, #112]	; (800128c <SystemInit+0xf8>)
 800121a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800121c:	4b18      	ldr	r3, [pc, #96]	; (8001280 <SystemInit+0xec>)
 800121e:	4a1c      	ldr	r2, [pc, #112]	; (8001290 <SystemInit+0xfc>)
 8001220:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001222:	4b17      	ldr	r3, [pc, #92]	; (8001280 <SystemInit+0xec>)
 8001224:	2200      	movs	r2, #0
 8001226:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001228:	4b15      	ldr	r3, [pc, #84]	; (8001280 <SystemInit+0xec>)
 800122a:	4a19      	ldr	r2, [pc, #100]	; (8001290 <SystemInit+0xfc>)
 800122c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800122e:	4b14      	ldr	r3, [pc, #80]	; (8001280 <SystemInit+0xec>)
 8001230:	2200      	movs	r2, #0
 8001232:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <SystemInit+0xec>)
 8001236:	4a16      	ldr	r2, [pc, #88]	; (8001290 <SystemInit+0xfc>)
 8001238:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800123a:	4b11      	ldr	r3, [pc, #68]	; (8001280 <SystemInit+0xec>)
 800123c:	2200      	movs	r2, #0
 800123e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001240:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <SystemInit+0xec>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a0e      	ldr	r2, [pc, #56]	; (8001280 <SystemInit+0xec>)
 8001246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800124a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <SystemInit+0xec>)
 800124e:	2200      	movs	r2, #0
 8001250:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001252:	4b10      	ldr	r3, [pc, #64]	; (8001294 <SystemInit+0x100>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	4b10      	ldr	r3, [pc, #64]	; (8001298 <SystemInit+0x104>)
 8001258:	4013      	ands	r3, r2
 800125a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800125e:	d202      	bcs.n	8001266 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001260:	4b0e      	ldr	r3, [pc, #56]	; (800129c <SystemInit+0x108>)
 8001262:	2201      	movs	r2, #1
 8001264:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <SystemInit+0x10c>)
 8001268:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800126c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000ed00 	.word	0xe000ed00
 800127c:	52002000 	.word	0x52002000
 8001280:	58024400 	.word	0x58024400
 8001284:	eaf6ed7f 	.word	0xeaf6ed7f
 8001288:	02020200 	.word	0x02020200
 800128c:	01ff0000 	.word	0x01ff0000
 8001290:	01010280 	.word	0x01010280
 8001294:	5c001000 	.word	0x5c001000
 8001298:	ffff0000 	.word	0xffff0000
 800129c:	51008108 	.word	0x51008108
 80012a0:	52004000 	.word	0x52004000

080012a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012a8:	f7ff ff74 	bl	8001194 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012ac:	480c      	ldr	r0, [pc, #48]	; (80012e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012ae:	490d      	ldr	r1, [pc, #52]	; (80012e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012b0:	4a0d      	ldr	r2, [pc, #52]	; (80012e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b4:	e002      	b.n	80012bc <LoopCopyDataInit>

080012b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ba:	3304      	adds	r3, #4

080012bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c0:	d3f9      	bcc.n	80012b6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012c2:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012c4:	4c0a      	ldr	r4, [pc, #40]	; (80012f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c8:	e001      	b.n	80012ce <LoopFillZerobss>

080012ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012cc:	3204      	adds	r2, #4

080012ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d0:	d3fb      	bcc.n	80012ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012d2:	f009 fe59 	bl	800af88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012d6:	f7ff fa75 	bl	80007c4 <main>
  bx  lr
 80012da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012dc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80012e0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012e4:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 80012e8:	0800d3d4 	.word	0x0800d3d4
  ldr r2, =_sbss
 80012ec:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 80012f0:	240004d8 	.word	0x240004d8

080012f4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012f4:	e7fe      	b.n	80012f4 <ADC3_IRQHandler>
	...

080012f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012fe:	2003      	movs	r0, #3
 8001300:	f001 ff0c 	bl	800311c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001304:	f005 f850 	bl	80063a8 <HAL_RCC_GetSysClockFreq>
 8001308:	4602      	mov	r2, r0
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <HAL_Init+0x68>)
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	0a1b      	lsrs	r3, r3, #8
 8001310:	f003 030f 	and.w	r3, r3, #15
 8001314:	4913      	ldr	r1, [pc, #76]	; (8001364 <HAL_Init+0x6c>)
 8001316:	5ccb      	ldrb	r3, [r1, r3]
 8001318:	f003 031f 	and.w	r3, r3, #31
 800131c:	fa22 f303 	lsr.w	r3, r2, r3
 8001320:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001322:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <HAL_Init+0x68>)
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	f003 030f 	and.w	r3, r3, #15
 800132a:	4a0e      	ldr	r2, [pc, #56]	; (8001364 <HAL_Init+0x6c>)
 800132c:	5cd3      	ldrb	r3, [r2, r3]
 800132e:	f003 031f 	and.w	r3, r3, #31
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	fa22 f303 	lsr.w	r3, r2, r3
 8001338:	4a0b      	ldr	r2, [pc, #44]	; (8001368 <HAL_Init+0x70>)
 800133a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800133c:	4a0b      	ldr	r2, [pc, #44]	; (800136c <HAL_Init+0x74>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001342:	200f      	movs	r0, #15
 8001344:	f000 f814 	bl	8001370 <HAL_InitTick>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e002      	b.n	8001358 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001352:	f7ff fca7 	bl	8000ca4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	58024400 	.word	0x58024400
 8001364:	0800d010 	.word	0x0800d010
 8001368:	24000004 	.word	0x24000004
 800136c:	24000000 	.word	0x24000000

08001370 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001378:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <HAL_InitTick+0x60>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e021      	b.n	80013c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001384:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <HAL_InitTick+0x64>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <HAL_InitTick+0x60>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	4619      	mov	r1, r3
 800138e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001392:	fbb3 f3f1 	udiv	r3, r3, r1
 8001396:	fbb2 f3f3 	udiv	r3, r2, r3
 800139a:	4618      	mov	r0, r3
 800139c:	f001 fef1 	bl	8003182 <HAL_SYSTICK_Config>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e00e      	b.n	80013c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b0f      	cmp	r3, #15
 80013ae:	d80a      	bhi.n	80013c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b0:	2200      	movs	r2, #0
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013b8:	f001 febb 	bl	8003132 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013bc:	4a06      	ldr	r2, [pc, #24]	; (80013d8 <HAL_InitTick+0x68>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
 80013c4:	e000      	b.n	80013c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	2400000c 	.word	0x2400000c
 80013d4:	24000000 	.word	0x24000000
 80013d8:	24000008 	.word	0x24000008

080013dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_IncTick+0x20>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_IncTick+0x24>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4413      	add	r3, r2
 80013ec:	4a04      	ldr	r2, [pc, #16]	; (8001400 <HAL_IncTick+0x24>)
 80013ee:	6013      	str	r3, [r2, #0]
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	2400000c 	.word	0x2400000c
 8001400:	24000388 	.word	0x24000388

08001404 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return uwTick;
 8001408:	4b03      	ldr	r3, [pc, #12]	; (8001418 <HAL_GetTick+0x14>)
 800140a:	681b      	ldr	r3, [r3, #0]
}
 800140c:	4618      	mov	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	24000388 	.word	0x24000388

0800141c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001424:	f7ff ffee 	bl	8001404 <HAL_GetTick>
 8001428:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001434:	d005      	beq.n	8001442 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001436:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <HAL_Delay+0x44>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	461a      	mov	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4413      	add	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001442:	bf00      	nop
 8001444:	f7ff ffde 	bl	8001404 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	429a      	cmp	r2, r3
 8001452:	d8f7      	bhi.n	8001444 <HAL_Delay+0x28>
  {
  }
}
 8001454:	bf00      	nop
 8001456:	bf00      	nop
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	2400000c 	.word	0x2400000c

08001464 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001468:	4b03      	ldr	r3, [pc, #12]	; (8001478 <HAL_GetREVID+0x14>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	0c1b      	lsrs	r3, r3, #16
}
 800146e:	4618      	mov	r0, r3
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	5c001000 	.word	0x5c001000

0800147c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	431a      	orrs	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	609a      	str	r2, [r3, #8]
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b083      	sub	sp, #12
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
 80014aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	431a      	orrs	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	609a      	str	r2, [r3, #8]
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80014d8:	4618      	mov	r0, r3
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b087      	sub	sp, #28
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
 80014f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	3360      	adds	r3, #96	; 0x60
 80014f6:	461a      	mov	r2, r3
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	430b      	orrs	r3, r1
 8001512:	431a      	orrs	r2, r3
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001518:	bf00      	nop
 800151a:	371c      	adds	r7, #28
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	691b      	ldr	r3, [r3, #16]
 8001534:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	f003 031f 	and.w	r3, r3, #31
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	fa01 f303 	lsl.w	r3, r1, r3
 8001544:	431a      	orrs	r2, r3
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	611a      	str	r2, [r3, #16]
}
 800154a:	bf00      	nop
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001556:	b480      	push	{r7}
 8001558:	b087      	sub	sp, #28
 800155a:	af00      	add	r7, sp, #0
 800155c:	60f8      	str	r0, [r7, #12]
 800155e:	60b9      	str	r1, [r7, #8]
 8001560:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	3360      	adds	r3, #96	; 0x60
 8001566:	461a      	mov	r2, r3
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	431a      	orrs	r2, r3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	601a      	str	r2, [r3, #0]
  }
}
 8001580:	bf00      	nop
 8001582:	371c      	adds	r7, #28
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800159c:	2b00      	cmp	r3, #0
 800159e:	d101      	bne.n	80015a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80015a0:	2301      	movs	r3, #1
 80015a2:	e000      	b.n	80015a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b087      	sub	sp, #28
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	60f8      	str	r0, [r7, #12]
 80015ba:	60b9      	str	r1, [r7, #8]
 80015bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	3330      	adds	r3, #48	; 0x30
 80015c2:	461a      	mov	r2, r3
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	0a1b      	lsrs	r3, r3, #8
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	f003 030c 	and.w	r3, r3, #12
 80015ce:	4413      	add	r3, r2
 80015d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	f003 031f 	and.w	r3, r3, #31
 80015dc:	211f      	movs	r1, #31
 80015de:	fa01 f303 	lsl.w	r3, r1, r3
 80015e2:	43db      	mvns	r3, r3
 80015e4:	401a      	ands	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	0e9b      	lsrs	r3, r3, #26
 80015ea:	f003 011f 	and.w	r1, r3, #31
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	f003 031f 	and.w	r3, r3, #31
 80015f4:	fa01 f303 	lsl.w	r3, r1, r3
 80015f8:	431a      	orrs	r2, r3
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80015fe:	bf00      	nop
 8001600:	371c      	adds	r7, #28
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
 8001612:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	f023 0203 	bic.w	r2, r3, #3
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	60da      	str	r2, [r3, #12]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163c:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001644:	2301      	movs	r3, #1
 8001646:	e000      	b.n	800164a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001656:	b480      	push	{r7}
 8001658:	b087      	sub	sp, #28
 800165a:	af00      	add	r7, sp, #0
 800165c:	60f8      	str	r0, [r7, #12]
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	3314      	adds	r3, #20
 8001666:	461a      	mov	r2, r3
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	0e5b      	lsrs	r3, r3, #25
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	f003 0304 	and.w	r3, r3, #4
 8001672:	4413      	add	r3, r2
 8001674:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	0d1b      	lsrs	r3, r3, #20
 800167e:	f003 031f 	and.w	r3, r3, #31
 8001682:	2107      	movs	r1, #7
 8001684:	fa01 f303 	lsl.w	r3, r1, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	401a      	ands	r2, r3
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	0d1b      	lsrs	r3, r3, #20
 8001690:	f003 031f 	and.w	r3, r3, #31
 8001694:	6879      	ldr	r1, [r7, #4]
 8001696:	fa01 f303 	lsl.w	r3, r1, r3
 800169a:	431a      	orrs	r2, r3
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80016a0:	bf00      	nop
 80016a2:	371c      	adds	r7, #28
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80016c4:	43db      	mvns	r3, r3
 80016c6:	401a      	ands	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f003 0318 	and.w	r3, r3, #24
 80016ce:	4908      	ldr	r1, [pc, #32]	; (80016f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80016d0:	40d9      	lsrs	r1, r3
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	400b      	ands	r3, r1
 80016d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80016da:	431a      	orrs	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80016e2:	bf00      	nop
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	000fffff 	.word	0x000fffff

080016f4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f003 031f 	and.w	r3, r3, #31
}
 8001704:	4618      	mov	r0, r3
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001720:	4618      	mov	r0, r3
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <LL_ADC_DisableDeepPowerDown+0x20>)
 800173a:	4013      	ands	r3, r2
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6093      	str	r3, [r2, #8]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	5fffffc0 	.word	0x5fffffc0

08001750 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001760:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001764:	d101      	bne.n	800176a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001766:	2301      	movs	r3, #1
 8001768:	e000      	b.n	800176c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	4b05      	ldr	r3, [pc, #20]	; (800179c <LL_ADC_EnableInternalRegulator+0x24>)
 8001786:	4013      	ands	r3, r2
 8001788:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	6fffffc0 	.word	0x6fffffc0

080017a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80017b4:	d101      	bne.n	80017ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80017b6:	2301      	movs	r3, #1
 80017b8:	e000      	b.n	80017bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689a      	ldr	r2, [r3, #8]
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <LL_ADC_Enable+0x24>)
 80017d6:	4013      	ands	r3, r2
 80017d8:	f043 0201 	orr.w	r2, r3, #1
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	7fffffc0 	.word	0x7fffffc0

080017f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	2b01      	cmp	r3, #1
 8001802:	d101      	bne.n	8001808 <LL_ADC_IsEnabled+0x18>
 8001804:	2301      	movs	r3, #1
 8001806:	e000      	b.n	800180a <LL_ADC_IsEnabled+0x1a>
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
	...

08001818 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <LL_ADC_REG_StartConversion+0x24>)
 8001826:	4013      	ands	r3, r2
 8001828:	f043 0204 	orr.w	r2, r3, #4
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	7fffffc0 	.word	0x7fffffc0

08001840 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b04      	cmp	r3, #4
 8001852:	d101      	bne.n	8001858 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001854:	2301      	movs	r3, #1
 8001856:	e000      	b.n	800185a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001866:	b480      	push	{r7}
 8001868:	b083      	sub	sp, #12
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 0308 	and.w	r3, r3, #8
 8001876:	2b08      	cmp	r3, #8
 8001878:	d101      	bne.n	800187e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800187a:	2301      	movs	r3, #1
 800187c:	e000      	b.n	8001880 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800188c:	b590      	push	{r4, r7, lr}
 800188e:	b089      	sub	sp, #36	; 0x24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001894:	2300      	movs	r3, #0
 8001896:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001898:	2300      	movs	r3, #0
 800189a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e18f      	b.n	8001bc6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d109      	bne.n	80018c8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff fa0f 	bl	8000cd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ff3f 	bl	8001750 <LL_ADC_IsDeepPowerDownEnabled>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d004      	beq.n	80018e2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ff25 	bl	800172c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff ff5a 	bl	80017a0 <LL_ADC_IsInternalRegulatorEnabled>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d114      	bne.n	800191c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff ff3e 	bl	8001778 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018fc:	4b87      	ldr	r3, [pc, #540]	; (8001b1c <HAL_ADC_Init+0x290>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	099b      	lsrs	r3, r3, #6
 8001902:	4a87      	ldr	r2, [pc, #540]	; (8001b20 <HAL_ADC_Init+0x294>)
 8001904:	fba2 2303 	umull	r2, r3, r2, r3
 8001908:	099b      	lsrs	r3, r3, #6
 800190a:	3301      	adds	r3, #1
 800190c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800190e:	e002      	b.n	8001916 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	3b01      	subs	r3, #1
 8001914:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1f9      	bne.n	8001910 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff ff3d 	bl	80017a0 <LL_ADC_IsInternalRegulatorEnabled>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d10d      	bne.n	8001948 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001930:	f043 0210 	orr.w	r2, r3, #16
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193c:	f043 0201 	orr.w	r2, r3, #1
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ff77 	bl	8001840 <LL_ADC_REG_IsConversionOngoing>
 8001952:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001958:	f003 0310 	and.w	r3, r3, #16
 800195c:	2b00      	cmp	r3, #0
 800195e:	f040 8129 	bne.w	8001bb4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	2b00      	cmp	r3, #0
 8001966:	f040 8125 	bne.w	8001bb4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800196e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001972:	f043 0202 	orr.w	r2, r3, #2
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff ff36 	bl	80017f0 <LL_ADC_IsEnabled>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d136      	bne.n	80019f8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a65      	ldr	r2, [pc, #404]	; (8001b24 <HAL_ADC_Init+0x298>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d004      	beq.n	800199e <HAL_ADC_Init+0x112>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a63      	ldr	r2, [pc, #396]	; (8001b28 <HAL_ADC_Init+0x29c>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d10e      	bne.n	80019bc <HAL_ADC_Init+0x130>
 800199e:	4861      	ldr	r0, [pc, #388]	; (8001b24 <HAL_ADC_Init+0x298>)
 80019a0:	f7ff ff26 	bl	80017f0 <LL_ADC_IsEnabled>
 80019a4:	4604      	mov	r4, r0
 80019a6:	4860      	ldr	r0, [pc, #384]	; (8001b28 <HAL_ADC_Init+0x29c>)
 80019a8:	f7ff ff22 	bl	80017f0 <LL_ADC_IsEnabled>
 80019ac:	4603      	mov	r3, r0
 80019ae:	4323      	orrs	r3, r4
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	bf0c      	ite	eq
 80019b4:	2301      	moveq	r3, #1
 80019b6:	2300      	movne	r3, #0
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	e008      	b.n	80019ce <HAL_ADC_Init+0x142>
 80019bc:	485b      	ldr	r0, [pc, #364]	; (8001b2c <HAL_ADC_Init+0x2a0>)
 80019be:	f7ff ff17 	bl	80017f0 <LL_ADC_IsEnabled>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	bf0c      	ite	eq
 80019c8:	2301      	moveq	r3, #1
 80019ca:	2300      	movne	r3, #0
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d012      	beq.n	80019f8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a53      	ldr	r2, [pc, #332]	; (8001b24 <HAL_ADC_Init+0x298>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d004      	beq.n	80019e6 <HAL_ADC_Init+0x15a>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a51      	ldr	r2, [pc, #324]	; (8001b28 <HAL_ADC_Init+0x29c>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d101      	bne.n	80019ea <HAL_ADC_Init+0x15e>
 80019e6:	4a52      	ldr	r2, [pc, #328]	; (8001b30 <HAL_ADC_Init+0x2a4>)
 80019e8:	e000      	b.n	80019ec <HAL_ADC_Init+0x160>
 80019ea:	4a52      	ldr	r2, [pc, #328]	; (8001b34 <HAL_ADC_Init+0x2a8>)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	4619      	mov	r1, r3
 80019f2:	4610      	mov	r0, r2
 80019f4:	f7ff fd42 	bl	800147c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80019f8:	f7ff fd34 	bl	8001464 <HAL_GetREVID>
 80019fc:	4603      	mov	r3, r0
 80019fe:	f241 0203 	movw	r2, #4099	; 0x1003
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d914      	bls.n	8001a30 <HAL_ADC_Init+0x1a4>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	2b10      	cmp	r3, #16
 8001a0c:	d110      	bne.n	8001a30 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	7d5b      	ldrb	r3, [r3, #21]
 8001a12:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a18:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001a1e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	7f1b      	ldrb	r3, [r3, #28]
 8001a24:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001a26:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a28:	f043 030c 	orr.w	r3, r3, #12
 8001a2c:	61bb      	str	r3, [r7, #24]
 8001a2e:	e00d      	b.n	8001a4c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	7d5b      	ldrb	r3, [r3, #21]
 8001a34:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a3a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001a40:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	7f1b      	ldrb	r3, [r3, #28]
 8001a46:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	7f1b      	ldrb	r3, [r3, #28]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d106      	bne.n	8001a62 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	045b      	lsls	r3, r3, #17
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d009      	beq.n	8001a7e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a76:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	4b2c      	ldr	r3, [pc, #176]	; (8001b38 <HAL_ADC_Init+0x2ac>)
 8001a86:	4013      	ands	r3, r2
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	6812      	ldr	r2, [r2, #0]
 8001a8c:	69b9      	ldr	r1, [r7, #24]
 8001a8e:	430b      	orrs	r3, r1
 8001a90:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff fed2 	bl	8001840 <LL_ADC_REG_IsConversionOngoing>
 8001a9c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff fedf 	bl	8001866 <LL_ADC_INJ_IsConversionOngoing>
 8001aa8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d15f      	bne.n	8001b70 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d15c      	bne.n	8001b70 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	7d1b      	ldrb	r3, [r3, #20]
 8001aba:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68da      	ldr	r2, [r3, #12]
 8001aca:	4b1c      	ldr	r3, [pc, #112]	; (8001b3c <HAL_ADC_Init+0x2b0>)
 8001acc:	4013      	ands	r3, r2
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	6812      	ldr	r2, [r2, #0]
 8001ad2:	69b9      	ldr	r1, [r7, #24]
 8001ad4:	430b      	orrs	r3, r1
 8001ad6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d130      	bne.n	8001b44 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	691a      	ldr	r2, [r3, #16]
 8001aee:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <HAL_ADC_Init+0x2b4>)
 8001af0:	4013      	ands	r3, r2
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001af6:	3a01      	subs	r2, #1
 8001af8:	0411      	lsls	r1, r2, #16
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001afe:	4311      	orrs	r1, r2
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001b04:	4311      	orrs	r1, r2
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f042 0201 	orr.w	r2, r2, #1
 8001b16:	611a      	str	r2, [r3, #16]
 8001b18:	e01c      	b.n	8001b54 <HAL_ADC_Init+0x2c8>
 8001b1a:	bf00      	nop
 8001b1c:	24000000 	.word	0x24000000
 8001b20:	053e2d63 	.word	0x053e2d63
 8001b24:	40022000 	.word	0x40022000
 8001b28:	40022100 	.word	0x40022100
 8001b2c:	58026000 	.word	0x58026000
 8001b30:	40022300 	.word	0x40022300
 8001b34:	58026300 	.word	0x58026300
 8001b38:	fff0c003 	.word	0xfff0c003
 8001b3c:	ffffbffc 	.word	0xffffbffc
 8001b40:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	691a      	ldr	r2, [r3, #16]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 0201 	bic.w	r2, r2, #1
 8001b52:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 ffc4 	bl	8002af8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d10c      	bne.n	8001b92 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f023 010f 	bic.w	r1, r3, #15
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	1e5a      	subs	r2, r3, #1
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	631a      	str	r2, [r3, #48]	; 0x30
 8001b90:	e007      	b.n	8001ba2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 020f 	bic.w	r2, r2, #15
 8001ba0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba6:	f023 0303 	bic.w	r3, r3, #3
 8001baa:	f043 0201 	orr.w	r2, r3, #1
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	655a      	str	r2, [r3, #84]	; 0x54
 8001bb2:	e007      	b.n	8001bc4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb8:	f043 0210 	orr.w	r2, r3, #16
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001bc4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3724      	adds	r7, #36	; 0x24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd90      	pop	{r4, r7, pc}
 8001bce:	bf00      	nop

08001bd0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a55      	ldr	r2, [pc, #340]	; (8001d38 <HAL_ADC_Start_DMA+0x168>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d004      	beq.n	8001bf0 <HAL_ADC_Start_DMA+0x20>
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a54      	ldr	r2, [pc, #336]	; (8001d3c <HAL_ADC_Start_DMA+0x16c>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d101      	bne.n	8001bf4 <HAL_ADC_Start_DMA+0x24>
 8001bf0:	4b53      	ldr	r3, [pc, #332]	; (8001d40 <HAL_ADC_Start_DMA+0x170>)
 8001bf2:	e000      	b.n	8001bf6 <HAL_ADC_Start_DMA+0x26>
 8001bf4:	4b53      	ldr	r3, [pc, #332]	; (8001d44 <HAL_ADC_Start_DMA+0x174>)
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff fd7c 	bl	80016f4 <LL_ADC_GetMultimode>
 8001bfc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff fe1c 	bl	8001840 <LL_ADC_REG_IsConversionOngoing>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f040 808c 	bne.w	8001d28 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d101      	bne.n	8001c1e <HAL_ADC_Start_DMA+0x4e>
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	e087      	b.n	8001d2e <HAL_ADC_Start_DMA+0x15e>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d005      	beq.n	8001c38 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	2b05      	cmp	r3, #5
 8001c30:	d002      	beq.n	8001c38 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	2b09      	cmp	r3, #9
 8001c36:	d170      	bne.n	8001d1a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f000 fe3f 	bl	80028bc <ADC_Enable>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001c42:	7dfb      	ldrb	r3, [r7, #23]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d163      	bne.n	8001d10 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c4c:	4b3e      	ldr	r3, [pc, #248]	; (8001d48 <HAL_ADC_Start_DMA+0x178>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a37      	ldr	r2, [pc, #220]	; (8001d3c <HAL_ADC_Start_DMA+0x16c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d002      	beq.n	8001c68 <HAL_ADC_Start_DMA+0x98>
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	e000      	b.n	8001c6a <HAL_ADC_Start_DMA+0x9a>
 8001c68:	4b33      	ldr	r3, [pc, #204]	; (8001d38 <HAL_ADC_Start_DMA+0x168>)
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	6812      	ldr	r2, [r2, #0]
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d002      	beq.n	8001c78 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d105      	bne.n	8001c84 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d006      	beq.n	8001c9e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c94:	f023 0206 	bic.w	r2, r3, #6
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	659a      	str	r2, [r3, #88]	; 0x58
 8001c9c:	e002      	b.n	8001ca4 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca8:	4a28      	ldr	r2, [pc, #160]	; (8001d4c <HAL_ADC_Start_DMA+0x17c>)
 8001caa:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb0:	4a27      	ldr	r2, [pc, #156]	; (8001d50 <HAL_ADC_Start_DMA+0x180>)
 8001cb2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb8:	4a26      	ldr	r2, [pc, #152]	; (8001d54 <HAL_ADC_Start_DMA+0x184>)
 8001cba:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	221c      	movs	r2, #28
 8001cc2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f042 0210 	orr.w	r2, r2, #16
 8001cda:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	f7ff fc8f 	bl	800160a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	3340      	adds	r3, #64	; 0x40
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	68ba      	ldr	r2, [r7, #8]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f001 fdaa 	bl	8003854 <HAL_DMA_Start_IT>
 8001d00:	4603      	mov	r3, r0
 8001d02:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff fd85 	bl	8001818 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001d0e:	e00d      	b.n	8001d2c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001d18:	e008      	b.n	8001d2c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001d26:	e001      	b.n	8001d2c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40022000 	.word	0x40022000
 8001d3c:	40022100 	.word	0x40022100
 8001d40:	40022300 	.word	0x40022300
 8001d44:	58026300 	.word	0x58026300
 8001d48:	fffff0fe 	.word	0xfffff0fe
 8001d4c:	080029d1 	.word	0x080029d1
 8001d50:	08002aa9 	.word	0x08002aa9
 8001d54:	08002ac5 	.word	0x08002ac5

08001d58 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08a      	sub	sp, #40	; 0x28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001d60:	2300      	movs	r3, #0
 8001d62:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a87      	ldr	r2, [pc, #540]	; (8001f98 <HAL_ADC_IRQHandler+0x240>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d004      	beq.n	8001d88 <HAL_ADC_IRQHandler+0x30>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a86      	ldr	r2, [pc, #536]	; (8001f9c <HAL_ADC_IRQHandler+0x244>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d101      	bne.n	8001d8c <HAL_ADC_IRQHandler+0x34>
 8001d88:	4b85      	ldr	r3, [pc, #532]	; (8001fa0 <HAL_ADC_IRQHandler+0x248>)
 8001d8a:	e000      	b.n	8001d8e <HAL_ADC_IRQHandler+0x36>
 8001d8c:	4b85      	ldr	r3, [pc, #532]	; (8001fa4 <HAL_ADC_IRQHandler+0x24c>)
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff fcb0 	bl	80016f4 <LL_ADC_GetMultimode>
 8001d94:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d017      	beq.n	8001dd0 <HAL_ADC_IRQHandler+0x78>
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d012      	beq.n	8001dd0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dae:	f003 0310 	and.w	r3, r3, #16
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d105      	bne.n	8001dc2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dba:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 fff2 	bl	8002dac <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2202      	movs	r2, #2
 8001dce:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d004      	beq.n	8001de4 <HAL_ADC_IRQHandler+0x8c>
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d10a      	bne.n	8001dfa <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 8083 	beq.w	8001ef6 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	f003 0308 	and.w	r3, r3, #8
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d07d      	beq.n	8001ef6 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfe:	f003 0310 	and.w	r3, r3, #16
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d105      	bne.n	8001e12 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff fbb8 	bl	800158c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d062      	beq.n	8001ee8 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a5d      	ldr	r2, [pc, #372]	; (8001f9c <HAL_ADC_IRQHandler+0x244>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d002      	beq.n	8001e32 <HAL_ADC_IRQHandler+0xda>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	e000      	b.n	8001e34 <HAL_ADC_IRQHandler+0xdc>
 8001e32:	4b59      	ldr	r3, [pc, #356]	; (8001f98 <HAL_ADC_IRQHandler+0x240>)
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	6812      	ldr	r2, [r2, #0]
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d008      	beq.n	8001e4e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d005      	beq.n	8001e4e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	2b05      	cmp	r3, #5
 8001e46:	d002      	beq.n	8001e4e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	2b09      	cmp	r3, #9
 8001e4c:	d104      	bne.n	8001e58 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	623b      	str	r3, [r7, #32]
 8001e56:	e00c      	b.n	8001e72 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a4f      	ldr	r2, [pc, #316]	; (8001f9c <HAL_ADC_IRQHandler+0x244>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d002      	beq.n	8001e68 <HAL_ADC_IRQHandler+0x110>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	e000      	b.n	8001e6a <HAL_ADC_IRQHandler+0x112>
 8001e68:	4b4b      	ldr	r3, [pc, #300]	; (8001f98 <HAL_ADC_IRQHandler+0x240>)
 8001e6a:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001e72:	6a3b      	ldr	r3, [r7, #32]
 8001e74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d135      	bne.n	8001ee8 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	d12e      	bne.n	8001ee8 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff fcd6 	bl	8001840 <LL_ADC_REG_IsConversionOngoing>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d11a      	bne.n	8001ed0 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 020c 	bic.w	r2, r2, #12
 8001ea8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d112      	bne.n	8001ee8 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec6:	f043 0201 	orr.w	r2, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	655a      	str	r2, [r3, #84]	; 0x54
 8001ece:	e00b      	b.n	8001ee8 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed4:	f043 0210 	orr.w	r2, r3, #16
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee0:	f043 0201 	orr.w	r2, r3, #1
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f96f 	bl	80021cc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	220c      	movs	r2, #12
 8001ef4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	f003 0320 	and.w	r3, r3, #32
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d004      	beq.n	8001f0a <HAL_ADC_IRQHandler+0x1b2>
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	f003 0320 	and.w	r3, r3, #32
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10b      	bne.n	8001f22 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f000 80a0 	beq.w	8002056 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 809a 	beq.w	8002056 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f26:	f003 0310 	and.w	r3, r3, #16
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d105      	bne.n	8001f3a <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f32:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff fb76 	bl	8001630 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001f44:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff fb1e 	bl	800158c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f50:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a11      	ldr	r2, [pc, #68]	; (8001f9c <HAL_ADC_IRQHandler+0x244>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d002      	beq.n	8001f62 <HAL_ADC_IRQHandler+0x20a>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	e000      	b.n	8001f64 <HAL_ADC_IRQHandler+0x20c>
 8001f62:	4b0d      	ldr	r3, [pc, #52]	; (8001f98 <HAL_ADC_IRQHandler+0x240>)
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6812      	ldr	r2, [r2, #0]
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d008      	beq.n	8001f7e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d005      	beq.n	8001f7e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	2b06      	cmp	r3, #6
 8001f76:	d002      	beq.n	8001f7e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	2b07      	cmp	r3, #7
 8001f7c:	d104      	bne.n	8001f88 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	623b      	str	r3, [r7, #32]
 8001f86:	e014      	b.n	8001fb2 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a03      	ldr	r2, [pc, #12]	; (8001f9c <HAL_ADC_IRQHandler+0x244>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d00a      	beq.n	8001fa8 <HAL_ADC_IRQHandler+0x250>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	e008      	b.n	8001faa <HAL_ADC_IRQHandler+0x252>
 8001f98:	40022000 	.word	0x40022000
 8001f9c:	40022100 	.word	0x40022100
 8001fa0:	40022300 	.word	0x40022300
 8001fa4:	58026300 	.word	0x58026300
 8001fa8:	4b84      	ldr	r3, [pc, #528]	; (80021bc <HAL_ADC_IRQHandler+0x464>)
 8001faa:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d047      	beq.n	8002048 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001fb8:	6a3b      	ldr	r3, [r7, #32]
 8001fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d007      	beq.n	8001fd2 <HAL_ADC_IRQHandler+0x27a>
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d03f      	beq.n	8002048 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001fc8:	6a3b      	ldr	r3, [r7, #32]
 8001fca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d13a      	bne.n	8002048 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fdc:	2b40      	cmp	r3, #64	; 0x40
 8001fde:	d133      	bne.n	8002048 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001fe0:	6a3b      	ldr	r3, [r7, #32]
 8001fe2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d12e      	bne.n	8002048 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fc39 	bl	8001866 <LL_ADC_INJ_IsConversionOngoing>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d11a      	bne.n	8002030 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002008:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201e:	2b00      	cmp	r3, #0
 8002020:	d112      	bne.n	8002048 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002026:	f043 0201 	orr.w	r2, r3, #1
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	655a      	str	r2, [r3, #84]	; 0x54
 800202e:	e00b      	b.n	8002048 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002034:	f043 0210 	orr.w	r2, r3, #16
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002040:	f043 0201 	orr.w	r2, r3, #1
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 fe87 	bl	8002d5c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2260      	movs	r2, #96	; 0x60
 8002054:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800205c:	2b00      	cmp	r3, #0
 800205e:	d011      	beq.n	8002084 <HAL_ADC_IRQHandler+0x32c>
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00c      	beq.n	8002084 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f8bc 	bl	80021f4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2280      	movs	r2, #128	; 0x80
 8002082:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208a:	2b00      	cmp	r3, #0
 800208c:	d012      	beq.n	80020b4 <HAL_ADC_IRQHandler+0x35c>
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00d      	beq.n	80020b4 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 fe6d 	bl	8002d84 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020b2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d012      	beq.n	80020e4 <HAL_ADC_IRQHandler+0x38c>
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00d      	beq.n	80020e4 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 fe5f 	bl	8002d98 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020e2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	f003 0310 	and.w	r3, r3, #16
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d043      	beq.n	8002176 <HAL_ADC_IRQHandler+0x41e>
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	f003 0310 	and.w	r3, r3, #16
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d03e      	beq.n	8002176 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d102      	bne.n	8002106 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8002100:	2301      	movs	r3, #1
 8002102:	627b      	str	r3, [r7, #36]	; 0x24
 8002104:	e021      	b.n	800214a <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d015      	beq.n	8002138 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a2a      	ldr	r2, [pc, #168]	; (80021bc <HAL_ADC_IRQHandler+0x464>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d004      	beq.n	8002120 <HAL_ADC_IRQHandler+0x3c8>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a29      	ldr	r2, [pc, #164]	; (80021c0 <HAL_ADC_IRQHandler+0x468>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d101      	bne.n	8002124 <HAL_ADC_IRQHandler+0x3cc>
 8002120:	4b28      	ldr	r3, [pc, #160]	; (80021c4 <HAL_ADC_IRQHandler+0x46c>)
 8002122:	e000      	b.n	8002126 <HAL_ADC_IRQHandler+0x3ce>
 8002124:	4b28      	ldr	r3, [pc, #160]	; (80021c8 <HAL_ADC_IRQHandler+0x470>)
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff faf2 	bl	8001710 <LL_ADC_GetMultiDMATransfer>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00b      	beq.n	800214a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002132:	2301      	movs	r3, #1
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
 8002136:	e008      	b.n	800214a <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002146:	2301      	movs	r3, #1
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	2b01      	cmp	r3, #1
 800214e:	d10e      	bne.n	800216e <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002154:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002160:	f043 0202 	orr.w	r2, r3, #2
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f84d 	bl	8002208 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2210      	movs	r2, #16
 8002174:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800217c:	2b00      	cmp	r3, #0
 800217e:	d018      	beq.n	80021b2 <HAL_ADC_IRQHandler+0x45a>
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002186:	2b00      	cmp	r3, #0
 8002188:	d013      	beq.n	80021b2 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219a:	f043 0208 	orr.w	r2, r3, #8
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021aa:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 fddf 	bl	8002d70 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80021b2:	bf00      	nop
 80021b4:	3728      	adds	r7, #40	; 0x28
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40022000 	.word	0x40022000
 80021c0:	40022100 	.word	0x40022100
 80021c4:	40022300 	.word	0x40022300
 80021c8:	58026300 	.word	0x58026300

080021cc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800221c:	b590      	push	{r4, r7, lr}
 800221e:	b0a1      	sub	sp, #132	; 0x84
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002226:	2300      	movs	r3, #0
 8002228:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800222c:	2300      	movs	r3, #0
 800222e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	4a9d      	ldr	r2, [pc, #628]	; (80024ac <HAL_ADC_ConfigChannel+0x290>)
 8002236:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800223e:	2b01      	cmp	r3, #1
 8002240:	d101      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x2a>
 8002242:	2302      	movs	r3, #2
 8002244:	e321      	b.n	800288a <HAL_ADC_ConfigChannel+0x66e>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff faf4 	bl	8001840 <LL_ADC_REG_IsConversionOngoing>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	f040 8306 	bne.w	800286c <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002268:	2b00      	cmp	r3, #0
 800226a:	d108      	bne.n	800227e <HAL_ADC_ConfigChannel+0x62>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	0e9b      	lsrs	r3, r3, #26
 8002272:	f003 031f 	and.w	r3, r3, #31
 8002276:	2201      	movs	r2, #1
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	e016      	b.n	80022ac <HAL_ADC_ConfigChannel+0x90>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002284:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002286:	fa93 f3a3 	rbit	r3, r3
 800228a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800228c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800228e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002290:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002296:	2320      	movs	r3, #32
 8002298:	e003      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800229a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800229c:	fab3 f383 	clz	r3, r3
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	f003 031f 	and.w	r3, r3, #31
 80022a6:	2201      	movs	r2, #1
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	69d1      	ldr	r1, [r2, #28]
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6812      	ldr	r2, [r2, #0]
 80022b6:	430b      	orrs	r3, r1
 80022b8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6818      	ldr	r0, [r3, #0]
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	6859      	ldr	r1, [r3, #4]
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	f7ff f973 	bl	80015b2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff fab5 	bl	8001840 <LL_ADC_REG_IsConversionOngoing>
 80022d6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff fac2 	bl	8001866 <LL_ADC_INJ_IsConversionOngoing>
 80022e2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f040 80b3 	bne.w	8002452 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f040 80af 	bne.w	8002452 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6818      	ldr	r0, [r3, #0]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	6819      	ldr	r1, [r3, #0]
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	461a      	mov	r2, r3
 8002302:	f7ff f9a8 	bl	8001656 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002306:	4b6a      	ldr	r3, [pc, #424]	; (80024b0 <HAL_ADC_ConfigChannel+0x294>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800230e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002312:	d10b      	bne.n	800232c <HAL_ADC_ConfigChannel+0x110>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	695a      	ldr	r2, [r3, #20]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	089b      	lsrs	r3, r3, #2
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	e01d      	b.n	8002368 <HAL_ADC_ConfigChannel+0x14c>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f003 0310 	and.w	r3, r3, #16
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10b      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x136>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	695a      	ldr	r2, [r3, #20]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	089b      	lsrs	r3, r3, #2
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	e00a      	b.n	8002368 <HAL_ADC_ConfigChannel+0x14c>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	695a      	ldr	r2, [r3, #20]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	089b      	lsrs	r3, r3, #2
 800235e:	f003 0304 	and.w	r3, r3, #4
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	2b04      	cmp	r3, #4
 8002370:	d027      	beq.n	80023c2 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6818      	ldr	r0, [r3, #0]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	6919      	ldr	r1, [r3, #16]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002380:	f7ff f8b0 	bl	80014e4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6818      	ldr	r0, [r3, #0]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	6919      	ldr	r1, [r3, #16]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	7e5b      	ldrb	r3, [r3, #25]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d102      	bne.n	800239a <HAL_ADC_ConfigChannel+0x17e>
 8002394:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002398:	e000      	b.n	800239c <HAL_ADC_ConfigChannel+0x180>
 800239a:	2300      	movs	r3, #0
 800239c:	461a      	mov	r2, r3
 800239e:	f7ff f8da 	bl	8001556 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6818      	ldr	r0, [r3, #0]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	6919      	ldr	r1, [r3, #16]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	7e1b      	ldrb	r3, [r3, #24]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d102      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x19c>
 80023b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023b6:	e000      	b.n	80023ba <HAL_ADC_ConfigChannel+0x19e>
 80023b8:	2300      	movs	r3, #0
 80023ba:	461a      	mov	r2, r3
 80023bc:	f7ff f8b2 	bl	8001524 <LL_ADC_SetDataRightShift>
 80023c0:	e047      	b.n	8002452 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	069b      	lsls	r3, r3, #26
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d107      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023e4:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	069b      	lsls	r3, r3, #26
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d107      	bne.n	800240a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002408:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002410:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	069b      	lsls	r3, r3, #26
 800241a:	429a      	cmp	r2, r3
 800241c:	d107      	bne.n	800242e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800242c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002434:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	069b      	lsls	r3, r3, #26
 800243e:	429a      	cmp	r2, r3
 8002440:	d107      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002450:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff f9ca 	bl	80017f0 <LL_ADC_IsEnabled>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	f040 820d 	bne.w	800287e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6818      	ldr	r0, [r3, #0]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	6819      	ldr	r1, [r3, #0]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	461a      	mov	r2, r3
 8002472:	f7ff f91b 	bl	80016ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	4a0c      	ldr	r2, [pc, #48]	; (80024ac <HAL_ADC_ConfigChannel+0x290>)
 800247c:	4293      	cmp	r3, r2
 800247e:	f040 8133 	bne.w	80026e8 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800248e:	2b00      	cmp	r3, #0
 8002490:	d110      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x298>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	0e9b      	lsrs	r3, r3, #26
 8002498:	3301      	adds	r3, #1
 800249a:	f003 031f 	and.w	r3, r3, #31
 800249e:	2b09      	cmp	r3, #9
 80024a0:	bf94      	ite	ls
 80024a2:	2301      	movls	r3, #1
 80024a4:	2300      	movhi	r3, #0
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	e01e      	b.n	80024e8 <HAL_ADC_ConfigChannel+0x2cc>
 80024aa:	bf00      	nop
 80024ac:	47ff0000 	.word	0x47ff0000
 80024b0:	5c001000 	.word	0x5c001000
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024bc:	fa93 f3a3 	rbit	r3, r3
 80024c0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80024c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80024c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80024cc:	2320      	movs	r3, #32
 80024ce:	e003      	b.n	80024d8 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80024d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024d2:	fab3 f383 	clz	r3, r3
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	3301      	adds	r3, #1
 80024da:	f003 031f 	and.w	r3, r3, #31
 80024de:	2b09      	cmp	r3, #9
 80024e0:	bf94      	ite	ls
 80024e2:	2301      	movls	r3, #1
 80024e4:	2300      	movhi	r3, #0
 80024e6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d079      	beq.n	80025e0 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d107      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x2ec>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	0e9b      	lsrs	r3, r3, #26
 80024fe:	3301      	adds	r3, #1
 8002500:	069b      	lsls	r3, r3, #26
 8002502:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002506:	e015      	b.n	8002534 <HAL_ADC_ConfigChannel+0x318>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002510:	fa93 f3a3 	rbit	r3, r3
 8002514:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002516:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002518:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800251a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002520:	2320      	movs	r3, #32
 8002522:	e003      	b.n	800252c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002526:	fab3 f383 	clz	r3, r3
 800252a:	b2db      	uxtb	r3, r3
 800252c:	3301      	adds	r3, #1
 800252e:	069b      	lsls	r3, r3, #26
 8002530:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800253c:	2b00      	cmp	r3, #0
 800253e:	d109      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x338>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	0e9b      	lsrs	r3, r3, #26
 8002546:	3301      	adds	r3, #1
 8002548:	f003 031f 	and.w	r3, r3, #31
 800254c:	2101      	movs	r1, #1
 800254e:	fa01 f303 	lsl.w	r3, r1, r3
 8002552:	e017      	b.n	8002584 <HAL_ADC_ConfigChannel+0x368>
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800255c:	fa93 f3a3 	rbit	r3, r3
 8002560:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002564:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002566:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 800256c:	2320      	movs	r3, #32
 800256e:	e003      	b.n	8002578 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002572:	fab3 f383 	clz	r3, r3
 8002576:	b2db      	uxtb	r3, r3
 8002578:	3301      	adds	r3, #1
 800257a:	f003 031f 	and.w	r3, r3, #31
 800257e:	2101      	movs	r1, #1
 8002580:	fa01 f303 	lsl.w	r3, r1, r3
 8002584:	ea42 0103 	orr.w	r1, r2, r3
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10a      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x38e>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	0e9b      	lsrs	r3, r3, #26
 800259a:	3301      	adds	r3, #1
 800259c:	f003 021f 	and.w	r2, r3, #31
 80025a0:	4613      	mov	r3, r2
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	4413      	add	r3, r2
 80025a6:	051b      	lsls	r3, r3, #20
 80025a8:	e018      	b.n	80025dc <HAL_ADC_ConfigChannel+0x3c0>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b2:	fa93 f3a3 	rbit	r3, r3
 80025b6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80025b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ba:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80025bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80025c2:	2320      	movs	r3, #32
 80025c4:	e003      	b.n	80025ce <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80025c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c8:	fab3 f383 	clz	r3, r3
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	3301      	adds	r3, #1
 80025d0:	f003 021f 	and.w	r2, r3, #31
 80025d4:	4613      	mov	r3, r2
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	4413      	add	r3, r2
 80025da:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025dc:	430b      	orrs	r3, r1
 80025de:	e07e      	b.n	80026de <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d107      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x3e0>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	0e9b      	lsrs	r3, r3, #26
 80025f2:	3301      	adds	r3, #1
 80025f4:	069b      	lsls	r3, r3, #26
 80025f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025fa:	e015      	b.n	8002628 <HAL_ADC_ConfigChannel+0x40c>
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002604:	fa93 f3a3 	rbit	r3, r3
 8002608:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800260e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002614:	2320      	movs	r3, #32
 8002616:	e003      	b.n	8002620 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261a:	fab3 f383 	clz	r3, r3
 800261e:	b2db      	uxtb	r3, r3
 8002620:	3301      	adds	r3, #1
 8002622:	069b      	lsls	r3, r3, #26
 8002624:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002630:	2b00      	cmp	r3, #0
 8002632:	d109      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x42c>
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	0e9b      	lsrs	r3, r3, #26
 800263a:	3301      	adds	r3, #1
 800263c:	f003 031f 	and.w	r3, r3, #31
 8002640:	2101      	movs	r1, #1
 8002642:	fa01 f303 	lsl.w	r3, r1, r3
 8002646:	e017      	b.n	8002678 <HAL_ADC_ConfigChannel+0x45c>
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	fa93 f3a3 	rbit	r3, r3
 8002654:	61bb      	str	r3, [r7, #24]
  return result;
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800265a:	6a3b      	ldr	r3, [r7, #32]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002660:	2320      	movs	r3, #32
 8002662:	e003      	b.n	800266c <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002664:	6a3b      	ldr	r3, [r7, #32]
 8002666:	fab3 f383 	clz	r3, r3
 800266a:	b2db      	uxtb	r3, r3
 800266c:	3301      	adds	r3, #1
 800266e:	f003 031f 	and.w	r3, r3, #31
 8002672:	2101      	movs	r1, #1
 8002674:	fa01 f303 	lsl.w	r3, r1, r3
 8002678:	ea42 0103 	orr.w	r1, r2, r3
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10d      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x488>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	0e9b      	lsrs	r3, r3, #26
 800268e:	3301      	adds	r3, #1
 8002690:	f003 021f 	and.w	r2, r3, #31
 8002694:	4613      	mov	r3, r2
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	4413      	add	r3, r2
 800269a:	3b1e      	subs	r3, #30
 800269c:	051b      	lsls	r3, r3, #20
 800269e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026a2:	e01b      	b.n	80026dc <HAL_ADC_ConfigChannel+0x4c0>
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	fa93 f3a3 	rbit	r3, r3
 80026b0:	60fb      	str	r3, [r7, #12]
  return result;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80026bc:	2320      	movs	r3, #32
 80026be:	e003      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	fab3 f383 	clz	r3, r3
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	3301      	adds	r3, #1
 80026ca:	f003 021f 	and.w	r2, r3, #31
 80026ce:	4613      	mov	r3, r2
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	4413      	add	r3, r2
 80026d4:	3b1e      	subs	r3, #30
 80026d6:	051b      	lsls	r3, r3, #20
 80026d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026dc:	430b      	orrs	r3, r1
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	6892      	ldr	r2, [r2, #8]
 80026e2:	4619      	mov	r1, r3
 80026e4:	f7fe ffb7 	bl	8001656 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f280 80c6 	bge.w	800287e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a67      	ldr	r2, [pc, #412]	; (8002894 <HAL_ADC_ConfigChannel+0x678>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d004      	beq.n	8002706 <HAL_ADC_ConfigChannel+0x4ea>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a65      	ldr	r2, [pc, #404]	; (8002898 <HAL_ADC_ConfigChannel+0x67c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d101      	bne.n	800270a <HAL_ADC_ConfigChannel+0x4ee>
 8002706:	4b65      	ldr	r3, [pc, #404]	; (800289c <HAL_ADC_ConfigChannel+0x680>)
 8002708:	e000      	b.n	800270c <HAL_ADC_ConfigChannel+0x4f0>
 800270a:	4b65      	ldr	r3, [pc, #404]	; (80028a0 <HAL_ADC_ConfigChannel+0x684>)
 800270c:	4618      	mov	r0, r3
 800270e:	f7fe fedb 	bl	80014c8 <LL_ADC_GetCommonPathInternalCh>
 8002712:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a5e      	ldr	r2, [pc, #376]	; (8002894 <HAL_ADC_ConfigChannel+0x678>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d004      	beq.n	8002728 <HAL_ADC_ConfigChannel+0x50c>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a5d      	ldr	r2, [pc, #372]	; (8002898 <HAL_ADC_ConfigChannel+0x67c>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d10e      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x52a>
 8002728:	485a      	ldr	r0, [pc, #360]	; (8002894 <HAL_ADC_ConfigChannel+0x678>)
 800272a:	f7ff f861 	bl	80017f0 <LL_ADC_IsEnabled>
 800272e:	4604      	mov	r4, r0
 8002730:	4859      	ldr	r0, [pc, #356]	; (8002898 <HAL_ADC_ConfigChannel+0x67c>)
 8002732:	f7ff f85d 	bl	80017f0 <LL_ADC_IsEnabled>
 8002736:	4603      	mov	r3, r0
 8002738:	4323      	orrs	r3, r4
 800273a:	2b00      	cmp	r3, #0
 800273c:	bf0c      	ite	eq
 800273e:	2301      	moveq	r3, #1
 8002740:	2300      	movne	r3, #0
 8002742:	b2db      	uxtb	r3, r3
 8002744:	e008      	b.n	8002758 <HAL_ADC_ConfigChannel+0x53c>
 8002746:	4857      	ldr	r0, [pc, #348]	; (80028a4 <HAL_ADC_ConfigChannel+0x688>)
 8002748:	f7ff f852 	bl	80017f0 <LL_ADC_IsEnabled>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	bf0c      	ite	eq
 8002752:	2301      	moveq	r3, #1
 8002754:	2300      	movne	r3, #0
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b00      	cmp	r3, #0
 800275a:	d07d      	beq.n	8002858 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a51      	ldr	r2, [pc, #324]	; (80028a8 <HAL_ADC_ConfigChannel+0x68c>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d130      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x5ac>
 8002766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002768:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d12b      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a4b      	ldr	r2, [pc, #300]	; (80028a4 <HAL_ADC_ConfigChannel+0x688>)
 8002776:	4293      	cmp	r3, r2
 8002778:	f040 8081 	bne.w	800287e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a44      	ldr	r2, [pc, #272]	; (8002894 <HAL_ADC_ConfigChannel+0x678>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d004      	beq.n	8002790 <HAL_ADC_ConfigChannel+0x574>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a43      	ldr	r2, [pc, #268]	; (8002898 <HAL_ADC_ConfigChannel+0x67c>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d101      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x578>
 8002790:	4a42      	ldr	r2, [pc, #264]	; (800289c <HAL_ADC_ConfigChannel+0x680>)
 8002792:	e000      	b.n	8002796 <HAL_ADC_ConfigChannel+0x57a>
 8002794:	4a42      	ldr	r2, [pc, #264]	; (80028a0 <HAL_ADC_ConfigChannel+0x684>)
 8002796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002798:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800279c:	4619      	mov	r1, r3
 800279e:	4610      	mov	r0, r2
 80027a0:	f7fe fe7f 	bl	80014a2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027a4:	4b41      	ldr	r3, [pc, #260]	; (80028ac <HAL_ADC_ConfigChannel+0x690>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	099b      	lsrs	r3, r3, #6
 80027aa:	4a41      	ldr	r2, [pc, #260]	; (80028b0 <HAL_ADC_ConfigChannel+0x694>)
 80027ac:	fba2 2303 	umull	r2, r3, r2, r3
 80027b0:	099b      	lsrs	r3, r3, #6
 80027b2:	3301      	adds	r3, #1
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80027b8:	e002      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	3b01      	subs	r3, #1
 80027be:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f9      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027c6:	e05a      	b.n	800287e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a39      	ldr	r2, [pc, #228]	; (80028b4 <HAL_ADC_ConfigChannel+0x698>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d11e      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x5f4>
 80027d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d119      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a30      	ldr	r2, [pc, #192]	; (80028a4 <HAL_ADC_ConfigChannel+0x688>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d14b      	bne.n	800287e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a2a      	ldr	r2, [pc, #168]	; (8002894 <HAL_ADC_ConfigChannel+0x678>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d004      	beq.n	80027fa <HAL_ADC_ConfigChannel+0x5de>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a28      	ldr	r2, [pc, #160]	; (8002898 <HAL_ADC_ConfigChannel+0x67c>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d101      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x5e2>
 80027fa:	4a28      	ldr	r2, [pc, #160]	; (800289c <HAL_ADC_ConfigChannel+0x680>)
 80027fc:	e000      	b.n	8002800 <HAL_ADC_ConfigChannel+0x5e4>
 80027fe:	4a28      	ldr	r2, [pc, #160]	; (80028a0 <HAL_ADC_ConfigChannel+0x684>)
 8002800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002802:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002806:	4619      	mov	r1, r3
 8002808:	4610      	mov	r0, r2
 800280a:	f7fe fe4a 	bl	80014a2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800280e:	e036      	b.n	800287e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a28      	ldr	r2, [pc, #160]	; (80028b8 <HAL_ADC_ConfigChannel+0x69c>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d131      	bne.n	800287e <HAL_ADC_ConfigChannel+0x662>
 800281a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800281c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d12c      	bne.n	800287e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a1e      	ldr	r2, [pc, #120]	; (80028a4 <HAL_ADC_ConfigChannel+0x688>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d127      	bne.n	800287e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a18      	ldr	r2, [pc, #96]	; (8002894 <HAL_ADC_ConfigChannel+0x678>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d004      	beq.n	8002842 <HAL_ADC_ConfigChannel+0x626>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a16      	ldr	r2, [pc, #88]	; (8002898 <HAL_ADC_ConfigChannel+0x67c>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d101      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x62a>
 8002842:	4a16      	ldr	r2, [pc, #88]	; (800289c <HAL_ADC_ConfigChannel+0x680>)
 8002844:	e000      	b.n	8002848 <HAL_ADC_ConfigChannel+0x62c>
 8002846:	4a16      	ldr	r2, [pc, #88]	; (80028a0 <HAL_ADC_ConfigChannel+0x684>)
 8002848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800284a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800284e:	4619      	mov	r1, r3
 8002850:	4610      	mov	r0, r2
 8002852:	f7fe fe26 	bl	80014a2 <LL_ADC_SetCommonPathInternalCh>
 8002856:	e012      	b.n	800287e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285c:	f043 0220 	orr.w	r2, r3, #32
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800286a:	e008      	b.n	800287e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002870:	f043 0220 	orr.w	r2, r3, #32
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002886:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800288a:	4618      	mov	r0, r3
 800288c:	3784      	adds	r7, #132	; 0x84
 800288e:	46bd      	mov	sp, r7
 8002890:	bd90      	pop	{r4, r7, pc}
 8002892:	bf00      	nop
 8002894:	40022000 	.word	0x40022000
 8002898:	40022100 	.word	0x40022100
 800289c:	40022300 	.word	0x40022300
 80028a0:	58026300 	.word	0x58026300
 80028a4:	58026000 	.word	0x58026000
 80028a8:	cb840000 	.word	0xcb840000
 80028ac:	24000000 	.word	0x24000000
 80028b0:	053e2d63 	.word	0x053e2d63
 80028b4:	c7520000 	.word	0xc7520000
 80028b8:	cfb80000 	.word	0xcfb80000

080028bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7fe ff91 	bl	80017f0 <LL_ADC_IsEnabled>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d16e      	bne.n	80029b2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	4b38      	ldr	r3, [pc, #224]	; (80029bc <ADC_Enable+0x100>)
 80028dc:	4013      	ands	r3, r2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00d      	beq.n	80028fe <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e6:	f043 0210 	orr.w	r2, r3, #16
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f2:	f043 0201 	orr.w	r2, r3, #1
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e05a      	b.n	80029b4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f7fe ff60 	bl	80017c8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002908:	f7fe fd7c 	bl	8001404 <HAL_GetTick>
 800290c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a2b      	ldr	r2, [pc, #172]	; (80029c0 <ADC_Enable+0x104>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d004      	beq.n	8002922 <ADC_Enable+0x66>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a29      	ldr	r2, [pc, #164]	; (80029c4 <ADC_Enable+0x108>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d101      	bne.n	8002926 <ADC_Enable+0x6a>
 8002922:	4b29      	ldr	r3, [pc, #164]	; (80029c8 <ADC_Enable+0x10c>)
 8002924:	e000      	b.n	8002928 <ADC_Enable+0x6c>
 8002926:	4b29      	ldr	r3, [pc, #164]	; (80029cc <ADC_Enable+0x110>)
 8002928:	4618      	mov	r0, r3
 800292a:	f7fe fee3 	bl	80016f4 <LL_ADC_GetMultimode>
 800292e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a23      	ldr	r2, [pc, #140]	; (80029c4 <ADC_Enable+0x108>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d002      	beq.n	8002940 <ADC_Enable+0x84>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	e000      	b.n	8002942 <ADC_Enable+0x86>
 8002940:	4b1f      	ldr	r3, [pc, #124]	; (80029c0 <ADC_Enable+0x104>)
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6812      	ldr	r2, [r2, #0]
 8002946:	4293      	cmp	r3, r2
 8002948:	d02c      	beq.n	80029a4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d130      	bne.n	80029b2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002950:	e028      	b.n	80029a4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f7fe ff4a 	bl	80017f0 <LL_ADC_IsEnabled>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d104      	bne.n	800296c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f7fe ff2e 	bl	80017c8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800296c:	f7fe fd4a 	bl	8001404 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d914      	bls.n	80029a4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b01      	cmp	r3, #1
 8002986:	d00d      	beq.n	80029a4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298c:	f043 0210 	orr.w	r2, r3, #16
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002998:	f043 0201 	orr.w	r2, r3, #1
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e007      	b.n	80029b4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d1cf      	bne.n	8002952 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	8000003f 	.word	0x8000003f
 80029c0:	40022000 	.word	0x40022000
 80029c4:	40022100 	.word	0x40022100
 80029c8:	40022300 	.word	0x40022300
 80029cc:	58026300 	.word	0x58026300

080029d0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029dc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d14b      	bne.n	8002a82 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0308 	and.w	r3, r3, #8
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d021      	beq.n	8002a48 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7fe fdbf 	bl	800158c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d032      	beq.n	8002a7a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d12b      	bne.n	8002a7a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d11f      	bne.n	8002a7a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3e:	f043 0201 	orr.w	r2, r3, #1
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	655a      	str	r2, [r3, #84]	; 0x54
 8002a46:	e018      	b.n	8002a7a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d111      	bne.n	8002a7a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d105      	bne.n	8002a7a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a72:	f043 0201 	orr.w	r2, r3, #1
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f7ff fba6 	bl	80021cc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a80:	e00e      	b.n	8002aa0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a86:	f003 0310 	and.w	r3, r3, #16
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f7ff fbba 	bl	8002208 <HAL_ADC_ErrorCallback>
}
 8002a94:	e004      	b.n	8002aa0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	4798      	blx	r3
}
 8002aa0:	bf00      	nop
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f7ff fb92 	bl	80021e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002abc:	bf00      	nop
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae2:	f043 0204 	orr.w	r2, r3, #4
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f7ff fb8c 	bl	8002208 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002af0:	bf00      	nop
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a7a      	ldr	r2, [pc, #488]	; (8002cf0 <ADC_ConfigureBoostMode+0x1f8>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d004      	beq.n	8002b14 <ADC_ConfigureBoostMode+0x1c>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a79      	ldr	r2, [pc, #484]	; (8002cf4 <ADC_ConfigureBoostMode+0x1fc>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d109      	bne.n	8002b28 <ADC_ConfigureBoostMode+0x30>
 8002b14:	4b78      	ldr	r3, [pc, #480]	; (8002cf8 <ADC_ConfigureBoostMode+0x200>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	bf14      	ite	ne
 8002b20:	2301      	movne	r3, #1
 8002b22:	2300      	moveq	r3, #0
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	e008      	b.n	8002b3a <ADC_ConfigureBoostMode+0x42>
 8002b28:	4b74      	ldr	r3, [pc, #464]	; (8002cfc <ADC_ConfigureBoostMode+0x204>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	bf14      	ite	ne
 8002b34:	2301      	movne	r3, #1
 8002b36:	2300      	moveq	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d01c      	beq.n	8002b78 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002b3e:	f003 fdad 	bl	800669c <HAL_RCC_GetHCLKFreq>
 8002b42:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b4c:	d010      	beq.n	8002b70 <ADC_ConfigureBoostMode+0x78>
 8002b4e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b52:	d873      	bhi.n	8002c3c <ADC_ConfigureBoostMode+0x144>
 8002b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b58:	d002      	beq.n	8002b60 <ADC_ConfigureBoostMode+0x68>
 8002b5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b5e:	d16d      	bne.n	8002c3c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	0c1b      	lsrs	r3, r3, #16
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6c:	60fb      	str	r3, [r7, #12]
        break;
 8002b6e:	e068      	b.n	8002c42 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	089b      	lsrs	r3, r3, #2
 8002b74:	60fb      	str	r3, [r7, #12]
        break;
 8002b76:	e064      	b.n	8002c42 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002b78:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002b7c:	f04f 0100 	mov.w	r1, #0
 8002b80:	f004 fff2 	bl	8007b68 <HAL_RCCEx_GetPeriphCLKFreq>
 8002b84:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002b8e:	d051      	beq.n	8002c34 <ADC_ConfigureBoostMode+0x13c>
 8002b90:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002b94:	d854      	bhi.n	8002c40 <ADC_ConfigureBoostMode+0x148>
 8002b96:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002b9a:	d047      	beq.n	8002c2c <ADC_ConfigureBoostMode+0x134>
 8002b9c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002ba0:	d84e      	bhi.n	8002c40 <ADC_ConfigureBoostMode+0x148>
 8002ba2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002ba6:	d03d      	beq.n	8002c24 <ADC_ConfigureBoostMode+0x12c>
 8002ba8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002bac:	d848      	bhi.n	8002c40 <ADC_ConfigureBoostMode+0x148>
 8002bae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bb2:	d033      	beq.n	8002c1c <ADC_ConfigureBoostMode+0x124>
 8002bb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bb8:	d842      	bhi.n	8002c40 <ADC_ConfigureBoostMode+0x148>
 8002bba:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002bbe:	d029      	beq.n	8002c14 <ADC_ConfigureBoostMode+0x11c>
 8002bc0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002bc4:	d83c      	bhi.n	8002c40 <ADC_ConfigureBoostMode+0x148>
 8002bc6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002bca:	d01a      	beq.n	8002c02 <ADC_ConfigureBoostMode+0x10a>
 8002bcc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002bd0:	d836      	bhi.n	8002c40 <ADC_ConfigureBoostMode+0x148>
 8002bd2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002bd6:	d014      	beq.n	8002c02 <ADC_ConfigureBoostMode+0x10a>
 8002bd8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002bdc:	d830      	bhi.n	8002c40 <ADC_ConfigureBoostMode+0x148>
 8002bde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002be2:	d00e      	beq.n	8002c02 <ADC_ConfigureBoostMode+0x10a>
 8002be4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002be8:	d82a      	bhi.n	8002c40 <ADC_ConfigureBoostMode+0x148>
 8002bea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002bee:	d008      	beq.n	8002c02 <ADC_ConfigureBoostMode+0x10a>
 8002bf0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002bf4:	d824      	bhi.n	8002c40 <ADC_ConfigureBoostMode+0x148>
 8002bf6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bfa:	d002      	beq.n	8002c02 <ADC_ConfigureBoostMode+0x10a>
 8002bfc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002c00:	d11e      	bne.n	8002c40 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	0c9b      	lsrs	r3, r3, #18
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c10:	60fb      	str	r3, [r7, #12]
        break;
 8002c12:	e016      	b.n	8002c42 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	091b      	lsrs	r3, r3, #4
 8002c18:	60fb      	str	r3, [r7, #12]
        break;
 8002c1a:	e012      	b.n	8002c42 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	095b      	lsrs	r3, r3, #5
 8002c20:	60fb      	str	r3, [r7, #12]
        break;
 8002c22:	e00e      	b.n	8002c42 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	099b      	lsrs	r3, r3, #6
 8002c28:	60fb      	str	r3, [r7, #12]
        break;
 8002c2a:	e00a      	b.n	8002c42 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	09db      	lsrs	r3, r3, #7
 8002c30:	60fb      	str	r3, [r7, #12]
        break;
 8002c32:	e006      	b.n	8002c42 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	0a1b      	lsrs	r3, r3, #8
 8002c38:	60fb      	str	r3, [r7, #12]
        break;
 8002c3a:	e002      	b.n	8002c42 <ADC_ConfigureBoostMode+0x14a>
        break;
 8002c3c:	bf00      	nop
 8002c3e:	e000      	b.n	8002c42 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002c40:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002c42:	f7fe fc0f 	bl	8001464 <HAL_GetREVID>
 8002c46:	4603      	mov	r3, r0
 8002c48:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d815      	bhi.n	8002c7c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4a2b      	ldr	r2, [pc, #172]	; (8002d00 <ADC_ConfigureBoostMode+0x208>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d908      	bls.n	8002c6a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c66:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002c68:	e03e      	b.n	8002ce8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c78:	609a      	str	r2, [r3, #8]
}
 8002c7a:	e035      	b.n	8002ce8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	085b      	lsrs	r3, r3, #1
 8002c80:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	4a1f      	ldr	r2, [pc, #124]	; (8002d04 <ADC_ConfigureBoostMode+0x20c>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d808      	bhi.n	8002c9c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002c98:	609a      	str	r2, [r3, #8]
}
 8002c9a:	e025      	b.n	8002ce8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4a1a      	ldr	r2, [pc, #104]	; (8002d08 <ADC_ConfigureBoostMode+0x210>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d80a      	bhi.n	8002cba <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cb6:	609a      	str	r2, [r3, #8]
}
 8002cb8:	e016      	b.n	8002ce8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4a13      	ldr	r2, [pc, #76]	; (8002d0c <ADC_ConfigureBoostMode+0x214>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d80a      	bhi.n	8002cd8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd4:	609a      	str	r2, [r3, #8]
}
 8002cd6:	e007      	b.n	8002ce8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002ce6:	609a      	str	r2, [r3, #8]
}
 8002ce8:	bf00      	nop
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40022000 	.word	0x40022000
 8002cf4:	40022100 	.word	0x40022100
 8002cf8:	40022300 	.word	0x40022300
 8002cfc:	58026300 	.word	0x58026300
 8002d00:	01312d00 	.word	0x01312d00
 8002d04:	005f5e10 	.word	0x005f5e10
 8002d08:	00bebc20 	.word	0x00bebc20
 8002d0c:	017d7840 	.word	0x017d7840

08002d10 <LL_ADC_IsEnabled>:
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d101      	bne.n	8002d28 <LL_ADC_IsEnabled+0x18>
 8002d24:	2301      	movs	r3, #1
 8002d26:	e000      	b.n	8002d2a <LL_ADC_IsEnabled+0x1a>
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <LL_ADC_REG_IsConversionOngoing>:
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 0304 	and.w	r3, r3, #4
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	d101      	bne.n	8002d4e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e000      	b.n	8002d50 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002dc0:	b590      	push	{r4, r7, lr}
 8002dc2:	b09f      	sub	sp, #124	; 0x7c
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d101      	bne.n	8002dde <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002dda:	2302      	movs	r3, #2
 8002ddc:	e0be      	b.n	8002f5c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002de6:	2300      	movs	r3, #0
 8002de8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002dea:	2300      	movs	r3, #0
 8002dec:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a5c      	ldr	r2, [pc, #368]	; (8002f64 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d102      	bne.n	8002dfe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002df8:	4b5b      	ldr	r3, [pc, #364]	; (8002f68 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002dfa:	60bb      	str	r3, [r7, #8]
 8002dfc:	e001      	b.n	8002e02 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10b      	bne.n	8002e20 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0c:	f043 0220 	orr.w	r2, r3, #32
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e09d      	b.n	8002f5c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff ff87 	bl	8002d36 <LL_ADC_REG_IsConversionOngoing>
 8002e28:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff ff81 	bl	8002d36 <LL_ADC_REG_IsConversionOngoing>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d17f      	bne.n	8002f3a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002e3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d17c      	bne.n	8002f3a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a47      	ldr	r2, [pc, #284]	; (8002f64 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d004      	beq.n	8002e54 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a46      	ldr	r2, [pc, #280]	; (8002f68 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d101      	bne.n	8002e58 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002e54:	4b45      	ldr	r3, [pc, #276]	; (8002f6c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002e56:	e000      	b.n	8002e5a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002e58:	4b45      	ldr	r3, [pc, #276]	; (8002f70 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002e5a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d039      	beq.n	8002ed8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	431a      	orrs	r2, r3
 8002e72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e74:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a3a      	ldr	r2, [pc, #232]	; (8002f64 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d004      	beq.n	8002e8a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a38      	ldr	r2, [pc, #224]	; (8002f68 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d10e      	bne.n	8002ea8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002e8a:	4836      	ldr	r0, [pc, #216]	; (8002f64 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002e8c:	f7ff ff40 	bl	8002d10 <LL_ADC_IsEnabled>
 8002e90:	4604      	mov	r4, r0
 8002e92:	4835      	ldr	r0, [pc, #212]	; (8002f68 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002e94:	f7ff ff3c 	bl	8002d10 <LL_ADC_IsEnabled>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	4323      	orrs	r3, r4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	bf0c      	ite	eq
 8002ea0:	2301      	moveq	r3, #1
 8002ea2:	2300      	movne	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	e008      	b.n	8002eba <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002ea8:	4832      	ldr	r0, [pc, #200]	; (8002f74 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002eaa:	f7ff ff31 	bl	8002d10 <LL_ADC_IsEnabled>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	bf0c      	ite	eq
 8002eb4:	2301      	moveq	r3, #1
 8002eb6:	2300      	movne	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d047      	beq.n	8002f4e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ec0:	689a      	ldr	r2, [r3, #8]
 8002ec2:	4b2d      	ldr	r3, [pc, #180]	; (8002f78 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	6811      	ldr	r1, [r2, #0]
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	6892      	ldr	r2, [r2, #8]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ed6:	e03a      	b.n	8002f4e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ee2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a1e      	ldr	r2, [pc, #120]	; (8002f64 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d004      	beq.n	8002ef8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a1d      	ldr	r2, [pc, #116]	; (8002f68 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d10e      	bne.n	8002f16 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002ef8:	481a      	ldr	r0, [pc, #104]	; (8002f64 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002efa:	f7ff ff09 	bl	8002d10 <LL_ADC_IsEnabled>
 8002efe:	4604      	mov	r4, r0
 8002f00:	4819      	ldr	r0, [pc, #100]	; (8002f68 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002f02:	f7ff ff05 	bl	8002d10 <LL_ADC_IsEnabled>
 8002f06:	4603      	mov	r3, r0
 8002f08:	4323      	orrs	r3, r4
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	bf0c      	ite	eq
 8002f0e:	2301      	moveq	r3, #1
 8002f10:	2300      	movne	r3, #0
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	e008      	b.n	8002f28 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002f16:	4817      	ldr	r0, [pc, #92]	; (8002f74 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002f18:	f7ff fefa 	bl	8002d10 <LL_ADC_IsEnabled>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	bf0c      	ite	eq
 8002f22:	2301      	moveq	r3, #1
 8002f24:	2300      	movne	r3, #0
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d010      	beq.n	8002f4e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	4b11      	ldr	r3, [pc, #68]	; (8002f78 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002f32:	4013      	ands	r3, r2
 8002f34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f36:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f38:	e009      	b.n	8002f4e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3e:	f043 0220 	orr.w	r2, r3, #32
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002f4c:	e000      	b.n	8002f50 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f4e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f58:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	377c      	adds	r7, #124	; 0x7c
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd90      	pop	{r4, r7, pc}
 8002f64:	40022000 	.word	0x40022000
 8002f68:	40022100 	.word	0x40022100
 8002f6c:	40022300 	.word	0x40022300
 8002f70:	58026300 	.word	0x58026300
 8002f74:	58026000 	.word	0x58026000
 8002f78:	fffff0e0 	.word	0xfffff0e0

08002f7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f8c:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <__NVIC_SetPriorityGrouping+0x40>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f98:	4013      	ands	r3, r2
 8002f9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002fa4:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002faa:	4a04      	ldr	r2, [pc, #16]	; (8002fbc <__NVIC_SetPriorityGrouping+0x40>)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	60d3      	str	r3, [r2, #12]
}
 8002fb0:	bf00      	nop
 8002fb2:	3714      	adds	r7, #20
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	e000ed00 	.word	0xe000ed00
 8002fc0:	05fa0000 	.word	0x05fa0000

08002fc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fc8:	4b04      	ldr	r3, [pc, #16]	; (8002fdc <__NVIC_GetPriorityGrouping+0x18>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	0a1b      	lsrs	r3, r3, #8
 8002fce:	f003 0307 	and.w	r3, r3, #7
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	e000ed00 	.word	0xe000ed00

08002fe0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002fea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	db0b      	blt.n	800300a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ff2:	88fb      	ldrh	r3, [r7, #6]
 8002ff4:	f003 021f 	and.w	r2, r3, #31
 8002ff8:	4907      	ldr	r1, [pc, #28]	; (8003018 <__NVIC_EnableIRQ+0x38>)
 8002ffa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ffe:	095b      	lsrs	r3, r3, #5
 8003000:	2001      	movs	r0, #1
 8003002:	fa00 f202 	lsl.w	r2, r0, r2
 8003006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	e000e100 	.word	0xe000e100

0800301c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	6039      	str	r1, [r7, #0]
 8003026:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003028:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800302c:	2b00      	cmp	r3, #0
 800302e:	db0a      	blt.n	8003046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	b2da      	uxtb	r2, r3
 8003034:	490c      	ldr	r1, [pc, #48]	; (8003068 <__NVIC_SetPriority+0x4c>)
 8003036:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800303a:	0112      	lsls	r2, r2, #4
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	440b      	add	r3, r1
 8003040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003044:	e00a      	b.n	800305c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	b2da      	uxtb	r2, r3
 800304a:	4908      	ldr	r1, [pc, #32]	; (800306c <__NVIC_SetPriority+0x50>)
 800304c:	88fb      	ldrh	r3, [r7, #6]
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	3b04      	subs	r3, #4
 8003054:	0112      	lsls	r2, r2, #4
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	440b      	add	r3, r1
 800305a:	761a      	strb	r2, [r3, #24]
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	e000e100 	.word	0xe000e100
 800306c:	e000ed00 	.word	0xe000ed00

08003070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003070:	b480      	push	{r7}
 8003072:	b089      	sub	sp, #36	; 0x24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	f1c3 0307 	rsb	r3, r3, #7
 800308a:	2b04      	cmp	r3, #4
 800308c:	bf28      	it	cs
 800308e:	2304      	movcs	r3, #4
 8003090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	3304      	adds	r3, #4
 8003096:	2b06      	cmp	r3, #6
 8003098:	d902      	bls.n	80030a0 <NVIC_EncodePriority+0x30>
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	3b03      	subs	r3, #3
 800309e:	e000      	b.n	80030a2 <NVIC_EncodePriority+0x32>
 80030a0:	2300      	movs	r3, #0
 80030a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43da      	mvns	r2, r3
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	401a      	ands	r2, r3
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	fa01 f303 	lsl.w	r3, r1, r3
 80030c2:	43d9      	mvns	r1, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c8:	4313      	orrs	r3, r2
         );
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3724      	adds	r7, #36	; 0x24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
	...

080030d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3b01      	subs	r3, #1
 80030e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030e8:	d301      	bcc.n	80030ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030ea:	2301      	movs	r3, #1
 80030ec:	e00f      	b.n	800310e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030ee:	4a0a      	ldr	r2, [pc, #40]	; (8003118 <SysTick_Config+0x40>)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030f6:	210f      	movs	r1, #15
 80030f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030fc:	f7ff ff8e 	bl	800301c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003100:	4b05      	ldr	r3, [pc, #20]	; (8003118 <SysTick_Config+0x40>)
 8003102:	2200      	movs	r2, #0
 8003104:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003106:	4b04      	ldr	r3, [pc, #16]	; (8003118 <SysTick_Config+0x40>)
 8003108:	2207      	movs	r2, #7
 800310a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	e000e010 	.word	0xe000e010

0800311c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f7ff ff29 	bl	8002f7c <__NVIC_SetPriorityGrouping>
}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b086      	sub	sp, #24
 8003136:	af00      	add	r7, sp, #0
 8003138:	4603      	mov	r3, r0
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	607a      	str	r2, [r7, #4]
 800313e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003140:	f7ff ff40 	bl	8002fc4 <__NVIC_GetPriorityGrouping>
 8003144:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	68b9      	ldr	r1, [r7, #8]
 800314a:	6978      	ldr	r0, [r7, #20]
 800314c:	f7ff ff90 	bl	8003070 <NVIC_EncodePriority>
 8003150:	4602      	mov	r2, r0
 8003152:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003156:	4611      	mov	r1, r2
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff ff5f 	bl	800301c <__NVIC_SetPriority>
}
 800315e:	bf00      	nop
 8003160:	3718      	adds	r7, #24
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b082      	sub	sp, #8
 800316a:	af00      	add	r7, sp, #0
 800316c:	4603      	mov	r3, r0
 800316e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003170:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff ff33 	bl	8002fe0 <__NVIC_EnableIRQ>
}
 800317a:	bf00      	nop
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b082      	sub	sp, #8
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7ff ffa4 	bl	80030d8 <SysTick_Config>
 8003190:	4603      	mov	r3, r0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
	...

0800319c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80031a4:	f7fe f92e 	bl	8001404 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e316      	b.n	80037e2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a66      	ldr	r2, [pc, #408]	; (8003354 <HAL_DMA_Init+0x1b8>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d04a      	beq.n	8003254 <HAL_DMA_Init+0xb8>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a65      	ldr	r2, [pc, #404]	; (8003358 <HAL_DMA_Init+0x1bc>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d045      	beq.n	8003254 <HAL_DMA_Init+0xb8>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a63      	ldr	r2, [pc, #396]	; (800335c <HAL_DMA_Init+0x1c0>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d040      	beq.n	8003254 <HAL_DMA_Init+0xb8>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a62      	ldr	r2, [pc, #392]	; (8003360 <HAL_DMA_Init+0x1c4>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d03b      	beq.n	8003254 <HAL_DMA_Init+0xb8>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a60      	ldr	r2, [pc, #384]	; (8003364 <HAL_DMA_Init+0x1c8>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d036      	beq.n	8003254 <HAL_DMA_Init+0xb8>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a5f      	ldr	r2, [pc, #380]	; (8003368 <HAL_DMA_Init+0x1cc>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d031      	beq.n	8003254 <HAL_DMA_Init+0xb8>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a5d      	ldr	r2, [pc, #372]	; (800336c <HAL_DMA_Init+0x1d0>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d02c      	beq.n	8003254 <HAL_DMA_Init+0xb8>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a5c      	ldr	r2, [pc, #368]	; (8003370 <HAL_DMA_Init+0x1d4>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d027      	beq.n	8003254 <HAL_DMA_Init+0xb8>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a5a      	ldr	r2, [pc, #360]	; (8003374 <HAL_DMA_Init+0x1d8>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d022      	beq.n	8003254 <HAL_DMA_Init+0xb8>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a59      	ldr	r2, [pc, #356]	; (8003378 <HAL_DMA_Init+0x1dc>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d01d      	beq.n	8003254 <HAL_DMA_Init+0xb8>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a57      	ldr	r2, [pc, #348]	; (800337c <HAL_DMA_Init+0x1e0>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d018      	beq.n	8003254 <HAL_DMA_Init+0xb8>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a56      	ldr	r2, [pc, #344]	; (8003380 <HAL_DMA_Init+0x1e4>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d013      	beq.n	8003254 <HAL_DMA_Init+0xb8>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a54      	ldr	r2, [pc, #336]	; (8003384 <HAL_DMA_Init+0x1e8>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d00e      	beq.n	8003254 <HAL_DMA_Init+0xb8>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a53      	ldr	r2, [pc, #332]	; (8003388 <HAL_DMA_Init+0x1ec>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d009      	beq.n	8003254 <HAL_DMA_Init+0xb8>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a51      	ldr	r2, [pc, #324]	; (800338c <HAL_DMA_Init+0x1f0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d004      	beq.n	8003254 <HAL_DMA_Init+0xb8>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a50      	ldr	r2, [pc, #320]	; (8003390 <HAL_DMA_Init+0x1f4>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d101      	bne.n	8003258 <HAL_DMA_Init+0xbc>
 8003254:	2301      	movs	r3, #1
 8003256:	e000      	b.n	800325a <HAL_DMA_Init+0xbe>
 8003258:	2300      	movs	r3, #0
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 813b 	beq.w	80034d6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a37      	ldr	r2, [pc, #220]	; (8003354 <HAL_DMA_Init+0x1b8>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d04a      	beq.n	8003310 <HAL_DMA_Init+0x174>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a36      	ldr	r2, [pc, #216]	; (8003358 <HAL_DMA_Init+0x1bc>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d045      	beq.n	8003310 <HAL_DMA_Init+0x174>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a34      	ldr	r2, [pc, #208]	; (800335c <HAL_DMA_Init+0x1c0>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d040      	beq.n	8003310 <HAL_DMA_Init+0x174>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a33      	ldr	r2, [pc, #204]	; (8003360 <HAL_DMA_Init+0x1c4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d03b      	beq.n	8003310 <HAL_DMA_Init+0x174>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a31      	ldr	r2, [pc, #196]	; (8003364 <HAL_DMA_Init+0x1c8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d036      	beq.n	8003310 <HAL_DMA_Init+0x174>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a30      	ldr	r2, [pc, #192]	; (8003368 <HAL_DMA_Init+0x1cc>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d031      	beq.n	8003310 <HAL_DMA_Init+0x174>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a2e      	ldr	r2, [pc, #184]	; (800336c <HAL_DMA_Init+0x1d0>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d02c      	beq.n	8003310 <HAL_DMA_Init+0x174>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a2d      	ldr	r2, [pc, #180]	; (8003370 <HAL_DMA_Init+0x1d4>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d027      	beq.n	8003310 <HAL_DMA_Init+0x174>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a2b      	ldr	r2, [pc, #172]	; (8003374 <HAL_DMA_Init+0x1d8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d022      	beq.n	8003310 <HAL_DMA_Init+0x174>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a2a      	ldr	r2, [pc, #168]	; (8003378 <HAL_DMA_Init+0x1dc>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d01d      	beq.n	8003310 <HAL_DMA_Init+0x174>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a28      	ldr	r2, [pc, #160]	; (800337c <HAL_DMA_Init+0x1e0>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d018      	beq.n	8003310 <HAL_DMA_Init+0x174>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a27      	ldr	r2, [pc, #156]	; (8003380 <HAL_DMA_Init+0x1e4>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d013      	beq.n	8003310 <HAL_DMA_Init+0x174>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a25      	ldr	r2, [pc, #148]	; (8003384 <HAL_DMA_Init+0x1e8>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d00e      	beq.n	8003310 <HAL_DMA_Init+0x174>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a24      	ldr	r2, [pc, #144]	; (8003388 <HAL_DMA_Init+0x1ec>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d009      	beq.n	8003310 <HAL_DMA_Init+0x174>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a22      	ldr	r2, [pc, #136]	; (800338c <HAL_DMA_Init+0x1f0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d004      	beq.n	8003310 <HAL_DMA_Init+0x174>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a21      	ldr	r2, [pc, #132]	; (8003390 <HAL_DMA_Init+0x1f4>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d108      	bne.n	8003322 <HAL_DMA_Init+0x186>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0201 	bic.w	r2, r2, #1
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	e007      	b.n	8003332 <HAL_DMA_Init+0x196>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 0201 	bic.w	r2, r2, #1
 8003330:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003332:	e02f      	b.n	8003394 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003334:	f7fe f866 	bl	8001404 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b05      	cmp	r3, #5
 8003340:	d928      	bls.n	8003394 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2220      	movs	r2, #32
 8003346:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2203      	movs	r2, #3
 800334c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e246      	b.n	80037e2 <HAL_DMA_Init+0x646>
 8003354:	40020010 	.word	0x40020010
 8003358:	40020028 	.word	0x40020028
 800335c:	40020040 	.word	0x40020040
 8003360:	40020058 	.word	0x40020058
 8003364:	40020070 	.word	0x40020070
 8003368:	40020088 	.word	0x40020088
 800336c:	400200a0 	.word	0x400200a0
 8003370:	400200b8 	.word	0x400200b8
 8003374:	40020410 	.word	0x40020410
 8003378:	40020428 	.word	0x40020428
 800337c:	40020440 	.word	0x40020440
 8003380:	40020458 	.word	0x40020458
 8003384:	40020470 	.word	0x40020470
 8003388:	40020488 	.word	0x40020488
 800338c:	400204a0 	.word	0x400204a0
 8003390:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1c8      	bne.n	8003334 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	4b83      	ldr	r3, [pc, #524]	; (80035bc <HAL_DMA_Init+0x420>)
 80033ae:	4013      	ands	r3, r2
 80033b0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80033ba:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033c6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033d2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	4313      	orrs	r3, r2
 80033de:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	2b04      	cmp	r3, #4
 80033e6:	d107      	bne.n	80033f8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	4313      	orrs	r3, r2
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80033f8:	4b71      	ldr	r3, [pc, #452]	; (80035c0 <HAL_DMA_Init+0x424>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	4b71      	ldr	r3, [pc, #452]	; (80035c4 <HAL_DMA_Init+0x428>)
 80033fe:	4013      	ands	r3, r2
 8003400:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003404:	d328      	bcc.n	8003458 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b28      	cmp	r3, #40	; 0x28
 800340c:	d903      	bls.n	8003416 <HAL_DMA_Init+0x27a>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b2e      	cmp	r3, #46	; 0x2e
 8003414:	d917      	bls.n	8003446 <HAL_DMA_Init+0x2aa>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2b3e      	cmp	r3, #62	; 0x3e
 800341c:	d903      	bls.n	8003426 <HAL_DMA_Init+0x28a>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b42      	cmp	r3, #66	; 0x42
 8003424:	d90f      	bls.n	8003446 <HAL_DMA_Init+0x2aa>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b46      	cmp	r3, #70	; 0x46
 800342c:	d903      	bls.n	8003436 <HAL_DMA_Init+0x29a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b48      	cmp	r3, #72	; 0x48
 8003434:	d907      	bls.n	8003446 <HAL_DMA_Init+0x2aa>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b4e      	cmp	r3, #78	; 0x4e
 800343c:	d905      	bls.n	800344a <HAL_DMA_Init+0x2ae>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b52      	cmp	r3, #82	; 0x52
 8003444:	d801      	bhi.n	800344a <HAL_DMA_Init+0x2ae>
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <HAL_DMA_Init+0x2b0>
 800344a:	2300      	movs	r3, #0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003456:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f023 0307 	bic.w	r3, r3, #7
 800346e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	4313      	orrs	r3, r2
 8003478:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	2b04      	cmp	r3, #4
 8003480:	d117      	bne.n	80034b2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	4313      	orrs	r3, r2
 800348a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00e      	beq.n	80034b2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f001 fdcf 	bl	8005038 <DMA_CheckFifoParam>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d008      	beq.n	80034b2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2240      	movs	r2, #64	; 0x40
 80034a4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e197      	b.n	80037e2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f001 fd0a 	bl	8004ed4 <DMA_CalcBaseAndBitshift>
 80034c0:	4603      	mov	r3, r0
 80034c2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c8:	f003 031f 	and.w	r3, r3, #31
 80034cc:	223f      	movs	r2, #63	; 0x3f
 80034ce:	409a      	lsls	r2, r3
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	609a      	str	r2, [r3, #8]
 80034d4:	e0cd      	b.n	8003672 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a3b      	ldr	r2, [pc, #236]	; (80035c8 <HAL_DMA_Init+0x42c>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d022      	beq.n	8003526 <HAL_DMA_Init+0x38a>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a39      	ldr	r2, [pc, #228]	; (80035cc <HAL_DMA_Init+0x430>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d01d      	beq.n	8003526 <HAL_DMA_Init+0x38a>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a38      	ldr	r2, [pc, #224]	; (80035d0 <HAL_DMA_Init+0x434>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d018      	beq.n	8003526 <HAL_DMA_Init+0x38a>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a36      	ldr	r2, [pc, #216]	; (80035d4 <HAL_DMA_Init+0x438>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d013      	beq.n	8003526 <HAL_DMA_Init+0x38a>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a35      	ldr	r2, [pc, #212]	; (80035d8 <HAL_DMA_Init+0x43c>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d00e      	beq.n	8003526 <HAL_DMA_Init+0x38a>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a33      	ldr	r2, [pc, #204]	; (80035dc <HAL_DMA_Init+0x440>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d009      	beq.n	8003526 <HAL_DMA_Init+0x38a>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a32      	ldr	r2, [pc, #200]	; (80035e0 <HAL_DMA_Init+0x444>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d004      	beq.n	8003526 <HAL_DMA_Init+0x38a>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a30      	ldr	r2, [pc, #192]	; (80035e4 <HAL_DMA_Init+0x448>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d101      	bne.n	800352a <HAL_DMA_Init+0x38e>
 8003526:	2301      	movs	r3, #1
 8003528:	e000      	b.n	800352c <HAL_DMA_Init+0x390>
 800352a:	2300      	movs	r3, #0
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 8097 	beq.w	8003660 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a24      	ldr	r2, [pc, #144]	; (80035c8 <HAL_DMA_Init+0x42c>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d021      	beq.n	8003580 <HAL_DMA_Init+0x3e4>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a22      	ldr	r2, [pc, #136]	; (80035cc <HAL_DMA_Init+0x430>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d01c      	beq.n	8003580 <HAL_DMA_Init+0x3e4>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a21      	ldr	r2, [pc, #132]	; (80035d0 <HAL_DMA_Init+0x434>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d017      	beq.n	8003580 <HAL_DMA_Init+0x3e4>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a1f      	ldr	r2, [pc, #124]	; (80035d4 <HAL_DMA_Init+0x438>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d012      	beq.n	8003580 <HAL_DMA_Init+0x3e4>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a1e      	ldr	r2, [pc, #120]	; (80035d8 <HAL_DMA_Init+0x43c>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d00d      	beq.n	8003580 <HAL_DMA_Init+0x3e4>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a1c      	ldr	r2, [pc, #112]	; (80035dc <HAL_DMA_Init+0x440>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d008      	beq.n	8003580 <HAL_DMA_Init+0x3e4>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a1b      	ldr	r2, [pc, #108]	; (80035e0 <HAL_DMA_Init+0x444>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d003      	beq.n	8003580 <HAL_DMA_Init+0x3e4>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a19      	ldr	r2, [pc, #100]	; (80035e4 <HAL_DMA_Init+0x448>)
 800357e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	4b13      	ldr	r3, [pc, #76]	; (80035e8 <HAL_DMA_Init+0x44c>)
 800359c:	4013      	ands	r3, r2
 800359e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	2b40      	cmp	r3, #64	; 0x40
 80035a6:	d021      	beq.n	80035ec <HAL_DMA_Init+0x450>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	2b80      	cmp	r3, #128	; 0x80
 80035ae:	d102      	bne.n	80035b6 <HAL_DMA_Init+0x41a>
 80035b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80035b4:	e01b      	b.n	80035ee <HAL_DMA_Init+0x452>
 80035b6:	2300      	movs	r3, #0
 80035b8:	e019      	b.n	80035ee <HAL_DMA_Init+0x452>
 80035ba:	bf00      	nop
 80035bc:	fe10803f 	.word	0xfe10803f
 80035c0:	5c001000 	.word	0x5c001000
 80035c4:	ffff0000 	.word	0xffff0000
 80035c8:	58025408 	.word	0x58025408
 80035cc:	5802541c 	.word	0x5802541c
 80035d0:	58025430 	.word	0x58025430
 80035d4:	58025444 	.word	0x58025444
 80035d8:	58025458 	.word	0x58025458
 80035dc:	5802546c 	.word	0x5802546c
 80035e0:	58025480 	.word	0x58025480
 80035e4:	58025494 	.word	0x58025494
 80035e8:	fffe000f 	.word	0xfffe000f
 80035ec:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	68d2      	ldr	r2, [r2, #12]
 80035f2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80035fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003604:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800360c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003614:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800361c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	4313      	orrs	r3, r2
 8003622:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	461a      	mov	r2, r3
 8003632:	4b6e      	ldr	r3, [pc, #440]	; (80037ec <HAL_DMA_Init+0x650>)
 8003634:	4413      	add	r3, r2
 8003636:	4a6e      	ldr	r2, [pc, #440]	; (80037f0 <HAL_DMA_Init+0x654>)
 8003638:	fba2 2303 	umull	r2, r3, r2, r3
 800363c:	091b      	lsrs	r3, r3, #4
 800363e:	009a      	lsls	r2, r3, #2
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f001 fc45 	bl	8004ed4 <DMA_CalcBaseAndBitshift>
 800364a:	4603      	mov	r3, r0
 800364c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003652:	f003 031f 	and.w	r3, r3, #31
 8003656:	2201      	movs	r2, #1
 8003658:	409a      	lsls	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	605a      	str	r2, [r3, #4]
 800365e:	e008      	b.n	8003672 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2240      	movs	r2, #64	; 0x40
 8003664:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2203      	movs	r2, #3
 800366a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e0b7      	b.n	80037e2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a5f      	ldr	r2, [pc, #380]	; (80037f4 <HAL_DMA_Init+0x658>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d072      	beq.n	8003762 <HAL_DMA_Init+0x5c6>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a5d      	ldr	r2, [pc, #372]	; (80037f8 <HAL_DMA_Init+0x65c>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d06d      	beq.n	8003762 <HAL_DMA_Init+0x5c6>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a5c      	ldr	r2, [pc, #368]	; (80037fc <HAL_DMA_Init+0x660>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d068      	beq.n	8003762 <HAL_DMA_Init+0x5c6>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a5a      	ldr	r2, [pc, #360]	; (8003800 <HAL_DMA_Init+0x664>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d063      	beq.n	8003762 <HAL_DMA_Init+0x5c6>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a59      	ldr	r2, [pc, #356]	; (8003804 <HAL_DMA_Init+0x668>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d05e      	beq.n	8003762 <HAL_DMA_Init+0x5c6>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a57      	ldr	r2, [pc, #348]	; (8003808 <HAL_DMA_Init+0x66c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d059      	beq.n	8003762 <HAL_DMA_Init+0x5c6>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a56      	ldr	r2, [pc, #344]	; (800380c <HAL_DMA_Init+0x670>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d054      	beq.n	8003762 <HAL_DMA_Init+0x5c6>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a54      	ldr	r2, [pc, #336]	; (8003810 <HAL_DMA_Init+0x674>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d04f      	beq.n	8003762 <HAL_DMA_Init+0x5c6>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a53      	ldr	r2, [pc, #332]	; (8003814 <HAL_DMA_Init+0x678>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d04a      	beq.n	8003762 <HAL_DMA_Init+0x5c6>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a51      	ldr	r2, [pc, #324]	; (8003818 <HAL_DMA_Init+0x67c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d045      	beq.n	8003762 <HAL_DMA_Init+0x5c6>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a50      	ldr	r2, [pc, #320]	; (800381c <HAL_DMA_Init+0x680>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d040      	beq.n	8003762 <HAL_DMA_Init+0x5c6>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a4e      	ldr	r2, [pc, #312]	; (8003820 <HAL_DMA_Init+0x684>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d03b      	beq.n	8003762 <HAL_DMA_Init+0x5c6>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a4d      	ldr	r2, [pc, #308]	; (8003824 <HAL_DMA_Init+0x688>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d036      	beq.n	8003762 <HAL_DMA_Init+0x5c6>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a4b      	ldr	r2, [pc, #300]	; (8003828 <HAL_DMA_Init+0x68c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d031      	beq.n	8003762 <HAL_DMA_Init+0x5c6>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a4a      	ldr	r2, [pc, #296]	; (800382c <HAL_DMA_Init+0x690>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d02c      	beq.n	8003762 <HAL_DMA_Init+0x5c6>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a48      	ldr	r2, [pc, #288]	; (8003830 <HAL_DMA_Init+0x694>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d027      	beq.n	8003762 <HAL_DMA_Init+0x5c6>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a47      	ldr	r2, [pc, #284]	; (8003834 <HAL_DMA_Init+0x698>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d022      	beq.n	8003762 <HAL_DMA_Init+0x5c6>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a45      	ldr	r2, [pc, #276]	; (8003838 <HAL_DMA_Init+0x69c>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d01d      	beq.n	8003762 <HAL_DMA_Init+0x5c6>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a44      	ldr	r2, [pc, #272]	; (800383c <HAL_DMA_Init+0x6a0>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d018      	beq.n	8003762 <HAL_DMA_Init+0x5c6>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a42      	ldr	r2, [pc, #264]	; (8003840 <HAL_DMA_Init+0x6a4>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d013      	beq.n	8003762 <HAL_DMA_Init+0x5c6>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a41      	ldr	r2, [pc, #260]	; (8003844 <HAL_DMA_Init+0x6a8>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d00e      	beq.n	8003762 <HAL_DMA_Init+0x5c6>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a3f      	ldr	r2, [pc, #252]	; (8003848 <HAL_DMA_Init+0x6ac>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d009      	beq.n	8003762 <HAL_DMA_Init+0x5c6>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a3e      	ldr	r2, [pc, #248]	; (800384c <HAL_DMA_Init+0x6b0>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d004      	beq.n	8003762 <HAL_DMA_Init+0x5c6>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a3c      	ldr	r2, [pc, #240]	; (8003850 <HAL_DMA_Init+0x6b4>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d101      	bne.n	8003766 <HAL_DMA_Init+0x5ca>
 8003762:	2301      	movs	r3, #1
 8003764:	e000      	b.n	8003768 <HAL_DMA_Init+0x5cc>
 8003766:	2300      	movs	r3, #0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d032      	beq.n	80037d2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f001 fcdf 	bl	8005130 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	2b80      	cmp	r3, #128	; 0x80
 8003778:	d102      	bne.n	8003780 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003788:	b2d2      	uxtb	r2, r2
 800378a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003794:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d010      	beq.n	80037c0 <HAL_DMA_Init+0x624>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	2b08      	cmp	r3, #8
 80037a4:	d80c      	bhi.n	80037c0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f001 fd5c 	bl	8005264 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037b0:	2200      	movs	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80037bc:	605a      	str	r2, [r3, #4]
 80037be:	e008      	b.n	80037d2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3718      	adds	r7, #24
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	a7fdabf8 	.word	0xa7fdabf8
 80037f0:	cccccccd 	.word	0xcccccccd
 80037f4:	40020010 	.word	0x40020010
 80037f8:	40020028 	.word	0x40020028
 80037fc:	40020040 	.word	0x40020040
 8003800:	40020058 	.word	0x40020058
 8003804:	40020070 	.word	0x40020070
 8003808:	40020088 	.word	0x40020088
 800380c:	400200a0 	.word	0x400200a0
 8003810:	400200b8 	.word	0x400200b8
 8003814:	40020410 	.word	0x40020410
 8003818:	40020428 	.word	0x40020428
 800381c:	40020440 	.word	0x40020440
 8003820:	40020458 	.word	0x40020458
 8003824:	40020470 	.word	0x40020470
 8003828:	40020488 	.word	0x40020488
 800382c:	400204a0 	.word	0x400204a0
 8003830:	400204b8 	.word	0x400204b8
 8003834:	58025408 	.word	0x58025408
 8003838:	5802541c 	.word	0x5802541c
 800383c:	58025430 	.word	0x58025430
 8003840:	58025444 	.word	0x58025444
 8003844:	58025458 	.word	0x58025458
 8003848:	5802546c 	.word	0x5802546c
 800384c:	58025480 	.word	0x58025480
 8003850:	58025494 	.word	0x58025494

08003854 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
 8003860:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003862:	2300      	movs	r3, #0
 8003864:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d101      	bne.n	8003870 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e226      	b.n	8003cbe <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003876:	2b01      	cmp	r3, #1
 8003878:	d101      	bne.n	800387e <HAL_DMA_Start_IT+0x2a>
 800387a:	2302      	movs	r3, #2
 800387c:	e21f      	b.n	8003cbe <HAL_DMA_Start_IT+0x46a>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b01      	cmp	r3, #1
 8003890:	f040 820a 	bne.w	8003ca8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2202      	movs	r2, #2
 8003898:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a68      	ldr	r2, [pc, #416]	; (8003a48 <HAL_DMA_Start_IT+0x1f4>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d04a      	beq.n	8003942 <HAL_DMA_Start_IT+0xee>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a66      	ldr	r2, [pc, #408]	; (8003a4c <HAL_DMA_Start_IT+0x1f8>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d045      	beq.n	8003942 <HAL_DMA_Start_IT+0xee>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a65      	ldr	r2, [pc, #404]	; (8003a50 <HAL_DMA_Start_IT+0x1fc>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d040      	beq.n	8003942 <HAL_DMA_Start_IT+0xee>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a63      	ldr	r2, [pc, #396]	; (8003a54 <HAL_DMA_Start_IT+0x200>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d03b      	beq.n	8003942 <HAL_DMA_Start_IT+0xee>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a62      	ldr	r2, [pc, #392]	; (8003a58 <HAL_DMA_Start_IT+0x204>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d036      	beq.n	8003942 <HAL_DMA_Start_IT+0xee>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a60      	ldr	r2, [pc, #384]	; (8003a5c <HAL_DMA_Start_IT+0x208>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d031      	beq.n	8003942 <HAL_DMA_Start_IT+0xee>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a5f      	ldr	r2, [pc, #380]	; (8003a60 <HAL_DMA_Start_IT+0x20c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d02c      	beq.n	8003942 <HAL_DMA_Start_IT+0xee>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a5d      	ldr	r2, [pc, #372]	; (8003a64 <HAL_DMA_Start_IT+0x210>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d027      	beq.n	8003942 <HAL_DMA_Start_IT+0xee>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a5c      	ldr	r2, [pc, #368]	; (8003a68 <HAL_DMA_Start_IT+0x214>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d022      	beq.n	8003942 <HAL_DMA_Start_IT+0xee>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a5a      	ldr	r2, [pc, #360]	; (8003a6c <HAL_DMA_Start_IT+0x218>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d01d      	beq.n	8003942 <HAL_DMA_Start_IT+0xee>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a59      	ldr	r2, [pc, #356]	; (8003a70 <HAL_DMA_Start_IT+0x21c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d018      	beq.n	8003942 <HAL_DMA_Start_IT+0xee>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a57      	ldr	r2, [pc, #348]	; (8003a74 <HAL_DMA_Start_IT+0x220>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d013      	beq.n	8003942 <HAL_DMA_Start_IT+0xee>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a56      	ldr	r2, [pc, #344]	; (8003a78 <HAL_DMA_Start_IT+0x224>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d00e      	beq.n	8003942 <HAL_DMA_Start_IT+0xee>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a54      	ldr	r2, [pc, #336]	; (8003a7c <HAL_DMA_Start_IT+0x228>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d009      	beq.n	8003942 <HAL_DMA_Start_IT+0xee>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a53      	ldr	r2, [pc, #332]	; (8003a80 <HAL_DMA_Start_IT+0x22c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d004      	beq.n	8003942 <HAL_DMA_Start_IT+0xee>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a51      	ldr	r2, [pc, #324]	; (8003a84 <HAL_DMA_Start_IT+0x230>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d108      	bne.n	8003954 <HAL_DMA_Start_IT+0x100>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0201 	bic.w	r2, r2, #1
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	e007      	b.n	8003964 <HAL_DMA_Start_IT+0x110>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0201 	bic.w	r2, r2, #1
 8003962:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	68b9      	ldr	r1, [r7, #8]
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f001 f906 	bl	8004b7c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a34      	ldr	r2, [pc, #208]	; (8003a48 <HAL_DMA_Start_IT+0x1f4>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d04a      	beq.n	8003a10 <HAL_DMA_Start_IT+0x1bc>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a33      	ldr	r2, [pc, #204]	; (8003a4c <HAL_DMA_Start_IT+0x1f8>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d045      	beq.n	8003a10 <HAL_DMA_Start_IT+0x1bc>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a31      	ldr	r2, [pc, #196]	; (8003a50 <HAL_DMA_Start_IT+0x1fc>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d040      	beq.n	8003a10 <HAL_DMA_Start_IT+0x1bc>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a30      	ldr	r2, [pc, #192]	; (8003a54 <HAL_DMA_Start_IT+0x200>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d03b      	beq.n	8003a10 <HAL_DMA_Start_IT+0x1bc>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a2e      	ldr	r2, [pc, #184]	; (8003a58 <HAL_DMA_Start_IT+0x204>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d036      	beq.n	8003a10 <HAL_DMA_Start_IT+0x1bc>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a2d      	ldr	r2, [pc, #180]	; (8003a5c <HAL_DMA_Start_IT+0x208>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d031      	beq.n	8003a10 <HAL_DMA_Start_IT+0x1bc>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a2b      	ldr	r2, [pc, #172]	; (8003a60 <HAL_DMA_Start_IT+0x20c>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d02c      	beq.n	8003a10 <HAL_DMA_Start_IT+0x1bc>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a2a      	ldr	r2, [pc, #168]	; (8003a64 <HAL_DMA_Start_IT+0x210>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d027      	beq.n	8003a10 <HAL_DMA_Start_IT+0x1bc>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a28      	ldr	r2, [pc, #160]	; (8003a68 <HAL_DMA_Start_IT+0x214>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d022      	beq.n	8003a10 <HAL_DMA_Start_IT+0x1bc>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a27      	ldr	r2, [pc, #156]	; (8003a6c <HAL_DMA_Start_IT+0x218>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d01d      	beq.n	8003a10 <HAL_DMA_Start_IT+0x1bc>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a25      	ldr	r2, [pc, #148]	; (8003a70 <HAL_DMA_Start_IT+0x21c>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d018      	beq.n	8003a10 <HAL_DMA_Start_IT+0x1bc>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a24      	ldr	r2, [pc, #144]	; (8003a74 <HAL_DMA_Start_IT+0x220>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d013      	beq.n	8003a10 <HAL_DMA_Start_IT+0x1bc>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a22      	ldr	r2, [pc, #136]	; (8003a78 <HAL_DMA_Start_IT+0x224>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d00e      	beq.n	8003a10 <HAL_DMA_Start_IT+0x1bc>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a21      	ldr	r2, [pc, #132]	; (8003a7c <HAL_DMA_Start_IT+0x228>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d009      	beq.n	8003a10 <HAL_DMA_Start_IT+0x1bc>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a1f      	ldr	r2, [pc, #124]	; (8003a80 <HAL_DMA_Start_IT+0x22c>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d004      	beq.n	8003a10 <HAL_DMA_Start_IT+0x1bc>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a1e      	ldr	r2, [pc, #120]	; (8003a84 <HAL_DMA_Start_IT+0x230>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d101      	bne.n	8003a14 <HAL_DMA_Start_IT+0x1c0>
 8003a10:	2301      	movs	r3, #1
 8003a12:	e000      	b.n	8003a16 <HAL_DMA_Start_IT+0x1c2>
 8003a14:	2300      	movs	r3, #0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d036      	beq.n	8003a88 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f023 021e 	bic.w	r2, r3, #30
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f042 0216 	orr.w	r2, r2, #22
 8003a2c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d03e      	beq.n	8003ab4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f042 0208 	orr.w	r2, r2, #8
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	e035      	b.n	8003ab4 <HAL_DMA_Start_IT+0x260>
 8003a48:	40020010 	.word	0x40020010
 8003a4c:	40020028 	.word	0x40020028
 8003a50:	40020040 	.word	0x40020040
 8003a54:	40020058 	.word	0x40020058
 8003a58:	40020070 	.word	0x40020070
 8003a5c:	40020088 	.word	0x40020088
 8003a60:	400200a0 	.word	0x400200a0
 8003a64:	400200b8 	.word	0x400200b8
 8003a68:	40020410 	.word	0x40020410
 8003a6c:	40020428 	.word	0x40020428
 8003a70:	40020440 	.word	0x40020440
 8003a74:	40020458 	.word	0x40020458
 8003a78:	40020470 	.word	0x40020470
 8003a7c:	40020488 	.word	0x40020488
 8003a80:	400204a0 	.word	0x400204a0
 8003a84:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f023 020e 	bic.w	r2, r3, #14
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 020a 	orr.w	r2, r2, #10
 8003a9a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d007      	beq.n	8003ab4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f042 0204 	orr.w	r2, r2, #4
 8003ab2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a83      	ldr	r2, [pc, #524]	; (8003cc8 <HAL_DMA_Start_IT+0x474>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d072      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x350>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a82      	ldr	r2, [pc, #520]	; (8003ccc <HAL_DMA_Start_IT+0x478>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d06d      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x350>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a80      	ldr	r2, [pc, #512]	; (8003cd0 <HAL_DMA_Start_IT+0x47c>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d068      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x350>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a7f      	ldr	r2, [pc, #508]	; (8003cd4 <HAL_DMA_Start_IT+0x480>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d063      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x350>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a7d      	ldr	r2, [pc, #500]	; (8003cd8 <HAL_DMA_Start_IT+0x484>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d05e      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x350>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a7c      	ldr	r2, [pc, #496]	; (8003cdc <HAL_DMA_Start_IT+0x488>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d059      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x350>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a7a      	ldr	r2, [pc, #488]	; (8003ce0 <HAL_DMA_Start_IT+0x48c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d054      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x350>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a79      	ldr	r2, [pc, #484]	; (8003ce4 <HAL_DMA_Start_IT+0x490>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d04f      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x350>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a77      	ldr	r2, [pc, #476]	; (8003ce8 <HAL_DMA_Start_IT+0x494>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d04a      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x350>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a76      	ldr	r2, [pc, #472]	; (8003cec <HAL_DMA_Start_IT+0x498>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d045      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x350>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a74      	ldr	r2, [pc, #464]	; (8003cf0 <HAL_DMA_Start_IT+0x49c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d040      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x350>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a73      	ldr	r2, [pc, #460]	; (8003cf4 <HAL_DMA_Start_IT+0x4a0>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d03b      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x350>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a71      	ldr	r2, [pc, #452]	; (8003cf8 <HAL_DMA_Start_IT+0x4a4>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d036      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x350>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a70      	ldr	r2, [pc, #448]	; (8003cfc <HAL_DMA_Start_IT+0x4a8>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d031      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x350>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a6e      	ldr	r2, [pc, #440]	; (8003d00 <HAL_DMA_Start_IT+0x4ac>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d02c      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x350>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a6d      	ldr	r2, [pc, #436]	; (8003d04 <HAL_DMA_Start_IT+0x4b0>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d027      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x350>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a6b      	ldr	r2, [pc, #428]	; (8003d08 <HAL_DMA_Start_IT+0x4b4>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d022      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x350>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a6a      	ldr	r2, [pc, #424]	; (8003d0c <HAL_DMA_Start_IT+0x4b8>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d01d      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x350>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a68      	ldr	r2, [pc, #416]	; (8003d10 <HAL_DMA_Start_IT+0x4bc>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d018      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x350>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a67      	ldr	r2, [pc, #412]	; (8003d14 <HAL_DMA_Start_IT+0x4c0>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d013      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x350>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a65      	ldr	r2, [pc, #404]	; (8003d18 <HAL_DMA_Start_IT+0x4c4>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d00e      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x350>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a64      	ldr	r2, [pc, #400]	; (8003d1c <HAL_DMA_Start_IT+0x4c8>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d009      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x350>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a62      	ldr	r2, [pc, #392]	; (8003d20 <HAL_DMA_Start_IT+0x4cc>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d004      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x350>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a61      	ldr	r2, [pc, #388]	; (8003d24 <HAL_DMA_Start_IT+0x4d0>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d101      	bne.n	8003ba8 <HAL_DMA_Start_IT+0x354>
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e000      	b.n	8003baa <HAL_DMA_Start_IT+0x356>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d01a      	beq.n	8003be4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d007      	beq.n	8003bcc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bca:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d007      	beq.n	8003be4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003be2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a37      	ldr	r2, [pc, #220]	; (8003cc8 <HAL_DMA_Start_IT+0x474>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d04a      	beq.n	8003c84 <HAL_DMA_Start_IT+0x430>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a36      	ldr	r2, [pc, #216]	; (8003ccc <HAL_DMA_Start_IT+0x478>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d045      	beq.n	8003c84 <HAL_DMA_Start_IT+0x430>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a34      	ldr	r2, [pc, #208]	; (8003cd0 <HAL_DMA_Start_IT+0x47c>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d040      	beq.n	8003c84 <HAL_DMA_Start_IT+0x430>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a33      	ldr	r2, [pc, #204]	; (8003cd4 <HAL_DMA_Start_IT+0x480>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d03b      	beq.n	8003c84 <HAL_DMA_Start_IT+0x430>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a31      	ldr	r2, [pc, #196]	; (8003cd8 <HAL_DMA_Start_IT+0x484>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d036      	beq.n	8003c84 <HAL_DMA_Start_IT+0x430>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a30      	ldr	r2, [pc, #192]	; (8003cdc <HAL_DMA_Start_IT+0x488>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d031      	beq.n	8003c84 <HAL_DMA_Start_IT+0x430>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a2e      	ldr	r2, [pc, #184]	; (8003ce0 <HAL_DMA_Start_IT+0x48c>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d02c      	beq.n	8003c84 <HAL_DMA_Start_IT+0x430>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a2d      	ldr	r2, [pc, #180]	; (8003ce4 <HAL_DMA_Start_IT+0x490>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d027      	beq.n	8003c84 <HAL_DMA_Start_IT+0x430>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a2b      	ldr	r2, [pc, #172]	; (8003ce8 <HAL_DMA_Start_IT+0x494>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d022      	beq.n	8003c84 <HAL_DMA_Start_IT+0x430>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a2a      	ldr	r2, [pc, #168]	; (8003cec <HAL_DMA_Start_IT+0x498>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d01d      	beq.n	8003c84 <HAL_DMA_Start_IT+0x430>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a28      	ldr	r2, [pc, #160]	; (8003cf0 <HAL_DMA_Start_IT+0x49c>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d018      	beq.n	8003c84 <HAL_DMA_Start_IT+0x430>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a27      	ldr	r2, [pc, #156]	; (8003cf4 <HAL_DMA_Start_IT+0x4a0>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d013      	beq.n	8003c84 <HAL_DMA_Start_IT+0x430>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a25      	ldr	r2, [pc, #148]	; (8003cf8 <HAL_DMA_Start_IT+0x4a4>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d00e      	beq.n	8003c84 <HAL_DMA_Start_IT+0x430>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a24      	ldr	r2, [pc, #144]	; (8003cfc <HAL_DMA_Start_IT+0x4a8>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d009      	beq.n	8003c84 <HAL_DMA_Start_IT+0x430>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a22      	ldr	r2, [pc, #136]	; (8003d00 <HAL_DMA_Start_IT+0x4ac>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d004      	beq.n	8003c84 <HAL_DMA_Start_IT+0x430>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a21      	ldr	r2, [pc, #132]	; (8003d04 <HAL_DMA_Start_IT+0x4b0>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d108      	bne.n	8003c96 <HAL_DMA_Start_IT+0x442>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f042 0201 	orr.w	r2, r2, #1
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	e012      	b.n	8003cbc <HAL_DMA_Start_IT+0x468>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f042 0201 	orr.w	r2, r2, #1
 8003ca4:	601a      	str	r2, [r3, #0]
 8003ca6:	e009      	b.n	8003cbc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3718      	adds	r7, #24
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	40020010 	.word	0x40020010
 8003ccc:	40020028 	.word	0x40020028
 8003cd0:	40020040 	.word	0x40020040
 8003cd4:	40020058 	.word	0x40020058
 8003cd8:	40020070 	.word	0x40020070
 8003cdc:	40020088 	.word	0x40020088
 8003ce0:	400200a0 	.word	0x400200a0
 8003ce4:	400200b8 	.word	0x400200b8
 8003ce8:	40020410 	.word	0x40020410
 8003cec:	40020428 	.word	0x40020428
 8003cf0:	40020440 	.word	0x40020440
 8003cf4:	40020458 	.word	0x40020458
 8003cf8:	40020470 	.word	0x40020470
 8003cfc:	40020488 	.word	0x40020488
 8003d00:	400204a0 	.word	0x400204a0
 8003d04:	400204b8 	.word	0x400204b8
 8003d08:	58025408 	.word	0x58025408
 8003d0c:	5802541c 	.word	0x5802541c
 8003d10:	58025430 	.word	0x58025430
 8003d14:	58025444 	.word	0x58025444
 8003d18:	58025458 	.word	0x58025458
 8003d1c:	5802546c 	.word	0x5802546c
 8003d20:	58025480 	.word	0x58025480
 8003d24:	58025494 	.word	0x58025494

08003d28 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b08a      	sub	sp, #40	; 0x28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d34:	4b67      	ldr	r3, [pc, #412]	; (8003ed4 <HAL_DMA_IRQHandler+0x1ac>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a67      	ldr	r2, [pc, #412]	; (8003ed8 <HAL_DMA_IRQHandler+0x1b0>)
 8003d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3e:	0a9b      	lsrs	r3, r3, #10
 8003d40:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d46:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a5f      	ldr	r2, [pc, #380]	; (8003edc <HAL_DMA_IRQHandler+0x1b4>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d04a      	beq.n	8003dfa <HAL_DMA_IRQHandler+0xd2>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a5d      	ldr	r2, [pc, #372]	; (8003ee0 <HAL_DMA_IRQHandler+0x1b8>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d045      	beq.n	8003dfa <HAL_DMA_IRQHandler+0xd2>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a5c      	ldr	r2, [pc, #368]	; (8003ee4 <HAL_DMA_IRQHandler+0x1bc>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d040      	beq.n	8003dfa <HAL_DMA_IRQHandler+0xd2>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a5a      	ldr	r2, [pc, #360]	; (8003ee8 <HAL_DMA_IRQHandler+0x1c0>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d03b      	beq.n	8003dfa <HAL_DMA_IRQHandler+0xd2>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a59      	ldr	r2, [pc, #356]	; (8003eec <HAL_DMA_IRQHandler+0x1c4>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d036      	beq.n	8003dfa <HAL_DMA_IRQHandler+0xd2>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a57      	ldr	r2, [pc, #348]	; (8003ef0 <HAL_DMA_IRQHandler+0x1c8>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d031      	beq.n	8003dfa <HAL_DMA_IRQHandler+0xd2>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a56      	ldr	r2, [pc, #344]	; (8003ef4 <HAL_DMA_IRQHandler+0x1cc>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d02c      	beq.n	8003dfa <HAL_DMA_IRQHandler+0xd2>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a54      	ldr	r2, [pc, #336]	; (8003ef8 <HAL_DMA_IRQHandler+0x1d0>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d027      	beq.n	8003dfa <HAL_DMA_IRQHandler+0xd2>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a53      	ldr	r2, [pc, #332]	; (8003efc <HAL_DMA_IRQHandler+0x1d4>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d022      	beq.n	8003dfa <HAL_DMA_IRQHandler+0xd2>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a51      	ldr	r2, [pc, #324]	; (8003f00 <HAL_DMA_IRQHandler+0x1d8>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d01d      	beq.n	8003dfa <HAL_DMA_IRQHandler+0xd2>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a50      	ldr	r2, [pc, #320]	; (8003f04 <HAL_DMA_IRQHandler+0x1dc>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d018      	beq.n	8003dfa <HAL_DMA_IRQHandler+0xd2>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a4e      	ldr	r2, [pc, #312]	; (8003f08 <HAL_DMA_IRQHandler+0x1e0>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d013      	beq.n	8003dfa <HAL_DMA_IRQHandler+0xd2>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a4d      	ldr	r2, [pc, #308]	; (8003f0c <HAL_DMA_IRQHandler+0x1e4>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d00e      	beq.n	8003dfa <HAL_DMA_IRQHandler+0xd2>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a4b      	ldr	r2, [pc, #300]	; (8003f10 <HAL_DMA_IRQHandler+0x1e8>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d009      	beq.n	8003dfa <HAL_DMA_IRQHandler+0xd2>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a4a      	ldr	r2, [pc, #296]	; (8003f14 <HAL_DMA_IRQHandler+0x1ec>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d004      	beq.n	8003dfa <HAL_DMA_IRQHandler+0xd2>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a48      	ldr	r2, [pc, #288]	; (8003f18 <HAL_DMA_IRQHandler+0x1f0>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d101      	bne.n	8003dfe <HAL_DMA_IRQHandler+0xd6>
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e000      	b.n	8003e00 <HAL_DMA_IRQHandler+0xd8>
 8003dfe:	2300      	movs	r3, #0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f000 842b 	beq.w	800465c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e0a:	f003 031f 	and.w	r3, r3, #31
 8003e0e:	2208      	movs	r2, #8
 8003e10:	409a      	lsls	r2, r3
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	4013      	ands	r3, r2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 80a2 	beq.w	8003f60 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a2e      	ldr	r2, [pc, #184]	; (8003edc <HAL_DMA_IRQHandler+0x1b4>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d04a      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x194>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a2d      	ldr	r2, [pc, #180]	; (8003ee0 <HAL_DMA_IRQHandler+0x1b8>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d045      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x194>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a2b      	ldr	r2, [pc, #172]	; (8003ee4 <HAL_DMA_IRQHandler+0x1bc>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d040      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x194>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a2a      	ldr	r2, [pc, #168]	; (8003ee8 <HAL_DMA_IRQHandler+0x1c0>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d03b      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x194>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a28      	ldr	r2, [pc, #160]	; (8003eec <HAL_DMA_IRQHandler+0x1c4>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d036      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x194>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a27      	ldr	r2, [pc, #156]	; (8003ef0 <HAL_DMA_IRQHandler+0x1c8>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d031      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x194>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a25      	ldr	r2, [pc, #148]	; (8003ef4 <HAL_DMA_IRQHandler+0x1cc>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d02c      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x194>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a24      	ldr	r2, [pc, #144]	; (8003ef8 <HAL_DMA_IRQHandler+0x1d0>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d027      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x194>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a22      	ldr	r2, [pc, #136]	; (8003efc <HAL_DMA_IRQHandler+0x1d4>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d022      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x194>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a21      	ldr	r2, [pc, #132]	; (8003f00 <HAL_DMA_IRQHandler+0x1d8>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d01d      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x194>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a1f      	ldr	r2, [pc, #124]	; (8003f04 <HAL_DMA_IRQHandler+0x1dc>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d018      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x194>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a1e      	ldr	r2, [pc, #120]	; (8003f08 <HAL_DMA_IRQHandler+0x1e0>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d013      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x194>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a1c      	ldr	r2, [pc, #112]	; (8003f0c <HAL_DMA_IRQHandler+0x1e4>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d00e      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x194>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a1b      	ldr	r2, [pc, #108]	; (8003f10 <HAL_DMA_IRQHandler+0x1e8>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d009      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x194>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a19      	ldr	r2, [pc, #100]	; (8003f14 <HAL_DMA_IRQHandler+0x1ec>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d004      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x194>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a18      	ldr	r2, [pc, #96]	; (8003f18 <HAL_DMA_IRQHandler+0x1f0>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d12f      	bne.n	8003f1c <HAL_DMA_IRQHandler+0x1f4>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0304 	and.w	r3, r3, #4
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	bf14      	ite	ne
 8003eca:	2301      	movne	r3, #1
 8003ecc:	2300      	moveq	r3, #0
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	e02e      	b.n	8003f30 <HAL_DMA_IRQHandler+0x208>
 8003ed2:	bf00      	nop
 8003ed4:	24000000 	.word	0x24000000
 8003ed8:	1b4e81b5 	.word	0x1b4e81b5
 8003edc:	40020010 	.word	0x40020010
 8003ee0:	40020028 	.word	0x40020028
 8003ee4:	40020040 	.word	0x40020040
 8003ee8:	40020058 	.word	0x40020058
 8003eec:	40020070 	.word	0x40020070
 8003ef0:	40020088 	.word	0x40020088
 8003ef4:	400200a0 	.word	0x400200a0
 8003ef8:	400200b8 	.word	0x400200b8
 8003efc:	40020410 	.word	0x40020410
 8003f00:	40020428 	.word	0x40020428
 8003f04:	40020440 	.word	0x40020440
 8003f08:	40020458 	.word	0x40020458
 8003f0c:	40020470 	.word	0x40020470
 8003f10:	40020488 	.word	0x40020488
 8003f14:	400204a0 	.word	0x400204a0
 8003f18:	400204b8 	.word	0x400204b8
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0308 	and.w	r3, r3, #8
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	bf14      	ite	ne
 8003f2a:	2301      	movne	r3, #1
 8003f2c:	2300      	moveq	r3, #0
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d015      	beq.n	8003f60 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 0204 	bic.w	r2, r2, #4
 8003f42:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f48:	f003 031f 	and.w	r3, r3, #31
 8003f4c:	2208      	movs	r2, #8
 8003f4e:	409a      	lsls	r2, r3
 8003f50:	6a3b      	ldr	r3, [r7, #32]
 8003f52:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f58:	f043 0201 	orr.w	r2, r3, #1
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f64:	f003 031f 	and.w	r3, r3, #31
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d06e      	beq.n	8004054 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a69      	ldr	r2, [pc, #420]	; (8004120 <HAL_DMA_IRQHandler+0x3f8>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d04a      	beq.n	8004016 <HAL_DMA_IRQHandler+0x2ee>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a67      	ldr	r2, [pc, #412]	; (8004124 <HAL_DMA_IRQHandler+0x3fc>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d045      	beq.n	8004016 <HAL_DMA_IRQHandler+0x2ee>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a66      	ldr	r2, [pc, #408]	; (8004128 <HAL_DMA_IRQHandler+0x400>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d040      	beq.n	8004016 <HAL_DMA_IRQHandler+0x2ee>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a64      	ldr	r2, [pc, #400]	; (800412c <HAL_DMA_IRQHandler+0x404>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d03b      	beq.n	8004016 <HAL_DMA_IRQHandler+0x2ee>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a63      	ldr	r2, [pc, #396]	; (8004130 <HAL_DMA_IRQHandler+0x408>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d036      	beq.n	8004016 <HAL_DMA_IRQHandler+0x2ee>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a61      	ldr	r2, [pc, #388]	; (8004134 <HAL_DMA_IRQHandler+0x40c>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d031      	beq.n	8004016 <HAL_DMA_IRQHandler+0x2ee>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a60      	ldr	r2, [pc, #384]	; (8004138 <HAL_DMA_IRQHandler+0x410>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d02c      	beq.n	8004016 <HAL_DMA_IRQHandler+0x2ee>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a5e      	ldr	r2, [pc, #376]	; (800413c <HAL_DMA_IRQHandler+0x414>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d027      	beq.n	8004016 <HAL_DMA_IRQHandler+0x2ee>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a5d      	ldr	r2, [pc, #372]	; (8004140 <HAL_DMA_IRQHandler+0x418>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d022      	beq.n	8004016 <HAL_DMA_IRQHandler+0x2ee>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a5b      	ldr	r2, [pc, #364]	; (8004144 <HAL_DMA_IRQHandler+0x41c>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d01d      	beq.n	8004016 <HAL_DMA_IRQHandler+0x2ee>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a5a      	ldr	r2, [pc, #360]	; (8004148 <HAL_DMA_IRQHandler+0x420>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d018      	beq.n	8004016 <HAL_DMA_IRQHandler+0x2ee>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a58      	ldr	r2, [pc, #352]	; (800414c <HAL_DMA_IRQHandler+0x424>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d013      	beq.n	8004016 <HAL_DMA_IRQHandler+0x2ee>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a57      	ldr	r2, [pc, #348]	; (8004150 <HAL_DMA_IRQHandler+0x428>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d00e      	beq.n	8004016 <HAL_DMA_IRQHandler+0x2ee>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a55      	ldr	r2, [pc, #340]	; (8004154 <HAL_DMA_IRQHandler+0x42c>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d009      	beq.n	8004016 <HAL_DMA_IRQHandler+0x2ee>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a54      	ldr	r2, [pc, #336]	; (8004158 <HAL_DMA_IRQHandler+0x430>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d004      	beq.n	8004016 <HAL_DMA_IRQHandler+0x2ee>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a52      	ldr	r2, [pc, #328]	; (800415c <HAL_DMA_IRQHandler+0x434>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d10a      	bne.n	800402c <HAL_DMA_IRQHandler+0x304>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004020:	2b00      	cmp	r3, #0
 8004022:	bf14      	ite	ne
 8004024:	2301      	movne	r3, #1
 8004026:	2300      	moveq	r3, #0
 8004028:	b2db      	uxtb	r3, r3
 800402a:	e003      	b.n	8004034 <HAL_DMA_IRQHandler+0x30c>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2300      	movs	r3, #0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00d      	beq.n	8004054 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800403c:	f003 031f 	and.w	r3, r3, #31
 8004040:	2201      	movs	r2, #1
 8004042:	409a      	lsls	r2, r3
 8004044:	6a3b      	ldr	r3, [r7, #32]
 8004046:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404c:	f043 0202 	orr.w	r2, r3, #2
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004058:	f003 031f 	and.w	r3, r3, #31
 800405c:	2204      	movs	r2, #4
 800405e:	409a      	lsls	r2, r3
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	4013      	ands	r3, r2
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 808f 	beq.w	8004188 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a2c      	ldr	r2, [pc, #176]	; (8004120 <HAL_DMA_IRQHandler+0x3f8>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d04a      	beq.n	800410a <HAL_DMA_IRQHandler+0x3e2>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a2a      	ldr	r2, [pc, #168]	; (8004124 <HAL_DMA_IRQHandler+0x3fc>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d045      	beq.n	800410a <HAL_DMA_IRQHandler+0x3e2>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a29      	ldr	r2, [pc, #164]	; (8004128 <HAL_DMA_IRQHandler+0x400>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d040      	beq.n	800410a <HAL_DMA_IRQHandler+0x3e2>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a27      	ldr	r2, [pc, #156]	; (800412c <HAL_DMA_IRQHandler+0x404>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d03b      	beq.n	800410a <HAL_DMA_IRQHandler+0x3e2>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a26      	ldr	r2, [pc, #152]	; (8004130 <HAL_DMA_IRQHandler+0x408>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d036      	beq.n	800410a <HAL_DMA_IRQHandler+0x3e2>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a24      	ldr	r2, [pc, #144]	; (8004134 <HAL_DMA_IRQHandler+0x40c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d031      	beq.n	800410a <HAL_DMA_IRQHandler+0x3e2>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a23      	ldr	r2, [pc, #140]	; (8004138 <HAL_DMA_IRQHandler+0x410>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d02c      	beq.n	800410a <HAL_DMA_IRQHandler+0x3e2>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a21      	ldr	r2, [pc, #132]	; (800413c <HAL_DMA_IRQHandler+0x414>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d027      	beq.n	800410a <HAL_DMA_IRQHandler+0x3e2>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a20      	ldr	r2, [pc, #128]	; (8004140 <HAL_DMA_IRQHandler+0x418>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d022      	beq.n	800410a <HAL_DMA_IRQHandler+0x3e2>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a1e      	ldr	r2, [pc, #120]	; (8004144 <HAL_DMA_IRQHandler+0x41c>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d01d      	beq.n	800410a <HAL_DMA_IRQHandler+0x3e2>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a1d      	ldr	r2, [pc, #116]	; (8004148 <HAL_DMA_IRQHandler+0x420>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d018      	beq.n	800410a <HAL_DMA_IRQHandler+0x3e2>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a1b      	ldr	r2, [pc, #108]	; (800414c <HAL_DMA_IRQHandler+0x424>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d013      	beq.n	800410a <HAL_DMA_IRQHandler+0x3e2>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a1a      	ldr	r2, [pc, #104]	; (8004150 <HAL_DMA_IRQHandler+0x428>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d00e      	beq.n	800410a <HAL_DMA_IRQHandler+0x3e2>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a18      	ldr	r2, [pc, #96]	; (8004154 <HAL_DMA_IRQHandler+0x42c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d009      	beq.n	800410a <HAL_DMA_IRQHandler+0x3e2>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a17      	ldr	r2, [pc, #92]	; (8004158 <HAL_DMA_IRQHandler+0x430>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d004      	beq.n	800410a <HAL_DMA_IRQHandler+0x3e2>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a15      	ldr	r2, [pc, #84]	; (800415c <HAL_DMA_IRQHandler+0x434>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d12a      	bne.n	8004160 <HAL_DMA_IRQHandler+0x438>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	bf14      	ite	ne
 8004118:	2301      	movne	r3, #1
 800411a:	2300      	moveq	r3, #0
 800411c:	b2db      	uxtb	r3, r3
 800411e:	e023      	b.n	8004168 <HAL_DMA_IRQHandler+0x440>
 8004120:	40020010 	.word	0x40020010
 8004124:	40020028 	.word	0x40020028
 8004128:	40020040 	.word	0x40020040
 800412c:	40020058 	.word	0x40020058
 8004130:	40020070 	.word	0x40020070
 8004134:	40020088 	.word	0x40020088
 8004138:	400200a0 	.word	0x400200a0
 800413c:	400200b8 	.word	0x400200b8
 8004140:	40020410 	.word	0x40020410
 8004144:	40020428 	.word	0x40020428
 8004148:	40020440 	.word	0x40020440
 800414c:	40020458 	.word	0x40020458
 8004150:	40020470 	.word	0x40020470
 8004154:	40020488 	.word	0x40020488
 8004158:	400204a0 	.word	0x400204a0
 800415c:	400204b8 	.word	0x400204b8
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2300      	movs	r3, #0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00d      	beq.n	8004188 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004170:	f003 031f 	and.w	r3, r3, #31
 8004174:	2204      	movs	r2, #4
 8004176:	409a      	lsls	r2, r3
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004180:	f043 0204 	orr.w	r2, r3, #4
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800418c:	f003 031f 	and.w	r3, r3, #31
 8004190:	2210      	movs	r2, #16
 8004192:	409a      	lsls	r2, r3
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	4013      	ands	r3, r2
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 80a6 	beq.w	80042ea <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a85      	ldr	r2, [pc, #532]	; (80043b8 <HAL_DMA_IRQHandler+0x690>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d04a      	beq.n	800423e <HAL_DMA_IRQHandler+0x516>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a83      	ldr	r2, [pc, #524]	; (80043bc <HAL_DMA_IRQHandler+0x694>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d045      	beq.n	800423e <HAL_DMA_IRQHandler+0x516>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a82      	ldr	r2, [pc, #520]	; (80043c0 <HAL_DMA_IRQHandler+0x698>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d040      	beq.n	800423e <HAL_DMA_IRQHandler+0x516>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a80      	ldr	r2, [pc, #512]	; (80043c4 <HAL_DMA_IRQHandler+0x69c>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d03b      	beq.n	800423e <HAL_DMA_IRQHandler+0x516>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a7f      	ldr	r2, [pc, #508]	; (80043c8 <HAL_DMA_IRQHandler+0x6a0>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d036      	beq.n	800423e <HAL_DMA_IRQHandler+0x516>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a7d      	ldr	r2, [pc, #500]	; (80043cc <HAL_DMA_IRQHandler+0x6a4>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d031      	beq.n	800423e <HAL_DMA_IRQHandler+0x516>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a7c      	ldr	r2, [pc, #496]	; (80043d0 <HAL_DMA_IRQHandler+0x6a8>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d02c      	beq.n	800423e <HAL_DMA_IRQHandler+0x516>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a7a      	ldr	r2, [pc, #488]	; (80043d4 <HAL_DMA_IRQHandler+0x6ac>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d027      	beq.n	800423e <HAL_DMA_IRQHandler+0x516>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a79      	ldr	r2, [pc, #484]	; (80043d8 <HAL_DMA_IRQHandler+0x6b0>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d022      	beq.n	800423e <HAL_DMA_IRQHandler+0x516>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a77      	ldr	r2, [pc, #476]	; (80043dc <HAL_DMA_IRQHandler+0x6b4>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d01d      	beq.n	800423e <HAL_DMA_IRQHandler+0x516>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a76      	ldr	r2, [pc, #472]	; (80043e0 <HAL_DMA_IRQHandler+0x6b8>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d018      	beq.n	800423e <HAL_DMA_IRQHandler+0x516>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a74      	ldr	r2, [pc, #464]	; (80043e4 <HAL_DMA_IRQHandler+0x6bc>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d013      	beq.n	800423e <HAL_DMA_IRQHandler+0x516>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a73      	ldr	r2, [pc, #460]	; (80043e8 <HAL_DMA_IRQHandler+0x6c0>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d00e      	beq.n	800423e <HAL_DMA_IRQHandler+0x516>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a71      	ldr	r2, [pc, #452]	; (80043ec <HAL_DMA_IRQHandler+0x6c4>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d009      	beq.n	800423e <HAL_DMA_IRQHandler+0x516>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a70      	ldr	r2, [pc, #448]	; (80043f0 <HAL_DMA_IRQHandler+0x6c8>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d004      	beq.n	800423e <HAL_DMA_IRQHandler+0x516>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a6e      	ldr	r2, [pc, #440]	; (80043f4 <HAL_DMA_IRQHandler+0x6cc>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d10a      	bne.n	8004254 <HAL_DMA_IRQHandler+0x52c>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0308 	and.w	r3, r3, #8
 8004248:	2b00      	cmp	r3, #0
 800424a:	bf14      	ite	ne
 800424c:	2301      	movne	r3, #1
 800424e:	2300      	moveq	r3, #0
 8004250:	b2db      	uxtb	r3, r3
 8004252:	e009      	b.n	8004268 <HAL_DMA_IRQHandler+0x540>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0304 	and.w	r3, r3, #4
 800425e:	2b00      	cmp	r3, #0
 8004260:	bf14      	ite	ne
 8004262:	2301      	movne	r3, #1
 8004264:	2300      	moveq	r3, #0
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	d03e      	beq.n	80042ea <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004270:	f003 031f 	and.w	r3, r3, #31
 8004274:	2210      	movs	r2, #16
 8004276:	409a      	lsls	r2, r3
 8004278:	6a3b      	ldr	r3, [r7, #32]
 800427a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d018      	beq.n	80042bc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d108      	bne.n	80042aa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429c:	2b00      	cmp	r3, #0
 800429e:	d024      	beq.n	80042ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	4798      	blx	r3
 80042a8:	e01f      	b.n	80042ea <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d01b      	beq.n	80042ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	4798      	blx	r3
 80042ba:	e016      	b.n	80042ea <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d107      	bne.n	80042da <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 0208 	bic.w	r2, r2, #8
 80042d8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d003      	beq.n	80042ea <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ee:	f003 031f 	and.w	r3, r3, #31
 80042f2:	2220      	movs	r2, #32
 80042f4:	409a      	lsls	r2, r3
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	4013      	ands	r3, r2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 8110 	beq.w	8004520 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a2c      	ldr	r2, [pc, #176]	; (80043b8 <HAL_DMA_IRQHandler+0x690>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d04a      	beq.n	80043a0 <HAL_DMA_IRQHandler+0x678>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a2b      	ldr	r2, [pc, #172]	; (80043bc <HAL_DMA_IRQHandler+0x694>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d045      	beq.n	80043a0 <HAL_DMA_IRQHandler+0x678>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a29      	ldr	r2, [pc, #164]	; (80043c0 <HAL_DMA_IRQHandler+0x698>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d040      	beq.n	80043a0 <HAL_DMA_IRQHandler+0x678>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a28      	ldr	r2, [pc, #160]	; (80043c4 <HAL_DMA_IRQHandler+0x69c>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d03b      	beq.n	80043a0 <HAL_DMA_IRQHandler+0x678>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a26      	ldr	r2, [pc, #152]	; (80043c8 <HAL_DMA_IRQHandler+0x6a0>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d036      	beq.n	80043a0 <HAL_DMA_IRQHandler+0x678>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a25      	ldr	r2, [pc, #148]	; (80043cc <HAL_DMA_IRQHandler+0x6a4>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d031      	beq.n	80043a0 <HAL_DMA_IRQHandler+0x678>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a23      	ldr	r2, [pc, #140]	; (80043d0 <HAL_DMA_IRQHandler+0x6a8>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d02c      	beq.n	80043a0 <HAL_DMA_IRQHandler+0x678>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a22      	ldr	r2, [pc, #136]	; (80043d4 <HAL_DMA_IRQHandler+0x6ac>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d027      	beq.n	80043a0 <HAL_DMA_IRQHandler+0x678>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a20      	ldr	r2, [pc, #128]	; (80043d8 <HAL_DMA_IRQHandler+0x6b0>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d022      	beq.n	80043a0 <HAL_DMA_IRQHandler+0x678>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a1f      	ldr	r2, [pc, #124]	; (80043dc <HAL_DMA_IRQHandler+0x6b4>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d01d      	beq.n	80043a0 <HAL_DMA_IRQHandler+0x678>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a1d      	ldr	r2, [pc, #116]	; (80043e0 <HAL_DMA_IRQHandler+0x6b8>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d018      	beq.n	80043a0 <HAL_DMA_IRQHandler+0x678>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a1c      	ldr	r2, [pc, #112]	; (80043e4 <HAL_DMA_IRQHandler+0x6bc>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d013      	beq.n	80043a0 <HAL_DMA_IRQHandler+0x678>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a1a      	ldr	r2, [pc, #104]	; (80043e8 <HAL_DMA_IRQHandler+0x6c0>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d00e      	beq.n	80043a0 <HAL_DMA_IRQHandler+0x678>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a19      	ldr	r2, [pc, #100]	; (80043ec <HAL_DMA_IRQHandler+0x6c4>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d009      	beq.n	80043a0 <HAL_DMA_IRQHandler+0x678>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a17      	ldr	r2, [pc, #92]	; (80043f0 <HAL_DMA_IRQHandler+0x6c8>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d004      	beq.n	80043a0 <HAL_DMA_IRQHandler+0x678>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a16      	ldr	r2, [pc, #88]	; (80043f4 <HAL_DMA_IRQHandler+0x6cc>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d12b      	bne.n	80043f8 <HAL_DMA_IRQHandler+0x6d0>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0310 	and.w	r3, r3, #16
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	bf14      	ite	ne
 80043ae:	2301      	movne	r3, #1
 80043b0:	2300      	moveq	r3, #0
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	e02a      	b.n	800440c <HAL_DMA_IRQHandler+0x6e4>
 80043b6:	bf00      	nop
 80043b8:	40020010 	.word	0x40020010
 80043bc:	40020028 	.word	0x40020028
 80043c0:	40020040 	.word	0x40020040
 80043c4:	40020058 	.word	0x40020058
 80043c8:	40020070 	.word	0x40020070
 80043cc:	40020088 	.word	0x40020088
 80043d0:	400200a0 	.word	0x400200a0
 80043d4:	400200b8 	.word	0x400200b8
 80043d8:	40020410 	.word	0x40020410
 80043dc:	40020428 	.word	0x40020428
 80043e0:	40020440 	.word	0x40020440
 80043e4:	40020458 	.word	0x40020458
 80043e8:	40020470 	.word	0x40020470
 80043ec:	40020488 	.word	0x40020488
 80043f0:	400204a0 	.word	0x400204a0
 80043f4:	400204b8 	.word	0x400204b8
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	bf14      	ite	ne
 8004406:	2301      	movne	r3, #1
 8004408:	2300      	moveq	r3, #0
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b00      	cmp	r3, #0
 800440e:	f000 8087 	beq.w	8004520 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004416:	f003 031f 	and.w	r3, r3, #31
 800441a:	2220      	movs	r2, #32
 800441c:	409a      	lsls	r2, r3
 800441e:	6a3b      	ldr	r3, [r7, #32]
 8004420:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b04      	cmp	r3, #4
 800442c:	d139      	bne.n	80044a2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0216 	bic.w	r2, r2, #22
 800443c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	695a      	ldr	r2, [r3, #20]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800444c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	2b00      	cmp	r3, #0
 8004454:	d103      	bne.n	800445e <HAL_DMA_IRQHandler+0x736>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800445a:	2b00      	cmp	r3, #0
 800445c:	d007      	beq.n	800446e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 0208 	bic.w	r2, r2, #8
 800446c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004472:	f003 031f 	and.w	r3, r3, #31
 8004476:	223f      	movs	r2, #63	; 0x3f
 8004478:	409a      	lsls	r2, r3
 800447a:	6a3b      	ldr	r3, [r7, #32]
 800447c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004492:	2b00      	cmp	r3, #0
 8004494:	f000 834a 	beq.w	8004b2c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	4798      	blx	r3
          }
          return;
 80044a0:	e344      	b.n	8004b2c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d018      	beq.n	80044e2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d108      	bne.n	80044d0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d02c      	beq.n	8004520 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	4798      	blx	r3
 80044ce:	e027      	b.n	8004520 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d023      	beq.n	8004520 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	4798      	blx	r3
 80044e0:	e01e      	b.n	8004520 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d10f      	bne.n	8004510 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0210 	bic.w	r2, r2, #16
 80044fe:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 8306 	beq.w	8004b36 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	f000 8088 	beq.w	8004648 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2204      	movs	r2, #4
 800453c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a7a      	ldr	r2, [pc, #488]	; (8004730 <HAL_DMA_IRQHandler+0xa08>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d04a      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x8b8>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a79      	ldr	r2, [pc, #484]	; (8004734 <HAL_DMA_IRQHandler+0xa0c>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d045      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x8b8>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a77      	ldr	r2, [pc, #476]	; (8004738 <HAL_DMA_IRQHandler+0xa10>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d040      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x8b8>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a76      	ldr	r2, [pc, #472]	; (800473c <HAL_DMA_IRQHandler+0xa14>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d03b      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x8b8>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a74      	ldr	r2, [pc, #464]	; (8004740 <HAL_DMA_IRQHandler+0xa18>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d036      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x8b8>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a73      	ldr	r2, [pc, #460]	; (8004744 <HAL_DMA_IRQHandler+0xa1c>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d031      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x8b8>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a71      	ldr	r2, [pc, #452]	; (8004748 <HAL_DMA_IRQHandler+0xa20>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d02c      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x8b8>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a70      	ldr	r2, [pc, #448]	; (800474c <HAL_DMA_IRQHandler+0xa24>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d027      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x8b8>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a6e      	ldr	r2, [pc, #440]	; (8004750 <HAL_DMA_IRQHandler+0xa28>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d022      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x8b8>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a6d      	ldr	r2, [pc, #436]	; (8004754 <HAL_DMA_IRQHandler+0xa2c>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d01d      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x8b8>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a6b      	ldr	r2, [pc, #428]	; (8004758 <HAL_DMA_IRQHandler+0xa30>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d018      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x8b8>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a6a      	ldr	r2, [pc, #424]	; (800475c <HAL_DMA_IRQHandler+0xa34>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d013      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x8b8>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a68      	ldr	r2, [pc, #416]	; (8004760 <HAL_DMA_IRQHandler+0xa38>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d00e      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x8b8>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a67      	ldr	r2, [pc, #412]	; (8004764 <HAL_DMA_IRQHandler+0xa3c>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d009      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x8b8>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a65      	ldr	r2, [pc, #404]	; (8004768 <HAL_DMA_IRQHandler+0xa40>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d004      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x8b8>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a64      	ldr	r2, [pc, #400]	; (800476c <HAL_DMA_IRQHandler+0xa44>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d108      	bne.n	80045f2 <HAL_DMA_IRQHandler+0x8ca>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 0201 	bic.w	r2, r2, #1
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	e007      	b.n	8004602 <HAL_DMA_IRQHandler+0x8da>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 0201 	bic.w	r2, r2, #1
 8004600:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	3301      	adds	r3, #1
 8004606:	60fb      	str	r3, [r7, #12]
 8004608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800460a:	429a      	cmp	r2, r3
 800460c:	d307      	bcc.n	800461e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1f2      	bne.n	8004602 <HAL_DMA_IRQHandler+0x8da>
 800461c:	e000      	b.n	8004620 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800461e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b00      	cmp	r3, #0
 800462c:	d004      	beq.n	8004638 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2203      	movs	r2, #3
 8004632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004636:	e003      	b.n	8004640 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800464c:	2b00      	cmp	r3, #0
 800464e:	f000 8272 	beq.w	8004b36 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	4798      	blx	r3
 800465a:	e26c      	b.n	8004b36 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a43      	ldr	r2, [pc, #268]	; (8004770 <HAL_DMA_IRQHandler+0xa48>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d022      	beq.n	80046ac <HAL_DMA_IRQHandler+0x984>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a42      	ldr	r2, [pc, #264]	; (8004774 <HAL_DMA_IRQHandler+0xa4c>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d01d      	beq.n	80046ac <HAL_DMA_IRQHandler+0x984>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a40      	ldr	r2, [pc, #256]	; (8004778 <HAL_DMA_IRQHandler+0xa50>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d018      	beq.n	80046ac <HAL_DMA_IRQHandler+0x984>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a3f      	ldr	r2, [pc, #252]	; (800477c <HAL_DMA_IRQHandler+0xa54>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d013      	beq.n	80046ac <HAL_DMA_IRQHandler+0x984>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a3d      	ldr	r2, [pc, #244]	; (8004780 <HAL_DMA_IRQHandler+0xa58>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00e      	beq.n	80046ac <HAL_DMA_IRQHandler+0x984>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a3c      	ldr	r2, [pc, #240]	; (8004784 <HAL_DMA_IRQHandler+0xa5c>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d009      	beq.n	80046ac <HAL_DMA_IRQHandler+0x984>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a3a      	ldr	r2, [pc, #232]	; (8004788 <HAL_DMA_IRQHandler+0xa60>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d004      	beq.n	80046ac <HAL_DMA_IRQHandler+0x984>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a39      	ldr	r2, [pc, #228]	; (800478c <HAL_DMA_IRQHandler+0xa64>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d101      	bne.n	80046b0 <HAL_DMA_IRQHandler+0x988>
 80046ac:	2301      	movs	r3, #1
 80046ae:	e000      	b.n	80046b2 <HAL_DMA_IRQHandler+0x98a>
 80046b0:	2300      	movs	r3, #0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f000 823f 	beq.w	8004b36 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c4:	f003 031f 	and.w	r3, r3, #31
 80046c8:	2204      	movs	r2, #4
 80046ca:	409a      	lsls	r2, r3
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	4013      	ands	r3, r2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f000 80cd 	beq.w	8004870 <HAL_DMA_IRQHandler+0xb48>
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	f003 0304 	and.w	r3, r3, #4
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 80c7 	beq.w	8004870 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e6:	f003 031f 	and.w	r3, r3, #31
 80046ea:	2204      	movs	r2, #4
 80046ec:	409a      	lsls	r2, r3
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d049      	beq.n	8004790 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d109      	bne.n	800471a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800470a:	2b00      	cmp	r3, #0
 800470c:	f000 8210 	beq.w	8004b30 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004718:	e20a      	b.n	8004b30 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471e:	2b00      	cmp	r3, #0
 8004720:	f000 8206 	beq.w	8004b30 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800472c:	e200      	b.n	8004b30 <HAL_DMA_IRQHandler+0xe08>
 800472e:	bf00      	nop
 8004730:	40020010 	.word	0x40020010
 8004734:	40020028 	.word	0x40020028
 8004738:	40020040 	.word	0x40020040
 800473c:	40020058 	.word	0x40020058
 8004740:	40020070 	.word	0x40020070
 8004744:	40020088 	.word	0x40020088
 8004748:	400200a0 	.word	0x400200a0
 800474c:	400200b8 	.word	0x400200b8
 8004750:	40020410 	.word	0x40020410
 8004754:	40020428 	.word	0x40020428
 8004758:	40020440 	.word	0x40020440
 800475c:	40020458 	.word	0x40020458
 8004760:	40020470 	.word	0x40020470
 8004764:	40020488 	.word	0x40020488
 8004768:	400204a0 	.word	0x400204a0
 800476c:	400204b8 	.word	0x400204b8
 8004770:	58025408 	.word	0x58025408
 8004774:	5802541c 	.word	0x5802541c
 8004778:	58025430 	.word	0x58025430
 800477c:	58025444 	.word	0x58025444
 8004780:	58025458 	.word	0x58025458
 8004784:	5802546c 	.word	0x5802546c
 8004788:	58025480 	.word	0x58025480
 800478c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	f003 0320 	and.w	r3, r3, #32
 8004796:	2b00      	cmp	r3, #0
 8004798:	d160      	bne.n	800485c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a7f      	ldr	r2, [pc, #508]	; (800499c <HAL_DMA_IRQHandler+0xc74>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d04a      	beq.n	800483a <HAL_DMA_IRQHandler+0xb12>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a7d      	ldr	r2, [pc, #500]	; (80049a0 <HAL_DMA_IRQHandler+0xc78>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d045      	beq.n	800483a <HAL_DMA_IRQHandler+0xb12>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a7c      	ldr	r2, [pc, #496]	; (80049a4 <HAL_DMA_IRQHandler+0xc7c>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d040      	beq.n	800483a <HAL_DMA_IRQHandler+0xb12>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a7a      	ldr	r2, [pc, #488]	; (80049a8 <HAL_DMA_IRQHandler+0xc80>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d03b      	beq.n	800483a <HAL_DMA_IRQHandler+0xb12>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a79      	ldr	r2, [pc, #484]	; (80049ac <HAL_DMA_IRQHandler+0xc84>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d036      	beq.n	800483a <HAL_DMA_IRQHandler+0xb12>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a77      	ldr	r2, [pc, #476]	; (80049b0 <HAL_DMA_IRQHandler+0xc88>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d031      	beq.n	800483a <HAL_DMA_IRQHandler+0xb12>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a76      	ldr	r2, [pc, #472]	; (80049b4 <HAL_DMA_IRQHandler+0xc8c>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d02c      	beq.n	800483a <HAL_DMA_IRQHandler+0xb12>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a74      	ldr	r2, [pc, #464]	; (80049b8 <HAL_DMA_IRQHandler+0xc90>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d027      	beq.n	800483a <HAL_DMA_IRQHandler+0xb12>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a73      	ldr	r2, [pc, #460]	; (80049bc <HAL_DMA_IRQHandler+0xc94>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d022      	beq.n	800483a <HAL_DMA_IRQHandler+0xb12>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a71      	ldr	r2, [pc, #452]	; (80049c0 <HAL_DMA_IRQHandler+0xc98>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d01d      	beq.n	800483a <HAL_DMA_IRQHandler+0xb12>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a70      	ldr	r2, [pc, #448]	; (80049c4 <HAL_DMA_IRQHandler+0xc9c>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d018      	beq.n	800483a <HAL_DMA_IRQHandler+0xb12>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a6e      	ldr	r2, [pc, #440]	; (80049c8 <HAL_DMA_IRQHandler+0xca0>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d013      	beq.n	800483a <HAL_DMA_IRQHandler+0xb12>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a6d      	ldr	r2, [pc, #436]	; (80049cc <HAL_DMA_IRQHandler+0xca4>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d00e      	beq.n	800483a <HAL_DMA_IRQHandler+0xb12>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a6b      	ldr	r2, [pc, #428]	; (80049d0 <HAL_DMA_IRQHandler+0xca8>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d009      	beq.n	800483a <HAL_DMA_IRQHandler+0xb12>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a6a      	ldr	r2, [pc, #424]	; (80049d4 <HAL_DMA_IRQHandler+0xcac>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d004      	beq.n	800483a <HAL_DMA_IRQHandler+0xb12>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a68      	ldr	r2, [pc, #416]	; (80049d8 <HAL_DMA_IRQHandler+0xcb0>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d108      	bne.n	800484c <HAL_DMA_IRQHandler+0xb24>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f022 0208 	bic.w	r2, r2, #8
 8004848:	601a      	str	r2, [r3, #0]
 800484a:	e007      	b.n	800485c <HAL_DMA_IRQHandler+0xb34>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0204 	bic.w	r2, r2, #4
 800485a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004860:	2b00      	cmp	r3, #0
 8004862:	f000 8165 	beq.w	8004b30 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800486e:	e15f      	b.n	8004b30 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004874:	f003 031f 	and.w	r3, r3, #31
 8004878:	2202      	movs	r2, #2
 800487a:	409a      	lsls	r2, r3
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	4013      	ands	r3, r2
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 80c5 	beq.w	8004a10 <HAL_DMA_IRQHandler+0xce8>
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	f000 80bf 	beq.w	8004a10 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004896:	f003 031f 	and.w	r3, r3, #31
 800489a:	2202      	movs	r2, #2
 800489c:	409a      	lsls	r2, r3
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d018      	beq.n	80048de <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d109      	bne.n	80048ca <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f000 813a 	beq.w	8004b34 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048c8:	e134      	b.n	8004b34 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 8130 	beq.w	8004b34 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048dc:	e12a      	b.n	8004b34 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	f003 0320 	and.w	r3, r3, #32
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f040 8089 	bne.w	80049fc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a2b      	ldr	r2, [pc, #172]	; (800499c <HAL_DMA_IRQHandler+0xc74>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d04a      	beq.n	800498a <HAL_DMA_IRQHandler+0xc62>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a29      	ldr	r2, [pc, #164]	; (80049a0 <HAL_DMA_IRQHandler+0xc78>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d045      	beq.n	800498a <HAL_DMA_IRQHandler+0xc62>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a28      	ldr	r2, [pc, #160]	; (80049a4 <HAL_DMA_IRQHandler+0xc7c>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d040      	beq.n	800498a <HAL_DMA_IRQHandler+0xc62>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a26      	ldr	r2, [pc, #152]	; (80049a8 <HAL_DMA_IRQHandler+0xc80>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d03b      	beq.n	800498a <HAL_DMA_IRQHandler+0xc62>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a25      	ldr	r2, [pc, #148]	; (80049ac <HAL_DMA_IRQHandler+0xc84>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d036      	beq.n	800498a <HAL_DMA_IRQHandler+0xc62>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a23      	ldr	r2, [pc, #140]	; (80049b0 <HAL_DMA_IRQHandler+0xc88>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d031      	beq.n	800498a <HAL_DMA_IRQHandler+0xc62>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a22      	ldr	r2, [pc, #136]	; (80049b4 <HAL_DMA_IRQHandler+0xc8c>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d02c      	beq.n	800498a <HAL_DMA_IRQHandler+0xc62>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a20      	ldr	r2, [pc, #128]	; (80049b8 <HAL_DMA_IRQHandler+0xc90>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d027      	beq.n	800498a <HAL_DMA_IRQHandler+0xc62>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a1f      	ldr	r2, [pc, #124]	; (80049bc <HAL_DMA_IRQHandler+0xc94>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d022      	beq.n	800498a <HAL_DMA_IRQHandler+0xc62>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a1d      	ldr	r2, [pc, #116]	; (80049c0 <HAL_DMA_IRQHandler+0xc98>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d01d      	beq.n	800498a <HAL_DMA_IRQHandler+0xc62>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a1c      	ldr	r2, [pc, #112]	; (80049c4 <HAL_DMA_IRQHandler+0xc9c>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d018      	beq.n	800498a <HAL_DMA_IRQHandler+0xc62>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a1a      	ldr	r2, [pc, #104]	; (80049c8 <HAL_DMA_IRQHandler+0xca0>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d013      	beq.n	800498a <HAL_DMA_IRQHandler+0xc62>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a19      	ldr	r2, [pc, #100]	; (80049cc <HAL_DMA_IRQHandler+0xca4>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d00e      	beq.n	800498a <HAL_DMA_IRQHandler+0xc62>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a17      	ldr	r2, [pc, #92]	; (80049d0 <HAL_DMA_IRQHandler+0xca8>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d009      	beq.n	800498a <HAL_DMA_IRQHandler+0xc62>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a16      	ldr	r2, [pc, #88]	; (80049d4 <HAL_DMA_IRQHandler+0xcac>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d004      	beq.n	800498a <HAL_DMA_IRQHandler+0xc62>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a14      	ldr	r2, [pc, #80]	; (80049d8 <HAL_DMA_IRQHandler+0xcb0>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d128      	bne.n	80049dc <HAL_DMA_IRQHandler+0xcb4>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f022 0214 	bic.w	r2, r2, #20
 8004998:	601a      	str	r2, [r3, #0]
 800499a:	e027      	b.n	80049ec <HAL_DMA_IRQHandler+0xcc4>
 800499c:	40020010 	.word	0x40020010
 80049a0:	40020028 	.word	0x40020028
 80049a4:	40020040 	.word	0x40020040
 80049a8:	40020058 	.word	0x40020058
 80049ac:	40020070 	.word	0x40020070
 80049b0:	40020088 	.word	0x40020088
 80049b4:	400200a0 	.word	0x400200a0
 80049b8:	400200b8 	.word	0x400200b8
 80049bc:	40020410 	.word	0x40020410
 80049c0:	40020428 	.word	0x40020428
 80049c4:	40020440 	.word	0x40020440
 80049c8:	40020458 	.word	0x40020458
 80049cc:	40020470 	.word	0x40020470
 80049d0:	40020488 	.word	0x40020488
 80049d4:	400204a0 	.word	0x400204a0
 80049d8:	400204b8 	.word	0x400204b8
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f022 020a 	bic.w	r2, r2, #10
 80049ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f000 8097 	beq.w	8004b34 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a0e:	e091      	b.n	8004b34 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a14:	f003 031f 	and.w	r3, r3, #31
 8004a18:	2208      	movs	r2, #8
 8004a1a:	409a      	lsls	r2, r3
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	4013      	ands	r3, r2
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f000 8088 	beq.w	8004b36 <HAL_DMA_IRQHandler+0xe0e>
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	f003 0308 	and.w	r3, r3, #8
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 8082 	beq.w	8004b36 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a41      	ldr	r2, [pc, #260]	; (8004b3c <HAL_DMA_IRQHandler+0xe14>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d04a      	beq.n	8004ad2 <HAL_DMA_IRQHandler+0xdaa>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a3f      	ldr	r2, [pc, #252]	; (8004b40 <HAL_DMA_IRQHandler+0xe18>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d045      	beq.n	8004ad2 <HAL_DMA_IRQHandler+0xdaa>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a3e      	ldr	r2, [pc, #248]	; (8004b44 <HAL_DMA_IRQHandler+0xe1c>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d040      	beq.n	8004ad2 <HAL_DMA_IRQHandler+0xdaa>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a3c      	ldr	r2, [pc, #240]	; (8004b48 <HAL_DMA_IRQHandler+0xe20>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d03b      	beq.n	8004ad2 <HAL_DMA_IRQHandler+0xdaa>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a3b      	ldr	r2, [pc, #236]	; (8004b4c <HAL_DMA_IRQHandler+0xe24>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d036      	beq.n	8004ad2 <HAL_DMA_IRQHandler+0xdaa>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a39      	ldr	r2, [pc, #228]	; (8004b50 <HAL_DMA_IRQHandler+0xe28>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d031      	beq.n	8004ad2 <HAL_DMA_IRQHandler+0xdaa>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a38      	ldr	r2, [pc, #224]	; (8004b54 <HAL_DMA_IRQHandler+0xe2c>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d02c      	beq.n	8004ad2 <HAL_DMA_IRQHandler+0xdaa>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a36      	ldr	r2, [pc, #216]	; (8004b58 <HAL_DMA_IRQHandler+0xe30>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d027      	beq.n	8004ad2 <HAL_DMA_IRQHandler+0xdaa>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a35      	ldr	r2, [pc, #212]	; (8004b5c <HAL_DMA_IRQHandler+0xe34>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d022      	beq.n	8004ad2 <HAL_DMA_IRQHandler+0xdaa>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a33      	ldr	r2, [pc, #204]	; (8004b60 <HAL_DMA_IRQHandler+0xe38>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d01d      	beq.n	8004ad2 <HAL_DMA_IRQHandler+0xdaa>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a32      	ldr	r2, [pc, #200]	; (8004b64 <HAL_DMA_IRQHandler+0xe3c>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d018      	beq.n	8004ad2 <HAL_DMA_IRQHandler+0xdaa>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a30      	ldr	r2, [pc, #192]	; (8004b68 <HAL_DMA_IRQHandler+0xe40>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d013      	beq.n	8004ad2 <HAL_DMA_IRQHandler+0xdaa>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a2f      	ldr	r2, [pc, #188]	; (8004b6c <HAL_DMA_IRQHandler+0xe44>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d00e      	beq.n	8004ad2 <HAL_DMA_IRQHandler+0xdaa>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a2d      	ldr	r2, [pc, #180]	; (8004b70 <HAL_DMA_IRQHandler+0xe48>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d009      	beq.n	8004ad2 <HAL_DMA_IRQHandler+0xdaa>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a2c      	ldr	r2, [pc, #176]	; (8004b74 <HAL_DMA_IRQHandler+0xe4c>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d004      	beq.n	8004ad2 <HAL_DMA_IRQHandler+0xdaa>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a2a      	ldr	r2, [pc, #168]	; (8004b78 <HAL_DMA_IRQHandler+0xe50>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d108      	bne.n	8004ae4 <HAL_DMA_IRQHandler+0xdbc>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 021c 	bic.w	r2, r2, #28
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	e007      	b.n	8004af4 <HAL_DMA_IRQHandler+0xdcc>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f022 020e 	bic.w	r2, r2, #14
 8004af2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af8:	f003 031f 	and.w	r3, r3, #31
 8004afc:	2201      	movs	r2, #1
 8004afe:	409a      	lsls	r2, r3
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d009      	beq.n	8004b36 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	4798      	blx	r3
 8004b2a:	e004      	b.n	8004b36 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004b2c:	bf00      	nop
 8004b2e:	e002      	b.n	8004b36 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b30:	bf00      	nop
 8004b32:	e000      	b.n	8004b36 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b34:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004b36:	3728      	adds	r7, #40	; 0x28
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	40020010 	.word	0x40020010
 8004b40:	40020028 	.word	0x40020028
 8004b44:	40020040 	.word	0x40020040
 8004b48:	40020058 	.word	0x40020058
 8004b4c:	40020070 	.word	0x40020070
 8004b50:	40020088 	.word	0x40020088
 8004b54:	400200a0 	.word	0x400200a0
 8004b58:	400200b8 	.word	0x400200b8
 8004b5c:	40020410 	.word	0x40020410
 8004b60:	40020428 	.word	0x40020428
 8004b64:	40020440 	.word	0x40020440
 8004b68:	40020458 	.word	0x40020458
 8004b6c:	40020470 	.word	0x40020470
 8004b70:	40020488 	.word	0x40020488
 8004b74:	400204a0 	.word	0x400204a0
 8004b78:	400204b8 	.word	0x400204b8

08004b7c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b087      	sub	sp, #28
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
 8004b88:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b8e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b94:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a7f      	ldr	r2, [pc, #508]	; (8004d98 <DMA_SetConfig+0x21c>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d072      	beq.n	8004c86 <DMA_SetConfig+0x10a>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a7d      	ldr	r2, [pc, #500]	; (8004d9c <DMA_SetConfig+0x220>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d06d      	beq.n	8004c86 <DMA_SetConfig+0x10a>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a7c      	ldr	r2, [pc, #496]	; (8004da0 <DMA_SetConfig+0x224>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d068      	beq.n	8004c86 <DMA_SetConfig+0x10a>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a7a      	ldr	r2, [pc, #488]	; (8004da4 <DMA_SetConfig+0x228>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d063      	beq.n	8004c86 <DMA_SetConfig+0x10a>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a79      	ldr	r2, [pc, #484]	; (8004da8 <DMA_SetConfig+0x22c>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d05e      	beq.n	8004c86 <DMA_SetConfig+0x10a>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a77      	ldr	r2, [pc, #476]	; (8004dac <DMA_SetConfig+0x230>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d059      	beq.n	8004c86 <DMA_SetConfig+0x10a>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a76      	ldr	r2, [pc, #472]	; (8004db0 <DMA_SetConfig+0x234>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d054      	beq.n	8004c86 <DMA_SetConfig+0x10a>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a74      	ldr	r2, [pc, #464]	; (8004db4 <DMA_SetConfig+0x238>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d04f      	beq.n	8004c86 <DMA_SetConfig+0x10a>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a73      	ldr	r2, [pc, #460]	; (8004db8 <DMA_SetConfig+0x23c>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d04a      	beq.n	8004c86 <DMA_SetConfig+0x10a>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a71      	ldr	r2, [pc, #452]	; (8004dbc <DMA_SetConfig+0x240>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d045      	beq.n	8004c86 <DMA_SetConfig+0x10a>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a70      	ldr	r2, [pc, #448]	; (8004dc0 <DMA_SetConfig+0x244>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d040      	beq.n	8004c86 <DMA_SetConfig+0x10a>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a6e      	ldr	r2, [pc, #440]	; (8004dc4 <DMA_SetConfig+0x248>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d03b      	beq.n	8004c86 <DMA_SetConfig+0x10a>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a6d      	ldr	r2, [pc, #436]	; (8004dc8 <DMA_SetConfig+0x24c>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d036      	beq.n	8004c86 <DMA_SetConfig+0x10a>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a6b      	ldr	r2, [pc, #428]	; (8004dcc <DMA_SetConfig+0x250>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d031      	beq.n	8004c86 <DMA_SetConfig+0x10a>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a6a      	ldr	r2, [pc, #424]	; (8004dd0 <DMA_SetConfig+0x254>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d02c      	beq.n	8004c86 <DMA_SetConfig+0x10a>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a68      	ldr	r2, [pc, #416]	; (8004dd4 <DMA_SetConfig+0x258>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d027      	beq.n	8004c86 <DMA_SetConfig+0x10a>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a67      	ldr	r2, [pc, #412]	; (8004dd8 <DMA_SetConfig+0x25c>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d022      	beq.n	8004c86 <DMA_SetConfig+0x10a>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a65      	ldr	r2, [pc, #404]	; (8004ddc <DMA_SetConfig+0x260>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d01d      	beq.n	8004c86 <DMA_SetConfig+0x10a>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a64      	ldr	r2, [pc, #400]	; (8004de0 <DMA_SetConfig+0x264>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d018      	beq.n	8004c86 <DMA_SetConfig+0x10a>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a62      	ldr	r2, [pc, #392]	; (8004de4 <DMA_SetConfig+0x268>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d013      	beq.n	8004c86 <DMA_SetConfig+0x10a>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a61      	ldr	r2, [pc, #388]	; (8004de8 <DMA_SetConfig+0x26c>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d00e      	beq.n	8004c86 <DMA_SetConfig+0x10a>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a5f      	ldr	r2, [pc, #380]	; (8004dec <DMA_SetConfig+0x270>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d009      	beq.n	8004c86 <DMA_SetConfig+0x10a>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a5e      	ldr	r2, [pc, #376]	; (8004df0 <DMA_SetConfig+0x274>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d004      	beq.n	8004c86 <DMA_SetConfig+0x10a>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a5c      	ldr	r2, [pc, #368]	; (8004df4 <DMA_SetConfig+0x278>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d101      	bne.n	8004c8a <DMA_SetConfig+0x10e>
 8004c86:	2301      	movs	r3, #1
 8004c88:	e000      	b.n	8004c8c <DMA_SetConfig+0x110>
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00d      	beq.n	8004cac <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004c98:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d004      	beq.n	8004cac <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004caa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a39      	ldr	r2, [pc, #228]	; (8004d98 <DMA_SetConfig+0x21c>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d04a      	beq.n	8004d4c <DMA_SetConfig+0x1d0>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a38      	ldr	r2, [pc, #224]	; (8004d9c <DMA_SetConfig+0x220>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d045      	beq.n	8004d4c <DMA_SetConfig+0x1d0>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a36      	ldr	r2, [pc, #216]	; (8004da0 <DMA_SetConfig+0x224>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d040      	beq.n	8004d4c <DMA_SetConfig+0x1d0>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a35      	ldr	r2, [pc, #212]	; (8004da4 <DMA_SetConfig+0x228>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d03b      	beq.n	8004d4c <DMA_SetConfig+0x1d0>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a33      	ldr	r2, [pc, #204]	; (8004da8 <DMA_SetConfig+0x22c>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d036      	beq.n	8004d4c <DMA_SetConfig+0x1d0>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a32      	ldr	r2, [pc, #200]	; (8004dac <DMA_SetConfig+0x230>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d031      	beq.n	8004d4c <DMA_SetConfig+0x1d0>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a30      	ldr	r2, [pc, #192]	; (8004db0 <DMA_SetConfig+0x234>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d02c      	beq.n	8004d4c <DMA_SetConfig+0x1d0>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a2f      	ldr	r2, [pc, #188]	; (8004db4 <DMA_SetConfig+0x238>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d027      	beq.n	8004d4c <DMA_SetConfig+0x1d0>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a2d      	ldr	r2, [pc, #180]	; (8004db8 <DMA_SetConfig+0x23c>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d022      	beq.n	8004d4c <DMA_SetConfig+0x1d0>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a2c      	ldr	r2, [pc, #176]	; (8004dbc <DMA_SetConfig+0x240>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d01d      	beq.n	8004d4c <DMA_SetConfig+0x1d0>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a2a      	ldr	r2, [pc, #168]	; (8004dc0 <DMA_SetConfig+0x244>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d018      	beq.n	8004d4c <DMA_SetConfig+0x1d0>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a29      	ldr	r2, [pc, #164]	; (8004dc4 <DMA_SetConfig+0x248>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d013      	beq.n	8004d4c <DMA_SetConfig+0x1d0>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a27      	ldr	r2, [pc, #156]	; (8004dc8 <DMA_SetConfig+0x24c>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d00e      	beq.n	8004d4c <DMA_SetConfig+0x1d0>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a26      	ldr	r2, [pc, #152]	; (8004dcc <DMA_SetConfig+0x250>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d009      	beq.n	8004d4c <DMA_SetConfig+0x1d0>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a24      	ldr	r2, [pc, #144]	; (8004dd0 <DMA_SetConfig+0x254>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d004      	beq.n	8004d4c <DMA_SetConfig+0x1d0>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a23      	ldr	r2, [pc, #140]	; (8004dd4 <DMA_SetConfig+0x258>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d101      	bne.n	8004d50 <DMA_SetConfig+0x1d4>
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e000      	b.n	8004d52 <DMA_SetConfig+0x1d6>
 8004d50:	2300      	movs	r3, #0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d059      	beq.n	8004e0a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d5a:	f003 031f 	and.w	r3, r3, #31
 8004d5e:	223f      	movs	r2, #63	; 0x3f
 8004d60:	409a      	lsls	r2, r3
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d74:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	683a      	ldr	r2, [r7, #0]
 8004d7c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	2b40      	cmp	r3, #64	; 0x40
 8004d84:	d138      	bne.n	8004df8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004d96:	e086      	b.n	8004ea6 <DMA_SetConfig+0x32a>
 8004d98:	40020010 	.word	0x40020010
 8004d9c:	40020028 	.word	0x40020028
 8004da0:	40020040 	.word	0x40020040
 8004da4:	40020058 	.word	0x40020058
 8004da8:	40020070 	.word	0x40020070
 8004dac:	40020088 	.word	0x40020088
 8004db0:	400200a0 	.word	0x400200a0
 8004db4:	400200b8 	.word	0x400200b8
 8004db8:	40020410 	.word	0x40020410
 8004dbc:	40020428 	.word	0x40020428
 8004dc0:	40020440 	.word	0x40020440
 8004dc4:	40020458 	.word	0x40020458
 8004dc8:	40020470 	.word	0x40020470
 8004dcc:	40020488 	.word	0x40020488
 8004dd0:	400204a0 	.word	0x400204a0
 8004dd4:	400204b8 	.word	0x400204b8
 8004dd8:	58025408 	.word	0x58025408
 8004ddc:	5802541c 	.word	0x5802541c
 8004de0:	58025430 	.word	0x58025430
 8004de4:	58025444 	.word	0x58025444
 8004de8:	58025458 	.word	0x58025458
 8004dec:	5802546c 	.word	0x5802546c
 8004df0:	58025480 	.word	0x58025480
 8004df4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	60da      	str	r2, [r3, #12]
}
 8004e08:	e04d      	b.n	8004ea6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a29      	ldr	r2, [pc, #164]	; (8004eb4 <DMA_SetConfig+0x338>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d022      	beq.n	8004e5a <DMA_SetConfig+0x2de>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a27      	ldr	r2, [pc, #156]	; (8004eb8 <DMA_SetConfig+0x33c>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d01d      	beq.n	8004e5a <DMA_SetConfig+0x2de>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a26      	ldr	r2, [pc, #152]	; (8004ebc <DMA_SetConfig+0x340>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d018      	beq.n	8004e5a <DMA_SetConfig+0x2de>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a24      	ldr	r2, [pc, #144]	; (8004ec0 <DMA_SetConfig+0x344>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d013      	beq.n	8004e5a <DMA_SetConfig+0x2de>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a23      	ldr	r2, [pc, #140]	; (8004ec4 <DMA_SetConfig+0x348>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d00e      	beq.n	8004e5a <DMA_SetConfig+0x2de>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a21      	ldr	r2, [pc, #132]	; (8004ec8 <DMA_SetConfig+0x34c>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d009      	beq.n	8004e5a <DMA_SetConfig+0x2de>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a20      	ldr	r2, [pc, #128]	; (8004ecc <DMA_SetConfig+0x350>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d004      	beq.n	8004e5a <DMA_SetConfig+0x2de>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a1e      	ldr	r2, [pc, #120]	; (8004ed0 <DMA_SetConfig+0x354>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d101      	bne.n	8004e5e <DMA_SetConfig+0x2e2>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e000      	b.n	8004e60 <DMA_SetConfig+0x2e4>
 8004e5e:	2300      	movs	r3, #0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d020      	beq.n	8004ea6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e68:	f003 031f 	and.w	r3, r3, #31
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	409a      	lsls	r2, r3
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	683a      	ldr	r2, [r7, #0]
 8004e7a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	2b40      	cmp	r3, #64	; 0x40
 8004e82:	d108      	bne.n	8004e96 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	60da      	str	r2, [r3, #12]
}
 8004e94:	e007      	b.n	8004ea6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68ba      	ldr	r2, [r7, #8]
 8004e9c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	60da      	str	r2, [r3, #12]
}
 8004ea6:	bf00      	nop
 8004ea8:	371c      	adds	r7, #28
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	58025408 	.word	0x58025408
 8004eb8:	5802541c 	.word	0x5802541c
 8004ebc:	58025430 	.word	0x58025430
 8004ec0:	58025444 	.word	0x58025444
 8004ec4:	58025458 	.word	0x58025458
 8004ec8:	5802546c 	.word	0x5802546c
 8004ecc:	58025480 	.word	0x58025480
 8004ed0:	58025494 	.word	0x58025494

08004ed4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a42      	ldr	r2, [pc, #264]	; (8004fec <DMA_CalcBaseAndBitshift+0x118>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d04a      	beq.n	8004f7c <DMA_CalcBaseAndBitshift+0xa8>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a41      	ldr	r2, [pc, #260]	; (8004ff0 <DMA_CalcBaseAndBitshift+0x11c>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d045      	beq.n	8004f7c <DMA_CalcBaseAndBitshift+0xa8>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a3f      	ldr	r2, [pc, #252]	; (8004ff4 <DMA_CalcBaseAndBitshift+0x120>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d040      	beq.n	8004f7c <DMA_CalcBaseAndBitshift+0xa8>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a3e      	ldr	r2, [pc, #248]	; (8004ff8 <DMA_CalcBaseAndBitshift+0x124>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d03b      	beq.n	8004f7c <DMA_CalcBaseAndBitshift+0xa8>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a3c      	ldr	r2, [pc, #240]	; (8004ffc <DMA_CalcBaseAndBitshift+0x128>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d036      	beq.n	8004f7c <DMA_CalcBaseAndBitshift+0xa8>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a3b      	ldr	r2, [pc, #236]	; (8005000 <DMA_CalcBaseAndBitshift+0x12c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d031      	beq.n	8004f7c <DMA_CalcBaseAndBitshift+0xa8>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a39      	ldr	r2, [pc, #228]	; (8005004 <DMA_CalcBaseAndBitshift+0x130>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d02c      	beq.n	8004f7c <DMA_CalcBaseAndBitshift+0xa8>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a38      	ldr	r2, [pc, #224]	; (8005008 <DMA_CalcBaseAndBitshift+0x134>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d027      	beq.n	8004f7c <DMA_CalcBaseAndBitshift+0xa8>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a36      	ldr	r2, [pc, #216]	; (800500c <DMA_CalcBaseAndBitshift+0x138>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d022      	beq.n	8004f7c <DMA_CalcBaseAndBitshift+0xa8>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a35      	ldr	r2, [pc, #212]	; (8005010 <DMA_CalcBaseAndBitshift+0x13c>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d01d      	beq.n	8004f7c <DMA_CalcBaseAndBitshift+0xa8>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a33      	ldr	r2, [pc, #204]	; (8005014 <DMA_CalcBaseAndBitshift+0x140>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d018      	beq.n	8004f7c <DMA_CalcBaseAndBitshift+0xa8>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a32      	ldr	r2, [pc, #200]	; (8005018 <DMA_CalcBaseAndBitshift+0x144>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d013      	beq.n	8004f7c <DMA_CalcBaseAndBitshift+0xa8>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a30      	ldr	r2, [pc, #192]	; (800501c <DMA_CalcBaseAndBitshift+0x148>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d00e      	beq.n	8004f7c <DMA_CalcBaseAndBitshift+0xa8>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a2f      	ldr	r2, [pc, #188]	; (8005020 <DMA_CalcBaseAndBitshift+0x14c>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d009      	beq.n	8004f7c <DMA_CalcBaseAndBitshift+0xa8>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a2d      	ldr	r2, [pc, #180]	; (8005024 <DMA_CalcBaseAndBitshift+0x150>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d004      	beq.n	8004f7c <DMA_CalcBaseAndBitshift+0xa8>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a2c      	ldr	r2, [pc, #176]	; (8005028 <DMA_CalcBaseAndBitshift+0x154>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d101      	bne.n	8004f80 <DMA_CalcBaseAndBitshift+0xac>
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e000      	b.n	8004f82 <DMA_CalcBaseAndBitshift+0xae>
 8004f80:	2300      	movs	r3, #0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d024      	beq.n	8004fd0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	3b10      	subs	r3, #16
 8004f8e:	4a27      	ldr	r2, [pc, #156]	; (800502c <DMA_CalcBaseAndBitshift+0x158>)
 8004f90:	fba2 2303 	umull	r2, r3, r2, r3
 8004f94:	091b      	lsrs	r3, r3, #4
 8004f96:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f003 0307 	and.w	r3, r3, #7
 8004f9e:	4a24      	ldr	r2, [pc, #144]	; (8005030 <DMA_CalcBaseAndBitshift+0x15c>)
 8004fa0:	5cd3      	ldrb	r3, [r2, r3]
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2b03      	cmp	r3, #3
 8004fac:	d908      	bls.n	8004fc0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	4b1f      	ldr	r3, [pc, #124]	; (8005034 <DMA_CalcBaseAndBitshift+0x160>)
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	1d1a      	adds	r2, r3, #4
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	659a      	str	r2, [r3, #88]	; 0x58
 8004fbe:	e00d      	b.n	8004fdc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	4b1b      	ldr	r3, [pc, #108]	; (8005034 <DMA_CalcBaseAndBitshift+0x160>)
 8004fc8:	4013      	ands	r3, r2
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	6593      	str	r3, [r2, #88]	; 0x58
 8004fce:	e005      	b.n	8004fdc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3714      	adds	r7, #20
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	40020010 	.word	0x40020010
 8004ff0:	40020028 	.word	0x40020028
 8004ff4:	40020040 	.word	0x40020040
 8004ff8:	40020058 	.word	0x40020058
 8004ffc:	40020070 	.word	0x40020070
 8005000:	40020088 	.word	0x40020088
 8005004:	400200a0 	.word	0x400200a0
 8005008:	400200b8 	.word	0x400200b8
 800500c:	40020410 	.word	0x40020410
 8005010:	40020428 	.word	0x40020428
 8005014:	40020440 	.word	0x40020440
 8005018:	40020458 	.word	0x40020458
 800501c:	40020470 	.word	0x40020470
 8005020:	40020488 	.word	0x40020488
 8005024:	400204a0 	.word	0x400204a0
 8005028:	400204b8 	.word	0x400204b8
 800502c:	aaaaaaab 	.word	0xaaaaaaab
 8005030:	0800d020 	.word	0x0800d020
 8005034:	fffffc00 	.word	0xfffffc00

08005038 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005040:	2300      	movs	r3, #0
 8005042:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d120      	bne.n	800508e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005050:	2b03      	cmp	r3, #3
 8005052:	d858      	bhi.n	8005106 <DMA_CheckFifoParam+0xce>
 8005054:	a201      	add	r2, pc, #4	; (adr r2, 800505c <DMA_CheckFifoParam+0x24>)
 8005056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505a:	bf00      	nop
 800505c:	0800506d 	.word	0x0800506d
 8005060:	0800507f 	.word	0x0800507f
 8005064:	0800506d 	.word	0x0800506d
 8005068:	08005107 	.word	0x08005107
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005070:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d048      	beq.n	800510a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800507c:	e045      	b.n	800510a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005082:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005086:	d142      	bne.n	800510e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800508c:	e03f      	b.n	800510e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005096:	d123      	bne.n	80050e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509c:	2b03      	cmp	r3, #3
 800509e:	d838      	bhi.n	8005112 <DMA_CheckFifoParam+0xda>
 80050a0:	a201      	add	r2, pc, #4	; (adr r2, 80050a8 <DMA_CheckFifoParam+0x70>)
 80050a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a6:	bf00      	nop
 80050a8:	080050b9 	.word	0x080050b9
 80050ac:	080050bf 	.word	0x080050bf
 80050b0:	080050b9 	.word	0x080050b9
 80050b4:	080050d1 	.word	0x080050d1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	73fb      	strb	r3, [r7, #15]
        break;
 80050bc:	e030      	b.n	8005120 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d025      	beq.n	8005116 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050ce:	e022      	b.n	8005116 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80050d8:	d11f      	bne.n	800511a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050de:	e01c      	b.n	800511a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d902      	bls.n	80050ee <DMA_CheckFifoParam+0xb6>
 80050e8:	2b03      	cmp	r3, #3
 80050ea:	d003      	beq.n	80050f4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80050ec:	e018      	b.n	8005120 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	73fb      	strb	r3, [r7, #15]
        break;
 80050f2:	e015      	b.n	8005120 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00e      	beq.n	800511e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	73fb      	strb	r3, [r7, #15]
    break;
 8005104:	e00b      	b.n	800511e <DMA_CheckFifoParam+0xe6>
        break;
 8005106:	bf00      	nop
 8005108:	e00a      	b.n	8005120 <DMA_CheckFifoParam+0xe8>
        break;
 800510a:	bf00      	nop
 800510c:	e008      	b.n	8005120 <DMA_CheckFifoParam+0xe8>
        break;
 800510e:	bf00      	nop
 8005110:	e006      	b.n	8005120 <DMA_CheckFifoParam+0xe8>
        break;
 8005112:	bf00      	nop
 8005114:	e004      	b.n	8005120 <DMA_CheckFifoParam+0xe8>
        break;
 8005116:	bf00      	nop
 8005118:	e002      	b.n	8005120 <DMA_CheckFifoParam+0xe8>
        break;
 800511a:	bf00      	nop
 800511c:	e000      	b.n	8005120 <DMA_CheckFifoParam+0xe8>
    break;
 800511e:	bf00      	nop
    }
  }

  return status;
 8005120:	7bfb      	ldrb	r3, [r7, #15]
}
 8005122:	4618      	mov	r0, r3
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop

08005130 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a38      	ldr	r2, [pc, #224]	; (8005224 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d022      	beq.n	800518e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a36      	ldr	r2, [pc, #216]	; (8005228 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d01d      	beq.n	800518e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a35      	ldr	r2, [pc, #212]	; (800522c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d018      	beq.n	800518e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a33      	ldr	r2, [pc, #204]	; (8005230 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d013      	beq.n	800518e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a32      	ldr	r2, [pc, #200]	; (8005234 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d00e      	beq.n	800518e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a30      	ldr	r2, [pc, #192]	; (8005238 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d009      	beq.n	800518e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a2f      	ldr	r2, [pc, #188]	; (800523c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d004      	beq.n	800518e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a2d      	ldr	r2, [pc, #180]	; (8005240 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d101      	bne.n	8005192 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800518e:	2301      	movs	r3, #1
 8005190:	e000      	b.n	8005194 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005192:	2300      	movs	r3, #0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d01a      	beq.n	80051ce <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	b2db      	uxtb	r3, r3
 800519e:	3b08      	subs	r3, #8
 80051a0:	4a28      	ldr	r2, [pc, #160]	; (8005244 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80051a2:	fba2 2303 	umull	r2, r3, r2, r3
 80051a6:	091b      	lsrs	r3, r3, #4
 80051a8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	4b26      	ldr	r3, [pc, #152]	; (8005248 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80051ae:	4413      	add	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	461a      	mov	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a24      	ldr	r2, [pc, #144]	; (800524c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80051bc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f003 031f 	and.w	r3, r3, #31
 80051c4:	2201      	movs	r2, #1
 80051c6:	409a      	lsls	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80051cc:	e024      	b.n	8005218 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	3b10      	subs	r3, #16
 80051d6:	4a1e      	ldr	r2, [pc, #120]	; (8005250 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80051d8:	fba2 2303 	umull	r2, r3, r2, r3
 80051dc:	091b      	lsrs	r3, r3, #4
 80051de:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	4a1c      	ldr	r2, [pc, #112]	; (8005254 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d806      	bhi.n	80051f6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	4a1b      	ldr	r2, [pc, #108]	; (8005258 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d902      	bls.n	80051f6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	3308      	adds	r3, #8
 80051f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	4b18      	ldr	r3, [pc, #96]	; (800525c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80051fa:	4413      	add	r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	461a      	mov	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a16      	ldr	r2, [pc, #88]	; (8005260 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005208:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f003 031f 	and.w	r3, r3, #31
 8005210:	2201      	movs	r2, #1
 8005212:	409a      	lsls	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005218:	bf00      	nop
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	58025408 	.word	0x58025408
 8005228:	5802541c 	.word	0x5802541c
 800522c:	58025430 	.word	0x58025430
 8005230:	58025444 	.word	0x58025444
 8005234:	58025458 	.word	0x58025458
 8005238:	5802546c 	.word	0x5802546c
 800523c:	58025480 	.word	0x58025480
 8005240:	58025494 	.word	0x58025494
 8005244:	cccccccd 	.word	0xcccccccd
 8005248:	16009600 	.word	0x16009600
 800524c:	58025880 	.word	0x58025880
 8005250:	aaaaaaab 	.word	0xaaaaaaab
 8005254:	400204b8 	.word	0x400204b8
 8005258:	4002040f 	.word	0x4002040f
 800525c:	10008200 	.word	0x10008200
 8005260:	40020880 	.word	0x40020880

08005264 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	b2db      	uxtb	r3, r3
 8005272:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d04a      	beq.n	8005310 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2b08      	cmp	r3, #8
 800527e:	d847      	bhi.n	8005310 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a25      	ldr	r2, [pc, #148]	; (800531c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d022      	beq.n	80052d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a24      	ldr	r2, [pc, #144]	; (8005320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d01d      	beq.n	80052d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a22      	ldr	r2, [pc, #136]	; (8005324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d018      	beq.n	80052d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a21      	ldr	r2, [pc, #132]	; (8005328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d013      	beq.n	80052d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a1f      	ldr	r2, [pc, #124]	; (800532c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d00e      	beq.n	80052d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a1e      	ldr	r2, [pc, #120]	; (8005330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d009      	beq.n	80052d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a1c      	ldr	r2, [pc, #112]	; (8005334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d004      	beq.n	80052d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a1b      	ldr	r2, [pc, #108]	; (8005338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d101      	bne.n	80052d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80052d0:	2301      	movs	r3, #1
 80052d2:	e000      	b.n	80052d6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80052d4:	2300      	movs	r3, #0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00a      	beq.n	80052f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	4b17      	ldr	r3, [pc, #92]	; (800533c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80052de:	4413      	add	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	461a      	mov	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a15      	ldr	r2, [pc, #84]	; (8005340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80052ec:	671a      	str	r2, [r3, #112]	; 0x70
 80052ee:	e009      	b.n	8005304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	4b14      	ldr	r3, [pc, #80]	; (8005344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80052f4:	4413      	add	r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	461a      	mov	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a11      	ldr	r2, [pc, #68]	; (8005348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005302:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	3b01      	subs	r3, #1
 8005308:	2201      	movs	r2, #1
 800530a:	409a      	lsls	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005310:	bf00      	nop
 8005312:	3714      	adds	r7, #20
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr
 800531c:	58025408 	.word	0x58025408
 8005320:	5802541c 	.word	0x5802541c
 8005324:	58025430 	.word	0x58025430
 8005328:	58025444 	.word	0x58025444
 800532c:	58025458 	.word	0x58025458
 8005330:	5802546c 	.word	0x5802546c
 8005334:	58025480 	.word	0x58025480
 8005338:	58025494 	.word	0x58025494
 800533c:	1600963f 	.word	0x1600963f
 8005340:	58025940 	.word	0x58025940
 8005344:	1000823f 	.word	0x1000823f
 8005348:	40020940 	.word	0x40020940

0800534c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800534c:	b480      	push	{r7}
 800534e:	b089      	sub	sp, #36	; 0x24
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005356:	2300      	movs	r3, #0
 8005358:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800535a:	4b89      	ldr	r3, [pc, #548]	; (8005580 <HAL_GPIO_Init+0x234>)
 800535c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800535e:	e194      	b.n	800568a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	2101      	movs	r1, #1
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	fa01 f303 	lsl.w	r3, r1, r3
 800536c:	4013      	ands	r3, r2
 800536e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	2b00      	cmp	r3, #0
 8005374:	f000 8186 	beq.w	8005684 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f003 0303 	and.w	r3, r3, #3
 8005380:	2b01      	cmp	r3, #1
 8005382:	d005      	beq.n	8005390 <HAL_GPIO_Init+0x44>
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f003 0303 	and.w	r3, r3, #3
 800538c:	2b02      	cmp	r3, #2
 800538e:	d130      	bne.n	80053f2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	005b      	lsls	r3, r3, #1
 800539a:	2203      	movs	r2, #3
 800539c:	fa02 f303 	lsl.w	r3, r2, r3
 80053a0:	43db      	mvns	r3, r3
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	4013      	ands	r3, r2
 80053a6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	68da      	ldr	r2, [r3, #12]
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	005b      	lsls	r3, r3, #1
 80053b0:	fa02 f303 	lsl.w	r3, r2, r3
 80053b4:	69ba      	ldr	r2, [r7, #24]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80053c6:	2201      	movs	r2, #1
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	fa02 f303 	lsl.w	r3, r2, r3
 80053ce:	43db      	mvns	r3, r3
 80053d0:	69ba      	ldr	r2, [r7, #24]
 80053d2:	4013      	ands	r3, r2
 80053d4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	091b      	lsrs	r3, r3, #4
 80053dc:	f003 0201 	and.w	r2, r3, #1
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	fa02 f303 	lsl.w	r3, r2, r3
 80053e6:	69ba      	ldr	r2, [r7, #24]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	69ba      	ldr	r2, [r7, #24]
 80053f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f003 0303 	and.w	r3, r3, #3
 80053fa:	2b03      	cmp	r3, #3
 80053fc:	d017      	beq.n	800542e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	005b      	lsls	r3, r3, #1
 8005408:	2203      	movs	r2, #3
 800540a:	fa02 f303 	lsl.w	r3, r2, r3
 800540e:	43db      	mvns	r3, r3
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	4013      	ands	r3, r2
 8005414:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	689a      	ldr	r2, [r3, #8]
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	005b      	lsls	r3, r3, #1
 800541e:	fa02 f303 	lsl.w	r3, r2, r3
 8005422:	69ba      	ldr	r2, [r7, #24]
 8005424:	4313      	orrs	r3, r2
 8005426:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	69ba      	ldr	r2, [r7, #24]
 800542c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f003 0303 	and.w	r3, r3, #3
 8005436:	2b02      	cmp	r3, #2
 8005438:	d123      	bne.n	8005482 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	08da      	lsrs	r2, r3, #3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	3208      	adds	r2, #8
 8005442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005446:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	f003 0307 	and.w	r3, r3, #7
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	220f      	movs	r2, #15
 8005452:	fa02 f303 	lsl.w	r3, r2, r3
 8005456:	43db      	mvns	r3, r3
 8005458:	69ba      	ldr	r2, [r7, #24]
 800545a:	4013      	ands	r3, r2
 800545c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	691a      	ldr	r2, [r3, #16]
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	f003 0307 	and.w	r3, r3, #7
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	fa02 f303 	lsl.w	r3, r2, r3
 800546e:	69ba      	ldr	r2, [r7, #24]
 8005470:	4313      	orrs	r3, r2
 8005472:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	08da      	lsrs	r2, r3, #3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	3208      	adds	r2, #8
 800547c:	69b9      	ldr	r1, [r7, #24]
 800547e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	2203      	movs	r2, #3
 800548e:	fa02 f303 	lsl.w	r3, r2, r3
 8005492:	43db      	mvns	r3, r3
 8005494:	69ba      	ldr	r2, [r7, #24]
 8005496:	4013      	ands	r3, r2
 8005498:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f003 0203 	and.w	r2, r3, #3
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	fa02 f303 	lsl.w	r3, r2, r3
 80054aa:	69ba      	ldr	r2, [r7, #24]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	69ba      	ldr	r2, [r7, #24]
 80054b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f000 80e0 	beq.w	8005684 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054c4:	4b2f      	ldr	r3, [pc, #188]	; (8005584 <HAL_GPIO_Init+0x238>)
 80054c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80054ca:	4a2e      	ldr	r2, [pc, #184]	; (8005584 <HAL_GPIO_Init+0x238>)
 80054cc:	f043 0302 	orr.w	r3, r3, #2
 80054d0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80054d4:	4b2b      	ldr	r3, [pc, #172]	; (8005584 <HAL_GPIO_Init+0x238>)
 80054d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	60fb      	str	r3, [r7, #12]
 80054e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80054e2:	4a29      	ldr	r2, [pc, #164]	; (8005588 <HAL_GPIO_Init+0x23c>)
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	089b      	lsrs	r3, r3, #2
 80054e8:	3302      	adds	r3, #2
 80054ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	f003 0303 	and.w	r3, r3, #3
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	220f      	movs	r2, #15
 80054fa:	fa02 f303 	lsl.w	r3, r2, r3
 80054fe:	43db      	mvns	r3, r3
 8005500:	69ba      	ldr	r2, [r7, #24]
 8005502:	4013      	ands	r3, r2
 8005504:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a20      	ldr	r2, [pc, #128]	; (800558c <HAL_GPIO_Init+0x240>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d052      	beq.n	80055b4 <HAL_GPIO_Init+0x268>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a1f      	ldr	r2, [pc, #124]	; (8005590 <HAL_GPIO_Init+0x244>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d031      	beq.n	800557a <HAL_GPIO_Init+0x22e>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a1e      	ldr	r2, [pc, #120]	; (8005594 <HAL_GPIO_Init+0x248>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d02b      	beq.n	8005576 <HAL_GPIO_Init+0x22a>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a1d      	ldr	r2, [pc, #116]	; (8005598 <HAL_GPIO_Init+0x24c>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d025      	beq.n	8005572 <HAL_GPIO_Init+0x226>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a1c      	ldr	r2, [pc, #112]	; (800559c <HAL_GPIO_Init+0x250>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d01f      	beq.n	800556e <HAL_GPIO_Init+0x222>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a1b      	ldr	r2, [pc, #108]	; (80055a0 <HAL_GPIO_Init+0x254>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d019      	beq.n	800556a <HAL_GPIO_Init+0x21e>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a1a      	ldr	r2, [pc, #104]	; (80055a4 <HAL_GPIO_Init+0x258>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d013      	beq.n	8005566 <HAL_GPIO_Init+0x21a>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a19      	ldr	r2, [pc, #100]	; (80055a8 <HAL_GPIO_Init+0x25c>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d00d      	beq.n	8005562 <HAL_GPIO_Init+0x216>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a18      	ldr	r2, [pc, #96]	; (80055ac <HAL_GPIO_Init+0x260>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d007      	beq.n	800555e <HAL_GPIO_Init+0x212>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a17      	ldr	r2, [pc, #92]	; (80055b0 <HAL_GPIO_Init+0x264>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d101      	bne.n	800555a <HAL_GPIO_Init+0x20e>
 8005556:	2309      	movs	r3, #9
 8005558:	e02d      	b.n	80055b6 <HAL_GPIO_Init+0x26a>
 800555a:	230a      	movs	r3, #10
 800555c:	e02b      	b.n	80055b6 <HAL_GPIO_Init+0x26a>
 800555e:	2308      	movs	r3, #8
 8005560:	e029      	b.n	80055b6 <HAL_GPIO_Init+0x26a>
 8005562:	2307      	movs	r3, #7
 8005564:	e027      	b.n	80055b6 <HAL_GPIO_Init+0x26a>
 8005566:	2306      	movs	r3, #6
 8005568:	e025      	b.n	80055b6 <HAL_GPIO_Init+0x26a>
 800556a:	2305      	movs	r3, #5
 800556c:	e023      	b.n	80055b6 <HAL_GPIO_Init+0x26a>
 800556e:	2304      	movs	r3, #4
 8005570:	e021      	b.n	80055b6 <HAL_GPIO_Init+0x26a>
 8005572:	2303      	movs	r3, #3
 8005574:	e01f      	b.n	80055b6 <HAL_GPIO_Init+0x26a>
 8005576:	2302      	movs	r3, #2
 8005578:	e01d      	b.n	80055b6 <HAL_GPIO_Init+0x26a>
 800557a:	2301      	movs	r3, #1
 800557c:	e01b      	b.n	80055b6 <HAL_GPIO_Init+0x26a>
 800557e:	bf00      	nop
 8005580:	58000080 	.word	0x58000080
 8005584:	58024400 	.word	0x58024400
 8005588:	58000400 	.word	0x58000400
 800558c:	58020000 	.word	0x58020000
 8005590:	58020400 	.word	0x58020400
 8005594:	58020800 	.word	0x58020800
 8005598:	58020c00 	.word	0x58020c00
 800559c:	58021000 	.word	0x58021000
 80055a0:	58021400 	.word	0x58021400
 80055a4:	58021800 	.word	0x58021800
 80055a8:	58021c00 	.word	0x58021c00
 80055ac:	58022000 	.word	0x58022000
 80055b0:	58022400 	.word	0x58022400
 80055b4:	2300      	movs	r3, #0
 80055b6:	69fa      	ldr	r2, [r7, #28]
 80055b8:	f002 0203 	and.w	r2, r2, #3
 80055bc:	0092      	lsls	r2, r2, #2
 80055be:	4093      	lsls	r3, r2
 80055c0:	69ba      	ldr	r2, [r7, #24]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055c6:	4938      	ldr	r1, [pc, #224]	; (80056a8 <HAL_GPIO_Init+0x35c>)
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	089b      	lsrs	r3, r3, #2
 80055cc:	3302      	adds	r3, #2
 80055ce:	69ba      	ldr	r2, [r7, #24]
 80055d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80055d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	43db      	mvns	r3, r3
 80055e0:	69ba      	ldr	r2, [r7, #24]
 80055e2:	4013      	ands	r3, r2
 80055e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80055f2:	69ba      	ldr	r2, [r7, #24]
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80055fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	43db      	mvns	r3, r3
 800560e:	69ba      	ldr	r2, [r7, #24]
 8005610:	4013      	ands	r3, r2
 8005612:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d003      	beq.n	8005628 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005620:	69ba      	ldr	r2, [r7, #24]
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	4313      	orrs	r3, r2
 8005626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005628:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	43db      	mvns	r3, r3
 800563a:	69ba      	ldr	r2, [r7, #24]
 800563c:	4013      	ands	r3, r2
 800563e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d003      	beq.n	8005654 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800564c:	69ba      	ldr	r2, [r7, #24]
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	4313      	orrs	r3, r2
 8005652:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	69ba      	ldr	r2, [r7, #24]
 8005658:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	43db      	mvns	r3, r3
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	4013      	ands	r3, r2
 8005668:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d003      	beq.n	800567e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005676:	69ba      	ldr	r2, [r7, #24]
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	4313      	orrs	r3, r2
 800567c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	3301      	adds	r3, #1
 8005688:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	fa22 f303 	lsr.w	r3, r2, r3
 8005694:	2b00      	cmp	r3, #0
 8005696:	f47f ae63 	bne.w	8005360 <HAL_GPIO_Init+0x14>
  }
}
 800569a:	bf00      	nop
 800569c:	bf00      	nop
 800569e:	3724      	adds	r7, #36	; 0x24
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr
 80056a8:	58000400 	.word	0x58000400

080056ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	460b      	mov	r3, r1
 80056b6:	807b      	strh	r3, [r7, #2]
 80056b8:	4613      	mov	r3, r2
 80056ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80056bc:	787b      	ldrb	r3, [r7, #1]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d003      	beq.n	80056ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80056c2:	887a      	ldrh	r2, [r7, #2]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80056c8:	e003      	b.n	80056d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80056ca:	887b      	ldrh	r3, [r7, #2]
 80056cc:	041a      	lsls	r2, r3, #16
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	619a      	str	r2, [r3, #24]
}
 80056d2:	bf00      	nop
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80056de:	b480      	push	{r7}
 80056e0:	b085      	sub	sp, #20
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
 80056e6:	460b      	mov	r3, r1
 80056e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80056f0:	887a      	ldrh	r2, [r7, #2]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	4013      	ands	r3, r2
 80056f6:	041a      	lsls	r2, r3, #16
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	43d9      	mvns	r1, r3
 80056fc:	887b      	ldrh	r3, [r7, #2]
 80056fe:	400b      	ands	r3, r1
 8005700:	431a      	orrs	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	619a      	str	r2, [r3, #24]
}
 8005706:	bf00      	nop
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
	...

08005714 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800571c:	4b19      	ldr	r3, [pc, #100]	; (8005784 <HAL_PWREx_ConfigSupply+0x70>)
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	f003 0304 	and.w	r3, r3, #4
 8005724:	2b04      	cmp	r3, #4
 8005726:	d00a      	beq.n	800573e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005728:	4b16      	ldr	r3, [pc, #88]	; (8005784 <HAL_PWREx_ConfigSupply+0x70>)
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	f003 0307 	and.w	r3, r3, #7
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	429a      	cmp	r2, r3
 8005734:	d001      	beq.n	800573a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e01f      	b.n	800577a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800573a:	2300      	movs	r3, #0
 800573c:	e01d      	b.n	800577a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800573e:	4b11      	ldr	r3, [pc, #68]	; (8005784 <HAL_PWREx_ConfigSupply+0x70>)
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	f023 0207 	bic.w	r2, r3, #7
 8005746:	490f      	ldr	r1, [pc, #60]	; (8005784 <HAL_PWREx_ConfigSupply+0x70>)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4313      	orrs	r3, r2
 800574c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800574e:	f7fb fe59 	bl	8001404 <HAL_GetTick>
 8005752:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005754:	e009      	b.n	800576a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005756:	f7fb fe55 	bl	8001404 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005764:	d901      	bls.n	800576a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e007      	b.n	800577a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800576a:	4b06      	ldr	r3, [pc, #24]	; (8005784 <HAL_PWREx_ConfigSupply+0x70>)
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005772:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005776:	d1ee      	bne.n	8005756 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3710      	adds	r7, #16
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	58024800 	.word	0x58024800

08005788 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b08c      	sub	sp, #48	; 0x30
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d102      	bne.n	800579c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	f000 bc48 	b.w	800602c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0301 	and.w	r3, r3, #1
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 8088 	beq.w	80058ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057aa:	4b99      	ldr	r3, [pc, #612]	; (8005a10 <HAL_RCC_OscConfig+0x288>)
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80057b4:	4b96      	ldr	r3, [pc, #600]	; (8005a10 <HAL_RCC_OscConfig+0x288>)
 80057b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80057ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057bc:	2b10      	cmp	r3, #16
 80057be:	d007      	beq.n	80057d0 <HAL_RCC_OscConfig+0x48>
 80057c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c2:	2b18      	cmp	r3, #24
 80057c4:	d111      	bne.n	80057ea <HAL_RCC_OscConfig+0x62>
 80057c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c8:	f003 0303 	and.w	r3, r3, #3
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d10c      	bne.n	80057ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057d0:	4b8f      	ldr	r3, [pc, #572]	; (8005a10 <HAL_RCC_OscConfig+0x288>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d06d      	beq.n	80058b8 <HAL_RCC_OscConfig+0x130>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d169      	bne.n	80058b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	f000 bc21 	b.w	800602c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057f2:	d106      	bne.n	8005802 <HAL_RCC_OscConfig+0x7a>
 80057f4:	4b86      	ldr	r3, [pc, #536]	; (8005a10 <HAL_RCC_OscConfig+0x288>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a85      	ldr	r2, [pc, #532]	; (8005a10 <HAL_RCC_OscConfig+0x288>)
 80057fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057fe:	6013      	str	r3, [r2, #0]
 8005800:	e02e      	b.n	8005860 <HAL_RCC_OscConfig+0xd8>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10c      	bne.n	8005824 <HAL_RCC_OscConfig+0x9c>
 800580a:	4b81      	ldr	r3, [pc, #516]	; (8005a10 <HAL_RCC_OscConfig+0x288>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a80      	ldr	r2, [pc, #512]	; (8005a10 <HAL_RCC_OscConfig+0x288>)
 8005810:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005814:	6013      	str	r3, [r2, #0]
 8005816:	4b7e      	ldr	r3, [pc, #504]	; (8005a10 <HAL_RCC_OscConfig+0x288>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a7d      	ldr	r2, [pc, #500]	; (8005a10 <HAL_RCC_OscConfig+0x288>)
 800581c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005820:	6013      	str	r3, [r2, #0]
 8005822:	e01d      	b.n	8005860 <HAL_RCC_OscConfig+0xd8>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800582c:	d10c      	bne.n	8005848 <HAL_RCC_OscConfig+0xc0>
 800582e:	4b78      	ldr	r3, [pc, #480]	; (8005a10 <HAL_RCC_OscConfig+0x288>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a77      	ldr	r2, [pc, #476]	; (8005a10 <HAL_RCC_OscConfig+0x288>)
 8005834:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005838:	6013      	str	r3, [r2, #0]
 800583a:	4b75      	ldr	r3, [pc, #468]	; (8005a10 <HAL_RCC_OscConfig+0x288>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a74      	ldr	r2, [pc, #464]	; (8005a10 <HAL_RCC_OscConfig+0x288>)
 8005840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005844:	6013      	str	r3, [r2, #0]
 8005846:	e00b      	b.n	8005860 <HAL_RCC_OscConfig+0xd8>
 8005848:	4b71      	ldr	r3, [pc, #452]	; (8005a10 <HAL_RCC_OscConfig+0x288>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a70      	ldr	r2, [pc, #448]	; (8005a10 <HAL_RCC_OscConfig+0x288>)
 800584e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005852:	6013      	str	r3, [r2, #0]
 8005854:	4b6e      	ldr	r3, [pc, #440]	; (8005a10 <HAL_RCC_OscConfig+0x288>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a6d      	ldr	r2, [pc, #436]	; (8005a10 <HAL_RCC_OscConfig+0x288>)
 800585a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800585e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d013      	beq.n	8005890 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005868:	f7fb fdcc 	bl	8001404 <HAL_GetTick>
 800586c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800586e:	e008      	b.n	8005882 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005870:	f7fb fdc8 	bl	8001404 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b64      	cmp	r3, #100	; 0x64
 800587c:	d901      	bls.n	8005882 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e3d4      	b.n	800602c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005882:	4b63      	ldr	r3, [pc, #396]	; (8005a10 <HAL_RCC_OscConfig+0x288>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d0f0      	beq.n	8005870 <HAL_RCC_OscConfig+0xe8>
 800588e:	e014      	b.n	80058ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005890:	f7fb fdb8 	bl	8001404 <HAL_GetTick>
 8005894:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005896:	e008      	b.n	80058aa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005898:	f7fb fdb4 	bl	8001404 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b64      	cmp	r3, #100	; 0x64
 80058a4:	d901      	bls.n	80058aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e3c0      	b.n	800602c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80058aa:	4b59      	ldr	r3, [pc, #356]	; (8005a10 <HAL_RCC_OscConfig+0x288>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1f0      	bne.n	8005898 <HAL_RCC_OscConfig+0x110>
 80058b6:	e000      	b.n	80058ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f000 80ca 	beq.w	8005a5c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058c8:	4b51      	ldr	r3, [pc, #324]	; (8005a10 <HAL_RCC_OscConfig+0x288>)
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058d0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80058d2:	4b4f      	ldr	r3, [pc, #316]	; (8005a10 <HAL_RCC_OscConfig+0x288>)
 80058d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80058d8:	6a3b      	ldr	r3, [r7, #32]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d007      	beq.n	80058ee <HAL_RCC_OscConfig+0x166>
 80058de:	6a3b      	ldr	r3, [r7, #32]
 80058e0:	2b18      	cmp	r3, #24
 80058e2:	d156      	bne.n	8005992 <HAL_RCC_OscConfig+0x20a>
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	f003 0303 	and.w	r3, r3, #3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d151      	bne.n	8005992 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058ee:	4b48      	ldr	r3, [pc, #288]	; (8005a10 <HAL_RCC_OscConfig+0x288>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0304 	and.w	r3, r3, #4
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d005      	beq.n	8005906 <HAL_RCC_OscConfig+0x17e>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e392      	b.n	800602c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005906:	4b42      	ldr	r3, [pc, #264]	; (8005a10 <HAL_RCC_OscConfig+0x288>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f023 0219 	bic.w	r2, r3, #25
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	493f      	ldr	r1, [pc, #252]	; (8005a10 <HAL_RCC_OscConfig+0x288>)
 8005914:	4313      	orrs	r3, r2
 8005916:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005918:	f7fb fd74 	bl	8001404 <HAL_GetTick>
 800591c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800591e:	e008      	b.n	8005932 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005920:	f7fb fd70 	bl	8001404 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2b02      	cmp	r3, #2
 800592c:	d901      	bls.n	8005932 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e37c      	b.n	800602c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005932:	4b37      	ldr	r3, [pc, #220]	; (8005a10 <HAL_RCC_OscConfig+0x288>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0304 	and.w	r3, r3, #4
 800593a:	2b00      	cmp	r3, #0
 800593c:	d0f0      	beq.n	8005920 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800593e:	f7fb fd91 	bl	8001464 <HAL_GetREVID>
 8005942:	4603      	mov	r3, r0
 8005944:	f241 0203 	movw	r2, #4099	; 0x1003
 8005948:	4293      	cmp	r3, r2
 800594a:	d817      	bhi.n	800597c <HAL_RCC_OscConfig+0x1f4>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	2b40      	cmp	r3, #64	; 0x40
 8005952:	d108      	bne.n	8005966 <HAL_RCC_OscConfig+0x1de>
 8005954:	4b2e      	ldr	r3, [pc, #184]	; (8005a10 <HAL_RCC_OscConfig+0x288>)
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800595c:	4a2c      	ldr	r2, [pc, #176]	; (8005a10 <HAL_RCC_OscConfig+0x288>)
 800595e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005962:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005964:	e07a      	b.n	8005a5c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005966:	4b2a      	ldr	r3, [pc, #168]	; (8005a10 <HAL_RCC_OscConfig+0x288>)
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	031b      	lsls	r3, r3, #12
 8005974:	4926      	ldr	r1, [pc, #152]	; (8005a10 <HAL_RCC_OscConfig+0x288>)
 8005976:	4313      	orrs	r3, r2
 8005978:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800597a:	e06f      	b.n	8005a5c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800597c:	4b24      	ldr	r3, [pc, #144]	; (8005a10 <HAL_RCC_OscConfig+0x288>)
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	061b      	lsls	r3, r3, #24
 800598a:	4921      	ldr	r1, [pc, #132]	; (8005a10 <HAL_RCC_OscConfig+0x288>)
 800598c:	4313      	orrs	r3, r2
 800598e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005990:	e064      	b.n	8005a5c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d047      	beq.n	8005a2a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800599a:	4b1d      	ldr	r3, [pc, #116]	; (8005a10 <HAL_RCC_OscConfig+0x288>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f023 0219 	bic.w	r2, r3, #25
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	491a      	ldr	r1, [pc, #104]	; (8005a10 <HAL_RCC_OscConfig+0x288>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ac:	f7fb fd2a 	bl	8001404 <HAL_GetTick>
 80059b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059b2:	e008      	b.n	80059c6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059b4:	f7fb fd26 	bl	8001404 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e332      	b.n	800602c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059c6:	4b12      	ldr	r3, [pc, #72]	; (8005a10 <HAL_RCC_OscConfig+0x288>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0304 	and.w	r3, r3, #4
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d0f0      	beq.n	80059b4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059d2:	f7fb fd47 	bl	8001464 <HAL_GetREVID>
 80059d6:	4603      	mov	r3, r0
 80059d8:	f241 0203 	movw	r2, #4099	; 0x1003
 80059dc:	4293      	cmp	r3, r2
 80059de:	d819      	bhi.n	8005a14 <HAL_RCC_OscConfig+0x28c>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	2b40      	cmp	r3, #64	; 0x40
 80059e6:	d108      	bne.n	80059fa <HAL_RCC_OscConfig+0x272>
 80059e8:	4b09      	ldr	r3, [pc, #36]	; (8005a10 <HAL_RCC_OscConfig+0x288>)
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80059f0:	4a07      	ldr	r2, [pc, #28]	; (8005a10 <HAL_RCC_OscConfig+0x288>)
 80059f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059f6:	6053      	str	r3, [r2, #4]
 80059f8:	e030      	b.n	8005a5c <HAL_RCC_OscConfig+0x2d4>
 80059fa:	4b05      	ldr	r3, [pc, #20]	; (8005a10 <HAL_RCC_OscConfig+0x288>)
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	031b      	lsls	r3, r3, #12
 8005a08:	4901      	ldr	r1, [pc, #4]	; (8005a10 <HAL_RCC_OscConfig+0x288>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	604b      	str	r3, [r1, #4]
 8005a0e:	e025      	b.n	8005a5c <HAL_RCC_OscConfig+0x2d4>
 8005a10:	58024400 	.word	0x58024400
 8005a14:	4b9a      	ldr	r3, [pc, #616]	; (8005c80 <HAL_RCC_OscConfig+0x4f8>)
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	061b      	lsls	r3, r3, #24
 8005a22:	4997      	ldr	r1, [pc, #604]	; (8005c80 <HAL_RCC_OscConfig+0x4f8>)
 8005a24:	4313      	orrs	r3, r2
 8005a26:	604b      	str	r3, [r1, #4]
 8005a28:	e018      	b.n	8005a5c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a2a:	4b95      	ldr	r3, [pc, #596]	; (8005c80 <HAL_RCC_OscConfig+0x4f8>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a94      	ldr	r2, [pc, #592]	; (8005c80 <HAL_RCC_OscConfig+0x4f8>)
 8005a30:	f023 0301 	bic.w	r3, r3, #1
 8005a34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a36:	f7fb fce5 	bl	8001404 <HAL_GetTick>
 8005a3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005a3c:	e008      	b.n	8005a50 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a3e:	f7fb fce1 	bl	8001404 <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d901      	bls.n	8005a50 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e2ed      	b.n	800602c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005a50:	4b8b      	ldr	r3, [pc, #556]	; (8005c80 <HAL_RCC_OscConfig+0x4f8>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0304 	and.w	r3, r3, #4
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1f0      	bne.n	8005a3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0310 	and.w	r3, r3, #16
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f000 80a9 	beq.w	8005bbc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a6a:	4b85      	ldr	r3, [pc, #532]	; (8005c80 <HAL_RCC_OscConfig+0x4f8>)
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a72:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a74:	4b82      	ldr	r3, [pc, #520]	; (8005c80 <HAL_RCC_OscConfig+0x4f8>)
 8005a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a78:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	2b08      	cmp	r3, #8
 8005a7e:	d007      	beq.n	8005a90 <HAL_RCC_OscConfig+0x308>
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	2b18      	cmp	r3, #24
 8005a84:	d13a      	bne.n	8005afc <HAL_RCC_OscConfig+0x374>
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f003 0303 	and.w	r3, r3, #3
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d135      	bne.n	8005afc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a90:	4b7b      	ldr	r3, [pc, #492]	; (8005c80 <HAL_RCC_OscConfig+0x4f8>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d005      	beq.n	8005aa8 <HAL_RCC_OscConfig+0x320>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	69db      	ldr	r3, [r3, #28]
 8005aa0:	2b80      	cmp	r3, #128	; 0x80
 8005aa2:	d001      	beq.n	8005aa8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e2c1      	b.n	800602c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005aa8:	f7fb fcdc 	bl	8001464 <HAL_GetREVID>
 8005aac:	4603      	mov	r3, r0
 8005aae:	f241 0203 	movw	r2, #4099	; 0x1003
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d817      	bhi.n	8005ae6 <HAL_RCC_OscConfig+0x35e>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	2b20      	cmp	r3, #32
 8005abc:	d108      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x348>
 8005abe:	4b70      	ldr	r3, [pc, #448]	; (8005c80 <HAL_RCC_OscConfig+0x4f8>)
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005ac6:	4a6e      	ldr	r2, [pc, #440]	; (8005c80 <HAL_RCC_OscConfig+0x4f8>)
 8005ac8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005acc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ace:	e075      	b.n	8005bbc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ad0:	4b6b      	ldr	r3, [pc, #428]	; (8005c80 <HAL_RCC_OscConfig+0x4f8>)
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a1b      	ldr	r3, [r3, #32]
 8005adc:	069b      	lsls	r3, r3, #26
 8005ade:	4968      	ldr	r1, [pc, #416]	; (8005c80 <HAL_RCC_OscConfig+0x4f8>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ae4:	e06a      	b.n	8005bbc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ae6:	4b66      	ldr	r3, [pc, #408]	; (8005c80 <HAL_RCC_OscConfig+0x4f8>)
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	061b      	lsls	r3, r3, #24
 8005af4:	4962      	ldr	r1, [pc, #392]	; (8005c80 <HAL_RCC_OscConfig+0x4f8>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005afa:	e05f      	b.n	8005bbc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	69db      	ldr	r3, [r3, #28]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d042      	beq.n	8005b8a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005b04:	4b5e      	ldr	r3, [pc, #376]	; (8005c80 <HAL_RCC_OscConfig+0x4f8>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a5d      	ldr	r2, [pc, #372]	; (8005c80 <HAL_RCC_OscConfig+0x4f8>)
 8005b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b10:	f7fb fc78 	bl	8001404 <HAL_GetTick>
 8005b14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b16:	e008      	b.n	8005b2a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005b18:	f7fb fc74 	bl	8001404 <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d901      	bls.n	8005b2a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e280      	b.n	800602c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b2a:	4b55      	ldr	r3, [pc, #340]	; (8005c80 <HAL_RCC_OscConfig+0x4f8>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d0f0      	beq.n	8005b18 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005b36:	f7fb fc95 	bl	8001464 <HAL_GetREVID>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d817      	bhi.n	8005b74 <HAL_RCC_OscConfig+0x3ec>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a1b      	ldr	r3, [r3, #32]
 8005b48:	2b20      	cmp	r3, #32
 8005b4a:	d108      	bne.n	8005b5e <HAL_RCC_OscConfig+0x3d6>
 8005b4c:	4b4c      	ldr	r3, [pc, #304]	; (8005c80 <HAL_RCC_OscConfig+0x4f8>)
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005b54:	4a4a      	ldr	r2, [pc, #296]	; (8005c80 <HAL_RCC_OscConfig+0x4f8>)
 8005b56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b5a:	6053      	str	r3, [r2, #4]
 8005b5c:	e02e      	b.n	8005bbc <HAL_RCC_OscConfig+0x434>
 8005b5e:	4b48      	ldr	r3, [pc, #288]	; (8005c80 <HAL_RCC_OscConfig+0x4f8>)
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	069b      	lsls	r3, r3, #26
 8005b6c:	4944      	ldr	r1, [pc, #272]	; (8005c80 <HAL_RCC_OscConfig+0x4f8>)
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	604b      	str	r3, [r1, #4]
 8005b72:	e023      	b.n	8005bbc <HAL_RCC_OscConfig+0x434>
 8005b74:	4b42      	ldr	r3, [pc, #264]	; (8005c80 <HAL_RCC_OscConfig+0x4f8>)
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a1b      	ldr	r3, [r3, #32]
 8005b80:	061b      	lsls	r3, r3, #24
 8005b82:	493f      	ldr	r1, [pc, #252]	; (8005c80 <HAL_RCC_OscConfig+0x4f8>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	60cb      	str	r3, [r1, #12]
 8005b88:	e018      	b.n	8005bbc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005b8a:	4b3d      	ldr	r3, [pc, #244]	; (8005c80 <HAL_RCC_OscConfig+0x4f8>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a3c      	ldr	r2, [pc, #240]	; (8005c80 <HAL_RCC_OscConfig+0x4f8>)
 8005b90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b96:	f7fb fc35 	bl	8001404 <HAL_GetTick>
 8005b9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b9c:	e008      	b.n	8005bb0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005b9e:	f7fb fc31 	bl	8001404 <HAL_GetTick>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d901      	bls.n	8005bb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e23d      	b.n	800602c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005bb0:	4b33      	ldr	r3, [pc, #204]	; (8005c80 <HAL_RCC_OscConfig+0x4f8>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1f0      	bne.n	8005b9e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0308 	and.w	r3, r3, #8
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d036      	beq.n	8005c36 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	695b      	ldr	r3, [r3, #20]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d019      	beq.n	8005c04 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bd0:	4b2b      	ldr	r3, [pc, #172]	; (8005c80 <HAL_RCC_OscConfig+0x4f8>)
 8005bd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bd4:	4a2a      	ldr	r2, [pc, #168]	; (8005c80 <HAL_RCC_OscConfig+0x4f8>)
 8005bd6:	f043 0301 	orr.w	r3, r3, #1
 8005bda:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bdc:	f7fb fc12 	bl	8001404 <HAL_GetTick>
 8005be0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005be2:	e008      	b.n	8005bf6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005be4:	f7fb fc0e 	bl	8001404 <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d901      	bls.n	8005bf6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e21a      	b.n	800602c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005bf6:	4b22      	ldr	r3, [pc, #136]	; (8005c80 <HAL_RCC_OscConfig+0x4f8>)
 8005bf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bfa:	f003 0302 	and.w	r3, r3, #2
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d0f0      	beq.n	8005be4 <HAL_RCC_OscConfig+0x45c>
 8005c02:	e018      	b.n	8005c36 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c04:	4b1e      	ldr	r3, [pc, #120]	; (8005c80 <HAL_RCC_OscConfig+0x4f8>)
 8005c06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c08:	4a1d      	ldr	r2, [pc, #116]	; (8005c80 <HAL_RCC_OscConfig+0x4f8>)
 8005c0a:	f023 0301 	bic.w	r3, r3, #1
 8005c0e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c10:	f7fb fbf8 	bl	8001404 <HAL_GetTick>
 8005c14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005c16:	e008      	b.n	8005c2a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c18:	f7fb fbf4 	bl	8001404 <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d901      	bls.n	8005c2a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e200      	b.n	800602c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005c2a:	4b15      	ldr	r3, [pc, #84]	; (8005c80 <HAL_RCC_OscConfig+0x4f8>)
 8005c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1f0      	bne.n	8005c18 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0320 	and.w	r3, r3, #32
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d039      	beq.n	8005cb6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d01c      	beq.n	8005c84 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005c4a:	4b0d      	ldr	r3, [pc, #52]	; (8005c80 <HAL_RCC_OscConfig+0x4f8>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a0c      	ldr	r2, [pc, #48]	; (8005c80 <HAL_RCC_OscConfig+0x4f8>)
 8005c50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005c54:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005c56:	f7fb fbd5 	bl	8001404 <HAL_GetTick>
 8005c5a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c5c:	e008      	b.n	8005c70 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c5e:	f7fb fbd1 	bl	8001404 <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d901      	bls.n	8005c70 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e1dd      	b.n	800602c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c70:	4b03      	ldr	r3, [pc, #12]	; (8005c80 <HAL_RCC_OscConfig+0x4f8>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d0f0      	beq.n	8005c5e <HAL_RCC_OscConfig+0x4d6>
 8005c7c:	e01b      	b.n	8005cb6 <HAL_RCC_OscConfig+0x52e>
 8005c7e:	bf00      	nop
 8005c80:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c84:	4b9b      	ldr	r3, [pc, #620]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a9a      	ldr	r2, [pc, #616]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005c8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c8e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005c90:	f7fb fbb8 	bl	8001404 <HAL_GetTick>
 8005c94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c96:	e008      	b.n	8005caa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c98:	f7fb fbb4 	bl	8001404 <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d901      	bls.n	8005caa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e1c0      	b.n	800602c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005caa:	4b92      	ldr	r3, [pc, #584]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1f0      	bne.n	8005c98 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0304 	and.w	r3, r3, #4
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	f000 8081 	beq.w	8005dc6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005cc4:	4b8c      	ldr	r3, [pc, #560]	; (8005ef8 <HAL_RCC_OscConfig+0x770>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a8b      	ldr	r2, [pc, #556]	; (8005ef8 <HAL_RCC_OscConfig+0x770>)
 8005cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005cd0:	f7fb fb98 	bl	8001404 <HAL_GetTick>
 8005cd4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cd6:	e008      	b.n	8005cea <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cd8:	f7fb fb94 	bl	8001404 <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	2b64      	cmp	r3, #100	; 0x64
 8005ce4:	d901      	bls.n	8005cea <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e1a0      	b.n	800602c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cea:	4b83      	ldr	r3, [pc, #524]	; (8005ef8 <HAL_RCC_OscConfig+0x770>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d0f0      	beq.n	8005cd8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d106      	bne.n	8005d0c <HAL_RCC_OscConfig+0x584>
 8005cfe:	4b7d      	ldr	r3, [pc, #500]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d02:	4a7c      	ldr	r2, [pc, #496]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005d04:	f043 0301 	orr.w	r3, r3, #1
 8005d08:	6713      	str	r3, [r2, #112]	; 0x70
 8005d0a:	e02d      	b.n	8005d68 <HAL_RCC_OscConfig+0x5e0>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10c      	bne.n	8005d2e <HAL_RCC_OscConfig+0x5a6>
 8005d14:	4b77      	ldr	r3, [pc, #476]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d18:	4a76      	ldr	r2, [pc, #472]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005d1a:	f023 0301 	bic.w	r3, r3, #1
 8005d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8005d20:	4b74      	ldr	r3, [pc, #464]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d24:	4a73      	ldr	r2, [pc, #460]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005d26:	f023 0304 	bic.w	r3, r3, #4
 8005d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8005d2c:	e01c      	b.n	8005d68 <HAL_RCC_OscConfig+0x5e0>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	2b05      	cmp	r3, #5
 8005d34:	d10c      	bne.n	8005d50 <HAL_RCC_OscConfig+0x5c8>
 8005d36:	4b6f      	ldr	r3, [pc, #444]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d3a:	4a6e      	ldr	r2, [pc, #440]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005d3c:	f043 0304 	orr.w	r3, r3, #4
 8005d40:	6713      	str	r3, [r2, #112]	; 0x70
 8005d42:	4b6c      	ldr	r3, [pc, #432]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d46:	4a6b      	ldr	r2, [pc, #428]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005d48:	f043 0301 	orr.w	r3, r3, #1
 8005d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8005d4e:	e00b      	b.n	8005d68 <HAL_RCC_OscConfig+0x5e0>
 8005d50:	4b68      	ldr	r3, [pc, #416]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d54:	4a67      	ldr	r2, [pc, #412]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005d56:	f023 0301 	bic.w	r3, r3, #1
 8005d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8005d5c:	4b65      	ldr	r3, [pc, #404]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d60:	4a64      	ldr	r2, [pc, #400]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005d62:	f023 0304 	bic.w	r3, r3, #4
 8005d66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d015      	beq.n	8005d9c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d70:	f7fb fb48 	bl	8001404 <HAL_GetTick>
 8005d74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d76:	e00a      	b.n	8005d8e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d78:	f7fb fb44 	bl	8001404 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d901      	bls.n	8005d8e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e14e      	b.n	800602c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d8e:	4b59      	ldr	r3, [pc, #356]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d92:	f003 0302 	and.w	r3, r3, #2
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d0ee      	beq.n	8005d78 <HAL_RCC_OscConfig+0x5f0>
 8005d9a:	e014      	b.n	8005dc6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d9c:	f7fb fb32 	bl	8001404 <HAL_GetTick>
 8005da0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005da2:	e00a      	b.n	8005dba <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005da4:	f7fb fb2e 	bl	8001404 <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d901      	bls.n	8005dba <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e138      	b.n	800602c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005dba:	4b4e      	ldr	r3, [pc, #312]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1ee      	bne.n	8005da4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f000 812d 	beq.w	800602a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005dd0:	4b48      	ldr	r3, [pc, #288]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dd8:	2b18      	cmp	r3, #24
 8005dda:	f000 80bd 	beq.w	8005f58 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	f040 809e 	bne.w	8005f24 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005de8:	4b42      	ldr	r3, [pc, #264]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a41      	ldr	r2, [pc, #260]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005dee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005df2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df4:	f7fb fb06 	bl	8001404 <HAL_GetTick>
 8005df8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005dfa:	e008      	b.n	8005e0e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dfc:	f7fb fb02 	bl	8001404 <HAL_GetTick>
 8005e00:	4602      	mov	r2, r0
 8005e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d901      	bls.n	8005e0e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e10e      	b.n	800602c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005e0e:	4b39      	ldr	r3, [pc, #228]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1f0      	bne.n	8005dfc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e1a:	4b36      	ldr	r3, [pc, #216]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005e1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e1e:	4b37      	ldr	r3, [pc, #220]	; (8005efc <HAL_RCC_OscConfig+0x774>)
 8005e20:	4013      	ands	r3, r2
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005e2a:	0112      	lsls	r2, r2, #4
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	4931      	ldr	r1, [pc, #196]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	628b      	str	r3, [r1, #40]	; 0x28
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e42:	3b01      	subs	r3, #1
 8005e44:	025b      	lsls	r3, r3, #9
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	431a      	orrs	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	041b      	lsls	r3, r3, #16
 8005e52:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e56:	431a      	orrs	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	061b      	lsls	r3, r3, #24
 8005e60:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e64:	4923      	ldr	r1, [pc, #140]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005e6a:	4b22      	ldr	r3, [pc, #136]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6e:	4a21      	ldr	r2, [pc, #132]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005e70:	f023 0301 	bic.w	r3, r3, #1
 8005e74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005e76:	4b1f      	ldr	r3, [pc, #124]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005e78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e7a:	4b21      	ldr	r3, [pc, #132]	; (8005f00 <HAL_RCC_OscConfig+0x778>)
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005e82:	00d2      	lsls	r2, r2, #3
 8005e84:	491b      	ldr	r1, [pc, #108]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005e86:	4313      	orrs	r3, r2
 8005e88:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005e8a:	4b1a      	ldr	r3, [pc, #104]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8e:	f023 020c 	bic.w	r2, r3, #12
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e96:	4917      	ldr	r1, [pc, #92]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005e9c:	4b15      	ldr	r3, [pc, #84]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea0:	f023 0202 	bic.w	r2, r3, #2
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea8:	4912      	ldr	r1, [pc, #72]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005eae:	4b11      	ldr	r3, [pc, #68]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb2:	4a10      	ldr	r2, [pc, #64]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eb8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005eba:	4b0e      	ldr	r3, [pc, #56]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ebe:	4a0d      	ldr	r2, [pc, #52]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ec4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005ec6:	4b0b      	ldr	r3, [pc, #44]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eca:	4a0a      	ldr	r2, [pc, #40]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005ecc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ed0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005ed2:	4b08      	ldr	r3, [pc, #32]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed6:	4a07      	ldr	r2, [pc, #28]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005ed8:	f043 0301 	orr.w	r3, r3, #1
 8005edc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ede:	4b05      	ldr	r3, [pc, #20]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a04      	ldr	r2, [pc, #16]	; (8005ef4 <HAL_RCC_OscConfig+0x76c>)
 8005ee4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ee8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eea:	f7fb fa8b 	bl	8001404 <HAL_GetTick>
 8005eee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ef0:	e011      	b.n	8005f16 <HAL_RCC_OscConfig+0x78e>
 8005ef2:	bf00      	nop
 8005ef4:	58024400 	.word	0x58024400
 8005ef8:	58024800 	.word	0x58024800
 8005efc:	fffffc0c 	.word	0xfffffc0c
 8005f00:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f04:	f7fb fa7e 	bl	8001404 <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d901      	bls.n	8005f16 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e08a      	b.n	800602c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005f16:	4b47      	ldr	r3, [pc, #284]	; (8006034 <HAL_RCC_OscConfig+0x8ac>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d0f0      	beq.n	8005f04 <HAL_RCC_OscConfig+0x77c>
 8005f22:	e082      	b.n	800602a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f24:	4b43      	ldr	r3, [pc, #268]	; (8006034 <HAL_RCC_OscConfig+0x8ac>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a42      	ldr	r2, [pc, #264]	; (8006034 <HAL_RCC_OscConfig+0x8ac>)
 8005f2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f30:	f7fb fa68 	bl	8001404 <HAL_GetTick>
 8005f34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f36:	e008      	b.n	8005f4a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f38:	f7fb fa64 	bl	8001404 <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d901      	bls.n	8005f4a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e070      	b.n	800602c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f4a:	4b3a      	ldr	r3, [pc, #232]	; (8006034 <HAL_RCC_OscConfig+0x8ac>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1f0      	bne.n	8005f38 <HAL_RCC_OscConfig+0x7b0>
 8005f56:	e068      	b.n	800602a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005f58:	4b36      	ldr	r3, [pc, #216]	; (8006034 <HAL_RCC_OscConfig+0x8ac>)
 8005f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f5c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005f5e:	4b35      	ldr	r3, [pc, #212]	; (8006034 <HAL_RCC_OscConfig+0x8ac>)
 8005f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f62:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d031      	beq.n	8005fd0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	f003 0203 	and.w	r2, r3, #3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d12a      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	091b      	lsrs	r3, r3, #4
 8005f7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d122      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f94:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d11a      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	0a5b      	lsrs	r3, r3, #9
 8005f9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d111      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	0c1b      	lsrs	r3, r3, #16
 8005fb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d108      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	0e1b      	lsrs	r3, r3, #24
 8005fc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fca:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d001      	beq.n	8005fd4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e02b      	b.n	800602c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005fd4:	4b17      	ldr	r3, [pc, #92]	; (8006034 <HAL_RCC_OscConfig+0x8ac>)
 8005fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd8:	08db      	lsrs	r3, r3, #3
 8005fda:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fde:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d01f      	beq.n	800602a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005fea:	4b12      	ldr	r3, [pc, #72]	; (8006034 <HAL_RCC_OscConfig+0x8ac>)
 8005fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fee:	4a11      	ldr	r2, [pc, #68]	; (8006034 <HAL_RCC_OscConfig+0x8ac>)
 8005ff0:	f023 0301 	bic.w	r3, r3, #1
 8005ff4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ff6:	f7fb fa05 	bl	8001404 <HAL_GetTick>
 8005ffa:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005ffc:	bf00      	nop
 8005ffe:	f7fb fa01 	bl	8001404 <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	4293      	cmp	r3, r2
 8006008:	d0f9      	beq.n	8005ffe <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800600a:	4b0a      	ldr	r3, [pc, #40]	; (8006034 <HAL_RCC_OscConfig+0x8ac>)
 800600c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800600e:	4b0a      	ldr	r3, [pc, #40]	; (8006038 <HAL_RCC_OscConfig+0x8b0>)
 8006010:	4013      	ands	r3, r2
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006016:	00d2      	lsls	r2, r2, #3
 8006018:	4906      	ldr	r1, [pc, #24]	; (8006034 <HAL_RCC_OscConfig+0x8ac>)
 800601a:	4313      	orrs	r3, r2
 800601c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800601e:	4b05      	ldr	r3, [pc, #20]	; (8006034 <HAL_RCC_OscConfig+0x8ac>)
 8006020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006022:	4a04      	ldr	r2, [pc, #16]	; (8006034 <HAL_RCC_OscConfig+0x8ac>)
 8006024:	f043 0301 	orr.w	r3, r3, #1
 8006028:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3730      	adds	r7, #48	; 0x30
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	58024400 	.word	0x58024400
 8006038:	ffff0007 	.word	0xffff0007

0800603c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d101      	bne.n	8006050 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e19c      	b.n	800638a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006050:	4b8a      	ldr	r3, [pc, #552]	; (800627c <HAL_RCC_ClockConfig+0x240>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 030f 	and.w	r3, r3, #15
 8006058:	683a      	ldr	r2, [r7, #0]
 800605a:	429a      	cmp	r2, r3
 800605c:	d910      	bls.n	8006080 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800605e:	4b87      	ldr	r3, [pc, #540]	; (800627c <HAL_RCC_ClockConfig+0x240>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f023 020f 	bic.w	r2, r3, #15
 8006066:	4985      	ldr	r1, [pc, #532]	; (800627c <HAL_RCC_ClockConfig+0x240>)
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	4313      	orrs	r3, r2
 800606c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800606e:	4b83      	ldr	r3, [pc, #524]	; (800627c <HAL_RCC_ClockConfig+0x240>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 030f 	and.w	r3, r3, #15
 8006076:	683a      	ldr	r2, [r7, #0]
 8006078:	429a      	cmp	r2, r3
 800607a:	d001      	beq.n	8006080 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e184      	b.n	800638a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0304 	and.w	r3, r3, #4
 8006088:	2b00      	cmp	r3, #0
 800608a:	d010      	beq.n	80060ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	691a      	ldr	r2, [r3, #16]
 8006090:	4b7b      	ldr	r3, [pc, #492]	; (8006280 <HAL_RCC_ClockConfig+0x244>)
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006098:	429a      	cmp	r2, r3
 800609a:	d908      	bls.n	80060ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800609c:	4b78      	ldr	r3, [pc, #480]	; (8006280 <HAL_RCC_ClockConfig+0x244>)
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	4975      	ldr	r1, [pc, #468]	; (8006280 <HAL_RCC_ClockConfig+0x244>)
 80060aa:	4313      	orrs	r3, r2
 80060ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0308 	and.w	r3, r3, #8
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d010      	beq.n	80060dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	695a      	ldr	r2, [r3, #20]
 80060be:	4b70      	ldr	r3, [pc, #448]	; (8006280 <HAL_RCC_ClockConfig+0x244>)
 80060c0:	69db      	ldr	r3, [r3, #28]
 80060c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d908      	bls.n	80060dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80060ca:	4b6d      	ldr	r3, [pc, #436]	; (8006280 <HAL_RCC_ClockConfig+0x244>)
 80060cc:	69db      	ldr	r3, [r3, #28]
 80060ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	496a      	ldr	r1, [pc, #424]	; (8006280 <HAL_RCC_ClockConfig+0x244>)
 80060d8:	4313      	orrs	r3, r2
 80060da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0310 	and.w	r3, r3, #16
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d010      	beq.n	800610a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	699a      	ldr	r2, [r3, #24]
 80060ec:	4b64      	ldr	r3, [pc, #400]	; (8006280 <HAL_RCC_ClockConfig+0x244>)
 80060ee:	69db      	ldr	r3, [r3, #28]
 80060f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d908      	bls.n	800610a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80060f8:	4b61      	ldr	r3, [pc, #388]	; (8006280 <HAL_RCC_ClockConfig+0x244>)
 80060fa:	69db      	ldr	r3, [r3, #28]
 80060fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	495e      	ldr	r1, [pc, #376]	; (8006280 <HAL_RCC_ClockConfig+0x244>)
 8006106:	4313      	orrs	r3, r2
 8006108:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0320 	and.w	r3, r3, #32
 8006112:	2b00      	cmp	r3, #0
 8006114:	d010      	beq.n	8006138 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	69da      	ldr	r2, [r3, #28]
 800611a:	4b59      	ldr	r3, [pc, #356]	; (8006280 <HAL_RCC_ClockConfig+0x244>)
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006122:	429a      	cmp	r2, r3
 8006124:	d908      	bls.n	8006138 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006126:	4b56      	ldr	r3, [pc, #344]	; (8006280 <HAL_RCC_ClockConfig+0x244>)
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	69db      	ldr	r3, [r3, #28]
 8006132:	4953      	ldr	r1, [pc, #332]	; (8006280 <HAL_RCC_ClockConfig+0x244>)
 8006134:	4313      	orrs	r3, r2
 8006136:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0302 	and.w	r3, r3, #2
 8006140:	2b00      	cmp	r3, #0
 8006142:	d010      	beq.n	8006166 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68da      	ldr	r2, [r3, #12]
 8006148:	4b4d      	ldr	r3, [pc, #308]	; (8006280 <HAL_RCC_ClockConfig+0x244>)
 800614a:	699b      	ldr	r3, [r3, #24]
 800614c:	f003 030f 	and.w	r3, r3, #15
 8006150:	429a      	cmp	r2, r3
 8006152:	d908      	bls.n	8006166 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006154:	4b4a      	ldr	r3, [pc, #296]	; (8006280 <HAL_RCC_ClockConfig+0x244>)
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	f023 020f 	bic.w	r2, r3, #15
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	4947      	ldr	r1, [pc, #284]	; (8006280 <HAL_RCC_ClockConfig+0x244>)
 8006162:	4313      	orrs	r3, r2
 8006164:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	2b00      	cmp	r3, #0
 8006170:	d055      	beq.n	800621e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006172:	4b43      	ldr	r3, [pc, #268]	; (8006280 <HAL_RCC_ClockConfig+0x244>)
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	4940      	ldr	r1, [pc, #256]	; (8006280 <HAL_RCC_ClockConfig+0x244>)
 8006180:	4313      	orrs	r3, r2
 8006182:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	2b02      	cmp	r3, #2
 800618a:	d107      	bne.n	800619c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800618c:	4b3c      	ldr	r3, [pc, #240]	; (8006280 <HAL_RCC_ClockConfig+0x244>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d121      	bne.n	80061dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e0f6      	b.n	800638a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	2b03      	cmp	r3, #3
 80061a2:	d107      	bne.n	80061b4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80061a4:	4b36      	ldr	r3, [pc, #216]	; (8006280 <HAL_RCC_ClockConfig+0x244>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d115      	bne.n	80061dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e0ea      	b.n	800638a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d107      	bne.n	80061cc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80061bc:	4b30      	ldr	r3, [pc, #192]	; (8006280 <HAL_RCC_ClockConfig+0x244>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d109      	bne.n	80061dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e0de      	b.n	800638a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061cc:	4b2c      	ldr	r3, [pc, #176]	; (8006280 <HAL_RCC_ClockConfig+0x244>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0304 	and.w	r3, r3, #4
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d101      	bne.n	80061dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e0d6      	b.n	800638a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80061dc:	4b28      	ldr	r3, [pc, #160]	; (8006280 <HAL_RCC_ClockConfig+0x244>)
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	f023 0207 	bic.w	r2, r3, #7
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	4925      	ldr	r1, [pc, #148]	; (8006280 <HAL_RCC_ClockConfig+0x244>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061ee:	f7fb f909 	bl	8001404 <HAL_GetTick>
 80061f2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061f4:	e00a      	b.n	800620c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061f6:	f7fb f905 	bl	8001404 <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	f241 3288 	movw	r2, #5000	; 0x1388
 8006204:	4293      	cmp	r3, r2
 8006206:	d901      	bls.n	800620c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e0be      	b.n	800638a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800620c:	4b1c      	ldr	r3, [pc, #112]	; (8006280 <HAL_RCC_ClockConfig+0x244>)
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	00db      	lsls	r3, r3, #3
 800621a:	429a      	cmp	r2, r3
 800621c:	d1eb      	bne.n	80061f6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0302 	and.w	r3, r3, #2
 8006226:	2b00      	cmp	r3, #0
 8006228:	d010      	beq.n	800624c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68da      	ldr	r2, [r3, #12]
 800622e:	4b14      	ldr	r3, [pc, #80]	; (8006280 <HAL_RCC_ClockConfig+0x244>)
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	f003 030f 	and.w	r3, r3, #15
 8006236:	429a      	cmp	r2, r3
 8006238:	d208      	bcs.n	800624c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800623a:	4b11      	ldr	r3, [pc, #68]	; (8006280 <HAL_RCC_ClockConfig+0x244>)
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	f023 020f 	bic.w	r2, r3, #15
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	490e      	ldr	r1, [pc, #56]	; (8006280 <HAL_RCC_ClockConfig+0x244>)
 8006248:	4313      	orrs	r3, r2
 800624a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800624c:	4b0b      	ldr	r3, [pc, #44]	; (800627c <HAL_RCC_ClockConfig+0x240>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 030f 	and.w	r3, r3, #15
 8006254:	683a      	ldr	r2, [r7, #0]
 8006256:	429a      	cmp	r2, r3
 8006258:	d214      	bcs.n	8006284 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800625a:	4b08      	ldr	r3, [pc, #32]	; (800627c <HAL_RCC_ClockConfig+0x240>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f023 020f 	bic.w	r2, r3, #15
 8006262:	4906      	ldr	r1, [pc, #24]	; (800627c <HAL_RCC_ClockConfig+0x240>)
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	4313      	orrs	r3, r2
 8006268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800626a:	4b04      	ldr	r3, [pc, #16]	; (800627c <HAL_RCC_ClockConfig+0x240>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 030f 	and.w	r3, r3, #15
 8006272:	683a      	ldr	r2, [r7, #0]
 8006274:	429a      	cmp	r2, r3
 8006276:	d005      	beq.n	8006284 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e086      	b.n	800638a <HAL_RCC_ClockConfig+0x34e>
 800627c:	52002000 	.word	0x52002000
 8006280:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0304 	and.w	r3, r3, #4
 800628c:	2b00      	cmp	r3, #0
 800628e:	d010      	beq.n	80062b2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	691a      	ldr	r2, [r3, #16]
 8006294:	4b3f      	ldr	r3, [pc, #252]	; (8006394 <HAL_RCC_ClockConfig+0x358>)
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800629c:	429a      	cmp	r2, r3
 800629e:	d208      	bcs.n	80062b2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80062a0:	4b3c      	ldr	r3, [pc, #240]	; (8006394 <HAL_RCC_ClockConfig+0x358>)
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	4939      	ldr	r1, [pc, #228]	; (8006394 <HAL_RCC_ClockConfig+0x358>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0308 	and.w	r3, r3, #8
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d010      	beq.n	80062e0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	695a      	ldr	r2, [r3, #20]
 80062c2:	4b34      	ldr	r3, [pc, #208]	; (8006394 <HAL_RCC_ClockConfig+0x358>)
 80062c4:	69db      	ldr	r3, [r3, #28]
 80062c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d208      	bcs.n	80062e0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80062ce:	4b31      	ldr	r3, [pc, #196]	; (8006394 <HAL_RCC_ClockConfig+0x358>)
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	695b      	ldr	r3, [r3, #20]
 80062da:	492e      	ldr	r1, [pc, #184]	; (8006394 <HAL_RCC_ClockConfig+0x358>)
 80062dc:	4313      	orrs	r3, r2
 80062de:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0310 	and.w	r3, r3, #16
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d010      	beq.n	800630e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	699a      	ldr	r2, [r3, #24]
 80062f0:	4b28      	ldr	r3, [pc, #160]	; (8006394 <HAL_RCC_ClockConfig+0x358>)
 80062f2:	69db      	ldr	r3, [r3, #28]
 80062f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d208      	bcs.n	800630e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80062fc:	4b25      	ldr	r3, [pc, #148]	; (8006394 <HAL_RCC_ClockConfig+0x358>)
 80062fe:	69db      	ldr	r3, [r3, #28]
 8006300:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	4922      	ldr	r1, [pc, #136]	; (8006394 <HAL_RCC_ClockConfig+0x358>)
 800630a:	4313      	orrs	r3, r2
 800630c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 0320 	and.w	r3, r3, #32
 8006316:	2b00      	cmp	r3, #0
 8006318:	d010      	beq.n	800633c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	69da      	ldr	r2, [r3, #28]
 800631e:	4b1d      	ldr	r3, [pc, #116]	; (8006394 <HAL_RCC_ClockConfig+0x358>)
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006326:	429a      	cmp	r2, r3
 8006328:	d208      	bcs.n	800633c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800632a:	4b1a      	ldr	r3, [pc, #104]	; (8006394 <HAL_RCC_ClockConfig+0x358>)
 800632c:	6a1b      	ldr	r3, [r3, #32]
 800632e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	69db      	ldr	r3, [r3, #28]
 8006336:	4917      	ldr	r1, [pc, #92]	; (8006394 <HAL_RCC_ClockConfig+0x358>)
 8006338:	4313      	orrs	r3, r2
 800633a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800633c:	f000 f834 	bl	80063a8 <HAL_RCC_GetSysClockFreq>
 8006340:	4602      	mov	r2, r0
 8006342:	4b14      	ldr	r3, [pc, #80]	; (8006394 <HAL_RCC_ClockConfig+0x358>)
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	0a1b      	lsrs	r3, r3, #8
 8006348:	f003 030f 	and.w	r3, r3, #15
 800634c:	4912      	ldr	r1, [pc, #72]	; (8006398 <HAL_RCC_ClockConfig+0x35c>)
 800634e:	5ccb      	ldrb	r3, [r1, r3]
 8006350:	f003 031f 	and.w	r3, r3, #31
 8006354:	fa22 f303 	lsr.w	r3, r2, r3
 8006358:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800635a:	4b0e      	ldr	r3, [pc, #56]	; (8006394 <HAL_RCC_ClockConfig+0x358>)
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	f003 030f 	and.w	r3, r3, #15
 8006362:	4a0d      	ldr	r2, [pc, #52]	; (8006398 <HAL_RCC_ClockConfig+0x35c>)
 8006364:	5cd3      	ldrb	r3, [r2, r3]
 8006366:	f003 031f 	and.w	r3, r3, #31
 800636a:	693a      	ldr	r2, [r7, #16]
 800636c:	fa22 f303 	lsr.w	r3, r2, r3
 8006370:	4a0a      	ldr	r2, [pc, #40]	; (800639c <HAL_RCC_ClockConfig+0x360>)
 8006372:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006374:	4a0a      	ldr	r2, [pc, #40]	; (80063a0 <HAL_RCC_ClockConfig+0x364>)
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800637a:	4b0a      	ldr	r3, [pc, #40]	; (80063a4 <HAL_RCC_ClockConfig+0x368>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4618      	mov	r0, r3
 8006380:	f7fa fff6 	bl	8001370 <HAL_InitTick>
 8006384:	4603      	mov	r3, r0
 8006386:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006388:	7bfb      	ldrb	r3, [r7, #15]
}
 800638a:	4618      	mov	r0, r3
 800638c:	3718      	adds	r7, #24
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	58024400 	.word	0x58024400
 8006398:	0800d010 	.word	0x0800d010
 800639c:	24000004 	.word	0x24000004
 80063a0:	24000000 	.word	0x24000000
 80063a4:	24000008 	.word	0x24000008

080063a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b089      	sub	sp, #36	; 0x24
 80063ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063ae:	4bb3      	ldr	r3, [pc, #716]	; (800667c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063b6:	2b18      	cmp	r3, #24
 80063b8:	f200 8155 	bhi.w	8006666 <HAL_RCC_GetSysClockFreq+0x2be>
 80063bc:	a201      	add	r2, pc, #4	; (adr r2, 80063c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80063be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c2:	bf00      	nop
 80063c4:	08006429 	.word	0x08006429
 80063c8:	08006667 	.word	0x08006667
 80063cc:	08006667 	.word	0x08006667
 80063d0:	08006667 	.word	0x08006667
 80063d4:	08006667 	.word	0x08006667
 80063d8:	08006667 	.word	0x08006667
 80063dc:	08006667 	.word	0x08006667
 80063e0:	08006667 	.word	0x08006667
 80063e4:	0800644f 	.word	0x0800644f
 80063e8:	08006667 	.word	0x08006667
 80063ec:	08006667 	.word	0x08006667
 80063f0:	08006667 	.word	0x08006667
 80063f4:	08006667 	.word	0x08006667
 80063f8:	08006667 	.word	0x08006667
 80063fc:	08006667 	.word	0x08006667
 8006400:	08006667 	.word	0x08006667
 8006404:	08006455 	.word	0x08006455
 8006408:	08006667 	.word	0x08006667
 800640c:	08006667 	.word	0x08006667
 8006410:	08006667 	.word	0x08006667
 8006414:	08006667 	.word	0x08006667
 8006418:	08006667 	.word	0x08006667
 800641c:	08006667 	.word	0x08006667
 8006420:	08006667 	.word	0x08006667
 8006424:	0800645b 	.word	0x0800645b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006428:	4b94      	ldr	r3, [pc, #592]	; (800667c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0320 	and.w	r3, r3, #32
 8006430:	2b00      	cmp	r3, #0
 8006432:	d009      	beq.n	8006448 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006434:	4b91      	ldr	r3, [pc, #580]	; (800667c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	08db      	lsrs	r3, r3, #3
 800643a:	f003 0303 	and.w	r3, r3, #3
 800643e:	4a90      	ldr	r2, [pc, #576]	; (8006680 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006440:	fa22 f303 	lsr.w	r3, r2, r3
 8006444:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006446:	e111      	b.n	800666c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006448:	4b8d      	ldr	r3, [pc, #564]	; (8006680 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800644a:	61bb      	str	r3, [r7, #24]
      break;
 800644c:	e10e      	b.n	800666c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800644e:	4b8d      	ldr	r3, [pc, #564]	; (8006684 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006450:	61bb      	str	r3, [r7, #24]
      break;
 8006452:	e10b      	b.n	800666c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006454:	4b8c      	ldr	r3, [pc, #560]	; (8006688 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006456:	61bb      	str	r3, [r7, #24]
      break;
 8006458:	e108      	b.n	800666c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800645a:	4b88      	ldr	r3, [pc, #544]	; (800667c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800645c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645e:	f003 0303 	and.w	r3, r3, #3
 8006462:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006464:	4b85      	ldr	r3, [pc, #532]	; (800667c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006468:	091b      	lsrs	r3, r3, #4
 800646a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800646e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006470:	4b82      	ldr	r3, [pc, #520]	; (800667c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800647a:	4b80      	ldr	r3, [pc, #512]	; (800667c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800647c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800647e:	08db      	lsrs	r3, r3, #3
 8006480:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	fb02 f303 	mul.w	r3, r2, r3
 800648a:	ee07 3a90 	vmov	s15, r3
 800648e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006492:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	2b00      	cmp	r3, #0
 800649a:	f000 80e1 	beq.w	8006660 <HAL_RCC_GetSysClockFreq+0x2b8>
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	f000 8083 	beq.w	80065ac <HAL_RCC_GetSysClockFreq+0x204>
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	f200 80a1 	bhi.w	80065f0 <HAL_RCC_GetSysClockFreq+0x248>
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d003      	beq.n	80064bc <HAL_RCC_GetSysClockFreq+0x114>
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d056      	beq.n	8006568 <HAL_RCC_GetSysClockFreq+0x1c0>
 80064ba:	e099      	b.n	80065f0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064bc:	4b6f      	ldr	r3, [pc, #444]	; (800667c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 0320 	and.w	r3, r3, #32
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d02d      	beq.n	8006524 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064c8:	4b6c      	ldr	r3, [pc, #432]	; (800667c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	08db      	lsrs	r3, r3, #3
 80064ce:	f003 0303 	and.w	r3, r3, #3
 80064d2:	4a6b      	ldr	r2, [pc, #428]	; (8006680 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80064d4:	fa22 f303 	lsr.w	r3, r2, r3
 80064d8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	ee07 3a90 	vmov	s15, r3
 80064e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	ee07 3a90 	vmov	s15, r3
 80064ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064f2:	4b62      	ldr	r3, [pc, #392]	; (800667c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064fa:	ee07 3a90 	vmov	s15, r3
 80064fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006502:	ed97 6a02 	vldr	s12, [r7, #8]
 8006506:	eddf 5a61 	vldr	s11, [pc, #388]	; 800668c <HAL_RCC_GetSysClockFreq+0x2e4>
 800650a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800650e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006512:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800651a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800651e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006522:	e087      	b.n	8006634 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	ee07 3a90 	vmov	s15, r3
 800652a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800652e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006690 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006536:	4b51      	ldr	r3, [pc, #324]	; (800667c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800653e:	ee07 3a90 	vmov	s15, r3
 8006542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006546:	ed97 6a02 	vldr	s12, [r7, #8]
 800654a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800668c <HAL_RCC_GetSysClockFreq+0x2e4>
 800654e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006556:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800655a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800655e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006562:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006566:	e065      	b.n	8006634 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	ee07 3a90 	vmov	s15, r3
 800656e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006572:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006694 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800657a:	4b40      	ldr	r3, [pc, #256]	; (800667c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800657c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800657e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006582:	ee07 3a90 	vmov	s15, r3
 8006586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800658a:	ed97 6a02 	vldr	s12, [r7, #8]
 800658e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800668c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800659a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800659e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80065aa:	e043      	b.n	8006634 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	ee07 3a90 	vmov	s15, r3
 80065b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065b6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006698 <HAL_RCC_GetSysClockFreq+0x2f0>
 80065ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065be:	4b2f      	ldr	r3, [pc, #188]	; (800667c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065c6:	ee07 3a90 	vmov	s15, r3
 80065ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80065d2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800668c <HAL_RCC_GetSysClockFreq+0x2e4>
 80065d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80065ee:	e021      	b.n	8006634 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	ee07 3a90 	vmov	s15, r3
 80065f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065fa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006694 <HAL_RCC_GetSysClockFreq+0x2ec>
 80065fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006602:	4b1e      	ldr	r3, [pc, #120]	; (800667c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800660a:	ee07 3a90 	vmov	s15, r3
 800660e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006612:	ed97 6a02 	vldr	s12, [r7, #8]
 8006616:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800668c <HAL_RCC_GetSysClockFreq+0x2e4>
 800661a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800661e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800662a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800662e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006632:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006634:	4b11      	ldr	r3, [pc, #68]	; (800667c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006638:	0a5b      	lsrs	r3, r3, #9
 800663a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800663e:	3301      	adds	r3, #1
 8006640:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	ee07 3a90 	vmov	s15, r3
 8006648:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800664c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006650:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006654:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006658:	ee17 3a90 	vmov	r3, s15
 800665c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800665e:	e005      	b.n	800666c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006660:	2300      	movs	r3, #0
 8006662:	61bb      	str	r3, [r7, #24]
      break;
 8006664:	e002      	b.n	800666c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006666:	4b07      	ldr	r3, [pc, #28]	; (8006684 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006668:	61bb      	str	r3, [r7, #24]
      break;
 800666a:	bf00      	nop
  }

  return sysclockfreq;
 800666c:	69bb      	ldr	r3, [r7, #24]
}
 800666e:	4618      	mov	r0, r3
 8006670:	3724      	adds	r7, #36	; 0x24
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	58024400 	.word	0x58024400
 8006680:	03d09000 	.word	0x03d09000
 8006684:	003d0900 	.word	0x003d0900
 8006688:	017d7840 	.word	0x017d7840
 800668c:	46000000 	.word	0x46000000
 8006690:	4c742400 	.word	0x4c742400
 8006694:	4a742400 	.word	0x4a742400
 8006698:	4bbebc20 	.word	0x4bbebc20

0800669c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80066a2:	f7ff fe81 	bl	80063a8 <HAL_RCC_GetSysClockFreq>
 80066a6:	4602      	mov	r2, r0
 80066a8:	4b10      	ldr	r3, [pc, #64]	; (80066ec <HAL_RCC_GetHCLKFreq+0x50>)
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	0a1b      	lsrs	r3, r3, #8
 80066ae:	f003 030f 	and.w	r3, r3, #15
 80066b2:	490f      	ldr	r1, [pc, #60]	; (80066f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80066b4:	5ccb      	ldrb	r3, [r1, r3]
 80066b6:	f003 031f 	and.w	r3, r3, #31
 80066ba:	fa22 f303 	lsr.w	r3, r2, r3
 80066be:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80066c0:	4b0a      	ldr	r3, [pc, #40]	; (80066ec <HAL_RCC_GetHCLKFreq+0x50>)
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	f003 030f 	and.w	r3, r3, #15
 80066c8:	4a09      	ldr	r2, [pc, #36]	; (80066f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80066ca:	5cd3      	ldrb	r3, [r2, r3]
 80066cc:	f003 031f 	and.w	r3, r3, #31
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	fa22 f303 	lsr.w	r3, r2, r3
 80066d6:	4a07      	ldr	r2, [pc, #28]	; (80066f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80066d8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80066da:	4a07      	ldr	r2, [pc, #28]	; (80066f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80066e0:	4b04      	ldr	r3, [pc, #16]	; (80066f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80066e2:	681b      	ldr	r3, [r3, #0]
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3708      	adds	r7, #8
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	58024400 	.word	0x58024400
 80066f0:	0800d010 	.word	0x0800d010
 80066f4:	24000004 	.word	0x24000004
 80066f8:	24000000 	.word	0x24000000

080066fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006700:	f7ff ffcc 	bl	800669c <HAL_RCC_GetHCLKFreq>
 8006704:	4602      	mov	r2, r0
 8006706:	4b06      	ldr	r3, [pc, #24]	; (8006720 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006708:	69db      	ldr	r3, [r3, #28]
 800670a:	091b      	lsrs	r3, r3, #4
 800670c:	f003 0307 	and.w	r3, r3, #7
 8006710:	4904      	ldr	r1, [pc, #16]	; (8006724 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006712:	5ccb      	ldrb	r3, [r1, r3]
 8006714:	f003 031f 	and.w	r3, r3, #31
 8006718:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800671c:	4618      	mov	r0, r3
 800671e:	bd80      	pop	{r7, pc}
 8006720:	58024400 	.word	0x58024400
 8006724:	0800d010 	.word	0x0800d010

08006728 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800672c:	f7ff ffb6 	bl	800669c <HAL_RCC_GetHCLKFreq>
 8006730:	4602      	mov	r2, r0
 8006732:	4b06      	ldr	r3, [pc, #24]	; (800674c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006734:	69db      	ldr	r3, [r3, #28]
 8006736:	0a1b      	lsrs	r3, r3, #8
 8006738:	f003 0307 	and.w	r3, r3, #7
 800673c:	4904      	ldr	r1, [pc, #16]	; (8006750 <HAL_RCC_GetPCLK2Freq+0x28>)
 800673e:	5ccb      	ldrb	r3, [r1, r3]
 8006740:	f003 031f 	and.w	r3, r3, #31
 8006744:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006748:	4618      	mov	r0, r3
 800674a:	bd80      	pop	{r7, pc}
 800674c:	58024400 	.word	0x58024400
 8006750:	0800d010 	.word	0x0800d010

08006754 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006758:	b0ca      	sub	sp, #296	; 0x128
 800675a:	af00      	add	r7, sp, #0
 800675c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006760:	2300      	movs	r3, #0
 8006762:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006766:	2300      	movs	r3, #0
 8006768:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800676c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006774:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006778:	2500      	movs	r5, #0
 800677a:	ea54 0305 	orrs.w	r3, r4, r5
 800677e:	d049      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006784:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006786:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800678a:	d02f      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x98>
 800678c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006790:	d828      	bhi.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006792:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006796:	d01a      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006798:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800679c:	d822      	bhi.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d003      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80067a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067a6:	d007      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80067a8:	e01c      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067aa:	4bb8      	ldr	r3, [pc, #736]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ae:	4ab7      	ldr	r2, [pc, #732]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80067b6:	e01a      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80067b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067bc:	3308      	adds	r3, #8
 80067be:	2102      	movs	r1, #2
 80067c0:	4618      	mov	r0, r3
 80067c2:	f002 fb61 	bl	8008e88 <RCCEx_PLL2_Config>
 80067c6:	4603      	mov	r3, r0
 80067c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80067cc:	e00f      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067d2:	3328      	adds	r3, #40	; 0x28
 80067d4:	2102      	movs	r1, #2
 80067d6:	4618      	mov	r0, r3
 80067d8:	f002 fc08 	bl	8008fec <RCCEx_PLL3_Config>
 80067dc:	4603      	mov	r3, r0
 80067de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80067e2:	e004      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80067ea:	e000      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80067ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10a      	bne.n	800680c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80067f6:	4ba5      	ldr	r3, [pc, #660]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067fa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80067fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006802:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006804:	4aa1      	ldr	r2, [pc, #644]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006806:	430b      	orrs	r3, r1
 8006808:	6513      	str	r3, [r2, #80]	; 0x50
 800680a:	e003      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800680c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006810:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006814:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006820:	f04f 0900 	mov.w	r9, #0
 8006824:	ea58 0309 	orrs.w	r3, r8, r9
 8006828:	d047      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800682a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800682e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006830:	2b04      	cmp	r3, #4
 8006832:	d82a      	bhi.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006834:	a201      	add	r2, pc, #4	; (adr r2, 800683c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800683a:	bf00      	nop
 800683c:	08006851 	.word	0x08006851
 8006840:	0800685f 	.word	0x0800685f
 8006844:	08006875 	.word	0x08006875
 8006848:	08006893 	.word	0x08006893
 800684c:	08006893 	.word	0x08006893
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006850:	4b8e      	ldr	r3, [pc, #568]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006854:	4a8d      	ldr	r2, [pc, #564]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006856:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800685a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800685c:	e01a      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800685e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006862:	3308      	adds	r3, #8
 8006864:	2100      	movs	r1, #0
 8006866:	4618      	mov	r0, r3
 8006868:	f002 fb0e 	bl	8008e88 <RCCEx_PLL2_Config>
 800686c:	4603      	mov	r3, r0
 800686e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006872:	e00f      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006874:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006878:	3328      	adds	r3, #40	; 0x28
 800687a:	2100      	movs	r1, #0
 800687c:	4618      	mov	r0, r3
 800687e:	f002 fbb5 	bl	8008fec <RCCEx_PLL3_Config>
 8006882:	4603      	mov	r3, r0
 8006884:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006888:	e004      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006890:	e000      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006892:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006894:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006898:	2b00      	cmp	r3, #0
 800689a:	d10a      	bne.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800689c:	4b7b      	ldr	r3, [pc, #492]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800689e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068a0:	f023 0107 	bic.w	r1, r3, #7
 80068a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068aa:	4a78      	ldr	r2, [pc, #480]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068ac:	430b      	orrs	r3, r1
 80068ae:	6513      	str	r3, [r2, #80]	; 0x50
 80068b0:	e003      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80068ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80068c6:	f04f 0b00 	mov.w	fp, #0
 80068ca:	ea5a 030b 	orrs.w	r3, sl, fp
 80068ce:	d04c      	beq.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80068d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068da:	d030      	beq.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80068dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068e0:	d829      	bhi.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80068e2:	2bc0      	cmp	r3, #192	; 0xc0
 80068e4:	d02d      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80068e6:	2bc0      	cmp	r3, #192	; 0xc0
 80068e8:	d825      	bhi.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80068ea:	2b80      	cmp	r3, #128	; 0x80
 80068ec:	d018      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80068ee:	2b80      	cmp	r3, #128	; 0x80
 80068f0:	d821      	bhi.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d002      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80068f6:	2b40      	cmp	r3, #64	; 0x40
 80068f8:	d007      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80068fa:	e01c      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068fc:	4b63      	ldr	r3, [pc, #396]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006900:	4a62      	ldr	r2, [pc, #392]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006906:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006908:	e01c      	b.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800690a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800690e:	3308      	adds	r3, #8
 8006910:	2100      	movs	r1, #0
 8006912:	4618      	mov	r0, r3
 8006914:	f002 fab8 	bl	8008e88 <RCCEx_PLL2_Config>
 8006918:	4603      	mov	r3, r0
 800691a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800691e:	e011      	b.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006920:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006924:	3328      	adds	r3, #40	; 0x28
 8006926:	2100      	movs	r1, #0
 8006928:	4618      	mov	r0, r3
 800692a:	f002 fb5f 	bl	8008fec <RCCEx_PLL3_Config>
 800692e:	4603      	mov	r3, r0
 8006930:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006934:	e006      	b.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800693c:	e002      	b.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800693e:	bf00      	nop
 8006940:	e000      	b.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006942:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006944:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006948:	2b00      	cmp	r3, #0
 800694a:	d10a      	bne.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800694c:	4b4f      	ldr	r3, [pc, #316]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800694e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006950:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006954:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800695a:	4a4c      	ldr	r2, [pc, #304]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800695c:	430b      	orrs	r3, r1
 800695e:	6513      	str	r3, [r2, #80]	; 0x50
 8006960:	e003      	b.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006962:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006966:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800696a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800696e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006972:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006976:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800697a:	2300      	movs	r3, #0
 800697c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006980:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8006984:	460b      	mov	r3, r1
 8006986:	4313      	orrs	r3, r2
 8006988:	d053      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800698a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800698e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006992:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006996:	d035      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006998:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800699c:	d82e      	bhi.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800699e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80069a2:	d031      	beq.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80069a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80069a8:	d828      	bhi.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80069aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069ae:	d01a      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80069b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069b4:	d822      	bhi.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d003      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80069ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069be:	d007      	beq.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80069c0:	e01c      	b.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069c2:	4b32      	ldr	r3, [pc, #200]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c6:	4a31      	ldr	r2, [pc, #196]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80069ce:	e01c      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069d4:	3308      	adds	r3, #8
 80069d6:	2100      	movs	r1, #0
 80069d8:	4618      	mov	r0, r3
 80069da:	f002 fa55 	bl	8008e88 <RCCEx_PLL2_Config>
 80069de:	4603      	mov	r3, r0
 80069e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80069e4:	e011      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80069e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069ea:	3328      	adds	r3, #40	; 0x28
 80069ec:	2100      	movs	r1, #0
 80069ee:	4618      	mov	r0, r3
 80069f0:	f002 fafc 	bl	8008fec <RCCEx_PLL3_Config>
 80069f4:	4603      	mov	r3, r0
 80069f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80069fa:	e006      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006a02:	e002      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006a04:	bf00      	nop
 8006a06:	e000      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006a08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10b      	bne.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006a12:	4b1e      	ldr	r3, [pc, #120]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a16:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006a22:	4a1a      	ldr	r2, [pc, #104]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a24:	430b      	orrs	r3, r1
 8006a26:	6593      	str	r3, [r2, #88]	; 0x58
 8006a28:	e003      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006a3e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006a42:	2300      	movs	r3, #0
 8006a44:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006a48:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	d056      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a56:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006a5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a5e:	d038      	beq.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006a60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a64:	d831      	bhi.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006a66:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a6a:	d034      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006a6c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a70:	d82b      	bhi.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006a72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a76:	d01d      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006a78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a7c:	d825      	bhi.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d006      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006a82:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a86:	d00a      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006a88:	e01f      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006a8a:	bf00      	nop
 8006a8c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a90:	4ba2      	ldr	r3, [pc, #648]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a94:	4aa1      	ldr	r2, [pc, #644]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a9c:	e01c      	b.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aa2:	3308      	adds	r3, #8
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f002 f9ee 	bl	8008e88 <RCCEx_PLL2_Config>
 8006aac:	4603      	mov	r3, r0
 8006aae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006ab2:	e011      	b.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ab8:	3328      	adds	r3, #40	; 0x28
 8006aba:	2100      	movs	r1, #0
 8006abc:	4618      	mov	r0, r3
 8006abe:	f002 fa95 	bl	8008fec <RCCEx_PLL3_Config>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ac8:	e006      	b.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006ad0:	e002      	b.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006ad2:	bf00      	nop
 8006ad4:	e000      	b.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006ad6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ad8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d10b      	bne.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006ae0:	4b8e      	ldr	r3, [pc, #568]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ae4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006af0:	4a8a      	ldr	r2, [pc, #552]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006af2:	430b      	orrs	r3, r1
 8006af4:	6593      	str	r3, [r2, #88]	; 0x58
 8006af6:	e003      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006af8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006afc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b08:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006b0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b10:	2300      	movs	r3, #0
 8006b12:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006b16:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	d03a      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b26:	2b30      	cmp	r3, #48	; 0x30
 8006b28:	d01f      	beq.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006b2a:	2b30      	cmp	r3, #48	; 0x30
 8006b2c:	d819      	bhi.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006b2e:	2b20      	cmp	r3, #32
 8006b30:	d00c      	beq.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006b32:	2b20      	cmp	r3, #32
 8006b34:	d815      	bhi.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d019      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006b3a:	2b10      	cmp	r3, #16
 8006b3c:	d111      	bne.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b3e:	4b77      	ldr	r3, [pc, #476]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b42:	4a76      	ldr	r2, [pc, #472]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006b4a:	e011      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b50:	3308      	adds	r3, #8
 8006b52:	2102      	movs	r1, #2
 8006b54:	4618      	mov	r0, r3
 8006b56:	f002 f997 	bl	8008e88 <RCCEx_PLL2_Config>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006b60:	e006      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006b68:	e002      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006b6a:	bf00      	nop
 8006b6c:	e000      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006b6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10a      	bne.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006b78:	4b68      	ldr	r3, [pc, #416]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b7c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b86:	4a65      	ldr	r2, [pc, #404]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b88:	430b      	orrs	r3, r1
 8006b8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b8c:	e003      	b.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006ba2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006bac:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	d051      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bc0:	d035      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006bc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bc6:	d82e      	bhi.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006bc8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006bcc:	d031      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006bce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006bd2:	d828      	bhi.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006bd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bd8:	d01a      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bde:	d822      	bhi.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d003      	beq.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006be8:	d007      	beq.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006bea:	e01c      	b.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bec:	4b4b      	ldr	r3, [pc, #300]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf0:	4a4a      	ldr	r2, [pc, #296]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006bf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bf6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006bf8:	e01c      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bfe:	3308      	adds	r3, #8
 8006c00:	2100      	movs	r1, #0
 8006c02:	4618      	mov	r0, r3
 8006c04:	f002 f940 	bl	8008e88 <RCCEx_PLL2_Config>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006c0e:	e011      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c14:	3328      	adds	r3, #40	; 0x28
 8006c16:	2100      	movs	r1, #0
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f002 f9e7 	bl	8008fec <RCCEx_PLL3_Config>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006c24:	e006      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006c2c:	e002      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006c2e:	bf00      	nop
 8006c30:	e000      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006c32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d10a      	bne.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006c3c:	4b37      	ldr	r3, [pc, #220]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c40:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c4a:	4a34      	ldr	r2, [pc, #208]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c4c:	430b      	orrs	r3, r1
 8006c4e:	6513      	str	r3, [r2, #80]	; 0x50
 8006c50:	e003      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c62:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006c66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006c70:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006c74:	460b      	mov	r3, r1
 8006c76:	4313      	orrs	r3, r2
 8006c78:	d056      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c84:	d033      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006c86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c8a:	d82c      	bhi.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006c8c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c90:	d02f      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006c92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c96:	d826      	bhi.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006c98:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c9c:	d02b      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006c9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ca2:	d820      	bhi.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006ca4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ca8:	d012      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006caa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cae:	d81a      	bhi.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d022      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cb8:	d115      	bne.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cbe:	3308      	adds	r3, #8
 8006cc0:	2101      	movs	r1, #1
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f002 f8e0 	bl	8008e88 <RCCEx_PLL2_Config>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006cce:	e015      	b.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cd4:	3328      	adds	r3, #40	; 0x28
 8006cd6:	2101      	movs	r1, #1
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f002 f987 	bl	8008fec <RCCEx_PLL3_Config>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006ce4:	e00a      	b.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006cec:	e006      	b.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006cee:	bf00      	nop
 8006cf0:	e004      	b.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006cf2:	bf00      	nop
 8006cf4:	e002      	b.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006cf6:	bf00      	nop
 8006cf8:	e000      	b.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006cfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d10d      	bne.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006d04:	4b05      	ldr	r3, [pc, #20]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d08:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d12:	4a02      	ldr	r2, [pc, #8]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d14:	430b      	orrs	r3, r1
 8006d16:	6513      	str	r3, [r2, #80]	; 0x50
 8006d18:	e006      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006d1a:	bf00      	nop
 8006d1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d30:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006d34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d38:	2300      	movs	r3, #0
 8006d3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d3e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006d42:	460b      	mov	r3, r1
 8006d44:	4313      	orrs	r3, r2
 8006d46:	d055      	beq.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d54:	d033      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006d56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d5a:	d82c      	bhi.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d60:	d02f      	beq.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d66:	d826      	bhi.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006d68:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d6c:	d02b      	beq.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006d6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d72:	d820      	bhi.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006d74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d78:	d012      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006d7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d7e:	d81a      	bhi.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d022      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006d84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d88:	d115      	bne.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d8e:	3308      	adds	r3, #8
 8006d90:	2101      	movs	r1, #1
 8006d92:	4618      	mov	r0, r3
 8006d94:	f002 f878 	bl	8008e88 <RCCEx_PLL2_Config>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006d9e:	e015      	b.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006da4:	3328      	adds	r3, #40	; 0x28
 8006da6:	2101      	movs	r1, #1
 8006da8:	4618      	mov	r0, r3
 8006daa:	f002 f91f 	bl	8008fec <RCCEx_PLL3_Config>
 8006dae:	4603      	mov	r3, r0
 8006db0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006db4:	e00a      	b.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006dbc:	e006      	b.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006dbe:	bf00      	nop
 8006dc0:	e004      	b.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006dc2:	bf00      	nop
 8006dc4:	e002      	b.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006dc6:	bf00      	nop
 8006dc8:	e000      	b.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006dca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dcc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d10b      	bne.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006dd4:	4ba3      	ldr	r3, [pc, #652]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dd8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006de0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006de4:	4a9f      	ldr	r2, [pc, #636]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006de6:	430b      	orrs	r3, r1
 8006de8:	6593      	str	r3, [r2, #88]	; 0x58
 8006dea:	e003      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006df0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006e00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e04:	2300      	movs	r3, #0
 8006e06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006e0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006e0e:	460b      	mov	r3, r1
 8006e10:	4313      	orrs	r3, r2
 8006e12:	d037      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e1e:	d00e      	beq.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006e20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e24:	d816      	bhi.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d018      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006e2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e2e:	d111      	bne.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e30:	4b8c      	ldr	r3, [pc, #560]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e34:	4a8b      	ldr	r2, [pc, #556]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006e3c:	e00f      	b.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e42:	3308      	adds	r3, #8
 8006e44:	2101      	movs	r1, #1
 8006e46:	4618      	mov	r0, r3
 8006e48:	f002 f81e 	bl	8008e88 <RCCEx_PLL2_Config>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006e52:	e004      	b.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e5a:	e000      	b.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006e5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d10a      	bne.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006e66:	4b7f      	ldr	r3, [pc, #508]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e6a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e74:	4a7b      	ldr	r2, [pc, #492]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e76:	430b      	orrs	r3, r1
 8006e78:	6513      	str	r3, [r2, #80]	; 0x50
 8006e7a:	e003      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006e90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e94:	2300      	movs	r3, #0
 8006e96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006e9a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	d039      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eaa:	2b03      	cmp	r3, #3
 8006eac:	d81c      	bhi.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006eae:	a201      	add	r2, pc, #4	; (adr r2, 8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb4:	08006ef1 	.word	0x08006ef1
 8006eb8:	08006ec5 	.word	0x08006ec5
 8006ebc:	08006ed3 	.word	0x08006ed3
 8006ec0:	08006ef1 	.word	0x08006ef1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ec4:	4b67      	ldr	r3, [pc, #412]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec8:	4a66      	ldr	r2, [pc, #408]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006eca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ece:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006ed0:	e00f      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ed6:	3308      	adds	r3, #8
 8006ed8:	2102      	movs	r1, #2
 8006eda:	4618      	mov	r0, r3
 8006edc:	f001 ffd4 	bl	8008e88 <RCCEx_PLL2_Config>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006ee6:	e004      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006eee:	e000      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006ef0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10a      	bne.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006efa:	4b5a      	ldr	r3, [pc, #360]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006efe:	f023 0103 	bic.w	r1, r3, #3
 8006f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f08:	4a56      	ldr	r2, [pc, #344]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f0a:	430b      	orrs	r3, r1
 8006f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006f0e:	e003      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f20:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006f24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f28:	2300      	movs	r3, #0
 8006f2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006f2e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006f32:	460b      	mov	r3, r1
 8006f34:	4313      	orrs	r3, r2
 8006f36:	f000 809f 	beq.w	8007078 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f3a:	4b4b      	ldr	r3, [pc, #300]	; (8007068 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a4a      	ldr	r2, [pc, #296]	; (8007068 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f46:	f7fa fa5d 	bl	8001404 <HAL_GetTick>
 8006f4a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f4e:	e00b      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f50:	f7fa fa58 	bl	8001404 <HAL_GetTick>
 8006f54:	4602      	mov	r2, r0
 8006f56:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006f5a:	1ad3      	subs	r3, r2, r3
 8006f5c:	2b64      	cmp	r3, #100	; 0x64
 8006f5e:	d903      	bls.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006f60:	2303      	movs	r3, #3
 8006f62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f66:	e005      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f68:	4b3f      	ldr	r3, [pc, #252]	; (8007068 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d0ed      	beq.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006f74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d179      	bne.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006f7c:	4b39      	ldr	r3, [pc, #228]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006f88:	4053      	eors	r3, r2
 8006f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d015      	beq.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006f92:	4b34      	ldr	r3, [pc, #208]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f9a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f9e:	4b31      	ldr	r3, [pc, #196]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fa2:	4a30      	ldr	r2, [pc, #192]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fa8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006faa:	4b2e      	ldr	r3, [pc, #184]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fae:	4a2d      	ldr	r2, [pc, #180]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fb4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006fb6:	4a2b      	ldr	r2, [pc, #172]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006fbc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fc2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006fc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fca:	d118      	bne.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fcc:	f7fa fa1a 	bl	8001404 <HAL_GetTick>
 8006fd0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006fd4:	e00d      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fd6:	f7fa fa15 	bl	8001404 <HAL_GetTick>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006fe0:	1ad2      	subs	r2, r2, r3
 8006fe2:	f241 3388 	movw	r3, #5000	; 0x1388
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d903      	bls.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006fea:	2303      	movs	r3, #3
 8006fec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8006ff0:	e005      	b.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ff2:	4b1c      	ldr	r3, [pc, #112]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff6:	f003 0302 	and.w	r3, r3, #2
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d0eb      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006ffe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007002:	2b00      	cmp	r3, #0
 8007004:	d129      	bne.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800700a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800700e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007012:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007016:	d10e      	bne.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007018:	4b12      	ldr	r3, [pc, #72]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007020:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007024:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007028:	091a      	lsrs	r2, r3, #4
 800702a:	4b10      	ldr	r3, [pc, #64]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800702c:	4013      	ands	r3, r2
 800702e:	4a0d      	ldr	r2, [pc, #52]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007030:	430b      	orrs	r3, r1
 8007032:	6113      	str	r3, [r2, #16]
 8007034:	e005      	b.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007036:	4b0b      	ldr	r3, [pc, #44]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	4a0a      	ldr	r2, [pc, #40]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800703c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007040:	6113      	str	r3, [r2, #16]
 8007042:	4b08      	ldr	r3, [pc, #32]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007044:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007046:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800704a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800704e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007052:	4a04      	ldr	r2, [pc, #16]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007054:	430b      	orrs	r3, r1
 8007056:	6713      	str	r3, [r2, #112]	; 0x70
 8007058:	e00e      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800705a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800705e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8007062:	e009      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007064:	58024400 	.word	0x58024400
 8007068:	58024800 	.word	0x58024800
 800706c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007070:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007074:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800707c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007080:	f002 0301 	and.w	r3, r2, #1
 8007084:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007088:	2300      	movs	r3, #0
 800708a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800708e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007092:	460b      	mov	r3, r1
 8007094:	4313      	orrs	r3, r2
 8007096:	f000 8089 	beq.w	80071ac <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800709a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800709e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070a0:	2b28      	cmp	r3, #40	; 0x28
 80070a2:	d86b      	bhi.n	800717c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80070a4:	a201      	add	r2, pc, #4	; (adr r2, 80070ac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80070a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070aa:	bf00      	nop
 80070ac:	08007185 	.word	0x08007185
 80070b0:	0800717d 	.word	0x0800717d
 80070b4:	0800717d 	.word	0x0800717d
 80070b8:	0800717d 	.word	0x0800717d
 80070bc:	0800717d 	.word	0x0800717d
 80070c0:	0800717d 	.word	0x0800717d
 80070c4:	0800717d 	.word	0x0800717d
 80070c8:	0800717d 	.word	0x0800717d
 80070cc:	08007151 	.word	0x08007151
 80070d0:	0800717d 	.word	0x0800717d
 80070d4:	0800717d 	.word	0x0800717d
 80070d8:	0800717d 	.word	0x0800717d
 80070dc:	0800717d 	.word	0x0800717d
 80070e0:	0800717d 	.word	0x0800717d
 80070e4:	0800717d 	.word	0x0800717d
 80070e8:	0800717d 	.word	0x0800717d
 80070ec:	08007167 	.word	0x08007167
 80070f0:	0800717d 	.word	0x0800717d
 80070f4:	0800717d 	.word	0x0800717d
 80070f8:	0800717d 	.word	0x0800717d
 80070fc:	0800717d 	.word	0x0800717d
 8007100:	0800717d 	.word	0x0800717d
 8007104:	0800717d 	.word	0x0800717d
 8007108:	0800717d 	.word	0x0800717d
 800710c:	08007185 	.word	0x08007185
 8007110:	0800717d 	.word	0x0800717d
 8007114:	0800717d 	.word	0x0800717d
 8007118:	0800717d 	.word	0x0800717d
 800711c:	0800717d 	.word	0x0800717d
 8007120:	0800717d 	.word	0x0800717d
 8007124:	0800717d 	.word	0x0800717d
 8007128:	0800717d 	.word	0x0800717d
 800712c:	08007185 	.word	0x08007185
 8007130:	0800717d 	.word	0x0800717d
 8007134:	0800717d 	.word	0x0800717d
 8007138:	0800717d 	.word	0x0800717d
 800713c:	0800717d 	.word	0x0800717d
 8007140:	0800717d 	.word	0x0800717d
 8007144:	0800717d 	.word	0x0800717d
 8007148:	0800717d 	.word	0x0800717d
 800714c:	08007185 	.word	0x08007185
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007154:	3308      	adds	r3, #8
 8007156:	2101      	movs	r1, #1
 8007158:	4618      	mov	r0, r3
 800715a:	f001 fe95 	bl	8008e88 <RCCEx_PLL2_Config>
 800715e:	4603      	mov	r3, r0
 8007160:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007164:	e00f      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007166:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800716a:	3328      	adds	r3, #40	; 0x28
 800716c:	2101      	movs	r1, #1
 800716e:	4618      	mov	r0, r3
 8007170:	f001 ff3c 	bl	8008fec <RCCEx_PLL3_Config>
 8007174:	4603      	mov	r3, r0
 8007176:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800717a:	e004      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007182:	e000      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007184:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007186:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800718a:	2b00      	cmp	r3, #0
 800718c:	d10a      	bne.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800718e:	4bbf      	ldr	r3, [pc, #764]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007192:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8007196:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800719a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800719c:	4abb      	ldr	r2, [pc, #748]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800719e:	430b      	orrs	r3, r1
 80071a0:	6553      	str	r3, [r2, #84]	; 0x54
 80071a2:	e003      	b.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80071ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b4:	f002 0302 	and.w	r3, r2, #2
 80071b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80071bc:	2300      	movs	r3, #0
 80071be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80071c2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80071c6:	460b      	mov	r3, r1
 80071c8:	4313      	orrs	r3, r2
 80071ca:	d041      	beq.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80071cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071d2:	2b05      	cmp	r3, #5
 80071d4:	d824      	bhi.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80071d6:	a201      	add	r2, pc, #4	; (adr r2, 80071dc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80071d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071dc:	08007229 	.word	0x08007229
 80071e0:	080071f5 	.word	0x080071f5
 80071e4:	0800720b 	.word	0x0800720b
 80071e8:	08007229 	.word	0x08007229
 80071ec:	08007229 	.word	0x08007229
 80071f0:	08007229 	.word	0x08007229
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80071f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071f8:	3308      	adds	r3, #8
 80071fa:	2101      	movs	r1, #1
 80071fc:	4618      	mov	r0, r3
 80071fe:	f001 fe43 	bl	8008e88 <RCCEx_PLL2_Config>
 8007202:	4603      	mov	r3, r0
 8007204:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007208:	e00f      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800720a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800720e:	3328      	adds	r3, #40	; 0x28
 8007210:	2101      	movs	r1, #1
 8007212:	4618      	mov	r0, r3
 8007214:	f001 feea 	bl	8008fec <RCCEx_PLL3_Config>
 8007218:	4603      	mov	r3, r0
 800721a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800721e:	e004      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007226:	e000      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007228:	bf00      	nop
    }

    if (ret == HAL_OK)
 800722a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800722e:	2b00      	cmp	r3, #0
 8007230:	d10a      	bne.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007232:	4b96      	ldr	r3, [pc, #600]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007236:	f023 0107 	bic.w	r1, r3, #7
 800723a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800723e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007240:	4a92      	ldr	r2, [pc, #584]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007242:	430b      	orrs	r3, r1
 8007244:	6553      	str	r3, [r2, #84]	; 0x54
 8007246:	e003      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007248:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800724c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007250:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007258:	f002 0304 	and.w	r3, r2, #4
 800725c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007260:	2300      	movs	r3, #0
 8007262:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007266:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800726a:	460b      	mov	r3, r1
 800726c:	4313      	orrs	r3, r2
 800726e:	d044      	beq.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007270:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007274:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007278:	2b05      	cmp	r3, #5
 800727a:	d825      	bhi.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800727c:	a201      	add	r2, pc, #4	; (adr r2, 8007284 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800727e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007282:	bf00      	nop
 8007284:	080072d1 	.word	0x080072d1
 8007288:	0800729d 	.word	0x0800729d
 800728c:	080072b3 	.word	0x080072b3
 8007290:	080072d1 	.word	0x080072d1
 8007294:	080072d1 	.word	0x080072d1
 8007298:	080072d1 	.word	0x080072d1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800729c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072a0:	3308      	adds	r3, #8
 80072a2:	2101      	movs	r1, #1
 80072a4:	4618      	mov	r0, r3
 80072a6:	f001 fdef 	bl	8008e88 <RCCEx_PLL2_Config>
 80072aa:	4603      	mov	r3, r0
 80072ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80072b0:	e00f      	b.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80072b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072b6:	3328      	adds	r3, #40	; 0x28
 80072b8:	2101      	movs	r1, #1
 80072ba:	4618      	mov	r0, r3
 80072bc:	f001 fe96 	bl	8008fec <RCCEx_PLL3_Config>
 80072c0:	4603      	mov	r3, r0
 80072c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80072c6:	e004      	b.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80072ce:	e000      	b.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80072d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d10b      	bne.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80072da:	4b6c      	ldr	r3, [pc, #432]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80072dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072de:	f023 0107 	bic.w	r1, r3, #7
 80072e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072ea:	4a68      	ldr	r2, [pc, #416]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80072ec:	430b      	orrs	r3, r1
 80072ee:	6593      	str	r3, [r2, #88]	; 0x58
 80072f0:	e003      	b.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80072fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007302:	f002 0320 	and.w	r3, r2, #32
 8007306:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800730a:	2300      	movs	r3, #0
 800730c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007310:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007314:	460b      	mov	r3, r1
 8007316:	4313      	orrs	r3, r2
 8007318:	d055      	beq.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800731a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800731e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007322:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007326:	d033      	beq.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007328:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800732c:	d82c      	bhi.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800732e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007332:	d02f      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007338:	d826      	bhi.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800733a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800733e:	d02b      	beq.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007340:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007344:	d820      	bhi.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007346:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800734a:	d012      	beq.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800734c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007350:	d81a      	bhi.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007352:	2b00      	cmp	r3, #0
 8007354:	d022      	beq.n	800739c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007356:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800735a:	d115      	bne.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800735c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007360:	3308      	adds	r3, #8
 8007362:	2100      	movs	r1, #0
 8007364:	4618      	mov	r0, r3
 8007366:	f001 fd8f 	bl	8008e88 <RCCEx_PLL2_Config>
 800736a:	4603      	mov	r3, r0
 800736c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007370:	e015      	b.n	800739e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007372:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007376:	3328      	adds	r3, #40	; 0x28
 8007378:	2102      	movs	r1, #2
 800737a:	4618      	mov	r0, r3
 800737c:	f001 fe36 	bl	8008fec <RCCEx_PLL3_Config>
 8007380:	4603      	mov	r3, r0
 8007382:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007386:	e00a      	b.n	800739e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800738e:	e006      	b.n	800739e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007390:	bf00      	nop
 8007392:	e004      	b.n	800739e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007394:	bf00      	nop
 8007396:	e002      	b.n	800739e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007398:	bf00      	nop
 800739a:	e000      	b.n	800739e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800739c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800739e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d10b      	bne.n	80073be <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80073a6:	4b39      	ldr	r3, [pc, #228]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80073a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073aa:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80073ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073b6:	4a35      	ldr	r2, [pc, #212]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80073b8:	430b      	orrs	r3, r1
 80073ba:	6553      	str	r3, [r2, #84]	; 0x54
 80073bc:	e003      	b.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80073c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ce:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80073d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80073d6:	2300      	movs	r3, #0
 80073d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80073dc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80073e0:	460b      	mov	r3, r1
 80073e2:	4313      	orrs	r3, r2
 80073e4:	d058      	beq.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80073e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80073ee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80073f2:	d033      	beq.n	800745c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80073f4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80073f8:	d82c      	bhi.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80073fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073fe:	d02f      	beq.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007404:	d826      	bhi.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007406:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800740a:	d02b      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800740c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007410:	d820      	bhi.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007412:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007416:	d012      	beq.n	800743e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007418:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800741c:	d81a      	bhi.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800741e:	2b00      	cmp	r3, #0
 8007420:	d022      	beq.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007426:	d115      	bne.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007428:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800742c:	3308      	adds	r3, #8
 800742e:	2100      	movs	r1, #0
 8007430:	4618      	mov	r0, r3
 8007432:	f001 fd29 	bl	8008e88 <RCCEx_PLL2_Config>
 8007436:	4603      	mov	r3, r0
 8007438:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800743c:	e015      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800743e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007442:	3328      	adds	r3, #40	; 0x28
 8007444:	2102      	movs	r1, #2
 8007446:	4618      	mov	r0, r3
 8007448:	f001 fdd0 	bl	8008fec <RCCEx_PLL3_Config>
 800744c:	4603      	mov	r3, r0
 800744e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007452:	e00a      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800745a:	e006      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800745c:	bf00      	nop
 800745e:	e004      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007460:	bf00      	nop
 8007462:	e002      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007464:	bf00      	nop
 8007466:	e000      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007468:	bf00      	nop
    }

    if (ret == HAL_OK)
 800746a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800746e:	2b00      	cmp	r3, #0
 8007470:	d10e      	bne.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007472:	4b06      	ldr	r3, [pc, #24]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007476:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800747a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800747e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007482:	4a02      	ldr	r2, [pc, #8]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007484:	430b      	orrs	r3, r1
 8007486:	6593      	str	r3, [r2, #88]	; 0x58
 8007488:	e006      	b.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800748a:	bf00      	nop
 800748c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007490:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007494:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800749c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80074a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80074a8:	2300      	movs	r3, #0
 80074aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80074ae:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80074b2:	460b      	mov	r3, r1
 80074b4:	4313      	orrs	r3, r2
 80074b6:	d055      	beq.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80074b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80074c0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80074c4:	d033      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80074c6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80074ca:	d82c      	bhi.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80074cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074d0:	d02f      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80074d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074d6:	d826      	bhi.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80074d8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80074dc:	d02b      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80074de:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80074e2:	d820      	bhi.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80074e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074e8:	d012      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80074ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074ee:	d81a      	bhi.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d022      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80074f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074f8:	d115      	bne.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074fe:	3308      	adds	r3, #8
 8007500:	2100      	movs	r1, #0
 8007502:	4618      	mov	r0, r3
 8007504:	f001 fcc0 	bl	8008e88 <RCCEx_PLL2_Config>
 8007508:	4603      	mov	r3, r0
 800750a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800750e:	e015      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007510:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007514:	3328      	adds	r3, #40	; 0x28
 8007516:	2102      	movs	r1, #2
 8007518:	4618      	mov	r0, r3
 800751a:	f001 fd67 	bl	8008fec <RCCEx_PLL3_Config>
 800751e:	4603      	mov	r3, r0
 8007520:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007524:	e00a      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800752c:	e006      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800752e:	bf00      	nop
 8007530:	e004      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007532:	bf00      	nop
 8007534:	e002      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007536:	bf00      	nop
 8007538:	e000      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800753a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800753c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007540:	2b00      	cmp	r3, #0
 8007542:	d10b      	bne.n	800755c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007544:	4ba1      	ldr	r3, [pc, #644]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007548:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800754c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007550:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007554:	4a9d      	ldr	r2, [pc, #628]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007556:	430b      	orrs	r3, r1
 8007558:	6593      	str	r3, [r2, #88]	; 0x58
 800755a:	e003      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800755c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007560:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007564:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756c:	f002 0308 	and.w	r3, r2, #8
 8007570:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007574:	2300      	movs	r3, #0
 8007576:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800757a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800757e:	460b      	mov	r3, r1
 8007580:	4313      	orrs	r3, r2
 8007582:	d01e      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007584:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007588:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800758c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007590:	d10c      	bne.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007592:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007596:	3328      	adds	r3, #40	; 0x28
 8007598:	2102      	movs	r1, #2
 800759a:	4618      	mov	r0, r3
 800759c:	f001 fd26 	bl	8008fec <RCCEx_PLL3_Config>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d002      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80075ac:	4b87      	ldr	r3, [pc, #540]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80075b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075bc:	4a83      	ldr	r2, [pc, #524]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075be:	430b      	orrs	r3, r1
 80075c0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80075c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ca:	f002 0310 	and.w	r3, r2, #16
 80075ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80075d2:	2300      	movs	r3, #0
 80075d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80075d8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80075dc:	460b      	mov	r3, r1
 80075de:	4313      	orrs	r3, r2
 80075e0:	d01e      	beq.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80075e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80075ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075ee:	d10c      	bne.n	800760a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80075f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075f4:	3328      	adds	r3, #40	; 0x28
 80075f6:	2102      	movs	r1, #2
 80075f8:	4618      	mov	r0, r3
 80075fa:	f001 fcf7 	bl	8008fec <RCCEx_PLL3_Config>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d002      	beq.n	800760a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800760a:	4b70      	ldr	r3, [pc, #448]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800760c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800760e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007616:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800761a:	4a6c      	ldr	r2, [pc, #432]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800761c:	430b      	orrs	r3, r1
 800761e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007620:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007628:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800762c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007630:	2300      	movs	r3, #0
 8007632:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007636:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800763a:	460b      	mov	r3, r1
 800763c:	4313      	orrs	r3, r2
 800763e:	d03e      	beq.n	80076be <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007640:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007644:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007648:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800764c:	d022      	beq.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800764e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007652:	d81b      	bhi.n	800768c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007654:	2b00      	cmp	r3, #0
 8007656:	d003      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800765c:	d00b      	beq.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800765e:	e015      	b.n	800768c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007660:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007664:	3308      	adds	r3, #8
 8007666:	2100      	movs	r1, #0
 8007668:	4618      	mov	r0, r3
 800766a:	f001 fc0d 	bl	8008e88 <RCCEx_PLL2_Config>
 800766e:	4603      	mov	r3, r0
 8007670:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007674:	e00f      	b.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800767a:	3328      	adds	r3, #40	; 0x28
 800767c:	2102      	movs	r1, #2
 800767e:	4618      	mov	r0, r3
 8007680:	f001 fcb4 	bl	8008fec <RCCEx_PLL3_Config>
 8007684:	4603      	mov	r3, r0
 8007686:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800768a:	e004      	b.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007692:	e000      	b.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007694:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007696:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800769a:	2b00      	cmp	r3, #0
 800769c:	d10b      	bne.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800769e:	4b4b      	ldr	r3, [pc, #300]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076a2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80076a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80076ae:	4a47      	ldr	r2, [pc, #284]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076b0:	430b      	orrs	r3, r1
 80076b2:	6593      	str	r3, [r2, #88]	; 0x58
 80076b4:	e003      	b.n	80076be <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80076be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80076ca:	67bb      	str	r3, [r7, #120]	; 0x78
 80076cc:	2300      	movs	r3, #0
 80076ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 80076d0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80076d4:	460b      	mov	r3, r1
 80076d6:	4313      	orrs	r3, r2
 80076d8:	d03b      	beq.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80076da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80076e6:	d01f      	beq.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80076e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80076ec:	d818      	bhi.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80076ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076f2:	d003      	beq.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80076f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076f8:	d007      	beq.n	800770a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80076fa:	e011      	b.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076fc:	4b33      	ldr	r3, [pc, #204]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007700:	4a32      	ldr	r2, [pc, #200]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007706:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007708:	e00f      	b.n	800772a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800770a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800770e:	3328      	adds	r3, #40	; 0x28
 8007710:	2101      	movs	r1, #1
 8007712:	4618      	mov	r0, r3
 8007714:	f001 fc6a 	bl	8008fec <RCCEx_PLL3_Config>
 8007718:	4603      	mov	r3, r0
 800771a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800771e:	e004      	b.n	800772a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007726:	e000      	b.n	800772a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007728:	bf00      	nop
    }

    if (ret == HAL_OK)
 800772a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800772e:	2b00      	cmp	r3, #0
 8007730:	d10b      	bne.n	800774a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007732:	4b26      	ldr	r3, [pc, #152]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007736:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800773a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800773e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007742:	4a22      	ldr	r2, [pc, #136]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007744:	430b      	orrs	r3, r1
 8007746:	6553      	str	r3, [r2, #84]	; 0x54
 8007748:	e003      	b.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800774a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800774e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800775e:	673b      	str	r3, [r7, #112]	; 0x70
 8007760:	2300      	movs	r3, #0
 8007762:	677b      	str	r3, [r7, #116]	; 0x74
 8007764:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007768:	460b      	mov	r3, r1
 800776a:	4313      	orrs	r3, r2
 800776c:	d034      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800776e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007774:	2b00      	cmp	r3, #0
 8007776:	d003      	beq.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800777c:	d007      	beq.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800777e:	e011      	b.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007780:	4b12      	ldr	r3, [pc, #72]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007784:	4a11      	ldr	r2, [pc, #68]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007786:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800778a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800778c:	e00e      	b.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800778e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007792:	3308      	adds	r3, #8
 8007794:	2102      	movs	r1, #2
 8007796:	4618      	mov	r0, r3
 8007798:	f001 fb76 	bl	8008e88 <RCCEx_PLL2_Config>
 800779c:	4603      	mov	r3, r0
 800779e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80077a2:	e003      	b.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80077aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d10d      	bne.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80077b4:	4b05      	ldr	r3, [pc, #20]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80077bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077c2:	4a02      	ldr	r2, [pc, #8]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077c4:	430b      	orrs	r3, r1
 80077c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80077c8:	e006      	b.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80077ca:	bf00      	nop
 80077cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80077d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80077e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80077e6:	2300      	movs	r3, #0
 80077e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077ea:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80077ee:	460b      	mov	r3, r1
 80077f0:	4313      	orrs	r3, r2
 80077f2:	d00c      	beq.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80077f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077f8:	3328      	adds	r3, #40	; 0x28
 80077fa:	2102      	movs	r1, #2
 80077fc:	4618      	mov	r0, r3
 80077fe:	f001 fbf5 	bl	8008fec <RCCEx_PLL3_Config>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d002      	beq.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800780e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007816:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800781a:	663b      	str	r3, [r7, #96]	; 0x60
 800781c:	2300      	movs	r3, #0
 800781e:	667b      	str	r3, [r7, #100]	; 0x64
 8007820:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007824:	460b      	mov	r3, r1
 8007826:	4313      	orrs	r3, r2
 8007828:	d038      	beq.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800782a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800782e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007832:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007836:	d018      	beq.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007838:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800783c:	d811      	bhi.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800783e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007842:	d014      	beq.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007844:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007848:	d80b      	bhi.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800784a:	2b00      	cmp	r3, #0
 800784c:	d011      	beq.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800784e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007852:	d106      	bne.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007854:	4bc3      	ldr	r3, [pc, #780]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007858:	4ac2      	ldr	r2, [pc, #776]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800785a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800785e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007860:	e008      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007868:	e004      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800786a:	bf00      	nop
 800786c:	e002      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800786e:	bf00      	nop
 8007870:	e000      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007872:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007874:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007878:	2b00      	cmp	r3, #0
 800787a:	d10b      	bne.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800787c:	4bb9      	ldr	r3, [pc, #740]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800787e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007880:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007884:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007888:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800788c:	4ab5      	ldr	r2, [pc, #724]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800788e:	430b      	orrs	r3, r1
 8007890:	6553      	str	r3, [r2, #84]	; 0x54
 8007892:	e003      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007894:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007898:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800789c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80078a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80078aa:	2300      	movs	r3, #0
 80078ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078ae:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80078b2:	460b      	mov	r3, r1
 80078b4:	4313      	orrs	r3, r2
 80078b6:	d009      	beq.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80078b8:	4baa      	ldr	r3, [pc, #680]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078bc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80078c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078c6:	4aa7      	ldr	r2, [pc, #668]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078c8:	430b      	orrs	r3, r1
 80078ca:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80078cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80078d8:	653b      	str	r3, [r7, #80]	; 0x50
 80078da:	2300      	movs	r3, #0
 80078dc:	657b      	str	r3, [r7, #84]	; 0x54
 80078de:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80078e2:	460b      	mov	r3, r1
 80078e4:	4313      	orrs	r3, r2
 80078e6:	d00a      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80078e8:	4b9e      	ldr	r3, [pc, #632]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078ea:	691b      	ldr	r3, [r3, #16]
 80078ec:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80078f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80078f8:	4a9a      	ldr	r2, [pc, #616]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078fa:	430b      	orrs	r3, r1
 80078fc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80078fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007906:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800790a:	64bb      	str	r3, [r7, #72]	; 0x48
 800790c:	2300      	movs	r3, #0
 800790e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007910:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007914:	460b      	mov	r3, r1
 8007916:	4313      	orrs	r3, r2
 8007918:	d009      	beq.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800791a:	4b92      	ldr	r3, [pc, #584]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800791c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800791e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007928:	4a8e      	ldr	r2, [pc, #568]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800792a:	430b      	orrs	r3, r1
 800792c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800792e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007936:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800793a:	643b      	str	r3, [r7, #64]	; 0x40
 800793c:	2300      	movs	r3, #0
 800793e:	647b      	str	r3, [r7, #68]	; 0x44
 8007940:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007944:	460b      	mov	r3, r1
 8007946:	4313      	orrs	r3, r2
 8007948:	d00e      	beq.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800794a:	4b86      	ldr	r3, [pc, #536]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	4a85      	ldr	r2, [pc, #532]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007950:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007954:	6113      	str	r3, [r2, #16]
 8007956:	4b83      	ldr	r3, [pc, #524]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007958:	6919      	ldr	r1, [r3, #16]
 800795a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800795e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007962:	4a80      	ldr	r2, [pc, #512]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007964:	430b      	orrs	r3, r1
 8007966:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007968:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800796c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007970:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007974:	63bb      	str	r3, [r7, #56]	; 0x38
 8007976:	2300      	movs	r3, #0
 8007978:	63fb      	str	r3, [r7, #60]	; 0x3c
 800797a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800797e:	460b      	mov	r3, r1
 8007980:	4313      	orrs	r3, r2
 8007982:	d009      	beq.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007984:	4b77      	ldr	r3, [pc, #476]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007988:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800798c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007992:	4a74      	ldr	r2, [pc, #464]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007994:	430b      	orrs	r3, r1
 8007996:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800799c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80079a4:	633b      	str	r3, [r7, #48]	; 0x30
 80079a6:	2300      	movs	r3, #0
 80079a8:	637b      	str	r3, [r7, #52]	; 0x34
 80079aa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80079ae:	460b      	mov	r3, r1
 80079b0:	4313      	orrs	r3, r2
 80079b2:	d00a      	beq.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80079b4:	4b6b      	ldr	r3, [pc, #428]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80079bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079c4:	4a67      	ldr	r2, [pc, #412]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079c6:	430b      	orrs	r3, r1
 80079c8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80079ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d2:	2100      	movs	r1, #0
 80079d4:	62b9      	str	r1, [r7, #40]	; 0x28
 80079d6:	f003 0301 	and.w	r3, r3, #1
 80079da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079dc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80079e0:	460b      	mov	r3, r1
 80079e2:	4313      	orrs	r3, r2
 80079e4:	d011      	beq.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079ea:	3308      	adds	r3, #8
 80079ec:	2100      	movs	r1, #0
 80079ee:	4618      	mov	r0, r3
 80079f0:	f001 fa4a 	bl	8008e88 <RCCEx_PLL2_Config>
 80079f4:	4603      	mov	r3, r0
 80079f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80079fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d003      	beq.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a12:	2100      	movs	r1, #0
 8007a14:	6239      	str	r1, [r7, #32]
 8007a16:	f003 0302 	and.w	r3, r3, #2
 8007a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8007a1c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007a20:	460b      	mov	r3, r1
 8007a22:	4313      	orrs	r3, r2
 8007a24:	d011      	beq.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a2a:	3308      	adds	r3, #8
 8007a2c:	2101      	movs	r1, #1
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f001 fa2a 	bl	8008e88 <RCCEx_PLL2_Config>
 8007a34:	4603      	mov	r3, r0
 8007a36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d003      	beq.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a52:	2100      	movs	r1, #0
 8007a54:	61b9      	str	r1, [r7, #24]
 8007a56:	f003 0304 	and.w	r3, r3, #4
 8007a5a:	61fb      	str	r3, [r7, #28]
 8007a5c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007a60:	460b      	mov	r3, r1
 8007a62:	4313      	orrs	r3, r2
 8007a64:	d011      	beq.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a6a:	3308      	adds	r3, #8
 8007a6c:	2102      	movs	r1, #2
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f001 fa0a 	bl	8008e88 <RCCEx_PLL2_Config>
 8007a74:	4603      	mov	r3, r0
 8007a76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d003      	beq.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a92:	2100      	movs	r1, #0
 8007a94:	6139      	str	r1, [r7, #16]
 8007a96:	f003 0308 	and.w	r3, r3, #8
 8007a9a:	617b      	str	r3, [r7, #20]
 8007a9c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	d011      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aaa:	3328      	adds	r3, #40	; 0x28
 8007aac:	2100      	movs	r1, #0
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f001 fa9c 	bl	8008fec <RCCEx_PLL3_Config>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8007aba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d003      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ac2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ac6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad2:	2100      	movs	r1, #0
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	f003 0310 	and.w	r3, r3, #16
 8007ada:	60fb      	str	r3, [r7, #12]
 8007adc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	d011      	beq.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aea:	3328      	adds	r3, #40	; 0x28
 8007aec:	2101      	movs	r1, #1
 8007aee:	4618      	mov	r0, r3
 8007af0:	f001 fa7c 	bl	8008fec <RCCEx_PLL3_Config>
 8007af4:	4603      	mov	r3, r0
 8007af6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007afa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d003      	beq.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b12:	2100      	movs	r1, #0
 8007b14:	6039      	str	r1, [r7, #0]
 8007b16:	f003 0320 	and.w	r3, r3, #32
 8007b1a:	607b      	str	r3, [r7, #4]
 8007b1c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007b20:	460b      	mov	r3, r1
 8007b22:	4313      	orrs	r3, r2
 8007b24:	d011      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b2a:	3328      	adds	r3, #40	; 0x28
 8007b2c:	2102      	movs	r1, #2
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f001 fa5c 	bl	8008fec <RCCEx_PLL3_Config>
 8007b34:	4603      	mov	r3, r0
 8007b36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007b3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d003      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8007b4a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d101      	bne.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007b52:	2300      	movs	r3, #0
 8007b54:	e000      	b.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b64:	58024400 	.word	0x58024400

08007b68 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b090      	sub	sp, #64	; 0x40
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007b72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b76:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007b7a:	430b      	orrs	r3, r1
 8007b7c:	f040 8094 	bne.w	8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007b80:	4b9e      	ldr	r3, [pc, #632]	; (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b84:	f003 0307 	and.w	r3, r3, #7
 8007b88:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8c:	2b04      	cmp	r3, #4
 8007b8e:	f200 8087 	bhi.w	8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007b92:	a201      	add	r2, pc, #4	; (adr r2, 8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b98:	08007bad 	.word	0x08007bad
 8007b9c:	08007bd5 	.word	0x08007bd5
 8007ba0:	08007bfd 	.word	0x08007bfd
 8007ba4:	08007c99 	.word	0x08007c99
 8007ba8:	08007c25 	.word	0x08007c25
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007bac:	4b93      	ldr	r3, [pc, #588]	; (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bb8:	d108      	bne.n	8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f001 f810 	bl	8008be4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bc8:	f000 bd45 	b.w	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bd0:	f000 bd41 	b.w	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007bd4:	4b89      	ldr	r3, [pc, #548]	; (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007be0:	d108      	bne.n	8007bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007be2:	f107 0318 	add.w	r3, r7, #24
 8007be6:	4618      	mov	r0, r3
 8007be8:	f000 fd54 	bl	8008694 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bf0:	f000 bd31 	b.w	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bf8:	f000 bd2d 	b.w	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007bfc:	4b7f      	ldr	r3, [pc, #508]	; (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c08:	d108      	bne.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c0a:	f107 030c 	add.w	r3, r7, #12
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f000 fe94 	bl	800893c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c18:	f000 bd1d 	b.w	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c20:	f000 bd19 	b.w	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007c24:	4b75      	ldr	r3, [pc, #468]	; (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c2c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c2e:	4b73      	ldr	r3, [pc, #460]	; (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f003 0304 	and.w	r3, r3, #4
 8007c36:	2b04      	cmp	r3, #4
 8007c38:	d10c      	bne.n	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d109      	bne.n	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c40:	4b6e      	ldr	r3, [pc, #440]	; (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	08db      	lsrs	r3, r3, #3
 8007c46:	f003 0303 	and.w	r3, r3, #3
 8007c4a:	4a6d      	ldr	r2, [pc, #436]	; (8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c52:	e01f      	b.n	8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c54:	4b69      	ldr	r3, [pc, #420]	; (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c60:	d106      	bne.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c68:	d102      	bne.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007c6a:	4b66      	ldr	r3, [pc, #408]	; (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c6e:	e011      	b.n	8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c70:	4b62      	ldr	r3, [pc, #392]	; (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c7c:	d106      	bne.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c84:	d102      	bne.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007c86:	4b60      	ldr	r3, [pc, #384]	; (8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007c88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c8a:	e003      	b.n	8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007c90:	f000 bce1 	b.w	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007c94:	f000 bcdf 	b.w	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007c98:	4b5c      	ldr	r3, [pc, #368]	; (8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c9c:	f000 bcdb 	b.w	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ca4:	f000 bcd7 	b.w	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007ca8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cac:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007cb0:	430b      	orrs	r3, r1
 8007cb2:	f040 80ad 	bne.w	8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007cb6:	4b51      	ldr	r3, [pc, #324]	; (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cba:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007cbe:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cc6:	d056      	beq.n	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cce:	f200 8090 	bhi.w	8007df2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd4:	2bc0      	cmp	r3, #192	; 0xc0
 8007cd6:	f000 8088 	beq.w	8007dea <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cdc:	2bc0      	cmp	r3, #192	; 0xc0
 8007cde:	f200 8088 	bhi.w	8007df2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce4:	2b80      	cmp	r3, #128	; 0x80
 8007ce6:	d032      	beq.n	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cea:	2b80      	cmp	r3, #128	; 0x80
 8007cec:	f200 8081 	bhi.w	8007df2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d003      	beq.n	8007cfe <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf8:	2b40      	cmp	r3, #64	; 0x40
 8007cfa:	d014      	beq.n	8007d26 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007cfc:	e079      	b.n	8007df2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007cfe:	4b3f      	ldr	r3, [pc, #252]	; (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d0a:	d108      	bne.n	8007d1e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d10:	4618      	mov	r0, r3
 8007d12:	f000 ff67 	bl	8008be4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d1a:	f000 bc9c 	b.w	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d22:	f000 bc98 	b.w	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d26:	4b35      	ldr	r3, [pc, #212]	; (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d32:	d108      	bne.n	8007d46 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d34:	f107 0318 	add.w	r3, r7, #24
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f000 fcab 	bl	8008694 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d42:	f000 bc88 	b.w	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d46:	2300      	movs	r3, #0
 8007d48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d4a:	f000 bc84 	b.w	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d4e:	4b2b      	ldr	r3, [pc, #172]	; (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d5a:	d108      	bne.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d5c:	f107 030c 	add.w	r3, r7, #12
 8007d60:	4618      	mov	r0, r3
 8007d62:	f000 fdeb 	bl	800893c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d6a:	f000 bc74 	b.w	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d72:	f000 bc70 	b.w	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d76:	4b21      	ldr	r3, [pc, #132]	; (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d7e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d80:	4b1e      	ldr	r3, [pc, #120]	; (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 0304 	and.w	r3, r3, #4
 8007d88:	2b04      	cmp	r3, #4
 8007d8a:	d10c      	bne.n	8007da6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d109      	bne.n	8007da6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d92:	4b1a      	ldr	r3, [pc, #104]	; (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	08db      	lsrs	r3, r3, #3
 8007d98:	f003 0303 	and.w	r3, r3, #3
 8007d9c:	4a18      	ldr	r2, [pc, #96]	; (8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8007da2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007da4:	e01f      	b.n	8007de6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007da6:	4b15      	ldr	r3, [pc, #84]	; (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007db2:	d106      	bne.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007dba:	d102      	bne.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007dbc:	4b11      	ldr	r3, [pc, #68]	; (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dc0:	e011      	b.n	8007de6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007dc2:	4b0e      	ldr	r3, [pc, #56]	; (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007dce:	d106      	bne.n	8007dde <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dd6:	d102      	bne.n	8007dde <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007dd8:	4b0b      	ldr	r3, [pc, #44]	; (8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007dda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ddc:	e003      	b.n	8007de6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007dde:	2300      	movs	r3, #0
 8007de0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007de2:	f000 bc38 	b.w	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007de6:	f000 bc36 	b.w	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007dea:	4b08      	ldr	r3, [pc, #32]	; (8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007dec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dee:	f000 bc32 	b.w	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007df2:	2300      	movs	r3, #0
 8007df4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007df6:	f000 bc2e 	b.w	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007dfa:	bf00      	nop
 8007dfc:	58024400 	.word	0x58024400
 8007e00:	03d09000 	.word	0x03d09000
 8007e04:	003d0900 	.word	0x003d0900
 8007e08:	017d7840 	.word	0x017d7840
 8007e0c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007e10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e14:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8007e18:	430b      	orrs	r3, r1
 8007e1a:	f040 809c 	bne.w	8007f56 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007e1e:	4b9e      	ldr	r3, [pc, #632]	; (8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e22:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007e26:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e2e:	d054      	beq.n	8007eda <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e36:	f200 808b 	bhi.w	8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007e40:	f000 8083 	beq.w	8007f4a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8007e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e46:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007e4a:	f200 8081 	bhi.w	8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e54:	d02f      	beq.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8007e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e5c:	d878      	bhi.n	8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d004      	beq.n	8007e6e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e6a:	d012      	beq.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007e6c:	e070      	b.n	8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e6e:	4b8a      	ldr	r3, [pc, #552]	; (8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e7a:	d107      	bne.n	8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e80:	4618      	mov	r0, r3
 8007e82:	f000 feaf 	bl	8008be4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e8a:	e3e4      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e90:	e3e1      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e92:	4b81      	ldr	r3, [pc, #516]	; (8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e9e:	d107      	bne.n	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ea0:	f107 0318 	add.w	r3, r7, #24
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f000 fbf5 	bl	8008694 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007eae:	e3d2      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007eb4:	e3cf      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007eb6:	4b78      	ldr	r3, [pc, #480]	; (8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ebe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ec2:	d107      	bne.n	8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ec4:	f107 030c 	add.w	r3, r7, #12
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f000 fd37 	bl	800893c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ed2:	e3c0      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ed8:	e3bd      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007eda:	4b6f      	ldr	r3, [pc, #444]	; (8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ede:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ee2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ee4:	4b6c      	ldr	r3, [pc, #432]	; (8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f003 0304 	and.w	r3, r3, #4
 8007eec:	2b04      	cmp	r3, #4
 8007eee:	d10c      	bne.n	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d109      	bne.n	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ef6:	4b68      	ldr	r3, [pc, #416]	; (8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	08db      	lsrs	r3, r3, #3
 8007efc:	f003 0303 	and.w	r3, r3, #3
 8007f00:	4a66      	ldr	r2, [pc, #408]	; (800809c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007f02:	fa22 f303 	lsr.w	r3, r2, r3
 8007f06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f08:	e01e      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f0a:	4b63      	ldr	r3, [pc, #396]	; (8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f16:	d106      	bne.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f1e:	d102      	bne.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007f20:	4b5f      	ldr	r3, [pc, #380]	; (80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007f22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f24:	e010      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f26:	4b5c      	ldr	r3, [pc, #368]	; (8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f32:	d106      	bne.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8007f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f3a:	d102      	bne.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007f3c:	4b59      	ldr	r3, [pc, #356]	; (80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f40:	e002      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007f42:	2300      	movs	r3, #0
 8007f44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007f46:	e386      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007f48:	e385      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007f4a:	4b57      	ldr	r3, [pc, #348]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f4e:	e382      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007f50:	2300      	movs	r3, #0
 8007f52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f54:	e37f      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007f56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f5a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8007f5e:	430b      	orrs	r3, r1
 8007f60:	f040 80a7 	bne.w	80080b2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007f64:	4b4c      	ldr	r3, [pc, #304]	; (8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f68:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007f6c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f74:	d055      	beq.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8007f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f7c:	f200 8096 	bhi.w	80080ac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f82:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007f86:	f000 8084 	beq.w	8008092 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007f90:	f200 808c 	bhi.w	80080ac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f9a:	d030      	beq.n	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fa2:	f200 8083 	bhi.w	80080ac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d004      	beq.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007fb2:	d012      	beq.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007fb4:	e07a      	b.n	80080ac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007fb6:	4b38      	ldr	r3, [pc, #224]	; (8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fc2:	d107      	bne.n	8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f000 fe0b 	bl	8008be4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fd2:	e340      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fd8:	e33d      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007fda:	4b2f      	ldr	r3, [pc, #188]	; (8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fe2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fe6:	d107      	bne.n	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fe8:	f107 0318 	add.w	r3, r7, #24
 8007fec:	4618      	mov	r0, r3
 8007fee:	f000 fb51 	bl	8008694 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ff6:	e32e      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ffc:	e32b      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ffe:	4b26      	ldr	r3, [pc, #152]	; (8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008006:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800800a:	d107      	bne.n	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800800c:	f107 030c 	add.w	r3, r7, #12
 8008010:	4618      	mov	r0, r3
 8008012:	f000 fc93 	bl	800893c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800801a:	e31c      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800801c:	2300      	movs	r3, #0
 800801e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008020:	e319      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008022:	4b1d      	ldr	r3, [pc, #116]	; (8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008026:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800802a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800802c:	4b1a      	ldr	r3, [pc, #104]	; (8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f003 0304 	and.w	r3, r3, #4
 8008034:	2b04      	cmp	r3, #4
 8008036:	d10c      	bne.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800803a:	2b00      	cmp	r3, #0
 800803c:	d109      	bne.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800803e:	4b16      	ldr	r3, [pc, #88]	; (8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	08db      	lsrs	r3, r3, #3
 8008044:	f003 0303 	and.w	r3, r3, #3
 8008048:	4a14      	ldr	r2, [pc, #80]	; (800809c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800804a:	fa22 f303 	lsr.w	r3, r2, r3
 800804e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008050:	e01e      	b.n	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008052:	4b11      	ldr	r3, [pc, #68]	; (8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800805a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800805e:	d106      	bne.n	800806e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008062:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008066:	d102      	bne.n	800806e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008068:	4b0d      	ldr	r3, [pc, #52]	; (80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800806a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800806c:	e010      	b.n	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800806e:	4b0a      	ldr	r3, [pc, #40]	; (8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008076:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800807a:	d106      	bne.n	800808a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800807c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800807e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008082:	d102      	bne.n	800808a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008084:	4b07      	ldr	r3, [pc, #28]	; (80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008086:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008088:	e002      	b.n	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800808a:	2300      	movs	r3, #0
 800808c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800808e:	e2e2      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008090:	e2e1      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008092:	4b05      	ldr	r3, [pc, #20]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008094:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008096:	e2de      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008098:	58024400 	.word	0x58024400
 800809c:	03d09000 	.word	0x03d09000
 80080a0:	003d0900 	.word	0x003d0900
 80080a4:	017d7840 	.word	0x017d7840
 80080a8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80080ac:	2300      	movs	r3, #0
 80080ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080b0:	e2d1      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80080b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080b6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80080ba:	430b      	orrs	r3, r1
 80080bc:	f040 809c 	bne.w	80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80080c0:	4b93      	ldr	r3, [pc, #588]	; (8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80080c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080c4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80080c8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80080ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080d0:	d054      	beq.n	800817c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80080d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080d8:	f200 808b 	bhi.w	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80080dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80080e2:	f000 8083 	beq.w	80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80080e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80080ec:	f200 8081 	bhi.w	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80080f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080f6:	d02f      	beq.n	8008158 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80080f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080fe:	d878      	bhi.n	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008102:	2b00      	cmp	r3, #0
 8008104:	d004      	beq.n	8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800810c:	d012      	beq.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800810e:	e070      	b.n	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008110:	4b7f      	ldr	r3, [pc, #508]	; (8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008118:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800811c:	d107      	bne.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800811e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008122:	4618      	mov	r0, r3
 8008124:	f000 fd5e 	bl	8008be4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800812a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800812c:	e293      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800812e:	2300      	movs	r3, #0
 8008130:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008132:	e290      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008134:	4b76      	ldr	r3, [pc, #472]	; (8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800813c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008140:	d107      	bne.n	8008152 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008142:	f107 0318 	add.w	r3, r7, #24
 8008146:	4618      	mov	r0, r3
 8008148:	f000 faa4 	bl	8008694 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800814c:	69bb      	ldr	r3, [r7, #24]
 800814e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008150:	e281      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008152:	2300      	movs	r3, #0
 8008154:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008156:	e27e      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008158:	4b6d      	ldr	r3, [pc, #436]	; (8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008160:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008164:	d107      	bne.n	8008176 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008166:	f107 030c 	add.w	r3, r7, #12
 800816a:	4618      	mov	r0, r3
 800816c:	f000 fbe6 	bl	800893c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008174:	e26f      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008176:	2300      	movs	r3, #0
 8008178:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800817a:	e26c      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800817c:	4b64      	ldr	r3, [pc, #400]	; (8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800817e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008180:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008184:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008186:	4b62      	ldr	r3, [pc, #392]	; (8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f003 0304 	and.w	r3, r3, #4
 800818e:	2b04      	cmp	r3, #4
 8008190:	d10c      	bne.n	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008194:	2b00      	cmp	r3, #0
 8008196:	d109      	bne.n	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008198:	4b5d      	ldr	r3, [pc, #372]	; (8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	08db      	lsrs	r3, r3, #3
 800819e:	f003 0303 	and.w	r3, r3, #3
 80081a2:	4a5c      	ldr	r2, [pc, #368]	; (8008314 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80081a4:	fa22 f303 	lsr.w	r3, r2, r3
 80081a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081aa:	e01e      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80081ac:	4b58      	ldr	r3, [pc, #352]	; (8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081b8:	d106      	bne.n	80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80081ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081c0:	d102      	bne.n	80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80081c2:	4b55      	ldr	r3, [pc, #340]	; (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80081c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081c6:	e010      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80081c8:	4b51      	ldr	r3, [pc, #324]	; (8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081d4:	d106      	bne.n	80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80081d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081dc:	d102      	bne.n	80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80081de:	4b4f      	ldr	r3, [pc, #316]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80081e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081e2:	e002      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80081e4:	2300      	movs	r3, #0
 80081e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80081e8:	e235      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80081ea:	e234      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80081ec:	4b4c      	ldr	r3, [pc, #304]	; (8008320 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80081ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081f0:	e231      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80081f2:	2300      	movs	r3, #0
 80081f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081f6:	e22e      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80081f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081fc:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8008200:	430b      	orrs	r3, r1
 8008202:	f040 808f 	bne.w	8008324 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008206:	4b42      	ldr	r3, [pc, #264]	; (8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800820a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800820e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8008210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008212:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008216:	d06b      	beq.n	80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800821e:	d874      	bhi.n	800830a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008222:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008226:	d056      	beq.n	80082d6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800822a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800822e:	d86c      	bhi.n	800830a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008232:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008236:	d03b      	beq.n	80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800823e:	d864      	bhi.n	800830a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008242:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008246:	d021      	beq.n	800828c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800824e:	d85c      	bhi.n	800830a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008252:	2b00      	cmp	r3, #0
 8008254:	d004      	beq.n	8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800825c:	d004      	beq.n	8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800825e:	e054      	b.n	800830a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008260:	f7fe fa4c 	bl	80066fc <HAL_RCC_GetPCLK1Freq>
 8008264:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008266:	e1f6      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008268:	4b29      	ldr	r3, [pc, #164]	; (8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008270:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008274:	d107      	bne.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008276:	f107 0318 	add.w	r3, r7, #24
 800827a:	4618      	mov	r0, r3
 800827c:	f000 fa0a 	bl	8008694 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008284:	e1e7      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008286:	2300      	movs	r3, #0
 8008288:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800828a:	e1e4      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800828c:	4b20      	ldr	r3, [pc, #128]	; (8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008294:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008298:	d107      	bne.n	80082aa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800829a:	f107 030c 	add.w	r3, r7, #12
 800829e:	4618      	mov	r0, r3
 80082a0:	f000 fb4c 	bl	800893c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082a8:	e1d5      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082aa:	2300      	movs	r3, #0
 80082ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082ae:	e1d2      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80082b0:	4b17      	ldr	r3, [pc, #92]	; (8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 0304 	and.w	r3, r3, #4
 80082b8:	2b04      	cmp	r3, #4
 80082ba:	d109      	bne.n	80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082bc:	4b14      	ldr	r3, [pc, #80]	; (8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	08db      	lsrs	r3, r3, #3
 80082c2:	f003 0303 	and.w	r3, r3, #3
 80082c6:	4a13      	ldr	r2, [pc, #76]	; (8008314 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80082c8:	fa22 f303 	lsr.w	r3, r2, r3
 80082cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082ce:	e1c2      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082d0:	2300      	movs	r3, #0
 80082d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082d4:	e1bf      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80082d6:	4b0e      	ldr	r3, [pc, #56]	; (8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082e2:	d102      	bne.n	80082ea <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80082e4:	4b0c      	ldr	r3, [pc, #48]	; (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80082e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082e8:	e1b5      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082ea:	2300      	movs	r3, #0
 80082ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082ee:	e1b2      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80082f0:	4b07      	ldr	r3, [pc, #28]	; (8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082fc:	d102      	bne.n	8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80082fe:	4b07      	ldr	r3, [pc, #28]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008300:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008302:	e1a8      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008304:	2300      	movs	r3, #0
 8008306:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008308:	e1a5      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800830a:	2300      	movs	r3, #0
 800830c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800830e:	e1a2      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008310:	58024400 	.word	0x58024400
 8008314:	03d09000 	.word	0x03d09000
 8008318:	003d0900 	.word	0x003d0900
 800831c:	017d7840 	.word	0x017d7840
 8008320:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008324:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008328:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800832c:	430b      	orrs	r3, r1
 800832e:	d173      	bne.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008330:	4b9c      	ldr	r3, [pc, #624]	; (80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008334:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008338:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800833a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800833c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008340:	d02f      	beq.n	80083a2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008344:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008348:	d863      	bhi.n	8008412 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800834a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834c:	2b00      	cmp	r3, #0
 800834e:	d004      	beq.n	800835a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008356:	d012      	beq.n	800837e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008358:	e05b      	b.n	8008412 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800835a:	4b92      	ldr	r3, [pc, #584]	; (80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008362:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008366:	d107      	bne.n	8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008368:	f107 0318 	add.w	r3, r7, #24
 800836c:	4618      	mov	r0, r3
 800836e:	f000 f991 	bl	8008694 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008376:	e16e      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008378:	2300      	movs	r3, #0
 800837a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800837c:	e16b      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800837e:	4b89      	ldr	r3, [pc, #548]	; (80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008386:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800838a:	d107      	bne.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800838c:	f107 030c 	add.w	r3, r7, #12
 8008390:	4618      	mov	r0, r3
 8008392:	f000 fad3 	bl	800893c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800839a:	e15c      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800839c:	2300      	movs	r3, #0
 800839e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083a0:	e159      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80083a2:	4b80      	ldr	r3, [pc, #512]	; (80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80083a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80083aa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80083ac:	4b7d      	ldr	r3, [pc, #500]	; (80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f003 0304 	and.w	r3, r3, #4
 80083b4:	2b04      	cmp	r3, #4
 80083b6:	d10c      	bne.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80083b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d109      	bne.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083be:	4b79      	ldr	r3, [pc, #484]	; (80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	08db      	lsrs	r3, r3, #3
 80083c4:	f003 0303 	and.w	r3, r3, #3
 80083c8:	4a77      	ldr	r2, [pc, #476]	; (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80083ca:	fa22 f303 	lsr.w	r3, r2, r3
 80083ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083d0:	e01e      	b.n	8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80083d2:	4b74      	ldr	r3, [pc, #464]	; (80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083de:	d106      	bne.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80083e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083e6:	d102      	bne.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80083e8:	4b70      	ldr	r3, [pc, #448]	; (80085ac <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80083ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083ec:	e010      	b.n	8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80083ee:	4b6d      	ldr	r3, [pc, #436]	; (80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083fa:	d106      	bne.n	800840a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80083fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008402:	d102      	bne.n	800840a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008404:	4b6a      	ldr	r3, [pc, #424]	; (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008406:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008408:	e002      	b.n	8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800840a:	2300      	movs	r3, #0
 800840c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800840e:	e122      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008410:	e121      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008412:	2300      	movs	r3, #0
 8008414:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008416:	e11e      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008418:	e9d7 2300 	ldrd	r2, r3, [r7]
 800841c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8008420:	430b      	orrs	r3, r1
 8008422:	d133      	bne.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008424:	4b5f      	ldr	r3, [pc, #380]	; (80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800842c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800842e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008430:	2b00      	cmp	r3, #0
 8008432:	d004      	beq.n	800843e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800843a:	d012      	beq.n	8008462 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800843c:	e023      	b.n	8008486 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800843e:	4b59      	ldr	r3, [pc, #356]	; (80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008446:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800844a:	d107      	bne.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800844c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008450:	4618      	mov	r0, r3
 8008452:	f000 fbc7 	bl	8008be4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008458:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800845a:	e0fc      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800845c:	2300      	movs	r3, #0
 800845e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008460:	e0f9      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008462:	4b50      	ldr	r3, [pc, #320]	; (80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800846a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800846e:	d107      	bne.n	8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008470:	f107 0318 	add.w	r3, r7, #24
 8008474:	4618      	mov	r0, r3
 8008476:	f000 f90d 	bl	8008694 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800847a:	6a3b      	ldr	r3, [r7, #32]
 800847c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800847e:	e0ea      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008480:	2300      	movs	r3, #0
 8008482:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008484:	e0e7      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008486:	2300      	movs	r3, #0
 8008488:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800848a:	e0e4      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800848c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008490:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8008494:	430b      	orrs	r3, r1
 8008496:	f040 808d 	bne.w	80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800849a:	4b42      	ldr	r3, [pc, #264]	; (80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800849c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800849e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80084a2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80084a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084aa:	d06b      	beq.n	8008584 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80084ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084b2:	d874      	bhi.n	800859e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80084b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084ba:	d056      	beq.n	800856a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80084bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084c2:	d86c      	bhi.n	800859e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80084c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80084ca:	d03b      	beq.n	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80084cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80084d2:	d864      	bhi.n	800859e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80084d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084da:	d021      	beq.n	8008520 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80084dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084e2:	d85c      	bhi.n	800859e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80084e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d004      	beq.n	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80084ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084f0:	d004      	beq.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80084f2:	e054      	b.n	800859e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80084f4:	f000 f8b8 	bl	8008668 <HAL_RCCEx_GetD3PCLK1Freq>
 80084f8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80084fa:	e0ac      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084fc:	4b29      	ldr	r3, [pc, #164]	; (80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008504:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008508:	d107      	bne.n	800851a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800850a:	f107 0318 	add.w	r3, r7, #24
 800850e:	4618      	mov	r0, r3
 8008510:	f000 f8c0 	bl	8008694 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008518:	e09d      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800851a:	2300      	movs	r3, #0
 800851c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800851e:	e09a      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008520:	4b20      	ldr	r3, [pc, #128]	; (80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008528:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800852c:	d107      	bne.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800852e:	f107 030c 	add.w	r3, r7, #12
 8008532:	4618      	mov	r0, r3
 8008534:	f000 fa02 	bl	800893c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800853c:	e08b      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800853e:	2300      	movs	r3, #0
 8008540:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008542:	e088      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008544:	4b17      	ldr	r3, [pc, #92]	; (80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f003 0304 	and.w	r3, r3, #4
 800854c:	2b04      	cmp	r3, #4
 800854e:	d109      	bne.n	8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008550:	4b14      	ldr	r3, [pc, #80]	; (80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	08db      	lsrs	r3, r3, #3
 8008556:	f003 0303 	and.w	r3, r3, #3
 800855a:	4a13      	ldr	r2, [pc, #76]	; (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800855c:	fa22 f303 	lsr.w	r3, r2, r3
 8008560:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008562:	e078      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008564:	2300      	movs	r3, #0
 8008566:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008568:	e075      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800856a:	4b0e      	ldr	r3, [pc, #56]	; (80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008576:	d102      	bne.n	800857e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008578:	4b0c      	ldr	r3, [pc, #48]	; (80085ac <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800857a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800857c:	e06b      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800857e:	2300      	movs	r3, #0
 8008580:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008582:	e068      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008584:	4b07      	ldr	r3, [pc, #28]	; (80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800858c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008590:	d102      	bne.n	8008598 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008592:	4b07      	ldr	r3, [pc, #28]	; (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008594:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008596:	e05e      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008598:	2300      	movs	r3, #0
 800859a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800859c:	e05b      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800859e:	2300      	movs	r3, #0
 80085a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085a2:	e058      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80085a4:	58024400 	.word	0x58024400
 80085a8:	03d09000 	.word	0x03d09000
 80085ac:	003d0900 	.word	0x003d0900
 80085b0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80085b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085b8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80085bc:	430b      	orrs	r3, r1
 80085be:	d148      	bne.n	8008652 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80085c0:	4b27      	ldr	r3, [pc, #156]	; (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80085c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80085c8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80085ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085d0:	d02a      	beq.n	8008628 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80085d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085d8:	d838      	bhi.n	800864c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80085da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d004      	beq.n	80085ea <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80085e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085e6:	d00d      	beq.n	8008604 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80085e8:	e030      	b.n	800864c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80085ea:	4b1d      	ldr	r3, [pc, #116]	; (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085f6:	d102      	bne.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80085f8:	4b1a      	ldr	r3, [pc, #104]	; (8008664 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80085fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085fc:	e02b      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085fe:	2300      	movs	r3, #0
 8008600:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008602:	e028      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008604:	4b16      	ldr	r3, [pc, #88]	; (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800860c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008610:	d107      	bne.n	8008622 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008616:	4618      	mov	r0, r3
 8008618:	f000 fae4 	bl	8008be4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800861c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008620:	e019      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008622:	2300      	movs	r3, #0
 8008624:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008626:	e016      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008628:	4b0d      	ldr	r3, [pc, #52]	; (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008630:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008634:	d107      	bne.n	8008646 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008636:	f107 0318 	add.w	r3, r7, #24
 800863a:	4618      	mov	r0, r3
 800863c:	f000 f82a 	bl	8008694 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008644:	e007      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008646:	2300      	movs	r3, #0
 8008648:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800864a:	e004      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800864c:	2300      	movs	r3, #0
 800864e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008650:	e001      	b.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008652:	2300      	movs	r3, #0
 8008654:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8008656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008658:	4618      	mov	r0, r3
 800865a:	3740      	adds	r7, #64	; 0x40
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	58024400 	.word	0x58024400
 8008664:	017d7840 	.word	0x017d7840

08008668 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800866c:	f7fe f816 	bl	800669c <HAL_RCC_GetHCLKFreq>
 8008670:	4602      	mov	r2, r0
 8008672:	4b06      	ldr	r3, [pc, #24]	; (800868c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008674:	6a1b      	ldr	r3, [r3, #32]
 8008676:	091b      	lsrs	r3, r3, #4
 8008678:	f003 0307 	and.w	r3, r3, #7
 800867c:	4904      	ldr	r1, [pc, #16]	; (8008690 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800867e:	5ccb      	ldrb	r3, [r1, r3]
 8008680:	f003 031f 	and.w	r3, r3, #31
 8008684:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008688:	4618      	mov	r0, r3
 800868a:	bd80      	pop	{r7, pc}
 800868c:	58024400 	.word	0x58024400
 8008690:	0800d010 	.word	0x0800d010

08008694 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008694:	b480      	push	{r7}
 8008696:	b089      	sub	sp, #36	; 0x24
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800869c:	4ba1      	ldr	r3, [pc, #644]	; (8008924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800869e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a0:	f003 0303 	and.w	r3, r3, #3
 80086a4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80086a6:	4b9f      	ldr	r3, [pc, #636]	; (8008924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086aa:	0b1b      	lsrs	r3, r3, #12
 80086ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086b0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80086b2:	4b9c      	ldr	r3, [pc, #624]	; (8008924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b6:	091b      	lsrs	r3, r3, #4
 80086b8:	f003 0301 	and.w	r3, r3, #1
 80086bc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80086be:	4b99      	ldr	r3, [pc, #612]	; (8008924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086c2:	08db      	lsrs	r3, r3, #3
 80086c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80086c8:	693a      	ldr	r2, [r7, #16]
 80086ca:	fb02 f303 	mul.w	r3, r2, r3
 80086ce:	ee07 3a90 	vmov	s15, r3
 80086d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	f000 8111 	beq.w	8008904 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80086e2:	69bb      	ldr	r3, [r7, #24]
 80086e4:	2b02      	cmp	r3, #2
 80086e6:	f000 8083 	beq.w	80087f0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	f200 80a1 	bhi.w	8008834 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80086f2:	69bb      	ldr	r3, [r7, #24]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d003      	beq.n	8008700 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80086f8:	69bb      	ldr	r3, [r7, #24]
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d056      	beq.n	80087ac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80086fe:	e099      	b.n	8008834 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008700:	4b88      	ldr	r3, [pc, #544]	; (8008924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f003 0320 	and.w	r3, r3, #32
 8008708:	2b00      	cmp	r3, #0
 800870a:	d02d      	beq.n	8008768 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800870c:	4b85      	ldr	r3, [pc, #532]	; (8008924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	08db      	lsrs	r3, r3, #3
 8008712:	f003 0303 	and.w	r3, r3, #3
 8008716:	4a84      	ldr	r2, [pc, #528]	; (8008928 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008718:	fa22 f303 	lsr.w	r3, r2, r3
 800871c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	ee07 3a90 	vmov	s15, r3
 8008724:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	ee07 3a90 	vmov	s15, r3
 800872e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008736:	4b7b      	ldr	r3, [pc, #492]	; (8008924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800873a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800873e:	ee07 3a90 	vmov	s15, r3
 8008742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008746:	ed97 6a03 	vldr	s12, [r7, #12]
 800874a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800892c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800874e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008756:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800875a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800875e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008762:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008766:	e087      	b.n	8008878 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	ee07 3a90 	vmov	s15, r3
 800876e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008772:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008930 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800877a:	4b6a      	ldr	r3, [pc, #424]	; (8008924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800877c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800877e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008782:	ee07 3a90 	vmov	s15, r3
 8008786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800878a:	ed97 6a03 	vldr	s12, [r7, #12]
 800878e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800892c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800879a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800879e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087aa:	e065      	b.n	8008878 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	ee07 3a90 	vmov	s15, r3
 80087b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80087ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087be:	4b59      	ldr	r3, [pc, #356]	; (8008924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087c6:	ee07 3a90 	vmov	s15, r3
 80087ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80087d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800892c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087ee:	e043      	b.n	8008878 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	ee07 3a90 	vmov	s15, r3
 80087f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008938 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80087fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008802:	4b48      	ldr	r3, [pc, #288]	; (8008924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800880a:	ee07 3a90 	vmov	s15, r3
 800880e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008812:	ed97 6a03 	vldr	s12, [r7, #12]
 8008816:	eddf 5a45 	vldr	s11, [pc, #276]	; 800892c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800881a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800881e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008822:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800882a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800882e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008832:	e021      	b.n	8008878 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	ee07 3a90 	vmov	s15, r3
 800883a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800883e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008846:	4b37      	ldr	r3, [pc, #220]	; (8008924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800884a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800884e:	ee07 3a90 	vmov	s15, r3
 8008852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008856:	ed97 6a03 	vldr	s12, [r7, #12]
 800885a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800892c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800885e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008866:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800886a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800886e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008872:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008876:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008878:	4b2a      	ldr	r3, [pc, #168]	; (8008924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800887a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800887c:	0a5b      	lsrs	r3, r3, #9
 800887e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008882:	ee07 3a90 	vmov	s15, r3
 8008886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800888a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800888e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008892:	edd7 6a07 	vldr	s13, [r7, #28]
 8008896:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800889a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800889e:	ee17 2a90 	vmov	r2, s15
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80088a6:	4b1f      	ldr	r3, [pc, #124]	; (8008924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088aa:	0c1b      	lsrs	r3, r3, #16
 80088ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088b0:	ee07 3a90 	vmov	s15, r3
 80088b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80088c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088cc:	ee17 2a90 	vmov	r2, s15
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80088d4:	4b13      	ldr	r3, [pc, #76]	; (8008924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088d8:	0e1b      	lsrs	r3, r3, #24
 80088da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088de:	ee07 3a90 	vmov	s15, r3
 80088e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80088f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088fa:	ee17 2a90 	vmov	r2, s15
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008902:	e008      	b.n	8008916 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	609a      	str	r2, [r3, #8]
}
 8008916:	bf00      	nop
 8008918:	3724      	adds	r7, #36	; 0x24
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop
 8008924:	58024400 	.word	0x58024400
 8008928:	03d09000 	.word	0x03d09000
 800892c:	46000000 	.word	0x46000000
 8008930:	4c742400 	.word	0x4c742400
 8008934:	4a742400 	.word	0x4a742400
 8008938:	4bbebc20 	.word	0x4bbebc20

0800893c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800893c:	b480      	push	{r7}
 800893e:	b089      	sub	sp, #36	; 0x24
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008944:	4ba1      	ldr	r3, [pc, #644]	; (8008bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008948:	f003 0303 	and.w	r3, r3, #3
 800894c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800894e:	4b9f      	ldr	r3, [pc, #636]	; (8008bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008952:	0d1b      	lsrs	r3, r3, #20
 8008954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008958:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800895a:	4b9c      	ldr	r3, [pc, #624]	; (8008bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800895c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895e:	0a1b      	lsrs	r3, r3, #8
 8008960:	f003 0301 	and.w	r3, r3, #1
 8008964:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008966:	4b99      	ldr	r3, [pc, #612]	; (8008bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800896a:	08db      	lsrs	r3, r3, #3
 800896c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008970:	693a      	ldr	r2, [r7, #16]
 8008972:	fb02 f303 	mul.w	r3, r2, r3
 8008976:	ee07 3a90 	vmov	s15, r3
 800897a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800897e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	2b00      	cmp	r3, #0
 8008986:	f000 8111 	beq.w	8008bac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800898a:	69bb      	ldr	r3, [r7, #24]
 800898c:	2b02      	cmp	r3, #2
 800898e:	f000 8083 	beq.w	8008a98 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	2b02      	cmp	r3, #2
 8008996:	f200 80a1 	bhi.w	8008adc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800899a:	69bb      	ldr	r3, [r7, #24]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d003      	beq.n	80089a8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80089a0:	69bb      	ldr	r3, [r7, #24]
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d056      	beq.n	8008a54 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80089a6:	e099      	b.n	8008adc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089a8:	4b88      	ldr	r3, [pc, #544]	; (8008bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f003 0320 	and.w	r3, r3, #32
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d02d      	beq.n	8008a10 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089b4:	4b85      	ldr	r3, [pc, #532]	; (8008bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	08db      	lsrs	r3, r3, #3
 80089ba:	f003 0303 	and.w	r3, r3, #3
 80089be:	4a84      	ldr	r2, [pc, #528]	; (8008bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80089c0:	fa22 f303 	lsr.w	r3, r2, r3
 80089c4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	ee07 3a90 	vmov	s15, r3
 80089cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	ee07 3a90 	vmov	s15, r3
 80089d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089de:	4b7b      	ldr	r3, [pc, #492]	; (8008bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089e6:	ee07 3a90 	vmov	s15, r3
 80089ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80089f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80089f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a0a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008a0e:	e087      	b.n	8008b20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	ee07 3a90 	vmov	s15, r3
 8008a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a1a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a22:	4b6a      	ldr	r3, [pc, #424]	; (8008bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a2a:	ee07 3a90 	vmov	s15, r3
 8008a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a32:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a36:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a52:	e065      	b.n	8008b20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	ee07 3a90 	vmov	s15, r3
 8008a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a5e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008bdc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a66:	4b59      	ldr	r3, [pc, #356]	; (8008bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a6e:	ee07 3a90 	vmov	s15, r3
 8008a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a76:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a7a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a96:	e043      	b.n	8008b20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	ee07 3a90 	vmov	s15, r3
 8008a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aa2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008be0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aaa:	4b48      	ldr	r3, [pc, #288]	; (8008bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ab2:	ee07 3a90 	vmov	s15, r3
 8008ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aba:	ed97 6a03 	vldr	s12, [r7, #12]
 8008abe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ad6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ada:	e021      	b.n	8008b20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	ee07 3a90 	vmov	s15, r3
 8008ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ae6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008bdc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aee:	4b37      	ldr	r3, [pc, #220]	; (8008bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008af6:	ee07 3a90 	vmov	s15, r3
 8008afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008afe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b02:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b1e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008b20:	4b2a      	ldr	r3, [pc, #168]	; (8008bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b24:	0a5b      	lsrs	r3, r3, #9
 8008b26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b2a:	ee07 3a90 	vmov	s15, r3
 8008b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b46:	ee17 2a90 	vmov	r2, s15
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008b4e:	4b1f      	ldr	r3, [pc, #124]	; (8008bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b52:	0c1b      	lsrs	r3, r3, #16
 8008b54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b58:	ee07 3a90 	vmov	s15, r3
 8008b5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b68:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b74:	ee17 2a90 	vmov	r2, s15
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008b7c:	4b13      	ldr	r3, [pc, #76]	; (8008bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b80:	0e1b      	lsrs	r3, r3, #24
 8008b82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b86:	ee07 3a90 	vmov	s15, r3
 8008b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b96:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ba2:	ee17 2a90 	vmov	r2, s15
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008baa:	e008      	b.n	8008bbe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	609a      	str	r2, [r3, #8]
}
 8008bbe:	bf00      	nop
 8008bc0:	3724      	adds	r7, #36	; 0x24
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr
 8008bca:	bf00      	nop
 8008bcc:	58024400 	.word	0x58024400
 8008bd0:	03d09000 	.word	0x03d09000
 8008bd4:	46000000 	.word	0x46000000
 8008bd8:	4c742400 	.word	0x4c742400
 8008bdc:	4a742400 	.word	0x4a742400
 8008be0:	4bbebc20 	.word	0x4bbebc20

08008be4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b089      	sub	sp, #36	; 0x24
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008bec:	4ba0      	ldr	r3, [pc, #640]	; (8008e70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf0:	f003 0303 	and.w	r3, r3, #3
 8008bf4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008bf6:	4b9e      	ldr	r3, [pc, #632]	; (8008e70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bfa:	091b      	lsrs	r3, r3, #4
 8008bfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c00:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008c02:	4b9b      	ldr	r3, [pc, #620]	; (8008e70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c06:	f003 0301 	and.w	r3, r3, #1
 8008c0a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008c0c:	4b98      	ldr	r3, [pc, #608]	; (8008e70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c10:	08db      	lsrs	r3, r3, #3
 8008c12:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c16:	693a      	ldr	r2, [r7, #16]
 8008c18:	fb02 f303 	mul.w	r3, r2, r3
 8008c1c:	ee07 3a90 	vmov	s15, r3
 8008c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c24:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	f000 8111 	beq.w	8008e52 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	f000 8083 	beq.w	8008d3e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008c38:	69bb      	ldr	r3, [r7, #24]
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	f200 80a1 	bhi.w	8008d82 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008c40:	69bb      	ldr	r3, [r7, #24]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d003      	beq.n	8008c4e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d056      	beq.n	8008cfa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008c4c:	e099      	b.n	8008d82 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c4e:	4b88      	ldr	r3, [pc, #544]	; (8008e70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f003 0320 	and.w	r3, r3, #32
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d02d      	beq.n	8008cb6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c5a:	4b85      	ldr	r3, [pc, #532]	; (8008e70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	08db      	lsrs	r3, r3, #3
 8008c60:	f003 0303 	and.w	r3, r3, #3
 8008c64:	4a83      	ldr	r2, [pc, #524]	; (8008e74 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008c66:	fa22 f303 	lsr.w	r3, r2, r3
 8008c6a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	ee07 3a90 	vmov	s15, r3
 8008c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	ee07 3a90 	vmov	s15, r3
 8008c7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c84:	4b7a      	ldr	r3, [pc, #488]	; (8008e70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c8c:	ee07 3a90 	vmov	s15, r3
 8008c90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c94:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c98:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008e78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008c9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ca0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ca4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ca8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cb0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008cb4:	e087      	b.n	8008dc6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	ee07 3a90 	vmov	s15, r3
 8008cbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cc0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008e7c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008cc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cc8:	4b69      	ldr	r3, [pc, #420]	; (8008e70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cd0:	ee07 3a90 	vmov	s15, r3
 8008cd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cd8:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cdc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008e78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008ce0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ce4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ce8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cf4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008cf8:	e065      	b.n	8008dc6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	ee07 3a90 	vmov	s15, r3
 8008d00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d04:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008e80 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008d08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d0c:	4b58      	ldr	r3, [pc, #352]	; (8008e70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d14:	ee07 3a90 	vmov	s15, r3
 8008d18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d1c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d20:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008e78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d38:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d3c:	e043      	b.n	8008dc6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	ee07 3a90 	vmov	s15, r3
 8008d44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d48:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008e84 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008d4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d50:	4b47      	ldr	r3, [pc, #284]	; (8008e70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d58:	ee07 3a90 	vmov	s15, r3
 8008d5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d60:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d64:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008e78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d7c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d80:	e021      	b.n	8008dc6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	ee07 3a90 	vmov	s15, r3
 8008d88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d8c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008e7c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008d90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d94:	4b36      	ldr	r3, [pc, #216]	; (8008e70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d9c:	ee07 3a90 	vmov	s15, r3
 8008da0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008da4:	ed97 6a03 	vldr	s12, [r7, #12]
 8008da8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008e78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008dac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008db0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008db4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008db8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dc0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dc4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008dc6:	4b2a      	ldr	r3, [pc, #168]	; (8008e70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dca:	0a5b      	lsrs	r3, r3, #9
 8008dcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dd0:	ee07 3a90 	vmov	s15, r3
 8008dd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ddc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008de0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008de4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008de8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dec:	ee17 2a90 	vmov	r2, s15
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008df4:	4b1e      	ldr	r3, [pc, #120]	; (8008e70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008df8:	0c1b      	lsrs	r3, r3, #16
 8008dfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dfe:	ee07 3a90 	vmov	s15, r3
 8008e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e1a:	ee17 2a90 	vmov	r2, s15
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008e22:	4b13      	ldr	r3, [pc, #76]	; (8008e70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e26:	0e1b      	lsrs	r3, r3, #24
 8008e28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e2c:	ee07 3a90 	vmov	s15, r3
 8008e30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e48:	ee17 2a90 	vmov	r2, s15
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008e50:	e008      	b.n	8008e64 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2200      	movs	r2, #0
 8008e56:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	609a      	str	r2, [r3, #8]
}
 8008e64:	bf00      	nop
 8008e66:	3724      	adds	r7, #36	; 0x24
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr
 8008e70:	58024400 	.word	0x58024400
 8008e74:	03d09000 	.word	0x03d09000
 8008e78:	46000000 	.word	0x46000000
 8008e7c:	4c742400 	.word	0x4c742400
 8008e80:	4a742400 	.word	0x4a742400
 8008e84:	4bbebc20 	.word	0x4bbebc20

08008e88 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e92:	2300      	movs	r3, #0
 8008e94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008e96:	4b53      	ldr	r3, [pc, #332]	; (8008fe4 <RCCEx_PLL2_Config+0x15c>)
 8008e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e9a:	f003 0303 	and.w	r3, r3, #3
 8008e9e:	2b03      	cmp	r3, #3
 8008ea0:	d101      	bne.n	8008ea6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e099      	b.n	8008fda <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008ea6:	4b4f      	ldr	r3, [pc, #316]	; (8008fe4 <RCCEx_PLL2_Config+0x15c>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a4e      	ldr	r2, [pc, #312]	; (8008fe4 <RCCEx_PLL2_Config+0x15c>)
 8008eac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008eb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008eb2:	f7f8 faa7 	bl	8001404 <HAL_GetTick>
 8008eb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008eb8:	e008      	b.n	8008ecc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008eba:	f7f8 faa3 	bl	8001404 <HAL_GetTick>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	1ad3      	subs	r3, r2, r3
 8008ec4:	2b02      	cmp	r3, #2
 8008ec6:	d901      	bls.n	8008ecc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008ec8:	2303      	movs	r3, #3
 8008eca:	e086      	b.n	8008fda <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ecc:	4b45      	ldr	r3, [pc, #276]	; (8008fe4 <RCCEx_PLL2_Config+0x15c>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d1f0      	bne.n	8008eba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008ed8:	4b42      	ldr	r3, [pc, #264]	; (8008fe4 <RCCEx_PLL2_Config+0x15c>)
 8008eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008edc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	031b      	lsls	r3, r3, #12
 8008ee6:	493f      	ldr	r1, [pc, #252]	; (8008fe4 <RCCEx_PLL2_Config+0x15c>)
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	628b      	str	r3, [r1, #40]	; 0x28
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	3b01      	subs	r3, #1
 8008ef2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	3b01      	subs	r3, #1
 8008efc:	025b      	lsls	r3, r3, #9
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	431a      	orrs	r2, r3
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	68db      	ldr	r3, [r3, #12]
 8008f06:	3b01      	subs	r3, #1
 8008f08:	041b      	lsls	r3, r3, #16
 8008f0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008f0e:	431a      	orrs	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	691b      	ldr	r3, [r3, #16]
 8008f14:	3b01      	subs	r3, #1
 8008f16:	061b      	lsls	r3, r3, #24
 8008f18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008f1c:	4931      	ldr	r1, [pc, #196]	; (8008fe4 <RCCEx_PLL2_Config+0x15c>)
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008f22:	4b30      	ldr	r3, [pc, #192]	; (8008fe4 <RCCEx_PLL2_Config+0x15c>)
 8008f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	695b      	ldr	r3, [r3, #20]
 8008f2e:	492d      	ldr	r1, [pc, #180]	; (8008fe4 <RCCEx_PLL2_Config+0x15c>)
 8008f30:	4313      	orrs	r3, r2
 8008f32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008f34:	4b2b      	ldr	r3, [pc, #172]	; (8008fe4 <RCCEx_PLL2_Config+0x15c>)
 8008f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f38:	f023 0220 	bic.w	r2, r3, #32
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	699b      	ldr	r3, [r3, #24]
 8008f40:	4928      	ldr	r1, [pc, #160]	; (8008fe4 <RCCEx_PLL2_Config+0x15c>)
 8008f42:	4313      	orrs	r3, r2
 8008f44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008f46:	4b27      	ldr	r3, [pc, #156]	; (8008fe4 <RCCEx_PLL2_Config+0x15c>)
 8008f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f4a:	4a26      	ldr	r2, [pc, #152]	; (8008fe4 <RCCEx_PLL2_Config+0x15c>)
 8008f4c:	f023 0310 	bic.w	r3, r3, #16
 8008f50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008f52:	4b24      	ldr	r3, [pc, #144]	; (8008fe4 <RCCEx_PLL2_Config+0x15c>)
 8008f54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f56:	4b24      	ldr	r3, [pc, #144]	; (8008fe8 <RCCEx_PLL2_Config+0x160>)
 8008f58:	4013      	ands	r3, r2
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	69d2      	ldr	r2, [r2, #28]
 8008f5e:	00d2      	lsls	r2, r2, #3
 8008f60:	4920      	ldr	r1, [pc, #128]	; (8008fe4 <RCCEx_PLL2_Config+0x15c>)
 8008f62:	4313      	orrs	r3, r2
 8008f64:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008f66:	4b1f      	ldr	r3, [pc, #124]	; (8008fe4 <RCCEx_PLL2_Config+0x15c>)
 8008f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f6a:	4a1e      	ldr	r2, [pc, #120]	; (8008fe4 <RCCEx_PLL2_Config+0x15c>)
 8008f6c:	f043 0310 	orr.w	r3, r3, #16
 8008f70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d106      	bne.n	8008f86 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008f78:	4b1a      	ldr	r3, [pc, #104]	; (8008fe4 <RCCEx_PLL2_Config+0x15c>)
 8008f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f7c:	4a19      	ldr	r2, [pc, #100]	; (8008fe4 <RCCEx_PLL2_Config+0x15c>)
 8008f7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008f84:	e00f      	b.n	8008fa6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d106      	bne.n	8008f9a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008f8c:	4b15      	ldr	r3, [pc, #84]	; (8008fe4 <RCCEx_PLL2_Config+0x15c>)
 8008f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f90:	4a14      	ldr	r2, [pc, #80]	; (8008fe4 <RCCEx_PLL2_Config+0x15c>)
 8008f92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008f98:	e005      	b.n	8008fa6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008f9a:	4b12      	ldr	r3, [pc, #72]	; (8008fe4 <RCCEx_PLL2_Config+0x15c>)
 8008f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f9e:	4a11      	ldr	r2, [pc, #68]	; (8008fe4 <RCCEx_PLL2_Config+0x15c>)
 8008fa0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008fa4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008fa6:	4b0f      	ldr	r3, [pc, #60]	; (8008fe4 <RCCEx_PLL2_Config+0x15c>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a0e      	ldr	r2, [pc, #56]	; (8008fe4 <RCCEx_PLL2_Config+0x15c>)
 8008fac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008fb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fb2:	f7f8 fa27 	bl	8001404 <HAL_GetTick>
 8008fb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008fb8:	e008      	b.n	8008fcc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008fba:	f7f8 fa23 	bl	8001404 <HAL_GetTick>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	1ad3      	subs	r3, r2, r3
 8008fc4:	2b02      	cmp	r3, #2
 8008fc6:	d901      	bls.n	8008fcc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008fc8:	2303      	movs	r3, #3
 8008fca:	e006      	b.n	8008fda <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008fcc:	4b05      	ldr	r3, [pc, #20]	; (8008fe4 <RCCEx_PLL2_Config+0x15c>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d0f0      	beq.n	8008fba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3710      	adds	r7, #16
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	58024400 	.word	0x58024400
 8008fe8:	ffff0007 	.word	0xffff0007

08008fec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008ffa:	4b53      	ldr	r3, [pc, #332]	; (8009148 <RCCEx_PLL3_Config+0x15c>)
 8008ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ffe:	f003 0303 	and.w	r3, r3, #3
 8009002:	2b03      	cmp	r3, #3
 8009004:	d101      	bne.n	800900a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009006:	2301      	movs	r3, #1
 8009008:	e099      	b.n	800913e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800900a:	4b4f      	ldr	r3, [pc, #316]	; (8009148 <RCCEx_PLL3_Config+0x15c>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a4e      	ldr	r2, [pc, #312]	; (8009148 <RCCEx_PLL3_Config+0x15c>)
 8009010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009014:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009016:	f7f8 f9f5 	bl	8001404 <HAL_GetTick>
 800901a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800901c:	e008      	b.n	8009030 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800901e:	f7f8 f9f1 	bl	8001404 <HAL_GetTick>
 8009022:	4602      	mov	r2, r0
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	1ad3      	subs	r3, r2, r3
 8009028:	2b02      	cmp	r3, #2
 800902a:	d901      	bls.n	8009030 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800902c:	2303      	movs	r3, #3
 800902e:	e086      	b.n	800913e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009030:	4b45      	ldr	r3, [pc, #276]	; (8009148 <RCCEx_PLL3_Config+0x15c>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009038:	2b00      	cmp	r3, #0
 800903a:	d1f0      	bne.n	800901e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800903c:	4b42      	ldr	r3, [pc, #264]	; (8009148 <RCCEx_PLL3_Config+0x15c>)
 800903e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009040:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	051b      	lsls	r3, r3, #20
 800904a:	493f      	ldr	r1, [pc, #252]	; (8009148 <RCCEx_PLL3_Config+0x15c>)
 800904c:	4313      	orrs	r3, r2
 800904e:	628b      	str	r3, [r1, #40]	; 0x28
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	3b01      	subs	r3, #1
 8009056:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	3b01      	subs	r3, #1
 8009060:	025b      	lsls	r3, r3, #9
 8009062:	b29b      	uxth	r3, r3
 8009064:	431a      	orrs	r2, r3
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	68db      	ldr	r3, [r3, #12]
 800906a:	3b01      	subs	r3, #1
 800906c:	041b      	lsls	r3, r3, #16
 800906e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009072:	431a      	orrs	r2, r3
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	691b      	ldr	r3, [r3, #16]
 8009078:	3b01      	subs	r3, #1
 800907a:	061b      	lsls	r3, r3, #24
 800907c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009080:	4931      	ldr	r1, [pc, #196]	; (8009148 <RCCEx_PLL3_Config+0x15c>)
 8009082:	4313      	orrs	r3, r2
 8009084:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009086:	4b30      	ldr	r3, [pc, #192]	; (8009148 <RCCEx_PLL3_Config+0x15c>)
 8009088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800908a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	695b      	ldr	r3, [r3, #20]
 8009092:	492d      	ldr	r1, [pc, #180]	; (8009148 <RCCEx_PLL3_Config+0x15c>)
 8009094:	4313      	orrs	r3, r2
 8009096:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009098:	4b2b      	ldr	r3, [pc, #172]	; (8009148 <RCCEx_PLL3_Config+0x15c>)
 800909a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800909c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	699b      	ldr	r3, [r3, #24]
 80090a4:	4928      	ldr	r1, [pc, #160]	; (8009148 <RCCEx_PLL3_Config+0x15c>)
 80090a6:	4313      	orrs	r3, r2
 80090a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80090aa:	4b27      	ldr	r3, [pc, #156]	; (8009148 <RCCEx_PLL3_Config+0x15c>)
 80090ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ae:	4a26      	ldr	r2, [pc, #152]	; (8009148 <RCCEx_PLL3_Config+0x15c>)
 80090b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80090b6:	4b24      	ldr	r3, [pc, #144]	; (8009148 <RCCEx_PLL3_Config+0x15c>)
 80090b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090ba:	4b24      	ldr	r3, [pc, #144]	; (800914c <RCCEx_PLL3_Config+0x160>)
 80090bc:	4013      	ands	r3, r2
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	69d2      	ldr	r2, [r2, #28]
 80090c2:	00d2      	lsls	r2, r2, #3
 80090c4:	4920      	ldr	r1, [pc, #128]	; (8009148 <RCCEx_PLL3_Config+0x15c>)
 80090c6:	4313      	orrs	r3, r2
 80090c8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80090ca:	4b1f      	ldr	r3, [pc, #124]	; (8009148 <RCCEx_PLL3_Config+0x15c>)
 80090cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ce:	4a1e      	ldr	r2, [pc, #120]	; (8009148 <RCCEx_PLL3_Config+0x15c>)
 80090d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d106      	bne.n	80090ea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80090dc:	4b1a      	ldr	r3, [pc, #104]	; (8009148 <RCCEx_PLL3_Config+0x15c>)
 80090de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e0:	4a19      	ldr	r2, [pc, #100]	; (8009148 <RCCEx_PLL3_Config+0x15c>)
 80090e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80090e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80090e8:	e00f      	b.n	800910a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d106      	bne.n	80090fe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80090f0:	4b15      	ldr	r3, [pc, #84]	; (8009148 <RCCEx_PLL3_Config+0x15c>)
 80090f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f4:	4a14      	ldr	r2, [pc, #80]	; (8009148 <RCCEx_PLL3_Config+0x15c>)
 80090f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80090fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80090fc:	e005      	b.n	800910a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80090fe:	4b12      	ldr	r3, [pc, #72]	; (8009148 <RCCEx_PLL3_Config+0x15c>)
 8009100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009102:	4a11      	ldr	r2, [pc, #68]	; (8009148 <RCCEx_PLL3_Config+0x15c>)
 8009104:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009108:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800910a:	4b0f      	ldr	r3, [pc, #60]	; (8009148 <RCCEx_PLL3_Config+0x15c>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a0e      	ldr	r2, [pc, #56]	; (8009148 <RCCEx_PLL3_Config+0x15c>)
 8009110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009114:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009116:	f7f8 f975 	bl	8001404 <HAL_GetTick>
 800911a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800911c:	e008      	b.n	8009130 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800911e:	f7f8 f971 	bl	8001404 <HAL_GetTick>
 8009122:	4602      	mov	r2, r0
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	1ad3      	subs	r3, r2, r3
 8009128:	2b02      	cmp	r3, #2
 800912a:	d901      	bls.n	8009130 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800912c:	2303      	movs	r3, #3
 800912e:	e006      	b.n	800913e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009130:	4b05      	ldr	r3, [pc, #20]	; (8009148 <RCCEx_PLL3_Config+0x15c>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009138:	2b00      	cmp	r3, #0
 800913a:	d0f0      	beq.n	800911e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800913c:	7bfb      	ldrb	r3, [r7, #15]
}
 800913e:	4618      	mov	r0, r3
 8009140:	3710      	adds	r7, #16
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	58024400 	.word	0x58024400
 800914c:	ffff0007 	.word	0xffff0007

08009150 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d101      	bne.n	8009162 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800915e:	2301      	movs	r3, #1
 8009160:	e042      	b.n	80091e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009168:	2b00      	cmp	r3, #0
 800916a:	d106      	bne.n	800917a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f7f7 fe9f 	bl	8000eb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2224      	movs	r2, #36	; 0x24
 800917e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f022 0201 	bic.w	r2, r2, #1
 8009190:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 f8ba 	bl	800930c <UART_SetConfig>
 8009198:	4603      	mov	r3, r0
 800919a:	2b01      	cmp	r3, #1
 800919c:	d101      	bne.n	80091a2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800919e:	2301      	movs	r3, #1
 80091a0:	e022      	b.n	80091e8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d002      	beq.n	80091b0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 fe16 	bl	8009ddc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	685a      	ldr	r2, [r3, #4]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80091be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	689a      	ldr	r2, [r3, #8]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80091ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	681a      	ldr	r2, [r3, #0]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f042 0201 	orr.w	r2, r2, #1
 80091de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 fe9d 	bl	8009f20 <UART_CheckIdleState>
 80091e6:	4603      	mov	r3, r0
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3708      	adds	r7, #8
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b08a      	sub	sp, #40	; 0x28
 80091f4:	af02      	add	r7, sp, #8
 80091f6:	60f8      	str	r0, [r7, #12]
 80091f8:	60b9      	str	r1, [r7, #8]
 80091fa:	603b      	str	r3, [r7, #0]
 80091fc:	4613      	mov	r3, r2
 80091fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009206:	2b20      	cmp	r3, #32
 8009208:	d17b      	bne.n	8009302 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d002      	beq.n	8009216 <HAL_UART_Transmit+0x26>
 8009210:	88fb      	ldrh	r3, [r7, #6]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d101      	bne.n	800921a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009216:	2301      	movs	r3, #1
 8009218:	e074      	b.n	8009304 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2200      	movs	r2, #0
 800921e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2221      	movs	r2, #33	; 0x21
 8009226:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800922a:	f7f8 f8eb 	bl	8001404 <HAL_GetTick>
 800922e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	88fa      	ldrh	r2, [r7, #6]
 8009234:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	88fa      	ldrh	r2, [r7, #6]
 800923c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009248:	d108      	bne.n	800925c <HAL_UART_Transmit+0x6c>
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	691b      	ldr	r3, [r3, #16]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d104      	bne.n	800925c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009252:	2300      	movs	r3, #0
 8009254:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	61bb      	str	r3, [r7, #24]
 800925a:	e003      	b.n	8009264 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009260:	2300      	movs	r3, #0
 8009262:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009264:	e030      	b.n	80092c8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	9300      	str	r3, [sp, #0]
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	2200      	movs	r2, #0
 800926e:	2180      	movs	r1, #128	; 0x80
 8009270:	68f8      	ldr	r0, [r7, #12]
 8009272:	f000 feff 	bl	800a074 <UART_WaitOnFlagUntilTimeout>
 8009276:	4603      	mov	r3, r0
 8009278:	2b00      	cmp	r3, #0
 800927a:	d005      	beq.n	8009288 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2220      	movs	r2, #32
 8009280:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8009284:	2303      	movs	r3, #3
 8009286:	e03d      	b.n	8009304 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009288:	69fb      	ldr	r3, [r7, #28]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d10b      	bne.n	80092a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800928e:	69bb      	ldr	r3, [r7, #24]
 8009290:	881b      	ldrh	r3, [r3, #0]
 8009292:	461a      	mov	r2, r3
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800929c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800929e:	69bb      	ldr	r3, [r7, #24]
 80092a0:	3302      	adds	r3, #2
 80092a2:	61bb      	str	r3, [r7, #24]
 80092a4:	e007      	b.n	80092b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80092a6:	69fb      	ldr	r3, [r7, #28]
 80092a8:	781a      	ldrb	r2, [r3, #0]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80092b0:	69fb      	ldr	r3, [r7, #28]
 80092b2:	3301      	adds	r3, #1
 80092b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80092bc:	b29b      	uxth	r3, r3
 80092be:	3b01      	subs	r3, #1
 80092c0:	b29a      	uxth	r2, r3
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d1c8      	bne.n	8009266 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	9300      	str	r3, [sp, #0]
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	2200      	movs	r2, #0
 80092dc:	2140      	movs	r1, #64	; 0x40
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	f000 fec8 	bl	800a074 <UART_WaitOnFlagUntilTimeout>
 80092e4:	4603      	mov	r3, r0
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d005      	beq.n	80092f6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2220      	movs	r2, #32
 80092ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80092f2:	2303      	movs	r3, #3
 80092f4:	e006      	b.n	8009304 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2220      	movs	r2, #32
 80092fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80092fe:	2300      	movs	r3, #0
 8009300:	e000      	b.n	8009304 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009302:	2302      	movs	r3, #2
  }
}
 8009304:	4618      	mov	r0, r3
 8009306:	3720      	adds	r7, #32
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800930c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009310:	b092      	sub	sp, #72	; 0x48
 8009312:	af00      	add	r7, sp, #0
 8009314:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009316:	2300      	movs	r3, #0
 8009318:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	689a      	ldr	r2, [r3, #8]
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	691b      	ldr	r3, [r3, #16]
 8009324:	431a      	orrs	r2, r3
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	695b      	ldr	r3, [r3, #20]
 800932a:	431a      	orrs	r2, r3
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	69db      	ldr	r3, [r3, #28]
 8009330:	4313      	orrs	r3, r2
 8009332:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	4bbe      	ldr	r3, [pc, #760]	; (8009634 <UART_SetConfig+0x328>)
 800933c:	4013      	ands	r3, r2
 800933e:	697a      	ldr	r2, [r7, #20]
 8009340:	6812      	ldr	r2, [r2, #0]
 8009342:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009344:	430b      	orrs	r3, r1
 8009346:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	68da      	ldr	r2, [r3, #12]
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	430a      	orrs	r2, r1
 800935c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	699b      	ldr	r3, [r3, #24]
 8009362:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4ab3      	ldr	r2, [pc, #716]	; (8009638 <UART_SetConfig+0x32c>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d004      	beq.n	8009378 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	6a1b      	ldr	r3, [r3, #32]
 8009372:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009374:	4313      	orrs	r3, r2
 8009376:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	689a      	ldr	r2, [r3, #8]
 800937e:	4baf      	ldr	r3, [pc, #700]	; (800963c <UART_SetConfig+0x330>)
 8009380:	4013      	ands	r3, r2
 8009382:	697a      	ldr	r2, [r7, #20]
 8009384:	6812      	ldr	r2, [r2, #0]
 8009386:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009388:	430b      	orrs	r3, r1
 800938a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009392:	f023 010f 	bic.w	r1, r3, #15
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	430a      	orrs	r2, r1
 80093a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4aa6      	ldr	r2, [pc, #664]	; (8009640 <UART_SetConfig+0x334>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d177      	bne.n	800949c <UART_SetConfig+0x190>
 80093ac:	4ba5      	ldr	r3, [pc, #660]	; (8009644 <UART_SetConfig+0x338>)
 80093ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80093b4:	2b28      	cmp	r3, #40	; 0x28
 80093b6:	d86d      	bhi.n	8009494 <UART_SetConfig+0x188>
 80093b8:	a201      	add	r2, pc, #4	; (adr r2, 80093c0 <UART_SetConfig+0xb4>)
 80093ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093be:	bf00      	nop
 80093c0:	08009465 	.word	0x08009465
 80093c4:	08009495 	.word	0x08009495
 80093c8:	08009495 	.word	0x08009495
 80093cc:	08009495 	.word	0x08009495
 80093d0:	08009495 	.word	0x08009495
 80093d4:	08009495 	.word	0x08009495
 80093d8:	08009495 	.word	0x08009495
 80093dc:	08009495 	.word	0x08009495
 80093e0:	0800946d 	.word	0x0800946d
 80093e4:	08009495 	.word	0x08009495
 80093e8:	08009495 	.word	0x08009495
 80093ec:	08009495 	.word	0x08009495
 80093f0:	08009495 	.word	0x08009495
 80093f4:	08009495 	.word	0x08009495
 80093f8:	08009495 	.word	0x08009495
 80093fc:	08009495 	.word	0x08009495
 8009400:	08009475 	.word	0x08009475
 8009404:	08009495 	.word	0x08009495
 8009408:	08009495 	.word	0x08009495
 800940c:	08009495 	.word	0x08009495
 8009410:	08009495 	.word	0x08009495
 8009414:	08009495 	.word	0x08009495
 8009418:	08009495 	.word	0x08009495
 800941c:	08009495 	.word	0x08009495
 8009420:	0800947d 	.word	0x0800947d
 8009424:	08009495 	.word	0x08009495
 8009428:	08009495 	.word	0x08009495
 800942c:	08009495 	.word	0x08009495
 8009430:	08009495 	.word	0x08009495
 8009434:	08009495 	.word	0x08009495
 8009438:	08009495 	.word	0x08009495
 800943c:	08009495 	.word	0x08009495
 8009440:	08009485 	.word	0x08009485
 8009444:	08009495 	.word	0x08009495
 8009448:	08009495 	.word	0x08009495
 800944c:	08009495 	.word	0x08009495
 8009450:	08009495 	.word	0x08009495
 8009454:	08009495 	.word	0x08009495
 8009458:	08009495 	.word	0x08009495
 800945c:	08009495 	.word	0x08009495
 8009460:	0800948d 	.word	0x0800948d
 8009464:	2301      	movs	r3, #1
 8009466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800946a:	e222      	b.n	80098b2 <UART_SetConfig+0x5a6>
 800946c:	2304      	movs	r3, #4
 800946e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009472:	e21e      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009474:	2308      	movs	r3, #8
 8009476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800947a:	e21a      	b.n	80098b2 <UART_SetConfig+0x5a6>
 800947c:	2310      	movs	r3, #16
 800947e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009482:	e216      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009484:	2320      	movs	r3, #32
 8009486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800948a:	e212      	b.n	80098b2 <UART_SetConfig+0x5a6>
 800948c:	2340      	movs	r3, #64	; 0x40
 800948e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009492:	e20e      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009494:	2380      	movs	r3, #128	; 0x80
 8009496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800949a:	e20a      	b.n	80098b2 <UART_SetConfig+0x5a6>
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a69      	ldr	r2, [pc, #420]	; (8009648 <UART_SetConfig+0x33c>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d130      	bne.n	8009508 <UART_SetConfig+0x1fc>
 80094a6:	4b67      	ldr	r3, [pc, #412]	; (8009644 <UART_SetConfig+0x338>)
 80094a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094aa:	f003 0307 	and.w	r3, r3, #7
 80094ae:	2b05      	cmp	r3, #5
 80094b0:	d826      	bhi.n	8009500 <UART_SetConfig+0x1f4>
 80094b2:	a201      	add	r2, pc, #4	; (adr r2, 80094b8 <UART_SetConfig+0x1ac>)
 80094b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b8:	080094d1 	.word	0x080094d1
 80094bc:	080094d9 	.word	0x080094d9
 80094c0:	080094e1 	.word	0x080094e1
 80094c4:	080094e9 	.word	0x080094e9
 80094c8:	080094f1 	.word	0x080094f1
 80094cc:	080094f9 	.word	0x080094f9
 80094d0:	2300      	movs	r3, #0
 80094d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094d6:	e1ec      	b.n	80098b2 <UART_SetConfig+0x5a6>
 80094d8:	2304      	movs	r3, #4
 80094da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094de:	e1e8      	b.n	80098b2 <UART_SetConfig+0x5a6>
 80094e0:	2308      	movs	r3, #8
 80094e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094e6:	e1e4      	b.n	80098b2 <UART_SetConfig+0x5a6>
 80094e8:	2310      	movs	r3, #16
 80094ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094ee:	e1e0      	b.n	80098b2 <UART_SetConfig+0x5a6>
 80094f0:	2320      	movs	r3, #32
 80094f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094f6:	e1dc      	b.n	80098b2 <UART_SetConfig+0x5a6>
 80094f8:	2340      	movs	r3, #64	; 0x40
 80094fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094fe:	e1d8      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009500:	2380      	movs	r3, #128	; 0x80
 8009502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009506:	e1d4      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a4f      	ldr	r2, [pc, #316]	; (800964c <UART_SetConfig+0x340>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d130      	bne.n	8009574 <UART_SetConfig+0x268>
 8009512:	4b4c      	ldr	r3, [pc, #304]	; (8009644 <UART_SetConfig+0x338>)
 8009514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009516:	f003 0307 	and.w	r3, r3, #7
 800951a:	2b05      	cmp	r3, #5
 800951c:	d826      	bhi.n	800956c <UART_SetConfig+0x260>
 800951e:	a201      	add	r2, pc, #4	; (adr r2, 8009524 <UART_SetConfig+0x218>)
 8009520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009524:	0800953d 	.word	0x0800953d
 8009528:	08009545 	.word	0x08009545
 800952c:	0800954d 	.word	0x0800954d
 8009530:	08009555 	.word	0x08009555
 8009534:	0800955d 	.word	0x0800955d
 8009538:	08009565 	.word	0x08009565
 800953c:	2300      	movs	r3, #0
 800953e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009542:	e1b6      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009544:	2304      	movs	r3, #4
 8009546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800954a:	e1b2      	b.n	80098b2 <UART_SetConfig+0x5a6>
 800954c:	2308      	movs	r3, #8
 800954e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009552:	e1ae      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009554:	2310      	movs	r3, #16
 8009556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800955a:	e1aa      	b.n	80098b2 <UART_SetConfig+0x5a6>
 800955c:	2320      	movs	r3, #32
 800955e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009562:	e1a6      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009564:	2340      	movs	r3, #64	; 0x40
 8009566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800956a:	e1a2      	b.n	80098b2 <UART_SetConfig+0x5a6>
 800956c:	2380      	movs	r3, #128	; 0x80
 800956e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009572:	e19e      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a35      	ldr	r2, [pc, #212]	; (8009650 <UART_SetConfig+0x344>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d130      	bne.n	80095e0 <UART_SetConfig+0x2d4>
 800957e:	4b31      	ldr	r3, [pc, #196]	; (8009644 <UART_SetConfig+0x338>)
 8009580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009582:	f003 0307 	and.w	r3, r3, #7
 8009586:	2b05      	cmp	r3, #5
 8009588:	d826      	bhi.n	80095d8 <UART_SetConfig+0x2cc>
 800958a:	a201      	add	r2, pc, #4	; (adr r2, 8009590 <UART_SetConfig+0x284>)
 800958c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009590:	080095a9 	.word	0x080095a9
 8009594:	080095b1 	.word	0x080095b1
 8009598:	080095b9 	.word	0x080095b9
 800959c:	080095c1 	.word	0x080095c1
 80095a0:	080095c9 	.word	0x080095c9
 80095a4:	080095d1 	.word	0x080095d1
 80095a8:	2300      	movs	r3, #0
 80095aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095ae:	e180      	b.n	80098b2 <UART_SetConfig+0x5a6>
 80095b0:	2304      	movs	r3, #4
 80095b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095b6:	e17c      	b.n	80098b2 <UART_SetConfig+0x5a6>
 80095b8:	2308      	movs	r3, #8
 80095ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095be:	e178      	b.n	80098b2 <UART_SetConfig+0x5a6>
 80095c0:	2310      	movs	r3, #16
 80095c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095c6:	e174      	b.n	80098b2 <UART_SetConfig+0x5a6>
 80095c8:	2320      	movs	r3, #32
 80095ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095ce:	e170      	b.n	80098b2 <UART_SetConfig+0x5a6>
 80095d0:	2340      	movs	r3, #64	; 0x40
 80095d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095d6:	e16c      	b.n	80098b2 <UART_SetConfig+0x5a6>
 80095d8:	2380      	movs	r3, #128	; 0x80
 80095da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095de:	e168      	b.n	80098b2 <UART_SetConfig+0x5a6>
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a1b      	ldr	r2, [pc, #108]	; (8009654 <UART_SetConfig+0x348>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d142      	bne.n	8009670 <UART_SetConfig+0x364>
 80095ea:	4b16      	ldr	r3, [pc, #88]	; (8009644 <UART_SetConfig+0x338>)
 80095ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095ee:	f003 0307 	and.w	r3, r3, #7
 80095f2:	2b05      	cmp	r3, #5
 80095f4:	d838      	bhi.n	8009668 <UART_SetConfig+0x35c>
 80095f6:	a201      	add	r2, pc, #4	; (adr r2, 80095fc <UART_SetConfig+0x2f0>)
 80095f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095fc:	08009615 	.word	0x08009615
 8009600:	0800961d 	.word	0x0800961d
 8009604:	08009625 	.word	0x08009625
 8009608:	0800962d 	.word	0x0800962d
 800960c:	08009659 	.word	0x08009659
 8009610:	08009661 	.word	0x08009661
 8009614:	2300      	movs	r3, #0
 8009616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800961a:	e14a      	b.n	80098b2 <UART_SetConfig+0x5a6>
 800961c:	2304      	movs	r3, #4
 800961e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009622:	e146      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009624:	2308      	movs	r3, #8
 8009626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800962a:	e142      	b.n	80098b2 <UART_SetConfig+0x5a6>
 800962c:	2310      	movs	r3, #16
 800962e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009632:	e13e      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009634:	cfff69f3 	.word	0xcfff69f3
 8009638:	58000c00 	.word	0x58000c00
 800963c:	11fff4ff 	.word	0x11fff4ff
 8009640:	40011000 	.word	0x40011000
 8009644:	58024400 	.word	0x58024400
 8009648:	40004400 	.word	0x40004400
 800964c:	40004800 	.word	0x40004800
 8009650:	40004c00 	.word	0x40004c00
 8009654:	40005000 	.word	0x40005000
 8009658:	2320      	movs	r3, #32
 800965a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800965e:	e128      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009660:	2340      	movs	r3, #64	; 0x40
 8009662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009666:	e124      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009668:	2380      	movs	r3, #128	; 0x80
 800966a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800966e:	e120      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4acb      	ldr	r2, [pc, #812]	; (80099a4 <UART_SetConfig+0x698>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d176      	bne.n	8009768 <UART_SetConfig+0x45c>
 800967a:	4bcb      	ldr	r3, [pc, #812]	; (80099a8 <UART_SetConfig+0x69c>)
 800967c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800967e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009682:	2b28      	cmp	r3, #40	; 0x28
 8009684:	d86c      	bhi.n	8009760 <UART_SetConfig+0x454>
 8009686:	a201      	add	r2, pc, #4	; (adr r2, 800968c <UART_SetConfig+0x380>)
 8009688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800968c:	08009731 	.word	0x08009731
 8009690:	08009761 	.word	0x08009761
 8009694:	08009761 	.word	0x08009761
 8009698:	08009761 	.word	0x08009761
 800969c:	08009761 	.word	0x08009761
 80096a0:	08009761 	.word	0x08009761
 80096a4:	08009761 	.word	0x08009761
 80096a8:	08009761 	.word	0x08009761
 80096ac:	08009739 	.word	0x08009739
 80096b0:	08009761 	.word	0x08009761
 80096b4:	08009761 	.word	0x08009761
 80096b8:	08009761 	.word	0x08009761
 80096bc:	08009761 	.word	0x08009761
 80096c0:	08009761 	.word	0x08009761
 80096c4:	08009761 	.word	0x08009761
 80096c8:	08009761 	.word	0x08009761
 80096cc:	08009741 	.word	0x08009741
 80096d0:	08009761 	.word	0x08009761
 80096d4:	08009761 	.word	0x08009761
 80096d8:	08009761 	.word	0x08009761
 80096dc:	08009761 	.word	0x08009761
 80096e0:	08009761 	.word	0x08009761
 80096e4:	08009761 	.word	0x08009761
 80096e8:	08009761 	.word	0x08009761
 80096ec:	08009749 	.word	0x08009749
 80096f0:	08009761 	.word	0x08009761
 80096f4:	08009761 	.word	0x08009761
 80096f8:	08009761 	.word	0x08009761
 80096fc:	08009761 	.word	0x08009761
 8009700:	08009761 	.word	0x08009761
 8009704:	08009761 	.word	0x08009761
 8009708:	08009761 	.word	0x08009761
 800970c:	08009751 	.word	0x08009751
 8009710:	08009761 	.word	0x08009761
 8009714:	08009761 	.word	0x08009761
 8009718:	08009761 	.word	0x08009761
 800971c:	08009761 	.word	0x08009761
 8009720:	08009761 	.word	0x08009761
 8009724:	08009761 	.word	0x08009761
 8009728:	08009761 	.word	0x08009761
 800972c:	08009759 	.word	0x08009759
 8009730:	2301      	movs	r3, #1
 8009732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009736:	e0bc      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009738:	2304      	movs	r3, #4
 800973a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800973e:	e0b8      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009740:	2308      	movs	r3, #8
 8009742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009746:	e0b4      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009748:	2310      	movs	r3, #16
 800974a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800974e:	e0b0      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009750:	2320      	movs	r3, #32
 8009752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009756:	e0ac      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009758:	2340      	movs	r3, #64	; 0x40
 800975a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800975e:	e0a8      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009760:	2380      	movs	r3, #128	; 0x80
 8009762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009766:	e0a4      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a8f      	ldr	r2, [pc, #572]	; (80099ac <UART_SetConfig+0x6a0>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d130      	bne.n	80097d4 <UART_SetConfig+0x4c8>
 8009772:	4b8d      	ldr	r3, [pc, #564]	; (80099a8 <UART_SetConfig+0x69c>)
 8009774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009776:	f003 0307 	and.w	r3, r3, #7
 800977a:	2b05      	cmp	r3, #5
 800977c:	d826      	bhi.n	80097cc <UART_SetConfig+0x4c0>
 800977e:	a201      	add	r2, pc, #4	; (adr r2, 8009784 <UART_SetConfig+0x478>)
 8009780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009784:	0800979d 	.word	0x0800979d
 8009788:	080097a5 	.word	0x080097a5
 800978c:	080097ad 	.word	0x080097ad
 8009790:	080097b5 	.word	0x080097b5
 8009794:	080097bd 	.word	0x080097bd
 8009798:	080097c5 	.word	0x080097c5
 800979c:	2300      	movs	r3, #0
 800979e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097a2:	e086      	b.n	80098b2 <UART_SetConfig+0x5a6>
 80097a4:	2304      	movs	r3, #4
 80097a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097aa:	e082      	b.n	80098b2 <UART_SetConfig+0x5a6>
 80097ac:	2308      	movs	r3, #8
 80097ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097b2:	e07e      	b.n	80098b2 <UART_SetConfig+0x5a6>
 80097b4:	2310      	movs	r3, #16
 80097b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097ba:	e07a      	b.n	80098b2 <UART_SetConfig+0x5a6>
 80097bc:	2320      	movs	r3, #32
 80097be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097c2:	e076      	b.n	80098b2 <UART_SetConfig+0x5a6>
 80097c4:	2340      	movs	r3, #64	; 0x40
 80097c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097ca:	e072      	b.n	80098b2 <UART_SetConfig+0x5a6>
 80097cc:	2380      	movs	r3, #128	; 0x80
 80097ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097d2:	e06e      	b.n	80098b2 <UART_SetConfig+0x5a6>
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a75      	ldr	r2, [pc, #468]	; (80099b0 <UART_SetConfig+0x6a4>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d130      	bne.n	8009840 <UART_SetConfig+0x534>
 80097de:	4b72      	ldr	r3, [pc, #456]	; (80099a8 <UART_SetConfig+0x69c>)
 80097e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097e2:	f003 0307 	and.w	r3, r3, #7
 80097e6:	2b05      	cmp	r3, #5
 80097e8:	d826      	bhi.n	8009838 <UART_SetConfig+0x52c>
 80097ea:	a201      	add	r2, pc, #4	; (adr r2, 80097f0 <UART_SetConfig+0x4e4>)
 80097ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f0:	08009809 	.word	0x08009809
 80097f4:	08009811 	.word	0x08009811
 80097f8:	08009819 	.word	0x08009819
 80097fc:	08009821 	.word	0x08009821
 8009800:	08009829 	.word	0x08009829
 8009804:	08009831 	.word	0x08009831
 8009808:	2300      	movs	r3, #0
 800980a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800980e:	e050      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009810:	2304      	movs	r3, #4
 8009812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009816:	e04c      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009818:	2308      	movs	r3, #8
 800981a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800981e:	e048      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009820:	2310      	movs	r3, #16
 8009822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009826:	e044      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009828:	2320      	movs	r3, #32
 800982a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800982e:	e040      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009830:	2340      	movs	r3, #64	; 0x40
 8009832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009836:	e03c      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009838:	2380      	movs	r3, #128	; 0x80
 800983a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800983e:	e038      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a5b      	ldr	r2, [pc, #364]	; (80099b4 <UART_SetConfig+0x6a8>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d130      	bne.n	80098ac <UART_SetConfig+0x5a0>
 800984a:	4b57      	ldr	r3, [pc, #348]	; (80099a8 <UART_SetConfig+0x69c>)
 800984c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800984e:	f003 0307 	and.w	r3, r3, #7
 8009852:	2b05      	cmp	r3, #5
 8009854:	d826      	bhi.n	80098a4 <UART_SetConfig+0x598>
 8009856:	a201      	add	r2, pc, #4	; (adr r2, 800985c <UART_SetConfig+0x550>)
 8009858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800985c:	08009875 	.word	0x08009875
 8009860:	0800987d 	.word	0x0800987d
 8009864:	08009885 	.word	0x08009885
 8009868:	0800988d 	.word	0x0800988d
 800986c:	08009895 	.word	0x08009895
 8009870:	0800989d 	.word	0x0800989d
 8009874:	2302      	movs	r3, #2
 8009876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800987a:	e01a      	b.n	80098b2 <UART_SetConfig+0x5a6>
 800987c:	2304      	movs	r3, #4
 800987e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009882:	e016      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009884:	2308      	movs	r3, #8
 8009886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800988a:	e012      	b.n	80098b2 <UART_SetConfig+0x5a6>
 800988c:	2310      	movs	r3, #16
 800988e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009892:	e00e      	b.n	80098b2 <UART_SetConfig+0x5a6>
 8009894:	2320      	movs	r3, #32
 8009896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800989a:	e00a      	b.n	80098b2 <UART_SetConfig+0x5a6>
 800989c:	2340      	movs	r3, #64	; 0x40
 800989e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098a2:	e006      	b.n	80098b2 <UART_SetConfig+0x5a6>
 80098a4:	2380      	movs	r3, #128	; 0x80
 80098a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098aa:	e002      	b.n	80098b2 <UART_SetConfig+0x5a6>
 80098ac:	2380      	movs	r3, #128	; 0x80
 80098ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a3f      	ldr	r2, [pc, #252]	; (80099b4 <UART_SetConfig+0x6a8>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	f040 80f8 	bne.w	8009aae <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80098be:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80098c2:	2b20      	cmp	r3, #32
 80098c4:	dc46      	bgt.n	8009954 <UART_SetConfig+0x648>
 80098c6:	2b02      	cmp	r3, #2
 80098c8:	f2c0 8082 	blt.w	80099d0 <UART_SetConfig+0x6c4>
 80098cc:	3b02      	subs	r3, #2
 80098ce:	2b1e      	cmp	r3, #30
 80098d0:	d87e      	bhi.n	80099d0 <UART_SetConfig+0x6c4>
 80098d2:	a201      	add	r2, pc, #4	; (adr r2, 80098d8 <UART_SetConfig+0x5cc>)
 80098d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d8:	0800995b 	.word	0x0800995b
 80098dc:	080099d1 	.word	0x080099d1
 80098e0:	08009963 	.word	0x08009963
 80098e4:	080099d1 	.word	0x080099d1
 80098e8:	080099d1 	.word	0x080099d1
 80098ec:	080099d1 	.word	0x080099d1
 80098f0:	08009973 	.word	0x08009973
 80098f4:	080099d1 	.word	0x080099d1
 80098f8:	080099d1 	.word	0x080099d1
 80098fc:	080099d1 	.word	0x080099d1
 8009900:	080099d1 	.word	0x080099d1
 8009904:	080099d1 	.word	0x080099d1
 8009908:	080099d1 	.word	0x080099d1
 800990c:	080099d1 	.word	0x080099d1
 8009910:	08009983 	.word	0x08009983
 8009914:	080099d1 	.word	0x080099d1
 8009918:	080099d1 	.word	0x080099d1
 800991c:	080099d1 	.word	0x080099d1
 8009920:	080099d1 	.word	0x080099d1
 8009924:	080099d1 	.word	0x080099d1
 8009928:	080099d1 	.word	0x080099d1
 800992c:	080099d1 	.word	0x080099d1
 8009930:	080099d1 	.word	0x080099d1
 8009934:	080099d1 	.word	0x080099d1
 8009938:	080099d1 	.word	0x080099d1
 800993c:	080099d1 	.word	0x080099d1
 8009940:	080099d1 	.word	0x080099d1
 8009944:	080099d1 	.word	0x080099d1
 8009948:	080099d1 	.word	0x080099d1
 800994c:	080099d1 	.word	0x080099d1
 8009950:	080099c3 	.word	0x080099c3
 8009954:	2b40      	cmp	r3, #64	; 0x40
 8009956:	d037      	beq.n	80099c8 <UART_SetConfig+0x6bc>
 8009958:	e03a      	b.n	80099d0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800995a:	f7fe fe85 	bl	8008668 <HAL_RCCEx_GetD3PCLK1Freq>
 800995e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009960:	e03c      	b.n	80099dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009966:	4618      	mov	r0, r3
 8009968:	f7fe fe94 	bl	8008694 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800996c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800996e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009970:	e034      	b.n	80099dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009972:	f107 0318 	add.w	r3, r7, #24
 8009976:	4618      	mov	r0, r3
 8009978:	f7fe ffe0 	bl	800893c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800997c:	69fb      	ldr	r3, [r7, #28]
 800997e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009980:	e02c      	b.n	80099dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009982:	4b09      	ldr	r3, [pc, #36]	; (80099a8 <UART_SetConfig+0x69c>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f003 0320 	and.w	r3, r3, #32
 800998a:	2b00      	cmp	r3, #0
 800998c:	d016      	beq.n	80099bc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800998e:	4b06      	ldr	r3, [pc, #24]	; (80099a8 <UART_SetConfig+0x69c>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	08db      	lsrs	r3, r3, #3
 8009994:	f003 0303 	and.w	r3, r3, #3
 8009998:	4a07      	ldr	r2, [pc, #28]	; (80099b8 <UART_SetConfig+0x6ac>)
 800999a:	fa22 f303 	lsr.w	r3, r2, r3
 800999e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80099a0:	e01c      	b.n	80099dc <UART_SetConfig+0x6d0>
 80099a2:	bf00      	nop
 80099a4:	40011400 	.word	0x40011400
 80099a8:	58024400 	.word	0x58024400
 80099ac:	40007800 	.word	0x40007800
 80099b0:	40007c00 	.word	0x40007c00
 80099b4:	58000c00 	.word	0x58000c00
 80099b8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80099bc:	4b9d      	ldr	r3, [pc, #628]	; (8009c34 <UART_SetConfig+0x928>)
 80099be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099c0:	e00c      	b.n	80099dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80099c2:	4b9d      	ldr	r3, [pc, #628]	; (8009c38 <UART_SetConfig+0x92c>)
 80099c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099c6:	e009      	b.n	80099dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099ce:	e005      	b.n	80099dc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80099d0:	2300      	movs	r3, #0
 80099d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80099d4:	2301      	movs	r3, #1
 80099d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80099da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80099dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099de:	2b00      	cmp	r3, #0
 80099e0:	f000 81de 	beq.w	8009da0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e8:	4a94      	ldr	r2, [pc, #592]	; (8009c3c <UART_SetConfig+0x930>)
 80099ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099ee:	461a      	mov	r2, r3
 80099f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80099f6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	685a      	ldr	r2, [r3, #4]
 80099fc:	4613      	mov	r3, r2
 80099fe:	005b      	lsls	r3, r3, #1
 8009a00:	4413      	add	r3, r2
 8009a02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d305      	bcc.n	8009a14 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d903      	bls.n	8009a1c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009a14:	2301      	movs	r3, #1
 8009a16:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009a1a:	e1c1      	b.n	8009da0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a1e:	2200      	movs	r2, #0
 8009a20:	60bb      	str	r3, [r7, #8]
 8009a22:	60fa      	str	r2, [r7, #12]
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a28:	4a84      	ldr	r2, [pc, #528]	; (8009c3c <UART_SetConfig+0x930>)
 8009a2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	2200      	movs	r2, #0
 8009a32:	603b      	str	r3, [r7, #0]
 8009a34:	607a      	str	r2, [r7, #4]
 8009a36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009a3e:	f7f6 fca7 	bl	8000390 <__aeabi_uldivmod>
 8009a42:	4602      	mov	r2, r0
 8009a44:	460b      	mov	r3, r1
 8009a46:	4610      	mov	r0, r2
 8009a48:	4619      	mov	r1, r3
 8009a4a:	f04f 0200 	mov.w	r2, #0
 8009a4e:	f04f 0300 	mov.w	r3, #0
 8009a52:	020b      	lsls	r3, r1, #8
 8009a54:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009a58:	0202      	lsls	r2, r0, #8
 8009a5a:	6979      	ldr	r1, [r7, #20]
 8009a5c:	6849      	ldr	r1, [r1, #4]
 8009a5e:	0849      	lsrs	r1, r1, #1
 8009a60:	2000      	movs	r0, #0
 8009a62:	460c      	mov	r4, r1
 8009a64:	4605      	mov	r5, r0
 8009a66:	eb12 0804 	adds.w	r8, r2, r4
 8009a6a:	eb43 0905 	adc.w	r9, r3, r5
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	2200      	movs	r2, #0
 8009a74:	469a      	mov	sl, r3
 8009a76:	4693      	mov	fp, r2
 8009a78:	4652      	mov	r2, sl
 8009a7a:	465b      	mov	r3, fp
 8009a7c:	4640      	mov	r0, r8
 8009a7e:	4649      	mov	r1, r9
 8009a80:	f7f6 fc86 	bl	8000390 <__aeabi_uldivmod>
 8009a84:	4602      	mov	r2, r0
 8009a86:	460b      	mov	r3, r1
 8009a88:	4613      	mov	r3, r2
 8009a8a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a92:	d308      	bcc.n	8009aa6 <UART_SetConfig+0x79a>
 8009a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a9a:	d204      	bcs.n	8009aa6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009aa2:	60da      	str	r2, [r3, #12]
 8009aa4:	e17c      	b.n	8009da0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009aac:	e178      	b.n	8009da0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	69db      	ldr	r3, [r3, #28]
 8009ab2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ab6:	f040 80c5 	bne.w	8009c44 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009aba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009abe:	2b20      	cmp	r3, #32
 8009ac0:	dc48      	bgt.n	8009b54 <UART_SetConfig+0x848>
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	db7b      	blt.n	8009bbe <UART_SetConfig+0x8b2>
 8009ac6:	2b20      	cmp	r3, #32
 8009ac8:	d879      	bhi.n	8009bbe <UART_SetConfig+0x8b2>
 8009aca:	a201      	add	r2, pc, #4	; (adr r2, 8009ad0 <UART_SetConfig+0x7c4>)
 8009acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad0:	08009b5b 	.word	0x08009b5b
 8009ad4:	08009b63 	.word	0x08009b63
 8009ad8:	08009bbf 	.word	0x08009bbf
 8009adc:	08009bbf 	.word	0x08009bbf
 8009ae0:	08009b6b 	.word	0x08009b6b
 8009ae4:	08009bbf 	.word	0x08009bbf
 8009ae8:	08009bbf 	.word	0x08009bbf
 8009aec:	08009bbf 	.word	0x08009bbf
 8009af0:	08009b7b 	.word	0x08009b7b
 8009af4:	08009bbf 	.word	0x08009bbf
 8009af8:	08009bbf 	.word	0x08009bbf
 8009afc:	08009bbf 	.word	0x08009bbf
 8009b00:	08009bbf 	.word	0x08009bbf
 8009b04:	08009bbf 	.word	0x08009bbf
 8009b08:	08009bbf 	.word	0x08009bbf
 8009b0c:	08009bbf 	.word	0x08009bbf
 8009b10:	08009b8b 	.word	0x08009b8b
 8009b14:	08009bbf 	.word	0x08009bbf
 8009b18:	08009bbf 	.word	0x08009bbf
 8009b1c:	08009bbf 	.word	0x08009bbf
 8009b20:	08009bbf 	.word	0x08009bbf
 8009b24:	08009bbf 	.word	0x08009bbf
 8009b28:	08009bbf 	.word	0x08009bbf
 8009b2c:	08009bbf 	.word	0x08009bbf
 8009b30:	08009bbf 	.word	0x08009bbf
 8009b34:	08009bbf 	.word	0x08009bbf
 8009b38:	08009bbf 	.word	0x08009bbf
 8009b3c:	08009bbf 	.word	0x08009bbf
 8009b40:	08009bbf 	.word	0x08009bbf
 8009b44:	08009bbf 	.word	0x08009bbf
 8009b48:	08009bbf 	.word	0x08009bbf
 8009b4c:	08009bbf 	.word	0x08009bbf
 8009b50:	08009bb1 	.word	0x08009bb1
 8009b54:	2b40      	cmp	r3, #64	; 0x40
 8009b56:	d02e      	beq.n	8009bb6 <UART_SetConfig+0x8aa>
 8009b58:	e031      	b.n	8009bbe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b5a:	f7fc fdcf 	bl	80066fc <HAL_RCC_GetPCLK1Freq>
 8009b5e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009b60:	e033      	b.n	8009bca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b62:	f7fc fde1 	bl	8006728 <HAL_RCC_GetPCLK2Freq>
 8009b66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009b68:	e02f      	b.n	8009bca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f7fe fd90 	bl	8008694 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b78:	e027      	b.n	8009bca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b7a:	f107 0318 	add.w	r3, r7, #24
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f7fe fedc 	bl	800893c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009b84:	69fb      	ldr	r3, [r7, #28]
 8009b86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b88:	e01f      	b.n	8009bca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b8a:	4b2d      	ldr	r3, [pc, #180]	; (8009c40 <UART_SetConfig+0x934>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f003 0320 	and.w	r3, r3, #32
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d009      	beq.n	8009baa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009b96:	4b2a      	ldr	r3, [pc, #168]	; (8009c40 <UART_SetConfig+0x934>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	08db      	lsrs	r3, r3, #3
 8009b9c:	f003 0303 	and.w	r3, r3, #3
 8009ba0:	4a24      	ldr	r2, [pc, #144]	; (8009c34 <UART_SetConfig+0x928>)
 8009ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8009ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009ba8:	e00f      	b.n	8009bca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009baa:	4b22      	ldr	r3, [pc, #136]	; (8009c34 <UART_SetConfig+0x928>)
 8009bac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bae:	e00c      	b.n	8009bca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009bb0:	4b21      	ldr	r3, [pc, #132]	; (8009c38 <UART_SetConfig+0x92c>)
 8009bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bb4:	e009      	b.n	8009bca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bbc:	e005      	b.n	8009bca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009bc8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	f000 80e7 	beq.w	8009da0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd6:	4a19      	ldr	r2, [pc, #100]	; (8009c3c <UART_SetConfig+0x930>)
 8009bd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009bdc:	461a      	mov	r2, r3
 8009bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009be0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009be4:	005a      	lsls	r2, r3, #1
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	085b      	lsrs	r3, r3, #1
 8009bec:	441a      	add	r2, r3
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bf6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bfa:	2b0f      	cmp	r3, #15
 8009bfc:	d916      	bls.n	8009c2c <UART_SetConfig+0x920>
 8009bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c04:	d212      	bcs.n	8009c2c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c08:	b29b      	uxth	r3, r3
 8009c0a:	f023 030f 	bic.w	r3, r3, #15
 8009c0e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c12:	085b      	lsrs	r3, r3, #1
 8009c14:	b29b      	uxth	r3, r3
 8009c16:	f003 0307 	and.w	r3, r3, #7
 8009c1a:	b29a      	uxth	r2, r3
 8009c1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009c28:	60da      	str	r2, [r3, #12]
 8009c2a:	e0b9      	b.n	8009da0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009c32:	e0b5      	b.n	8009da0 <UART_SetConfig+0xa94>
 8009c34:	03d09000 	.word	0x03d09000
 8009c38:	003d0900 	.word	0x003d0900
 8009c3c:	0800d028 	.word	0x0800d028
 8009c40:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c44:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009c48:	2b20      	cmp	r3, #32
 8009c4a:	dc49      	bgt.n	8009ce0 <UART_SetConfig+0x9d4>
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	db7c      	blt.n	8009d4a <UART_SetConfig+0xa3e>
 8009c50:	2b20      	cmp	r3, #32
 8009c52:	d87a      	bhi.n	8009d4a <UART_SetConfig+0xa3e>
 8009c54:	a201      	add	r2, pc, #4	; (adr r2, 8009c5c <UART_SetConfig+0x950>)
 8009c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c5a:	bf00      	nop
 8009c5c:	08009ce7 	.word	0x08009ce7
 8009c60:	08009cef 	.word	0x08009cef
 8009c64:	08009d4b 	.word	0x08009d4b
 8009c68:	08009d4b 	.word	0x08009d4b
 8009c6c:	08009cf7 	.word	0x08009cf7
 8009c70:	08009d4b 	.word	0x08009d4b
 8009c74:	08009d4b 	.word	0x08009d4b
 8009c78:	08009d4b 	.word	0x08009d4b
 8009c7c:	08009d07 	.word	0x08009d07
 8009c80:	08009d4b 	.word	0x08009d4b
 8009c84:	08009d4b 	.word	0x08009d4b
 8009c88:	08009d4b 	.word	0x08009d4b
 8009c8c:	08009d4b 	.word	0x08009d4b
 8009c90:	08009d4b 	.word	0x08009d4b
 8009c94:	08009d4b 	.word	0x08009d4b
 8009c98:	08009d4b 	.word	0x08009d4b
 8009c9c:	08009d17 	.word	0x08009d17
 8009ca0:	08009d4b 	.word	0x08009d4b
 8009ca4:	08009d4b 	.word	0x08009d4b
 8009ca8:	08009d4b 	.word	0x08009d4b
 8009cac:	08009d4b 	.word	0x08009d4b
 8009cb0:	08009d4b 	.word	0x08009d4b
 8009cb4:	08009d4b 	.word	0x08009d4b
 8009cb8:	08009d4b 	.word	0x08009d4b
 8009cbc:	08009d4b 	.word	0x08009d4b
 8009cc0:	08009d4b 	.word	0x08009d4b
 8009cc4:	08009d4b 	.word	0x08009d4b
 8009cc8:	08009d4b 	.word	0x08009d4b
 8009ccc:	08009d4b 	.word	0x08009d4b
 8009cd0:	08009d4b 	.word	0x08009d4b
 8009cd4:	08009d4b 	.word	0x08009d4b
 8009cd8:	08009d4b 	.word	0x08009d4b
 8009cdc:	08009d3d 	.word	0x08009d3d
 8009ce0:	2b40      	cmp	r3, #64	; 0x40
 8009ce2:	d02e      	beq.n	8009d42 <UART_SetConfig+0xa36>
 8009ce4:	e031      	b.n	8009d4a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ce6:	f7fc fd09 	bl	80066fc <HAL_RCC_GetPCLK1Freq>
 8009cea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009cec:	e033      	b.n	8009d56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009cee:	f7fc fd1b 	bl	8006728 <HAL_RCC_GetPCLK2Freq>
 8009cf2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009cf4:	e02f      	b.n	8009d56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7fe fcca 	bl	8008694 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d04:	e027      	b.n	8009d56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d06:	f107 0318 	add.w	r3, r7, #24
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7fe fe16 	bl	800893c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009d10:	69fb      	ldr	r3, [r7, #28]
 8009d12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d14:	e01f      	b.n	8009d56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d16:	4b2d      	ldr	r3, [pc, #180]	; (8009dcc <UART_SetConfig+0xac0>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f003 0320 	and.w	r3, r3, #32
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d009      	beq.n	8009d36 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009d22:	4b2a      	ldr	r3, [pc, #168]	; (8009dcc <UART_SetConfig+0xac0>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	08db      	lsrs	r3, r3, #3
 8009d28:	f003 0303 	and.w	r3, r3, #3
 8009d2c:	4a28      	ldr	r2, [pc, #160]	; (8009dd0 <UART_SetConfig+0xac4>)
 8009d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8009d32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009d34:	e00f      	b.n	8009d56 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009d36:	4b26      	ldr	r3, [pc, #152]	; (8009dd0 <UART_SetConfig+0xac4>)
 8009d38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d3a:	e00c      	b.n	8009d56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009d3c:	4b25      	ldr	r3, [pc, #148]	; (8009dd4 <UART_SetConfig+0xac8>)
 8009d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d40:	e009      	b.n	8009d56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d48:	e005      	b.n	8009d56 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009d4e:	2301      	movs	r3, #1
 8009d50:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009d54:	bf00      	nop
    }

    if (pclk != 0U)
 8009d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d021      	beq.n	8009da0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d60:	4a1d      	ldr	r2, [pc, #116]	; (8009dd8 <UART_SetConfig+0xacc>)
 8009d62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d66:	461a      	mov	r2, r3
 8009d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	085b      	lsrs	r3, r3, #1
 8009d74:	441a      	add	r2, r3
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d7e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d82:	2b0f      	cmp	r3, #15
 8009d84:	d909      	bls.n	8009d9a <UART_SetConfig+0xa8e>
 8009d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d8c:	d205      	bcs.n	8009d9a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d90:	b29a      	uxth	r2, r3
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	60da      	str	r2, [r3, #12]
 8009d98:	e002      	b.n	8009da0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	2201      	movs	r2, #1
 8009da4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	2201      	movs	r2, #1
 8009dac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	2200      	movs	r2, #0
 8009db4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	2200      	movs	r2, #0
 8009dba:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009dbc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3748      	adds	r7, #72	; 0x48
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009dca:	bf00      	nop
 8009dcc:	58024400 	.word	0x58024400
 8009dd0:	03d09000 	.word	0x03d09000
 8009dd4:	003d0900 	.word	0x003d0900
 8009dd8:	0800d028 	.word	0x0800d028

08009ddc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009de8:	f003 0301 	and.w	r3, r3, #1
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d00a      	beq.n	8009e06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	430a      	orrs	r2, r1
 8009e04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e0a:	f003 0302 	and.w	r3, r3, #2
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d00a      	beq.n	8009e28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	430a      	orrs	r2, r1
 8009e26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e2c:	f003 0304 	and.w	r3, r3, #4
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d00a      	beq.n	8009e4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	430a      	orrs	r2, r1
 8009e48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e4e:	f003 0308 	and.w	r3, r3, #8
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d00a      	beq.n	8009e6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	430a      	orrs	r2, r1
 8009e6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e70:	f003 0310 	and.w	r3, r3, #16
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d00a      	beq.n	8009e8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	689b      	ldr	r3, [r3, #8]
 8009e7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	430a      	orrs	r2, r1
 8009e8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e92:	f003 0320 	and.w	r3, r3, #32
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d00a      	beq.n	8009eb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	430a      	orrs	r2, r1
 8009eae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d01a      	beq.n	8009ef2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	430a      	orrs	r2, r1
 8009ed0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009eda:	d10a      	bne.n	8009ef2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	430a      	orrs	r2, r1
 8009ef0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d00a      	beq.n	8009f14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	430a      	orrs	r2, r1
 8009f12:	605a      	str	r2, [r3, #4]
  }
}
 8009f14:	bf00      	nop
 8009f16:	370c      	adds	r7, #12
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b098      	sub	sp, #96	; 0x60
 8009f24:	af02      	add	r7, sp, #8
 8009f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009f30:	f7f7 fa68 	bl	8001404 <HAL_GetTick>
 8009f34:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f003 0308 	and.w	r3, r3, #8
 8009f40:	2b08      	cmp	r3, #8
 8009f42:	d12f      	bne.n	8009fa4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f48:	9300      	str	r3, [sp, #0]
 8009f4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f000 f88e 	bl	800a074 <UART_WaitOnFlagUntilTimeout>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d022      	beq.n	8009fa4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f66:	e853 3f00 	ldrex	r3, [r3]
 8009f6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f72:	653b      	str	r3, [r7, #80]	; 0x50
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	461a      	mov	r2, r3
 8009f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f7c:	647b      	str	r3, [r7, #68]	; 0x44
 8009f7e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009f82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f84:	e841 2300 	strex	r3, r2, [r1]
 8009f88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d1e6      	bne.n	8009f5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2220      	movs	r2, #32
 8009f94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009fa0:	2303      	movs	r3, #3
 8009fa2:	e063      	b.n	800a06c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f003 0304 	and.w	r3, r3, #4
 8009fae:	2b04      	cmp	r3, #4
 8009fb0:	d149      	bne.n	800a046 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009fb2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009fb6:	9300      	str	r3, [sp, #0]
 8009fb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f000 f857 	bl	800a074 <UART_WaitOnFlagUntilTimeout>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d03c      	beq.n	800a046 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd4:	e853 3f00 	ldrex	r3, [r3]
 8009fd8:	623b      	str	r3, [r7, #32]
   return(result);
 8009fda:	6a3b      	ldr	r3, [r7, #32]
 8009fdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fea:	633b      	str	r3, [r7, #48]	; 0x30
 8009fec:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ff2:	e841 2300 	strex	r3, r2, [r1]
 8009ff6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d1e6      	bne.n	8009fcc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	3308      	adds	r3, #8
 800a004:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	e853 3f00 	ldrex	r3, [r3]
 800a00c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f023 0301 	bic.w	r3, r3, #1
 800a014:	64bb      	str	r3, [r7, #72]	; 0x48
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	3308      	adds	r3, #8
 800a01c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a01e:	61fa      	str	r2, [r7, #28]
 800a020:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a022:	69b9      	ldr	r1, [r7, #24]
 800a024:	69fa      	ldr	r2, [r7, #28]
 800a026:	e841 2300 	strex	r3, r2, [r1]
 800a02a:	617b      	str	r3, [r7, #20]
   return(result);
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d1e5      	bne.n	8009ffe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2220      	movs	r2, #32
 800a036:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2200      	movs	r2, #0
 800a03e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a042:	2303      	movs	r3, #3
 800a044:	e012      	b.n	800a06c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2220      	movs	r2, #32
 800a04a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2220      	movs	r2, #32
 800a052:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2200      	movs	r2, #0
 800a05a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2200      	movs	r2, #0
 800a060:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2200      	movs	r2, #0
 800a066:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a06a:	2300      	movs	r3, #0
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3758      	adds	r7, #88	; 0x58
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	60b9      	str	r1, [r7, #8]
 800a07e:	603b      	str	r3, [r7, #0]
 800a080:	4613      	mov	r3, r2
 800a082:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a084:	e049      	b.n	800a11a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a086:	69bb      	ldr	r3, [r7, #24]
 800a088:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a08c:	d045      	beq.n	800a11a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a08e:	f7f7 f9b9 	bl	8001404 <HAL_GetTick>
 800a092:	4602      	mov	r2, r0
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	1ad3      	subs	r3, r2, r3
 800a098:	69ba      	ldr	r2, [r7, #24]
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d302      	bcc.n	800a0a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a09e:	69bb      	ldr	r3, [r7, #24]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d101      	bne.n	800a0a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a0a4:	2303      	movs	r3, #3
 800a0a6:	e048      	b.n	800a13a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f003 0304 	and.w	r3, r3, #4
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d031      	beq.n	800a11a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	69db      	ldr	r3, [r3, #28]
 800a0bc:	f003 0308 	and.w	r3, r3, #8
 800a0c0:	2b08      	cmp	r3, #8
 800a0c2:	d110      	bne.n	800a0e6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	2208      	movs	r2, #8
 800a0ca:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a0cc:	68f8      	ldr	r0, [r7, #12]
 800a0ce:	f000 f839 	bl	800a144 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2208      	movs	r2, #8
 800a0d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e029      	b.n	800a13a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	69db      	ldr	r3, [r3, #28]
 800a0ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a0f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0f4:	d111      	bne.n	800a11a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a0fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a100:	68f8      	ldr	r0, [r7, #12]
 800a102:	f000 f81f 	bl	800a144 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	2220      	movs	r2, #32
 800a10a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2200      	movs	r2, #0
 800a112:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a116:	2303      	movs	r3, #3
 800a118:	e00f      	b.n	800a13a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	69da      	ldr	r2, [r3, #28]
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	4013      	ands	r3, r2
 800a124:	68ba      	ldr	r2, [r7, #8]
 800a126:	429a      	cmp	r2, r3
 800a128:	bf0c      	ite	eq
 800a12a:	2301      	moveq	r3, #1
 800a12c:	2300      	movne	r3, #0
 800a12e:	b2db      	uxtb	r3, r3
 800a130:	461a      	mov	r2, r3
 800a132:	79fb      	ldrb	r3, [r7, #7]
 800a134:	429a      	cmp	r2, r3
 800a136:	d0a6      	beq.n	800a086 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a138:	2300      	movs	r3, #0
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3710      	adds	r7, #16
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
	...

0800a144 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a144:	b480      	push	{r7}
 800a146:	b095      	sub	sp, #84	; 0x54
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a154:	e853 3f00 	ldrex	r3, [r3]
 800a158:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a160:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	461a      	mov	r2, r3
 800a168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a16a:	643b      	str	r3, [r7, #64]	; 0x40
 800a16c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a16e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a170:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a172:	e841 2300 	strex	r3, r2, [r1]
 800a176:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d1e6      	bne.n	800a14c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	3308      	adds	r3, #8
 800a184:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a186:	6a3b      	ldr	r3, [r7, #32]
 800a188:	e853 3f00 	ldrex	r3, [r3]
 800a18c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a18e:	69fa      	ldr	r2, [r7, #28]
 800a190:	4b1e      	ldr	r3, [pc, #120]	; (800a20c <UART_EndRxTransfer+0xc8>)
 800a192:	4013      	ands	r3, r2
 800a194:	64bb      	str	r3, [r7, #72]	; 0x48
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	3308      	adds	r3, #8
 800a19c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a19e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a1a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1a6:	e841 2300 	strex	r3, r2, [r1]
 800a1aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d1e5      	bne.n	800a17e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1b6:	2b01      	cmp	r3, #1
 800a1b8:	d118      	bne.n	800a1ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	e853 3f00 	ldrex	r3, [r3]
 800a1c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	f023 0310 	bic.w	r3, r3, #16
 800a1ce:	647b      	str	r3, [r7, #68]	; 0x44
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1d8:	61bb      	str	r3, [r7, #24]
 800a1da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1dc:	6979      	ldr	r1, [r7, #20]
 800a1de:	69ba      	ldr	r2, [r7, #24]
 800a1e0:	e841 2300 	strex	r3, r2, [r1]
 800a1e4:	613b      	str	r3, [r7, #16]
   return(result);
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d1e6      	bne.n	800a1ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2220      	movs	r2, #32
 800a1f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a200:	bf00      	nop
 800a202:	3754      	adds	r7, #84	; 0x54
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr
 800a20c:	effffffe 	.word	0xeffffffe

0800a210 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a210:	b480      	push	{r7}
 800a212:	b085      	sub	sp, #20
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d101      	bne.n	800a226 <HAL_UARTEx_DisableFifoMode+0x16>
 800a222:	2302      	movs	r3, #2
 800a224:	e027      	b.n	800a276 <HAL_UARTEx_DisableFifoMode+0x66>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2201      	movs	r2, #1
 800a22a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2224      	movs	r2, #36	; 0x24
 800a232:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f022 0201 	bic.w	r2, r2, #1
 800a24c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a254:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2200      	movs	r2, #0
 800a25a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	68fa      	ldr	r2, [r7, #12]
 800a262:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2220      	movs	r2, #32
 800a268:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2200      	movs	r2, #0
 800a270:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a274:	2300      	movs	r3, #0
}
 800a276:	4618      	mov	r0, r3
 800a278:	3714      	adds	r7, #20
 800a27a:	46bd      	mov	sp, r7
 800a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a280:	4770      	bx	lr

0800a282 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a282:	b580      	push	{r7, lr}
 800a284:	b084      	sub	sp, #16
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
 800a28a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a292:	2b01      	cmp	r3, #1
 800a294:	d101      	bne.n	800a29a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a296:	2302      	movs	r3, #2
 800a298:	e02d      	b.n	800a2f6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2201      	movs	r2, #1
 800a29e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2224      	movs	r2, #36	; 0x24
 800a2a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	681a      	ldr	r2, [r3, #0]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f022 0201 	bic.w	r2, r2, #1
 800a2c0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	683a      	ldr	r2, [r7, #0]
 800a2d2:	430a      	orrs	r2, r1
 800a2d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f000 f850 	bl	800a37c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	68fa      	ldr	r2, [r7, #12]
 800a2e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2220      	movs	r2, #32
 800a2e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a2f4:	2300      	movs	r3, #0
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3710      	adds	r7, #16
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}

0800a2fe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a2fe:	b580      	push	{r7, lr}
 800a300:	b084      	sub	sp, #16
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
 800a306:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a30e:	2b01      	cmp	r3, #1
 800a310:	d101      	bne.n	800a316 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a312:	2302      	movs	r3, #2
 800a314:	e02d      	b.n	800a372 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2201      	movs	r2, #1
 800a31a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2224      	movs	r2, #36	; 0x24
 800a322:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	681a      	ldr	r2, [r3, #0]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f022 0201 	bic.w	r2, r2, #1
 800a33c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	683a      	ldr	r2, [r7, #0]
 800a34e:	430a      	orrs	r2, r1
 800a350:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f000 f812 	bl	800a37c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	68fa      	ldr	r2, [r7, #12]
 800a35e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2220      	movs	r2, #32
 800a364:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2200      	movs	r2, #0
 800a36c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a370:	2300      	movs	r3, #0
}
 800a372:	4618      	mov	r0, r3
 800a374:	3710      	adds	r7, #16
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}
	...

0800a37c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b085      	sub	sp, #20
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d108      	bne.n	800a39e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2201      	movs	r2, #1
 800a390:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2201      	movs	r2, #1
 800a398:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a39c:	e031      	b.n	800a402 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a39e:	2310      	movs	r3, #16
 800a3a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a3a2:	2310      	movs	r3, #16
 800a3a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	0e5b      	lsrs	r3, r3, #25
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	f003 0307 	and.w	r3, r3, #7
 800a3b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	689b      	ldr	r3, [r3, #8]
 800a3bc:	0f5b      	lsrs	r3, r3, #29
 800a3be:	b2db      	uxtb	r3, r3
 800a3c0:	f003 0307 	and.w	r3, r3, #7
 800a3c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a3c6:	7bbb      	ldrb	r3, [r7, #14]
 800a3c8:	7b3a      	ldrb	r2, [r7, #12]
 800a3ca:	4911      	ldr	r1, [pc, #68]	; (800a410 <UARTEx_SetNbDataToProcess+0x94>)
 800a3cc:	5c8a      	ldrb	r2, [r1, r2]
 800a3ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a3d2:	7b3a      	ldrb	r2, [r7, #12]
 800a3d4:	490f      	ldr	r1, [pc, #60]	; (800a414 <UARTEx_SetNbDataToProcess+0x98>)
 800a3d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a3d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a3dc:	b29a      	uxth	r2, r3
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a3e4:	7bfb      	ldrb	r3, [r7, #15]
 800a3e6:	7b7a      	ldrb	r2, [r7, #13]
 800a3e8:	4909      	ldr	r1, [pc, #36]	; (800a410 <UARTEx_SetNbDataToProcess+0x94>)
 800a3ea:	5c8a      	ldrb	r2, [r1, r2]
 800a3ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a3f0:	7b7a      	ldrb	r2, [r7, #13]
 800a3f2:	4908      	ldr	r1, [pc, #32]	; (800a414 <UARTEx_SetNbDataToProcess+0x98>)
 800a3f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a3f6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a3fa:	b29a      	uxth	r2, r3
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a402:	bf00      	nop
 800a404:	3714      	adds	r7, #20
 800a406:	46bd      	mov	sp, r7
 800a408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40c:	4770      	bx	lr
 800a40e:	bf00      	nop
 800a410:	0800d040 	.word	0x0800d040
 800a414:	0800d048 	.word	0x0800d048

0800a418 <__cvt>:
 800a418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a41a:	ed2d 8b02 	vpush	{d8}
 800a41e:	eeb0 8b40 	vmov.f64	d8, d0
 800a422:	b085      	sub	sp, #20
 800a424:	4617      	mov	r7, r2
 800a426:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a428:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a42a:	ee18 2a90 	vmov	r2, s17
 800a42e:	f025 0520 	bic.w	r5, r5, #32
 800a432:	2a00      	cmp	r2, #0
 800a434:	bfb6      	itet	lt
 800a436:	222d      	movlt	r2, #45	; 0x2d
 800a438:	2200      	movge	r2, #0
 800a43a:	eeb1 8b40 	vneglt.f64	d8, d0
 800a43e:	2d46      	cmp	r5, #70	; 0x46
 800a440:	460c      	mov	r4, r1
 800a442:	701a      	strb	r2, [r3, #0]
 800a444:	d004      	beq.n	800a450 <__cvt+0x38>
 800a446:	2d45      	cmp	r5, #69	; 0x45
 800a448:	d100      	bne.n	800a44c <__cvt+0x34>
 800a44a:	3401      	adds	r4, #1
 800a44c:	2102      	movs	r1, #2
 800a44e:	e000      	b.n	800a452 <__cvt+0x3a>
 800a450:	2103      	movs	r1, #3
 800a452:	ab03      	add	r3, sp, #12
 800a454:	9301      	str	r3, [sp, #4]
 800a456:	ab02      	add	r3, sp, #8
 800a458:	9300      	str	r3, [sp, #0]
 800a45a:	4622      	mov	r2, r4
 800a45c:	4633      	mov	r3, r6
 800a45e:	eeb0 0b48 	vmov.f64	d0, d8
 800a462:	f000 fe41 	bl	800b0e8 <_dtoa_r>
 800a466:	2d47      	cmp	r5, #71	; 0x47
 800a468:	d101      	bne.n	800a46e <__cvt+0x56>
 800a46a:	07fb      	lsls	r3, r7, #31
 800a46c:	d51a      	bpl.n	800a4a4 <__cvt+0x8c>
 800a46e:	2d46      	cmp	r5, #70	; 0x46
 800a470:	eb00 0204 	add.w	r2, r0, r4
 800a474:	d10c      	bne.n	800a490 <__cvt+0x78>
 800a476:	7803      	ldrb	r3, [r0, #0]
 800a478:	2b30      	cmp	r3, #48	; 0x30
 800a47a:	d107      	bne.n	800a48c <__cvt+0x74>
 800a47c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a484:	bf1c      	itt	ne
 800a486:	f1c4 0401 	rsbne	r4, r4, #1
 800a48a:	6034      	strne	r4, [r6, #0]
 800a48c:	6833      	ldr	r3, [r6, #0]
 800a48e:	441a      	add	r2, r3
 800a490:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a498:	bf08      	it	eq
 800a49a:	9203      	streq	r2, [sp, #12]
 800a49c:	2130      	movs	r1, #48	; 0x30
 800a49e:	9b03      	ldr	r3, [sp, #12]
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d307      	bcc.n	800a4b4 <__cvt+0x9c>
 800a4a4:	9b03      	ldr	r3, [sp, #12]
 800a4a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a4a8:	1a1b      	subs	r3, r3, r0
 800a4aa:	6013      	str	r3, [r2, #0]
 800a4ac:	b005      	add	sp, #20
 800a4ae:	ecbd 8b02 	vpop	{d8}
 800a4b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4b4:	1c5c      	adds	r4, r3, #1
 800a4b6:	9403      	str	r4, [sp, #12]
 800a4b8:	7019      	strb	r1, [r3, #0]
 800a4ba:	e7f0      	b.n	800a49e <__cvt+0x86>

0800a4bc <__exponent>:
 800a4bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4be:	4603      	mov	r3, r0
 800a4c0:	2900      	cmp	r1, #0
 800a4c2:	bfb8      	it	lt
 800a4c4:	4249      	neglt	r1, r1
 800a4c6:	f803 2b02 	strb.w	r2, [r3], #2
 800a4ca:	bfb4      	ite	lt
 800a4cc:	222d      	movlt	r2, #45	; 0x2d
 800a4ce:	222b      	movge	r2, #43	; 0x2b
 800a4d0:	2909      	cmp	r1, #9
 800a4d2:	7042      	strb	r2, [r0, #1]
 800a4d4:	dd2a      	ble.n	800a52c <__exponent+0x70>
 800a4d6:	f10d 0207 	add.w	r2, sp, #7
 800a4da:	4617      	mov	r7, r2
 800a4dc:	260a      	movs	r6, #10
 800a4de:	4694      	mov	ip, r2
 800a4e0:	fb91 f5f6 	sdiv	r5, r1, r6
 800a4e4:	fb06 1415 	mls	r4, r6, r5, r1
 800a4e8:	3430      	adds	r4, #48	; 0x30
 800a4ea:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a4ee:	460c      	mov	r4, r1
 800a4f0:	2c63      	cmp	r4, #99	; 0x63
 800a4f2:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800a4f6:	4629      	mov	r1, r5
 800a4f8:	dcf1      	bgt.n	800a4de <__exponent+0x22>
 800a4fa:	3130      	adds	r1, #48	; 0x30
 800a4fc:	f1ac 0402 	sub.w	r4, ip, #2
 800a500:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a504:	1c41      	adds	r1, r0, #1
 800a506:	4622      	mov	r2, r4
 800a508:	42ba      	cmp	r2, r7
 800a50a:	d30a      	bcc.n	800a522 <__exponent+0x66>
 800a50c:	f10d 0209 	add.w	r2, sp, #9
 800a510:	eba2 020c 	sub.w	r2, r2, ip
 800a514:	42bc      	cmp	r4, r7
 800a516:	bf88      	it	hi
 800a518:	2200      	movhi	r2, #0
 800a51a:	4413      	add	r3, r2
 800a51c:	1a18      	subs	r0, r3, r0
 800a51e:	b003      	add	sp, #12
 800a520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a522:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a526:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a52a:	e7ed      	b.n	800a508 <__exponent+0x4c>
 800a52c:	2330      	movs	r3, #48	; 0x30
 800a52e:	3130      	adds	r1, #48	; 0x30
 800a530:	7083      	strb	r3, [r0, #2]
 800a532:	70c1      	strb	r1, [r0, #3]
 800a534:	1d03      	adds	r3, r0, #4
 800a536:	e7f1      	b.n	800a51c <__exponent+0x60>

0800a538 <_printf_float>:
 800a538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a53c:	b08b      	sub	sp, #44	; 0x2c
 800a53e:	460c      	mov	r4, r1
 800a540:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800a544:	4616      	mov	r6, r2
 800a546:	461f      	mov	r7, r3
 800a548:	4605      	mov	r5, r0
 800a54a:	f000 fccd 	bl	800aee8 <_localeconv_r>
 800a54e:	f8d0 b000 	ldr.w	fp, [r0]
 800a552:	4658      	mov	r0, fp
 800a554:	f7f5 ff14 	bl	8000380 <strlen>
 800a558:	2300      	movs	r3, #0
 800a55a:	9308      	str	r3, [sp, #32]
 800a55c:	f8d8 3000 	ldr.w	r3, [r8]
 800a560:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a564:	6822      	ldr	r2, [r4, #0]
 800a566:	3307      	adds	r3, #7
 800a568:	f023 0307 	bic.w	r3, r3, #7
 800a56c:	f103 0108 	add.w	r1, r3, #8
 800a570:	f8c8 1000 	str.w	r1, [r8]
 800a574:	ed93 0b00 	vldr	d0, [r3]
 800a578:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800a7d8 <_printf_float+0x2a0>
 800a57c:	eeb0 7bc0 	vabs.f64	d7, d0
 800a580:	eeb4 7b46 	vcmp.f64	d7, d6
 800a584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a588:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800a58c:	4682      	mov	sl, r0
 800a58e:	dd24      	ble.n	800a5da <_printf_float+0xa2>
 800a590:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a598:	d502      	bpl.n	800a5a0 <_printf_float+0x68>
 800a59a:	232d      	movs	r3, #45	; 0x2d
 800a59c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5a0:	498f      	ldr	r1, [pc, #572]	; (800a7e0 <_printf_float+0x2a8>)
 800a5a2:	4b90      	ldr	r3, [pc, #576]	; (800a7e4 <_printf_float+0x2ac>)
 800a5a4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a5a8:	bf94      	ite	ls
 800a5aa:	4688      	movls	r8, r1
 800a5ac:	4698      	movhi	r8, r3
 800a5ae:	2303      	movs	r3, #3
 800a5b0:	6123      	str	r3, [r4, #16]
 800a5b2:	f022 0204 	bic.w	r2, r2, #4
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	6022      	str	r2, [r4, #0]
 800a5ba:	9304      	str	r3, [sp, #16]
 800a5bc:	9700      	str	r7, [sp, #0]
 800a5be:	4633      	mov	r3, r6
 800a5c0:	aa09      	add	r2, sp, #36	; 0x24
 800a5c2:	4621      	mov	r1, r4
 800a5c4:	4628      	mov	r0, r5
 800a5c6:	f000 f9d1 	bl	800a96c <_printf_common>
 800a5ca:	3001      	adds	r0, #1
 800a5cc:	f040 808a 	bne.w	800a6e4 <_printf_float+0x1ac>
 800a5d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5d4:	b00b      	add	sp, #44	; 0x2c
 800a5d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5da:	eeb4 0b40 	vcmp.f64	d0, d0
 800a5de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5e2:	d709      	bvc.n	800a5f8 <_printf_float+0xc0>
 800a5e4:	ee10 3a90 	vmov	r3, s1
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	bfbc      	itt	lt
 800a5ec:	232d      	movlt	r3, #45	; 0x2d
 800a5ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a5f2:	497d      	ldr	r1, [pc, #500]	; (800a7e8 <_printf_float+0x2b0>)
 800a5f4:	4b7d      	ldr	r3, [pc, #500]	; (800a7ec <_printf_float+0x2b4>)
 800a5f6:	e7d5      	b.n	800a5a4 <_printf_float+0x6c>
 800a5f8:	6863      	ldr	r3, [r4, #4]
 800a5fa:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800a5fe:	9104      	str	r1, [sp, #16]
 800a600:	1c59      	adds	r1, r3, #1
 800a602:	d13c      	bne.n	800a67e <_printf_float+0x146>
 800a604:	2306      	movs	r3, #6
 800a606:	6063      	str	r3, [r4, #4]
 800a608:	2300      	movs	r3, #0
 800a60a:	9303      	str	r3, [sp, #12]
 800a60c:	ab08      	add	r3, sp, #32
 800a60e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800a612:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a616:	ab07      	add	r3, sp, #28
 800a618:	6861      	ldr	r1, [r4, #4]
 800a61a:	9300      	str	r3, [sp, #0]
 800a61c:	6022      	str	r2, [r4, #0]
 800a61e:	f10d 031b 	add.w	r3, sp, #27
 800a622:	4628      	mov	r0, r5
 800a624:	f7ff fef8 	bl	800a418 <__cvt>
 800a628:	9b04      	ldr	r3, [sp, #16]
 800a62a:	9907      	ldr	r1, [sp, #28]
 800a62c:	2b47      	cmp	r3, #71	; 0x47
 800a62e:	4680      	mov	r8, r0
 800a630:	d108      	bne.n	800a644 <_printf_float+0x10c>
 800a632:	1cc8      	adds	r0, r1, #3
 800a634:	db02      	blt.n	800a63c <_printf_float+0x104>
 800a636:	6863      	ldr	r3, [r4, #4]
 800a638:	4299      	cmp	r1, r3
 800a63a:	dd41      	ble.n	800a6c0 <_printf_float+0x188>
 800a63c:	f1a9 0902 	sub.w	r9, r9, #2
 800a640:	fa5f f989 	uxtb.w	r9, r9
 800a644:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a648:	d820      	bhi.n	800a68c <_printf_float+0x154>
 800a64a:	3901      	subs	r1, #1
 800a64c:	464a      	mov	r2, r9
 800a64e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a652:	9107      	str	r1, [sp, #28]
 800a654:	f7ff ff32 	bl	800a4bc <__exponent>
 800a658:	9a08      	ldr	r2, [sp, #32]
 800a65a:	9004      	str	r0, [sp, #16]
 800a65c:	1813      	adds	r3, r2, r0
 800a65e:	2a01      	cmp	r2, #1
 800a660:	6123      	str	r3, [r4, #16]
 800a662:	dc02      	bgt.n	800a66a <_printf_float+0x132>
 800a664:	6822      	ldr	r2, [r4, #0]
 800a666:	07d2      	lsls	r2, r2, #31
 800a668:	d501      	bpl.n	800a66e <_printf_float+0x136>
 800a66a:	3301      	adds	r3, #1
 800a66c:	6123      	str	r3, [r4, #16]
 800a66e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d0a2      	beq.n	800a5bc <_printf_float+0x84>
 800a676:	232d      	movs	r3, #45	; 0x2d
 800a678:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a67c:	e79e      	b.n	800a5bc <_printf_float+0x84>
 800a67e:	9904      	ldr	r1, [sp, #16]
 800a680:	2947      	cmp	r1, #71	; 0x47
 800a682:	d1c1      	bne.n	800a608 <_printf_float+0xd0>
 800a684:	2b00      	cmp	r3, #0
 800a686:	d1bf      	bne.n	800a608 <_printf_float+0xd0>
 800a688:	2301      	movs	r3, #1
 800a68a:	e7bc      	b.n	800a606 <_printf_float+0xce>
 800a68c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a690:	d118      	bne.n	800a6c4 <_printf_float+0x18c>
 800a692:	2900      	cmp	r1, #0
 800a694:	6863      	ldr	r3, [r4, #4]
 800a696:	dd0b      	ble.n	800a6b0 <_printf_float+0x178>
 800a698:	6121      	str	r1, [r4, #16]
 800a69a:	b913      	cbnz	r3, 800a6a2 <_printf_float+0x16a>
 800a69c:	6822      	ldr	r2, [r4, #0]
 800a69e:	07d0      	lsls	r0, r2, #31
 800a6a0:	d502      	bpl.n	800a6a8 <_printf_float+0x170>
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	440b      	add	r3, r1
 800a6a6:	6123      	str	r3, [r4, #16]
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	65a1      	str	r1, [r4, #88]	; 0x58
 800a6ac:	9304      	str	r3, [sp, #16]
 800a6ae:	e7de      	b.n	800a66e <_printf_float+0x136>
 800a6b0:	b913      	cbnz	r3, 800a6b8 <_printf_float+0x180>
 800a6b2:	6822      	ldr	r2, [r4, #0]
 800a6b4:	07d2      	lsls	r2, r2, #31
 800a6b6:	d501      	bpl.n	800a6bc <_printf_float+0x184>
 800a6b8:	3302      	adds	r3, #2
 800a6ba:	e7f4      	b.n	800a6a6 <_printf_float+0x16e>
 800a6bc:	2301      	movs	r3, #1
 800a6be:	e7f2      	b.n	800a6a6 <_printf_float+0x16e>
 800a6c0:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a6c4:	9b08      	ldr	r3, [sp, #32]
 800a6c6:	4299      	cmp	r1, r3
 800a6c8:	db05      	blt.n	800a6d6 <_printf_float+0x19e>
 800a6ca:	6823      	ldr	r3, [r4, #0]
 800a6cc:	6121      	str	r1, [r4, #16]
 800a6ce:	07d8      	lsls	r0, r3, #31
 800a6d0:	d5ea      	bpl.n	800a6a8 <_printf_float+0x170>
 800a6d2:	1c4b      	adds	r3, r1, #1
 800a6d4:	e7e7      	b.n	800a6a6 <_printf_float+0x16e>
 800a6d6:	2900      	cmp	r1, #0
 800a6d8:	bfd4      	ite	le
 800a6da:	f1c1 0202 	rsble	r2, r1, #2
 800a6de:	2201      	movgt	r2, #1
 800a6e0:	4413      	add	r3, r2
 800a6e2:	e7e0      	b.n	800a6a6 <_printf_float+0x16e>
 800a6e4:	6823      	ldr	r3, [r4, #0]
 800a6e6:	055a      	lsls	r2, r3, #21
 800a6e8:	d407      	bmi.n	800a6fa <_printf_float+0x1c2>
 800a6ea:	6923      	ldr	r3, [r4, #16]
 800a6ec:	4642      	mov	r2, r8
 800a6ee:	4631      	mov	r1, r6
 800a6f0:	4628      	mov	r0, r5
 800a6f2:	47b8      	blx	r7
 800a6f4:	3001      	adds	r0, #1
 800a6f6:	d12a      	bne.n	800a74e <_printf_float+0x216>
 800a6f8:	e76a      	b.n	800a5d0 <_printf_float+0x98>
 800a6fa:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a6fe:	f240 80e0 	bls.w	800a8c2 <_printf_float+0x38a>
 800a702:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a706:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a70a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a70e:	d133      	bne.n	800a778 <_printf_float+0x240>
 800a710:	4a37      	ldr	r2, [pc, #220]	; (800a7f0 <_printf_float+0x2b8>)
 800a712:	2301      	movs	r3, #1
 800a714:	4631      	mov	r1, r6
 800a716:	4628      	mov	r0, r5
 800a718:	47b8      	blx	r7
 800a71a:	3001      	adds	r0, #1
 800a71c:	f43f af58 	beq.w	800a5d0 <_printf_float+0x98>
 800a720:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a724:	429a      	cmp	r2, r3
 800a726:	db02      	blt.n	800a72e <_printf_float+0x1f6>
 800a728:	6823      	ldr	r3, [r4, #0]
 800a72a:	07d8      	lsls	r0, r3, #31
 800a72c:	d50f      	bpl.n	800a74e <_printf_float+0x216>
 800a72e:	4653      	mov	r3, sl
 800a730:	465a      	mov	r2, fp
 800a732:	4631      	mov	r1, r6
 800a734:	4628      	mov	r0, r5
 800a736:	47b8      	blx	r7
 800a738:	3001      	adds	r0, #1
 800a73a:	f43f af49 	beq.w	800a5d0 <_printf_float+0x98>
 800a73e:	f04f 0800 	mov.w	r8, #0
 800a742:	f104 091a 	add.w	r9, r4, #26
 800a746:	9b08      	ldr	r3, [sp, #32]
 800a748:	3b01      	subs	r3, #1
 800a74a:	4543      	cmp	r3, r8
 800a74c:	dc09      	bgt.n	800a762 <_printf_float+0x22a>
 800a74e:	6823      	ldr	r3, [r4, #0]
 800a750:	079b      	lsls	r3, r3, #30
 800a752:	f100 8106 	bmi.w	800a962 <_printf_float+0x42a>
 800a756:	68e0      	ldr	r0, [r4, #12]
 800a758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a75a:	4298      	cmp	r0, r3
 800a75c:	bfb8      	it	lt
 800a75e:	4618      	movlt	r0, r3
 800a760:	e738      	b.n	800a5d4 <_printf_float+0x9c>
 800a762:	2301      	movs	r3, #1
 800a764:	464a      	mov	r2, r9
 800a766:	4631      	mov	r1, r6
 800a768:	4628      	mov	r0, r5
 800a76a:	47b8      	blx	r7
 800a76c:	3001      	adds	r0, #1
 800a76e:	f43f af2f 	beq.w	800a5d0 <_printf_float+0x98>
 800a772:	f108 0801 	add.w	r8, r8, #1
 800a776:	e7e6      	b.n	800a746 <_printf_float+0x20e>
 800a778:	9b07      	ldr	r3, [sp, #28]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	dc3a      	bgt.n	800a7f4 <_printf_float+0x2bc>
 800a77e:	4a1c      	ldr	r2, [pc, #112]	; (800a7f0 <_printf_float+0x2b8>)
 800a780:	2301      	movs	r3, #1
 800a782:	4631      	mov	r1, r6
 800a784:	4628      	mov	r0, r5
 800a786:	47b8      	blx	r7
 800a788:	3001      	adds	r0, #1
 800a78a:	f43f af21 	beq.w	800a5d0 <_printf_float+0x98>
 800a78e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800a792:	4313      	orrs	r3, r2
 800a794:	d102      	bne.n	800a79c <_printf_float+0x264>
 800a796:	6823      	ldr	r3, [r4, #0]
 800a798:	07d9      	lsls	r1, r3, #31
 800a79a:	d5d8      	bpl.n	800a74e <_printf_float+0x216>
 800a79c:	4653      	mov	r3, sl
 800a79e:	465a      	mov	r2, fp
 800a7a0:	4631      	mov	r1, r6
 800a7a2:	4628      	mov	r0, r5
 800a7a4:	47b8      	blx	r7
 800a7a6:	3001      	adds	r0, #1
 800a7a8:	f43f af12 	beq.w	800a5d0 <_printf_float+0x98>
 800a7ac:	f04f 0900 	mov.w	r9, #0
 800a7b0:	f104 0a1a 	add.w	sl, r4, #26
 800a7b4:	9b07      	ldr	r3, [sp, #28]
 800a7b6:	425b      	negs	r3, r3
 800a7b8:	454b      	cmp	r3, r9
 800a7ba:	dc01      	bgt.n	800a7c0 <_printf_float+0x288>
 800a7bc:	9b08      	ldr	r3, [sp, #32]
 800a7be:	e795      	b.n	800a6ec <_printf_float+0x1b4>
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	4652      	mov	r2, sl
 800a7c4:	4631      	mov	r1, r6
 800a7c6:	4628      	mov	r0, r5
 800a7c8:	47b8      	blx	r7
 800a7ca:	3001      	adds	r0, #1
 800a7cc:	f43f af00 	beq.w	800a5d0 <_printf_float+0x98>
 800a7d0:	f109 0901 	add.w	r9, r9, #1
 800a7d4:	e7ee      	b.n	800a7b4 <_printf_float+0x27c>
 800a7d6:	bf00      	nop
 800a7d8:	ffffffff 	.word	0xffffffff
 800a7dc:	7fefffff 	.word	0x7fefffff
 800a7e0:	0800d050 	.word	0x0800d050
 800a7e4:	0800d054 	.word	0x0800d054
 800a7e8:	0800d058 	.word	0x0800d058
 800a7ec:	0800d05c 	.word	0x0800d05c
 800a7f0:	0800d060 	.word	0x0800d060
 800a7f4:	9a08      	ldr	r2, [sp, #32]
 800a7f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	bfa8      	it	ge
 800a7fc:	461a      	movge	r2, r3
 800a7fe:	2a00      	cmp	r2, #0
 800a800:	4691      	mov	r9, r2
 800a802:	dc38      	bgt.n	800a876 <_printf_float+0x33e>
 800a804:	2300      	movs	r3, #0
 800a806:	9305      	str	r3, [sp, #20]
 800a808:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a80c:	f104 021a 	add.w	r2, r4, #26
 800a810:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a812:	9905      	ldr	r1, [sp, #20]
 800a814:	9304      	str	r3, [sp, #16]
 800a816:	eba3 0309 	sub.w	r3, r3, r9
 800a81a:	428b      	cmp	r3, r1
 800a81c:	dc33      	bgt.n	800a886 <_printf_float+0x34e>
 800a81e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a822:	429a      	cmp	r2, r3
 800a824:	db3c      	blt.n	800a8a0 <_printf_float+0x368>
 800a826:	6823      	ldr	r3, [r4, #0]
 800a828:	07da      	lsls	r2, r3, #31
 800a82a:	d439      	bmi.n	800a8a0 <_printf_float+0x368>
 800a82c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800a830:	eba2 0903 	sub.w	r9, r2, r3
 800a834:	9b04      	ldr	r3, [sp, #16]
 800a836:	1ad2      	subs	r2, r2, r3
 800a838:	4591      	cmp	r9, r2
 800a83a:	bfa8      	it	ge
 800a83c:	4691      	movge	r9, r2
 800a83e:	f1b9 0f00 	cmp.w	r9, #0
 800a842:	dc35      	bgt.n	800a8b0 <_printf_float+0x378>
 800a844:	f04f 0800 	mov.w	r8, #0
 800a848:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a84c:	f104 0a1a 	add.w	sl, r4, #26
 800a850:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a854:	1a9b      	subs	r3, r3, r2
 800a856:	eba3 0309 	sub.w	r3, r3, r9
 800a85a:	4543      	cmp	r3, r8
 800a85c:	f77f af77 	ble.w	800a74e <_printf_float+0x216>
 800a860:	2301      	movs	r3, #1
 800a862:	4652      	mov	r2, sl
 800a864:	4631      	mov	r1, r6
 800a866:	4628      	mov	r0, r5
 800a868:	47b8      	blx	r7
 800a86a:	3001      	adds	r0, #1
 800a86c:	f43f aeb0 	beq.w	800a5d0 <_printf_float+0x98>
 800a870:	f108 0801 	add.w	r8, r8, #1
 800a874:	e7ec      	b.n	800a850 <_printf_float+0x318>
 800a876:	4613      	mov	r3, r2
 800a878:	4631      	mov	r1, r6
 800a87a:	4642      	mov	r2, r8
 800a87c:	4628      	mov	r0, r5
 800a87e:	47b8      	blx	r7
 800a880:	3001      	adds	r0, #1
 800a882:	d1bf      	bne.n	800a804 <_printf_float+0x2cc>
 800a884:	e6a4      	b.n	800a5d0 <_printf_float+0x98>
 800a886:	2301      	movs	r3, #1
 800a888:	4631      	mov	r1, r6
 800a88a:	4628      	mov	r0, r5
 800a88c:	9204      	str	r2, [sp, #16]
 800a88e:	47b8      	blx	r7
 800a890:	3001      	adds	r0, #1
 800a892:	f43f ae9d 	beq.w	800a5d0 <_printf_float+0x98>
 800a896:	9b05      	ldr	r3, [sp, #20]
 800a898:	9a04      	ldr	r2, [sp, #16]
 800a89a:	3301      	adds	r3, #1
 800a89c:	9305      	str	r3, [sp, #20]
 800a89e:	e7b7      	b.n	800a810 <_printf_float+0x2d8>
 800a8a0:	4653      	mov	r3, sl
 800a8a2:	465a      	mov	r2, fp
 800a8a4:	4631      	mov	r1, r6
 800a8a6:	4628      	mov	r0, r5
 800a8a8:	47b8      	blx	r7
 800a8aa:	3001      	adds	r0, #1
 800a8ac:	d1be      	bne.n	800a82c <_printf_float+0x2f4>
 800a8ae:	e68f      	b.n	800a5d0 <_printf_float+0x98>
 800a8b0:	9a04      	ldr	r2, [sp, #16]
 800a8b2:	464b      	mov	r3, r9
 800a8b4:	4442      	add	r2, r8
 800a8b6:	4631      	mov	r1, r6
 800a8b8:	4628      	mov	r0, r5
 800a8ba:	47b8      	blx	r7
 800a8bc:	3001      	adds	r0, #1
 800a8be:	d1c1      	bne.n	800a844 <_printf_float+0x30c>
 800a8c0:	e686      	b.n	800a5d0 <_printf_float+0x98>
 800a8c2:	9a08      	ldr	r2, [sp, #32]
 800a8c4:	2a01      	cmp	r2, #1
 800a8c6:	dc01      	bgt.n	800a8cc <_printf_float+0x394>
 800a8c8:	07db      	lsls	r3, r3, #31
 800a8ca:	d537      	bpl.n	800a93c <_printf_float+0x404>
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	4642      	mov	r2, r8
 800a8d0:	4631      	mov	r1, r6
 800a8d2:	4628      	mov	r0, r5
 800a8d4:	47b8      	blx	r7
 800a8d6:	3001      	adds	r0, #1
 800a8d8:	f43f ae7a 	beq.w	800a5d0 <_printf_float+0x98>
 800a8dc:	4653      	mov	r3, sl
 800a8de:	465a      	mov	r2, fp
 800a8e0:	4631      	mov	r1, r6
 800a8e2:	4628      	mov	r0, r5
 800a8e4:	47b8      	blx	r7
 800a8e6:	3001      	adds	r0, #1
 800a8e8:	f43f ae72 	beq.w	800a5d0 <_printf_float+0x98>
 800a8ec:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a8f0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a8f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8f8:	9b08      	ldr	r3, [sp, #32]
 800a8fa:	d01a      	beq.n	800a932 <_printf_float+0x3fa>
 800a8fc:	3b01      	subs	r3, #1
 800a8fe:	f108 0201 	add.w	r2, r8, #1
 800a902:	4631      	mov	r1, r6
 800a904:	4628      	mov	r0, r5
 800a906:	47b8      	blx	r7
 800a908:	3001      	adds	r0, #1
 800a90a:	d10e      	bne.n	800a92a <_printf_float+0x3f2>
 800a90c:	e660      	b.n	800a5d0 <_printf_float+0x98>
 800a90e:	2301      	movs	r3, #1
 800a910:	464a      	mov	r2, r9
 800a912:	4631      	mov	r1, r6
 800a914:	4628      	mov	r0, r5
 800a916:	47b8      	blx	r7
 800a918:	3001      	adds	r0, #1
 800a91a:	f43f ae59 	beq.w	800a5d0 <_printf_float+0x98>
 800a91e:	f108 0801 	add.w	r8, r8, #1
 800a922:	9b08      	ldr	r3, [sp, #32]
 800a924:	3b01      	subs	r3, #1
 800a926:	4543      	cmp	r3, r8
 800a928:	dcf1      	bgt.n	800a90e <_printf_float+0x3d6>
 800a92a:	9b04      	ldr	r3, [sp, #16]
 800a92c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a930:	e6dd      	b.n	800a6ee <_printf_float+0x1b6>
 800a932:	f04f 0800 	mov.w	r8, #0
 800a936:	f104 091a 	add.w	r9, r4, #26
 800a93a:	e7f2      	b.n	800a922 <_printf_float+0x3ea>
 800a93c:	2301      	movs	r3, #1
 800a93e:	4642      	mov	r2, r8
 800a940:	e7df      	b.n	800a902 <_printf_float+0x3ca>
 800a942:	2301      	movs	r3, #1
 800a944:	464a      	mov	r2, r9
 800a946:	4631      	mov	r1, r6
 800a948:	4628      	mov	r0, r5
 800a94a:	47b8      	blx	r7
 800a94c:	3001      	adds	r0, #1
 800a94e:	f43f ae3f 	beq.w	800a5d0 <_printf_float+0x98>
 800a952:	f108 0801 	add.w	r8, r8, #1
 800a956:	68e3      	ldr	r3, [r4, #12]
 800a958:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a95a:	1a5b      	subs	r3, r3, r1
 800a95c:	4543      	cmp	r3, r8
 800a95e:	dcf0      	bgt.n	800a942 <_printf_float+0x40a>
 800a960:	e6f9      	b.n	800a756 <_printf_float+0x21e>
 800a962:	f04f 0800 	mov.w	r8, #0
 800a966:	f104 0919 	add.w	r9, r4, #25
 800a96a:	e7f4      	b.n	800a956 <_printf_float+0x41e>

0800a96c <_printf_common>:
 800a96c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a970:	4616      	mov	r6, r2
 800a972:	4699      	mov	r9, r3
 800a974:	688a      	ldr	r2, [r1, #8]
 800a976:	690b      	ldr	r3, [r1, #16]
 800a978:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a97c:	4293      	cmp	r3, r2
 800a97e:	bfb8      	it	lt
 800a980:	4613      	movlt	r3, r2
 800a982:	6033      	str	r3, [r6, #0]
 800a984:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a988:	4607      	mov	r7, r0
 800a98a:	460c      	mov	r4, r1
 800a98c:	b10a      	cbz	r2, 800a992 <_printf_common+0x26>
 800a98e:	3301      	adds	r3, #1
 800a990:	6033      	str	r3, [r6, #0]
 800a992:	6823      	ldr	r3, [r4, #0]
 800a994:	0699      	lsls	r1, r3, #26
 800a996:	bf42      	ittt	mi
 800a998:	6833      	ldrmi	r3, [r6, #0]
 800a99a:	3302      	addmi	r3, #2
 800a99c:	6033      	strmi	r3, [r6, #0]
 800a99e:	6825      	ldr	r5, [r4, #0]
 800a9a0:	f015 0506 	ands.w	r5, r5, #6
 800a9a4:	d106      	bne.n	800a9b4 <_printf_common+0x48>
 800a9a6:	f104 0a19 	add.w	sl, r4, #25
 800a9aa:	68e3      	ldr	r3, [r4, #12]
 800a9ac:	6832      	ldr	r2, [r6, #0]
 800a9ae:	1a9b      	subs	r3, r3, r2
 800a9b0:	42ab      	cmp	r3, r5
 800a9b2:	dc26      	bgt.n	800aa02 <_printf_common+0x96>
 800a9b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a9b8:	1e13      	subs	r3, r2, #0
 800a9ba:	6822      	ldr	r2, [r4, #0]
 800a9bc:	bf18      	it	ne
 800a9be:	2301      	movne	r3, #1
 800a9c0:	0692      	lsls	r2, r2, #26
 800a9c2:	d42b      	bmi.n	800aa1c <_printf_common+0xb0>
 800a9c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a9c8:	4649      	mov	r1, r9
 800a9ca:	4638      	mov	r0, r7
 800a9cc:	47c0      	blx	r8
 800a9ce:	3001      	adds	r0, #1
 800a9d0:	d01e      	beq.n	800aa10 <_printf_common+0xa4>
 800a9d2:	6823      	ldr	r3, [r4, #0]
 800a9d4:	6922      	ldr	r2, [r4, #16]
 800a9d6:	f003 0306 	and.w	r3, r3, #6
 800a9da:	2b04      	cmp	r3, #4
 800a9dc:	bf02      	ittt	eq
 800a9de:	68e5      	ldreq	r5, [r4, #12]
 800a9e0:	6833      	ldreq	r3, [r6, #0]
 800a9e2:	1aed      	subeq	r5, r5, r3
 800a9e4:	68a3      	ldr	r3, [r4, #8]
 800a9e6:	bf0c      	ite	eq
 800a9e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a9ec:	2500      	movne	r5, #0
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	bfc4      	itt	gt
 800a9f2:	1a9b      	subgt	r3, r3, r2
 800a9f4:	18ed      	addgt	r5, r5, r3
 800a9f6:	2600      	movs	r6, #0
 800a9f8:	341a      	adds	r4, #26
 800a9fa:	42b5      	cmp	r5, r6
 800a9fc:	d11a      	bne.n	800aa34 <_printf_common+0xc8>
 800a9fe:	2000      	movs	r0, #0
 800aa00:	e008      	b.n	800aa14 <_printf_common+0xa8>
 800aa02:	2301      	movs	r3, #1
 800aa04:	4652      	mov	r2, sl
 800aa06:	4649      	mov	r1, r9
 800aa08:	4638      	mov	r0, r7
 800aa0a:	47c0      	blx	r8
 800aa0c:	3001      	adds	r0, #1
 800aa0e:	d103      	bne.n	800aa18 <_printf_common+0xac>
 800aa10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa18:	3501      	adds	r5, #1
 800aa1a:	e7c6      	b.n	800a9aa <_printf_common+0x3e>
 800aa1c:	18e1      	adds	r1, r4, r3
 800aa1e:	1c5a      	adds	r2, r3, #1
 800aa20:	2030      	movs	r0, #48	; 0x30
 800aa22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aa26:	4422      	add	r2, r4
 800aa28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aa2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aa30:	3302      	adds	r3, #2
 800aa32:	e7c7      	b.n	800a9c4 <_printf_common+0x58>
 800aa34:	2301      	movs	r3, #1
 800aa36:	4622      	mov	r2, r4
 800aa38:	4649      	mov	r1, r9
 800aa3a:	4638      	mov	r0, r7
 800aa3c:	47c0      	blx	r8
 800aa3e:	3001      	adds	r0, #1
 800aa40:	d0e6      	beq.n	800aa10 <_printf_common+0xa4>
 800aa42:	3601      	adds	r6, #1
 800aa44:	e7d9      	b.n	800a9fa <_printf_common+0x8e>
	...

0800aa48 <_printf_i>:
 800aa48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa4c:	7e0f      	ldrb	r7, [r1, #24]
 800aa4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aa50:	2f78      	cmp	r7, #120	; 0x78
 800aa52:	4691      	mov	r9, r2
 800aa54:	4680      	mov	r8, r0
 800aa56:	460c      	mov	r4, r1
 800aa58:	469a      	mov	sl, r3
 800aa5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aa5e:	d807      	bhi.n	800aa70 <_printf_i+0x28>
 800aa60:	2f62      	cmp	r7, #98	; 0x62
 800aa62:	d80a      	bhi.n	800aa7a <_printf_i+0x32>
 800aa64:	2f00      	cmp	r7, #0
 800aa66:	f000 80d4 	beq.w	800ac12 <_printf_i+0x1ca>
 800aa6a:	2f58      	cmp	r7, #88	; 0x58
 800aa6c:	f000 80c0 	beq.w	800abf0 <_printf_i+0x1a8>
 800aa70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa78:	e03a      	b.n	800aaf0 <_printf_i+0xa8>
 800aa7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa7e:	2b15      	cmp	r3, #21
 800aa80:	d8f6      	bhi.n	800aa70 <_printf_i+0x28>
 800aa82:	a101      	add	r1, pc, #4	; (adr r1, 800aa88 <_printf_i+0x40>)
 800aa84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa88:	0800aae1 	.word	0x0800aae1
 800aa8c:	0800aaf5 	.word	0x0800aaf5
 800aa90:	0800aa71 	.word	0x0800aa71
 800aa94:	0800aa71 	.word	0x0800aa71
 800aa98:	0800aa71 	.word	0x0800aa71
 800aa9c:	0800aa71 	.word	0x0800aa71
 800aaa0:	0800aaf5 	.word	0x0800aaf5
 800aaa4:	0800aa71 	.word	0x0800aa71
 800aaa8:	0800aa71 	.word	0x0800aa71
 800aaac:	0800aa71 	.word	0x0800aa71
 800aab0:	0800aa71 	.word	0x0800aa71
 800aab4:	0800abf9 	.word	0x0800abf9
 800aab8:	0800ab21 	.word	0x0800ab21
 800aabc:	0800abb3 	.word	0x0800abb3
 800aac0:	0800aa71 	.word	0x0800aa71
 800aac4:	0800aa71 	.word	0x0800aa71
 800aac8:	0800ac1b 	.word	0x0800ac1b
 800aacc:	0800aa71 	.word	0x0800aa71
 800aad0:	0800ab21 	.word	0x0800ab21
 800aad4:	0800aa71 	.word	0x0800aa71
 800aad8:	0800aa71 	.word	0x0800aa71
 800aadc:	0800abbb 	.word	0x0800abbb
 800aae0:	682b      	ldr	r3, [r5, #0]
 800aae2:	1d1a      	adds	r2, r3, #4
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	602a      	str	r2, [r5, #0]
 800aae8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aaec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	e09f      	b.n	800ac34 <_printf_i+0x1ec>
 800aaf4:	6820      	ldr	r0, [r4, #0]
 800aaf6:	682b      	ldr	r3, [r5, #0]
 800aaf8:	0607      	lsls	r7, r0, #24
 800aafa:	f103 0104 	add.w	r1, r3, #4
 800aafe:	6029      	str	r1, [r5, #0]
 800ab00:	d501      	bpl.n	800ab06 <_printf_i+0xbe>
 800ab02:	681e      	ldr	r6, [r3, #0]
 800ab04:	e003      	b.n	800ab0e <_printf_i+0xc6>
 800ab06:	0646      	lsls	r6, r0, #25
 800ab08:	d5fb      	bpl.n	800ab02 <_printf_i+0xba>
 800ab0a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ab0e:	2e00      	cmp	r6, #0
 800ab10:	da03      	bge.n	800ab1a <_printf_i+0xd2>
 800ab12:	232d      	movs	r3, #45	; 0x2d
 800ab14:	4276      	negs	r6, r6
 800ab16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab1a:	485a      	ldr	r0, [pc, #360]	; (800ac84 <_printf_i+0x23c>)
 800ab1c:	230a      	movs	r3, #10
 800ab1e:	e012      	b.n	800ab46 <_printf_i+0xfe>
 800ab20:	682b      	ldr	r3, [r5, #0]
 800ab22:	6820      	ldr	r0, [r4, #0]
 800ab24:	1d19      	adds	r1, r3, #4
 800ab26:	6029      	str	r1, [r5, #0]
 800ab28:	0605      	lsls	r5, r0, #24
 800ab2a:	d501      	bpl.n	800ab30 <_printf_i+0xe8>
 800ab2c:	681e      	ldr	r6, [r3, #0]
 800ab2e:	e002      	b.n	800ab36 <_printf_i+0xee>
 800ab30:	0641      	lsls	r1, r0, #25
 800ab32:	d5fb      	bpl.n	800ab2c <_printf_i+0xe4>
 800ab34:	881e      	ldrh	r6, [r3, #0]
 800ab36:	4853      	ldr	r0, [pc, #332]	; (800ac84 <_printf_i+0x23c>)
 800ab38:	2f6f      	cmp	r7, #111	; 0x6f
 800ab3a:	bf0c      	ite	eq
 800ab3c:	2308      	moveq	r3, #8
 800ab3e:	230a      	movne	r3, #10
 800ab40:	2100      	movs	r1, #0
 800ab42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab46:	6865      	ldr	r5, [r4, #4]
 800ab48:	60a5      	str	r5, [r4, #8]
 800ab4a:	2d00      	cmp	r5, #0
 800ab4c:	bfa2      	ittt	ge
 800ab4e:	6821      	ldrge	r1, [r4, #0]
 800ab50:	f021 0104 	bicge.w	r1, r1, #4
 800ab54:	6021      	strge	r1, [r4, #0]
 800ab56:	b90e      	cbnz	r6, 800ab5c <_printf_i+0x114>
 800ab58:	2d00      	cmp	r5, #0
 800ab5a:	d04b      	beq.n	800abf4 <_printf_i+0x1ac>
 800ab5c:	4615      	mov	r5, r2
 800ab5e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ab62:	fb03 6711 	mls	r7, r3, r1, r6
 800ab66:	5dc7      	ldrb	r7, [r0, r7]
 800ab68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ab6c:	4637      	mov	r7, r6
 800ab6e:	42bb      	cmp	r3, r7
 800ab70:	460e      	mov	r6, r1
 800ab72:	d9f4      	bls.n	800ab5e <_printf_i+0x116>
 800ab74:	2b08      	cmp	r3, #8
 800ab76:	d10b      	bne.n	800ab90 <_printf_i+0x148>
 800ab78:	6823      	ldr	r3, [r4, #0]
 800ab7a:	07de      	lsls	r6, r3, #31
 800ab7c:	d508      	bpl.n	800ab90 <_printf_i+0x148>
 800ab7e:	6923      	ldr	r3, [r4, #16]
 800ab80:	6861      	ldr	r1, [r4, #4]
 800ab82:	4299      	cmp	r1, r3
 800ab84:	bfde      	ittt	le
 800ab86:	2330      	movle	r3, #48	; 0x30
 800ab88:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab8c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ab90:	1b52      	subs	r2, r2, r5
 800ab92:	6122      	str	r2, [r4, #16]
 800ab94:	f8cd a000 	str.w	sl, [sp]
 800ab98:	464b      	mov	r3, r9
 800ab9a:	aa03      	add	r2, sp, #12
 800ab9c:	4621      	mov	r1, r4
 800ab9e:	4640      	mov	r0, r8
 800aba0:	f7ff fee4 	bl	800a96c <_printf_common>
 800aba4:	3001      	adds	r0, #1
 800aba6:	d14a      	bne.n	800ac3e <_printf_i+0x1f6>
 800aba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800abac:	b004      	add	sp, #16
 800abae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abb2:	6823      	ldr	r3, [r4, #0]
 800abb4:	f043 0320 	orr.w	r3, r3, #32
 800abb8:	6023      	str	r3, [r4, #0]
 800abba:	4833      	ldr	r0, [pc, #204]	; (800ac88 <_printf_i+0x240>)
 800abbc:	2778      	movs	r7, #120	; 0x78
 800abbe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800abc2:	6823      	ldr	r3, [r4, #0]
 800abc4:	6829      	ldr	r1, [r5, #0]
 800abc6:	061f      	lsls	r7, r3, #24
 800abc8:	f851 6b04 	ldr.w	r6, [r1], #4
 800abcc:	d402      	bmi.n	800abd4 <_printf_i+0x18c>
 800abce:	065f      	lsls	r7, r3, #25
 800abd0:	bf48      	it	mi
 800abd2:	b2b6      	uxthmi	r6, r6
 800abd4:	07df      	lsls	r7, r3, #31
 800abd6:	bf48      	it	mi
 800abd8:	f043 0320 	orrmi.w	r3, r3, #32
 800abdc:	6029      	str	r1, [r5, #0]
 800abde:	bf48      	it	mi
 800abe0:	6023      	strmi	r3, [r4, #0]
 800abe2:	b91e      	cbnz	r6, 800abec <_printf_i+0x1a4>
 800abe4:	6823      	ldr	r3, [r4, #0]
 800abe6:	f023 0320 	bic.w	r3, r3, #32
 800abea:	6023      	str	r3, [r4, #0]
 800abec:	2310      	movs	r3, #16
 800abee:	e7a7      	b.n	800ab40 <_printf_i+0xf8>
 800abf0:	4824      	ldr	r0, [pc, #144]	; (800ac84 <_printf_i+0x23c>)
 800abf2:	e7e4      	b.n	800abbe <_printf_i+0x176>
 800abf4:	4615      	mov	r5, r2
 800abf6:	e7bd      	b.n	800ab74 <_printf_i+0x12c>
 800abf8:	682b      	ldr	r3, [r5, #0]
 800abfa:	6826      	ldr	r6, [r4, #0]
 800abfc:	6961      	ldr	r1, [r4, #20]
 800abfe:	1d18      	adds	r0, r3, #4
 800ac00:	6028      	str	r0, [r5, #0]
 800ac02:	0635      	lsls	r5, r6, #24
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	d501      	bpl.n	800ac0c <_printf_i+0x1c4>
 800ac08:	6019      	str	r1, [r3, #0]
 800ac0a:	e002      	b.n	800ac12 <_printf_i+0x1ca>
 800ac0c:	0670      	lsls	r0, r6, #25
 800ac0e:	d5fb      	bpl.n	800ac08 <_printf_i+0x1c0>
 800ac10:	8019      	strh	r1, [r3, #0]
 800ac12:	2300      	movs	r3, #0
 800ac14:	6123      	str	r3, [r4, #16]
 800ac16:	4615      	mov	r5, r2
 800ac18:	e7bc      	b.n	800ab94 <_printf_i+0x14c>
 800ac1a:	682b      	ldr	r3, [r5, #0]
 800ac1c:	1d1a      	adds	r2, r3, #4
 800ac1e:	602a      	str	r2, [r5, #0]
 800ac20:	681d      	ldr	r5, [r3, #0]
 800ac22:	6862      	ldr	r2, [r4, #4]
 800ac24:	2100      	movs	r1, #0
 800ac26:	4628      	mov	r0, r5
 800ac28:	f7f5 fb5a 	bl	80002e0 <memchr>
 800ac2c:	b108      	cbz	r0, 800ac32 <_printf_i+0x1ea>
 800ac2e:	1b40      	subs	r0, r0, r5
 800ac30:	6060      	str	r0, [r4, #4]
 800ac32:	6863      	ldr	r3, [r4, #4]
 800ac34:	6123      	str	r3, [r4, #16]
 800ac36:	2300      	movs	r3, #0
 800ac38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac3c:	e7aa      	b.n	800ab94 <_printf_i+0x14c>
 800ac3e:	6923      	ldr	r3, [r4, #16]
 800ac40:	462a      	mov	r2, r5
 800ac42:	4649      	mov	r1, r9
 800ac44:	4640      	mov	r0, r8
 800ac46:	47d0      	blx	sl
 800ac48:	3001      	adds	r0, #1
 800ac4a:	d0ad      	beq.n	800aba8 <_printf_i+0x160>
 800ac4c:	6823      	ldr	r3, [r4, #0]
 800ac4e:	079b      	lsls	r3, r3, #30
 800ac50:	d413      	bmi.n	800ac7a <_printf_i+0x232>
 800ac52:	68e0      	ldr	r0, [r4, #12]
 800ac54:	9b03      	ldr	r3, [sp, #12]
 800ac56:	4298      	cmp	r0, r3
 800ac58:	bfb8      	it	lt
 800ac5a:	4618      	movlt	r0, r3
 800ac5c:	e7a6      	b.n	800abac <_printf_i+0x164>
 800ac5e:	2301      	movs	r3, #1
 800ac60:	4632      	mov	r2, r6
 800ac62:	4649      	mov	r1, r9
 800ac64:	4640      	mov	r0, r8
 800ac66:	47d0      	blx	sl
 800ac68:	3001      	adds	r0, #1
 800ac6a:	d09d      	beq.n	800aba8 <_printf_i+0x160>
 800ac6c:	3501      	adds	r5, #1
 800ac6e:	68e3      	ldr	r3, [r4, #12]
 800ac70:	9903      	ldr	r1, [sp, #12]
 800ac72:	1a5b      	subs	r3, r3, r1
 800ac74:	42ab      	cmp	r3, r5
 800ac76:	dcf2      	bgt.n	800ac5e <_printf_i+0x216>
 800ac78:	e7eb      	b.n	800ac52 <_printf_i+0x20a>
 800ac7a:	2500      	movs	r5, #0
 800ac7c:	f104 0619 	add.w	r6, r4, #25
 800ac80:	e7f5      	b.n	800ac6e <_printf_i+0x226>
 800ac82:	bf00      	nop
 800ac84:	0800d062 	.word	0x0800d062
 800ac88:	0800d073 	.word	0x0800d073

0800ac8c <std>:
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	b510      	push	{r4, lr}
 800ac90:	4604      	mov	r4, r0
 800ac92:	e9c0 3300 	strd	r3, r3, [r0]
 800ac96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac9a:	6083      	str	r3, [r0, #8]
 800ac9c:	8181      	strh	r1, [r0, #12]
 800ac9e:	6643      	str	r3, [r0, #100]	; 0x64
 800aca0:	81c2      	strh	r2, [r0, #14]
 800aca2:	6183      	str	r3, [r0, #24]
 800aca4:	4619      	mov	r1, r3
 800aca6:	2208      	movs	r2, #8
 800aca8:	305c      	adds	r0, #92	; 0x5c
 800acaa:	f000 f914 	bl	800aed6 <memset>
 800acae:	4b0d      	ldr	r3, [pc, #52]	; (800ace4 <std+0x58>)
 800acb0:	6263      	str	r3, [r4, #36]	; 0x24
 800acb2:	4b0d      	ldr	r3, [pc, #52]	; (800ace8 <std+0x5c>)
 800acb4:	62a3      	str	r3, [r4, #40]	; 0x28
 800acb6:	4b0d      	ldr	r3, [pc, #52]	; (800acec <std+0x60>)
 800acb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800acba:	4b0d      	ldr	r3, [pc, #52]	; (800acf0 <std+0x64>)
 800acbc:	6323      	str	r3, [r4, #48]	; 0x30
 800acbe:	4b0d      	ldr	r3, [pc, #52]	; (800acf4 <std+0x68>)
 800acc0:	6224      	str	r4, [r4, #32]
 800acc2:	429c      	cmp	r4, r3
 800acc4:	d006      	beq.n	800acd4 <std+0x48>
 800acc6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800acca:	4294      	cmp	r4, r2
 800accc:	d002      	beq.n	800acd4 <std+0x48>
 800acce:	33d0      	adds	r3, #208	; 0xd0
 800acd0:	429c      	cmp	r4, r3
 800acd2:	d105      	bne.n	800ace0 <std+0x54>
 800acd4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800acd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acdc:	f000 b978 	b.w	800afd0 <__retarget_lock_init_recursive>
 800ace0:	bd10      	pop	{r4, pc}
 800ace2:	bf00      	nop
 800ace4:	0800ae51 	.word	0x0800ae51
 800ace8:	0800ae73 	.word	0x0800ae73
 800acec:	0800aeab 	.word	0x0800aeab
 800acf0:	0800aecf 	.word	0x0800aecf
 800acf4:	2400038c 	.word	0x2400038c

0800acf8 <stdio_exit_handler>:
 800acf8:	4a02      	ldr	r2, [pc, #8]	; (800ad04 <stdio_exit_handler+0xc>)
 800acfa:	4903      	ldr	r1, [pc, #12]	; (800ad08 <stdio_exit_handler+0x10>)
 800acfc:	4803      	ldr	r0, [pc, #12]	; (800ad0c <stdio_exit_handler+0x14>)
 800acfe:	f000 b869 	b.w	800add4 <_fwalk_sglue>
 800ad02:	bf00      	nop
 800ad04:	24000010 	.word	0x24000010
 800ad08:	0800c875 	.word	0x0800c875
 800ad0c:	2400001c 	.word	0x2400001c

0800ad10 <cleanup_stdio>:
 800ad10:	6841      	ldr	r1, [r0, #4]
 800ad12:	4b0c      	ldr	r3, [pc, #48]	; (800ad44 <cleanup_stdio+0x34>)
 800ad14:	4299      	cmp	r1, r3
 800ad16:	b510      	push	{r4, lr}
 800ad18:	4604      	mov	r4, r0
 800ad1a:	d001      	beq.n	800ad20 <cleanup_stdio+0x10>
 800ad1c:	f001 fdaa 	bl	800c874 <_fflush_r>
 800ad20:	68a1      	ldr	r1, [r4, #8]
 800ad22:	4b09      	ldr	r3, [pc, #36]	; (800ad48 <cleanup_stdio+0x38>)
 800ad24:	4299      	cmp	r1, r3
 800ad26:	d002      	beq.n	800ad2e <cleanup_stdio+0x1e>
 800ad28:	4620      	mov	r0, r4
 800ad2a:	f001 fda3 	bl	800c874 <_fflush_r>
 800ad2e:	68e1      	ldr	r1, [r4, #12]
 800ad30:	4b06      	ldr	r3, [pc, #24]	; (800ad4c <cleanup_stdio+0x3c>)
 800ad32:	4299      	cmp	r1, r3
 800ad34:	d004      	beq.n	800ad40 <cleanup_stdio+0x30>
 800ad36:	4620      	mov	r0, r4
 800ad38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad3c:	f001 bd9a 	b.w	800c874 <_fflush_r>
 800ad40:	bd10      	pop	{r4, pc}
 800ad42:	bf00      	nop
 800ad44:	2400038c 	.word	0x2400038c
 800ad48:	240003f4 	.word	0x240003f4
 800ad4c:	2400045c 	.word	0x2400045c

0800ad50 <global_stdio_init.part.0>:
 800ad50:	b510      	push	{r4, lr}
 800ad52:	4b0b      	ldr	r3, [pc, #44]	; (800ad80 <global_stdio_init.part.0+0x30>)
 800ad54:	4c0b      	ldr	r4, [pc, #44]	; (800ad84 <global_stdio_init.part.0+0x34>)
 800ad56:	4a0c      	ldr	r2, [pc, #48]	; (800ad88 <global_stdio_init.part.0+0x38>)
 800ad58:	601a      	str	r2, [r3, #0]
 800ad5a:	4620      	mov	r0, r4
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	2104      	movs	r1, #4
 800ad60:	f7ff ff94 	bl	800ac8c <std>
 800ad64:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ad68:	2201      	movs	r2, #1
 800ad6a:	2109      	movs	r1, #9
 800ad6c:	f7ff ff8e 	bl	800ac8c <std>
 800ad70:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ad74:	2202      	movs	r2, #2
 800ad76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad7a:	2112      	movs	r1, #18
 800ad7c:	f7ff bf86 	b.w	800ac8c <std>
 800ad80:	240004c4 	.word	0x240004c4
 800ad84:	2400038c 	.word	0x2400038c
 800ad88:	0800acf9 	.word	0x0800acf9

0800ad8c <__sfp_lock_acquire>:
 800ad8c:	4801      	ldr	r0, [pc, #4]	; (800ad94 <__sfp_lock_acquire+0x8>)
 800ad8e:	f000 b920 	b.w	800afd2 <__retarget_lock_acquire_recursive>
 800ad92:	bf00      	nop
 800ad94:	240004cd 	.word	0x240004cd

0800ad98 <__sfp_lock_release>:
 800ad98:	4801      	ldr	r0, [pc, #4]	; (800ada0 <__sfp_lock_release+0x8>)
 800ad9a:	f000 b91b 	b.w	800afd4 <__retarget_lock_release_recursive>
 800ad9e:	bf00      	nop
 800ada0:	240004cd 	.word	0x240004cd

0800ada4 <__sinit>:
 800ada4:	b510      	push	{r4, lr}
 800ada6:	4604      	mov	r4, r0
 800ada8:	f7ff fff0 	bl	800ad8c <__sfp_lock_acquire>
 800adac:	6a23      	ldr	r3, [r4, #32]
 800adae:	b11b      	cbz	r3, 800adb8 <__sinit+0x14>
 800adb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adb4:	f7ff bff0 	b.w	800ad98 <__sfp_lock_release>
 800adb8:	4b04      	ldr	r3, [pc, #16]	; (800adcc <__sinit+0x28>)
 800adba:	6223      	str	r3, [r4, #32]
 800adbc:	4b04      	ldr	r3, [pc, #16]	; (800add0 <__sinit+0x2c>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d1f5      	bne.n	800adb0 <__sinit+0xc>
 800adc4:	f7ff ffc4 	bl	800ad50 <global_stdio_init.part.0>
 800adc8:	e7f2      	b.n	800adb0 <__sinit+0xc>
 800adca:	bf00      	nop
 800adcc:	0800ad11 	.word	0x0800ad11
 800add0:	240004c4 	.word	0x240004c4

0800add4 <_fwalk_sglue>:
 800add4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800add8:	4607      	mov	r7, r0
 800adda:	4688      	mov	r8, r1
 800addc:	4614      	mov	r4, r2
 800adde:	2600      	movs	r6, #0
 800ade0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ade4:	f1b9 0901 	subs.w	r9, r9, #1
 800ade8:	d505      	bpl.n	800adf6 <_fwalk_sglue+0x22>
 800adea:	6824      	ldr	r4, [r4, #0]
 800adec:	2c00      	cmp	r4, #0
 800adee:	d1f7      	bne.n	800ade0 <_fwalk_sglue+0xc>
 800adf0:	4630      	mov	r0, r6
 800adf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adf6:	89ab      	ldrh	r3, [r5, #12]
 800adf8:	2b01      	cmp	r3, #1
 800adfa:	d907      	bls.n	800ae0c <_fwalk_sglue+0x38>
 800adfc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae00:	3301      	adds	r3, #1
 800ae02:	d003      	beq.n	800ae0c <_fwalk_sglue+0x38>
 800ae04:	4629      	mov	r1, r5
 800ae06:	4638      	mov	r0, r7
 800ae08:	47c0      	blx	r8
 800ae0a:	4306      	orrs	r6, r0
 800ae0c:	3568      	adds	r5, #104	; 0x68
 800ae0e:	e7e9      	b.n	800ade4 <_fwalk_sglue+0x10>

0800ae10 <siprintf>:
 800ae10:	b40e      	push	{r1, r2, r3}
 800ae12:	b500      	push	{lr}
 800ae14:	b09c      	sub	sp, #112	; 0x70
 800ae16:	ab1d      	add	r3, sp, #116	; 0x74
 800ae18:	9002      	str	r0, [sp, #8]
 800ae1a:	9006      	str	r0, [sp, #24]
 800ae1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ae20:	4809      	ldr	r0, [pc, #36]	; (800ae48 <siprintf+0x38>)
 800ae22:	9107      	str	r1, [sp, #28]
 800ae24:	9104      	str	r1, [sp, #16]
 800ae26:	4909      	ldr	r1, [pc, #36]	; (800ae4c <siprintf+0x3c>)
 800ae28:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae2c:	9105      	str	r1, [sp, #20]
 800ae2e:	6800      	ldr	r0, [r0, #0]
 800ae30:	9301      	str	r3, [sp, #4]
 800ae32:	a902      	add	r1, sp, #8
 800ae34:	f001 fb9a 	bl	800c56c <_svfiprintf_r>
 800ae38:	9b02      	ldr	r3, [sp, #8]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	701a      	strb	r2, [r3, #0]
 800ae3e:	b01c      	add	sp, #112	; 0x70
 800ae40:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae44:	b003      	add	sp, #12
 800ae46:	4770      	bx	lr
 800ae48:	24000068 	.word	0x24000068
 800ae4c:	ffff0208 	.word	0xffff0208

0800ae50 <__sread>:
 800ae50:	b510      	push	{r4, lr}
 800ae52:	460c      	mov	r4, r1
 800ae54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae58:	f000 f86c 	bl	800af34 <_read_r>
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	bfab      	itete	ge
 800ae60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ae62:	89a3      	ldrhlt	r3, [r4, #12]
 800ae64:	181b      	addge	r3, r3, r0
 800ae66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ae6a:	bfac      	ite	ge
 800ae6c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ae6e:	81a3      	strhlt	r3, [r4, #12]
 800ae70:	bd10      	pop	{r4, pc}

0800ae72 <__swrite>:
 800ae72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae76:	461f      	mov	r7, r3
 800ae78:	898b      	ldrh	r3, [r1, #12]
 800ae7a:	05db      	lsls	r3, r3, #23
 800ae7c:	4605      	mov	r5, r0
 800ae7e:	460c      	mov	r4, r1
 800ae80:	4616      	mov	r6, r2
 800ae82:	d505      	bpl.n	800ae90 <__swrite+0x1e>
 800ae84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae88:	2302      	movs	r3, #2
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	f000 f840 	bl	800af10 <_lseek_r>
 800ae90:	89a3      	ldrh	r3, [r4, #12]
 800ae92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae9a:	81a3      	strh	r3, [r4, #12]
 800ae9c:	4632      	mov	r2, r6
 800ae9e:	463b      	mov	r3, r7
 800aea0:	4628      	mov	r0, r5
 800aea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aea6:	f000 b857 	b.w	800af58 <_write_r>

0800aeaa <__sseek>:
 800aeaa:	b510      	push	{r4, lr}
 800aeac:	460c      	mov	r4, r1
 800aeae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeb2:	f000 f82d 	bl	800af10 <_lseek_r>
 800aeb6:	1c43      	adds	r3, r0, #1
 800aeb8:	89a3      	ldrh	r3, [r4, #12]
 800aeba:	bf15      	itete	ne
 800aebc:	6560      	strne	r0, [r4, #84]	; 0x54
 800aebe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aec2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aec6:	81a3      	strheq	r3, [r4, #12]
 800aec8:	bf18      	it	ne
 800aeca:	81a3      	strhne	r3, [r4, #12]
 800aecc:	bd10      	pop	{r4, pc}

0800aece <__sclose>:
 800aece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aed2:	f000 b80d 	b.w	800aef0 <_close_r>

0800aed6 <memset>:
 800aed6:	4402      	add	r2, r0
 800aed8:	4603      	mov	r3, r0
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d100      	bne.n	800aee0 <memset+0xa>
 800aede:	4770      	bx	lr
 800aee0:	f803 1b01 	strb.w	r1, [r3], #1
 800aee4:	e7f9      	b.n	800aeda <memset+0x4>
	...

0800aee8 <_localeconv_r>:
 800aee8:	4800      	ldr	r0, [pc, #0]	; (800aeec <_localeconv_r+0x4>)
 800aeea:	4770      	bx	lr
 800aeec:	2400015c 	.word	0x2400015c

0800aef0 <_close_r>:
 800aef0:	b538      	push	{r3, r4, r5, lr}
 800aef2:	4d06      	ldr	r5, [pc, #24]	; (800af0c <_close_r+0x1c>)
 800aef4:	2300      	movs	r3, #0
 800aef6:	4604      	mov	r4, r0
 800aef8:	4608      	mov	r0, r1
 800aefa:	602b      	str	r3, [r5, #0]
 800aefc:	f7f6 f8df 	bl	80010be <_close>
 800af00:	1c43      	adds	r3, r0, #1
 800af02:	d102      	bne.n	800af0a <_close_r+0x1a>
 800af04:	682b      	ldr	r3, [r5, #0]
 800af06:	b103      	cbz	r3, 800af0a <_close_r+0x1a>
 800af08:	6023      	str	r3, [r4, #0]
 800af0a:	bd38      	pop	{r3, r4, r5, pc}
 800af0c:	240004c8 	.word	0x240004c8

0800af10 <_lseek_r>:
 800af10:	b538      	push	{r3, r4, r5, lr}
 800af12:	4d07      	ldr	r5, [pc, #28]	; (800af30 <_lseek_r+0x20>)
 800af14:	4604      	mov	r4, r0
 800af16:	4608      	mov	r0, r1
 800af18:	4611      	mov	r1, r2
 800af1a:	2200      	movs	r2, #0
 800af1c:	602a      	str	r2, [r5, #0]
 800af1e:	461a      	mov	r2, r3
 800af20:	f7f6 f8f4 	bl	800110c <_lseek>
 800af24:	1c43      	adds	r3, r0, #1
 800af26:	d102      	bne.n	800af2e <_lseek_r+0x1e>
 800af28:	682b      	ldr	r3, [r5, #0]
 800af2a:	b103      	cbz	r3, 800af2e <_lseek_r+0x1e>
 800af2c:	6023      	str	r3, [r4, #0]
 800af2e:	bd38      	pop	{r3, r4, r5, pc}
 800af30:	240004c8 	.word	0x240004c8

0800af34 <_read_r>:
 800af34:	b538      	push	{r3, r4, r5, lr}
 800af36:	4d07      	ldr	r5, [pc, #28]	; (800af54 <_read_r+0x20>)
 800af38:	4604      	mov	r4, r0
 800af3a:	4608      	mov	r0, r1
 800af3c:	4611      	mov	r1, r2
 800af3e:	2200      	movs	r2, #0
 800af40:	602a      	str	r2, [r5, #0]
 800af42:	461a      	mov	r2, r3
 800af44:	f7f6 f882 	bl	800104c <_read>
 800af48:	1c43      	adds	r3, r0, #1
 800af4a:	d102      	bne.n	800af52 <_read_r+0x1e>
 800af4c:	682b      	ldr	r3, [r5, #0]
 800af4e:	b103      	cbz	r3, 800af52 <_read_r+0x1e>
 800af50:	6023      	str	r3, [r4, #0]
 800af52:	bd38      	pop	{r3, r4, r5, pc}
 800af54:	240004c8 	.word	0x240004c8

0800af58 <_write_r>:
 800af58:	b538      	push	{r3, r4, r5, lr}
 800af5a:	4d07      	ldr	r5, [pc, #28]	; (800af78 <_write_r+0x20>)
 800af5c:	4604      	mov	r4, r0
 800af5e:	4608      	mov	r0, r1
 800af60:	4611      	mov	r1, r2
 800af62:	2200      	movs	r2, #0
 800af64:	602a      	str	r2, [r5, #0]
 800af66:	461a      	mov	r2, r3
 800af68:	f7f6 f88d 	bl	8001086 <_write>
 800af6c:	1c43      	adds	r3, r0, #1
 800af6e:	d102      	bne.n	800af76 <_write_r+0x1e>
 800af70:	682b      	ldr	r3, [r5, #0]
 800af72:	b103      	cbz	r3, 800af76 <_write_r+0x1e>
 800af74:	6023      	str	r3, [r4, #0]
 800af76:	bd38      	pop	{r3, r4, r5, pc}
 800af78:	240004c8 	.word	0x240004c8

0800af7c <__errno>:
 800af7c:	4b01      	ldr	r3, [pc, #4]	; (800af84 <__errno+0x8>)
 800af7e:	6818      	ldr	r0, [r3, #0]
 800af80:	4770      	bx	lr
 800af82:	bf00      	nop
 800af84:	24000068 	.word	0x24000068

0800af88 <__libc_init_array>:
 800af88:	b570      	push	{r4, r5, r6, lr}
 800af8a:	4d0d      	ldr	r5, [pc, #52]	; (800afc0 <__libc_init_array+0x38>)
 800af8c:	4c0d      	ldr	r4, [pc, #52]	; (800afc4 <__libc_init_array+0x3c>)
 800af8e:	1b64      	subs	r4, r4, r5
 800af90:	10a4      	asrs	r4, r4, #2
 800af92:	2600      	movs	r6, #0
 800af94:	42a6      	cmp	r6, r4
 800af96:	d109      	bne.n	800afac <__libc_init_array+0x24>
 800af98:	4d0b      	ldr	r5, [pc, #44]	; (800afc8 <__libc_init_array+0x40>)
 800af9a:	4c0c      	ldr	r4, [pc, #48]	; (800afcc <__libc_init_array+0x44>)
 800af9c:	f002 f80e 	bl	800cfbc <_init>
 800afa0:	1b64      	subs	r4, r4, r5
 800afa2:	10a4      	asrs	r4, r4, #2
 800afa4:	2600      	movs	r6, #0
 800afa6:	42a6      	cmp	r6, r4
 800afa8:	d105      	bne.n	800afb6 <__libc_init_array+0x2e>
 800afaa:	bd70      	pop	{r4, r5, r6, pc}
 800afac:	f855 3b04 	ldr.w	r3, [r5], #4
 800afb0:	4798      	blx	r3
 800afb2:	3601      	adds	r6, #1
 800afb4:	e7ee      	b.n	800af94 <__libc_init_array+0xc>
 800afb6:	f855 3b04 	ldr.w	r3, [r5], #4
 800afba:	4798      	blx	r3
 800afbc:	3601      	adds	r6, #1
 800afbe:	e7f2      	b.n	800afa6 <__libc_init_array+0x1e>
 800afc0:	0800d3cc 	.word	0x0800d3cc
 800afc4:	0800d3cc 	.word	0x0800d3cc
 800afc8:	0800d3cc 	.word	0x0800d3cc
 800afcc:	0800d3d0 	.word	0x0800d3d0

0800afd0 <__retarget_lock_init_recursive>:
 800afd0:	4770      	bx	lr

0800afd2 <__retarget_lock_acquire_recursive>:
 800afd2:	4770      	bx	lr

0800afd4 <__retarget_lock_release_recursive>:
 800afd4:	4770      	bx	lr

0800afd6 <quorem>:
 800afd6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afda:	6903      	ldr	r3, [r0, #16]
 800afdc:	690c      	ldr	r4, [r1, #16]
 800afde:	42a3      	cmp	r3, r4
 800afe0:	4607      	mov	r7, r0
 800afe2:	db7e      	blt.n	800b0e2 <quorem+0x10c>
 800afe4:	3c01      	subs	r4, #1
 800afe6:	f101 0814 	add.w	r8, r1, #20
 800afea:	f100 0514 	add.w	r5, r0, #20
 800afee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aff2:	9301      	str	r3, [sp, #4]
 800aff4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aff8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800affc:	3301      	adds	r3, #1
 800affe:	429a      	cmp	r2, r3
 800b000:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b004:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b008:	fbb2 f6f3 	udiv	r6, r2, r3
 800b00c:	d331      	bcc.n	800b072 <quorem+0x9c>
 800b00e:	f04f 0e00 	mov.w	lr, #0
 800b012:	4640      	mov	r0, r8
 800b014:	46ac      	mov	ip, r5
 800b016:	46f2      	mov	sl, lr
 800b018:	f850 2b04 	ldr.w	r2, [r0], #4
 800b01c:	b293      	uxth	r3, r2
 800b01e:	fb06 e303 	mla	r3, r6, r3, lr
 800b022:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b026:	0c1a      	lsrs	r2, r3, #16
 800b028:	b29b      	uxth	r3, r3
 800b02a:	ebaa 0303 	sub.w	r3, sl, r3
 800b02e:	f8dc a000 	ldr.w	sl, [ip]
 800b032:	fa13 f38a 	uxtah	r3, r3, sl
 800b036:	fb06 220e 	mla	r2, r6, lr, r2
 800b03a:	9300      	str	r3, [sp, #0]
 800b03c:	9b00      	ldr	r3, [sp, #0]
 800b03e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b042:	b292      	uxth	r2, r2
 800b044:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b048:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b04c:	f8bd 3000 	ldrh.w	r3, [sp]
 800b050:	4581      	cmp	r9, r0
 800b052:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b056:	f84c 3b04 	str.w	r3, [ip], #4
 800b05a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b05e:	d2db      	bcs.n	800b018 <quorem+0x42>
 800b060:	f855 300b 	ldr.w	r3, [r5, fp]
 800b064:	b92b      	cbnz	r3, 800b072 <quorem+0x9c>
 800b066:	9b01      	ldr	r3, [sp, #4]
 800b068:	3b04      	subs	r3, #4
 800b06a:	429d      	cmp	r5, r3
 800b06c:	461a      	mov	r2, r3
 800b06e:	d32c      	bcc.n	800b0ca <quorem+0xf4>
 800b070:	613c      	str	r4, [r7, #16]
 800b072:	4638      	mov	r0, r7
 800b074:	f001 f920 	bl	800c2b8 <__mcmp>
 800b078:	2800      	cmp	r0, #0
 800b07a:	db22      	blt.n	800b0c2 <quorem+0xec>
 800b07c:	3601      	adds	r6, #1
 800b07e:	4629      	mov	r1, r5
 800b080:	2000      	movs	r0, #0
 800b082:	f858 2b04 	ldr.w	r2, [r8], #4
 800b086:	f8d1 c000 	ldr.w	ip, [r1]
 800b08a:	b293      	uxth	r3, r2
 800b08c:	1ac3      	subs	r3, r0, r3
 800b08e:	0c12      	lsrs	r2, r2, #16
 800b090:	fa13 f38c 	uxtah	r3, r3, ip
 800b094:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b098:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b09c:	b29b      	uxth	r3, r3
 800b09e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b0a2:	45c1      	cmp	r9, r8
 800b0a4:	f841 3b04 	str.w	r3, [r1], #4
 800b0a8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b0ac:	d2e9      	bcs.n	800b082 <quorem+0xac>
 800b0ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b0b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b0b6:	b922      	cbnz	r2, 800b0c2 <quorem+0xec>
 800b0b8:	3b04      	subs	r3, #4
 800b0ba:	429d      	cmp	r5, r3
 800b0bc:	461a      	mov	r2, r3
 800b0be:	d30a      	bcc.n	800b0d6 <quorem+0x100>
 800b0c0:	613c      	str	r4, [r7, #16]
 800b0c2:	4630      	mov	r0, r6
 800b0c4:	b003      	add	sp, #12
 800b0c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ca:	6812      	ldr	r2, [r2, #0]
 800b0cc:	3b04      	subs	r3, #4
 800b0ce:	2a00      	cmp	r2, #0
 800b0d0:	d1ce      	bne.n	800b070 <quorem+0x9a>
 800b0d2:	3c01      	subs	r4, #1
 800b0d4:	e7c9      	b.n	800b06a <quorem+0x94>
 800b0d6:	6812      	ldr	r2, [r2, #0]
 800b0d8:	3b04      	subs	r3, #4
 800b0da:	2a00      	cmp	r2, #0
 800b0dc:	d1f0      	bne.n	800b0c0 <quorem+0xea>
 800b0de:	3c01      	subs	r4, #1
 800b0e0:	e7eb      	b.n	800b0ba <quorem+0xe4>
 800b0e2:	2000      	movs	r0, #0
 800b0e4:	e7ee      	b.n	800b0c4 <quorem+0xee>
	...

0800b0e8 <_dtoa_r>:
 800b0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0ec:	ed2d 8b02 	vpush	{d8}
 800b0f0:	69c5      	ldr	r5, [r0, #28]
 800b0f2:	b091      	sub	sp, #68	; 0x44
 800b0f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b0f8:	ec59 8b10 	vmov	r8, r9, d0
 800b0fc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800b0fe:	9106      	str	r1, [sp, #24]
 800b100:	4606      	mov	r6, r0
 800b102:	9208      	str	r2, [sp, #32]
 800b104:	930c      	str	r3, [sp, #48]	; 0x30
 800b106:	b975      	cbnz	r5, 800b126 <_dtoa_r+0x3e>
 800b108:	2010      	movs	r0, #16
 800b10a:	f000 fda5 	bl	800bc58 <malloc>
 800b10e:	4602      	mov	r2, r0
 800b110:	61f0      	str	r0, [r6, #28]
 800b112:	b920      	cbnz	r0, 800b11e <_dtoa_r+0x36>
 800b114:	4ba6      	ldr	r3, [pc, #664]	; (800b3b0 <_dtoa_r+0x2c8>)
 800b116:	21ef      	movs	r1, #239	; 0xef
 800b118:	48a6      	ldr	r0, [pc, #664]	; (800b3b4 <_dtoa_r+0x2cc>)
 800b11a:	f001 fc0b 	bl	800c934 <__assert_func>
 800b11e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b122:	6005      	str	r5, [r0, #0]
 800b124:	60c5      	str	r5, [r0, #12]
 800b126:	69f3      	ldr	r3, [r6, #28]
 800b128:	6819      	ldr	r1, [r3, #0]
 800b12a:	b151      	cbz	r1, 800b142 <_dtoa_r+0x5a>
 800b12c:	685a      	ldr	r2, [r3, #4]
 800b12e:	604a      	str	r2, [r1, #4]
 800b130:	2301      	movs	r3, #1
 800b132:	4093      	lsls	r3, r2
 800b134:	608b      	str	r3, [r1, #8]
 800b136:	4630      	mov	r0, r6
 800b138:	f000 fe82 	bl	800be40 <_Bfree>
 800b13c:	69f3      	ldr	r3, [r6, #28]
 800b13e:	2200      	movs	r2, #0
 800b140:	601a      	str	r2, [r3, #0]
 800b142:	f1b9 0300 	subs.w	r3, r9, #0
 800b146:	bfbb      	ittet	lt
 800b148:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b14c:	9303      	strlt	r3, [sp, #12]
 800b14e:	2300      	movge	r3, #0
 800b150:	2201      	movlt	r2, #1
 800b152:	bfac      	ite	ge
 800b154:	6023      	strge	r3, [r4, #0]
 800b156:	6022      	strlt	r2, [r4, #0]
 800b158:	4b97      	ldr	r3, [pc, #604]	; (800b3b8 <_dtoa_r+0x2d0>)
 800b15a:	9c03      	ldr	r4, [sp, #12]
 800b15c:	43a3      	bics	r3, r4
 800b15e:	d11c      	bne.n	800b19a <_dtoa_r+0xb2>
 800b160:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b162:	f242 730f 	movw	r3, #9999	; 0x270f
 800b166:	6013      	str	r3, [r2, #0]
 800b168:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800b16c:	ea53 0308 	orrs.w	r3, r3, r8
 800b170:	f000 84fb 	beq.w	800bb6a <_dtoa_r+0xa82>
 800b174:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b176:	b963      	cbnz	r3, 800b192 <_dtoa_r+0xaa>
 800b178:	4b90      	ldr	r3, [pc, #576]	; (800b3bc <_dtoa_r+0x2d4>)
 800b17a:	e020      	b.n	800b1be <_dtoa_r+0xd6>
 800b17c:	4b90      	ldr	r3, [pc, #576]	; (800b3c0 <_dtoa_r+0x2d8>)
 800b17e:	9301      	str	r3, [sp, #4]
 800b180:	3308      	adds	r3, #8
 800b182:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b184:	6013      	str	r3, [r2, #0]
 800b186:	9801      	ldr	r0, [sp, #4]
 800b188:	b011      	add	sp, #68	; 0x44
 800b18a:	ecbd 8b02 	vpop	{d8}
 800b18e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b192:	4b8a      	ldr	r3, [pc, #552]	; (800b3bc <_dtoa_r+0x2d4>)
 800b194:	9301      	str	r3, [sp, #4]
 800b196:	3303      	adds	r3, #3
 800b198:	e7f3      	b.n	800b182 <_dtoa_r+0x9a>
 800b19a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800b19e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b1a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1a6:	d10c      	bne.n	800b1c2 <_dtoa_r+0xda>
 800b1a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	6013      	str	r3, [r2, #0]
 800b1ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	f000 84d7 	beq.w	800bb64 <_dtoa_r+0xa7c>
 800b1b6:	4b83      	ldr	r3, [pc, #524]	; (800b3c4 <_dtoa_r+0x2dc>)
 800b1b8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b1ba:	6013      	str	r3, [r2, #0]
 800b1bc:	3b01      	subs	r3, #1
 800b1be:	9301      	str	r3, [sp, #4]
 800b1c0:	e7e1      	b.n	800b186 <_dtoa_r+0x9e>
 800b1c2:	aa0e      	add	r2, sp, #56	; 0x38
 800b1c4:	a90f      	add	r1, sp, #60	; 0x3c
 800b1c6:	4630      	mov	r0, r6
 800b1c8:	eeb0 0b48 	vmov.f64	d0, d8
 800b1cc:	f001 f91a 	bl	800c404 <__d2b>
 800b1d0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800b1d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b1d6:	4605      	mov	r5, r0
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d046      	beq.n	800b26a <_dtoa_r+0x182>
 800b1dc:	eeb0 7b48 	vmov.f64	d7, d8
 800b1e0:	ee18 1a90 	vmov	r1, s17
 800b1e4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b1e8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800b1ec:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b1f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b1f4:	2000      	movs	r0, #0
 800b1f6:	ee07 1a90 	vmov	s15, r1
 800b1fa:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800b1fe:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800b398 <_dtoa_r+0x2b0>
 800b202:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b206:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800b3a0 <_dtoa_r+0x2b8>
 800b20a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b20e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800b3a8 <_dtoa_r+0x2c0>
 800b212:	ee07 3a90 	vmov	s15, r3
 800b216:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800b21a:	eeb0 7b46 	vmov.f64	d7, d6
 800b21e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800b222:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b226:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b22a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b22e:	ee16 ba90 	vmov	fp, s13
 800b232:	9009      	str	r0, [sp, #36]	; 0x24
 800b234:	d508      	bpl.n	800b248 <_dtoa_r+0x160>
 800b236:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b23a:	eeb4 6b47 	vcmp.f64	d6, d7
 800b23e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b242:	bf18      	it	ne
 800b244:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 800b248:	f1bb 0f16 	cmp.w	fp, #22
 800b24c:	d82b      	bhi.n	800b2a6 <_dtoa_r+0x1be>
 800b24e:	495e      	ldr	r1, [pc, #376]	; (800b3c8 <_dtoa_r+0x2e0>)
 800b250:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800b254:	ed91 7b00 	vldr	d7, [r1]
 800b258:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b25c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b260:	d501      	bpl.n	800b266 <_dtoa_r+0x17e>
 800b262:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b266:	2100      	movs	r1, #0
 800b268:	e01e      	b.n	800b2a8 <_dtoa_r+0x1c0>
 800b26a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b26c:	4413      	add	r3, r2
 800b26e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800b272:	2920      	cmp	r1, #32
 800b274:	bfc1      	itttt	gt
 800b276:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800b27a:	408c      	lslgt	r4, r1
 800b27c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800b280:	fa28 f101 	lsrgt.w	r1, r8, r1
 800b284:	bfd6      	itet	le
 800b286:	f1c1 0120 	rsble	r1, r1, #32
 800b28a:	4321      	orrgt	r1, r4
 800b28c:	fa08 f101 	lslle.w	r1, r8, r1
 800b290:	ee07 1a90 	vmov	s15, r1
 800b294:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b298:	3b01      	subs	r3, #1
 800b29a:	ee17 1a90 	vmov	r1, s15
 800b29e:	2001      	movs	r0, #1
 800b2a0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800b2a4:	e7a7      	b.n	800b1f6 <_dtoa_r+0x10e>
 800b2a6:	2101      	movs	r1, #1
 800b2a8:	1ad2      	subs	r2, r2, r3
 800b2aa:	1e53      	subs	r3, r2, #1
 800b2ac:	9305      	str	r3, [sp, #20]
 800b2ae:	bf45      	ittet	mi
 800b2b0:	f1c2 0301 	rsbmi	r3, r2, #1
 800b2b4:	9304      	strmi	r3, [sp, #16]
 800b2b6:	2300      	movpl	r3, #0
 800b2b8:	2300      	movmi	r3, #0
 800b2ba:	bf4c      	ite	mi
 800b2bc:	9305      	strmi	r3, [sp, #20]
 800b2be:	9304      	strpl	r3, [sp, #16]
 800b2c0:	f1bb 0f00 	cmp.w	fp, #0
 800b2c4:	910b      	str	r1, [sp, #44]	; 0x2c
 800b2c6:	db18      	blt.n	800b2fa <_dtoa_r+0x212>
 800b2c8:	9b05      	ldr	r3, [sp, #20]
 800b2ca:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800b2ce:	445b      	add	r3, fp
 800b2d0:	9305      	str	r3, [sp, #20]
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	9a06      	ldr	r2, [sp, #24]
 800b2d6:	2a09      	cmp	r2, #9
 800b2d8:	d848      	bhi.n	800b36c <_dtoa_r+0x284>
 800b2da:	2a05      	cmp	r2, #5
 800b2dc:	bfc4      	itt	gt
 800b2de:	3a04      	subgt	r2, #4
 800b2e0:	9206      	strgt	r2, [sp, #24]
 800b2e2:	9a06      	ldr	r2, [sp, #24]
 800b2e4:	f1a2 0202 	sub.w	r2, r2, #2
 800b2e8:	bfcc      	ite	gt
 800b2ea:	2400      	movgt	r4, #0
 800b2ec:	2401      	movle	r4, #1
 800b2ee:	2a03      	cmp	r2, #3
 800b2f0:	d847      	bhi.n	800b382 <_dtoa_r+0x29a>
 800b2f2:	e8df f002 	tbb	[pc, r2]
 800b2f6:	2d0b      	.short	0x2d0b
 800b2f8:	392b      	.short	0x392b
 800b2fa:	9b04      	ldr	r3, [sp, #16]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	eba3 030b 	sub.w	r3, r3, fp
 800b302:	9304      	str	r3, [sp, #16]
 800b304:	920a      	str	r2, [sp, #40]	; 0x28
 800b306:	f1cb 0300 	rsb	r3, fp, #0
 800b30a:	e7e3      	b.n	800b2d4 <_dtoa_r+0x1ec>
 800b30c:	2200      	movs	r2, #0
 800b30e:	9207      	str	r2, [sp, #28]
 800b310:	9a08      	ldr	r2, [sp, #32]
 800b312:	2a00      	cmp	r2, #0
 800b314:	dc38      	bgt.n	800b388 <_dtoa_r+0x2a0>
 800b316:	f04f 0a01 	mov.w	sl, #1
 800b31a:	46d1      	mov	r9, sl
 800b31c:	4652      	mov	r2, sl
 800b31e:	f8cd a020 	str.w	sl, [sp, #32]
 800b322:	69f7      	ldr	r7, [r6, #28]
 800b324:	2100      	movs	r1, #0
 800b326:	2004      	movs	r0, #4
 800b328:	f100 0c14 	add.w	ip, r0, #20
 800b32c:	4594      	cmp	ip, r2
 800b32e:	d930      	bls.n	800b392 <_dtoa_r+0x2aa>
 800b330:	6079      	str	r1, [r7, #4]
 800b332:	4630      	mov	r0, r6
 800b334:	930d      	str	r3, [sp, #52]	; 0x34
 800b336:	f000 fd43 	bl	800bdc0 <_Balloc>
 800b33a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b33c:	9001      	str	r0, [sp, #4]
 800b33e:	4602      	mov	r2, r0
 800b340:	2800      	cmp	r0, #0
 800b342:	d145      	bne.n	800b3d0 <_dtoa_r+0x2e8>
 800b344:	4b21      	ldr	r3, [pc, #132]	; (800b3cc <_dtoa_r+0x2e4>)
 800b346:	f240 11af 	movw	r1, #431	; 0x1af
 800b34a:	e6e5      	b.n	800b118 <_dtoa_r+0x30>
 800b34c:	2201      	movs	r2, #1
 800b34e:	e7de      	b.n	800b30e <_dtoa_r+0x226>
 800b350:	2200      	movs	r2, #0
 800b352:	9207      	str	r2, [sp, #28]
 800b354:	9a08      	ldr	r2, [sp, #32]
 800b356:	eb0b 0a02 	add.w	sl, fp, r2
 800b35a:	f10a 0901 	add.w	r9, sl, #1
 800b35e:	464a      	mov	r2, r9
 800b360:	2a01      	cmp	r2, #1
 800b362:	bfb8      	it	lt
 800b364:	2201      	movlt	r2, #1
 800b366:	e7dc      	b.n	800b322 <_dtoa_r+0x23a>
 800b368:	2201      	movs	r2, #1
 800b36a:	e7f2      	b.n	800b352 <_dtoa_r+0x26a>
 800b36c:	2401      	movs	r4, #1
 800b36e:	2200      	movs	r2, #0
 800b370:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800b374:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b378:	2100      	movs	r1, #0
 800b37a:	46d1      	mov	r9, sl
 800b37c:	2212      	movs	r2, #18
 800b37e:	9108      	str	r1, [sp, #32]
 800b380:	e7cf      	b.n	800b322 <_dtoa_r+0x23a>
 800b382:	2201      	movs	r2, #1
 800b384:	9207      	str	r2, [sp, #28]
 800b386:	e7f5      	b.n	800b374 <_dtoa_r+0x28c>
 800b388:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b38c:	46d1      	mov	r9, sl
 800b38e:	4652      	mov	r2, sl
 800b390:	e7c7      	b.n	800b322 <_dtoa_r+0x23a>
 800b392:	3101      	adds	r1, #1
 800b394:	0040      	lsls	r0, r0, #1
 800b396:	e7c7      	b.n	800b328 <_dtoa_r+0x240>
 800b398:	636f4361 	.word	0x636f4361
 800b39c:	3fd287a7 	.word	0x3fd287a7
 800b3a0:	8b60c8b3 	.word	0x8b60c8b3
 800b3a4:	3fc68a28 	.word	0x3fc68a28
 800b3a8:	509f79fb 	.word	0x509f79fb
 800b3ac:	3fd34413 	.word	0x3fd34413
 800b3b0:	0800d091 	.word	0x0800d091
 800b3b4:	0800d0a8 	.word	0x0800d0a8
 800b3b8:	7ff00000 	.word	0x7ff00000
 800b3bc:	0800d08d 	.word	0x0800d08d
 800b3c0:	0800d084 	.word	0x0800d084
 800b3c4:	0800d061 	.word	0x0800d061
 800b3c8:	0800d198 	.word	0x0800d198
 800b3cc:	0800d100 	.word	0x0800d100
 800b3d0:	69f2      	ldr	r2, [r6, #28]
 800b3d2:	9901      	ldr	r1, [sp, #4]
 800b3d4:	6011      	str	r1, [r2, #0]
 800b3d6:	f1b9 0f0e 	cmp.w	r9, #14
 800b3da:	d86c      	bhi.n	800b4b6 <_dtoa_r+0x3ce>
 800b3dc:	2c00      	cmp	r4, #0
 800b3de:	d06a      	beq.n	800b4b6 <_dtoa_r+0x3ce>
 800b3e0:	f1bb 0f00 	cmp.w	fp, #0
 800b3e4:	f340 80a0 	ble.w	800b528 <_dtoa_r+0x440>
 800b3e8:	4ac1      	ldr	r2, [pc, #772]	; (800b6f0 <_dtoa_r+0x608>)
 800b3ea:	f00b 010f 	and.w	r1, fp, #15
 800b3ee:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b3f2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b3f6:	ed92 7b00 	vldr	d7, [r2]
 800b3fa:	ea4f 122b 	mov.w	r2, fp, asr #4
 800b3fe:	f000 8087 	beq.w	800b510 <_dtoa_r+0x428>
 800b402:	49bc      	ldr	r1, [pc, #752]	; (800b6f4 <_dtoa_r+0x60c>)
 800b404:	ed91 6b08 	vldr	d6, [r1, #32]
 800b408:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800b40c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b410:	f002 020f 	and.w	r2, r2, #15
 800b414:	2103      	movs	r1, #3
 800b416:	48b7      	ldr	r0, [pc, #732]	; (800b6f4 <_dtoa_r+0x60c>)
 800b418:	2a00      	cmp	r2, #0
 800b41a:	d17b      	bne.n	800b514 <_dtoa_r+0x42c>
 800b41c:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b420:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b424:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b428:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b42a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b42e:	2a00      	cmp	r2, #0
 800b430:	f000 80a0 	beq.w	800b574 <_dtoa_r+0x48c>
 800b434:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800b438:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b43c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b440:	f140 8098 	bpl.w	800b574 <_dtoa_r+0x48c>
 800b444:	f1b9 0f00 	cmp.w	r9, #0
 800b448:	f000 8094 	beq.w	800b574 <_dtoa_r+0x48c>
 800b44c:	f1ba 0f00 	cmp.w	sl, #0
 800b450:	dd2f      	ble.n	800b4b2 <_dtoa_r+0x3ca>
 800b452:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800b456:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b45a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b45e:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800b462:	3101      	adds	r1, #1
 800b464:	4654      	mov	r4, sl
 800b466:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b46a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800b46e:	ee07 1a90 	vmov	s15, r1
 800b472:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b476:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b47a:	ee15 7a90 	vmov	r7, s11
 800b47e:	ec51 0b15 	vmov	r0, r1, d5
 800b482:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800b486:	2c00      	cmp	r4, #0
 800b488:	d177      	bne.n	800b57a <_dtoa_r+0x492>
 800b48a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b48e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b492:	ec41 0b17 	vmov	d7, r0, r1
 800b496:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b49a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b49e:	f300 826a 	bgt.w	800b976 <_dtoa_r+0x88e>
 800b4a2:	eeb1 7b47 	vneg.f64	d7, d7
 800b4a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b4aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4ae:	f100 8260 	bmi.w	800b972 <_dtoa_r+0x88a>
 800b4b2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b4b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b4b8:	2a00      	cmp	r2, #0
 800b4ba:	f2c0 811d 	blt.w	800b6f8 <_dtoa_r+0x610>
 800b4be:	f1bb 0f0e 	cmp.w	fp, #14
 800b4c2:	f300 8119 	bgt.w	800b6f8 <_dtoa_r+0x610>
 800b4c6:	4b8a      	ldr	r3, [pc, #552]	; (800b6f0 <_dtoa_r+0x608>)
 800b4c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b4cc:	ed93 6b00 	vldr	d6, [r3]
 800b4d0:	9b08      	ldr	r3, [sp, #32]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	f280 80b7 	bge.w	800b646 <_dtoa_r+0x55e>
 800b4d8:	f1b9 0f00 	cmp.w	r9, #0
 800b4dc:	f300 80b3 	bgt.w	800b646 <_dtoa_r+0x55e>
 800b4e0:	f040 8246 	bne.w	800b970 <_dtoa_r+0x888>
 800b4e4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b4e8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b4ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b4f0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b4f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4f8:	464c      	mov	r4, r9
 800b4fa:	464f      	mov	r7, r9
 800b4fc:	f280 821c 	bge.w	800b938 <_dtoa_r+0x850>
 800b500:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b504:	2331      	movs	r3, #49	; 0x31
 800b506:	f808 3b01 	strb.w	r3, [r8], #1
 800b50a:	f10b 0b01 	add.w	fp, fp, #1
 800b50e:	e218      	b.n	800b942 <_dtoa_r+0x85a>
 800b510:	2102      	movs	r1, #2
 800b512:	e780      	b.n	800b416 <_dtoa_r+0x32e>
 800b514:	07d4      	lsls	r4, r2, #31
 800b516:	d504      	bpl.n	800b522 <_dtoa_r+0x43a>
 800b518:	ed90 6b00 	vldr	d6, [r0]
 800b51c:	3101      	adds	r1, #1
 800b51e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b522:	1052      	asrs	r2, r2, #1
 800b524:	3008      	adds	r0, #8
 800b526:	e777      	b.n	800b418 <_dtoa_r+0x330>
 800b528:	d022      	beq.n	800b570 <_dtoa_r+0x488>
 800b52a:	f1cb 0200 	rsb	r2, fp, #0
 800b52e:	4970      	ldr	r1, [pc, #448]	; (800b6f0 <_dtoa_r+0x608>)
 800b530:	f002 000f 	and.w	r0, r2, #15
 800b534:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b538:	ed91 7b00 	vldr	d7, [r1]
 800b53c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b540:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b544:	486b      	ldr	r0, [pc, #428]	; (800b6f4 <_dtoa_r+0x60c>)
 800b546:	1112      	asrs	r2, r2, #4
 800b548:	2400      	movs	r4, #0
 800b54a:	2102      	movs	r1, #2
 800b54c:	b92a      	cbnz	r2, 800b55a <_dtoa_r+0x472>
 800b54e:	2c00      	cmp	r4, #0
 800b550:	f43f af6a 	beq.w	800b428 <_dtoa_r+0x340>
 800b554:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b558:	e766      	b.n	800b428 <_dtoa_r+0x340>
 800b55a:	07d7      	lsls	r7, r2, #31
 800b55c:	d505      	bpl.n	800b56a <_dtoa_r+0x482>
 800b55e:	ed90 6b00 	vldr	d6, [r0]
 800b562:	3101      	adds	r1, #1
 800b564:	2401      	movs	r4, #1
 800b566:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b56a:	1052      	asrs	r2, r2, #1
 800b56c:	3008      	adds	r0, #8
 800b56e:	e7ed      	b.n	800b54c <_dtoa_r+0x464>
 800b570:	2102      	movs	r1, #2
 800b572:	e759      	b.n	800b428 <_dtoa_r+0x340>
 800b574:	465a      	mov	r2, fp
 800b576:	464c      	mov	r4, r9
 800b578:	e775      	b.n	800b466 <_dtoa_r+0x37e>
 800b57a:	ec41 0b17 	vmov	d7, r0, r1
 800b57e:	495c      	ldr	r1, [pc, #368]	; (800b6f0 <_dtoa_r+0x608>)
 800b580:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800b584:	ed11 4b02 	vldr	d4, [r1, #-8]
 800b588:	9901      	ldr	r1, [sp, #4]
 800b58a:	440c      	add	r4, r1
 800b58c:	9907      	ldr	r1, [sp, #28]
 800b58e:	b351      	cbz	r1, 800b5e6 <_dtoa_r+0x4fe>
 800b590:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800b594:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800b598:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b59c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b5a0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b5a4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b5a8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b5ac:	ee14 1a90 	vmov	r1, s9
 800b5b0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b5b4:	3130      	adds	r1, #48	; 0x30
 800b5b6:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b5ba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b5be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5c2:	f808 1b01 	strb.w	r1, [r8], #1
 800b5c6:	d439      	bmi.n	800b63c <_dtoa_r+0x554>
 800b5c8:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b5cc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b5d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5d4:	d472      	bmi.n	800b6bc <_dtoa_r+0x5d4>
 800b5d6:	45a0      	cmp	r8, r4
 800b5d8:	f43f af6b 	beq.w	800b4b2 <_dtoa_r+0x3ca>
 800b5dc:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b5e0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b5e4:	e7e0      	b.n	800b5a8 <_dtoa_r+0x4c0>
 800b5e6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b5ea:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b5ee:	4620      	mov	r0, r4
 800b5f0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b5f4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b5f8:	ee14 1a90 	vmov	r1, s9
 800b5fc:	3130      	adds	r1, #48	; 0x30
 800b5fe:	f808 1b01 	strb.w	r1, [r8], #1
 800b602:	45a0      	cmp	r8, r4
 800b604:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b608:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b60c:	d118      	bne.n	800b640 <_dtoa_r+0x558>
 800b60e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b612:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b616:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b61a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b61e:	dc4d      	bgt.n	800b6bc <_dtoa_r+0x5d4>
 800b620:	ee35 5b47 	vsub.f64	d5, d5, d7
 800b624:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800b628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b62c:	f57f af41 	bpl.w	800b4b2 <_dtoa_r+0x3ca>
 800b630:	4680      	mov	r8, r0
 800b632:	3801      	subs	r0, #1
 800b634:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800b638:	2b30      	cmp	r3, #48	; 0x30
 800b63a:	d0f9      	beq.n	800b630 <_dtoa_r+0x548>
 800b63c:	4693      	mov	fp, r2
 800b63e:	e02a      	b.n	800b696 <_dtoa_r+0x5ae>
 800b640:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b644:	e7d6      	b.n	800b5f4 <_dtoa_r+0x50c>
 800b646:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b64a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800b64e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b652:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b656:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b65a:	ee15 3a10 	vmov	r3, s10
 800b65e:	3330      	adds	r3, #48	; 0x30
 800b660:	f808 3b01 	strb.w	r3, [r8], #1
 800b664:	9b01      	ldr	r3, [sp, #4]
 800b666:	eba8 0303 	sub.w	r3, r8, r3
 800b66a:	4599      	cmp	r9, r3
 800b66c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b670:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b674:	d133      	bne.n	800b6de <_dtoa_r+0x5f6>
 800b676:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b67a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b67e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b682:	dc1a      	bgt.n	800b6ba <_dtoa_r+0x5d2>
 800b684:	eeb4 7b46 	vcmp.f64	d7, d6
 800b688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b68c:	d103      	bne.n	800b696 <_dtoa_r+0x5ae>
 800b68e:	ee15 3a10 	vmov	r3, s10
 800b692:	07d9      	lsls	r1, r3, #31
 800b694:	d411      	bmi.n	800b6ba <_dtoa_r+0x5d2>
 800b696:	4629      	mov	r1, r5
 800b698:	4630      	mov	r0, r6
 800b69a:	f000 fbd1 	bl	800be40 <_Bfree>
 800b69e:	2300      	movs	r3, #0
 800b6a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b6a2:	f888 3000 	strb.w	r3, [r8]
 800b6a6:	f10b 0301 	add.w	r3, fp, #1
 800b6aa:	6013      	str	r3, [r2, #0]
 800b6ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	f43f ad69 	beq.w	800b186 <_dtoa_r+0x9e>
 800b6b4:	f8c3 8000 	str.w	r8, [r3]
 800b6b8:	e565      	b.n	800b186 <_dtoa_r+0x9e>
 800b6ba:	465a      	mov	r2, fp
 800b6bc:	4643      	mov	r3, r8
 800b6be:	4698      	mov	r8, r3
 800b6c0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800b6c4:	2939      	cmp	r1, #57	; 0x39
 800b6c6:	d106      	bne.n	800b6d6 <_dtoa_r+0x5ee>
 800b6c8:	9901      	ldr	r1, [sp, #4]
 800b6ca:	4299      	cmp	r1, r3
 800b6cc:	d1f7      	bne.n	800b6be <_dtoa_r+0x5d6>
 800b6ce:	9801      	ldr	r0, [sp, #4]
 800b6d0:	2130      	movs	r1, #48	; 0x30
 800b6d2:	3201      	adds	r2, #1
 800b6d4:	7001      	strb	r1, [r0, #0]
 800b6d6:	7819      	ldrb	r1, [r3, #0]
 800b6d8:	3101      	adds	r1, #1
 800b6da:	7019      	strb	r1, [r3, #0]
 800b6dc:	e7ae      	b.n	800b63c <_dtoa_r+0x554>
 800b6de:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b6e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b6e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6ea:	d1b2      	bne.n	800b652 <_dtoa_r+0x56a>
 800b6ec:	e7d3      	b.n	800b696 <_dtoa_r+0x5ae>
 800b6ee:	bf00      	nop
 800b6f0:	0800d198 	.word	0x0800d198
 800b6f4:	0800d170 	.word	0x0800d170
 800b6f8:	9907      	ldr	r1, [sp, #28]
 800b6fa:	2900      	cmp	r1, #0
 800b6fc:	f000 80d0 	beq.w	800b8a0 <_dtoa_r+0x7b8>
 800b700:	9906      	ldr	r1, [sp, #24]
 800b702:	2901      	cmp	r1, #1
 800b704:	f300 80b4 	bgt.w	800b870 <_dtoa_r+0x788>
 800b708:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b70a:	2900      	cmp	r1, #0
 800b70c:	f000 80ac 	beq.w	800b868 <_dtoa_r+0x780>
 800b710:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b714:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b718:	461c      	mov	r4, r3
 800b71a:	9309      	str	r3, [sp, #36]	; 0x24
 800b71c:	9b04      	ldr	r3, [sp, #16]
 800b71e:	4413      	add	r3, r2
 800b720:	9304      	str	r3, [sp, #16]
 800b722:	9b05      	ldr	r3, [sp, #20]
 800b724:	2101      	movs	r1, #1
 800b726:	4413      	add	r3, r2
 800b728:	4630      	mov	r0, r6
 800b72a:	9305      	str	r3, [sp, #20]
 800b72c:	f000 fc3e 	bl	800bfac <__i2b>
 800b730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b732:	4607      	mov	r7, r0
 800b734:	f1b8 0f00 	cmp.w	r8, #0
 800b738:	d00d      	beq.n	800b756 <_dtoa_r+0x66e>
 800b73a:	9a05      	ldr	r2, [sp, #20]
 800b73c:	2a00      	cmp	r2, #0
 800b73e:	dd0a      	ble.n	800b756 <_dtoa_r+0x66e>
 800b740:	4542      	cmp	r2, r8
 800b742:	9904      	ldr	r1, [sp, #16]
 800b744:	bfa8      	it	ge
 800b746:	4642      	movge	r2, r8
 800b748:	1a89      	subs	r1, r1, r2
 800b74a:	9104      	str	r1, [sp, #16]
 800b74c:	9905      	ldr	r1, [sp, #20]
 800b74e:	eba8 0802 	sub.w	r8, r8, r2
 800b752:	1a8a      	subs	r2, r1, r2
 800b754:	9205      	str	r2, [sp, #20]
 800b756:	b303      	cbz	r3, 800b79a <_dtoa_r+0x6b2>
 800b758:	9a07      	ldr	r2, [sp, #28]
 800b75a:	2a00      	cmp	r2, #0
 800b75c:	f000 80a5 	beq.w	800b8aa <_dtoa_r+0x7c2>
 800b760:	2c00      	cmp	r4, #0
 800b762:	dd13      	ble.n	800b78c <_dtoa_r+0x6a4>
 800b764:	4639      	mov	r1, r7
 800b766:	4622      	mov	r2, r4
 800b768:	4630      	mov	r0, r6
 800b76a:	930d      	str	r3, [sp, #52]	; 0x34
 800b76c:	f000 fcde 	bl	800c12c <__pow5mult>
 800b770:	462a      	mov	r2, r5
 800b772:	4601      	mov	r1, r0
 800b774:	4607      	mov	r7, r0
 800b776:	4630      	mov	r0, r6
 800b778:	f000 fc2e 	bl	800bfd8 <__multiply>
 800b77c:	4629      	mov	r1, r5
 800b77e:	9009      	str	r0, [sp, #36]	; 0x24
 800b780:	4630      	mov	r0, r6
 800b782:	f000 fb5d 	bl	800be40 <_Bfree>
 800b786:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b788:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b78a:	4615      	mov	r5, r2
 800b78c:	1b1a      	subs	r2, r3, r4
 800b78e:	d004      	beq.n	800b79a <_dtoa_r+0x6b2>
 800b790:	4629      	mov	r1, r5
 800b792:	4630      	mov	r0, r6
 800b794:	f000 fcca 	bl	800c12c <__pow5mult>
 800b798:	4605      	mov	r5, r0
 800b79a:	2101      	movs	r1, #1
 800b79c:	4630      	mov	r0, r6
 800b79e:	f000 fc05 	bl	800bfac <__i2b>
 800b7a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	4604      	mov	r4, r0
 800b7a8:	f340 8081 	ble.w	800b8ae <_dtoa_r+0x7c6>
 800b7ac:	461a      	mov	r2, r3
 800b7ae:	4601      	mov	r1, r0
 800b7b0:	4630      	mov	r0, r6
 800b7b2:	f000 fcbb 	bl	800c12c <__pow5mult>
 800b7b6:	9b06      	ldr	r3, [sp, #24]
 800b7b8:	2b01      	cmp	r3, #1
 800b7ba:	4604      	mov	r4, r0
 800b7bc:	dd7a      	ble.n	800b8b4 <_dtoa_r+0x7cc>
 800b7be:	2300      	movs	r3, #0
 800b7c0:	9309      	str	r3, [sp, #36]	; 0x24
 800b7c2:	6922      	ldr	r2, [r4, #16]
 800b7c4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b7c8:	6910      	ldr	r0, [r2, #16]
 800b7ca:	f000 fba1 	bl	800bf10 <__hi0bits>
 800b7ce:	f1c0 0020 	rsb	r0, r0, #32
 800b7d2:	9b05      	ldr	r3, [sp, #20]
 800b7d4:	4418      	add	r0, r3
 800b7d6:	f010 001f 	ands.w	r0, r0, #31
 800b7da:	f000 8093 	beq.w	800b904 <_dtoa_r+0x81c>
 800b7de:	f1c0 0220 	rsb	r2, r0, #32
 800b7e2:	2a04      	cmp	r2, #4
 800b7e4:	f340 8085 	ble.w	800b8f2 <_dtoa_r+0x80a>
 800b7e8:	9b04      	ldr	r3, [sp, #16]
 800b7ea:	f1c0 001c 	rsb	r0, r0, #28
 800b7ee:	4403      	add	r3, r0
 800b7f0:	9304      	str	r3, [sp, #16]
 800b7f2:	9b05      	ldr	r3, [sp, #20]
 800b7f4:	4480      	add	r8, r0
 800b7f6:	4403      	add	r3, r0
 800b7f8:	9305      	str	r3, [sp, #20]
 800b7fa:	9b04      	ldr	r3, [sp, #16]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	dd05      	ble.n	800b80c <_dtoa_r+0x724>
 800b800:	4629      	mov	r1, r5
 800b802:	461a      	mov	r2, r3
 800b804:	4630      	mov	r0, r6
 800b806:	f000 fceb 	bl	800c1e0 <__lshift>
 800b80a:	4605      	mov	r5, r0
 800b80c:	9b05      	ldr	r3, [sp, #20]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	dd05      	ble.n	800b81e <_dtoa_r+0x736>
 800b812:	4621      	mov	r1, r4
 800b814:	461a      	mov	r2, r3
 800b816:	4630      	mov	r0, r6
 800b818:	f000 fce2 	bl	800c1e0 <__lshift>
 800b81c:	4604      	mov	r4, r0
 800b81e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b820:	2b00      	cmp	r3, #0
 800b822:	d071      	beq.n	800b908 <_dtoa_r+0x820>
 800b824:	4621      	mov	r1, r4
 800b826:	4628      	mov	r0, r5
 800b828:	f000 fd46 	bl	800c2b8 <__mcmp>
 800b82c:	2800      	cmp	r0, #0
 800b82e:	da6b      	bge.n	800b908 <_dtoa_r+0x820>
 800b830:	2300      	movs	r3, #0
 800b832:	4629      	mov	r1, r5
 800b834:	220a      	movs	r2, #10
 800b836:	4630      	mov	r0, r6
 800b838:	f000 fb24 	bl	800be84 <__multadd>
 800b83c:	9b07      	ldr	r3, [sp, #28]
 800b83e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b842:	4605      	mov	r5, r0
 800b844:	2b00      	cmp	r3, #0
 800b846:	f000 8197 	beq.w	800bb78 <_dtoa_r+0xa90>
 800b84a:	4639      	mov	r1, r7
 800b84c:	2300      	movs	r3, #0
 800b84e:	220a      	movs	r2, #10
 800b850:	4630      	mov	r0, r6
 800b852:	f000 fb17 	bl	800be84 <__multadd>
 800b856:	f1ba 0f00 	cmp.w	sl, #0
 800b85a:	4607      	mov	r7, r0
 800b85c:	f300 8093 	bgt.w	800b986 <_dtoa_r+0x89e>
 800b860:	9b06      	ldr	r3, [sp, #24]
 800b862:	2b02      	cmp	r3, #2
 800b864:	dc57      	bgt.n	800b916 <_dtoa_r+0x82e>
 800b866:	e08e      	b.n	800b986 <_dtoa_r+0x89e>
 800b868:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b86a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b86e:	e751      	b.n	800b714 <_dtoa_r+0x62c>
 800b870:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 800b874:	42a3      	cmp	r3, r4
 800b876:	bfbf      	itttt	lt
 800b878:	1ae2      	sublt	r2, r4, r3
 800b87a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b87c:	189b      	addlt	r3, r3, r2
 800b87e:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b880:	bfae      	itee	ge
 800b882:	1b1c      	subge	r4, r3, r4
 800b884:	4623      	movlt	r3, r4
 800b886:	2400      	movlt	r4, #0
 800b888:	f1b9 0f00 	cmp.w	r9, #0
 800b88c:	bfb5      	itete	lt
 800b88e:	9a04      	ldrlt	r2, [sp, #16]
 800b890:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800b894:	eba2 0809 	sublt.w	r8, r2, r9
 800b898:	464a      	movge	r2, r9
 800b89a:	bfb8      	it	lt
 800b89c:	2200      	movlt	r2, #0
 800b89e:	e73c      	b.n	800b71a <_dtoa_r+0x632>
 800b8a0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b8a4:	9f07      	ldr	r7, [sp, #28]
 800b8a6:	461c      	mov	r4, r3
 800b8a8:	e744      	b.n	800b734 <_dtoa_r+0x64c>
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	e770      	b.n	800b790 <_dtoa_r+0x6a8>
 800b8ae:	9b06      	ldr	r3, [sp, #24]
 800b8b0:	2b01      	cmp	r3, #1
 800b8b2:	dc18      	bgt.n	800b8e6 <_dtoa_r+0x7fe>
 800b8b4:	9b02      	ldr	r3, [sp, #8]
 800b8b6:	b9b3      	cbnz	r3, 800b8e6 <_dtoa_r+0x7fe>
 800b8b8:	9b03      	ldr	r3, [sp, #12]
 800b8ba:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b8be:	b9a2      	cbnz	r2, 800b8ea <_dtoa_r+0x802>
 800b8c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b8c4:	0d12      	lsrs	r2, r2, #20
 800b8c6:	0512      	lsls	r2, r2, #20
 800b8c8:	b18a      	cbz	r2, 800b8ee <_dtoa_r+0x806>
 800b8ca:	9b04      	ldr	r3, [sp, #16]
 800b8cc:	3301      	adds	r3, #1
 800b8ce:	9304      	str	r3, [sp, #16]
 800b8d0:	9b05      	ldr	r3, [sp, #20]
 800b8d2:	3301      	adds	r3, #1
 800b8d4:	9305      	str	r3, [sp, #20]
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	9309      	str	r3, [sp, #36]	; 0x24
 800b8da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	f47f af70 	bne.w	800b7c2 <_dtoa_r+0x6da>
 800b8e2:	2001      	movs	r0, #1
 800b8e4:	e775      	b.n	800b7d2 <_dtoa_r+0x6ea>
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	e7f6      	b.n	800b8d8 <_dtoa_r+0x7f0>
 800b8ea:	9b02      	ldr	r3, [sp, #8]
 800b8ec:	e7f4      	b.n	800b8d8 <_dtoa_r+0x7f0>
 800b8ee:	9209      	str	r2, [sp, #36]	; 0x24
 800b8f0:	e7f3      	b.n	800b8da <_dtoa_r+0x7f2>
 800b8f2:	d082      	beq.n	800b7fa <_dtoa_r+0x712>
 800b8f4:	9b04      	ldr	r3, [sp, #16]
 800b8f6:	321c      	adds	r2, #28
 800b8f8:	4413      	add	r3, r2
 800b8fa:	9304      	str	r3, [sp, #16]
 800b8fc:	9b05      	ldr	r3, [sp, #20]
 800b8fe:	4490      	add	r8, r2
 800b900:	4413      	add	r3, r2
 800b902:	e779      	b.n	800b7f8 <_dtoa_r+0x710>
 800b904:	4602      	mov	r2, r0
 800b906:	e7f5      	b.n	800b8f4 <_dtoa_r+0x80c>
 800b908:	f1b9 0f00 	cmp.w	r9, #0
 800b90c:	dc36      	bgt.n	800b97c <_dtoa_r+0x894>
 800b90e:	9b06      	ldr	r3, [sp, #24]
 800b910:	2b02      	cmp	r3, #2
 800b912:	dd33      	ble.n	800b97c <_dtoa_r+0x894>
 800b914:	46ca      	mov	sl, r9
 800b916:	f1ba 0f00 	cmp.w	sl, #0
 800b91a:	d10d      	bne.n	800b938 <_dtoa_r+0x850>
 800b91c:	4621      	mov	r1, r4
 800b91e:	4653      	mov	r3, sl
 800b920:	2205      	movs	r2, #5
 800b922:	4630      	mov	r0, r6
 800b924:	f000 faae 	bl	800be84 <__multadd>
 800b928:	4601      	mov	r1, r0
 800b92a:	4604      	mov	r4, r0
 800b92c:	4628      	mov	r0, r5
 800b92e:	f000 fcc3 	bl	800c2b8 <__mcmp>
 800b932:	2800      	cmp	r0, #0
 800b934:	f73f ade4 	bgt.w	800b500 <_dtoa_r+0x418>
 800b938:	9b08      	ldr	r3, [sp, #32]
 800b93a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b93e:	ea6f 0b03 	mvn.w	fp, r3
 800b942:	f04f 0900 	mov.w	r9, #0
 800b946:	4621      	mov	r1, r4
 800b948:	4630      	mov	r0, r6
 800b94a:	f000 fa79 	bl	800be40 <_Bfree>
 800b94e:	2f00      	cmp	r7, #0
 800b950:	f43f aea1 	beq.w	800b696 <_dtoa_r+0x5ae>
 800b954:	f1b9 0f00 	cmp.w	r9, #0
 800b958:	d005      	beq.n	800b966 <_dtoa_r+0x87e>
 800b95a:	45b9      	cmp	r9, r7
 800b95c:	d003      	beq.n	800b966 <_dtoa_r+0x87e>
 800b95e:	4649      	mov	r1, r9
 800b960:	4630      	mov	r0, r6
 800b962:	f000 fa6d 	bl	800be40 <_Bfree>
 800b966:	4639      	mov	r1, r7
 800b968:	4630      	mov	r0, r6
 800b96a:	f000 fa69 	bl	800be40 <_Bfree>
 800b96e:	e692      	b.n	800b696 <_dtoa_r+0x5ae>
 800b970:	2400      	movs	r4, #0
 800b972:	4627      	mov	r7, r4
 800b974:	e7e0      	b.n	800b938 <_dtoa_r+0x850>
 800b976:	4693      	mov	fp, r2
 800b978:	4627      	mov	r7, r4
 800b97a:	e5c1      	b.n	800b500 <_dtoa_r+0x418>
 800b97c:	9b07      	ldr	r3, [sp, #28]
 800b97e:	46ca      	mov	sl, r9
 800b980:	2b00      	cmp	r3, #0
 800b982:	f000 8100 	beq.w	800bb86 <_dtoa_r+0xa9e>
 800b986:	f1b8 0f00 	cmp.w	r8, #0
 800b98a:	dd05      	ble.n	800b998 <_dtoa_r+0x8b0>
 800b98c:	4639      	mov	r1, r7
 800b98e:	4642      	mov	r2, r8
 800b990:	4630      	mov	r0, r6
 800b992:	f000 fc25 	bl	800c1e0 <__lshift>
 800b996:	4607      	mov	r7, r0
 800b998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d05d      	beq.n	800ba5a <_dtoa_r+0x972>
 800b99e:	6879      	ldr	r1, [r7, #4]
 800b9a0:	4630      	mov	r0, r6
 800b9a2:	f000 fa0d 	bl	800bdc0 <_Balloc>
 800b9a6:	4680      	mov	r8, r0
 800b9a8:	b928      	cbnz	r0, 800b9b6 <_dtoa_r+0x8ce>
 800b9aa:	4b82      	ldr	r3, [pc, #520]	; (800bbb4 <_dtoa_r+0xacc>)
 800b9ac:	4602      	mov	r2, r0
 800b9ae:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b9b2:	f7ff bbb1 	b.w	800b118 <_dtoa_r+0x30>
 800b9b6:	693a      	ldr	r2, [r7, #16]
 800b9b8:	3202      	adds	r2, #2
 800b9ba:	0092      	lsls	r2, r2, #2
 800b9bc:	f107 010c 	add.w	r1, r7, #12
 800b9c0:	300c      	adds	r0, #12
 800b9c2:	f000 ffa9 	bl	800c918 <memcpy>
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	4641      	mov	r1, r8
 800b9ca:	4630      	mov	r0, r6
 800b9cc:	f000 fc08 	bl	800c1e0 <__lshift>
 800b9d0:	9b01      	ldr	r3, [sp, #4]
 800b9d2:	3301      	adds	r3, #1
 800b9d4:	9304      	str	r3, [sp, #16]
 800b9d6:	9b01      	ldr	r3, [sp, #4]
 800b9d8:	4453      	add	r3, sl
 800b9da:	9308      	str	r3, [sp, #32]
 800b9dc:	9b02      	ldr	r3, [sp, #8]
 800b9de:	f003 0301 	and.w	r3, r3, #1
 800b9e2:	46b9      	mov	r9, r7
 800b9e4:	9307      	str	r3, [sp, #28]
 800b9e6:	4607      	mov	r7, r0
 800b9e8:	9b04      	ldr	r3, [sp, #16]
 800b9ea:	4621      	mov	r1, r4
 800b9ec:	3b01      	subs	r3, #1
 800b9ee:	4628      	mov	r0, r5
 800b9f0:	9302      	str	r3, [sp, #8]
 800b9f2:	f7ff faf0 	bl	800afd6 <quorem>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	3330      	adds	r3, #48	; 0x30
 800b9fa:	9005      	str	r0, [sp, #20]
 800b9fc:	4649      	mov	r1, r9
 800b9fe:	4628      	mov	r0, r5
 800ba00:	9309      	str	r3, [sp, #36]	; 0x24
 800ba02:	f000 fc59 	bl	800c2b8 <__mcmp>
 800ba06:	463a      	mov	r2, r7
 800ba08:	4682      	mov	sl, r0
 800ba0a:	4621      	mov	r1, r4
 800ba0c:	4630      	mov	r0, r6
 800ba0e:	f000 fc6f 	bl	800c2f0 <__mdiff>
 800ba12:	68c2      	ldr	r2, [r0, #12]
 800ba14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba16:	4680      	mov	r8, r0
 800ba18:	bb0a      	cbnz	r2, 800ba5e <_dtoa_r+0x976>
 800ba1a:	4601      	mov	r1, r0
 800ba1c:	4628      	mov	r0, r5
 800ba1e:	f000 fc4b 	bl	800c2b8 <__mcmp>
 800ba22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba24:	4602      	mov	r2, r0
 800ba26:	4641      	mov	r1, r8
 800ba28:	4630      	mov	r0, r6
 800ba2a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800ba2e:	f000 fa07 	bl	800be40 <_Bfree>
 800ba32:	9b06      	ldr	r3, [sp, #24]
 800ba34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba36:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ba3a:	ea43 0102 	orr.w	r1, r3, r2
 800ba3e:	9b07      	ldr	r3, [sp, #28]
 800ba40:	4319      	orrs	r1, r3
 800ba42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba44:	d10d      	bne.n	800ba62 <_dtoa_r+0x97a>
 800ba46:	2b39      	cmp	r3, #57	; 0x39
 800ba48:	d029      	beq.n	800ba9e <_dtoa_r+0x9b6>
 800ba4a:	f1ba 0f00 	cmp.w	sl, #0
 800ba4e:	dd01      	ble.n	800ba54 <_dtoa_r+0x96c>
 800ba50:	9b05      	ldr	r3, [sp, #20]
 800ba52:	3331      	adds	r3, #49	; 0x31
 800ba54:	9a02      	ldr	r2, [sp, #8]
 800ba56:	7013      	strb	r3, [r2, #0]
 800ba58:	e775      	b.n	800b946 <_dtoa_r+0x85e>
 800ba5a:	4638      	mov	r0, r7
 800ba5c:	e7b8      	b.n	800b9d0 <_dtoa_r+0x8e8>
 800ba5e:	2201      	movs	r2, #1
 800ba60:	e7e1      	b.n	800ba26 <_dtoa_r+0x93e>
 800ba62:	f1ba 0f00 	cmp.w	sl, #0
 800ba66:	db06      	blt.n	800ba76 <_dtoa_r+0x98e>
 800ba68:	9906      	ldr	r1, [sp, #24]
 800ba6a:	ea41 0a0a 	orr.w	sl, r1, sl
 800ba6e:	9907      	ldr	r1, [sp, #28]
 800ba70:	ea5a 0a01 	orrs.w	sl, sl, r1
 800ba74:	d120      	bne.n	800bab8 <_dtoa_r+0x9d0>
 800ba76:	2a00      	cmp	r2, #0
 800ba78:	ddec      	ble.n	800ba54 <_dtoa_r+0x96c>
 800ba7a:	4629      	mov	r1, r5
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	4630      	mov	r0, r6
 800ba80:	9304      	str	r3, [sp, #16]
 800ba82:	f000 fbad 	bl	800c1e0 <__lshift>
 800ba86:	4621      	mov	r1, r4
 800ba88:	4605      	mov	r5, r0
 800ba8a:	f000 fc15 	bl	800c2b8 <__mcmp>
 800ba8e:	2800      	cmp	r0, #0
 800ba90:	9b04      	ldr	r3, [sp, #16]
 800ba92:	dc02      	bgt.n	800ba9a <_dtoa_r+0x9b2>
 800ba94:	d1de      	bne.n	800ba54 <_dtoa_r+0x96c>
 800ba96:	07da      	lsls	r2, r3, #31
 800ba98:	d5dc      	bpl.n	800ba54 <_dtoa_r+0x96c>
 800ba9a:	2b39      	cmp	r3, #57	; 0x39
 800ba9c:	d1d8      	bne.n	800ba50 <_dtoa_r+0x968>
 800ba9e:	9a02      	ldr	r2, [sp, #8]
 800baa0:	2339      	movs	r3, #57	; 0x39
 800baa2:	7013      	strb	r3, [r2, #0]
 800baa4:	4643      	mov	r3, r8
 800baa6:	4698      	mov	r8, r3
 800baa8:	3b01      	subs	r3, #1
 800baaa:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800baae:	2a39      	cmp	r2, #57	; 0x39
 800bab0:	d051      	beq.n	800bb56 <_dtoa_r+0xa6e>
 800bab2:	3201      	adds	r2, #1
 800bab4:	701a      	strb	r2, [r3, #0]
 800bab6:	e746      	b.n	800b946 <_dtoa_r+0x85e>
 800bab8:	2a00      	cmp	r2, #0
 800baba:	dd03      	ble.n	800bac4 <_dtoa_r+0x9dc>
 800babc:	2b39      	cmp	r3, #57	; 0x39
 800babe:	d0ee      	beq.n	800ba9e <_dtoa_r+0x9b6>
 800bac0:	3301      	adds	r3, #1
 800bac2:	e7c7      	b.n	800ba54 <_dtoa_r+0x96c>
 800bac4:	9a04      	ldr	r2, [sp, #16]
 800bac6:	9908      	ldr	r1, [sp, #32]
 800bac8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bacc:	428a      	cmp	r2, r1
 800bace:	d02b      	beq.n	800bb28 <_dtoa_r+0xa40>
 800bad0:	4629      	mov	r1, r5
 800bad2:	2300      	movs	r3, #0
 800bad4:	220a      	movs	r2, #10
 800bad6:	4630      	mov	r0, r6
 800bad8:	f000 f9d4 	bl	800be84 <__multadd>
 800badc:	45b9      	cmp	r9, r7
 800bade:	4605      	mov	r5, r0
 800bae0:	f04f 0300 	mov.w	r3, #0
 800bae4:	f04f 020a 	mov.w	r2, #10
 800bae8:	4649      	mov	r1, r9
 800baea:	4630      	mov	r0, r6
 800baec:	d107      	bne.n	800bafe <_dtoa_r+0xa16>
 800baee:	f000 f9c9 	bl	800be84 <__multadd>
 800baf2:	4681      	mov	r9, r0
 800baf4:	4607      	mov	r7, r0
 800baf6:	9b04      	ldr	r3, [sp, #16]
 800baf8:	3301      	adds	r3, #1
 800bafa:	9304      	str	r3, [sp, #16]
 800bafc:	e774      	b.n	800b9e8 <_dtoa_r+0x900>
 800bafe:	f000 f9c1 	bl	800be84 <__multadd>
 800bb02:	4639      	mov	r1, r7
 800bb04:	4681      	mov	r9, r0
 800bb06:	2300      	movs	r3, #0
 800bb08:	220a      	movs	r2, #10
 800bb0a:	4630      	mov	r0, r6
 800bb0c:	f000 f9ba 	bl	800be84 <__multadd>
 800bb10:	4607      	mov	r7, r0
 800bb12:	e7f0      	b.n	800baf6 <_dtoa_r+0xa0e>
 800bb14:	f1ba 0f00 	cmp.w	sl, #0
 800bb18:	9a01      	ldr	r2, [sp, #4]
 800bb1a:	bfcc      	ite	gt
 800bb1c:	46d0      	movgt	r8, sl
 800bb1e:	f04f 0801 	movle.w	r8, #1
 800bb22:	4490      	add	r8, r2
 800bb24:	f04f 0900 	mov.w	r9, #0
 800bb28:	4629      	mov	r1, r5
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	4630      	mov	r0, r6
 800bb2e:	9302      	str	r3, [sp, #8]
 800bb30:	f000 fb56 	bl	800c1e0 <__lshift>
 800bb34:	4621      	mov	r1, r4
 800bb36:	4605      	mov	r5, r0
 800bb38:	f000 fbbe 	bl	800c2b8 <__mcmp>
 800bb3c:	2800      	cmp	r0, #0
 800bb3e:	dcb1      	bgt.n	800baa4 <_dtoa_r+0x9bc>
 800bb40:	d102      	bne.n	800bb48 <_dtoa_r+0xa60>
 800bb42:	9b02      	ldr	r3, [sp, #8]
 800bb44:	07db      	lsls	r3, r3, #31
 800bb46:	d4ad      	bmi.n	800baa4 <_dtoa_r+0x9bc>
 800bb48:	4643      	mov	r3, r8
 800bb4a:	4698      	mov	r8, r3
 800bb4c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb50:	2a30      	cmp	r2, #48	; 0x30
 800bb52:	d0fa      	beq.n	800bb4a <_dtoa_r+0xa62>
 800bb54:	e6f7      	b.n	800b946 <_dtoa_r+0x85e>
 800bb56:	9a01      	ldr	r2, [sp, #4]
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	d1a4      	bne.n	800baa6 <_dtoa_r+0x9be>
 800bb5c:	f10b 0b01 	add.w	fp, fp, #1
 800bb60:	2331      	movs	r3, #49	; 0x31
 800bb62:	e778      	b.n	800ba56 <_dtoa_r+0x96e>
 800bb64:	4b14      	ldr	r3, [pc, #80]	; (800bbb8 <_dtoa_r+0xad0>)
 800bb66:	f7ff bb2a 	b.w	800b1be <_dtoa_r+0xd6>
 800bb6a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	f47f ab05 	bne.w	800b17c <_dtoa_r+0x94>
 800bb72:	4b12      	ldr	r3, [pc, #72]	; (800bbbc <_dtoa_r+0xad4>)
 800bb74:	f7ff bb23 	b.w	800b1be <_dtoa_r+0xd6>
 800bb78:	f1ba 0f00 	cmp.w	sl, #0
 800bb7c:	dc03      	bgt.n	800bb86 <_dtoa_r+0xa9e>
 800bb7e:	9b06      	ldr	r3, [sp, #24]
 800bb80:	2b02      	cmp	r3, #2
 800bb82:	f73f aec8 	bgt.w	800b916 <_dtoa_r+0x82e>
 800bb86:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bb8a:	4621      	mov	r1, r4
 800bb8c:	4628      	mov	r0, r5
 800bb8e:	f7ff fa22 	bl	800afd6 <quorem>
 800bb92:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800bb96:	f808 3b01 	strb.w	r3, [r8], #1
 800bb9a:	9a01      	ldr	r2, [sp, #4]
 800bb9c:	eba8 0202 	sub.w	r2, r8, r2
 800bba0:	4592      	cmp	sl, r2
 800bba2:	ddb7      	ble.n	800bb14 <_dtoa_r+0xa2c>
 800bba4:	4629      	mov	r1, r5
 800bba6:	2300      	movs	r3, #0
 800bba8:	220a      	movs	r2, #10
 800bbaa:	4630      	mov	r0, r6
 800bbac:	f000 f96a 	bl	800be84 <__multadd>
 800bbb0:	4605      	mov	r5, r0
 800bbb2:	e7ea      	b.n	800bb8a <_dtoa_r+0xaa2>
 800bbb4:	0800d100 	.word	0x0800d100
 800bbb8:	0800d060 	.word	0x0800d060
 800bbbc:	0800d084 	.word	0x0800d084

0800bbc0 <_free_r>:
 800bbc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bbc2:	2900      	cmp	r1, #0
 800bbc4:	d044      	beq.n	800bc50 <_free_r+0x90>
 800bbc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbca:	9001      	str	r0, [sp, #4]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	f1a1 0404 	sub.w	r4, r1, #4
 800bbd2:	bfb8      	it	lt
 800bbd4:	18e4      	addlt	r4, r4, r3
 800bbd6:	f000 f8e7 	bl	800bda8 <__malloc_lock>
 800bbda:	4a1e      	ldr	r2, [pc, #120]	; (800bc54 <_free_r+0x94>)
 800bbdc:	9801      	ldr	r0, [sp, #4]
 800bbde:	6813      	ldr	r3, [r2, #0]
 800bbe0:	b933      	cbnz	r3, 800bbf0 <_free_r+0x30>
 800bbe2:	6063      	str	r3, [r4, #4]
 800bbe4:	6014      	str	r4, [r2, #0]
 800bbe6:	b003      	add	sp, #12
 800bbe8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bbec:	f000 b8e2 	b.w	800bdb4 <__malloc_unlock>
 800bbf0:	42a3      	cmp	r3, r4
 800bbf2:	d908      	bls.n	800bc06 <_free_r+0x46>
 800bbf4:	6825      	ldr	r5, [r4, #0]
 800bbf6:	1961      	adds	r1, r4, r5
 800bbf8:	428b      	cmp	r3, r1
 800bbfa:	bf01      	itttt	eq
 800bbfc:	6819      	ldreq	r1, [r3, #0]
 800bbfe:	685b      	ldreq	r3, [r3, #4]
 800bc00:	1949      	addeq	r1, r1, r5
 800bc02:	6021      	streq	r1, [r4, #0]
 800bc04:	e7ed      	b.n	800bbe2 <_free_r+0x22>
 800bc06:	461a      	mov	r2, r3
 800bc08:	685b      	ldr	r3, [r3, #4]
 800bc0a:	b10b      	cbz	r3, 800bc10 <_free_r+0x50>
 800bc0c:	42a3      	cmp	r3, r4
 800bc0e:	d9fa      	bls.n	800bc06 <_free_r+0x46>
 800bc10:	6811      	ldr	r1, [r2, #0]
 800bc12:	1855      	adds	r5, r2, r1
 800bc14:	42a5      	cmp	r5, r4
 800bc16:	d10b      	bne.n	800bc30 <_free_r+0x70>
 800bc18:	6824      	ldr	r4, [r4, #0]
 800bc1a:	4421      	add	r1, r4
 800bc1c:	1854      	adds	r4, r2, r1
 800bc1e:	42a3      	cmp	r3, r4
 800bc20:	6011      	str	r1, [r2, #0]
 800bc22:	d1e0      	bne.n	800bbe6 <_free_r+0x26>
 800bc24:	681c      	ldr	r4, [r3, #0]
 800bc26:	685b      	ldr	r3, [r3, #4]
 800bc28:	6053      	str	r3, [r2, #4]
 800bc2a:	440c      	add	r4, r1
 800bc2c:	6014      	str	r4, [r2, #0]
 800bc2e:	e7da      	b.n	800bbe6 <_free_r+0x26>
 800bc30:	d902      	bls.n	800bc38 <_free_r+0x78>
 800bc32:	230c      	movs	r3, #12
 800bc34:	6003      	str	r3, [r0, #0]
 800bc36:	e7d6      	b.n	800bbe6 <_free_r+0x26>
 800bc38:	6825      	ldr	r5, [r4, #0]
 800bc3a:	1961      	adds	r1, r4, r5
 800bc3c:	428b      	cmp	r3, r1
 800bc3e:	bf04      	itt	eq
 800bc40:	6819      	ldreq	r1, [r3, #0]
 800bc42:	685b      	ldreq	r3, [r3, #4]
 800bc44:	6063      	str	r3, [r4, #4]
 800bc46:	bf04      	itt	eq
 800bc48:	1949      	addeq	r1, r1, r5
 800bc4a:	6021      	streq	r1, [r4, #0]
 800bc4c:	6054      	str	r4, [r2, #4]
 800bc4e:	e7ca      	b.n	800bbe6 <_free_r+0x26>
 800bc50:	b003      	add	sp, #12
 800bc52:	bd30      	pop	{r4, r5, pc}
 800bc54:	240004d0 	.word	0x240004d0

0800bc58 <malloc>:
 800bc58:	4b02      	ldr	r3, [pc, #8]	; (800bc64 <malloc+0xc>)
 800bc5a:	4601      	mov	r1, r0
 800bc5c:	6818      	ldr	r0, [r3, #0]
 800bc5e:	f000 b823 	b.w	800bca8 <_malloc_r>
 800bc62:	bf00      	nop
 800bc64:	24000068 	.word	0x24000068

0800bc68 <sbrk_aligned>:
 800bc68:	b570      	push	{r4, r5, r6, lr}
 800bc6a:	4e0e      	ldr	r6, [pc, #56]	; (800bca4 <sbrk_aligned+0x3c>)
 800bc6c:	460c      	mov	r4, r1
 800bc6e:	6831      	ldr	r1, [r6, #0]
 800bc70:	4605      	mov	r5, r0
 800bc72:	b911      	cbnz	r1, 800bc7a <sbrk_aligned+0x12>
 800bc74:	f000 fe40 	bl	800c8f8 <_sbrk_r>
 800bc78:	6030      	str	r0, [r6, #0]
 800bc7a:	4621      	mov	r1, r4
 800bc7c:	4628      	mov	r0, r5
 800bc7e:	f000 fe3b 	bl	800c8f8 <_sbrk_r>
 800bc82:	1c43      	adds	r3, r0, #1
 800bc84:	d00a      	beq.n	800bc9c <sbrk_aligned+0x34>
 800bc86:	1cc4      	adds	r4, r0, #3
 800bc88:	f024 0403 	bic.w	r4, r4, #3
 800bc8c:	42a0      	cmp	r0, r4
 800bc8e:	d007      	beq.n	800bca0 <sbrk_aligned+0x38>
 800bc90:	1a21      	subs	r1, r4, r0
 800bc92:	4628      	mov	r0, r5
 800bc94:	f000 fe30 	bl	800c8f8 <_sbrk_r>
 800bc98:	3001      	adds	r0, #1
 800bc9a:	d101      	bne.n	800bca0 <sbrk_aligned+0x38>
 800bc9c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800bca0:	4620      	mov	r0, r4
 800bca2:	bd70      	pop	{r4, r5, r6, pc}
 800bca4:	240004d4 	.word	0x240004d4

0800bca8 <_malloc_r>:
 800bca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcac:	1ccd      	adds	r5, r1, #3
 800bcae:	f025 0503 	bic.w	r5, r5, #3
 800bcb2:	3508      	adds	r5, #8
 800bcb4:	2d0c      	cmp	r5, #12
 800bcb6:	bf38      	it	cc
 800bcb8:	250c      	movcc	r5, #12
 800bcba:	2d00      	cmp	r5, #0
 800bcbc:	4607      	mov	r7, r0
 800bcbe:	db01      	blt.n	800bcc4 <_malloc_r+0x1c>
 800bcc0:	42a9      	cmp	r1, r5
 800bcc2:	d905      	bls.n	800bcd0 <_malloc_r+0x28>
 800bcc4:	230c      	movs	r3, #12
 800bcc6:	603b      	str	r3, [r7, #0]
 800bcc8:	2600      	movs	r6, #0
 800bcca:	4630      	mov	r0, r6
 800bccc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcd0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bda4 <_malloc_r+0xfc>
 800bcd4:	f000 f868 	bl	800bda8 <__malloc_lock>
 800bcd8:	f8d8 3000 	ldr.w	r3, [r8]
 800bcdc:	461c      	mov	r4, r3
 800bcde:	bb5c      	cbnz	r4, 800bd38 <_malloc_r+0x90>
 800bce0:	4629      	mov	r1, r5
 800bce2:	4638      	mov	r0, r7
 800bce4:	f7ff ffc0 	bl	800bc68 <sbrk_aligned>
 800bce8:	1c43      	adds	r3, r0, #1
 800bcea:	4604      	mov	r4, r0
 800bcec:	d155      	bne.n	800bd9a <_malloc_r+0xf2>
 800bcee:	f8d8 4000 	ldr.w	r4, [r8]
 800bcf2:	4626      	mov	r6, r4
 800bcf4:	2e00      	cmp	r6, #0
 800bcf6:	d145      	bne.n	800bd84 <_malloc_r+0xdc>
 800bcf8:	2c00      	cmp	r4, #0
 800bcfa:	d048      	beq.n	800bd8e <_malloc_r+0xe6>
 800bcfc:	6823      	ldr	r3, [r4, #0]
 800bcfe:	4631      	mov	r1, r6
 800bd00:	4638      	mov	r0, r7
 800bd02:	eb04 0903 	add.w	r9, r4, r3
 800bd06:	f000 fdf7 	bl	800c8f8 <_sbrk_r>
 800bd0a:	4581      	cmp	r9, r0
 800bd0c:	d13f      	bne.n	800bd8e <_malloc_r+0xe6>
 800bd0e:	6821      	ldr	r1, [r4, #0]
 800bd10:	1a6d      	subs	r5, r5, r1
 800bd12:	4629      	mov	r1, r5
 800bd14:	4638      	mov	r0, r7
 800bd16:	f7ff ffa7 	bl	800bc68 <sbrk_aligned>
 800bd1a:	3001      	adds	r0, #1
 800bd1c:	d037      	beq.n	800bd8e <_malloc_r+0xe6>
 800bd1e:	6823      	ldr	r3, [r4, #0]
 800bd20:	442b      	add	r3, r5
 800bd22:	6023      	str	r3, [r4, #0]
 800bd24:	f8d8 3000 	ldr.w	r3, [r8]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d038      	beq.n	800bd9e <_malloc_r+0xf6>
 800bd2c:	685a      	ldr	r2, [r3, #4]
 800bd2e:	42a2      	cmp	r2, r4
 800bd30:	d12b      	bne.n	800bd8a <_malloc_r+0xe2>
 800bd32:	2200      	movs	r2, #0
 800bd34:	605a      	str	r2, [r3, #4]
 800bd36:	e00f      	b.n	800bd58 <_malloc_r+0xb0>
 800bd38:	6822      	ldr	r2, [r4, #0]
 800bd3a:	1b52      	subs	r2, r2, r5
 800bd3c:	d41f      	bmi.n	800bd7e <_malloc_r+0xd6>
 800bd3e:	2a0b      	cmp	r2, #11
 800bd40:	d917      	bls.n	800bd72 <_malloc_r+0xca>
 800bd42:	1961      	adds	r1, r4, r5
 800bd44:	42a3      	cmp	r3, r4
 800bd46:	6025      	str	r5, [r4, #0]
 800bd48:	bf18      	it	ne
 800bd4a:	6059      	strne	r1, [r3, #4]
 800bd4c:	6863      	ldr	r3, [r4, #4]
 800bd4e:	bf08      	it	eq
 800bd50:	f8c8 1000 	streq.w	r1, [r8]
 800bd54:	5162      	str	r2, [r4, r5]
 800bd56:	604b      	str	r3, [r1, #4]
 800bd58:	4638      	mov	r0, r7
 800bd5a:	f104 060b 	add.w	r6, r4, #11
 800bd5e:	f000 f829 	bl	800bdb4 <__malloc_unlock>
 800bd62:	f026 0607 	bic.w	r6, r6, #7
 800bd66:	1d23      	adds	r3, r4, #4
 800bd68:	1af2      	subs	r2, r6, r3
 800bd6a:	d0ae      	beq.n	800bcca <_malloc_r+0x22>
 800bd6c:	1b9b      	subs	r3, r3, r6
 800bd6e:	50a3      	str	r3, [r4, r2]
 800bd70:	e7ab      	b.n	800bcca <_malloc_r+0x22>
 800bd72:	42a3      	cmp	r3, r4
 800bd74:	6862      	ldr	r2, [r4, #4]
 800bd76:	d1dd      	bne.n	800bd34 <_malloc_r+0x8c>
 800bd78:	f8c8 2000 	str.w	r2, [r8]
 800bd7c:	e7ec      	b.n	800bd58 <_malloc_r+0xb0>
 800bd7e:	4623      	mov	r3, r4
 800bd80:	6864      	ldr	r4, [r4, #4]
 800bd82:	e7ac      	b.n	800bcde <_malloc_r+0x36>
 800bd84:	4634      	mov	r4, r6
 800bd86:	6876      	ldr	r6, [r6, #4]
 800bd88:	e7b4      	b.n	800bcf4 <_malloc_r+0x4c>
 800bd8a:	4613      	mov	r3, r2
 800bd8c:	e7cc      	b.n	800bd28 <_malloc_r+0x80>
 800bd8e:	230c      	movs	r3, #12
 800bd90:	603b      	str	r3, [r7, #0]
 800bd92:	4638      	mov	r0, r7
 800bd94:	f000 f80e 	bl	800bdb4 <__malloc_unlock>
 800bd98:	e797      	b.n	800bcca <_malloc_r+0x22>
 800bd9a:	6025      	str	r5, [r4, #0]
 800bd9c:	e7dc      	b.n	800bd58 <_malloc_r+0xb0>
 800bd9e:	605b      	str	r3, [r3, #4]
 800bda0:	deff      	udf	#255	; 0xff
 800bda2:	bf00      	nop
 800bda4:	240004d0 	.word	0x240004d0

0800bda8 <__malloc_lock>:
 800bda8:	4801      	ldr	r0, [pc, #4]	; (800bdb0 <__malloc_lock+0x8>)
 800bdaa:	f7ff b912 	b.w	800afd2 <__retarget_lock_acquire_recursive>
 800bdae:	bf00      	nop
 800bdb0:	240004cc 	.word	0x240004cc

0800bdb4 <__malloc_unlock>:
 800bdb4:	4801      	ldr	r0, [pc, #4]	; (800bdbc <__malloc_unlock+0x8>)
 800bdb6:	f7ff b90d 	b.w	800afd4 <__retarget_lock_release_recursive>
 800bdba:	bf00      	nop
 800bdbc:	240004cc 	.word	0x240004cc

0800bdc0 <_Balloc>:
 800bdc0:	b570      	push	{r4, r5, r6, lr}
 800bdc2:	69c6      	ldr	r6, [r0, #28]
 800bdc4:	4604      	mov	r4, r0
 800bdc6:	460d      	mov	r5, r1
 800bdc8:	b976      	cbnz	r6, 800bde8 <_Balloc+0x28>
 800bdca:	2010      	movs	r0, #16
 800bdcc:	f7ff ff44 	bl	800bc58 <malloc>
 800bdd0:	4602      	mov	r2, r0
 800bdd2:	61e0      	str	r0, [r4, #28]
 800bdd4:	b920      	cbnz	r0, 800bde0 <_Balloc+0x20>
 800bdd6:	4b18      	ldr	r3, [pc, #96]	; (800be38 <_Balloc+0x78>)
 800bdd8:	4818      	ldr	r0, [pc, #96]	; (800be3c <_Balloc+0x7c>)
 800bdda:	216b      	movs	r1, #107	; 0x6b
 800bddc:	f000 fdaa 	bl	800c934 <__assert_func>
 800bde0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bde4:	6006      	str	r6, [r0, #0]
 800bde6:	60c6      	str	r6, [r0, #12]
 800bde8:	69e6      	ldr	r6, [r4, #28]
 800bdea:	68f3      	ldr	r3, [r6, #12]
 800bdec:	b183      	cbz	r3, 800be10 <_Balloc+0x50>
 800bdee:	69e3      	ldr	r3, [r4, #28]
 800bdf0:	68db      	ldr	r3, [r3, #12]
 800bdf2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bdf6:	b9b8      	cbnz	r0, 800be28 <_Balloc+0x68>
 800bdf8:	2101      	movs	r1, #1
 800bdfa:	fa01 f605 	lsl.w	r6, r1, r5
 800bdfe:	1d72      	adds	r2, r6, #5
 800be00:	0092      	lsls	r2, r2, #2
 800be02:	4620      	mov	r0, r4
 800be04:	f000 fdb4 	bl	800c970 <_calloc_r>
 800be08:	b160      	cbz	r0, 800be24 <_Balloc+0x64>
 800be0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800be0e:	e00e      	b.n	800be2e <_Balloc+0x6e>
 800be10:	2221      	movs	r2, #33	; 0x21
 800be12:	2104      	movs	r1, #4
 800be14:	4620      	mov	r0, r4
 800be16:	f000 fdab 	bl	800c970 <_calloc_r>
 800be1a:	69e3      	ldr	r3, [r4, #28]
 800be1c:	60f0      	str	r0, [r6, #12]
 800be1e:	68db      	ldr	r3, [r3, #12]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d1e4      	bne.n	800bdee <_Balloc+0x2e>
 800be24:	2000      	movs	r0, #0
 800be26:	bd70      	pop	{r4, r5, r6, pc}
 800be28:	6802      	ldr	r2, [r0, #0]
 800be2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800be2e:	2300      	movs	r3, #0
 800be30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800be34:	e7f7      	b.n	800be26 <_Balloc+0x66>
 800be36:	bf00      	nop
 800be38:	0800d091 	.word	0x0800d091
 800be3c:	0800d111 	.word	0x0800d111

0800be40 <_Bfree>:
 800be40:	b570      	push	{r4, r5, r6, lr}
 800be42:	69c6      	ldr	r6, [r0, #28]
 800be44:	4605      	mov	r5, r0
 800be46:	460c      	mov	r4, r1
 800be48:	b976      	cbnz	r6, 800be68 <_Bfree+0x28>
 800be4a:	2010      	movs	r0, #16
 800be4c:	f7ff ff04 	bl	800bc58 <malloc>
 800be50:	4602      	mov	r2, r0
 800be52:	61e8      	str	r0, [r5, #28]
 800be54:	b920      	cbnz	r0, 800be60 <_Bfree+0x20>
 800be56:	4b09      	ldr	r3, [pc, #36]	; (800be7c <_Bfree+0x3c>)
 800be58:	4809      	ldr	r0, [pc, #36]	; (800be80 <_Bfree+0x40>)
 800be5a:	218f      	movs	r1, #143	; 0x8f
 800be5c:	f000 fd6a 	bl	800c934 <__assert_func>
 800be60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be64:	6006      	str	r6, [r0, #0]
 800be66:	60c6      	str	r6, [r0, #12]
 800be68:	b13c      	cbz	r4, 800be7a <_Bfree+0x3a>
 800be6a:	69eb      	ldr	r3, [r5, #28]
 800be6c:	6862      	ldr	r2, [r4, #4]
 800be6e:	68db      	ldr	r3, [r3, #12]
 800be70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800be74:	6021      	str	r1, [r4, #0]
 800be76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800be7a:	bd70      	pop	{r4, r5, r6, pc}
 800be7c:	0800d091 	.word	0x0800d091
 800be80:	0800d111 	.word	0x0800d111

0800be84 <__multadd>:
 800be84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be88:	690d      	ldr	r5, [r1, #16]
 800be8a:	4607      	mov	r7, r0
 800be8c:	460c      	mov	r4, r1
 800be8e:	461e      	mov	r6, r3
 800be90:	f101 0c14 	add.w	ip, r1, #20
 800be94:	2000      	movs	r0, #0
 800be96:	f8dc 3000 	ldr.w	r3, [ip]
 800be9a:	b299      	uxth	r1, r3
 800be9c:	fb02 6101 	mla	r1, r2, r1, r6
 800bea0:	0c1e      	lsrs	r6, r3, #16
 800bea2:	0c0b      	lsrs	r3, r1, #16
 800bea4:	fb02 3306 	mla	r3, r2, r6, r3
 800bea8:	b289      	uxth	r1, r1
 800beaa:	3001      	adds	r0, #1
 800beac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800beb0:	4285      	cmp	r5, r0
 800beb2:	f84c 1b04 	str.w	r1, [ip], #4
 800beb6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800beba:	dcec      	bgt.n	800be96 <__multadd+0x12>
 800bebc:	b30e      	cbz	r6, 800bf02 <__multadd+0x7e>
 800bebe:	68a3      	ldr	r3, [r4, #8]
 800bec0:	42ab      	cmp	r3, r5
 800bec2:	dc19      	bgt.n	800bef8 <__multadd+0x74>
 800bec4:	6861      	ldr	r1, [r4, #4]
 800bec6:	4638      	mov	r0, r7
 800bec8:	3101      	adds	r1, #1
 800beca:	f7ff ff79 	bl	800bdc0 <_Balloc>
 800bece:	4680      	mov	r8, r0
 800bed0:	b928      	cbnz	r0, 800bede <__multadd+0x5a>
 800bed2:	4602      	mov	r2, r0
 800bed4:	4b0c      	ldr	r3, [pc, #48]	; (800bf08 <__multadd+0x84>)
 800bed6:	480d      	ldr	r0, [pc, #52]	; (800bf0c <__multadd+0x88>)
 800bed8:	21ba      	movs	r1, #186	; 0xba
 800beda:	f000 fd2b 	bl	800c934 <__assert_func>
 800bede:	6922      	ldr	r2, [r4, #16]
 800bee0:	3202      	adds	r2, #2
 800bee2:	f104 010c 	add.w	r1, r4, #12
 800bee6:	0092      	lsls	r2, r2, #2
 800bee8:	300c      	adds	r0, #12
 800beea:	f000 fd15 	bl	800c918 <memcpy>
 800beee:	4621      	mov	r1, r4
 800bef0:	4638      	mov	r0, r7
 800bef2:	f7ff ffa5 	bl	800be40 <_Bfree>
 800bef6:	4644      	mov	r4, r8
 800bef8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800befc:	3501      	adds	r5, #1
 800befe:	615e      	str	r6, [r3, #20]
 800bf00:	6125      	str	r5, [r4, #16]
 800bf02:	4620      	mov	r0, r4
 800bf04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf08:	0800d100 	.word	0x0800d100
 800bf0c:	0800d111 	.word	0x0800d111

0800bf10 <__hi0bits>:
 800bf10:	0c03      	lsrs	r3, r0, #16
 800bf12:	041b      	lsls	r3, r3, #16
 800bf14:	b9d3      	cbnz	r3, 800bf4c <__hi0bits+0x3c>
 800bf16:	0400      	lsls	r0, r0, #16
 800bf18:	2310      	movs	r3, #16
 800bf1a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bf1e:	bf04      	itt	eq
 800bf20:	0200      	lsleq	r0, r0, #8
 800bf22:	3308      	addeq	r3, #8
 800bf24:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bf28:	bf04      	itt	eq
 800bf2a:	0100      	lsleq	r0, r0, #4
 800bf2c:	3304      	addeq	r3, #4
 800bf2e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bf32:	bf04      	itt	eq
 800bf34:	0080      	lsleq	r0, r0, #2
 800bf36:	3302      	addeq	r3, #2
 800bf38:	2800      	cmp	r0, #0
 800bf3a:	db05      	blt.n	800bf48 <__hi0bits+0x38>
 800bf3c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bf40:	f103 0301 	add.w	r3, r3, #1
 800bf44:	bf08      	it	eq
 800bf46:	2320      	moveq	r3, #32
 800bf48:	4618      	mov	r0, r3
 800bf4a:	4770      	bx	lr
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	e7e4      	b.n	800bf1a <__hi0bits+0xa>

0800bf50 <__lo0bits>:
 800bf50:	6803      	ldr	r3, [r0, #0]
 800bf52:	f013 0207 	ands.w	r2, r3, #7
 800bf56:	d00c      	beq.n	800bf72 <__lo0bits+0x22>
 800bf58:	07d9      	lsls	r1, r3, #31
 800bf5a:	d422      	bmi.n	800bfa2 <__lo0bits+0x52>
 800bf5c:	079a      	lsls	r2, r3, #30
 800bf5e:	bf49      	itett	mi
 800bf60:	085b      	lsrmi	r3, r3, #1
 800bf62:	089b      	lsrpl	r3, r3, #2
 800bf64:	6003      	strmi	r3, [r0, #0]
 800bf66:	2201      	movmi	r2, #1
 800bf68:	bf5c      	itt	pl
 800bf6a:	6003      	strpl	r3, [r0, #0]
 800bf6c:	2202      	movpl	r2, #2
 800bf6e:	4610      	mov	r0, r2
 800bf70:	4770      	bx	lr
 800bf72:	b299      	uxth	r1, r3
 800bf74:	b909      	cbnz	r1, 800bf7a <__lo0bits+0x2a>
 800bf76:	0c1b      	lsrs	r3, r3, #16
 800bf78:	2210      	movs	r2, #16
 800bf7a:	b2d9      	uxtb	r1, r3
 800bf7c:	b909      	cbnz	r1, 800bf82 <__lo0bits+0x32>
 800bf7e:	3208      	adds	r2, #8
 800bf80:	0a1b      	lsrs	r3, r3, #8
 800bf82:	0719      	lsls	r1, r3, #28
 800bf84:	bf04      	itt	eq
 800bf86:	091b      	lsreq	r3, r3, #4
 800bf88:	3204      	addeq	r2, #4
 800bf8a:	0799      	lsls	r1, r3, #30
 800bf8c:	bf04      	itt	eq
 800bf8e:	089b      	lsreq	r3, r3, #2
 800bf90:	3202      	addeq	r2, #2
 800bf92:	07d9      	lsls	r1, r3, #31
 800bf94:	d403      	bmi.n	800bf9e <__lo0bits+0x4e>
 800bf96:	085b      	lsrs	r3, r3, #1
 800bf98:	f102 0201 	add.w	r2, r2, #1
 800bf9c:	d003      	beq.n	800bfa6 <__lo0bits+0x56>
 800bf9e:	6003      	str	r3, [r0, #0]
 800bfa0:	e7e5      	b.n	800bf6e <__lo0bits+0x1e>
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	e7e3      	b.n	800bf6e <__lo0bits+0x1e>
 800bfa6:	2220      	movs	r2, #32
 800bfa8:	e7e1      	b.n	800bf6e <__lo0bits+0x1e>
	...

0800bfac <__i2b>:
 800bfac:	b510      	push	{r4, lr}
 800bfae:	460c      	mov	r4, r1
 800bfb0:	2101      	movs	r1, #1
 800bfb2:	f7ff ff05 	bl	800bdc0 <_Balloc>
 800bfb6:	4602      	mov	r2, r0
 800bfb8:	b928      	cbnz	r0, 800bfc6 <__i2b+0x1a>
 800bfba:	4b05      	ldr	r3, [pc, #20]	; (800bfd0 <__i2b+0x24>)
 800bfbc:	4805      	ldr	r0, [pc, #20]	; (800bfd4 <__i2b+0x28>)
 800bfbe:	f240 1145 	movw	r1, #325	; 0x145
 800bfc2:	f000 fcb7 	bl	800c934 <__assert_func>
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	6144      	str	r4, [r0, #20]
 800bfca:	6103      	str	r3, [r0, #16]
 800bfcc:	bd10      	pop	{r4, pc}
 800bfce:	bf00      	nop
 800bfd0:	0800d100 	.word	0x0800d100
 800bfd4:	0800d111 	.word	0x0800d111

0800bfd8 <__multiply>:
 800bfd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfdc:	4691      	mov	r9, r2
 800bfde:	690a      	ldr	r2, [r1, #16]
 800bfe0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	bfb8      	it	lt
 800bfe8:	460b      	movlt	r3, r1
 800bfea:	460c      	mov	r4, r1
 800bfec:	bfbc      	itt	lt
 800bfee:	464c      	movlt	r4, r9
 800bff0:	4699      	movlt	r9, r3
 800bff2:	6927      	ldr	r7, [r4, #16]
 800bff4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bff8:	68a3      	ldr	r3, [r4, #8]
 800bffa:	6861      	ldr	r1, [r4, #4]
 800bffc:	eb07 060a 	add.w	r6, r7, sl
 800c000:	42b3      	cmp	r3, r6
 800c002:	b085      	sub	sp, #20
 800c004:	bfb8      	it	lt
 800c006:	3101      	addlt	r1, #1
 800c008:	f7ff feda 	bl	800bdc0 <_Balloc>
 800c00c:	b930      	cbnz	r0, 800c01c <__multiply+0x44>
 800c00e:	4602      	mov	r2, r0
 800c010:	4b44      	ldr	r3, [pc, #272]	; (800c124 <__multiply+0x14c>)
 800c012:	4845      	ldr	r0, [pc, #276]	; (800c128 <__multiply+0x150>)
 800c014:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c018:	f000 fc8c 	bl	800c934 <__assert_func>
 800c01c:	f100 0514 	add.w	r5, r0, #20
 800c020:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c024:	462b      	mov	r3, r5
 800c026:	2200      	movs	r2, #0
 800c028:	4543      	cmp	r3, r8
 800c02a:	d321      	bcc.n	800c070 <__multiply+0x98>
 800c02c:	f104 0314 	add.w	r3, r4, #20
 800c030:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c034:	f109 0314 	add.w	r3, r9, #20
 800c038:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c03c:	9202      	str	r2, [sp, #8]
 800c03e:	1b3a      	subs	r2, r7, r4
 800c040:	3a15      	subs	r2, #21
 800c042:	f022 0203 	bic.w	r2, r2, #3
 800c046:	3204      	adds	r2, #4
 800c048:	f104 0115 	add.w	r1, r4, #21
 800c04c:	428f      	cmp	r7, r1
 800c04e:	bf38      	it	cc
 800c050:	2204      	movcc	r2, #4
 800c052:	9201      	str	r2, [sp, #4]
 800c054:	9a02      	ldr	r2, [sp, #8]
 800c056:	9303      	str	r3, [sp, #12]
 800c058:	429a      	cmp	r2, r3
 800c05a:	d80c      	bhi.n	800c076 <__multiply+0x9e>
 800c05c:	2e00      	cmp	r6, #0
 800c05e:	dd03      	ble.n	800c068 <__multiply+0x90>
 800c060:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c064:	2b00      	cmp	r3, #0
 800c066:	d05b      	beq.n	800c120 <__multiply+0x148>
 800c068:	6106      	str	r6, [r0, #16]
 800c06a:	b005      	add	sp, #20
 800c06c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c070:	f843 2b04 	str.w	r2, [r3], #4
 800c074:	e7d8      	b.n	800c028 <__multiply+0x50>
 800c076:	f8b3 a000 	ldrh.w	sl, [r3]
 800c07a:	f1ba 0f00 	cmp.w	sl, #0
 800c07e:	d024      	beq.n	800c0ca <__multiply+0xf2>
 800c080:	f104 0e14 	add.w	lr, r4, #20
 800c084:	46a9      	mov	r9, r5
 800c086:	f04f 0c00 	mov.w	ip, #0
 800c08a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c08e:	f8d9 1000 	ldr.w	r1, [r9]
 800c092:	fa1f fb82 	uxth.w	fp, r2
 800c096:	b289      	uxth	r1, r1
 800c098:	fb0a 110b 	mla	r1, sl, fp, r1
 800c09c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c0a0:	f8d9 2000 	ldr.w	r2, [r9]
 800c0a4:	4461      	add	r1, ip
 800c0a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c0aa:	fb0a c20b 	mla	r2, sl, fp, ip
 800c0ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c0b2:	b289      	uxth	r1, r1
 800c0b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c0b8:	4577      	cmp	r7, lr
 800c0ba:	f849 1b04 	str.w	r1, [r9], #4
 800c0be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c0c2:	d8e2      	bhi.n	800c08a <__multiply+0xb2>
 800c0c4:	9a01      	ldr	r2, [sp, #4]
 800c0c6:	f845 c002 	str.w	ip, [r5, r2]
 800c0ca:	9a03      	ldr	r2, [sp, #12]
 800c0cc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c0d0:	3304      	adds	r3, #4
 800c0d2:	f1b9 0f00 	cmp.w	r9, #0
 800c0d6:	d021      	beq.n	800c11c <__multiply+0x144>
 800c0d8:	6829      	ldr	r1, [r5, #0]
 800c0da:	f104 0c14 	add.w	ip, r4, #20
 800c0de:	46ae      	mov	lr, r5
 800c0e0:	f04f 0a00 	mov.w	sl, #0
 800c0e4:	f8bc b000 	ldrh.w	fp, [ip]
 800c0e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c0ec:	fb09 220b 	mla	r2, r9, fp, r2
 800c0f0:	4452      	add	r2, sl
 800c0f2:	b289      	uxth	r1, r1
 800c0f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c0f8:	f84e 1b04 	str.w	r1, [lr], #4
 800c0fc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c100:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c104:	f8be 1000 	ldrh.w	r1, [lr]
 800c108:	fb09 110a 	mla	r1, r9, sl, r1
 800c10c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c110:	4567      	cmp	r7, ip
 800c112:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c116:	d8e5      	bhi.n	800c0e4 <__multiply+0x10c>
 800c118:	9a01      	ldr	r2, [sp, #4]
 800c11a:	50a9      	str	r1, [r5, r2]
 800c11c:	3504      	adds	r5, #4
 800c11e:	e799      	b.n	800c054 <__multiply+0x7c>
 800c120:	3e01      	subs	r6, #1
 800c122:	e79b      	b.n	800c05c <__multiply+0x84>
 800c124:	0800d100 	.word	0x0800d100
 800c128:	0800d111 	.word	0x0800d111

0800c12c <__pow5mult>:
 800c12c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c130:	4615      	mov	r5, r2
 800c132:	f012 0203 	ands.w	r2, r2, #3
 800c136:	4606      	mov	r6, r0
 800c138:	460f      	mov	r7, r1
 800c13a:	d007      	beq.n	800c14c <__pow5mult+0x20>
 800c13c:	4c25      	ldr	r4, [pc, #148]	; (800c1d4 <__pow5mult+0xa8>)
 800c13e:	3a01      	subs	r2, #1
 800c140:	2300      	movs	r3, #0
 800c142:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c146:	f7ff fe9d 	bl	800be84 <__multadd>
 800c14a:	4607      	mov	r7, r0
 800c14c:	10ad      	asrs	r5, r5, #2
 800c14e:	d03d      	beq.n	800c1cc <__pow5mult+0xa0>
 800c150:	69f4      	ldr	r4, [r6, #28]
 800c152:	b97c      	cbnz	r4, 800c174 <__pow5mult+0x48>
 800c154:	2010      	movs	r0, #16
 800c156:	f7ff fd7f 	bl	800bc58 <malloc>
 800c15a:	4602      	mov	r2, r0
 800c15c:	61f0      	str	r0, [r6, #28]
 800c15e:	b928      	cbnz	r0, 800c16c <__pow5mult+0x40>
 800c160:	4b1d      	ldr	r3, [pc, #116]	; (800c1d8 <__pow5mult+0xac>)
 800c162:	481e      	ldr	r0, [pc, #120]	; (800c1dc <__pow5mult+0xb0>)
 800c164:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c168:	f000 fbe4 	bl	800c934 <__assert_func>
 800c16c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c170:	6004      	str	r4, [r0, #0]
 800c172:	60c4      	str	r4, [r0, #12]
 800c174:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c178:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c17c:	b94c      	cbnz	r4, 800c192 <__pow5mult+0x66>
 800c17e:	f240 2171 	movw	r1, #625	; 0x271
 800c182:	4630      	mov	r0, r6
 800c184:	f7ff ff12 	bl	800bfac <__i2b>
 800c188:	2300      	movs	r3, #0
 800c18a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c18e:	4604      	mov	r4, r0
 800c190:	6003      	str	r3, [r0, #0]
 800c192:	f04f 0900 	mov.w	r9, #0
 800c196:	07eb      	lsls	r3, r5, #31
 800c198:	d50a      	bpl.n	800c1b0 <__pow5mult+0x84>
 800c19a:	4639      	mov	r1, r7
 800c19c:	4622      	mov	r2, r4
 800c19e:	4630      	mov	r0, r6
 800c1a0:	f7ff ff1a 	bl	800bfd8 <__multiply>
 800c1a4:	4639      	mov	r1, r7
 800c1a6:	4680      	mov	r8, r0
 800c1a8:	4630      	mov	r0, r6
 800c1aa:	f7ff fe49 	bl	800be40 <_Bfree>
 800c1ae:	4647      	mov	r7, r8
 800c1b0:	106d      	asrs	r5, r5, #1
 800c1b2:	d00b      	beq.n	800c1cc <__pow5mult+0xa0>
 800c1b4:	6820      	ldr	r0, [r4, #0]
 800c1b6:	b938      	cbnz	r0, 800c1c8 <__pow5mult+0x9c>
 800c1b8:	4622      	mov	r2, r4
 800c1ba:	4621      	mov	r1, r4
 800c1bc:	4630      	mov	r0, r6
 800c1be:	f7ff ff0b 	bl	800bfd8 <__multiply>
 800c1c2:	6020      	str	r0, [r4, #0]
 800c1c4:	f8c0 9000 	str.w	r9, [r0]
 800c1c8:	4604      	mov	r4, r0
 800c1ca:	e7e4      	b.n	800c196 <__pow5mult+0x6a>
 800c1cc:	4638      	mov	r0, r7
 800c1ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1d2:	bf00      	nop
 800c1d4:	0800d260 	.word	0x0800d260
 800c1d8:	0800d091 	.word	0x0800d091
 800c1dc:	0800d111 	.word	0x0800d111

0800c1e0 <__lshift>:
 800c1e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1e4:	460c      	mov	r4, r1
 800c1e6:	6849      	ldr	r1, [r1, #4]
 800c1e8:	6923      	ldr	r3, [r4, #16]
 800c1ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c1ee:	68a3      	ldr	r3, [r4, #8]
 800c1f0:	4607      	mov	r7, r0
 800c1f2:	4691      	mov	r9, r2
 800c1f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c1f8:	f108 0601 	add.w	r6, r8, #1
 800c1fc:	42b3      	cmp	r3, r6
 800c1fe:	db0b      	blt.n	800c218 <__lshift+0x38>
 800c200:	4638      	mov	r0, r7
 800c202:	f7ff fddd 	bl	800bdc0 <_Balloc>
 800c206:	4605      	mov	r5, r0
 800c208:	b948      	cbnz	r0, 800c21e <__lshift+0x3e>
 800c20a:	4602      	mov	r2, r0
 800c20c:	4b28      	ldr	r3, [pc, #160]	; (800c2b0 <__lshift+0xd0>)
 800c20e:	4829      	ldr	r0, [pc, #164]	; (800c2b4 <__lshift+0xd4>)
 800c210:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c214:	f000 fb8e 	bl	800c934 <__assert_func>
 800c218:	3101      	adds	r1, #1
 800c21a:	005b      	lsls	r3, r3, #1
 800c21c:	e7ee      	b.n	800c1fc <__lshift+0x1c>
 800c21e:	2300      	movs	r3, #0
 800c220:	f100 0114 	add.w	r1, r0, #20
 800c224:	f100 0210 	add.w	r2, r0, #16
 800c228:	4618      	mov	r0, r3
 800c22a:	4553      	cmp	r3, sl
 800c22c:	db33      	blt.n	800c296 <__lshift+0xb6>
 800c22e:	6920      	ldr	r0, [r4, #16]
 800c230:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c234:	f104 0314 	add.w	r3, r4, #20
 800c238:	f019 091f 	ands.w	r9, r9, #31
 800c23c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c240:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c244:	d02b      	beq.n	800c29e <__lshift+0xbe>
 800c246:	f1c9 0e20 	rsb	lr, r9, #32
 800c24a:	468a      	mov	sl, r1
 800c24c:	2200      	movs	r2, #0
 800c24e:	6818      	ldr	r0, [r3, #0]
 800c250:	fa00 f009 	lsl.w	r0, r0, r9
 800c254:	4310      	orrs	r0, r2
 800c256:	f84a 0b04 	str.w	r0, [sl], #4
 800c25a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c25e:	459c      	cmp	ip, r3
 800c260:	fa22 f20e 	lsr.w	r2, r2, lr
 800c264:	d8f3      	bhi.n	800c24e <__lshift+0x6e>
 800c266:	ebac 0304 	sub.w	r3, ip, r4
 800c26a:	3b15      	subs	r3, #21
 800c26c:	f023 0303 	bic.w	r3, r3, #3
 800c270:	3304      	adds	r3, #4
 800c272:	f104 0015 	add.w	r0, r4, #21
 800c276:	4584      	cmp	ip, r0
 800c278:	bf38      	it	cc
 800c27a:	2304      	movcc	r3, #4
 800c27c:	50ca      	str	r2, [r1, r3]
 800c27e:	b10a      	cbz	r2, 800c284 <__lshift+0xa4>
 800c280:	f108 0602 	add.w	r6, r8, #2
 800c284:	3e01      	subs	r6, #1
 800c286:	4638      	mov	r0, r7
 800c288:	612e      	str	r6, [r5, #16]
 800c28a:	4621      	mov	r1, r4
 800c28c:	f7ff fdd8 	bl	800be40 <_Bfree>
 800c290:	4628      	mov	r0, r5
 800c292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c296:	f842 0f04 	str.w	r0, [r2, #4]!
 800c29a:	3301      	adds	r3, #1
 800c29c:	e7c5      	b.n	800c22a <__lshift+0x4a>
 800c29e:	3904      	subs	r1, #4
 800c2a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c2a8:	459c      	cmp	ip, r3
 800c2aa:	d8f9      	bhi.n	800c2a0 <__lshift+0xc0>
 800c2ac:	e7ea      	b.n	800c284 <__lshift+0xa4>
 800c2ae:	bf00      	nop
 800c2b0:	0800d100 	.word	0x0800d100
 800c2b4:	0800d111 	.word	0x0800d111

0800c2b8 <__mcmp>:
 800c2b8:	b530      	push	{r4, r5, lr}
 800c2ba:	6902      	ldr	r2, [r0, #16]
 800c2bc:	690c      	ldr	r4, [r1, #16]
 800c2be:	1b12      	subs	r2, r2, r4
 800c2c0:	d10e      	bne.n	800c2e0 <__mcmp+0x28>
 800c2c2:	f100 0314 	add.w	r3, r0, #20
 800c2c6:	3114      	adds	r1, #20
 800c2c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c2cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c2d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c2d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c2d8:	42a5      	cmp	r5, r4
 800c2da:	d003      	beq.n	800c2e4 <__mcmp+0x2c>
 800c2dc:	d305      	bcc.n	800c2ea <__mcmp+0x32>
 800c2de:	2201      	movs	r2, #1
 800c2e0:	4610      	mov	r0, r2
 800c2e2:	bd30      	pop	{r4, r5, pc}
 800c2e4:	4283      	cmp	r3, r0
 800c2e6:	d3f3      	bcc.n	800c2d0 <__mcmp+0x18>
 800c2e8:	e7fa      	b.n	800c2e0 <__mcmp+0x28>
 800c2ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c2ee:	e7f7      	b.n	800c2e0 <__mcmp+0x28>

0800c2f0 <__mdiff>:
 800c2f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2f4:	460c      	mov	r4, r1
 800c2f6:	4606      	mov	r6, r0
 800c2f8:	4611      	mov	r1, r2
 800c2fa:	4620      	mov	r0, r4
 800c2fc:	4690      	mov	r8, r2
 800c2fe:	f7ff ffdb 	bl	800c2b8 <__mcmp>
 800c302:	1e05      	subs	r5, r0, #0
 800c304:	d110      	bne.n	800c328 <__mdiff+0x38>
 800c306:	4629      	mov	r1, r5
 800c308:	4630      	mov	r0, r6
 800c30a:	f7ff fd59 	bl	800bdc0 <_Balloc>
 800c30e:	b930      	cbnz	r0, 800c31e <__mdiff+0x2e>
 800c310:	4b3a      	ldr	r3, [pc, #232]	; (800c3fc <__mdiff+0x10c>)
 800c312:	4602      	mov	r2, r0
 800c314:	f240 2137 	movw	r1, #567	; 0x237
 800c318:	4839      	ldr	r0, [pc, #228]	; (800c400 <__mdiff+0x110>)
 800c31a:	f000 fb0b 	bl	800c934 <__assert_func>
 800c31e:	2301      	movs	r3, #1
 800c320:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c324:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c328:	bfa4      	itt	ge
 800c32a:	4643      	movge	r3, r8
 800c32c:	46a0      	movge	r8, r4
 800c32e:	4630      	mov	r0, r6
 800c330:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c334:	bfa6      	itte	ge
 800c336:	461c      	movge	r4, r3
 800c338:	2500      	movge	r5, #0
 800c33a:	2501      	movlt	r5, #1
 800c33c:	f7ff fd40 	bl	800bdc0 <_Balloc>
 800c340:	b920      	cbnz	r0, 800c34c <__mdiff+0x5c>
 800c342:	4b2e      	ldr	r3, [pc, #184]	; (800c3fc <__mdiff+0x10c>)
 800c344:	4602      	mov	r2, r0
 800c346:	f240 2145 	movw	r1, #581	; 0x245
 800c34a:	e7e5      	b.n	800c318 <__mdiff+0x28>
 800c34c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c350:	6926      	ldr	r6, [r4, #16]
 800c352:	60c5      	str	r5, [r0, #12]
 800c354:	f104 0914 	add.w	r9, r4, #20
 800c358:	f108 0514 	add.w	r5, r8, #20
 800c35c:	f100 0e14 	add.w	lr, r0, #20
 800c360:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c364:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c368:	f108 0210 	add.w	r2, r8, #16
 800c36c:	46f2      	mov	sl, lr
 800c36e:	2100      	movs	r1, #0
 800c370:	f859 3b04 	ldr.w	r3, [r9], #4
 800c374:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c378:	fa11 f88b 	uxtah	r8, r1, fp
 800c37c:	b299      	uxth	r1, r3
 800c37e:	0c1b      	lsrs	r3, r3, #16
 800c380:	eba8 0801 	sub.w	r8, r8, r1
 800c384:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c388:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c38c:	fa1f f888 	uxth.w	r8, r8
 800c390:	1419      	asrs	r1, r3, #16
 800c392:	454e      	cmp	r6, r9
 800c394:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c398:	f84a 3b04 	str.w	r3, [sl], #4
 800c39c:	d8e8      	bhi.n	800c370 <__mdiff+0x80>
 800c39e:	1b33      	subs	r3, r6, r4
 800c3a0:	3b15      	subs	r3, #21
 800c3a2:	f023 0303 	bic.w	r3, r3, #3
 800c3a6:	3304      	adds	r3, #4
 800c3a8:	3415      	adds	r4, #21
 800c3aa:	42a6      	cmp	r6, r4
 800c3ac:	bf38      	it	cc
 800c3ae:	2304      	movcc	r3, #4
 800c3b0:	441d      	add	r5, r3
 800c3b2:	4473      	add	r3, lr
 800c3b4:	469e      	mov	lr, r3
 800c3b6:	462e      	mov	r6, r5
 800c3b8:	4566      	cmp	r6, ip
 800c3ba:	d30e      	bcc.n	800c3da <__mdiff+0xea>
 800c3bc:	f10c 0203 	add.w	r2, ip, #3
 800c3c0:	1b52      	subs	r2, r2, r5
 800c3c2:	f022 0203 	bic.w	r2, r2, #3
 800c3c6:	3d03      	subs	r5, #3
 800c3c8:	45ac      	cmp	ip, r5
 800c3ca:	bf38      	it	cc
 800c3cc:	2200      	movcc	r2, #0
 800c3ce:	4413      	add	r3, r2
 800c3d0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c3d4:	b17a      	cbz	r2, 800c3f6 <__mdiff+0x106>
 800c3d6:	6107      	str	r7, [r0, #16]
 800c3d8:	e7a4      	b.n	800c324 <__mdiff+0x34>
 800c3da:	f856 8b04 	ldr.w	r8, [r6], #4
 800c3de:	fa11 f288 	uxtah	r2, r1, r8
 800c3e2:	1414      	asrs	r4, r2, #16
 800c3e4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c3e8:	b292      	uxth	r2, r2
 800c3ea:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c3ee:	f84e 2b04 	str.w	r2, [lr], #4
 800c3f2:	1421      	asrs	r1, r4, #16
 800c3f4:	e7e0      	b.n	800c3b8 <__mdiff+0xc8>
 800c3f6:	3f01      	subs	r7, #1
 800c3f8:	e7ea      	b.n	800c3d0 <__mdiff+0xe0>
 800c3fa:	bf00      	nop
 800c3fc:	0800d100 	.word	0x0800d100
 800c400:	0800d111 	.word	0x0800d111

0800c404 <__d2b>:
 800c404:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c408:	460f      	mov	r7, r1
 800c40a:	2101      	movs	r1, #1
 800c40c:	ec59 8b10 	vmov	r8, r9, d0
 800c410:	4616      	mov	r6, r2
 800c412:	f7ff fcd5 	bl	800bdc0 <_Balloc>
 800c416:	4604      	mov	r4, r0
 800c418:	b930      	cbnz	r0, 800c428 <__d2b+0x24>
 800c41a:	4602      	mov	r2, r0
 800c41c:	4b24      	ldr	r3, [pc, #144]	; (800c4b0 <__d2b+0xac>)
 800c41e:	4825      	ldr	r0, [pc, #148]	; (800c4b4 <__d2b+0xb0>)
 800c420:	f240 310f 	movw	r1, #783	; 0x30f
 800c424:	f000 fa86 	bl	800c934 <__assert_func>
 800c428:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c42c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c430:	bb2d      	cbnz	r5, 800c47e <__d2b+0x7a>
 800c432:	9301      	str	r3, [sp, #4]
 800c434:	f1b8 0300 	subs.w	r3, r8, #0
 800c438:	d026      	beq.n	800c488 <__d2b+0x84>
 800c43a:	4668      	mov	r0, sp
 800c43c:	9300      	str	r3, [sp, #0]
 800c43e:	f7ff fd87 	bl	800bf50 <__lo0bits>
 800c442:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c446:	b1e8      	cbz	r0, 800c484 <__d2b+0x80>
 800c448:	f1c0 0320 	rsb	r3, r0, #32
 800c44c:	fa02 f303 	lsl.w	r3, r2, r3
 800c450:	430b      	orrs	r3, r1
 800c452:	40c2      	lsrs	r2, r0
 800c454:	6163      	str	r3, [r4, #20]
 800c456:	9201      	str	r2, [sp, #4]
 800c458:	9b01      	ldr	r3, [sp, #4]
 800c45a:	61a3      	str	r3, [r4, #24]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	bf14      	ite	ne
 800c460:	2202      	movne	r2, #2
 800c462:	2201      	moveq	r2, #1
 800c464:	6122      	str	r2, [r4, #16]
 800c466:	b1bd      	cbz	r5, 800c498 <__d2b+0x94>
 800c468:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c46c:	4405      	add	r5, r0
 800c46e:	603d      	str	r5, [r7, #0]
 800c470:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c474:	6030      	str	r0, [r6, #0]
 800c476:	4620      	mov	r0, r4
 800c478:	b003      	add	sp, #12
 800c47a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c47e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c482:	e7d6      	b.n	800c432 <__d2b+0x2e>
 800c484:	6161      	str	r1, [r4, #20]
 800c486:	e7e7      	b.n	800c458 <__d2b+0x54>
 800c488:	a801      	add	r0, sp, #4
 800c48a:	f7ff fd61 	bl	800bf50 <__lo0bits>
 800c48e:	9b01      	ldr	r3, [sp, #4]
 800c490:	6163      	str	r3, [r4, #20]
 800c492:	3020      	adds	r0, #32
 800c494:	2201      	movs	r2, #1
 800c496:	e7e5      	b.n	800c464 <__d2b+0x60>
 800c498:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c49c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c4a0:	6038      	str	r0, [r7, #0]
 800c4a2:	6918      	ldr	r0, [r3, #16]
 800c4a4:	f7ff fd34 	bl	800bf10 <__hi0bits>
 800c4a8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c4ac:	e7e2      	b.n	800c474 <__d2b+0x70>
 800c4ae:	bf00      	nop
 800c4b0:	0800d100 	.word	0x0800d100
 800c4b4:	0800d111 	.word	0x0800d111

0800c4b8 <__ssputs_r>:
 800c4b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4bc:	688e      	ldr	r6, [r1, #8]
 800c4be:	461f      	mov	r7, r3
 800c4c0:	42be      	cmp	r6, r7
 800c4c2:	680b      	ldr	r3, [r1, #0]
 800c4c4:	4682      	mov	sl, r0
 800c4c6:	460c      	mov	r4, r1
 800c4c8:	4690      	mov	r8, r2
 800c4ca:	d82c      	bhi.n	800c526 <__ssputs_r+0x6e>
 800c4cc:	898a      	ldrh	r2, [r1, #12]
 800c4ce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c4d2:	d026      	beq.n	800c522 <__ssputs_r+0x6a>
 800c4d4:	6965      	ldr	r5, [r4, #20]
 800c4d6:	6909      	ldr	r1, [r1, #16]
 800c4d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c4dc:	eba3 0901 	sub.w	r9, r3, r1
 800c4e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c4e4:	1c7b      	adds	r3, r7, #1
 800c4e6:	444b      	add	r3, r9
 800c4e8:	106d      	asrs	r5, r5, #1
 800c4ea:	429d      	cmp	r5, r3
 800c4ec:	bf38      	it	cc
 800c4ee:	461d      	movcc	r5, r3
 800c4f0:	0553      	lsls	r3, r2, #21
 800c4f2:	d527      	bpl.n	800c544 <__ssputs_r+0x8c>
 800c4f4:	4629      	mov	r1, r5
 800c4f6:	f7ff fbd7 	bl	800bca8 <_malloc_r>
 800c4fa:	4606      	mov	r6, r0
 800c4fc:	b360      	cbz	r0, 800c558 <__ssputs_r+0xa0>
 800c4fe:	6921      	ldr	r1, [r4, #16]
 800c500:	464a      	mov	r2, r9
 800c502:	f000 fa09 	bl	800c918 <memcpy>
 800c506:	89a3      	ldrh	r3, [r4, #12]
 800c508:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c50c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c510:	81a3      	strh	r3, [r4, #12]
 800c512:	6126      	str	r6, [r4, #16]
 800c514:	6165      	str	r5, [r4, #20]
 800c516:	444e      	add	r6, r9
 800c518:	eba5 0509 	sub.w	r5, r5, r9
 800c51c:	6026      	str	r6, [r4, #0]
 800c51e:	60a5      	str	r5, [r4, #8]
 800c520:	463e      	mov	r6, r7
 800c522:	42be      	cmp	r6, r7
 800c524:	d900      	bls.n	800c528 <__ssputs_r+0x70>
 800c526:	463e      	mov	r6, r7
 800c528:	6820      	ldr	r0, [r4, #0]
 800c52a:	4632      	mov	r2, r6
 800c52c:	4641      	mov	r1, r8
 800c52e:	f000 f9c9 	bl	800c8c4 <memmove>
 800c532:	68a3      	ldr	r3, [r4, #8]
 800c534:	1b9b      	subs	r3, r3, r6
 800c536:	60a3      	str	r3, [r4, #8]
 800c538:	6823      	ldr	r3, [r4, #0]
 800c53a:	4433      	add	r3, r6
 800c53c:	6023      	str	r3, [r4, #0]
 800c53e:	2000      	movs	r0, #0
 800c540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c544:	462a      	mov	r2, r5
 800c546:	f000 fa3b 	bl	800c9c0 <_realloc_r>
 800c54a:	4606      	mov	r6, r0
 800c54c:	2800      	cmp	r0, #0
 800c54e:	d1e0      	bne.n	800c512 <__ssputs_r+0x5a>
 800c550:	6921      	ldr	r1, [r4, #16]
 800c552:	4650      	mov	r0, sl
 800c554:	f7ff fb34 	bl	800bbc0 <_free_r>
 800c558:	230c      	movs	r3, #12
 800c55a:	f8ca 3000 	str.w	r3, [sl]
 800c55e:	89a3      	ldrh	r3, [r4, #12]
 800c560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c564:	81a3      	strh	r3, [r4, #12]
 800c566:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c56a:	e7e9      	b.n	800c540 <__ssputs_r+0x88>

0800c56c <_svfiprintf_r>:
 800c56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c570:	4698      	mov	r8, r3
 800c572:	898b      	ldrh	r3, [r1, #12]
 800c574:	061b      	lsls	r3, r3, #24
 800c576:	b09d      	sub	sp, #116	; 0x74
 800c578:	4607      	mov	r7, r0
 800c57a:	460d      	mov	r5, r1
 800c57c:	4614      	mov	r4, r2
 800c57e:	d50e      	bpl.n	800c59e <_svfiprintf_r+0x32>
 800c580:	690b      	ldr	r3, [r1, #16]
 800c582:	b963      	cbnz	r3, 800c59e <_svfiprintf_r+0x32>
 800c584:	2140      	movs	r1, #64	; 0x40
 800c586:	f7ff fb8f 	bl	800bca8 <_malloc_r>
 800c58a:	6028      	str	r0, [r5, #0]
 800c58c:	6128      	str	r0, [r5, #16]
 800c58e:	b920      	cbnz	r0, 800c59a <_svfiprintf_r+0x2e>
 800c590:	230c      	movs	r3, #12
 800c592:	603b      	str	r3, [r7, #0]
 800c594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c598:	e0d0      	b.n	800c73c <_svfiprintf_r+0x1d0>
 800c59a:	2340      	movs	r3, #64	; 0x40
 800c59c:	616b      	str	r3, [r5, #20]
 800c59e:	2300      	movs	r3, #0
 800c5a0:	9309      	str	r3, [sp, #36]	; 0x24
 800c5a2:	2320      	movs	r3, #32
 800c5a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c5a8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5ac:	2330      	movs	r3, #48	; 0x30
 800c5ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c754 <_svfiprintf_r+0x1e8>
 800c5b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c5b6:	f04f 0901 	mov.w	r9, #1
 800c5ba:	4623      	mov	r3, r4
 800c5bc:	469a      	mov	sl, r3
 800c5be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5c2:	b10a      	cbz	r2, 800c5c8 <_svfiprintf_r+0x5c>
 800c5c4:	2a25      	cmp	r2, #37	; 0x25
 800c5c6:	d1f9      	bne.n	800c5bc <_svfiprintf_r+0x50>
 800c5c8:	ebba 0b04 	subs.w	fp, sl, r4
 800c5cc:	d00b      	beq.n	800c5e6 <_svfiprintf_r+0x7a>
 800c5ce:	465b      	mov	r3, fp
 800c5d0:	4622      	mov	r2, r4
 800c5d2:	4629      	mov	r1, r5
 800c5d4:	4638      	mov	r0, r7
 800c5d6:	f7ff ff6f 	bl	800c4b8 <__ssputs_r>
 800c5da:	3001      	adds	r0, #1
 800c5dc:	f000 80a9 	beq.w	800c732 <_svfiprintf_r+0x1c6>
 800c5e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5e2:	445a      	add	r2, fp
 800c5e4:	9209      	str	r2, [sp, #36]	; 0x24
 800c5e6:	f89a 3000 	ldrb.w	r3, [sl]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	f000 80a1 	beq.w	800c732 <_svfiprintf_r+0x1c6>
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c5f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5fa:	f10a 0a01 	add.w	sl, sl, #1
 800c5fe:	9304      	str	r3, [sp, #16]
 800c600:	9307      	str	r3, [sp, #28]
 800c602:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c606:	931a      	str	r3, [sp, #104]	; 0x68
 800c608:	4654      	mov	r4, sl
 800c60a:	2205      	movs	r2, #5
 800c60c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c610:	4850      	ldr	r0, [pc, #320]	; (800c754 <_svfiprintf_r+0x1e8>)
 800c612:	f7f3 fe65 	bl	80002e0 <memchr>
 800c616:	9a04      	ldr	r2, [sp, #16]
 800c618:	b9d8      	cbnz	r0, 800c652 <_svfiprintf_r+0xe6>
 800c61a:	06d0      	lsls	r0, r2, #27
 800c61c:	bf44      	itt	mi
 800c61e:	2320      	movmi	r3, #32
 800c620:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c624:	0711      	lsls	r1, r2, #28
 800c626:	bf44      	itt	mi
 800c628:	232b      	movmi	r3, #43	; 0x2b
 800c62a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c62e:	f89a 3000 	ldrb.w	r3, [sl]
 800c632:	2b2a      	cmp	r3, #42	; 0x2a
 800c634:	d015      	beq.n	800c662 <_svfiprintf_r+0xf6>
 800c636:	9a07      	ldr	r2, [sp, #28]
 800c638:	4654      	mov	r4, sl
 800c63a:	2000      	movs	r0, #0
 800c63c:	f04f 0c0a 	mov.w	ip, #10
 800c640:	4621      	mov	r1, r4
 800c642:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c646:	3b30      	subs	r3, #48	; 0x30
 800c648:	2b09      	cmp	r3, #9
 800c64a:	d94d      	bls.n	800c6e8 <_svfiprintf_r+0x17c>
 800c64c:	b1b0      	cbz	r0, 800c67c <_svfiprintf_r+0x110>
 800c64e:	9207      	str	r2, [sp, #28]
 800c650:	e014      	b.n	800c67c <_svfiprintf_r+0x110>
 800c652:	eba0 0308 	sub.w	r3, r0, r8
 800c656:	fa09 f303 	lsl.w	r3, r9, r3
 800c65a:	4313      	orrs	r3, r2
 800c65c:	9304      	str	r3, [sp, #16]
 800c65e:	46a2      	mov	sl, r4
 800c660:	e7d2      	b.n	800c608 <_svfiprintf_r+0x9c>
 800c662:	9b03      	ldr	r3, [sp, #12]
 800c664:	1d19      	adds	r1, r3, #4
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	9103      	str	r1, [sp, #12]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	bfbb      	ittet	lt
 800c66e:	425b      	neglt	r3, r3
 800c670:	f042 0202 	orrlt.w	r2, r2, #2
 800c674:	9307      	strge	r3, [sp, #28]
 800c676:	9307      	strlt	r3, [sp, #28]
 800c678:	bfb8      	it	lt
 800c67a:	9204      	strlt	r2, [sp, #16]
 800c67c:	7823      	ldrb	r3, [r4, #0]
 800c67e:	2b2e      	cmp	r3, #46	; 0x2e
 800c680:	d10c      	bne.n	800c69c <_svfiprintf_r+0x130>
 800c682:	7863      	ldrb	r3, [r4, #1]
 800c684:	2b2a      	cmp	r3, #42	; 0x2a
 800c686:	d134      	bne.n	800c6f2 <_svfiprintf_r+0x186>
 800c688:	9b03      	ldr	r3, [sp, #12]
 800c68a:	1d1a      	adds	r2, r3, #4
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	9203      	str	r2, [sp, #12]
 800c690:	2b00      	cmp	r3, #0
 800c692:	bfb8      	it	lt
 800c694:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c698:	3402      	adds	r4, #2
 800c69a:	9305      	str	r3, [sp, #20]
 800c69c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c764 <_svfiprintf_r+0x1f8>
 800c6a0:	7821      	ldrb	r1, [r4, #0]
 800c6a2:	2203      	movs	r2, #3
 800c6a4:	4650      	mov	r0, sl
 800c6a6:	f7f3 fe1b 	bl	80002e0 <memchr>
 800c6aa:	b138      	cbz	r0, 800c6bc <_svfiprintf_r+0x150>
 800c6ac:	9b04      	ldr	r3, [sp, #16]
 800c6ae:	eba0 000a 	sub.w	r0, r0, sl
 800c6b2:	2240      	movs	r2, #64	; 0x40
 800c6b4:	4082      	lsls	r2, r0
 800c6b6:	4313      	orrs	r3, r2
 800c6b8:	3401      	adds	r4, #1
 800c6ba:	9304      	str	r3, [sp, #16]
 800c6bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6c0:	4825      	ldr	r0, [pc, #148]	; (800c758 <_svfiprintf_r+0x1ec>)
 800c6c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c6c6:	2206      	movs	r2, #6
 800c6c8:	f7f3 fe0a 	bl	80002e0 <memchr>
 800c6cc:	2800      	cmp	r0, #0
 800c6ce:	d038      	beq.n	800c742 <_svfiprintf_r+0x1d6>
 800c6d0:	4b22      	ldr	r3, [pc, #136]	; (800c75c <_svfiprintf_r+0x1f0>)
 800c6d2:	bb1b      	cbnz	r3, 800c71c <_svfiprintf_r+0x1b0>
 800c6d4:	9b03      	ldr	r3, [sp, #12]
 800c6d6:	3307      	adds	r3, #7
 800c6d8:	f023 0307 	bic.w	r3, r3, #7
 800c6dc:	3308      	adds	r3, #8
 800c6de:	9303      	str	r3, [sp, #12]
 800c6e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6e2:	4433      	add	r3, r6
 800c6e4:	9309      	str	r3, [sp, #36]	; 0x24
 800c6e6:	e768      	b.n	800c5ba <_svfiprintf_r+0x4e>
 800c6e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6ec:	460c      	mov	r4, r1
 800c6ee:	2001      	movs	r0, #1
 800c6f0:	e7a6      	b.n	800c640 <_svfiprintf_r+0xd4>
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	3401      	adds	r4, #1
 800c6f6:	9305      	str	r3, [sp, #20]
 800c6f8:	4619      	mov	r1, r3
 800c6fa:	f04f 0c0a 	mov.w	ip, #10
 800c6fe:	4620      	mov	r0, r4
 800c700:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c704:	3a30      	subs	r2, #48	; 0x30
 800c706:	2a09      	cmp	r2, #9
 800c708:	d903      	bls.n	800c712 <_svfiprintf_r+0x1a6>
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d0c6      	beq.n	800c69c <_svfiprintf_r+0x130>
 800c70e:	9105      	str	r1, [sp, #20]
 800c710:	e7c4      	b.n	800c69c <_svfiprintf_r+0x130>
 800c712:	fb0c 2101 	mla	r1, ip, r1, r2
 800c716:	4604      	mov	r4, r0
 800c718:	2301      	movs	r3, #1
 800c71a:	e7f0      	b.n	800c6fe <_svfiprintf_r+0x192>
 800c71c:	ab03      	add	r3, sp, #12
 800c71e:	9300      	str	r3, [sp, #0]
 800c720:	462a      	mov	r2, r5
 800c722:	4b0f      	ldr	r3, [pc, #60]	; (800c760 <_svfiprintf_r+0x1f4>)
 800c724:	a904      	add	r1, sp, #16
 800c726:	4638      	mov	r0, r7
 800c728:	f7fd ff06 	bl	800a538 <_printf_float>
 800c72c:	1c42      	adds	r2, r0, #1
 800c72e:	4606      	mov	r6, r0
 800c730:	d1d6      	bne.n	800c6e0 <_svfiprintf_r+0x174>
 800c732:	89ab      	ldrh	r3, [r5, #12]
 800c734:	065b      	lsls	r3, r3, #25
 800c736:	f53f af2d 	bmi.w	800c594 <_svfiprintf_r+0x28>
 800c73a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c73c:	b01d      	add	sp, #116	; 0x74
 800c73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c742:	ab03      	add	r3, sp, #12
 800c744:	9300      	str	r3, [sp, #0]
 800c746:	462a      	mov	r2, r5
 800c748:	4b05      	ldr	r3, [pc, #20]	; (800c760 <_svfiprintf_r+0x1f4>)
 800c74a:	a904      	add	r1, sp, #16
 800c74c:	4638      	mov	r0, r7
 800c74e:	f7fe f97b 	bl	800aa48 <_printf_i>
 800c752:	e7eb      	b.n	800c72c <_svfiprintf_r+0x1c0>
 800c754:	0800d26c 	.word	0x0800d26c
 800c758:	0800d276 	.word	0x0800d276
 800c75c:	0800a539 	.word	0x0800a539
 800c760:	0800c4b9 	.word	0x0800c4b9
 800c764:	0800d272 	.word	0x0800d272

0800c768 <__sflush_r>:
 800c768:	898a      	ldrh	r2, [r1, #12]
 800c76a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c76e:	4605      	mov	r5, r0
 800c770:	0710      	lsls	r0, r2, #28
 800c772:	460c      	mov	r4, r1
 800c774:	d458      	bmi.n	800c828 <__sflush_r+0xc0>
 800c776:	684b      	ldr	r3, [r1, #4]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	dc05      	bgt.n	800c788 <__sflush_r+0x20>
 800c77c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c77e:	2b00      	cmp	r3, #0
 800c780:	dc02      	bgt.n	800c788 <__sflush_r+0x20>
 800c782:	2000      	movs	r0, #0
 800c784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c788:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c78a:	2e00      	cmp	r6, #0
 800c78c:	d0f9      	beq.n	800c782 <__sflush_r+0x1a>
 800c78e:	2300      	movs	r3, #0
 800c790:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c794:	682f      	ldr	r7, [r5, #0]
 800c796:	6a21      	ldr	r1, [r4, #32]
 800c798:	602b      	str	r3, [r5, #0]
 800c79a:	d032      	beq.n	800c802 <__sflush_r+0x9a>
 800c79c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c79e:	89a3      	ldrh	r3, [r4, #12]
 800c7a0:	075a      	lsls	r2, r3, #29
 800c7a2:	d505      	bpl.n	800c7b0 <__sflush_r+0x48>
 800c7a4:	6863      	ldr	r3, [r4, #4]
 800c7a6:	1ac0      	subs	r0, r0, r3
 800c7a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c7aa:	b10b      	cbz	r3, 800c7b0 <__sflush_r+0x48>
 800c7ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c7ae:	1ac0      	subs	r0, r0, r3
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	4602      	mov	r2, r0
 800c7b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c7b6:	6a21      	ldr	r1, [r4, #32]
 800c7b8:	4628      	mov	r0, r5
 800c7ba:	47b0      	blx	r6
 800c7bc:	1c43      	adds	r3, r0, #1
 800c7be:	89a3      	ldrh	r3, [r4, #12]
 800c7c0:	d106      	bne.n	800c7d0 <__sflush_r+0x68>
 800c7c2:	6829      	ldr	r1, [r5, #0]
 800c7c4:	291d      	cmp	r1, #29
 800c7c6:	d82b      	bhi.n	800c820 <__sflush_r+0xb8>
 800c7c8:	4a29      	ldr	r2, [pc, #164]	; (800c870 <__sflush_r+0x108>)
 800c7ca:	410a      	asrs	r2, r1
 800c7cc:	07d6      	lsls	r6, r2, #31
 800c7ce:	d427      	bmi.n	800c820 <__sflush_r+0xb8>
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	6062      	str	r2, [r4, #4]
 800c7d4:	04d9      	lsls	r1, r3, #19
 800c7d6:	6922      	ldr	r2, [r4, #16]
 800c7d8:	6022      	str	r2, [r4, #0]
 800c7da:	d504      	bpl.n	800c7e6 <__sflush_r+0x7e>
 800c7dc:	1c42      	adds	r2, r0, #1
 800c7de:	d101      	bne.n	800c7e4 <__sflush_r+0x7c>
 800c7e0:	682b      	ldr	r3, [r5, #0]
 800c7e2:	b903      	cbnz	r3, 800c7e6 <__sflush_r+0x7e>
 800c7e4:	6560      	str	r0, [r4, #84]	; 0x54
 800c7e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c7e8:	602f      	str	r7, [r5, #0]
 800c7ea:	2900      	cmp	r1, #0
 800c7ec:	d0c9      	beq.n	800c782 <__sflush_r+0x1a>
 800c7ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7f2:	4299      	cmp	r1, r3
 800c7f4:	d002      	beq.n	800c7fc <__sflush_r+0x94>
 800c7f6:	4628      	mov	r0, r5
 800c7f8:	f7ff f9e2 	bl	800bbc0 <_free_r>
 800c7fc:	2000      	movs	r0, #0
 800c7fe:	6360      	str	r0, [r4, #52]	; 0x34
 800c800:	e7c0      	b.n	800c784 <__sflush_r+0x1c>
 800c802:	2301      	movs	r3, #1
 800c804:	4628      	mov	r0, r5
 800c806:	47b0      	blx	r6
 800c808:	1c41      	adds	r1, r0, #1
 800c80a:	d1c8      	bne.n	800c79e <__sflush_r+0x36>
 800c80c:	682b      	ldr	r3, [r5, #0]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d0c5      	beq.n	800c79e <__sflush_r+0x36>
 800c812:	2b1d      	cmp	r3, #29
 800c814:	d001      	beq.n	800c81a <__sflush_r+0xb2>
 800c816:	2b16      	cmp	r3, #22
 800c818:	d101      	bne.n	800c81e <__sflush_r+0xb6>
 800c81a:	602f      	str	r7, [r5, #0]
 800c81c:	e7b1      	b.n	800c782 <__sflush_r+0x1a>
 800c81e:	89a3      	ldrh	r3, [r4, #12]
 800c820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c824:	81a3      	strh	r3, [r4, #12]
 800c826:	e7ad      	b.n	800c784 <__sflush_r+0x1c>
 800c828:	690f      	ldr	r7, [r1, #16]
 800c82a:	2f00      	cmp	r7, #0
 800c82c:	d0a9      	beq.n	800c782 <__sflush_r+0x1a>
 800c82e:	0793      	lsls	r3, r2, #30
 800c830:	680e      	ldr	r6, [r1, #0]
 800c832:	bf08      	it	eq
 800c834:	694b      	ldreq	r3, [r1, #20]
 800c836:	600f      	str	r7, [r1, #0]
 800c838:	bf18      	it	ne
 800c83a:	2300      	movne	r3, #0
 800c83c:	eba6 0807 	sub.w	r8, r6, r7
 800c840:	608b      	str	r3, [r1, #8]
 800c842:	f1b8 0f00 	cmp.w	r8, #0
 800c846:	dd9c      	ble.n	800c782 <__sflush_r+0x1a>
 800c848:	6a21      	ldr	r1, [r4, #32]
 800c84a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c84c:	4643      	mov	r3, r8
 800c84e:	463a      	mov	r2, r7
 800c850:	4628      	mov	r0, r5
 800c852:	47b0      	blx	r6
 800c854:	2800      	cmp	r0, #0
 800c856:	dc06      	bgt.n	800c866 <__sflush_r+0xfe>
 800c858:	89a3      	ldrh	r3, [r4, #12]
 800c85a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c85e:	81a3      	strh	r3, [r4, #12]
 800c860:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c864:	e78e      	b.n	800c784 <__sflush_r+0x1c>
 800c866:	4407      	add	r7, r0
 800c868:	eba8 0800 	sub.w	r8, r8, r0
 800c86c:	e7e9      	b.n	800c842 <__sflush_r+0xda>
 800c86e:	bf00      	nop
 800c870:	dfbffffe 	.word	0xdfbffffe

0800c874 <_fflush_r>:
 800c874:	b538      	push	{r3, r4, r5, lr}
 800c876:	690b      	ldr	r3, [r1, #16]
 800c878:	4605      	mov	r5, r0
 800c87a:	460c      	mov	r4, r1
 800c87c:	b913      	cbnz	r3, 800c884 <_fflush_r+0x10>
 800c87e:	2500      	movs	r5, #0
 800c880:	4628      	mov	r0, r5
 800c882:	bd38      	pop	{r3, r4, r5, pc}
 800c884:	b118      	cbz	r0, 800c88e <_fflush_r+0x1a>
 800c886:	6a03      	ldr	r3, [r0, #32]
 800c888:	b90b      	cbnz	r3, 800c88e <_fflush_r+0x1a>
 800c88a:	f7fe fa8b 	bl	800ada4 <__sinit>
 800c88e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d0f3      	beq.n	800c87e <_fflush_r+0xa>
 800c896:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c898:	07d0      	lsls	r0, r2, #31
 800c89a:	d404      	bmi.n	800c8a6 <_fflush_r+0x32>
 800c89c:	0599      	lsls	r1, r3, #22
 800c89e:	d402      	bmi.n	800c8a6 <_fflush_r+0x32>
 800c8a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8a2:	f7fe fb96 	bl	800afd2 <__retarget_lock_acquire_recursive>
 800c8a6:	4628      	mov	r0, r5
 800c8a8:	4621      	mov	r1, r4
 800c8aa:	f7ff ff5d 	bl	800c768 <__sflush_r>
 800c8ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c8b0:	07da      	lsls	r2, r3, #31
 800c8b2:	4605      	mov	r5, r0
 800c8b4:	d4e4      	bmi.n	800c880 <_fflush_r+0xc>
 800c8b6:	89a3      	ldrh	r3, [r4, #12]
 800c8b8:	059b      	lsls	r3, r3, #22
 800c8ba:	d4e1      	bmi.n	800c880 <_fflush_r+0xc>
 800c8bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8be:	f7fe fb89 	bl	800afd4 <__retarget_lock_release_recursive>
 800c8c2:	e7dd      	b.n	800c880 <_fflush_r+0xc>

0800c8c4 <memmove>:
 800c8c4:	4288      	cmp	r0, r1
 800c8c6:	b510      	push	{r4, lr}
 800c8c8:	eb01 0402 	add.w	r4, r1, r2
 800c8cc:	d902      	bls.n	800c8d4 <memmove+0x10>
 800c8ce:	4284      	cmp	r4, r0
 800c8d0:	4623      	mov	r3, r4
 800c8d2:	d807      	bhi.n	800c8e4 <memmove+0x20>
 800c8d4:	1e43      	subs	r3, r0, #1
 800c8d6:	42a1      	cmp	r1, r4
 800c8d8:	d008      	beq.n	800c8ec <memmove+0x28>
 800c8da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c8de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c8e2:	e7f8      	b.n	800c8d6 <memmove+0x12>
 800c8e4:	4402      	add	r2, r0
 800c8e6:	4601      	mov	r1, r0
 800c8e8:	428a      	cmp	r2, r1
 800c8ea:	d100      	bne.n	800c8ee <memmove+0x2a>
 800c8ec:	bd10      	pop	{r4, pc}
 800c8ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c8f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c8f6:	e7f7      	b.n	800c8e8 <memmove+0x24>

0800c8f8 <_sbrk_r>:
 800c8f8:	b538      	push	{r3, r4, r5, lr}
 800c8fa:	4d06      	ldr	r5, [pc, #24]	; (800c914 <_sbrk_r+0x1c>)
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	4604      	mov	r4, r0
 800c900:	4608      	mov	r0, r1
 800c902:	602b      	str	r3, [r5, #0]
 800c904:	f7f4 fc10 	bl	8001128 <_sbrk>
 800c908:	1c43      	adds	r3, r0, #1
 800c90a:	d102      	bne.n	800c912 <_sbrk_r+0x1a>
 800c90c:	682b      	ldr	r3, [r5, #0]
 800c90e:	b103      	cbz	r3, 800c912 <_sbrk_r+0x1a>
 800c910:	6023      	str	r3, [r4, #0]
 800c912:	bd38      	pop	{r3, r4, r5, pc}
 800c914:	240004c8 	.word	0x240004c8

0800c918 <memcpy>:
 800c918:	440a      	add	r2, r1
 800c91a:	4291      	cmp	r1, r2
 800c91c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c920:	d100      	bne.n	800c924 <memcpy+0xc>
 800c922:	4770      	bx	lr
 800c924:	b510      	push	{r4, lr}
 800c926:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c92a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c92e:	4291      	cmp	r1, r2
 800c930:	d1f9      	bne.n	800c926 <memcpy+0xe>
 800c932:	bd10      	pop	{r4, pc}

0800c934 <__assert_func>:
 800c934:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c936:	4614      	mov	r4, r2
 800c938:	461a      	mov	r2, r3
 800c93a:	4b09      	ldr	r3, [pc, #36]	; (800c960 <__assert_func+0x2c>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	4605      	mov	r5, r0
 800c940:	68d8      	ldr	r0, [r3, #12]
 800c942:	b14c      	cbz	r4, 800c958 <__assert_func+0x24>
 800c944:	4b07      	ldr	r3, [pc, #28]	; (800c964 <__assert_func+0x30>)
 800c946:	9100      	str	r1, [sp, #0]
 800c948:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c94c:	4906      	ldr	r1, [pc, #24]	; (800c968 <__assert_func+0x34>)
 800c94e:	462b      	mov	r3, r5
 800c950:	f000 f872 	bl	800ca38 <fiprintf>
 800c954:	f000 f882 	bl	800ca5c <abort>
 800c958:	4b04      	ldr	r3, [pc, #16]	; (800c96c <__assert_func+0x38>)
 800c95a:	461c      	mov	r4, r3
 800c95c:	e7f3      	b.n	800c946 <__assert_func+0x12>
 800c95e:	bf00      	nop
 800c960:	24000068 	.word	0x24000068
 800c964:	0800d287 	.word	0x0800d287
 800c968:	0800d294 	.word	0x0800d294
 800c96c:	0800d2c2 	.word	0x0800d2c2

0800c970 <_calloc_r>:
 800c970:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c972:	fba1 2402 	umull	r2, r4, r1, r2
 800c976:	b94c      	cbnz	r4, 800c98c <_calloc_r+0x1c>
 800c978:	4611      	mov	r1, r2
 800c97a:	9201      	str	r2, [sp, #4]
 800c97c:	f7ff f994 	bl	800bca8 <_malloc_r>
 800c980:	9a01      	ldr	r2, [sp, #4]
 800c982:	4605      	mov	r5, r0
 800c984:	b930      	cbnz	r0, 800c994 <_calloc_r+0x24>
 800c986:	4628      	mov	r0, r5
 800c988:	b003      	add	sp, #12
 800c98a:	bd30      	pop	{r4, r5, pc}
 800c98c:	220c      	movs	r2, #12
 800c98e:	6002      	str	r2, [r0, #0]
 800c990:	2500      	movs	r5, #0
 800c992:	e7f8      	b.n	800c986 <_calloc_r+0x16>
 800c994:	4621      	mov	r1, r4
 800c996:	f7fe fa9e 	bl	800aed6 <memset>
 800c99a:	e7f4      	b.n	800c986 <_calloc_r+0x16>

0800c99c <__ascii_mbtowc>:
 800c99c:	b082      	sub	sp, #8
 800c99e:	b901      	cbnz	r1, 800c9a2 <__ascii_mbtowc+0x6>
 800c9a0:	a901      	add	r1, sp, #4
 800c9a2:	b142      	cbz	r2, 800c9b6 <__ascii_mbtowc+0x1a>
 800c9a4:	b14b      	cbz	r3, 800c9ba <__ascii_mbtowc+0x1e>
 800c9a6:	7813      	ldrb	r3, [r2, #0]
 800c9a8:	600b      	str	r3, [r1, #0]
 800c9aa:	7812      	ldrb	r2, [r2, #0]
 800c9ac:	1e10      	subs	r0, r2, #0
 800c9ae:	bf18      	it	ne
 800c9b0:	2001      	movne	r0, #1
 800c9b2:	b002      	add	sp, #8
 800c9b4:	4770      	bx	lr
 800c9b6:	4610      	mov	r0, r2
 800c9b8:	e7fb      	b.n	800c9b2 <__ascii_mbtowc+0x16>
 800c9ba:	f06f 0001 	mvn.w	r0, #1
 800c9be:	e7f8      	b.n	800c9b2 <__ascii_mbtowc+0x16>

0800c9c0 <_realloc_r>:
 800c9c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9c4:	4680      	mov	r8, r0
 800c9c6:	4614      	mov	r4, r2
 800c9c8:	460e      	mov	r6, r1
 800c9ca:	b921      	cbnz	r1, 800c9d6 <_realloc_r+0x16>
 800c9cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c9d0:	4611      	mov	r1, r2
 800c9d2:	f7ff b969 	b.w	800bca8 <_malloc_r>
 800c9d6:	b92a      	cbnz	r2, 800c9e4 <_realloc_r+0x24>
 800c9d8:	f7ff f8f2 	bl	800bbc0 <_free_r>
 800c9dc:	4625      	mov	r5, r4
 800c9de:	4628      	mov	r0, r5
 800c9e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9e4:	f000 f841 	bl	800ca6a <_malloc_usable_size_r>
 800c9e8:	4284      	cmp	r4, r0
 800c9ea:	4607      	mov	r7, r0
 800c9ec:	d802      	bhi.n	800c9f4 <_realloc_r+0x34>
 800c9ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c9f2:	d812      	bhi.n	800ca1a <_realloc_r+0x5a>
 800c9f4:	4621      	mov	r1, r4
 800c9f6:	4640      	mov	r0, r8
 800c9f8:	f7ff f956 	bl	800bca8 <_malloc_r>
 800c9fc:	4605      	mov	r5, r0
 800c9fe:	2800      	cmp	r0, #0
 800ca00:	d0ed      	beq.n	800c9de <_realloc_r+0x1e>
 800ca02:	42bc      	cmp	r4, r7
 800ca04:	4622      	mov	r2, r4
 800ca06:	4631      	mov	r1, r6
 800ca08:	bf28      	it	cs
 800ca0a:	463a      	movcs	r2, r7
 800ca0c:	f7ff ff84 	bl	800c918 <memcpy>
 800ca10:	4631      	mov	r1, r6
 800ca12:	4640      	mov	r0, r8
 800ca14:	f7ff f8d4 	bl	800bbc0 <_free_r>
 800ca18:	e7e1      	b.n	800c9de <_realloc_r+0x1e>
 800ca1a:	4635      	mov	r5, r6
 800ca1c:	e7df      	b.n	800c9de <_realloc_r+0x1e>

0800ca1e <__ascii_wctomb>:
 800ca1e:	b149      	cbz	r1, 800ca34 <__ascii_wctomb+0x16>
 800ca20:	2aff      	cmp	r2, #255	; 0xff
 800ca22:	bf85      	ittet	hi
 800ca24:	238a      	movhi	r3, #138	; 0x8a
 800ca26:	6003      	strhi	r3, [r0, #0]
 800ca28:	700a      	strbls	r2, [r1, #0]
 800ca2a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ca2e:	bf98      	it	ls
 800ca30:	2001      	movls	r0, #1
 800ca32:	4770      	bx	lr
 800ca34:	4608      	mov	r0, r1
 800ca36:	4770      	bx	lr

0800ca38 <fiprintf>:
 800ca38:	b40e      	push	{r1, r2, r3}
 800ca3a:	b503      	push	{r0, r1, lr}
 800ca3c:	4601      	mov	r1, r0
 800ca3e:	ab03      	add	r3, sp, #12
 800ca40:	4805      	ldr	r0, [pc, #20]	; (800ca58 <fiprintf+0x20>)
 800ca42:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca46:	6800      	ldr	r0, [r0, #0]
 800ca48:	9301      	str	r3, [sp, #4]
 800ca4a:	f000 f83f 	bl	800cacc <_vfiprintf_r>
 800ca4e:	b002      	add	sp, #8
 800ca50:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca54:	b003      	add	sp, #12
 800ca56:	4770      	bx	lr
 800ca58:	24000068 	.word	0x24000068

0800ca5c <abort>:
 800ca5c:	b508      	push	{r3, lr}
 800ca5e:	2006      	movs	r0, #6
 800ca60:	f000 fa0c 	bl	800ce7c <raise>
 800ca64:	2001      	movs	r0, #1
 800ca66:	f7f4 fae7 	bl	8001038 <_exit>

0800ca6a <_malloc_usable_size_r>:
 800ca6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca6e:	1f18      	subs	r0, r3, #4
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	bfbc      	itt	lt
 800ca74:	580b      	ldrlt	r3, [r1, r0]
 800ca76:	18c0      	addlt	r0, r0, r3
 800ca78:	4770      	bx	lr

0800ca7a <__sfputc_r>:
 800ca7a:	6893      	ldr	r3, [r2, #8]
 800ca7c:	3b01      	subs	r3, #1
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	b410      	push	{r4}
 800ca82:	6093      	str	r3, [r2, #8]
 800ca84:	da08      	bge.n	800ca98 <__sfputc_r+0x1e>
 800ca86:	6994      	ldr	r4, [r2, #24]
 800ca88:	42a3      	cmp	r3, r4
 800ca8a:	db01      	blt.n	800ca90 <__sfputc_r+0x16>
 800ca8c:	290a      	cmp	r1, #10
 800ca8e:	d103      	bne.n	800ca98 <__sfputc_r+0x1e>
 800ca90:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca94:	f000 b934 	b.w	800cd00 <__swbuf_r>
 800ca98:	6813      	ldr	r3, [r2, #0]
 800ca9a:	1c58      	adds	r0, r3, #1
 800ca9c:	6010      	str	r0, [r2, #0]
 800ca9e:	7019      	strb	r1, [r3, #0]
 800caa0:	4608      	mov	r0, r1
 800caa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800caa6:	4770      	bx	lr

0800caa8 <__sfputs_r>:
 800caa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caaa:	4606      	mov	r6, r0
 800caac:	460f      	mov	r7, r1
 800caae:	4614      	mov	r4, r2
 800cab0:	18d5      	adds	r5, r2, r3
 800cab2:	42ac      	cmp	r4, r5
 800cab4:	d101      	bne.n	800caba <__sfputs_r+0x12>
 800cab6:	2000      	movs	r0, #0
 800cab8:	e007      	b.n	800caca <__sfputs_r+0x22>
 800caba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cabe:	463a      	mov	r2, r7
 800cac0:	4630      	mov	r0, r6
 800cac2:	f7ff ffda 	bl	800ca7a <__sfputc_r>
 800cac6:	1c43      	adds	r3, r0, #1
 800cac8:	d1f3      	bne.n	800cab2 <__sfputs_r+0xa>
 800caca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cacc <_vfiprintf_r>:
 800cacc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cad0:	460d      	mov	r5, r1
 800cad2:	b09d      	sub	sp, #116	; 0x74
 800cad4:	4614      	mov	r4, r2
 800cad6:	4698      	mov	r8, r3
 800cad8:	4606      	mov	r6, r0
 800cada:	b118      	cbz	r0, 800cae4 <_vfiprintf_r+0x18>
 800cadc:	6a03      	ldr	r3, [r0, #32]
 800cade:	b90b      	cbnz	r3, 800cae4 <_vfiprintf_r+0x18>
 800cae0:	f7fe f960 	bl	800ada4 <__sinit>
 800cae4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cae6:	07d9      	lsls	r1, r3, #31
 800cae8:	d405      	bmi.n	800caf6 <_vfiprintf_r+0x2a>
 800caea:	89ab      	ldrh	r3, [r5, #12]
 800caec:	059a      	lsls	r2, r3, #22
 800caee:	d402      	bmi.n	800caf6 <_vfiprintf_r+0x2a>
 800caf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800caf2:	f7fe fa6e 	bl	800afd2 <__retarget_lock_acquire_recursive>
 800caf6:	89ab      	ldrh	r3, [r5, #12]
 800caf8:	071b      	lsls	r3, r3, #28
 800cafa:	d501      	bpl.n	800cb00 <_vfiprintf_r+0x34>
 800cafc:	692b      	ldr	r3, [r5, #16]
 800cafe:	b99b      	cbnz	r3, 800cb28 <_vfiprintf_r+0x5c>
 800cb00:	4629      	mov	r1, r5
 800cb02:	4630      	mov	r0, r6
 800cb04:	f000 f93a 	bl	800cd7c <__swsetup_r>
 800cb08:	b170      	cbz	r0, 800cb28 <_vfiprintf_r+0x5c>
 800cb0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb0c:	07dc      	lsls	r4, r3, #31
 800cb0e:	d504      	bpl.n	800cb1a <_vfiprintf_r+0x4e>
 800cb10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb14:	b01d      	add	sp, #116	; 0x74
 800cb16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb1a:	89ab      	ldrh	r3, [r5, #12]
 800cb1c:	0598      	lsls	r0, r3, #22
 800cb1e:	d4f7      	bmi.n	800cb10 <_vfiprintf_r+0x44>
 800cb20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb22:	f7fe fa57 	bl	800afd4 <__retarget_lock_release_recursive>
 800cb26:	e7f3      	b.n	800cb10 <_vfiprintf_r+0x44>
 800cb28:	2300      	movs	r3, #0
 800cb2a:	9309      	str	r3, [sp, #36]	; 0x24
 800cb2c:	2320      	movs	r3, #32
 800cb2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb32:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb36:	2330      	movs	r3, #48	; 0x30
 800cb38:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ccec <_vfiprintf_r+0x220>
 800cb3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb40:	f04f 0901 	mov.w	r9, #1
 800cb44:	4623      	mov	r3, r4
 800cb46:	469a      	mov	sl, r3
 800cb48:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb4c:	b10a      	cbz	r2, 800cb52 <_vfiprintf_r+0x86>
 800cb4e:	2a25      	cmp	r2, #37	; 0x25
 800cb50:	d1f9      	bne.n	800cb46 <_vfiprintf_r+0x7a>
 800cb52:	ebba 0b04 	subs.w	fp, sl, r4
 800cb56:	d00b      	beq.n	800cb70 <_vfiprintf_r+0xa4>
 800cb58:	465b      	mov	r3, fp
 800cb5a:	4622      	mov	r2, r4
 800cb5c:	4629      	mov	r1, r5
 800cb5e:	4630      	mov	r0, r6
 800cb60:	f7ff ffa2 	bl	800caa8 <__sfputs_r>
 800cb64:	3001      	adds	r0, #1
 800cb66:	f000 80a9 	beq.w	800ccbc <_vfiprintf_r+0x1f0>
 800cb6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb6c:	445a      	add	r2, fp
 800cb6e:	9209      	str	r2, [sp, #36]	; 0x24
 800cb70:	f89a 3000 	ldrb.w	r3, [sl]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	f000 80a1 	beq.w	800ccbc <_vfiprintf_r+0x1f0>
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb84:	f10a 0a01 	add.w	sl, sl, #1
 800cb88:	9304      	str	r3, [sp, #16]
 800cb8a:	9307      	str	r3, [sp, #28]
 800cb8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb90:	931a      	str	r3, [sp, #104]	; 0x68
 800cb92:	4654      	mov	r4, sl
 800cb94:	2205      	movs	r2, #5
 800cb96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb9a:	4854      	ldr	r0, [pc, #336]	; (800ccec <_vfiprintf_r+0x220>)
 800cb9c:	f7f3 fba0 	bl	80002e0 <memchr>
 800cba0:	9a04      	ldr	r2, [sp, #16]
 800cba2:	b9d8      	cbnz	r0, 800cbdc <_vfiprintf_r+0x110>
 800cba4:	06d1      	lsls	r1, r2, #27
 800cba6:	bf44      	itt	mi
 800cba8:	2320      	movmi	r3, #32
 800cbaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbae:	0713      	lsls	r3, r2, #28
 800cbb0:	bf44      	itt	mi
 800cbb2:	232b      	movmi	r3, #43	; 0x2b
 800cbb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbb8:	f89a 3000 	ldrb.w	r3, [sl]
 800cbbc:	2b2a      	cmp	r3, #42	; 0x2a
 800cbbe:	d015      	beq.n	800cbec <_vfiprintf_r+0x120>
 800cbc0:	9a07      	ldr	r2, [sp, #28]
 800cbc2:	4654      	mov	r4, sl
 800cbc4:	2000      	movs	r0, #0
 800cbc6:	f04f 0c0a 	mov.w	ip, #10
 800cbca:	4621      	mov	r1, r4
 800cbcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbd0:	3b30      	subs	r3, #48	; 0x30
 800cbd2:	2b09      	cmp	r3, #9
 800cbd4:	d94d      	bls.n	800cc72 <_vfiprintf_r+0x1a6>
 800cbd6:	b1b0      	cbz	r0, 800cc06 <_vfiprintf_r+0x13a>
 800cbd8:	9207      	str	r2, [sp, #28]
 800cbda:	e014      	b.n	800cc06 <_vfiprintf_r+0x13a>
 800cbdc:	eba0 0308 	sub.w	r3, r0, r8
 800cbe0:	fa09 f303 	lsl.w	r3, r9, r3
 800cbe4:	4313      	orrs	r3, r2
 800cbe6:	9304      	str	r3, [sp, #16]
 800cbe8:	46a2      	mov	sl, r4
 800cbea:	e7d2      	b.n	800cb92 <_vfiprintf_r+0xc6>
 800cbec:	9b03      	ldr	r3, [sp, #12]
 800cbee:	1d19      	adds	r1, r3, #4
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	9103      	str	r1, [sp, #12]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	bfbb      	ittet	lt
 800cbf8:	425b      	neglt	r3, r3
 800cbfa:	f042 0202 	orrlt.w	r2, r2, #2
 800cbfe:	9307      	strge	r3, [sp, #28]
 800cc00:	9307      	strlt	r3, [sp, #28]
 800cc02:	bfb8      	it	lt
 800cc04:	9204      	strlt	r2, [sp, #16]
 800cc06:	7823      	ldrb	r3, [r4, #0]
 800cc08:	2b2e      	cmp	r3, #46	; 0x2e
 800cc0a:	d10c      	bne.n	800cc26 <_vfiprintf_r+0x15a>
 800cc0c:	7863      	ldrb	r3, [r4, #1]
 800cc0e:	2b2a      	cmp	r3, #42	; 0x2a
 800cc10:	d134      	bne.n	800cc7c <_vfiprintf_r+0x1b0>
 800cc12:	9b03      	ldr	r3, [sp, #12]
 800cc14:	1d1a      	adds	r2, r3, #4
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	9203      	str	r2, [sp, #12]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	bfb8      	it	lt
 800cc1e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cc22:	3402      	adds	r4, #2
 800cc24:	9305      	str	r3, [sp, #20]
 800cc26:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ccfc <_vfiprintf_r+0x230>
 800cc2a:	7821      	ldrb	r1, [r4, #0]
 800cc2c:	2203      	movs	r2, #3
 800cc2e:	4650      	mov	r0, sl
 800cc30:	f7f3 fb56 	bl	80002e0 <memchr>
 800cc34:	b138      	cbz	r0, 800cc46 <_vfiprintf_r+0x17a>
 800cc36:	9b04      	ldr	r3, [sp, #16]
 800cc38:	eba0 000a 	sub.w	r0, r0, sl
 800cc3c:	2240      	movs	r2, #64	; 0x40
 800cc3e:	4082      	lsls	r2, r0
 800cc40:	4313      	orrs	r3, r2
 800cc42:	3401      	adds	r4, #1
 800cc44:	9304      	str	r3, [sp, #16]
 800cc46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc4a:	4829      	ldr	r0, [pc, #164]	; (800ccf0 <_vfiprintf_r+0x224>)
 800cc4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc50:	2206      	movs	r2, #6
 800cc52:	f7f3 fb45 	bl	80002e0 <memchr>
 800cc56:	2800      	cmp	r0, #0
 800cc58:	d03f      	beq.n	800ccda <_vfiprintf_r+0x20e>
 800cc5a:	4b26      	ldr	r3, [pc, #152]	; (800ccf4 <_vfiprintf_r+0x228>)
 800cc5c:	bb1b      	cbnz	r3, 800cca6 <_vfiprintf_r+0x1da>
 800cc5e:	9b03      	ldr	r3, [sp, #12]
 800cc60:	3307      	adds	r3, #7
 800cc62:	f023 0307 	bic.w	r3, r3, #7
 800cc66:	3308      	adds	r3, #8
 800cc68:	9303      	str	r3, [sp, #12]
 800cc6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc6c:	443b      	add	r3, r7
 800cc6e:	9309      	str	r3, [sp, #36]	; 0x24
 800cc70:	e768      	b.n	800cb44 <_vfiprintf_r+0x78>
 800cc72:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc76:	460c      	mov	r4, r1
 800cc78:	2001      	movs	r0, #1
 800cc7a:	e7a6      	b.n	800cbca <_vfiprintf_r+0xfe>
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	3401      	adds	r4, #1
 800cc80:	9305      	str	r3, [sp, #20]
 800cc82:	4619      	mov	r1, r3
 800cc84:	f04f 0c0a 	mov.w	ip, #10
 800cc88:	4620      	mov	r0, r4
 800cc8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc8e:	3a30      	subs	r2, #48	; 0x30
 800cc90:	2a09      	cmp	r2, #9
 800cc92:	d903      	bls.n	800cc9c <_vfiprintf_r+0x1d0>
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d0c6      	beq.n	800cc26 <_vfiprintf_r+0x15a>
 800cc98:	9105      	str	r1, [sp, #20]
 800cc9a:	e7c4      	b.n	800cc26 <_vfiprintf_r+0x15a>
 800cc9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cca0:	4604      	mov	r4, r0
 800cca2:	2301      	movs	r3, #1
 800cca4:	e7f0      	b.n	800cc88 <_vfiprintf_r+0x1bc>
 800cca6:	ab03      	add	r3, sp, #12
 800cca8:	9300      	str	r3, [sp, #0]
 800ccaa:	462a      	mov	r2, r5
 800ccac:	4b12      	ldr	r3, [pc, #72]	; (800ccf8 <_vfiprintf_r+0x22c>)
 800ccae:	a904      	add	r1, sp, #16
 800ccb0:	4630      	mov	r0, r6
 800ccb2:	f7fd fc41 	bl	800a538 <_printf_float>
 800ccb6:	4607      	mov	r7, r0
 800ccb8:	1c78      	adds	r0, r7, #1
 800ccba:	d1d6      	bne.n	800cc6a <_vfiprintf_r+0x19e>
 800ccbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ccbe:	07d9      	lsls	r1, r3, #31
 800ccc0:	d405      	bmi.n	800ccce <_vfiprintf_r+0x202>
 800ccc2:	89ab      	ldrh	r3, [r5, #12]
 800ccc4:	059a      	lsls	r2, r3, #22
 800ccc6:	d402      	bmi.n	800ccce <_vfiprintf_r+0x202>
 800ccc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ccca:	f7fe f983 	bl	800afd4 <__retarget_lock_release_recursive>
 800ccce:	89ab      	ldrh	r3, [r5, #12]
 800ccd0:	065b      	lsls	r3, r3, #25
 800ccd2:	f53f af1d 	bmi.w	800cb10 <_vfiprintf_r+0x44>
 800ccd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ccd8:	e71c      	b.n	800cb14 <_vfiprintf_r+0x48>
 800ccda:	ab03      	add	r3, sp, #12
 800ccdc:	9300      	str	r3, [sp, #0]
 800ccde:	462a      	mov	r2, r5
 800cce0:	4b05      	ldr	r3, [pc, #20]	; (800ccf8 <_vfiprintf_r+0x22c>)
 800cce2:	a904      	add	r1, sp, #16
 800cce4:	4630      	mov	r0, r6
 800cce6:	f7fd feaf 	bl	800aa48 <_printf_i>
 800ccea:	e7e4      	b.n	800ccb6 <_vfiprintf_r+0x1ea>
 800ccec:	0800d26c 	.word	0x0800d26c
 800ccf0:	0800d276 	.word	0x0800d276
 800ccf4:	0800a539 	.word	0x0800a539
 800ccf8:	0800caa9 	.word	0x0800caa9
 800ccfc:	0800d272 	.word	0x0800d272

0800cd00 <__swbuf_r>:
 800cd00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd02:	460e      	mov	r6, r1
 800cd04:	4614      	mov	r4, r2
 800cd06:	4605      	mov	r5, r0
 800cd08:	b118      	cbz	r0, 800cd12 <__swbuf_r+0x12>
 800cd0a:	6a03      	ldr	r3, [r0, #32]
 800cd0c:	b90b      	cbnz	r3, 800cd12 <__swbuf_r+0x12>
 800cd0e:	f7fe f849 	bl	800ada4 <__sinit>
 800cd12:	69a3      	ldr	r3, [r4, #24]
 800cd14:	60a3      	str	r3, [r4, #8]
 800cd16:	89a3      	ldrh	r3, [r4, #12]
 800cd18:	071a      	lsls	r2, r3, #28
 800cd1a:	d525      	bpl.n	800cd68 <__swbuf_r+0x68>
 800cd1c:	6923      	ldr	r3, [r4, #16]
 800cd1e:	b31b      	cbz	r3, 800cd68 <__swbuf_r+0x68>
 800cd20:	6823      	ldr	r3, [r4, #0]
 800cd22:	6922      	ldr	r2, [r4, #16]
 800cd24:	1a98      	subs	r0, r3, r2
 800cd26:	6963      	ldr	r3, [r4, #20]
 800cd28:	b2f6      	uxtb	r6, r6
 800cd2a:	4283      	cmp	r3, r0
 800cd2c:	4637      	mov	r7, r6
 800cd2e:	dc04      	bgt.n	800cd3a <__swbuf_r+0x3a>
 800cd30:	4621      	mov	r1, r4
 800cd32:	4628      	mov	r0, r5
 800cd34:	f7ff fd9e 	bl	800c874 <_fflush_r>
 800cd38:	b9e0      	cbnz	r0, 800cd74 <__swbuf_r+0x74>
 800cd3a:	68a3      	ldr	r3, [r4, #8]
 800cd3c:	3b01      	subs	r3, #1
 800cd3e:	60a3      	str	r3, [r4, #8]
 800cd40:	6823      	ldr	r3, [r4, #0]
 800cd42:	1c5a      	adds	r2, r3, #1
 800cd44:	6022      	str	r2, [r4, #0]
 800cd46:	701e      	strb	r6, [r3, #0]
 800cd48:	6962      	ldr	r2, [r4, #20]
 800cd4a:	1c43      	adds	r3, r0, #1
 800cd4c:	429a      	cmp	r2, r3
 800cd4e:	d004      	beq.n	800cd5a <__swbuf_r+0x5a>
 800cd50:	89a3      	ldrh	r3, [r4, #12]
 800cd52:	07db      	lsls	r3, r3, #31
 800cd54:	d506      	bpl.n	800cd64 <__swbuf_r+0x64>
 800cd56:	2e0a      	cmp	r6, #10
 800cd58:	d104      	bne.n	800cd64 <__swbuf_r+0x64>
 800cd5a:	4621      	mov	r1, r4
 800cd5c:	4628      	mov	r0, r5
 800cd5e:	f7ff fd89 	bl	800c874 <_fflush_r>
 800cd62:	b938      	cbnz	r0, 800cd74 <__swbuf_r+0x74>
 800cd64:	4638      	mov	r0, r7
 800cd66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd68:	4621      	mov	r1, r4
 800cd6a:	4628      	mov	r0, r5
 800cd6c:	f000 f806 	bl	800cd7c <__swsetup_r>
 800cd70:	2800      	cmp	r0, #0
 800cd72:	d0d5      	beq.n	800cd20 <__swbuf_r+0x20>
 800cd74:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800cd78:	e7f4      	b.n	800cd64 <__swbuf_r+0x64>
	...

0800cd7c <__swsetup_r>:
 800cd7c:	b538      	push	{r3, r4, r5, lr}
 800cd7e:	4b2a      	ldr	r3, [pc, #168]	; (800ce28 <__swsetup_r+0xac>)
 800cd80:	4605      	mov	r5, r0
 800cd82:	6818      	ldr	r0, [r3, #0]
 800cd84:	460c      	mov	r4, r1
 800cd86:	b118      	cbz	r0, 800cd90 <__swsetup_r+0x14>
 800cd88:	6a03      	ldr	r3, [r0, #32]
 800cd8a:	b90b      	cbnz	r3, 800cd90 <__swsetup_r+0x14>
 800cd8c:	f7fe f80a 	bl	800ada4 <__sinit>
 800cd90:	89a3      	ldrh	r3, [r4, #12]
 800cd92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd96:	0718      	lsls	r0, r3, #28
 800cd98:	d422      	bmi.n	800cde0 <__swsetup_r+0x64>
 800cd9a:	06d9      	lsls	r1, r3, #27
 800cd9c:	d407      	bmi.n	800cdae <__swsetup_r+0x32>
 800cd9e:	2309      	movs	r3, #9
 800cda0:	602b      	str	r3, [r5, #0]
 800cda2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cda6:	81a3      	strh	r3, [r4, #12]
 800cda8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cdac:	e034      	b.n	800ce18 <__swsetup_r+0x9c>
 800cdae:	0758      	lsls	r0, r3, #29
 800cdb0:	d512      	bpl.n	800cdd8 <__swsetup_r+0x5c>
 800cdb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cdb4:	b141      	cbz	r1, 800cdc8 <__swsetup_r+0x4c>
 800cdb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cdba:	4299      	cmp	r1, r3
 800cdbc:	d002      	beq.n	800cdc4 <__swsetup_r+0x48>
 800cdbe:	4628      	mov	r0, r5
 800cdc0:	f7fe fefe 	bl	800bbc0 <_free_r>
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	6363      	str	r3, [r4, #52]	; 0x34
 800cdc8:	89a3      	ldrh	r3, [r4, #12]
 800cdca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cdce:	81a3      	strh	r3, [r4, #12]
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	6063      	str	r3, [r4, #4]
 800cdd4:	6923      	ldr	r3, [r4, #16]
 800cdd6:	6023      	str	r3, [r4, #0]
 800cdd8:	89a3      	ldrh	r3, [r4, #12]
 800cdda:	f043 0308 	orr.w	r3, r3, #8
 800cdde:	81a3      	strh	r3, [r4, #12]
 800cde0:	6923      	ldr	r3, [r4, #16]
 800cde2:	b94b      	cbnz	r3, 800cdf8 <__swsetup_r+0x7c>
 800cde4:	89a3      	ldrh	r3, [r4, #12]
 800cde6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cdea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cdee:	d003      	beq.n	800cdf8 <__swsetup_r+0x7c>
 800cdf0:	4621      	mov	r1, r4
 800cdf2:	4628      	mov	r0, r5
 800cdf4:	f000 f884 	bl	800cf00 <__smakebuf_r>
 800cdf8:	89a0      	ldrh	r0, [r4, #12]
 800cdfa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cdfe:	f010 0301 	ands.w	r3, r0, #1
 800ce02:	d00a      	beq.n	800ce1a <__swsetup_r+0x9e>
 800ce04:	2300      	movs	r3, #0
 800ce06:	60a3      	str	r3, [r4, #8]
 800ce08:	6963      	ldr	r3, [r4, #20]
 800ce0a:	425b      	negs	r3, r3
 800ce0c:	61a3      	str	r3, [r4, #24]
 800ce0e:	6923      	ldr	r3, [r4, #16]
 800ce10:	b943      	cbnz	r3, 800ce24 <__swsetup_r+0xa8>
 800ce12:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ce16:	d1c4      	bne.n	800cda2 <__swsetup_r+0x26>
 800ce18:	bd38      	pop	{r3, r4, r5, pc}
 800ce1a:	0781      	lsls	r1, r0, #30
 800ce1c:	bf58      	it	pl
 800ce1e:	6963      	ldrpl	r3, [r4, #20]
 800ce20:	60a3      	str	r3, [r4, #8]
 800ce22:	e7f4      	b.n	800ce0e <__swsetup_r+0x92>
 800ce24:	2000      	movs	r0, #0
 800ce26:	e7f7      	b.n	800ce18 <__swsetup_r+0x9c>
 800ce28:	24000068 	.word	0x24000068

0800ce2c <_raise_r>:
 800ce2c:	291f      	cmp	r1, #31
 800ce2e:	b538      	push	{r3, r4, r5, lr}
 800ce30:	4604      	mov	r4, r0
 800ce32:	460d      	mov	r5, r1
 800ce34:	d904      	bls.n	800ce40 <_raise_r+0x14>
 800ce36:	2316      	movs	r3, #22
 800ce38:	6003      	str	r3, [r0, #0]
 800ce3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce3e:	bd38      	pop	{r3, r4, r5, pc}
 800ce40:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ce42:	b112      	cbz	r2, 800ce4a <_raise_r+0x1e>
 800ce44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ce48:	b94b      	cbnz	r3, 800ce5e <_raise_r+0x32>
 800ce4a:	4620      	mov	r0, r4
 800ce4c:	f000 f830 	bl	800ceb0 <_getpid_r>
 800ce50:	462a      	mov	r2, r5
 800ce52:	4601      	mov	r1, r0
 800ce54:	4620      	mov	r0, r4
 800ce56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce5a:	f000 b817 	b.w	800ce8c <_kill_r>
 800ce5e:	2b01      	cmp	r3, #1
 800ce60:	d00a      	beq.n	800ce78 <_raise_r+0x4c>
 800ce62:	1c59      	adds	r1, r3, #1
 800ce64:	d103      	bne.n	800ce6e <_raise_r+0x42>
 800ce66:	2316      	movs	r3, #22
 800ce68:	6003      	str	r3, [r0, #0]
 800ce6a:	2001      	movs	r0, #1
 800ce6c:	e7e7      	b.n	800ce3e <_raise_r+0x12>
 800ce6e:	2400      	movs	r4, #0
 800ce70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ce74:	4628      	mov	r0, r5
 800ce76:	4798      	blx	r3
 800ce78:	2000      	movs	r0, #0
 800ce7a:	e7e0      	b.n	800ce3e <_raise_r+0x12>

0800ce7c <raise>:
 800ce7c:	4b02      	ldr	r3, [pc, #8]	; (800ce88 <raise+0xc>)
 800ce7e:	4601      	mov	r1, r0
 800ce80:	6818      	ldr	r0, [r3, #0]
 800ce82:	f7ff bfd3 	b.w	800ce2c <_raise_r>
 800ce86:	bf00      	nop
 800ce88:	24000068 	.word	0x24000068

0800ce8c <_kill_r>:
 800ce8c:	b538      	push	{r3, r4, r5, lr}
 800ce8e:	4d07      	ldr	r5, [pc, #28]	; (800ceac <_kill_r+0x20>)
 800ce90:	2300      	movs	r3, #0
 800ce92:	4604      	mov	r4, r0
 800ce94:	4608      	mov	r0, r1
 800ce96:	4611      	mov	r1, r2
 800ce98:	602b      	str	r3, [r5, #0]
 800ce9a:	f7f4 f8bd 	bl	8001018 <_kill>
 800ce9e:	1c43      	adds	r3, r0, #1
 800cea0:	d102      	bne.n	800cea8 <_kill_r+0x1c>
 800cea2:	682b      	ldr	r3, [r5, #0]
 800cea4:	b103      	cbz	r3, 800cea8 <_kill_r+0x1c>
 800cea6:	6023      	str	r3, [r4, #0]
 800cea8:	bd38      	pop	{r3, r4, r5, pc}
 800ceaa:	bf00      	nop
 800ceac:	240004c8 	.word	0x240004c8

0800ceb0 <_getpid_r>:
 800ceb0:	f7f4 b8aa 	b.w	8001008 <_getpid>

0800ceb4 <__swhatbuf_r>:
 800ceb4:	b570      	push	{r4, r5, r6, lr}
 800ceb6:	460c      	mov	r4, r1
 800ceb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cebc:	2900      	cmp	r1, #0
 800cebe:	b096      	sub	sp, #88	; 0x58
 800cec0:	4615      	mov	r5, r2
 800cec2:	461e      	mov	r6, r3
 800cec4:	da0d      	bge.n	800cee2 <__swhatbuf_r+0x2e>
 800cec6:	89a3      	ldrh	r3, [r4, #12]
 800cec8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cecc:	f04f 0100 	mov.w	r1, #0
 800ced0:	bf0c      	ite	eq
 800ced2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ced6:	2340      	movne	r3, #64	; 0x40
 800ced8:	2000      	movs	r0, #0
 800ceda:	6031      	str	r1, [r6, #0]
 800cedc:	602b      	str	r3, [r5, #0]
 800cede:	b016      	add	sp, #88	; 0x58
 800cee0:	bd70      	pop	{r4, r5, r6, pc}
 800cee2:	466a      	mov	r2, sp
 800cee4:	f000 f848 	bl	800cf78 <_fstat_r>
 800cee8:	2800      	cmp	r0, #0
 800ceea:	dbec      	blt.n	800cec6 <__swhatbuf_r+0x12>
 800ceec:	9901      	ldr	r1, [sp, #4]
 800ceee:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cef2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cef6:	4259      	negs	r1, r3
 800cef8:	4159      	adcs	r1, r3
 800cefa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cefe:	e7eb      	b.n	800ced8 <__swhatbuf_r+0x24>

0800cf00 <__smakebuf_r>:
 800cf00:	898b      	ldrh	r3, [r1, #12]
 800cf02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cf04:	079d      	lsls	r5, r3, #30
 800cf06:	4606      	mov	r6, r0
 800cf08:	460c      	mov	r4, r1
 800cf0a:	d507      	bpl.n	800cf1c <__smakebuf_r+0x1c>
 800cf0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cf10:	6023      	str	r3, [r4, #0]
 800cf12:	6123      	str	r3, [r4, #16]
 800cf14:	2301      	movs	r3, #1
 800cf16:	6163      	str	r3, [r4, #20]
 800cf18:	b002      	add	sp, #8
 800cf1a:	bd70      	pop	{r4, r5, r6, pc}
 800cf1c:	ab01      	add	r3, sp, #4
 800cf1e:	466a      	mov	r2, sp
 800cf20:	f7ff ffc8 	bl	800ceb4 <__swhatbuf_r>
 800cf24:	9900      	ldr	r1, [sp, #0]
 800cf26:	4605      	mov	r5, r0
 800cf28:	4630      	mov	r0, r6
 800cf2a:	f7fe febd 	bl	800bca8 <_malloc_r>
 800cf2e:	b948      	cbnz	r0, 800cf44 <__smakebuf_r+0x44>
 800cf30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf34:	059a      	lsls	r2, r3, #22
 800cf36:	d4ef      	bmi.n	800cf18 <__smakebuf_r+0x18>
 800cf38:	f023 0303 	bic.w	r3, r3, #3
 800cf3c:	f043 0302 	orr.w	r3, r3, #2
 800cf40:	81a3      	strh	r3, [r4, #12]
 800cf42:	e7e3      	b.n	800cf0c <__smakebuf_r+0xc>
 800cf44:	89a3      	ldrh	r3, [r4, #12]
 800cf46:	6020      	str	r0, [r4, #0]
 800cf48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf4c:	81a3      	strh	r3, [r4, #12]
 800cf4e:	9b00      	ldr	r3, [sp, #0]
 800cf50:	6163      	str	r3, [r4, #20]
 800cf52:	9b01      	ldr	r3, [sp, #4]
 800cf54:	6120      	str	r0, [r4, #16]
 800cf56:	b15b      	cbz	r3, 800cf70 <__smakebuf_r+0x70>
 800cf58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf5c:	4630      	mov	r0, r6
 800cf5e:	f000 f81d 	bl	800cf9c <_isatty_r>
 800cf62:	b128      	cbz	r0, 800cf70 <__smakebuf_r+0x70>
 800cf64:	89a3      	ldrh	r3, [r4, #12]
 800cf66:	f023 0303 	bic.w	r3, r3, #3
 800cf6a:	f043 0301 	orr.w	r3, r3, #1
 800cf6e:	81a3      	strh	r3, [r4, #12]
 800cf70:	89a3      	ldrh	r3, [r4, #12]
 800cf72:	431d      	orrs	r5, r3
 800cf74:	81a5      	strh	r5, [r4, #12]
 800cf76:	e7cf      	b.n	800cf18 <__smakebuf_r+0x18>

0800cf78 <_fstat_r>:
 800cf78:	b538      	push	{r3, r4, r5, lr}
 800cf7a:	4d07      	ldr	r5, [pc, #28]	; (800cf98 <_fstat_r+0x20>)
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	4604      	mov	r4, r0
 800cf80:	4608      	mov	r0, r1
 800cf82:	4611      	mov	r1, r2
 800cf84:	602b      	str	r3, [r5, #0]
 800cf86:	f7f4 f8a6 	bl	80010d6 <_fstat>
 800cf8a:	1c43      	adds	r3, r0, #1
 800cf8c:	d102      	bne.n	800cf94 <_fstat_r+0x1c>
 800cf8e:	682b      	ldr	r3, [r5, #0]
 800cf90:	b103      	cbz	r3, 800cf94 <_fstat_r+0x1c>
 800cf92:	6023      	str	r3, [r4, #0]
 800cf94:	bd38      	pop	{r3, r4, r5, pc}
 800cf96:	bf00      	nop
 800cf98:	240004c8 	.word	0x240004c8

0800cf9c <_isatty_r>:
 800cf9c:	b538      	push	{r3, r4, r5, lr}
 800cf9e:	4d06      	ldr	r5, [pc, #24]	; (800cfb8 <_isatty_r+0x1c>)
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	4604      	mov	r4, r0
 800cfa4:	4608      	mov	r0, r1
 800cfa6:	602b      	str	r3, [r5, #0]
 800cfa8:	f7f4 f8a5 	bl	80010f6 <_isatty>
 800cfac:	1c43      	adds	r3, r0, #1
 800cfae:	d102      	bne.n	800cfb6 <_isatty_r+0x1a>
 800cfb0:	682b      	ldr	r3, [r5, #0]
 800cfb2:	b103      	cbz	r3, 800cfb6 <_isatty_r+0x1a>
 800cfb4:	6023      	str	r3, [r4, #0]
 800cfb6:	bd38      	pop	{r3, r4, r5, pc}
 800cfb8:	240004c8 	.word	0x240004c8

0800cfbc <_init>:
 800cfbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfbe:	bf00      	nop
 800cfc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfc2:	bc08      	pop	{r3}
 800cfc4:	469e      	mov	lr, r3
 800cfc6:	4770      	bx	lr

0800cfc8 <_fini>:
 800cfc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfca:	bf00      	nop
 800cfcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfce:	bc08      	pop	{r3}
 800cfd0:	469e      	mov	lr, r3
 800cfd2:	4770      	bx	lr
