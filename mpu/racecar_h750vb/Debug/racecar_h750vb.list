
racecar_h750vb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c620  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800c8b8  0800c8b8  0001c8b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c8f0  0800c8f0  0001c8f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c8f8  0800c8f8  0001c8f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c8fc  0800c8fc  0001c8fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800c900  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000c1c  24000010  0800c910  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000c2c  0800c910  00020c2c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00027586  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003de5  00000000  00000000  00047607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002090  00000000  00000000  0004b3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001990  00000000  00000000  0004d480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003cdf6  00000000  00000000  0004ee10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00028613  00000000  00000000  0008bc06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00187cbf  00000000  00000000  000b4219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000900c  00000000  00000000  0023bed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000066  00000000  00000000  00244ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800c8a0 	.word	0x0800c8a0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800c8a0 	.word	0x0800c8a0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f001 ff98 	bl	800250c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005dc:	f000 f826 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e0:	f000 fe94 	bl	800130c <MX_GPIO_Init>
  MX_ADC1_Init();
 80005e4:	f000 f89c 	bl	8000720 <MX_ADC1_Init>
  MX_QUADSPI_Init();
 80005e8:	f000 fad0 	bl	8000b8c <MX_QUADSPI_Init>
  MX_SDMMC1_SD_Init();
 80005ec:	f000 fafa 	bl	8000be4 <MX_SDMMC1_SD_Init>
  MX_SPI4_Init();
 80005f0:	f000 fb72 	bl	8000cd8 <MX_SPI4_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f4:	f000 fe58 	bl	80012a8 <MX_USB_OTG_FS_PCD_Init>
  MX_LPUART1_UART_Init();
 80005f8:	f000 f94a 	bl	8000890 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 80005fc:	f000 fbc2 	bl	8000d84 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000600:	f000 fc14 	bl	8000e2c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000604:	f000 fcaa 	bl	8000f5c <MX_TIM3_Init>
  MX_I2C1_Init();
 8000608:	f000 f902 	bl	8000810 <MX_I2C1_Init>
  MX_UART4_Init();
 800060c:	f000 f98e 	bl	800092c <MX_UART4_Init>
  MX_UART7_Init();
 8000610:	f000 fa24 	bl	8000a5c <MX_UART7_Init>
  MX_SPI1_Init();
 8000614:	f000 fb0a 	bl	8000c2c <MX_SPI1_Init>
  MX_TIM5_Init();
 8000618:	f000 fd06 	bl	8001028 <MX_TIM5_Init>
  MX_TIM15_Init();
 800061c:	f000 fda2 	bl	8001164 <MX_TIM15_Init>
  MX_UART5_Init();
 8000620:	f000 f9d0 	bl	80009c4 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8000624:	f000 fa66 	bl	8000af4 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000628:	e7fe      	b.n	8000628 <main+0x54>
	...

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b09c      	sub	sp, #112	; 0x70
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000636:	224c      	movs	r2, #76	; 0x4c
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f00c f904 	bl	800c848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2220      	movs	r2, #32
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f00c f8fe 	bl	800c848 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800064c:	2002      	movs	r0, #2
 800064e:	f003 fdef 	bl	8004230 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000652:	2300      	movs	r3, #0
 8000654:	603b      	str	r3, [r7, #0]
 8000656:	4b30      	ldr	r3, [pc, #192]	; (8000718 <SystemClock_Config+0xec>)
 8000658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800065a:	4a2f      	ldr	r2, [pc, #188]	; (8000718 <SystemClock_Config+0xec>)
 800065c:	f023 0301 	bic.w	r3, r3, #1
 8000660:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000662:	4b2d      	ldr	r3, [pc, #180]	; (8000718 <SystemClock_Config+0xec>)
 8000664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	4b2b      	ldr	r3, [pc, #172]	; (800071c <SystemClock_Config+0xf0>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a2a      	ldr	r2, [pc, #168]	; (800071c <SystemClock_Config+0xf0>)
 8000672:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000676:	6193      	str	r3, [r2, #24]
 8000678:	4b28      	ldr	r3, [pc, #160]	; (800071c <SystemClock_Config+0xf0>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000680:	603b      	str	r3, [r7, #0]
 8000682:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000684:	bf00      	nop
 8000686:	4b25      	ldr	r3, [pc, #148]	; (800071c <SystemClock_Config+0xf0>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800068e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000692:	d1f8      	bne.n	8000686 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000694:	2301      	movs	r3, #1
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000698:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800069c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069e:	2302      	movs	r3, #2
 80006a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a2:	2302      	movs	r3, #2
 80006a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80006a6:	2305      	movs	r3, #5
 80006a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 80006aa:	23a0      	movs	r3, #160	; 0xa0
 80006ac:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 20;
 80006b2:	2314      	movs	r3, #20
 80006b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80006ba:	2308      	movs	r3, #8
 80006bc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006be:	2300      	movs	r3, #0
 80006c0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ca:	4618      	mov	r0, r3
 80006cc:	f003 feb4 	bl	8004438 <HAL_RCC_OscConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006d6:	f000 ff19 	bl	800150c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006da:	233f      	movs	r3, #63	; 0x3f
 80006dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006de:	2303      	movs	r3, #3
 80006e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80006e6:	2308      	movs	r3, #8
 80006e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006ea:	2340      	movs	r3, #64	; 0x40
 80006ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006ee:	2340      	movs	r3, #64	; 0x40
 80006f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006f6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006f8:	2340      	movs	r3, #64	; 0x40
 80006fa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2102      	movs	r1, #2
 8000700:	4618      	mov	r0, r3
 8000702:	f004 faf3 	bl	8004cec <HAL_RCC_ClockConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800070c:	f000 fefe 	bl	800150c <Error_Handler>
  }
}
 8000710:	bf00      	nop
 8000712:	3770      	adds	r7, #112	; 0x70
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	58000400 	.word	0x58000400
 800071c:	58024800 	.word	0x58024800

08000720 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08a      	sub	sp, #40	; 0x28
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000732:	463b      	mov	r3, r7
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]
 8000740:	615a      	str	r2, [r3, #20]
 8000742:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000744:	4b2f      	ldr	r3, [pc, #188]	; (8000804 <MX_ADC1_Init+0xe4>)
 8000746:	4a30      	ldr	r2, [pc, #192]	; (8000808 <MX_ADC1_Init+0xe8>)
 8000748:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800074a:	4b2e      	ldr	r3, [pc, #184]	; (8000804 <MX_ADC1_Init+0xe4>)
 800074c:	2200      	movs	r2, #0
 800074e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000750:	4b2c      	ldr	r3, [pc, #176]	; (8000804 <MX_ADC1_Init+0xe4>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000756:	4b2b      	ldr	r3, [pc, #172]	; (8000804 <MX_ADC1_Init+0xe4>)
 8000758:	2200      	movs	r2, #0
 800075a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800075c:	4b29      	ldr	r3, [pc, #164]	; (8000804 <MX_ADC1_Init+0xe4>)
 800075e:	2204      	movs	r2, #4
 8000760:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000762:	4b28      	ldr	r3, [pc, #160]	; (8000804 <MX_ADC1_Init+0xe4>)
 8000764:	2200      	movs	r2, #0
 8000766:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000768:	4b26      	ldr	r3, [pc, #152]	; (8000804 <MX_ADC1_Init+0xe4>)
 800076a:	2200      	movs	r2, #0
 800076c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800076e:	4b25      	ldr	r3, [pc, #148]	; (8000804 <MX_ADC1_Init+0xe4>)
 8000770:	2201      	movs	r2, #1
 8000772:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000774:	4b23      	ldr	r3, [pc, #140]	; (8000804 <MX_ADC1_Init+0xe4>)
 8000776:	2200      	movs	r2, #0
 8000778:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800077a:	4b22      	ldr	r3, [pc, #136]	; (8000804 <MX_ADC1_Init+0xe4>)
 800077c:	2200      	movs	r2, #0
 800077e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000780:	4b20      	ldr	r3, [pc, #128]	; (8000804 <MX_ADC1_Init+0xe4>)
 8000782:	2200      	movs	r2, #0
 8000784:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000786:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <MX_ADC1_Init+0xe4>)
 8000788:	2200      	movs	r2, #0
 800078a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800078c:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <MX_ADC1_Init+0xe4>)
 800078e:	2200      	movs	r2, #0
 8000790:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <MX_ADC1_Init+0xe4>)
 8000794:	2200      	movs	r2, #0
 8000796:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000798:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <MX_ADC1_Init+0xe4>)
 800079a:	2200      	movs	r2, #0
 800079c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007a0:	4818      	ldr	r0, [pc, #96]	; (8000804 <MX_ADC1_Init+0xe4>)
 80007a2:	f002 f925 	bl	80029f0 <HAL_ADC_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007ac:	f000 feae 	bl	800150c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007b4:	f107 031c 	add.w	r3, r7, #28
 80007b8:	4619      	mov	r1, r3
 80007ba:	4812      	ldr	r0, [pc, #72]	; (8000804 <MX_ADC1_Init+0xe4>)
 80007bc:	f002 ff3c 	bl	8003638 <HAL_ADCEx_MultiModeConfigChannel>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80007c6:	f000 fea1 	bl	800150c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <MX_ADC1_Init+0xec>)
 80007cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007ce:	2306      	movs	r3, #6
 80007d0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007d2:	2300      	movs	r3, #0
 80007d4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007d6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80007da:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007dc:	2304      	movs	r3, #4
 80007de:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80007e4:	2300      	movs	r3, #0
 80007e6:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e8:	463b      	mov	r3, r7
 80007ea:	4619      	mov	r1, r3
 80007ec:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_ADC1_Init+0xe4>)
 80007ee:	f002 faa1 	bl	8002d34 <HAL_ADC_ConfigChannel>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80007f8:	f000 fe88 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	3728      	adds	r7, #40	; 0x28
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	2400002c 	.word	0x2400002c
 8000808:	40022000 	.word	0x40022000
 800080c:	0c900008 	.word	0x0c900008

08000810 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000814:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <MX_I2C1_Init+0x74>)
 8000816:	4a1c      	ldr	r2, [pc, #112]	; (8000888 <MX_I2C1_Init+0x78>)
 8000818:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0ECFF;
 800081a:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <MX_I2C1_Init+0x74>)
 800081c:	4a1b      	ldr	r2, [pc, #108]	; (800088c <MX_I2C1_Init+0x7c>)
 800081e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000820:	4b18      	ldr	r3, [pc, #96]	; (8000884 <MX_I2C1_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000826:	4b17      	ldr	r3, [pc, #92]	; (8000884 <MX_I2C1_Init+0x74>)
 8000828:	2201      	movs	r2, #1
 800082a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800082c:	4b15      	ldr	r3, [pc, #84]	; (8000884 <MX_I2C1_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000832:	4b14      	ldr	r3, [pc, #80]	; (8000884 <MX_I2C1_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <MX_I2C1_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_I2C1_Init+0x74>)
 8000840:	2200      	movs	r2, #0
 8000842:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000844:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <MX_I2C1_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800084a:	480e      	ldr	r0, [pc, #56]	; (8000884 <MX_I2C1_Init+0x74>)
 800084c:	f003 fa80 	bl	8003d50 <HAL_I2C_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000856:	f000 fe59 	bl	800150c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800085a:	2100      	movs	r1, #0
 800085c:	4809      	ldr	r0, [pc, #36]	; (8000884 <MX_I2C1_Init+0x74>)
 800085e:	f003 fb07 	bl	8003e70 <HAL_I2CEx_ConfigAnalogFilter>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000868:	f000 fe50 	bl	800150c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800086c:	2100      	movs	r1, #0
 800086e:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_I2C1_Init+0x74>)
 8000870:	f003 fb49 	bl	8003f06 <HAL_I2CEx_ConfigDigitalFilter>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800087a:	f000 fe47 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	24000090 	.word	0x24000090
 8000888:	40005400 	.word	0x40005400
 800088c:	10c0ecff 	.word	0x10c0ecff

08000890 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000894:	4b22      	ldr	r3, [pc, #136]	; (8000920 <MX_LPUART1_UART_Init+0x90>)
 8000896:	4a23      	ldr	r2, [pc, #140]	; (8000924 <MX_LPUART1_UART_Init+0x94>)
 8000898:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800089a:	4b21      	ldr	r3, [pc, #132]	; (8000920 <MX_LPUART1_UART_Init+0x90>)
 800089c:	4a22      	ldr	r2, [pc, #136]	; (8000928 <MX_LPUART1_UART_Init+0x98>)
 800089e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008a0:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <MX_LPUART1_UART_Init+0x90>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008a6:	4b1e      	ldr	r3, [pc, #120]	; (8000920 <MX_LPUART1_UART_Init+0x90>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008ac:	4b1c      	ldr	r3, [pc, #112]	; (8000920 <MX_LPUART1_UART_Init+0x90>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008b2:	4b1b      	ldr	r3, [pc, #108]	; (8000920 <MX_LPUART1_UART_Init+0x90>)
 80008b4:	220c      	movs	r2, #12
 80008b6:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b8:	4b19      	ldr	r3, [pc, #100]	; (8000920 <MX_LPUART1_UART_Init+0x90>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008be:	4b18      	ldr	r3, [pc, #96]	; (8000920 <MX_LPUART1_UART_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008c4:	4b16      	ldr	r3, [pc, #88]	; (8000920 <MX_LPUART1_UART_Init+0x90>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ca:	4b15      	ldr	r3, [pc, #84]	; (8000920 <MX_LPUART1_UART_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80008d0:	4b13      	ldr	r3, [pc, #76]	; (8000920 <MX_LPUART1_UART_Init+0x90>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008d6:	4812      	ldr	r0, [pc, #72]	; (8000920 <MX_LPUART1_UART_Init+0x90>)
 80008d8:	f009 fee8 	bl	800a6ac <HAL_UART_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 80008e2:	f000 fe13 	bl	800150c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e6:	2100      	movs	r1, #0
 80008e8:	480d      	ldr	r0, [pc, #52]	; (8000920 <MX_LPUART1_UART_Init+0x90>)
 80008ea:	f00a feea 	bl	800b6c2 <HAL_UARTEx_SetTxFifoThreshold>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 80008f4:	f000 fe0a 	bl	800150c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f8:	2100      	movs	r1, #0
 80008fa:	4809      	ldr	r0, [pc, #36]	; (8000920 <MX_LPUART1_UART_Init+0x90>)
 80008fc:	f00a ff1f 	bl	800b73e <HAL_UARTEx_SetRxFifoThreshold>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000906:	f000 fe01 	bl	800150c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_LPUART1_UART_Init+0x90>)
 800090c:	f00a fea0 	bl	800b650 <HAL_UARTEx_DisableFifoMode>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000916:	f000 fdf9 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	240000e4 	.word	0x240000e4
 8000924:	58000c00 	.word	0x58000c00
 8000928:	00033324 	.word	0x00033324

0800092c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000930:	4b22      	ldr	r3, [pc, #136]	; (80009bc <MX_UART4_Init+0x90>)
 8000932:	4a23      	ldr	r2, [pc, #140]	; (80009c0 <MX_UART4_Init+0x94>)
 8000934:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000936:	4b21      	ldr	r3, [pc, #132]	; (80009bc <MX_UART4_Init+0x90>)
 8000938:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800093c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800093e:	4b1f      	ldr	r3, [pc, #124]	; (80009bc <MX_UART4_Init+0x90>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000944:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <MX_UART4_Init+0x90>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800094a:	4b1c      	ldr	r3, [pc, #112]	; (80009bc <MX_UART4_Init+0x90>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000950:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <MX_UART4_Init+0x90>)
 8000952:	220c      	movs	r2, #12
 8000954:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000956:	4b19      	ldr	r3, [pc, #100]	; (80009bc <MX_UART4_Init+0x90>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800095c:	4b17      	ldr	r3, [pc, #92]	; (80009bc <MX_UART4_Init+0x90>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000962:	4b16      	ldr	r3, [pc, #88]	; (80009bc <MX_UART4_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000968:	4b14      	ldr	r3, [pc, #80]	; (80009bc <MX_UART4_Init+0x90>)
 800096a:	2200      	movs	r2, #0
 800096c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800096e:	4b13      	ldr	r3, [pc, #76]	; (80009bc <MX_UART4_Init+0x90>)
 8000970:	2200      	movs	r2, #0
 8000972:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000974:	4811      	ldr	r0, [pc, #68]	; (80009bc <MX_UART4_Init+0x90>)
 8000976:	f009 fe99 	bl	800a6ac <HAL_UART_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000980:	f000 fdc4 	bl	800150c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000984:	2100      	movs	r1, #0
 8000986:	480d      	ldr	r0, [pc, #52]	; (80009bc <MX_UART4_Init+0x90>)
 8000988:	f00a fe9b 	bl	800b6c2 <HAL_UARTEx_SetTxFifoThreshold>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000992:	f000 fdbb 	bl	800150c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000996:	2100      	movs	r1, #0
 8000998:	4808      	ldr	r0, [pc, #32]	; (80009bc <MX_UART4_Init+0x90>)
 800099a:	f00a fed0 	bl	800b73e <HAL_UARTEx_SetRxFifoThreshold>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80009a4:	f000 fdb2 	bl	800150c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80009a8:	4804      	ldr	r0, [pc, #16]	; (80009bc <MX_UART4_Init+0x90>)
 80009aa:	f00a fe51 	bl	800b650 <HAL_UARTEx_DisableFifoMode>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80009b4:	f000 fdaa 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	24000178 	.word	0x24000178
 80009c0:	40004c00 	.word	0x40004c00

080009c4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80009c8:	4b22      	ldr	r3, [pc, #136]	; (8000a54 <MX_UART5_Init+0x90>)
 80009ca:	4a23      	ldr	r2, [pc, #140]	; (8000a58 <MX_UART5_Init+0x94>)
 80009cc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80009ce:	4b21      	ldr	r3, [pc, #132]	; (8000a54 <MX_UART5_Init+0x90>)
 80009d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80009d6:	4b1f      	ldr	r3, [pc, #124]	; (8000a54 <MX_UART5_Init+0x90>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80009dc:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <MX_UART5_Init+0x90>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80009e2:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <MX_UART5_Init+0x90>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80009e8:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <MX_UART5_Init+0x90>)
 80009ea:	220c      	movs	r2, #12
 80009ec:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ee:	4b19      	ldr	r3, [pc, #100]	; (8000a54 <MX_UART5_Init+0x90>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f4:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <MX_UART5_Init+0x90>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fa:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <MX_UART5_Init+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <MX_UART5_Init+0x90>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a06:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <MX_UART5_Init+0x90>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000a0c:	4811      	ldr	r0, [pc, #68]	; (8000a54 <MX_UART5_Init+0x90>)
 8000a0e:	f009 fe4d 	bl	800a6ac <HAL_UART_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000a18:	f000 fd78 	bl	800150c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	480d      	ldr	r0, [pc, #52]	; (8000a54 <MX_UART5_Init+0x90>)
 8000a20:	f00a fe4f 	bl	800b6c2 <HAL_UARTEx_SetTxFifoThreshold>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000a2a:	f000 fd6f 	bl	800150c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4808      	ldr	r0, [pc, #32]	; (8000a54 <MX_UART5_Init+0x90>)
 8000a32:	f00a fe84 	bl	800b73e <HAL_UARTEx_SetRxFifoThreshold>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000a3c:	f000 fd66 	bl	800150c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000a40:	4804      	ldr	r0, [pc, #16]	; (8000a54 <MX_UART5_Init+0x90>)
 8000a42:	f00a fe05 	bl	800b650 <HAL_UARTEx_DisableFifoMode>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000a4c:	f000 fd5e 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	2400020c 	.word	0x2400020c
 8000a58:	40005000 	.word	0x40005000

08000a5c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000a60:	4b22      	ldr	r3, [pc, #136]	; (8000aec <MX_UART7_Init+0x90>)
 8000a62:	4a23      	ldr	r2, [pc, #140]	; (8000af0 <MX_UART7_Init+0x94>)
 8000a64:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000a66:	4b21      	ldr	r3, [pc, #132]	; (8000aec <MX_UART7_Init+0x90>)
 8000a68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a6c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6e:	4b1f      	ldr	r3, [pc, #124]	; (8000aec <MX_UART7_Init+0x90>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000a74:	4b1d      	ldr	r3, [pc, #116]	; (8000aec <MX_UART7_Init+0x90>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000a7a:	4b1c      	ldr	r3, [pc, #112]	; (8000aec <MX_UART7_Init+0x90>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000a80:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <MX_UART7_Init+0x90>)
 8000a82:	220c      	movs	r2, #12
 8000a84:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a86:	4b19      	ldr	r3, [pc, #100]	; (8000aec <MX_UART7_Init+0x90>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a8c:	4b17      	ldr	r3, [pc, #92]	; (8000aec <MX_UART7_Init+0x90>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a92:	4b16      	ldr	r3, [pc, #88]	; (8000aec <MX_UART7_Init+0x90>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a98:	4b14      	ldr	r3, [pc, #80]	; (8000aec <MX_UART7_Init+0x90>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a9e:	4b13      	ldr	r3, [pc, #76]	; (8000aec <MX_UART7_Init+0x90>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000aa4:	4811      	ldr	r0, [pc, #68]	; (8000aec <MX_UART7_Init+0x90>)
 8000aa6:	f009 fe01 	bl	800a6ac <HAL_UART_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8000ab0:	f000 fd2c 	bl	800150c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	480d      	ldr	r0, [pc, #52]	; (8000aec <MX_UART7_Init+0x90>)
 8000ab8:	f00a fe03 	bl	800b6c2 <HAL_UARTEx_SetTxFifoThreshold>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8000ac2:	f000 fd23 	bl	800150c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4808      	ldr	r0, [pc, #32]	; (8000aec <MX_UART7_Init+0x90>)
 8000aca:	f00a fe38 	bl	800b73e <HAL_UARTEx_SetRxFifoThreshold>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000ad4:	f000 fd1a 	bl	800150c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000ad8:	4804      	ldr	r0, [pc, #16]	; (8000aec <MX_UART7_Init+0x90>)
 8000ada:	f00a fdb9 	bl	800b650 <HAL_UARTEx_DisableFifoMode>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000ae4:	f000 fd12 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	240002a0 	.word	0x240002a0
 8000af0:	40007800 	.word	0x40007800

08000af4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000af8:	4b22      	ldr	r3, [pc, #136]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000afa:	4a23      	ldr	r2, [pc, #140]	; (8000b88 <MX_USART3_UART_Init+0x94>)
 8000afc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000afe:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000b00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b06:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b0c:	4b1d      	ldr	r3, [pc, #116]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b12:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b18:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1e:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b24:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b2a:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b30:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b36:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b3c:	4811      	ldr	r0, [pc, #68]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000b3e:	f009 fdb5 	bl	800a6ac <HAL_UART_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b48:	f000 fce0 	bl	800150c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	480d      	ldr	r0, [pc, #52]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000b50:	f00a fdb7 	bl	800b6c2 <HAL_UARTEx_SetTxFifoThreshold>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b5a:	f000 fcd7 	bl	800150c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4808      	ldr	r0, [pc, #32]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000b62:	f00a fdec 	bl	800b73e <HAL_UARTEx_SetRxFifoThreshold>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b6c:	f000 fcce 	bl	800150c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b70:	4804      	ldr	r0, [pc, #16]	; (8000b84 <MX_USART3_UART_Init+0x90>)
 8000b72:	f00a fd6d 	bl	800b650 <HAL_UARTEx_DisableFifoMode>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b7c:	f000 fcc6 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	24000334 	.word	0x24000334
 8000b88:	40004800 	.word	0x40004800

08000b8c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_QUADSPI_Init+0x50>)
 8000b92:	4a13      	ldr	r2, [pc, #76]	; (8000be0 <MX_QUADSPI_Init+0x54>)
 8000b94:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <MX_QUADSPI_Init+0x50>)
 8000b98:	22ff      	movs	r2, #255	; 0xff
 8000b9a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <MX_QUADSPI_Init+0x50>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <MX_QUADSPI_Init+0x50>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <MX_QUADSPI_Init+0x50>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <MX_QUADSPI_Init+0x50>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <MX_QUADSPI_Init+0x50>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000bba:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <MX_QUADSPI_Init+0x50>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <MX_QUADSPI_Init+0x50>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000bc6:	4805      	ldr	r0, [pc, #20]	; (8000bdc <MX_QUADSPI_Init+0x50>)
 8000bc8:	f003 fb7c 	bl	80042c4 <HAL_QSPI_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000bd2:	f000 fc9b 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	240003c8 	.word	0x240003c8
 8000be0:	52005000 	.word	0x52005000

08000be4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000be8:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_SDMMC1_SD_Init+0x40>)
 8000bea:	4a0f      	ldr	r2, [pc, #60]	; (8000c28 <MX_SDMMC1_SD_Init+0x44>)
 8000bec:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000bee:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <MX_SDMMC1_SD_Init+0x40>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000bf4:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <MX_SDMMC1_SD_Init+0x40>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <MX_SDMMC1_SD_Init+0x40>)
 8000bfc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c00:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c02:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <MX_SDMMC1_SD_Init+0x40>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <MX_SDMMC1_SD_Init+0x40>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000c0e:	4805      	ldr	r0, [pc, #20]	; (8000c24 <MX_SDMMC1_SD_Init+0x40>)
 8000c10:	f007 f8f6 	bl	8007e00 <HAL_SD_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8000c1a:	f000 fc77 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	24000414 	.word	0x24000414
 8000c28:	52007000 	.word	0x52007000

08000c2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c30:	4b27      	ldr	r3, [pc, #156]	; (8000cd0 <MX_SPI1_Init+0xa4>)
 8000c32:	4a28      	ldr	r2, [pc, #160]	; (8000cd4 <MX_SPI1_Init+0xa8>)
 8000c34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c36:	4b26      	ldr	r3, [pc, #152]	; (8000cd0 <MX_SPI1_Init+0xa4>)
 8000c38:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000c3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c3e:	4b24      	ldr	r3, [pc, #144]	; (8000cd0 <MX_SPI1_Init+0xa4>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c44:	4b22      	ldr	r3, [pc, #136]	; (8000cd0 <MX_SPI1_Init+0xa4>)
 8000c46:	2203      	movs	r2, #3
 8000c48:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c4a:	4b21      	ldr	r3, [pc, #132]	; (8000cd0 <MX_SPI1_Init+0xa4>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c50:	4b1f      	ldr	r3, [pc, #124]	; (8000cd0 <MX_SPI1_Init+0xa4>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c56:	4b1e      	ldr	r3, [pc, #120]	; (8000cd0 <MX_SPI1_Init+0xa4>)
 8000c58:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000c5c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c5e:	4b1c      	ldr	r3, [pc, #112]	; (8000cd0 <MX_SPI1_Init+0xa4>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c64:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <MX_SPI1_Init+0xa4>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c6a:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <MX_SPI1_Init+0xa4>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c70:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <MX_SPI1_Init+0xa4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000c76:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <MX_SPI1_Init+0xa4>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <MX_SPI1_Init+0xa4>)
 8000c7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c82:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <MX_SPI1_Init+0xa4>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c8a:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <MX_SPI1_Init+0xa4>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <MX_SPI1_Init+0xa4>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <MX_SPI1_Init+0xa4>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <MX_SPI1_Init+0xa4>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <MX_SPI1_Init+0xa4>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ca8:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <MX_SPI1_Init+0xa4>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <MX_SPI1_Init+0xa4>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <MX_SPI1_Init+0xa4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cba:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <MX_SPI1_Init+0xa4>)
 8000cbc:	f008 f90e 	bl	8008edc <HAL_SPI_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000cc6:	f000 fc21 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	24000490 	.word	0x24000490
 8000cd4:	40013000 	.word	0x40013000

08000cd8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000cdc:	4b27      	ldr	r3, [pc, #156]	; (8000d7c <MX_SPI4_Init+0xa4>)
 8000cde:	4a28      	ldr	r2, [pc, #160]	; (8000d80 <MX_SPI4_Init+0xa8>)
 8000ce0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000ce2:	4b26      	ldr	r3, [pc, #152]	; (8000d7c <MX_SPI4_Init+0xa4>)
 8000ce4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ce8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000cea:	4b24      	ldr	r3, [pc, #144]	; (8000d7c <MX_SPI4_Init+0xa4>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000cf0:	4b22      	ldr	r3, [pc, #136]	; (8000d7c <MX_SPI4_Init+0xa4>)
 8000cf2:	2203      	movs	r2, #3
 8000cf4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cf6:	4b21      	ldr	r3, [pc, #132]	; (8000d7c <MX_SPI4_Init+0xa4>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cfc:	4b1f      	ldr	r3, [pc, #124]	; (8000d7c <MX_SPI4_Init+0xa4>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000d02:	4b1e      	ldr	r3, [pc, #120]	; (8000d7c <MX_SPI4_Init+0xa4>)
 8000d04:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000d08:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <MX_SPI4_Init+0xa4>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d10:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <MX_SPI4_Init+0xa4>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d16:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <MX_SPI4_Init+0xa4>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d1c:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <MX_SPI4_Init+0xa4>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000d22:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <MX_SPI4_Init+0xa4>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d28:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <MX_SPI4_Init+0xa4>)
 8000d2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d2e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <MX_SPI4_Init+0xa4>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <MX_SPI4_Init+0xa4>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <MX_SPI4_Init+0xa4>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <MX_SPI4_Init+0xa4>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <MX_SPI4_Init+0xa4>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <MX_SPI4_Init+0xa4>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <MX_SPI4_Init+0xa4>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d5a:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <MX_SPI4_Init+0xa4>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <MX_SPI4_Init+0xa4>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000d66:	4805      	ldr	r0, [pc, #20]	; (8000d7c <MX_SPI4_Init+0xa4>)
 8000d68:	f008 f8b8 	bl	8008edc <HAL_SPI_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000d72:	f000 fbcb 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	24000518 	.word	0x24000518
 8000d80:	40013400 	.word	0x40013400

08000d84 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b088      	sub	sp, #32
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d8a:	f107 0310 	add.w	r3, r7, #16
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000da2:	4b20      	ldr	r3, [pc, #128]	; (8000e24 <MX_TIM1_Init+0xa0>)
 8000da4:	4a20      	ldr	r2, [pc, #128]	; (8000e28 <MX_TIM1_Init+0xa4>)
 8000da6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000da8:	4b1e      	ldr	r3, [pc, #120]	; (8000e24 <MX_TIM1_Init+0xa0>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dae:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <MX_TIM1_Init+0xa0>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000db4:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <MX_TIM1_Init+0xa0>)
 8000db6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dbc:	4b19      	ldr	r3, [pc, #100]	; (8000e24 <MX_TIM1_Init+0xa0>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dc2:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <MX_TIM1_Init+0xa0>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc8:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <MX_TIM1_Init+0xa0>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dce:	4815      	ldr	r0, [pc, #84]	; (8000e24 <MX_TIM1_Init+0xa0>)
 8000dd0:	f008 f9c3 	bl	800915a <HAL_TIM_Base_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000dda:	f000 fb97 	bl	800150c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000de4:	f107 0310 	add.w	r3, r7, #16
 8000de8:	4619      	mov	r1, r3
 8000dea:	480e      	ldr	r0, [pc, #56]	; (8000e24 <MX_TIM1_Init+0xa0>)
 8000dec:	f008 fc74 	bl	80096d8 <HAL_TIM_ConfigClockSource>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000df6:	f000 fb89 	bl	800150c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4806      	ldr	r0, [pc, #24]	; (8000e24 <MX_TIM1_Init+0xa0>)
 8000e0c:	f009 fbc0 	bl	800a590 <HAL_TIMEx_MasterConfigSynchronization>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000e16:	f000 fb79 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e1a:	bf00      	nop
 8000e1c:	3720      	adds	r7, #32
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	240005a0 	.word	0x240005a0
 8000e28:	40010000 	.word	0x40010000

08000e2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08e      	sub	sp, #56	; 0x38
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
 8000e3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e40:	f107 031c 	add.w	r3, r7, #28
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e4c:	463b      	mov	r3, r7
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
 8000e58:	611a      	str	r2, [r3, #16]
 8000e5a:	615a      	str	r2, [r3, #20]
 8000e5c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e5e:	4b3e      	ldr	r3, [pc, #248]	; (8000f58 <MX_TIM2_Init+0x12c>)
 8000e60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e66:	4b3c      	ldr	r3, [pc, #240]	; (8000f58 <MX_TIM2_Init+0x12c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6c:	4b3a      	ldr	r3, [pc, #232]	; (8000f58 <MX_TIM2_Init+0x12c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000e72:	4b39      	ldr	r3, [pc, #228]	; (8000f58 <MX_TIM2_Init+0x12c>)
 8000e74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e7a:	4b37      	ldr	r3, [pc, #220]	; (8000f58 <MX_TIM2_Init+0x12c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e80:	4b35      	ldr	r3, [pc, #212]	; (8000f58 <MX_TIM2_Init+0x12c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e86:	4834      	ldr	r0, [pc, #208]	; (8000f58 <MX_TIM2_Init+0x12c>)
 8000e88:	f008 f967 	bl	800915a <HAL_TIM_Base_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000e92:	f000 fb3b 	bl	800150c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	482d      	ldr	r0, [pc, #180]	; (8000f58 <MX_TIM2_Init+0x12c>)
 8000ea4:	f008 fc18 	bl	80096d8 <HAL_TIM_ConfigClockSource>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000eae:	f000 fb2d 	bl	800150c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000eb2:	4829      	ldr	r0, [pc, #164]	; (8000f58 <MX_TIM2_Init+0x12c>)
 8000eb4:	f008 f9a8 	bl	8009208 <HAL_TIM_PWM_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000ebe:	f000 fb25 	bl	800150c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eca:	f107 031c 	add.w	r3, r7, #28
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4821      	ldr	r0, [pc, #132]	; (8000f58 <MX_TIM2_Init+0x12c>)
 8000ed2:	f009 fb5d 	bl	800a590 <HAL_TIMEx_MasterConfigSynchronization>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000edc:	f000 fb16 	bl	800150c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ee0:	2360      	movs	r3, #96	; 0x60
 8000ee2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eec:	2300      	movs	r3, #0
 8000eee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4818      	ldr	r0, [pc, #96]	; (8000f58 <MX_TIM2_Init+0x12c>)
 8000ef8:	f008 fada 	bl	80094b0 <HAL_TIM_PWM_ConfigChannel>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000f02:	f000 fb03 	bl	800150c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f06:	463b      	mov	r3, r7
 8000f08:	2204      	movs	r2, #4
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4812      	ldr	r0, [pc, #72]	; (8000f58 <MX_TIM2_Init+0x12c>)
 8000f0e:	f008 facf 	bl	80094b0 <HAL_TIM_PWM_ConfigChannel>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000f18:	f000 faf8 	bl	800150c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	2208      	movs	r2, #8
 8000f20:	4619      	mov	r1, r3
 8000f22:	480d      	ldr	r0, [pc, #52]	; (8000f58 <MX_TIM2_Init+0x12c>)
 8000f24:	f008 fac4 	bl	80094b0 <HAL_TIM_PWM_ConfigChannel>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000f2e:	f000 faed 	bl	800150c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f32:	463b      	mov	r3, r7
 8000f34:	220c      	movs	r2, #12
 8000f36:	4619      	mov	r1, r3
 8000f38:	4807      	ldr	r0, [pc, #28]	; (8000f58 <MX_TIM2_Init+0x12c>)
 8000f3a:	f008 fab9 	bl	80094b0 <HAL_TIM_PWM_ConfigChannel>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8000f44:	f000 fae2 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f48:	4803      	ldr	r0, [pc, #12]	; (8000f58 <MX_TIM2_Init+0x12c>)
 8000f4a:	f001 f935 	bl	80021b8 <HAL_TIM_MspPostInit>

}
 8000f4e:	bf00      	nop
 8000f50:	3738      	adds	r7, #56	; 0x38
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	240005ec 	.word	0x240005ec

08000f5c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	; 0x28
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f62:	f107 031c 	add.w	r3, r7, #28
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f6e:	463b      	mov	r3, r7
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
 8000f7c:	615a      	str	r2, [r3, #20]
 8000f7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f80:	4b27      	ldr	r3, [pc, #156]	; (8001020 <MX_TIM3_Init+0xc4>)
 8000f82:	4a28      	ldr	r2, [pc, #160]	; (8001024 <MX_TIM3_Init+0xc8>)
 8000f84:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f86:	4b26      	ldr	r3, [pc, #152]	; (8001020 <MX_TIM3_Init+0xc4>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f8c:	4b24      	ldr	r3, [pc, #144]	; (8001020 <MX_TIM3_Init+0xc4>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f92:	4b23      	ldr	r3, [pc, #140]	; (8001020 <MX_TIM3_Init+0xc4>)
 8000f94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f98:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f9a:	4b21      	ldr	r3, [pc, #132]	; (8001020 <MX_TIM3_Init+0xc4>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa0:	4b1f      	ldr	r3, [pc, #124]	; (8001020 <MX_TIM3_Init+0xc4>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fa6:	481e      	ldr	r0, [pc, #120]	; (8001020 <MX_TIM3_Init+0xc4>)
 8000fa8:	f008 f92e 	bl	8009208 <HAL_TIM_PWM_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000fb2:	f000 faab 	bl	800150c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fbe:	f107 031c 	add.w	r3, r7, #28
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4816      	ldr	r0, [pc, #88]	; (8001020 <MX_TIM3_Init+0xc4>)
 8000fc6:	f009 fae3 	bl	800a590 <HAL_TIMEx_MasterConfigSynchronization>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000fd0:	f000 fa9c 	bl	800150c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fd4:	2360      	movs	r3, #96	; 0x60
 8000fd6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	4619      	mov	r1, r3
 8000fea:	480d      	ldr	r0, [pc, #52]	; (8001020 <MX_TIM3_Init+0xc4>)
 8000fec:	f008 fa60 	bl	80094b0 <HAL_TIM_PWM_ConfigChannel>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000ff6:	f000 fa89 	bl	800150c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	2204      	movs	r2, #4
 8000ffe:	4619      	mov	r1, r3
 8001000:	4807      	ldr	r0, [pc, #28]	; (8001020 <MX_TIM3_Init+0xc4>)
 8001002:	f008 fa55 	bl	80094b0 <HAL_TIM_PWM_ConfigChannel>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800100c:	f000 fa7e 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001010:	4803      	ldr	r0, [pc, #12]	; (8001020 <MX_TIM3_Init+0xc4>)
 8001012:	f001 f8d1 	bl	80021b8 <HAL_TIM_MspPostInit>

}
 8001016:	bf00      	nop
 8001018:	3728      	adds	r7, #40	; 0x28
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	24000638 	.word	0x24000638
 8001024:	40000400 	.word	0x40000400

08001028 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b090      	sub	sp, #64	; 0x40
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800102e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800103c:	f107 031c 	add.w	r3, r7, #28
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800105a:	463b      	mov	r3, r7
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001064:	4b3d      	ldr	r3, [pc, #244]	; (800115c <MX_TIM5_Init+0x134>)
 8001066:	4a3e      	ldr	r2, [pc, #248]	; (8001160 <MX_TIM5_Init+0x138>)
 8001068:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800106a:	4b3c      	ldr	r3, [pc, #240]	; (800115c <MX_TIM5_Init+0x134>)
 800106c:	2200      	movs	r2, #0
 800106e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001070:	4b3a      	ldr	r3, [pc, #232]	; (800115c <MX_TIM5_Init+0x134>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001076:	4b39      	ldr	r3, [pc, #228]	; (800115c <MX_TIM5_Init+0x134>)
 8001078:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800107c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107e:	4b37      	ldr	r3, [pc, #220]	; (800115c <MX_TIM5_Init+0x134>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001084:	4b35      	ldr	r3, [pc, #212]	; (800115c <MX_TIM5_Init+0x134>)
 8001086:	2200      	movs	r2, #0
 8001088:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800108a:	4834      	ldr	r0, [pc, #208]	; (800115c <MX_TIM5_Init+0x134>)
 800108c:	f008 f865 	bl	800915a <HAL_TIM_Base_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8001096:	f000 fa39 	bl	800150c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800109a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800109e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80010a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010a4:	4619      	mov	r1, r3
 80010a6:	482d      	ldr	r0, [pc, #180]	; (800115c <MX_TIM5_Init+0x134>)
 80010a8:	f008 fb16 	bl	80096d8 <HAL_TIM_ConfigClockSource>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 80010b2:	f000 fa2b 	bl	800150c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80010b6:	4829      	ldr	r0, [pc, #164]	; (800115c <MX_TIM5_Init+0x134>)
 80010b8:	f008 f8fd 	bl	80092b6 <HAL_TIM_IC_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 80010c2:	f000 fa23 	bl	800150c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80010c6:	2304      	movs	r3, #4
 80010c8:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80010ca:	2350      	movs	r3, #80	; 0x50
 80010cc:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010ce:	2300      	movs	r3, #0
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 80010da:	f107 031c 	add.w	r3, r7, #28
 80010de:	4619      	mov	r1, r3
 80010e0:	481e      	ldr	r0, [pc, #120]	; (800115c <MX_TIM5_Init+0x134>)
 80010e2:	f008 fbf1 	bl	80098c8 <HAL_TIM_SlaveConfigSynchro>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 80010ec:	f000 fa0e 	bl	800150c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010f4:	2301      	movs	r3, #1
 80010f6:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	2200      	movs	r2, #0
 8001106:	4619      	mov	r1, r3
 8001108:	4814      	ldr	r0, [pc, #80]	; (800115c <MX_TIM5_Init+0x134>)
 800110a:	f008 f935 	bl	8009378 <HAL_TIM_IC_ConfigChannel>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM5_Init+0xf0>
  {
    Error_Handler();
 8001114:	f000 f9fa 	bl	800150c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001118:	2302      	movs	r3, #2
 800111a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800111c:	2302      	movs	r3, #2
 800111e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	2204      	movs	r2, #4
 8001126:	4619      	mov	r1, r3
 8001128:	480c      	ldr	r0, [pc, #48]	; (800115c <MX_TIM5_Init+0x134>)
 800112a:	f008 f925 	bl	8009378 <HAL_TIM_IC_ConfigChannel>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_TIM5_Init+0x110>
  {
    Error_Handler();
 8001134:	f000 f9ea 	bl	800150c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001138:	2300      	movs	r3, #0
 800113a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800113c:	2300      	movs	r3, #0
 800113e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001140:	463b      	mov	r3, r7
 8001142:	4619      	mov	r1, r3
 8001144:	4805      	ldr	r0, [pc, #20]	; (800115c <MX_TIM5_Init+0x134>)
 8001146:	f009 fa23 	bl	800a590 <HAL_TIMEx_MasterConfigSynchronization>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM5_Init+0x12c>
  {
    Error_Handler();
 8001150:	f000 f9dc 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001154:	bf00      	nop
 8001156:	3740      	adds	r7, #64	; 0x40
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	24000684 	.word	0x24000684
 8001160:	40000c00 	.word	0x40000c00

08001164 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b090      	sub	sp, #64	; 0x40
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800116a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001178:	f107 031c 	add.w	r3, r7, #28
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001196:	463b      	mov	r3, r7
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80011a0:	4b3f      	ldr	r3, [pc, #252]	; (80012a0 <MX_TIM15_Init+0x13c>)
 80011a2:	4a40      	ldr	r2, [pc, #256]	; (80012a4 <MX_TIM15_Init+0x140>)
 80011a4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80011a6:	4b3e      	ldr	r3, [pc, #248]	; (80012a0 <MX_TIM15_Init+0x13c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ac:	4b3c      	ldr	r3, [pc, #240]	; (80012a0 <MX_TIM15_Init+0x13c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80011b2:	4b3b      	ldr	r3, [pc, #236]	; (80012a0 <MX_TIM15_Init+0x13c>)
 80011b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011b8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ba:	4b39      	ldr	r3, [pc, #228]	; (80012a0 <MX_TIM15_Init+0x13c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80011c0:	4b37      	ldr	r3, [pc, #220]	; (80012a0 <MX_TIM15_Init+0x13c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c6:	4b36      	ldr	r3, [pc, #216]	; (80012a0 <MX_TIM15_Init+0x13c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80011cc:	4834      	ldr	r0, [pc, #208]	; (80012a0 <MX_TIM15_Init+0x13c>)
 80011ce:	f007 ffc4 	bl	800915a <HAL_TIM_Base_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 80011d8:	f000 f998 	bl	800150c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80011e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011e6:	4619      	mov	r1, r3
 80011e8:	482d      	ldr	r0, [pc, #180]	; (80012a0 <MX_TIM15_Init+0x13c>)
 80011ea:	f008 fa75 	bl	80096d8 <HAL_TIM_ConfigClockSource>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 80011f4:	f000 f98a 	bl	800150c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 80011f8:	4829      	ldr	r0, [pc, #164]	; (80012a0 <MX_TIM15_Init+0x13c>)
 80011fa:	f008 f85c 	bl	80092b6 <HAL_TIM_IC_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM15_Init+0xa4>
  {
    Error_Handler();
 8001204:	f000 f982 	bl	800150c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001208:	2304      	movs	r3, #4
 800120a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800120c:	2350      	movs	r3, #80	; 0x50
 800120e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001210:	2300      	movs	r3, #0
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001214:	2300      	movs	r3, #0
 8001216:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 800121c:	f107 031c 	add.w	r3, r7, #28
 8001220:	4619      	mov	r1, r3
 8001222:	481f      	ldr	r0, [pc, #124]	; (80012a0 <MX_TIM15_Init+0x13c>)
 8001224:	f008 fb50 	bl	80098c8 <HAL_TIM_SlaveConfigSynchro>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 800122e:	f000 f96d 	bl	800150c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001236:	2301      	movs	r3, #1
 8001238:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001242:	f107 030c 	add.w	r3, r7, #12
 8001246:	2200      	movs	r2, #0
 8001248:	4619      	mov	r1, r3
 800124a:	4815      	ldr	r0, [pc, #84]	; (80012a0 <MX_TIM15_Init+0x13c>)
 800124c:	f008 f894 	bl	8009378 <HAL_TIM_IC_ConfigChannel>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8001256:	f000 f959 	bl	800150c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800125a:	2302      	movs	r3, #2
 800125c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800125e:	2302      	movs	r3, #2
 8001260:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	2204      	movs	r2, #4
 8001268:	4619      	mov	r1, r3
 800126a:	480d      	ldr	r0, [pc, #52]	; (80012a0 <MX_TIM15_Init+0x13c>)
 800126c:	f008 f884 	bl	8009378 <HAL_TIM_IC_ConfigChannel>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM15_Init+0x116>
  {
    Error_Handler();
 8001276:	f000 f949 	bl	800150c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127a:	2300      	movs	r3, #0
 800127c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001282:	463b      	mov	r3, r7
 8001284:	4619      	mov	r1, r3
 8001286:	4806      	ldr	r0, [pc, #24]	; (80012a0 <MX_TIM15_Init+0x13c>)
 8001288:	f009 f982 	bl	800a590 <HAL_TIMEx_MasterConfigSynchronization>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8001292:	f000 f93b 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	3740      	adds	r7, #64	; 0x40
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	240006d0 	.word	0x240006d0
 80012a4:	40014000 	.word	0x40014000

080012a8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80012ac:	4b15      	ldr	r3, [pc, #84]	; (8001304 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012ae:	4a16      	ldr	r2, [pc, #88]	; (8001308 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80012b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80012b2:	4b14      	ldr	r3, [pc, #80]	; (8001304 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012b4:	2209      	movs	r2, #9
 80012b6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80012b8:	4b12      	ldr	r3, [pc, #72]	; (8001304 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012ba:	2202      	movs	r2, #2
 80012bc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80012be:	4b11      	ldr	r3, [pc, #68]	; (8001304 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80012c4:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012c6:	2202      	movs	r2, #2
 80012c8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80012d6:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80012dc:	4b09      	ldr	r3, [pc, #36]	; (8001304 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012de:	2200      	movs	r2, #0
 80012e0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80012ee:	4805      	ldr	r0, [pc, #20]	; (8001304 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012f0:	f002 fe55 	bl	8003f9e <HAL_PCD_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80012fa:	f000 f907 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	2400071c 	.word	0x2400071c
 8001308:	40080000 	.word	0x40080000

0800130c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08c      	sub	sp, #48	; 0x30
 8001310:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001312:	f107 031c 	add.w	r3, r7, #28
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
 8001320:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001322:	4b74      	ldr	r3, [pc, #464]	; (80014f4 <MX_GPIO_Init+0x1e8>)
 8001324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001328:	4a72      	ldr	r2, [pc, #456]	; (80014f4 <MX_GPIO_Init+0x1e8>)
 800132a:	f043 0310 	orr.w	r3, r3, #16
 800132e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001332:	4b70      	ldr	r3, [pc, #448]	; (80014f4 <MX_GPIO_Init+0x1e8>)
 8001334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001338:	f003 0310 	and.w	r3, r3, #16
 800133c:	61bb      	str	r3, [r7, #24]
 800133e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001340:	4b6c      	ldr	r3, [pc, #432]	; (80014f4 <MX_GPIO_Init+0x1e8>)
 8001342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001346:	4a6b      	ldr	r2, [pc, #428]	; (80014f4 <MX_GPIO_Init+0x1e8>)
 8001348:	f043 0304 	orr.w	r3, r3, #4
 800134c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001350:	4b68      	ldr	r3, [pc, #416]	; (80014f4 <MX_GPIO_Init+0x1e8>)
 8001352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001356:	f003 0304 	and.w	r3, r3, #4
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800135e:	4b65      	ldr	r3, [pc, #404]	; (80014f4 <MX_GPIO_Init+0x1e8>)
 8001360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001364:	4a63      	ldr	r2, [pc, #396]	; (80014f4 <MX_GPIO_Init+0x1e8>)
 8001366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800136a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800136e:	4b61      	ldr	r3, [pc, #388]	; (80014f4 <MX_GPIO_Init+0x1e8>)
 8001370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800137c:	4b5d      	ldr	r3, [pc, #372]	; (80014f4 <MX_GPIO_Init+0x1e8>)
 800137e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001382:	4a5c      	ldr	r2, [pc, #368]	; (80014f4 <MX_GPIO_Init+0x1e8>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800138c:	4b59      	ldr	r3, [pc, #356]	; (80014f4 <MX_GPIO_Init+0x1e8>)
 800138e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800139a:	4b56      	ldr	r3, [pc, #344]	; (80014f4 <MX_GPIO_Init+0x1e8>)
 800139c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a0:	4a54      	ldr	r2, [pc, #336]	; (80014f4 <MX_GPIO_Init+0x1e8>)
 80013a2:	f043 0302 	orr.w	r3, r3, #2
 80013a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013aa:	4b52      	ldr	r3, [pc, #328]	; (80014f4 <MX_GPIO_Init+0x1e8>)
 80013ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b8:	4b4e      	ldr	r3, [pc, #312]	; (80014f4 <MX_GPIO_Init+0x1e8>)
 80013ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013be:	4a4d      	ldr	r2, [pc, #308]	; (80014f4 <MX_GPIO_Init+0x1e8>)
 80013c0:	f043 0308 	orr.w	r3, r3, #8
 80013c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013c8:	4b4a      	ldr	r3, [pc, #296]	; (80014f4 <MX_GPIO_Init+0x1e8>)
 80013ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ce:	f003 0308 	and.w	r3, r3, #8
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ONBOARD_LED_Pin|LCD_LED_Pin|LCD_CS_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	f648 4108 	movw	r1, #35848	; 0x8c08
 80013dc:	4846      	ldr	r0, [pc, #280]	; (80014f8 <MX_GPIO_Init+0x1ec>)
 80013de:	f002 fc9d 	bl	8003d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BNO_NRST_Pin|BNO_BOOTN_Pin|Manual_Output_Pin, GPIO_PIN_RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	f24c 0120 	movw	r1, #49184	; 0xc020
 80013e8:	4844      	ldr	r0, [pc, #272]	; (80014fc <MX_GPIO_Init+0x1f0>)
 80013ea:	f002 fc97 	bl	8003d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BNO_P0_Pin|BNO_P1_Pin|PCA9685_OE_Pin|LED_BLUE_Pin
 80013ee:	2200      	movs	r2, #0
 80013f0:	f44f 61ed 	mov.w	r1, #1896	; 0x768
 80013f4:	4842      	ldr	r0, [pc, #264]	; (8001500 <MX_GPIO_Init+0x1f4>)
 80013f6:	f002 fc91 	bl	8003d1c <HAL_GPIO_WritePin>
                          |LED_YELLOW_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : ONBOARD_LED_Pin LCD_LED_Pin LCD_CS_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = ONBOARD_LED_Pin|LCD_LED_Pin|LCD_CS_Pin|LED_RED_Pin;
 80013fa:	f648 4308 	movw	r3, #35848	; 0x8c08
 80013fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001400:	2301      	movs	r3, #1
 8001402:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2300      	movs	r3, #0
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	4619      	mov	r1, r3
 8001412:	4839      	ldr	r0, [pc, #228]	; (80014f8 <MX_GPIO_Init+0x1ec>)
 8001414:	f002 fad2 	bl	80039bc <HAL_GPIO_Init>

  /*Configure GPIO pin : ONBOARD_KEY1_Pin */
  GPIO_InitStruct.Pin = ONBOARD_KEY1_Pin;
 8001418:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800141c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800141e:	2300      	movs	r3, #0
 8001420:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ONBOARD_KEY1_GPIO_Port, &GPIO_InitStruct);
 8001426:	f107 031c 	add.w	r3, r7, #28
 800142a:	4619      	mov	r1, r3
 800142c:	4835      	ldr	r0, [pc, #212]	; (8001504 <MX_GPIO_Init+0x1f8>)
 800142e:	f002 fac5 	bl	80039bc <HAL_GPIO_Init>

  /*Configure GPIO pin : SB1_Pin */
  GPIO_InitStruct.Pin = SB1_Pin;
 8001432:	2380      	movs	r3, #128	; 0x80
 8001434:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001436:	2300      	movs	r3, #0
 8001438:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SB1_GPIO_Port, &GPIO_InitStruct);
 800143e:	f107 031c 	add.w	r3, r7, #28
 8001442:	4619      	mov	r1, r3
 8001444:	4830      	ldr	r0, [pc, #192]	; (8001508 <MX_GPIO_Init+0x1fc>)
 8001446:	f002 fab9 	bl	80039bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BNO_INT_Pin */
  GPIO_InitStruct.Pin = BNO_INT_Pin;
 800144a:	2380      	movs	r3, #128	; 0x80
 800144c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800144e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001452:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BNO_INT_GPIO_Port, &GPIO_InitStruct);
 8001458:	f107 031c 	add.w	r3, r7, #28
 800145c:	4619      	mov	r1, r3
 800145e:	4826      	ldr	r0, [pc, #152]	; (80014f8 <MX_GPIO_Init+0x1ec>)
 8001460:	f002 faac 	bl	80039bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_SWITCH_Pin */
  GPIO_InitStruct.Pin = LCD_SWITCH_Pin;
 8001464:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001468:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800146a:	2300      	movs	r3, #0
 800146c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LCD_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8001472:	f107 031c 	add.w	r3, r7, #28
 8001476:	4619      	mov	r1, r3
 8001478:	481f      	ldr	r0, [pc, #124]	; (80014f8 <MX_GPIO_Init+0x1ec>)
 800147a:	f002 fa9f 	bl	80039bc <HAL_GPIO_Init>

  /*Configure GPIO pins : BNO_NRST_Pin BNO_BOOTN_Pin Manual_Output_Pin */
  GPIO_InitStruct.Pin = BNO_NRST_Pin|BNO_BOOTN_Pin|Manual_Output_Pin;
 800147e:	f24c 0320 	movw	r3, #49184	; 0xc020
 8001482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001484:	2301      	movs	r3, #1
 8001486:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2300      	movs	r3, #0
 800148e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001490:	f107 031c 	add.w	r3, r7, #28
 8001494:	4619      	mov	r1, r3
 8001496:	4819      	ldr	r0, [pc, #100]	; (80014fc <MX_GPIO_Init+0x1f0>)
 8001498:	f002 fa90 	bl	80039bc <HAL_GPIO_Init>

  /*Configure GPIO pins : BNO_P0_Pin BNO_P1_Pin PCA9685_OE_Pin LED_BLUE_Pin
                           LED_YELLOW_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = BNO_P0_Pin|BNO_P1_Pin|PCA9685_OE_Pin|LED_BLUE_Pin
 800149c:	f44f 63ed 	mov.w	r3, #1896	; 0x768
 80014a0:	61fb      	str	r3, [r7, #28]
                          |LED_YELLOW_Pin|SPI1_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a2:	2301      	movs	r3, #1
 80014a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014aa:	2300      	movs	r3, #0
 80014ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ae:	f107 031c 	add.w	r3, r7, #28
 80014b2:	4619      	mov	r1, r3
 80014b4:	4812      	ldr	r0, [pc, #72]	; (8001500 <MX_GPIO_Init+0x1f4>)
 80014b6:	f002 fa81 	bl	80039bc <HAL_GPIO_Init>

  /*Configure GPIO pin : SB2_Pin */
  GPIO_InitStruct.Pin = SB2_Pin;
 80014ba:	2310      	movs	r3, #16
 80014bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014be:	2300      	movs	r3, #0
 80014c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SB2_GPIO_Port, &GPIO_InitStruct);
 80014c6:	f107 031c 	add.w	r3, r7, #28
 80014ca:	4619      	mov	r1, r3
 80014cc:	480c      	ldr	r0, [pc, #48]	; (8001500 <MX_GPIO_Init+0x1f4>)
 80014ce:	f002 fa75 	bl	80039bc <HAL_GPIO_Init>

  /*Configure GPIO pin : Manual_Input_Pin */
  GPIO_InitStruct.Pin = Manual_Input_Pin;
 80014d2:	2380      	movs	r3, #128	; 0x80
 80014d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d6:	2300      	movs	r3, #0
 80014d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Manual_Input_GPIO_Port, &GPIO_InitStruct);
 80014de:	f107 031c 	add.w	r3, r7, #28
 80014e2:	4619      	mov	r1, r3
 80014e4:	4805      	ldr	r0, [pc, #20]	; (80014fc <MX_GPIO_Init+0x1f0>)
 80014e6:	f002 fa69 	bl	80039bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014ea:	bf00      	nop
 80014ec:	3730      	adds	r7, #48	; 0x30
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	58024400 	.word	0x58024400
 80014f8:	58021000 	.word	0x58021000
 80014fc:	58020400 	.word	0x58020400
 8001500:	58020c00 	.word	0x58020c00
 8001504:	58020800 	.word	0x58020800
 8001508:	58020000 	.word	0x58020000

0800150c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001510:	b672      	cpsid	i
}
 8001512:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001514:	e7fe      	b.n	8001514 <Error_Handler+0x8>
	...

08001518 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151e:	4b13      	ldr	r3, [pc, #76]	; (800156c <HAL_MspInit+0x54>)
 8001520:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001524:	4a11      	ldr	r2, [pc, #68]	; (800156c <HAL_MspInit+0x54>)
 8001526:	f043 0302 	orr.w	r3, r3, #2
 800152a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800152e:	4b0f      	ldr	r3, [pc, #60]	; (800156c <HAL_MspInit+0x54>)
 8001530:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	607b      	str	r3, [r7, #4]
 800153a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 800153c:	4b0b      	ldr	r3, [pc, #44]	; (800156c <HAL_MspInit+0x54>)
 800153e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001542:	4a0a      	ldr	r2, [pc, #40]	; (800156c <HAL_MspInit+0x54>)
 8001544:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001548:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800154c:	4b07      	ldr	r3, [pc, #28]	; (800156c <HAL_MspInit+0x54>)
 800154e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001552:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001556:	603b      	str	r3, [r7, #0]
 8001558:	683b      	ldr	r3, [r7, #0]

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 800155a:	f001 f8ad 	bl	80026b8 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 800155e:	2002      	movs	r0, #2
 8001560:	f001 f896 	bl	8002690 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001564:	bf00      	nop
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	58024400 	.word	0x58024400

08001570 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b0bc      	sub	sp, #240	; 0xf0
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001588:	f107 0318 	add.w	r3, r7, #24
 800158c:	22c0      	movs	r2, #192	; 0xc0
 800158e:	2100      	movs	r1, #0
 8001590:	4618      	mov	r0, r3
 8001592:	f00b f959 	bl	800c848 <memset>
  if(hadc->Instance==ADC1)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a4a      	ldr	r2, [pc, #296]	; (80016c4 <HAL_ADC_MspInit+0x154>)
 800159c:	4293      	cmp	r3, r2
 800159e:	f040 808c 	bne.w	80016ba <HAL_ADC_MspInit+0x14a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80015a2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80015a6:	f04f 0300 	mov.w	r3, #0
 80015aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 10;
 80015ae:	230a      	movs	r3, #10
 80015b0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 60;
 80015b2:	233c      	movs	r3, #60	; 0x3c
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80015b6:	2302      	movs	r3, #2
 80015b8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80015ba:	2302      	movs	r3, #2
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80015be:	2302      	movs	r3, #2
 80015c0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 80015c2:	2340      	movs	r3, #64	; 0x40
 80015c4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80015c6:	2320      	movs	r3, #32
 80015c8:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80015ce:	2300      	movs	r3, #0
 80015d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015d4:	f107 0318 	add.w	r3, r7, #24
 80015d8:	4618      	mov	r0, r3
 80015da:	f003 ff13 	bl	8005404 <HAL_RCCEx_PeriphCLKConfig>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 80015e4:	f7ff ff92 	bl	800150c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80015e8:	4b37      	ldr	r3, [pc, #220]	; (80016c8 <HAL_ADC_MspInit+0x158>)
 80015ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015ee:	4a36      	ldr	r2, [pc, #216]	; (80016c8 <HAL_ADC_MspInit+0x158>)
 80015f0:	f043 0320 	orr.w	r3, r3, #32
 80015f4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015f8:	4b33      	ldr	r3, [pc, #204]	; (80016c8 <HAL_ADC_MspInit+0x158>)
 80015fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015fe:	f003 0320 	and.w	r3, r3, #32
 8001602:	617b      	str	r3, [r7, #20]
 8001604:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001606:	4b30      	ldr	r3, [pc, #192]	; (80016c8 <HAL_ADC_MspInit+0x158>)
 8001608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800160c:	4a2e      	ldr	r2, [pc, #184]	; (80016c8 <HAL_ADC_MspInit+0x158>)
 800160e:	f043 0304 	orr.w	r3, r3, #4
 8001612:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001616:	4b2c      	ldr	r3, [pc, #176]	; (80016c8 <HAL_ADC_MspInit+0x158>)
 8001618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	613b      	str	r3, [r7, #16]
 8001622:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001624:	4b28      	ldr	r3, [pc, #160]	; (80016c8 <HAL_ADC_MspInit+0x158>)
 8001626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800162a:	4a27      	ldr	r2, [pc, #156]	; (80016c8 <HAL_ADC_MspInit+0x158>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001634:	4b24      	ldr	r3, [pc, #144]	; (80016c8 <HAL_ADC_MspInit+0x158>)
 8001636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001642:	4b21      	ldr	r3, [pc, #132]	; (80016c8 <HAL_ADC_MspInit+0x158>)
 8001644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001648:	4a1f      	ldr	r2, [pc, #124]	; (80016c8 <HAL_ADC_MspInit+0x158>)
 800164a:	f043 0302 	orr.w	r3, r3, #2
 800164e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001652:	4b1d      	ldr	r3, [pc, #116]	; (80016c8 <HAL_ADC_MspInit+0x158>)
 8001654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = F06_Pin|F07_Pin|F01_Pin|F04_Pin;
 8001660:	2333      	movs	r3, #51	; 0x33
 8001662:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001666:	2303      	movs	r3, #3
 8001668:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001672:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001676:	4619      	mov	r1, r3
 8001678:	4814      	ldr	r0, [pc, #80]	; (80016cc <HAL_ADC_MspInit+0x15c>)
 800167a:	f002 f99f 	bl	80039bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = F03_Pin|F00_Pin;
 800167e:	2350      	movs	r3, #80	; 0x50
 8001680:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001684:	2303      	movs	r3, #3
 8001686:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001690:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001694:	4619      	mov	r1, r3
 8001696:	480e      	ldr	r0, [pc, #56]	; (80016d0 <HAL_ADC_MspInit+0x160>)
 8001698:	f002 f990 	bl	80039bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = F05_Pin|F02_Pin;
 800169c:	2303      	movs	r3, #3
 800169e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016a2:	2303      	movs	r3, #3
 80016a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ae:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016b2:	4619      	mov	r1, r3
 80016b4:	4807      	ldr	r0, [pc, #28]	; (80016d4 <HAL_ADC_MspInit+0x164>)
 80016b6:	f002 f981 	bl	80039bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016ba:	bf00      	nop
 80016bc:	37f0      	adds	r7, #240	; 0xf0
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40022000 	.word	0x40022000
 80016c8:	58024400 	.word	0x58024400
 80016cc:	58020800 	.word	0x58020800
 80016d0:	58020000 	.word	0x58020000
 80016d4:	58020400 	.word	0x58020400

080016d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b0ba      	sub	sp, #232	; 0xe8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016f0:	f107 0310 	add.w	r3, r7, #16
 80016f4:	22c0      	movs	r2, #192	; 0xc0
 80016f6:	2100      	movs	r1, #0
 80016f8:	4618      	mov	r0, r3
 80016fa:	f00b f8a5 	bl	800c848 <memset>
  if(hi2c->Instance==I2C1)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a27      	ldr	r2, [pc, #156]	; (80017a0 <HAL_I2C_MspInit+0xc8>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d146      	bne.n	8001796 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001708:	f04f 0208 	mov.w	r2, #8
 800170c:	f04f 0300 	mov.w	r3, #0
 8001710:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001714:	2300      	movs	r3, #0
 8001716:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800171a:	f107 0310 	add.w	r3, r7, #16
 800171e:	4618      	mov	r0, r3
 8001720:	f003 fe70 	bl	8005404 <HAL_RCCEx_PeriphCLKConfig>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800172a:	f7ff feef 	bl	800150c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800172e:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <HAL_I2C_MspInit+0xcc>)
 8001730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001734:	4a1b      	ldr	r2, [pc, #108]	; (80017a4 <HAL_I2C_MspInit+0xcc>)
 8001736:	f043 0302 	orr.w	r3, r3, #2
 800173a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800173e:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <HAL_I2C_MspInit+0xcc>)
 8001740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800174c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001750:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001754:	2312      	movs	r3, #18
 8001756:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001760:	2300      	movs	r3, #0
 8001762:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001766:	2304      	movs	r3, #4
 8001768:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001770:	4619      	mov	r1, r3
 8001772:	480d      	ldr	r0, [pc, #52]	; (80017a8 <HAL_I2C_MspInit+0xd0>)
 8001774:	f002 f922 	bl	80039bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001778:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <HAL_I2C_MspInit+0xcc>)
 800177a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800177e:	4a09      	ldr	r2, [pc, #36]	; (80017a4 <HAL_I2C_MspInit+0xcc>)
 8001780:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001784:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_I2C_MspInit+0xcc>)
 800178a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800178e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001792:	60bb      	str	r3, [r7, #8]
 8001794:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001796:	bf00      	nop
 8001798:	37e8      	adds	r7, #232	; 0xe8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40005400 	.word	0x40005400
 80017a4:	58024400 	.word	0x58024400
 80017a8:	58020400 	.word	0x58020400

080017ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b0c4      	sub	sp, #272	; 0x110
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80017b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80017ba:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017d0:	22c0      	movs	r2, #192	; 0xc0
 80017d2:	2100      	movs	r1, #0
 80017d4:	4618      	mov	r0, r3
 80017d6:	f00b f837 	bl	800c848 <memset>
  if(huart->Instance==LPUART1)
 80017da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80017de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4ab1      	ldr	r2, [pc, #708]	; (8001aac <HAL_UART_MspInit+0x300>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d147      	bne.n	800187c <HAL_UART_MspInit+0xd0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80017ec:	f04f 0204 	mov.w	r2, #4
 80017f0:	f04f 0300 	mov.w	r3, #0
 80017f4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 80017f8:	2300      	movs	r3, #0
 80017fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001802:	4618      	mov	r0, r3
 8001804:	f003 fdfe 	bl	8005404 <HAL_RCCEx_PeriphCLKConfig>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 800180e:	f7ff fe7d 	bl	800150c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001812:	4ba7      	ldr	r3, [pc, #668]	; (8001ab0 <HAL_UART_MspInit+0x304>)
 8001814:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001818:	4aa5      	ldr	r2, [pc, #660]	; (8001ab0 <HAL_UART_MspInit+0x304>)
 800181a:	f043 0308 	orr.w	r3, r3, #8
 800181e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001822:	4ba3      	ldr	r3, [pc, #652]	; (8001ab0 <HAL_UART_MspInit+0x304>)
 8001824:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001828:	f003 0308 	and.w	r3, r3, #8
 800182c:	637b      	str	r3, [r7, #52]	; 0x34
 800182e:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001830:	4b9f      	ldr	r3, [pc, #636]	; (8001ab0 <HAL_UART_MspInit+0x304>)
 8001832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001836:	4a9e      	ldr	r2, [pc, #632]	; (8001ab0 <HAL_UART_MspInit+0x304>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001840:	4b9b      	ldr	r3, [pc, #620]	; (8001ab0 <HAL_UART_MspInit+0x304>)
 8001842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	633b      	str	r3, [r7, #48]	; 0x30
 800184c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800184e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001852:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001856:	2302      	movs	r3, #2
 8001858:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001862:	2300      	movs	r3, #0
 8001864:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 8001868:	2303      	movs	r3, #3
 800186a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001872:	4619      	mov	r1, r3
 8001874:	488f      	ldr	r0, [pc, #572]	; (8001ab4 <HAL_UART_MspInit+0x308>)
 8001876:	f002 f8a1 	bl	80039bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800187a:	e189      	b.n	8001b90 <HAL_UART_MspInit+0x3e4>
  else if(huart->Instance==UART4)
 800187c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001880:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a8b      	ldr	r2, [pc, #556]	; (8001ab8 <HAL_UART_MspInit+0x30c>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d146      	bne.n	800191c <HAL_UART_MspInit+0x170>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800188e:	f04f 0202 	mov.w	r2, #2
 8001892:	f04f 0300 	mov.w	r3, #0
 8001896:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800189a:	2300      	movs	r3, #0
 800189c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018a4:	4618      	mov	r0, r3
 80018a6:	f003 fdad 	bl	8005404 <HAL_RCCEx_PeriphCLKConfig>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <HAL_UART_MspInit+0x108>
      Error_Handler();
 80018b0:	f7ff fe2c 	bl	800150c <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 80018b4:	4b7e      	ldr	r3, [pc, #504]	; (8001ab0 <HAL_UART_MspInit+0x304>)
 80018b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018ba:	4a7d      	ldr	r2, [pc, #500]	; (8001ab0 <HAL_UART_MspInit+0x304>)
 80018bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018c0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80018c4:	4b7a      	ldr	r3, [pc, #488]	; (8001ab0 <HAL_UART_MspInit+0x304>)
 80018c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018d2:	4b77      	ldr	r3, [pc, #476]	; (8001ab0 <HAL_UART_MspInit+0x304>)
 80018d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d8:	4a75      	ldr	r2, [pc, #468]	; (8001ab0 <HAL_UART_MspInit+0x304>)
 80018da:	f043 0308 	orr.w	r3, r3, #8
 80018de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018e2:	4b73      	ldr	r3, [pc, #460]	; (8001ab0 <HAL_UART_MspInit+0x304>)
 80018e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018e8:	f003 0308 	and.w	r3, r3, #8
 80018ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80018ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018f0:	2303      	movs	r3, #3
 80018f2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	2302      	movs	r3, #2
 80018f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001902:	2300      	movs	r3, #0
 8001904:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001908:	2308      	movs	r3, #8
 800190a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800190e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001912:	4619      	mov	r1, r3
 8001914:	4869      	ldr	r0, [pc, #420]	; (8001abc <HAL_UART_MspInit+0x310>)
 8001916:	f002 f851 	bl	80039bc <HAL_GPIO_Init>
}
 800191a:	e139      	b.n	8001b90 <HAL_UART_MspInit+0x3e4>
  else if(huart->Instance==UART5)
 800191c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001920:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a65      	ldr	r2, [pc, #404]	; (8001ac0 <HAL_UART_MspInit+0x314>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d147      	bne.n	80019be <HAL_UART_MspInit+0x212>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800192e:	f04f 0202 	mov.w	r2, #2
 8001932:	f04f 0300 	mov.w	r3, #0
 8001936:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800193a:	2300      	movs	r3, #0
 800193c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001940:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001944:	4618      	mov	r0, r3
 8001946:	f003 fd5d 	bl	8005404 <HAL_RCCEx_PeriphCLKConfig>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8001950:	f7ff fddc 	bl	800150c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001954:	4b56      	ldr	r3, [pc, #344]	; (8001ab0 <HAL_UART_MspInit+0x304>)
 8001956:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800195a:	4a55      	ldr	r2, [pc, #340]	; (8001ab0 <HAL_UART_MspInit+0x304>)
 800195c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001960:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001964:	4b52      	ldr	r3, [pc, #328]	; (8001ab0 <HAL_UART_MspInit+0x304>)
 8001966:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800196a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
 8001970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001972:	4b4f      	ldr	r3, [pc, #316]	; (8001ab0 <HAL_UART_MspInit+0x304>)
 8001974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001978:	4a4d      	ldr	r2, [pc, #308]	; (8001ab0 <HAL_UART_MspInit+0x304>)
 800197a:	f043 0302 	orr.w	r3, r3, #2
 800197e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001982:	4b4b      	ldr	r3, [pc, #300]	; (8001ab0 <HAL_UART_MspInit+0x304>)
 8001984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	623b      	str	r3, [r7, #32]
 800198e:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001990:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001994:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001998:	2302      	movs	r3, #2
 800199a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a4:	2300      	movs	r3, #0
 80019a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80019aa:	230e      	movs	r3, #14
 80019ac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80019b4:	4619      	mov	r1, r3
 80019b6:	4843      	ldr	r0, [pc, #268]	; (8001ac4 <HAL_UART_MspInit+0x318>)
 80019b8:	f002 f800 	bl	80039bc <HAL_GPIO_Init>
}
 80019bc:	e0e8      	b.n	8001b90 <HAL_UART_MspInit+0x3e4>
  else if(huart->Instance==UART7)
 80019be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a3f      	ldr	r2, [pc, #252]	; (8001ac8 <HAL_UART_MspInit+0x31c>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d17f      	bne.n	8001ad0 <HAL_UART_MspInit+0x324>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80019d0:	f04f 0202 	mov.w	r2, #2
 80019d4:	f04f 0300 	mov.w	r3, #0
 80019d8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80019dc:	2300      	movs	r3, #0
 80019de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019e6:	4618      	mov	r0, r3
 80019e8:	f003 fd0c 	bl	8005404 <HAL_RCCEx_PeriphCLKConfig>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <HAL_UART_MspInit+0x24a>
      Error_Handler();
 80019f2:	f7ff fd8b 	bl	800150c <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 80019f6:	4b2e      	ldr	r3, [pc, #184]	; (8001ab0 <HAL_UART_MspInit+0x304>)
 80019f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019fc:	4a2c      	ldr	r2, [pc, #176]	; (8001ab0 <HAL_UART_MspInit+0x304>)
 80019fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001a02:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a06:	4b2a      	ldr	r3, [pc, #168]	; (8001ab0 <HAL_UART_MspInit+0x304>)
 8001a08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a0c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001a10:	61fb      	str	r3, [r7, #28]
 8001a12:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a14:	4b26      	ldr	r3, [pc, #152]	; (8001ab0 <HAL_UART_MspInit+0x304>)
 8001a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a1a:	4a25      	ldr	r2, [pc, #148]	; (8001ab0 <HAL_UART_MspInit+0x304>)
 8001a1c:	f043 0310 	orr.w	r3, r3, #16
 8001a20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a24:	4b22      	ldr	r3, [pc, #136]	; (8001ab0 <HAL_UART_MspInit+0x304>)
 8001a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a2a:	f003 0310 	and.w	r3, r3, #16
 8001a2e:	61bb      	str	r3, [r7, #24]
 8001a30:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a32:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <HAL_UART_MspInit+0x304>)
 8001a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a38:	4a1d      	ldr	r2, [pc, #116]	; (8001ab0 <HAL_UART_MspInit+0x304>)
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a42:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <HAL_UART_MspInit+0x304>)
 8001a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	617b      	str	r3, [r7, #20]
 8001a4e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a54:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a64:	2300      	movs	r3, #0
 8001a66:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001a6a:	2307      	movs	r3, #7
 8001a6c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a70:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001a74:	4619      	mov	r1, r3
 8001a76:	4815      	ldr	r0, [pc, #84]	; (8001acc <HAL_UART_MspInit+0x320>)
 8001a78:	f001 ffa0 	bl	80039bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a80:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	2302      	movs	r3, #2
 8001a86:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a90:	2300      	movs	r3, #0
 8001a92:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
 8001a96:	230b      	movs	r3, #11
 8001a98:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4804      	ldr	r0, [pc, #16]	; (8001ab4 <HAL_UART_MspInit+0x308>)
 8001aa4:	f001 ff8a 	bl	80039bc <HAL_GPIO_Init>
}
 8001aa8:	e072      	b.n	8001b90 <HAL_UART_MspInit+0x3e4>
 8001aaa:	bf00      	nop
 8001aac:	58000c00 	.word	0x58000c00
 8001ab0:	58024400 	.word	0x58024400
 8001ab4:	58020000 	.word	0x58020000
 8001ab8:	40004c00 	.word	0x40004c00
 8001abc:	58020c00 	.word	0x58020c00
 8001ac0:	40005000 	.word	0x40005000
 8001ac4:	58020400 	.word	0x58020400
 8001ac8:	40007800 	.word	0x40007800
 8001acc:	58021000 	.word	0x58021000
  else if(huart->Instance==USART3)
 8001ad0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001ad4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a2f      	ldr	r2, [pc, #188]	; (8001b9c <HAL_UART_MspInit+0x3f0>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d156      	bne.n	8001b90 <HAL_UART_MspInit+0x3e4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ae2:	f04f 0202 	mov.w	r2, #2
 8001ae6:	f04f 0300 	mov.w	r3, #0
 8001aea:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001aee:	2300      	movs	r3, #0
 8001af0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001af4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001af8:	4618      	mov	r0, r3
 8001afa:	f003 fc83 	bl	8005404 <HAL_RCCEx_PeriphCLKConfig>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <HAL_UART_MspInit+0x35c>
      Error_Handler();
 8001b04:	f7ff fd02 	bl	800150c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b08:	4b25      	ldr	r3, [pc, #148]	; (8001ba0 <HAL_UART_MspInit+0x3f4>)
 8001b0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b0e:	4a24      	ldr	r2, [pc, #144]	; (8001ba0 <HAL_UART_MspInit+0x3f4>)
 8001b10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b14:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b18:	4b21      	ldr	r3, [pc, #132]	; (8001ba0 <HAL_UART_MspInit+0x3f4>)
 8001b1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b1e:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 8001b22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b26:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b30:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001b34:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b36:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <HAL_UART_MspInit+0x3f4>)
 8001b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b3c:	4a18      	ldr	r2, [pc, #96]	; (8001ba0 <HAL_UART_MspInit+0x3f4>)
 8001b3e:	f043 0302 	orr.w	r3, r3, #2
 8001b42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b46:	4b16      	ldr	r3, [pc, #88]	; (8001ba0 <HAL_UART_MspInit+0x3f4>)
 8001b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b4c:	f003 0202 	and.w	r2, r3, #2
 8001b50:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001b62:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b64:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b68:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b7e:	2307      	movs	r3, #7
 8001b80:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b84:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4806      	ldr	r0, [pc, #24]	; (8001ba4 <HAL_UART_MspInit+0x3f8>)
 8001b8c:	f001 ff16 	bl	80039bc <HAL_GPIO_Init>
}
 8001b90:	bf00      	nop
 8001b92:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40004800 	.word	0x40004800
 8001ba0:	58024400 	.word	0x58024400
 8001ba4:	58020400 	.word	0x58020400

08001ba8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b0bc      	sub	sp, #240	; 0xf0
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bc0:	f107 0318 	add.w	r3, r7, #24
 8001bc4:	22c0      	movs	r2, #192	; 0xc0
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f00a fe3d 	bl	800c848 <memset>
  if(hqspi->Instance==QUADSPI)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a55      	ldr	r2, [pc, #340]	; (8001d28 <HAL_QSPI_MspInit+0x180>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	f040 80a3 	bne.w	8001d20 <HAL_QSPI_MspInit+0x178>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001bda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bde:	f04f 0300 	mov.w	r3, #0
 8001be2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8001be6:	2300      	movs	r3, #0
 8001be8:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bea:	f107 0318 	add.w	r3, r7, #24
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f003 fc08 	bl	8005404 <HAL_RCCEx_PeriphCLKConfig>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8001bfa:	f7ff fc87 	bl	800150c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001bfe:	4b4b      	ldr	r3, [pc, #300]	; (8001d2c <HAL_QSPI_MspInit+0x184>)
 8001c00:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001c04:	4a49      	ldr	r2, [pc, #292]	; (8001d2c <HAL_QSPI_MspInit+0x184>)
 8001c06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c0a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001c0e:	4b47      	ldr	r3, [pc, #284]	; (8001d2c <HAL_QSPI_MspInit+0x184>)
 8001c10:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001c14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c1c:	4b43      	ldr	r3, [pc, #268]	; (8001d2c <HAL_QSPI_MspInit+0x184>)
 8001c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c22:	4a42      	ldr	r2, [pc, #264]	; (8001d2c <HAL_QSPI_MspInit+0x184>)
 8001c24:	f043 0310 	orr.w	r3, r3, #16
 8001c28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c2c:	4b3f      	ldr	r3, [pc, #252]	; (8001d2c <HAL_QSPI_MspInit+0x184>)
 8001c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c32:	f003 0310 	and.w	r3, r3, #16
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c3a:	4b3c      	ldr	r3, [pc, #240]	; (8001d2c <HAL_QSPI_MspInit+0x184>)
 8001c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c40:	4a3a      	ldr	r2, [pc, #232]	; (8001d2c <HAL_QSPI_MspInit+0x184>)
 8001c42:	f043 0302 	orr.w	r3, r3, #2
 8001c46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c4a:	4b38      	ldr	r3, [pc, #224]	; (8001d2c <HAL_QSPI_MspInit+0x184>)
 8001c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c58:	4b34      	ldr	r3, [pc, #208]	; (8001d2c <HAL_QSPI_MspInit+0x184>)
 8001c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c5e:	4a33      	ldr	r2, [pc, #204]	; (8001d2c <HAL_QSPI_MspInit+0x184>)
 8001c60:	f043 0308 	orr.w	r3, r3, #8
 8001c64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c68:	4b30      	ldr	r3, [pc, #192]	; (8001d2c <HAL_QSPI_MspInit+0x184>)
 8001c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	68bb      	ldr	r3, [r7, #8]
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c76:	2304      	movs	r3, #4
 8001c78:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001c8e:	2309      	movs	r3, #9
 8001c90:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c94:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4825      	ldr	r0, [pc, #148]	; (8001d30 <HAL_QSPI_MspInit+0x188>)
 8001c9c:	f001 fe8e 	bl	80039bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ca0:	2304      	movs	r3, #4
 8001ca2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001cb8:	2309      	movs	r3, #9
 8001cba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cbe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	481b      	ldr	r0, [pc, #108]	; (8001d34 <HAL_QSPI_MspInit+0x18c>)
 8001cc6:	f001 fe79 	bl	80039bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8001cca:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001cce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001ce4:	2309      	movs	r3, #9
 8001ce6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cea:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4811      	ldr	r0, [pc, #68]	; (8001d38 <HAL_QSPI_MspInit+0x190>)
 8001cf2:	f001 fe63 	bl	80039bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cf6:	2340      	movs	r3, #64	; 0x40
 8001cf8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001d0e:	230a      	movs	r3, #10
 8001d10:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d14:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4806      	ldr	r0, [pc, #24]	; (8001d34 <HAL_QSPI_MspInit+0x18c>)
 8001d1c:	f001 fe4e 	bl	80039bc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001d20:	bf00      	nop
 8001d22:	37f0      	adds	r7, #240	; 0xf0
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	52005000 	.word	0x52005000
 8001d2c:	58024400 	.word	0x58024400
 8001d30:	58021000 	.word	0x58021000
 8001d34:	58020400 	.word	0x58020400
 8001d38:	58020c00 	.word	0x58020c00

08001d3c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b0bc      	sub	sp, #240	; 0xf0
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d44:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d54:	f107 0318 	add.w	r3, r7, #24
 8001d58:	22c0      	movs	r2, #192	; 0xc0
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f00a fd73 	bl	800c848 <memset>
  if(hsd->Instance==SDMMC1)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a38      	ldr	r2, [pc, #224]	; (8001e48 <HAL_SD_MspInit+0x10c>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d169      	bne.n	8001e40 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001d6c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d70:	f04f 0300 	mov.w	r3, #0
 8001d74:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d7c:	f107 0318 	add.w	r3, r7, #24
 8001d80:	4618      	mov	r0, r3
 8001d82:	f003 fb3f 	bl	8005404 <HAL_RCCEx_PeriphCLKConfig>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001d8c:	f7ff fbbe 	bl	800150c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001d90:	4b2e      	ldr	r3, [pc, #184]	; (8001e4c <HAL_SD_MspInit+0x110>)
 8001d92:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001d96:	4a2d      	ldr	r2, [pc, #180]	; (8001e4c <HAL_SD_MspInit+0x110>)
 8001d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d9c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001da0:	4b2a      	ldr	r3, [pc, #168]	; (8001e4c <HAL_SD_MspInit+0x110>)
 8001da2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dae:	4b27      	ldr	r3, [pc, #156]	; (8001e4c <HAL_SD_MspInit+0x110>)
 8001db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db4:	4a25      	ldr	r2, [pc, #148]	; (8001e4c <HAL_SD_MspInit+0x110>)
 8001db6:	f043 0304 	orr.w	r3, r3, #4
 8001dba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dbe:	4b23      	ldr	r3, [pc, #140]	; (8001e4c <HAL_SD_MspInit+0x110>)
 8001dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	613b      	str	r3, [r7, #16]
 8001dca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dcc:	4b1f      	ldr	r3, [pc, #124]	; (8001e4c <HAL_SD_MspInit+0x110>)
 8001dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd2:	4a1e      	ldr	r2, [pc, #120]	; (8001e4c <HAL_SD_MspInit+0x110>)
 8001dd4:	f043 0308 	orr.w	r3, r3, #8
 8001dd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ddc:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <HAL_SD_MspInit+0x110>)
 8001dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001dea:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001dee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df2:	2302      	movs	r3, #2
 8001df4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001e04:	230c      	movs	r3, #12
 8001e06:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e0a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e0e:	4619      	mov	r1, r3
 8001e10:	480f      	ldr	r0, [pc, #60]	; (8001e50 <HAL_SD_MspInit+0x114>)
 8001e12:	f001 fdd3 	bl	80039bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e16:	2304      	movs	r3, #4
 8001e18:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001e2e:	230c      	movs	r3, #12
 8001e30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e34:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4806      	ldr	r0, [pc, #24]	; (8001e54 <HAL_SD_MspInit+0x118>)
 8001e3c:	f001 fdbe 	bl	80039bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001e40:	bf00      	nop
 8001e42:	37f0      	adds	r7, #240	; 0xf0
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	52007000 	.word	0x52007000
 8001e4c:	58024400 	.word	0x58024400
 8001e50:	58020800 	.word	0x58020800
 8001e54:	58020c00 	.word	0x58020c00

08001e58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b0be      	sub	sp, #248	; 0xf8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e60:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
 8001e6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e70:	f107 0320 	add.w	r3, r7, #32
 8001e74:	22c0      	movs	r2, #192	; 0xc0
 8001e76:	2100      	movs	r1, #0
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f00a fce5 	bl	800c848 <memset>
  if(hspi->Instance==SPI1)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a5f      	ldr	r2, [pc, #380]	; (8002000 <HAL_SPI_MspInit+0x1a8>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d16a      	bne.n	8001f5e <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001e88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e8c:	f04f 0300 	mov.w	r3, #0
 8001e90:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e9a:	f107 0320 	add.w	r3, r7, #32
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f003 fab0 	bl	8005404 <HAL_RCCEx_PeriphCLKConfig>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001eaa:	f7ff fb2f 	bl	800150c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001eae:	4b55      	ldr	r3, [pc, #340]	; (8002004 <HAL_SPI_MspInit+0x1ac>)
 8001eb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001eb4:	4a53      	ldr	r2, [pc, #332]	; (8002004 <HAL_SPI_MspInit+0x1ac>)
 8001eb6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001eba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001ebe:	4b51      	ldr	r3, [pc, #324]	; (8002004 <HAL_SPI_MspInit+0x1ac>)
 8001ec0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ec4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ec8:	61fb      	str	r3, [r7, #28]
 8001eca:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ecc:	4b4d      	ldr	r3, [pc, #308]	; (8002004 <HAL_SPI_MspInit+0x1ac>)
 8001ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ed2:	4a4c      	ldr	r2, [pc, #304]	; (8002004 <HAL_SPI_MspInit+0x1ac>)
 8001ed4:	f043 0308 	orr.w	r3, r3, #8
 8001ed8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001edc:	4b49      	ldr	r3, [pc, #292]	; (8002004 <HAL_SPI_MspInit+0x1ac>)
 8001ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee2:	f003 0308 	and.w	r3, r3, #8
 8001ee6:	61bb      	str	r3, [r7, #24]
 8001ee8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eea:	4b46      	ldr	r3, [pc, #280]	; (8002004 <HAL_SPI_MspInit+0x1ac>)
 8001eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef0:	4a44      	ldr	r2, [pc, #272]	; (8002004 <HAL_SPI_MspInit+0x1ac>)
 8001ef2:	f043 0302 	orr.w	r3, r3, #2
 8001ef6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001efa:	4b42      	ldr	r3, [pc, #264]	; (8002004 <HAL_SPI_MspInit+0x1ac>)
 8001efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	617b      	str	r3, [r7, #20]
 8001f06:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f08:	2380      	movs	r3, #128	; 0x80
 8001f0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f20:	2305      	movs	r3, #5
 8001f22:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f26:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4836      	ldr	r0, [pc, #216]	; (8002008 <HAL_SPI_MspInit+0x1b0>)
 8001f2e:	f001 fd45 	bl	80039bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001f32:	2318      	movs	r3, #24
 8001f34:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f44:	2300      	movs	r3, #0
 8001f46:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f4a:	2305      	movs	r3, #5
 8001f4c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f50:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001f54:	4619      	mov	r1, r3
 8001f56:	482d      	ldr	r0, [pc, #180]	; (800200c <HAL_SPI_MspInit+0x1b4>)
 8001f58:	f001 fd30 	bl	80039bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001f5c:	e04b      	b.n	8001ff6 <HAL_SPI_MspInit+0x19e>
  else if(hspi->Instance==SPI4)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a2b      	ldr	r2, [pc, #172]	; (8002010 <HAL_SPI_MspInit+0x1b8>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d146      	bne.n	8001ff6 <HAL_SPI_MspInit+0x19e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001f68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f6c:	f04f 0300 	mov.w	r3, #0
 8001f70:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001f74:	2300      	movs	r3, #0
 8001f76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f7a:	f107 0320 	add.w	r3, r7, #32
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f003 fa40 	bl	8005404 <HAL_RCCEx_PeriphCLKConfig>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_SPI_MspInit+0x136>
      Error_Handler();
 8001f8a:	f7ff fabf 	bl	800150c <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001f8e:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <HAL_SPI_MspInit+0x1ac>)
 8001f90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f94:	4a1b      	ldr	r2, [pc, #108]	; (8002004 <HAL_SPI_MspInit+0x1ac>)
 8001f96:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f9a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001f9e:	4b19      	ldr	r3, [pc, #100]	; (8002004 <HAL_SPI_MspInit+0x1ac>)
 8001fa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fac:	4b15      	ldr	r3, [pc, #84]	; (8002004 <HAL_SPI_MspInit+0x1ac>)
 8001fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fb2:	4a14      	ldr	r2, [pc, #80]	; (8002004 <HAL_SPI_MspInit+0x1ac>)
 8001fb4:	f043 0310 	orr.w	r3, r3, #16
 8001fb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fbc:	4b11      	ldr	r3, [pc, #68]	; (8002004 <HAL_SPI_MspInit+0x1ac>)
 8001fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fc2:	f003 0310 	and.w	r3, r3, #16
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_WR_RS_Pin|LCD_SDA_Pin;
 8001fca:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001fce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001fe4:	2305      	movs	r3, #5
 8001fe6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fea:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4808      	ldr	r0, [pc, #32]	; (8002014 <HAL_SPI_MspInit+0x1bc>)
 8001ff2:	f001 fce3 	bl	80039bc <HAL_GPIO_Init>
}
 8001ff6:	bf00      	nop
 8001ff8:	37f8      	adds	r7, #248	; 0xf8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40013000 	.word	0x40013000
 8002004:	58024400 	.word	0x58024400
 8002008:	58020c00 	.word	0x58020c00
 800200c:	58020400 	.word	0x58020400
 8002010:	40013400 	.word	0x40013400
 8002014:	58021000 	.word	0x58021000

08002018 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08e      	sub	sp, #56	; 0x38
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002020:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a49      	ldr	r2, [pc, #292]	; (800215c <HAL_TIM_Base_MspInit+0x144>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d10f      	bne.n	800205a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800203a:	4b49      	ldr	r3, [pc, #292]	; (8002160 <HAL_TIM_Base_MspInit+0x148>)
 800203c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002040:	4a47      	ldr	r2, [pc, #284]	; (8002160 <HAL_TIM_Base_MspInit+0x148>)
 8002042:	f043 0301 	orr.w	r3, r3, #1
 8002046:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800204a:	4b45      	ldr	r3, [pc, #276]	; (8002160 <HAL_TIM_Base_MspInit+0x148>)
 800204c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	623b      	str	r3, [r7, #32]
 8002056:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002058:	e07b      	b.n	8002152 <HAL_TIM_Base_MspInit+0x13a>
  else if(htim_base->Instance==TIM2)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002062:	d10f      	bne.n	8002084 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002064:	4b3e      	ldr	r3, [pc, #248]	; (8002160 <HAL_TIM_Base_MspInit+0x148>)
 8002066:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800206a:	4a3d      	ldr	r2, [pc, #244]	; (8002160 <HAL_TIM_Base_MspInit+0x148>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002074:	4b3a      	ldr	r3, [pc, #232]	; (8002160 <HAL_TIM_Base_MspInit+0x148>)
 8002076:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	61fb      	str	r3, [r7, #28]
 8002080:	69fb      	ldr	r3, [r7, #28]
}
 8002082:	e066      	b.n	8002152 <HAL_TIM_Base_MspInit+0x13a>
  else if(htim_base->Instance==TIM5)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a36      	ldr	r2, [pc, #216]	; (8002164 <HAL_TIM_Base_MspInit+0x14c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d12e      	bne.n	80020ec <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800208e:	4b34      	ldr	r3, [pc, #208]	; (8002160 <HAL_TIM_Base_MspInit+0x148>)
 8002090:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002094:	4a32      	ldr	r2, [pc, #200]	; (8002160 <HAL_TIM_Base_MspInit+0x148>)
 8002096:	f043 0308 	orr.w	r3, r3, #8
 800209a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800209e:	4b30      	ldr	r3, [pc, #192]	; (8002160 <HAL_TIM_Base_MspInit+0x148>)
 80020a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	61bb      	str	r3, [r7, #24]
 80020aa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ac:	4b2c      	ldr	r3, [pc, #176]	; (8002160 <HAL_TIM_Base_MspInit+0x148>)
 80020ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020b2:	4a2b      	ldr	r2, [pc, #172]	; (8002160 <HAL_TIM_Base_MspInit+0x148>)
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020bc:	4b28      	ldr	r3, [pc, #160]	; (8002160 <HAL_TIM_Base_MspInit+0x148>)
 80020be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	617b      	str	r3, [r7, #20]
 80020c8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Servo_Input_Pin;
 80020ca:	2301      	movs	r3, #1
 80020cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ce:	2302      	movs	r3, #2
 80020d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d6:	2300      	movs	r3, #0
 80020d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80020da:	2302      	movs	r3, #2
 80020dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Servo_Input_GPIO_Port, &GPIO_InitStruct);
 80020de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e2:	4619      	mov	r1, r3
 80020e4:	4820      	ldr	r0, [pc, #128]	; (8002168 <HAL_TIM_Base_MspInit+0x150>)
 80020e6:	f001 fc69 	bl	80039bc <HAL_GPIO_Init>
}
 80020ea:	e032      	b.n	8002152 <HAL_TIM_Base_MspInit+0x13a>
  else if(htim_base->Instance==TIM15)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a1e      	ldr	r2, [pc, #120]	; (800216c <HAL_TIM_Base_MspInit+0x154>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d12d      	bne.n	8002152 <HAL_TIM_Base_MspInit+0x13a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80020f6:	4b1a      	ldr	r3, [pc, #104]	; (8002160 <HAL_TIM_Base_MspInit+0x148>)
 80020f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020fc:	4a18      	ldr	r2, [pc, #96]	; (8002160 <HAL_TIM_Base_MspInit+0x148>)
 80020fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002102:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002106:	4b16      	ldr	r3, [pc, #88]	; (8002160 <HAL_TIM_Base_MspInit+0x148>)
 8002108:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800210c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002114:	4b12      	ldr	r3, [pc, #72]	; (8002160 <HAL_TIM_Base_MspInit+0x148>)
 8002116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800211a:	4a11      	ldr	r2, [pc, #68]	; (8002160 <HAL_TIM_Base_MspInit+0x148>)
 800211c:	f043 0310 	orr.w	r3, r3, #16
 8002120:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002124:	4b0e      	ldr	r3, [pc, #56]	; (8002160 <HAL_TIM_Base_MspInit+0x148>)
 8002126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800212a:	f003 0310 	and.w	r3, r3, #16
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ESC_Input_Pin;
 8002132:	2320      	movs	r3, #32
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002136:	2302      	movs	r3, #2
 8002138:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213e:	2300      	movs	r3, #0
 8002140:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002142:	2304      	movs	r3, #4
 8002144:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ESC_Input_GPIO_Port, &GPIO_InitStruct);
 8002146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214a:	4619      	mov	r1, r3
 800214c:	4808      	ldr	r0, [pc, #32]	; (8002170 <HAL_TIM_Base_MspInit+0x158>)
 800214e:	f001 fc35 	bl	80039bc <HAL_GPIO_Init>
}
 8002152:	bf00      	nop
 8002154:	3738      	adds	r7, #56	; 0x38
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40010000 	.word	0x40010000
 8002160:	58024400 	.word	0x58024400
 8002164:	40000c00 	.word	0x40000c00
 8002168:	58020000 	.word	0x58020000
 800216c:	40014000 	.word	0x40014000
 8002170:	58021000 	.word	0x58021000

08002174 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a0b      	ldr	r2, [pc, #44]	; (80021b0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d10e      	bne.n	80021a4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002186:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <HAL_TIM_PWM_MspInit+0x40>)
 8002188:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800218c:	4a09      	ldr	r2, [pc, #36]	; (80021b4 <HAL_TIM_PWM_MspInit+0x40>)
 800218e:	f043 0302 	orr.w	r3, r3, #2
 8002192:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002196:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <HAL_TIM_PWM_MspInit+0x40>)
 8002198:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80021a4:	bf00      	nop
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	40000400 	.word	0x40000400
 80021b4:	58024400 	.word	0x58024400

080021b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08a      	sub	sp, #40	; 0x28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c0:	f107 0314 	add.w	r3, r7, #20
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021d8:	d120      	bne.n	800221c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021da:	4b24      	ldr	r3, [pc, #144]	; (800226c <HAL_TIM_MspPostInit+0xb4>)
 80021dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021e0:	4a22      	ldr	r2, [pc, #136]	; (800226c <HAL_TIM_MspPostInit+0xb4>)
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021ea:	4b20      	ldr	r3, [pc, #128]	; (800226c <HAL_TIM_MspPostInit+0xb4>)
 80021ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	613b      	str	r3, [r7, #16]
 80021f6:	693b      	ldr	r3, [r7, #16]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin|PWM3_Pin|PWM0_Pin;
 80021f8:	f248 030e 	movw	r3, #32782	; 0x800e
 80021fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fe:	2302      	movs	r3, #2
 8002200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002206:	2300      	movs	r3, #0
 8002208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800220a:	2301      	movs	r3, #1
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220e:	f107 0314 	add.w	r3, r7, #20
 8002212:	4619      	mov	r1, r3
 8002214:	4816      	ldr	r0, [pc, #88]	; (8002270 <HAL_TIM_MspPostInit+0xb8>)
 8002216:	f001 fbd1 	bl	80039bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800221a:	e023      	b.n	8002264 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM3)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a14      	ldr	r2, [pc, #80]	; (8002274 <HAL_TIM_MspPostInit+0xbc>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d11e      	bne.n	8002264 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002226:	4b11      	ldr	r3, [pc, #68]	; (800226c <HAL_TIM_MspPostInit+0xb4>)
 8002228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800222c:	4a0f      	ldr	r2, [pc, #60]	; (800226c <HAL_TIM_MspPostInit+0xb4>)
 800222e:	f043 0304 	orr.w	r3, r3, #4
 8002232:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002236:	4b0d      	ldr	r3, [pc, #52]	; (800226c <HAL_TIM_MspPostInit+0xb4>)
 8002238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo_Output_Pin|ESC_Output_Pin;
 8002244:	23c0      	movs	r3, #192	; 0xc0
 8002246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002248:	2302      	movs	r3, #2
 800224a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224c:	2300      	movs	r3, #0
 800224e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002250:	2300      	movs	r3, #0
 8002252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002254:	2302      	movs	r3, #2
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002258:	f107 0314 	add.w	r3, r7, #20
 800225c:	4619      	mov	r1, r3
 800225e:	4806      	ldr	r0, [pc, #24]	; (8002278 <HAL_TIM_MspPostInit+0xc0>)
 8002260:	f001 fbac 	bl	80039bc <HAL_GPIO_Init>
}
 8002264:	bf00      	nop
 8002266:	3728      	adds	r7, #40	; 0x28
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	58024400 	.word	0x58024400
 8002270:	58020000 	.word	0x58020000
 8002274:	40000400 	.word	0x40000400
 8002278:	58020800 	.word	0x58020800

0800227c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b0ba      	sub	sp, #232	; 0xe8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002284:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002294:	f107 0310 	add.w	r3, r7, #16
 8002298:	22c0      	movs	r2, #192	; 0xc0
 800229a:	2100      	movs	r1, #0
 800229c:	4618      	mov	r0, r3
 800229e:	f00a fad3 	bl	800c848 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a28      	ldr	r2, [pc, #160]	; (8002348 <HAL_PCD_MspInit+0xcc>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d149      	bne.n	8002340 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80022ac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80022b0:	f04f 0300 	mov.w	r3, #0
 80022b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80022b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80022bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022c0:	f107 0310 	add.w	r3, r7, #16
 80022c4:	4618      	mov	r0, r3
 80022c6:	f003 f89d 	bl	8005404 <HAL_RCCEx_PeriphCLKConfig>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80022d0:	f7ff f91c 	bl	800150c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80022d4:	f001 ffe6 	bl	80042a4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d8:	4b1c      	ldr	r3, [pc, #112]	; (800234c <HAL_PCD_MspInit+0xd0>)
 80022da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022de:	4a1b      	ldr	r2, [pc, #108]	; (800234c <HAL_PCD_MspInit+0xd0>)
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022e8:	4b18      	ldr	r3, [pc, #96]	; (800234c <HAL_PCD_MspInit+0xd0>)
 80022ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80022f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80022fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fe:	2302      	movs	r3, #2
 8002300:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002304:	2300      	movs	r3, #0
 8002306:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230a:	2300      	movs	r3, #0
 800230c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002310:	230a      	movs	r3, #10
 8002312:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002316:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800231a:	4619      	mov	r1, r3
 800231c:	480c      	ldr	r0, [pc, #48]	; (8002350 <HAL_PCD_MspInit+0xd4>)
 800231e:	f001 fb4d 	bl	80039bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002322:	4b0a      	ldr	r3, [pc, #40]	; (800234c <HAL_PCD_MspInit+0xd0>)
 8002324:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002328:	4a08      	ldr	r2, [pc, #32]	; (800234c <HAL_PCD_MspInit+0xd0>)
 800232a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800232e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002332:	4b06      	ldr	r3, [pc, #24]	; (800234c <HAL_PCD_MspInit+0xd0>)
 8002334:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002340:	bf00      	nop
 8002342:	37e8      	adds	r7, #232	; 0xe8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40080000 	.word	0x40080000
 800234c:	58024400 	.word	0x58024400
 8002350:	58020000 	.word	0x58020000

08002354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002358:	e7fe      	b.n	8002358 <NMI_Handler+0x4>

0800235a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800235a:	b480      	push	{r7}
 800235c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800235e:	e7fe      	b.n	800235e <HardFault_Handler+0x4>

08002360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002364:	e7fe      	b.n	8002364 <MemManage_Handler+0x4>

08002366 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002366:	b480      	push	{r7}
 8002368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800236a:	e7fe      	b.n	800236a <BusFault_Handler+0x4>

0800236c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002370:	e7fe      	b.n	8002370 <UsageFault_Handler+0x4>

08002372 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002372:	b480      	push	{r7}
 8002374:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002384:	bf00      	nop
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800238e:	b480      	push	{r7}
 8002390:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023a0:	f000 f926 	bl	80025f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023a4:	bf00      	nop
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80023ac:	4b37      	ldr	r3, [pc, #220]	; (800248c <SystemInit+0xe4>)
 80023ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b2:	4a36      	ldr	r2, [pc, #216]	; (800248c <SystemInit+0xe4>)
 80023b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80023bc:	4b34      	ldr	r3, [pc, #208]	; (8002490 <SystemInit+0xe8>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 030f 	and.w	r3, r3, #15
 80023c4:	2b06      	cmp	r3, #6
 80023c6:	d807      	bhi.n	80023d8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80023c8:	4b31      	ldr	r3, [pc, #196]	; (8002490 <SystemInit+0xe8>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f023 030f 	bic.w	r3, r3, #15
 80023d0:	4a2f      	ldr	r2, [pc, #188]	; (8002490 <SystemInit+0xe8>)
 80023d2:	f043 0307 	orr.w	r3, r3, #7
 80023d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80023d8:	4b2e      	ldr	r3, [pc, #184]	; (8002494 <SystemInit+0xec>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a2d      	ldr	r2, [pc, #180]	; (8002494 <SystemInit+0xec>)
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80023e4:	4b2b      	ldr	r3, [pc, #172]	; (8002494 <SystemInit+0xec>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80023ea:	4b2a      	ldr	r3, [pc, #168]	; (8002494 <SystemInit+0xec>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	4929      	ldr	r1, [pc, #164]	; (8002494 <SystemInit+0xec>)
 80023f0:	4b29      	ldr	r3, [pc, #164]	; (8002498 <SystemInit+0xf0>)
 80023f2:	4013      	ands	r3, r2
 80023f4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80023f6:	4b26      	ldr	r3, [pc, #152]	; (8002490 <SystemInit+0xe8>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d007      	beq.n	8002412 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002402:	4b23      	ldr	r3, [pc, #140]	; (8002490 <SystemInit+0xe8>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f023 030f 	bic.w	r3, r3, #15
 800240a:	4a21      	ldr	r2, [pc, #132]	; (8002490 <SystemInit+0xe8>)
 800240c:	f043 0307 	orr.w	r3, r3, #7
 8002410:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002412:	4b20      	ldr	r3, [pc, #128]	; (8002494 <SystemInit+0xec>)
 8002414:	2200      	movs	r2, #0
 8002416:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002418:	4b1e      	ldr	r3, [pc, #120]	; (8002494 <SystemInit+0xec>)
 800241a:	2200      	movs	r2, #0
 800241c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800241e:	4b1d      	ldr	r3, [pc, #116]	; (8002494 <SystemInit+0xec>)
 8002420:	2200      	movs	r2, #0
 8002422:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002424:	4b1b      	ldr	r3, [pc, #108]	; (8002494 <SystemInit+0xec>)
 8002426:	4a1d      	ldr	r2, [pc, #116]	; (800249c <SystemInit+0xf4>)
 8002428:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800242a:	4b1a      	ldr	r3, [pc, #104]	; (8002494 <SystemInit+0xec>)
 800242c:	4a1c      	ldr	r2, [pc, #112]	; (80024a0 <SystemInit+0xf8>)
 800242e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002430:	4b18      	ldr	r3, [pc, #96]	; (8002494 <SystemInit+0xec>)
 8002432:	4a1c      	ldr	r2, [pc, #112]	; (80024a4 <SystemInit+0xfc>)
 8002434:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002436:	4b17      	ldr	r3, [pc, #92]	; (8002494 <SystemInit+0xec>)
 8002438:	2200      	movs	r2, #0
 800243a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800243c:	4b15      	ldr	r3, [pc, #84]	; (8002494 <SystemInit+0xec>)
 800243e:	4a19      	ldr	r2, [pc, #100]	; (80024a4 <SystemInit+0xfc>)
 8002440:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002442:	4b14      	ldr	r3, [pc, #80]	; (8002494 <SystemInit+0xec>)
 8002444:	2200      	movs	r2, #0
 8002446:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002448:	4b12      	ldr	r3, [pc, #72]	; (8002494 <SystemInit+0xec>)
 800244a:	4a16      	ldr	r2, [pc, #88]	; (80024a4 <SystemInit+0xfc>)
 800244c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800244e:	4b11      	ldr	r3, [pc, #68]	; (8002494 <SystemInit+0xec>)
 8002450:	2200      	movs	r2, #0
 8002452:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002454:	4b0f      	ldr	r3, [pc, #60]	; (8002494 <SystemInit+0xec>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a0e      	ldr	r2, [pc, #56]	; (8002494 <SystemInit+0xec>)
 800245a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800245e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002460:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <SystemInit+0xec>)
 8002462:	2200      	movs	r2, #0
 8002464:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002466:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <SystemInit+0x100>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	4b10      	ldr	r3, [pc, #64]	; (80024ac <SystemInit+0x104>)
 800246c:	4013      	ands	r3, r2
 800246e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002472:	d202      	bcs.n	800247a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002474:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <SystemInit+0x108>)
 8002476:	2201      	movs	r2, #1
 8002478:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800247a:	4b0e      	ldr	r3, [pc, #56]	; (80024b4 <SystemInit+0x10c>)
 800247c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002480:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002482:	bf00      	nop
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	e000ed00 	.word	0xe000ed00
 8002490:	52002000 	.word	0x52002000
 8002494:	58024400 	.word	0x58024400
 8002498:	eaf6ed7f 	.word	0xeaf6ed7f
 800249c:	02020200 	.word	0x02020200
 80024a0:	01ff0000 	.word	0x01ff0000
 80024a4:	01010280 	.word	0x01010280
 80024a8:	5c001000 	.word	0x5c001000
 80024ac:	ffff0000 	.word	0xffff0000
 80024b0:	51008108 	.word	0x51008108
 80024b4:	52004000 	.word	0x52004000

080024b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80024b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80024bc:	f7ff ff74 	bl	80023a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024c0:	480c      	ldr	r0, [pc, #48]	; (80024f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024c2:	490d      	ldr	r1, [pc, #52]	; (80024f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024c4:	4a0d      	ldr	r2, [pc, #52]	; (80024fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024c8:	e002      	b.n	80024d0 <LoopCopyDataInit>

080024ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ce:	3304      	adds	r3, #4

080024d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024d4:	d3f9      	bcc.n	80024ca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024d6:	4a0a      	ldr	r2, [pc, #40]	; (8002500 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024d8:	4c0a      	ldr	r4, [pc, #40]	; (8002504 <LoopFillZerobss+0x22>)
  movs r3, #0
 80024da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024dc:	e001      	b.n	80024e2 <LoopFillZerobss>

080024de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024e0:	3204      	adds	r2, #4

080024e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024e4:	d3fb      	bcc.n	80024de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024e6:	f00a f9b7 	bl	800c858 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024ea:	f7fe f873 	bl	80005d4 <main>
  bx  lr
 80024ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024f0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80024f4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80024f8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80024fc:	0800c900 	.word	0x0800c900
  ldr r2, =_sbss
 8002500:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8002504:	24000c2c 	.word	0x24000c2c

08002508 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002508:	e7fe      	b.n	8002508 <ADC3_IRQHandler>
	...

0800250c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002512:	2003      	movs	r0, #3
 8002514:	f001 fa20 	bl	8003958 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002518:	f002 fd9e 	bl	8005058 <HAL_RCC_GetSysClockFreq>
 800251c:	4602      	mov	r2, r0
 800251e:	4b15      	ldr	r3, [pc, #84]	; (8002574 <HAL_Init+0x68>)
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	0a1b      	lsrs	r3, r3, #8
 8002524:	f003 030f 	and.w	r3, r3, #15
 8002528:	4913      	ldr	r1, [pc, #76]	; (8002578 <HAL_Init+0x6c>)
 800252a:	5ccb      	ldrb	r3, [r1, r3]
 800252c:	f003 031f 	and.w	r3, r3, #31
 8002530:	fa22 f303 	lsr.w	r3, r2, r3
 8002534:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002536:	4b0f      	ldr	r3, [pc, #60]	; (8002574 <HAL_Init+0x68>)
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	4a0e      	ldr	r2, [pc, #56]	; (8002578 <HAL_Init+0x6c>)
 8002540:	5cd3      	ldrb	r3, [r2, r3]
 8002542:	f003 031f 	and.w	r3, r3, #31
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	fa22 f303 	lsr.w	r3, r2, r3
 800254c:	4a0b      	ldr	r2, [pc, #44]	; (800257c <HAL_Init+0x70>)
 800254e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002550:	4a0b      	ldr	r2, [pc, #44]	; (8002580 <HAL_Init+0x74>)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002556:	200f      	movs	r0, #15
 8002558:	f000 f814 	bl	8002584 <HAL_InitTick>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e002      	b.n	800256c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002566:	f7fe ffd7 	bl	8001518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	58024400 	.word	0x58024400
 8002578:	0800c8b8 	.word	0x0800c8b8
 800257c:	24000004 	.word	0x24000004
 8002580:	24000000 	.word	0x24000000

08002584 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800258c:	4b15      	ldr	r3, [pc, #84]	; (80025e4 <HAL_InitTick+0x60>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e021      	b.n	80025dc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002598:	4b13      	ldr	r3, [pc, #76]	; (80025e8 <HAL_InitTick+0x64>)
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <HAL_InitTick+0x60>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	4619      	mov	r1, r3
 80025a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80025aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ae:	4618      	mov	r0, r3
 80025b0:	f001 f9f7 	bl	80039a2 <HAL_SYSTICK_Config>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e00e      	b.n	80025dc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b0f      	cmp	r3, #15
 80025c2:	d80a      	bhi.n	80025da <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025c4:	2200      	movs	r2, #0
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025cc:	f001 f9cf 	bl	800396e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025d0:	4a06      	ldr	r2, [pc, #24]	; (80025ec <HAL_InitTick+0x68>)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	e000      	b.n	80025dc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	2400000c 	.word	0x2400000c
 80025e8:	24000000 	.word	0x24000000
 80025ec:	24000008 	.word	0x24000008

080025f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025f4:	4b06      	ldr	r3, [pc, #24]	; (8002610 <HAL_IncTick+0x20>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	461a      	mov	r2, r3
 80025fa:	4b06      	ldr	r3, [pc, #24]	; (8002614 <HAL_IncTick+0x24>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4413      	add	r3, r2
 8002600:	4a04      	ldr	r2, [pc, #16]	; (8002614 <HAL_IncTick+0x24>)
 8002602:	6013      	str	r3, [r2, #0]
}
 8002604:	bf00      	nop
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	2400000c 	.word	0x2400000c
 8002614:	24000c28 	.word	0x24000c28

08002618 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  return uwTick;
 800261c:	4b03      	ldr	r3, [pc, #12]	; (800262c <HAL_GetTick+0x14>)
 800261e:	681b      	ldr	r3, [r3, #0]
}
 8002620:	4618      	mov	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	24000c28 	.word	0x24000c28

08002630 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002638:	f7ff ffee 	bl	8002618 <HAL_GetTick>
 800263c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002648:	d005      	beq.n	8002656 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800264a:	4b0a      	ldr	r3, [pc, #40]	; (8002674 <HAL_Delay+0x44>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	461a      	mov	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4413      	add	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002656:	bf00      	nop
 8002658:	f7ff ffde 	bl	8002618 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	429a      	cmp	r2, r3
 8002666:	d8f7      	bhi.n	8002658 <HAL_Delay+0x28>
  {
  }
}
 8002668:	bf00      	nop
 800266a:	bf00      	nop
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	2400000c 	.word	0x2400000c

08002678 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800267c:	4b03      	ldr	r3, [pc, #12]	; (800268c <HAL_GetREVID+0x14>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	0c1b      	lsrs	r3, r3, #16
}
 8002682:	4618      	mov	r0, r3
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	5c001000 	.word	0x5c001000

08002690 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8002698:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f023 0202 	bic.w	r2, r3, #2
 80026a0:	4904      	ldr	r1, [pc, #16]	; (80026b4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	600b      	str	r3, [r1, #0]
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	58003c00 	.word	0x58003c00

080026b8 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80026bc:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a04      	ldr	r2, [pc, #16]	; (80026d4 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80026c2:	f023 0301 	bic.w	r3, r3, #1
 80026c6:	6013      	str	r3, [r2, #0]
}
 80026c8:	bf00      	nop
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	58003c00 	.word	0x58003c00

080026d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	431a      	orrs	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	609a      	str	r2, [r3, #8]
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80026fe:	b480      	push	{r7}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
 8002706:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	609a      	str	r2, [r3, #8]
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002734:	4618      	mov	r0, r3
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002740:	b480      	push	{r7}
 8002742:	b087      	sub	sp, #28
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
 800274c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	3360      	adds	r3, #96	; 0x60
 8002752:	461a      	mov	r2, r3
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	430b      	orrs	r3, r1
 800276e:	431a      	orrs	r2, r3
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002774:	bf00      	nop
 8002776:	371c      	adds	r7, #28
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	f003 031f 	and.w	r3, r3, #31
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	fa01 f303 	lsl.w	r3, r1, r3
 80027a0:	431a      	orrs	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	611a      	str	r2, [r3, #16]
}
 80027a6:	bf00      	nop
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b087      	sub	sp, #28
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	60f8      	str	r0, [r7, #12]
 80027ba:	60b9      	str	r1, [r7, #8]
 80027bc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	3360      	adds	r3, #96	; 0x60
 80027c2:	461a      	mov	r2, r3
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	431a      	orrs	r2, r3
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	601a      	str	r2, [r3, #0]
  }
}
 80027dc:	bf00      	nop
 80027de:	371c      	adds	r7, #28
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b087      	sub	sp, #28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	3330      	adds	r3, #48	; 0x30
 80027f8:	461a      	mov	r2, r3
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	0a1b      	lsrs	r3, r3, #8
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	f003 030c 	and.w	r3, r3, #12
 8002804:	4413      	add	r3, r2
 8002806:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	f003 031f 	and.w	r3, r3, #31
 8002812:	211f      	movs	r1, #31
 8002814:	fa01 f303 	lsl.w	r3, r1, r3
 8002818:	43db      	mvns	r3, r3
 800281a:	401a      	ands	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	0e9b      	lsrs	r3, r3, #26
 8002820:	f003 011f 	and.w	r1, r3, #31
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	f003 031f 	and.w	r3, r3, #31
 800282a:	fa01 f303 	lsl.w	r3, r1, r3
 800282e:	431a      	orrs	r2, r3
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002834:	bf00      	nop
 8002836:	371c      	adds	r7, #28
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002840:	b480      	push	{r7}
 8002842:	b087      	sub	sp, #28
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	3314      	adds	r3, #20
 8002850:	461a      	mov	r2, r3
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	0e5b      	lsrs	r3, r3, #25
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	4413      	add	r3, r2
 800285e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	0d1b      	lsrs	r3, r3, #20
 8002868:	f003 031f 	and.w	r3, r3, #31
 800286c:	2107      	movs	r1, #7
 800286e:	fa01 f303 	lsl.w	r3, r1, r3
 8002872:	43db      	mvns	r3, r3
 8002874:	401a      	ands	r2, r3
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	0d1b      	lsrs	r3, r3, #20
 800287a:	f003 031f 	and.w	r3, r3, #31
 800287e:	6879      	ldr	r1, [r7, #4]
 8002880:	fa01 f303 	lsl.w	r3, r1, r3
 8002884:	431a      	orrs	r2, r3
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800288a:	bf00      	nop
 800288c:	371c      	adds	r7, #28
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
	...

08002898 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028b0:	43db      	mvns	r3, r3
 80028b2:	401a      	ands	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f003 0318 	and.w	r3, r3, #24
 80028ba:	4908      	ldr	r1, [pc, #32]	; (80028dc <LL_ADC_SetChannelSingleDiff+0x44>)
 80028bc:	40d9      	lsrs	r1, r3
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	400b      	ands	r3, r1
 80028c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028c6:	431a      	orrs	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80028ce:	bf00      	nop
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	000fffff 	.word	0x000fffff

080028e0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	4b04      	ldr	r3, [pc, #16]	; (8002900 <LL_ADC_DisableDeepPowerDown+0x20>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6093      	str	r3, [r2, #8]
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	5fffffc0 	.word	0x5fffffc0

08002904 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002914:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002918:	d101      	bne.n	800291e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800291a:	2301      	movs	r3, #1
 800291c:	e000      	b.n	8002920 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	4b05      	ldr	r3, [pc, #20]	; (8002950 <LL_ADC_EnableInternalRegulator+0x24>)
 800293a:	4013      	ands	r3, r2
 800293c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	6fffffc0 	.word	0x6fffffc0

08002954 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002964:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002968:	d101      	bne.n	800296e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b01      	cmp	r3, #1
 800298e:	d101      	bne.n	8002994 <LL_ADC_IsEnabled+0x18>
 8002990:	2301      	movs	r3, #1
 8002992:	e000      	b.n	8002996 <LL_ADC_IsEnabled+0x1a>
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 0304 	and.w	r3, r3, #4
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d101      	bne.n	80029ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 0308 	and.w	r3, r3, #8
 80029d8:	2b08      	cmp	r3, #8
 80029da:	d101      	bne.n	80029e0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80029dc:	2301      	movs	r3, #1
 80029de:	e000      	b.n	80029e2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
	...

080029f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029f0:	b590      	push	{r4, r7, lr}
 80029f2:	b089      	sub	sp, #36	; 0x24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029f8:	2300      	movs	r3, #0
 80029fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e18f      	b.n	8002d2a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d109      	bne.n	8002a2c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7fe fda9 	bl	8001570 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff ff67 	bl	8002904 <LL_ADC_IsDeepPowerDownEnabled>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d004      	beq.n	8002a46 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff ff4d 	bl	80028e0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff ff82 	bl	8002954 <LL_ADC_IsInternalRegulatorEnabled>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d114      	bne.n	8002a80 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff ff66 	bl	800292c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a60:	4b87      	ldr	r3, [pc, #540]	; (8002c80 <HAL_ADC_Init+0x290>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	099b      	lsrs	r3, r3, #6
 8002a66:	4a87      	ldr	r2, [pc, #540]	; (8002c84 <HAL_ADC_Init+0x294>)
 8002a68:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6c:	099b      	lsrs	r3, r3, #6
 8002a6e:	3301      	adds	r3, #1
 8002a70:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a72:	e002      	b.n	8002a7a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1f9      	bne.n	8002a74 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff ff65 	bl	8002954 <LL_ADC_IsInternalRegulatorEnabled>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10d      	bne.n	8002aac <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a94:	f043 0210 	orr.w	r2, r3, #16
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa0:	f043 0201 	orr.w	r2, r3, #1
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff ff76 	bl	80029a2 <LL_ADC_REG_IsConversionOngoing>
 8002ab6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002abc:	f003 0310 	and.w	r3, r3, #16
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f040 8129 	bne.w	8002d18 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f040 8125 	bne.w	8002d18 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002ad6:	f043 0202 	orr.w	r2, r3, #2
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff ff4a 	bl	800297c <LL_ADC_IsEnabled>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d136      	bne.n	8002b5c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a65      	ldr	r2, [pc, #404]	; (8002c88 <HAL_ADC_Init+0x298>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d004      	beq.n	8002b02 <HAL_ADC_Init+0x112>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a63      	ldr	r2, [pc, #396]	; (8002c8c <HAL_ADC_Init+0x29c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d10e      	bne.n	8002b20 <HAL_ADC_Init+0x130>
 8002b02:	4861      	ldr	r0, [pc, #388]	; (8002c88 <HAL_ADC_Init+0x298>)
 8002b04:	f7ff ff3a 	bl	800297c <LL_ADC_IsEnabled>
 8002b08:	4604      	mov	r4, r0
 8002b0a:	4860      	ldr	r0, [pc, #384]	; (8002c8c <HAL_ADC_Init+0x29c>)
 8002b0c:	f7ff ff36 	bl	800297c <LL_ADC_IsEnabled>
 8002b10:	4603      	mov	r3, r0
 8002b12:	4323      	orrs	r3, r4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	bf0c      	ite	eq
 8002b18:	2301      	moveq	r3, #1
 8002b1a:	2300      	movne	r3, #0
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	e008      	b.n	8002b32 <HAL_ADC_Init+0x142>
 8002b20:	485b      	ldr	r0, [pc, #364]	; (8002c90 <HAL_ADC_Init+0x2a0>)
 8002b22:	f7ff ff2b 	bl	800297c <LL_ADC_IsEnabled>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	bf0c      	ite	eq
 8002b2c:	2301      	moveq	r3, #1
 8002b2e:	2300      	movne	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d012      	beq.n	8002b5c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a53      	ldr	r2, [pc, #332]	; (8002c88 <HAL_ADC_Init+0x298>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d004      	beq.n	8002b4a <HAL_ADC_Init+0x15a>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a51      	ldr	r2, [pc, #324]	; (8002c8c <HAL_ADC_Init+0x29c>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d101      	bne.n	8002b4e <HAL_ADC_Init+0x15e>
 8002b4a:	4a52      	ldr	r2, [pc, #328]	; (8002c94 <HAL_ADC_Init+0x2a4>)
 8002b4c:	e000      	b.n	8002b50 <HAL_ADC_Init+0x160>
 8002b4e:	4a52      	ldr	r2, [pc, #328]	; (8002c98 <HAL_ADC_Init+0x2a8>)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	4619      	mov	r1, r3
 8002b56:	4610      	mov	r0, r2
 8002b58:	f7ff fdbe 	bl	80026d8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002b5c:	f7ff fd8c 	bl	8002678 <HAL_GetREVID>
 8002b60:	4603      	mov	r3, r0
 8002b62:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d914      	bls.n	8002b94 <HAL_ADC_Init+0x1a4>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	2b10      	cmp	r3, #16
 8002b70:	d110      	bne.n	8002b94 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	7d5b      	ldrb	r3, [r3, #21]
 8002b76:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002b7c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002b82:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	7f1b      	ldrb	r3, [r3, #28]
 8002b88:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002b8a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002b8c:	f043 030c 	orr.w	r3, r3, #12
 8002b90:	61bb      	str	r3, [r7, #24]
 8002b92:	e00d      	b.n	8002bb0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	7d5b      	ldrb	r3, [r3, #21]
 8002b98:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002b9e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002ba4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	7f1b      	ldrb	r3, [r3, #28]
 8002baa:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002bac:	4313      	orrs	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	7f1b      	ldrb	r3, [r3, #28]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d106      	bne.n	8002bc6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	045b      	lsls	r3, r3, #17
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d009      	beq.n	8002be2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bda:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68da      	ldr	r2, [r3, #12]
 8002be8:	4b2c      	ldr	r3, [pc, #176]	; (8002c9c <HAL_ADC_Init+0x2ac>)
 8002bea:	4013      	ands	r3, r2
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6812      	ldr	r2, [r2, #0]
 8002bf0:	69b9      	ldr	r1, [r7, #24]
 8002bf2:	430b      	orrs	r3, r1
 8002bf4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff fed1 	bl	80029a2 <LL_ADC_REG_IsConversionOngoing>
 8002c00:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff fede 	bl	80029c8 <LL_ADC_INJ_IsConversionOngoing>
 8002c0c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d15f      	bne.n	8002cd4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d15c      	bne.n	8002cd4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	7d1b      	ldrb	r3, [r3, #20]
 8002c1e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002c24:	4313      	orrs	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	4b1c      	ldr	r3, [pc, #112]	; (8002ca0 <HAL_ADC_Init+0x2b0>)
 8002c30:	4013      	ands	r3, r2
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6812      	ldr	r2, [r2, #0]
 8002c36:	69b9      	ldr	r1, [r7, #24]
 8002c38:	430b      	orrs	r3, r1
 8002c3a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d130      	bne.n	8002ca8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691a      	ldr	r2, [r3, #16]
 8002c52:	4b14      	ldr	r3, [pc, #80]	; (8002ca4 <HAL_ADC_Init+0x2b4>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c5a:	3a01      	subs	r2, #1
 8002c5c:	0411      	lsls	r1, r2, #16
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c62:	4311      	orrs	r1, r2
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002c68:	4311      	orrs	r1, r2
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	431a      	orrs	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0201 	orr.w	r2, r2, #1
 8002c7a:	611a      	str	r2, [r3, #16]
 8002c7c:	e01c      	b.n	8002cb8 <HAL_ADC_Init+0x2c8>
 8002c7e:	bf00      	nop
 8002c80:	24000000 	.word	0x24000000
 8002c84:	053e2d63 	.word	0x053e2d63
 8002c88:	40022000 	.word	0x40022000
 8002c8c:	40022100 	.word	0x40022100
 8002c90:	58026000 	.word	0x58026000
 8002c94:	40022300 	.word	0x40022300
 8002c98:	58026300 	.word	0x58026300
 8002c9c:	fff0c003 	.word	0xfff0c003
 8002ca0:	ffffbffc 	.word	0xffffbffc
 8002ca4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	691a      	ldr	r2, [r3, #16]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 0201 	bic.w	r2, r2, #1
 8002cb6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 fb80 	bl	80033d4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d10c      	bne.n	8002cf6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	f023 010f 	bic.w	r1, r3, #15
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	1e5a      	subs	r2, r3, #1
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	631a      	str	r2, [r3, #48]	; 0x30
 8002cf4:	e007      	b.n	8002d06 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 020f 	bic.w	r2, r2, #15
 8002d04:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0a:	f023 0303 	bic.w	r3, r3, #3
 8002d0e:	f043 0201 	orr.w	r2, r3, #1
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	655a      	str	r2, [r3, #84]	; 0x54
 8002d16:	e007      	b.n	8002d28 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1c:	f043 0210 	orr.w	r2, r3, #16
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d28:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3724      	adds	r7, #36	; 0x24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd90      	pop	{r4, r7, pc}
 8002d32:	bf00      	nop

08002d34 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002d34:	b590      	push	{r4, r7, lr}
 8002d36:	b0a1      	sub	sp, #132	; 0x84
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002d44:	2300      	movs	r3, #0
 8002d46:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	4a9d      	ldr	r2, [pc, #628]	; (8002fc4 <HAL_ADC_ConfigChannel+0x290>)
 8002d4e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d101      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x2a>
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	e321      	b.n	80033a2 <HAL_ADC_ConfigChannel+0x66e>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff fe19 	bl	80029a2 <LL_ADC_REG_IsConversionOngoing>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f040 8306 	bne.w	8003384 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d108      	bne.n	8002d96 <HAL_ADC_ConfigChannel+0x62>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	0e9b      	lsrs	r3, r3, #26
 8002d8a:	f003 031f 	and.w	r3, r3, #31
 8002d8e:	2201      	movs	r2, #1
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	e016      	b.n	8002dc4 <HAL_ADC_ConfigChannel+0x90>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d9e:	fa93 f3a3 	rbit	r3, r3
 8002da2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002da4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002da6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002da8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002dae:	2320      	movs	r3, #32
 8002db0:	e003      	b.n	8002dba <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002db2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002db4:	fab3 f383 	clz	r3, r3
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	f003 031f 	and.w	r3, r3, #31
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6812      	ldr	r2, [r2, #0]
 8002dc8:	69d1      	ldr	r1, [r2, #28]
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	6812      	ldr	r2, [r2, #0]
 8002dce:	430b      	orrs	r3, r1
 8002dd0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6818      	ldr	r0, [r3, #0]
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	6859      	ldr	r1, [r3, #4]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	461a      	mov	r2, r3
 8002de0:	f7ff fd02 	bl	80027e8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff fdda 	bl	80029a2 <LL_ADC_REG_IsConversionOngoing>
 8002dee:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff fde7 	bl	80029c8 <LL_ADC_INJ_IsConversionOngoing>
 8002dfa:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002dfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f040 80b3 	bne.w	8002f6a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f040 80af 	bne.w	8002f6a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6818      	ldr	r0, [r3, #0]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	6819      	ldr	r1, [r3, #0]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	461a      	mov	r2, r3
 8002e1a:	f7ff fd11 	bl	8002840 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002e1e:	4b6a      	ldr	r3, [pc, #424]	; (8002fc8 <HAL_ADC_ConfigChannel+0x294>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002e26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e2a:	d10b      	bne.n	8002e44 <HAL_ADC_ConfigChannel+0x110>
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	695a      	ldr	r2, [r3, #20]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	089b      	lsrs	r3, r3, #2
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	e01d      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x14c>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	f003 0310 	and.w	r3, r3, #16
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10b      	bne.n	8002e6a <HAL_ADC_ConfigChannel+0x136>
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	695a      	ldr	r2, [r3, #20]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	089b      	lsrs	r3, r3, #2
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	e00a      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x14c>
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	695a      	ldr	r2, [r3, #20]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	089b      	lsrs	r3, r3, #2
 8002e76:	f003 0304 	and.w	r3, r3, #4
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	d027      	beq.n	8002eda <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6818      	ldr	r0, [r3, #0]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	6919      	ldr	r1, [r3, #16]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e98:	f7ff fc52 	bl	8002740 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6818      	ldr	r0, [r3, #0]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	6919      	ldr	r1, [r3, #16]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	7e5b      	ldrb	r3, [r3, #25]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d102      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x17e>
 8002eac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002eb0:	e000      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x180>
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	f7ff fc7c 	bl	80027b2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6818      	ldr	r0, [r3, #0]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	6919      	ldr	r1, [r3, #16]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	7e1b      	ldrb	r3, [r3, #24]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d102      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0x19c>
 8002eca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ece:	e000      	b.n	8002ed2 <HAL_ADC_ConfigChannel+0x19e>
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	f7ff fc54 	bl	8002780 <LL_ADC_SetDataRightShift>
 8002ed8:	e047      	b.n	8002f6a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ee0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	069b      	lsls	r3, r3, #26
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d107      	bne.n	8002efe <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002efc:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	069b      	lsls	r3, r3, #26
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d107      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f20:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f28:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	069b      	lsls	r3, r3, #26
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d107      	bne.n	8002f46 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f44:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	069b      	lsls	r3, r3, #26
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d107      	bne.n	8002f6a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f68:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff fd04 	bl	800297c <LL_ADC_IsEnabled>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f040 820d 	bne.w	8003396 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6818      	ldr	r0, [r3, #0]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	6819      	ldr	r1, [r3, #0]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	f7ff fc85 	bl	8002898 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	4a0c      	ldr	r2, [pc, #48]	; (8002fc4 <HAL_ADC_ConfigChannel+0x290>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	f040 8133 	bne.w	8003200 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d110      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x298>
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	0e9b      	lsrs	r3, r3, #26
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	f003 031f 	and.w	r3, r3, #31
 8002fb6:	2b09      	cmp	r3, #9
 8002fb8:	bf94      	ite	ls
 8002fba:	2301      	movls	r3, #1
 8002fbc:	2300      	movhi	r3, #0
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	e01e      	b.n	8003000 <HAL_ADC_ConfigChannel+0x2cc>
 8002fc2:	bf00      	nop
 8002fc4:	47ff0000 	.word	0x47ff0000
 8002fc8:	5c001000 	.word	0x5c001000
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fd4:	fa93 f3a3 	rbit	r3, r3
 8002fd8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fdc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002fde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002fe4:	2320      	movs	r3, #32
 8002fe6:	e003      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002fe8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fea:	fab3 f383 	clz	r3, r3
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	f003 031f 	and.w	r3, r3, #31
 8002ff6:	2b09      	cmp	r3, #9
 8002ff8:	bf94      	ite	ls
 8002ffa:	2301      	movls	r3, #1
 8002ffc:	2300      	movhi	r3, #0
 8002ffe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003000:	2b00      	cmp	r3, #0
 8003002:	d079      	beq.n	80030f8 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800300c:	2b00      	cmp	r3, #0
 800300e:	d107      	bne.n	8003020 <HAL_ADC_ConfigChannel+0x2ec>
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	0e9b      	lsrs	r3, r3, #26
 8003016:	3301      	adds	r3, #1
 8003018:	069b      	lsls	r3, r3, #26
 800301a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800301e:	e015      	b.n	800304c <HAL_ADC_ConfigChannel+0x318>
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003028:	fa93 f3a3 	rbit	r3, r3
 800302c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800302e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003030:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003038:	2320      	movs	r3, #32
 800303a:	e003      	b.n	8003044 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800303c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800303e:	fab3 f383 	clz	r3, r3
 8003042:	b2db      	uxtb	r3, r3
 8003044:	3301      	adds	r3, #1
 8003046:	069b      	lsls	r3, r3, #26
 8003048:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003054:	2b00      	cmp	r3, #0
 8003056:	d109      	bne.n	800306c <HAL_ADC_ConfigChannel+0x338>
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	0e9b      	lsrs	r3, r3, #26
 800305e:	3301      	adds	r3, #1
 8003060:	f003 031f 	and.w	r3, r3, #31
 8003064:	2101      	movs	r1, #1
 8003066:	fa01 f303 	lsl.w	r3, r1, r3
 800306a:	e017      	b.n	800309c <HAL_ADC_ConfigChannel+0x368>
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003074:	fa93 f3a3 	rbit	r3, r3
 8003078:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800307a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800307c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800307e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003084:	2320      	movs	r3, #32
 8003086:	e003      	b.n	8003090 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800308a:	fab3 f383 	clz	r3, r3
 800308e:	b2db      	uxtb	r3, r3
 8003090:	3301      	adds	r3, #1
 8003092:	f003 031f 	and.w	r3, r3, #31
 8003096:	2101      	movs	r1, #1
 8003098:	fa01 f303 	lsl.w	r3, r1, r3
 800309c:	ea42 0103 	orr.w	r1, r2, r3
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10a      	bne.n	80030c2 <HAL_ADC_ConfigChannel+0x38e>
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	0e9b      	lsrs	r3, r3, #26
 80030b2:	3301      	adds	r3, #1
 80030b4:	f003 021f 	and.w	r2, r3, #31
 80030b8:	4613      	mov	r3, r2
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	4413      	add	r3, r2
 80030be:	051b      	lsls	r3, r3, #20
 80030c0:	e018      	b.n	80030f4 <HAL_ADC_ConfigChannel+0x3c0>
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ca:	fa93 f3a3 	rbit	r3, r3
 80030ce:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80030d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80030d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80030da:	2320      	movs	r3, #32
 80030dc:	e003      	b.n	80030e6 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80030de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e0:	fab3 f383 	clz	r3, r3
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	3301      	adds	r3, #1
 80030e8:	f003 021f 	and.w	r2, r3, #31
 80030ec:	4613      	mov	r3, r2
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	4413      	add	r3, r2
 80030f2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030f4:	430b      	orrs	r3, r1
 80030f6:	e07e      	b.n	80031f6 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003100:	2b00      	cmp	r3, #0
 8003102:	d107      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x3e0>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	0e9b      	lsrs	r3, r3, #26
 800310a:	3301      	adds	r3, #1
 800310c:	069b      	lsls	r3, r3, #26
 800310e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003112:	e015      	b.n	8003140 <HAL_ADC_ConfigChannel+0x40c>
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311c:	fa93 f3a3 	rbit	r3, r3
 8003120:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003128:	2b00      	cmp	r3, #0
 800312a:	d101      	bne.n	8003130 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800312c:	2320      	movs	r3, #32
 800312e:	e003      	b.n	8003138 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003132:	fab3 f383 	clz	r3, r3
 8003136:	b2db      	uxtb	r3, r3
 8003138:	3301      	adds	r3, #1
 800313a:	069b      	lsls	r3, r3, #26
 800313c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003148:	2b00      	cmp	r3, #0
 800314a:	d109      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x42c>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	0e9b      	lsrs	r3, r3, #26
 8003152:	3301      	adds	r3, #1
 8003154:	f003 031f 	and.w	r3, r3, #31
 8003158:	2101      	movs	r1, #1
 800315a:	fa01 f303 	lsl.w	r3, r1, r3
 800315e:	e017      	b.n	8003190 <HAL_ADC_ConfigChannel+0x45c>
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	fa93 f3a3 	rbit	r3, r3
 800316c:	61bb      	str	r3, [r7, #24]
  return result;
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003172:	6a3b      	ldr	r3, [r7, #32]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d101      	bne.n	800317c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003178:	2320      	movs	r3, #32
 800317a:	e003      	b.n	8003184 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	fab3 f383 	clz	r3, r3
 8003182:	b2db      	uxtb	r3, r3
 8003184:	3301      	adds	r3, #1
 8003186:	f003 031f 	and.w	r3, r3, #31
 800318a:	2101      	movs	r1, #1
 800318c:	fa01 f303 	lsl.w	r3, r1, r3
 8003190:	ea42 0103 	orr.w	r1, r2, r3
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10d      	bne.n	80031bc <HAL_ADC_ConfigChannel+0x488>
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	0e9b      	lsrs	r3, r3, #26
 80031a6:	3301      	adds	r3, #1
 80031a8:	f003 021f 	and.w	r2, r3, #31
 80031ac:	4613      	mov	r3, r2
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	4413      	add	r3, r2
 80031b2:	3b1e      	subs	r3, #30
 80031b4:	051b      	lsls	r3, r3, #20
 80031b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031ba:	e01b      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x4c0>
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	fa93 f3a3 	rbit	r3, r3
 80031c8:	60fb      	str	r3, [r7, #12]
  return result;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80031d4:	2320      	movs	r3, #32
 80031d6:	e003      	b.n	80031e0 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	fab3 f383 	clz	r3, r3
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	3301      	adds	r3, #1
 80031e2:	f003 021f 	and.w	r2, r3, #31
 80031e6:	4613      	mov	r3, r2
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	4413      	add	r3, r2
 80031ec:	3b1e      	subs	r3, #30
 80031ee:	051b      	lsls	r3, r3, #20
 80031f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031f4:	430b      	orrs	r3, r1
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	6892      	ldr	r2, [r2, #8]
 80031fa:	4619      	mov	r1, r3
 80031fc:	f7ff fb20 	bl	8002840 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	f280 80c6 	bge.w	8003396 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a67      	ldr	r2, [pc, #412]	; (80033ac <HAL_ADC_ConfigChannel+0x678>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d004      	beq.n	800321e <HAL_ADC_ConfigChannel+0x4ea>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a65      	ldr	r2, [pc, #404]	; (80033b0 <HAL_ADC_ConfigChannel+0x67c>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d101      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x4ee>
 800321e:	4b65      	ldr	r3, [pc, #404]	; (80033b4 <HAL_ADC_ConfigChannel+0x680>)
 8003220:	e000      	b.n	8003224 <HAL_ADC_ConfigChannel+0x4f0>
 8003222:	4b65      	ldr	r3, [pc, #404]	; (80033b8 <HAL_ADC_ConfigChannel+0x684>)
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff fa7d 	bl	8002724 <LL_ADC_GetCommonPathInternalCh>
 800322a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a5e      	ldr	r2, [pc, #376]	; (80033ac <HAL_ADC_ConfigChannel+0x678>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d004      	beq.n	8003240 <HAL_ADC_ConfigChannel+0x50c>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a5d      	ldr	r2, [pc, #372]	; (80033b0 <HAL_ADC_ConfigChannel+0x67c>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d10e      	bne.n	800325e <HAL_ADC_ConfigChannel+0x52a>
 8003240:	485a      	ldr	r0, [pc, #360]	; (80033ac <HAL_ADC_ConfigChannel+0x678>)
 8003242:	f7ff fb9b 	bl	800297c <LL_ADC_IsEnabled>
 8003246:	4604      	mov	r4, r0
 8003248:	4859      	ldr	r0, [pc, #356]	; (80033b0 <HAL_ADC_ConfigChannel+0x67c>)
 800324a:	f7ff fb97 	bl	800297c <LL_ADC_IsEnabled>
 800324e:	4603      	mov	r3, r0
 8003250:	4323      	orrs	r3, r4
 8003252:	2b00      	cmp	r3, #0
 8003254:	bf0c      	ite	eq
 8003256:	2301      	moveq	r3, #1
 8003258:	2300      	movne	r3, #0
 800325a:	b2db      	uxtb	r3, r3
 800325c:	e008      	b.n	8003270 <HAL_ADC_ConfigChannel+0x53c>
 800325e:	4857      	ldr	r0, [pc, #348]	; (80033bc <HAL_ADC_ConfigChannel+0x688>)
 8003260:	f7ff fb8c 	bl	800297c <LL_ADC_IsEnabled>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	bf0c      	ite	eq
 800326a:	2301      	moveq	r3, #1
 800326c:	2300      	movne	r3, #0
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b00      	cmp	r3, #0
 8003272:	d07d      	beq.n	8003370 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a51      	ldr	r2, [pc, #324]	; (80033c0 <HAL_ADC_ConfigChannel+0x68c>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d130      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0x5ac>
 800327e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003280:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d12b      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a4b      	ldr	r2, [pc, #300]	; (80033bc <HAL_ADC_ConfigChannel+0x688>)
 800328e:	4293      	cmp	r3, r2
 8003290:	f040 8081 	bne.w	8003396 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a44      	ldr	r2, [pc, #272]	; (80033ac <HAL_ADC_ConfigChannel+0x678>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d004      	beq.n	80032a8 <HAL_ADC_ConfigChannel+0x574>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a43      	ldr	r2, [pc, #268]	; (80033b0 <HAL_ADC_ConfigChannel+0x67c>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d101      	bne.n	80032ac <HAL_ADC_ConfigChannel+0x578>
 80032a8:	4a42      	ldr	r2, [pc, #264]	; (80033b4 <HAL_ADC_ConfigChannel+0x680>)
 80032aa:	e000      	b.n	80032ae <HAL_ADC_ConfigChannel+0x57a>
 80032ac:	4a42      	ldr	r2, [pc, #264]	; (80033b8 <HAL_ADC_ConfigChannel+0x684>)
 80032ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80032b4:	4619      	mov	r1, r3
 80032b6:	4610      	mov	r0, r2
 80032b8:	f7ff fa21 	bl	80026fe <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032bc:	4b41      	ldr	r3, [pc, #260]	; (80033c4 <HAL_ADC_ConfigChannel+0x690>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	099b      	lsrs	r3, r3, #6
 80032c2:	4a41      	ldr	r2, [pc, #260]	; (80033c8 <HAL_ADC_ConfigChannel+0x694>)
 80032c4:	fba2 2303 	umull	r2, r3, r2, r3
 80032c8:	099b      	lsrs	r3, r3, #6
 80032ca:	3301      	adds	r3, #1
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80032d0:	e002      	b.n	80032d8 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	3b01      	subs	r3, #1
 80032d6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f9      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032de:	e05a      	b.n	8003396 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a39      	ldr	r2, [pc, #228]	; (80033cc <HAL_ADC_ConfigChannel+0x698>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d11e      	bne.n	8003328 <HAL_ADC_ConfigChannel+0x5f4>
 80032ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d119      	bne.n	8003328 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a30      	ldr	r2, [pc, #192]	; (80033bc <HAL_ADC_ConfigChannel+0x688>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d14b      	bne.n	8003396 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a2a      	ldr	r2, [pc, #168]	; (80033ac <HAL_ADC_ConfigChannel+0x678>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d004      	beq.n	8003312 <HAL_ADC_ConfigChannel+0x5de>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a28      	ldr	r2, [pc, #160]	; (80033b0 <HAL_ADC_ConfigChannel+0x67c>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d101      	bne.n	8003316 <HAL_ADC_ConfigChannel+0x5e2>
 8003312:	4a28      	ldr	r2, [pc, #160]	; (80033b4 <HAL_ADC_ConfigChannel+0x680>)
 8003314:	e000      	b.n	8003318 <HAL_ADC_ConfigChannel+0x5e4>
 8003316:	4a28      	ldr	r2, [pc, #160]	; (80033b8 <HAL_ADC_ConfigChannel+0x684>)
 8003318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800331a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800331e:	4619      	mov	r1, r3
 8003320:	4610      	mov	r0, r2
 8003322:	f7ff f9ec 	bl	80026fe <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003326:	e036      	b.n	8003396 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a28      	ldr	r2, [pc, #160]	; (80033d0 <HAL_ADC_ConfigChannel+0x69c>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d131      	bne.n	8003396 <HAL_ADC_ConfigChannel+0x662>
 8003332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003334:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d12c      	bne.n	8003396 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a1e      	ldr	r2, [pc, #120]	; (80033bc <HAL_ADC_ConfigChannel+0x688>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d127      	bne.n	8003396 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a18      	ldr	r2, [pc, #96]	; (80033ac <HAL_ADC_ConfigChannel+0x678>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d004      	beq.n	800335a <HAL_ADC_ConfigChannel+0x626>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a16      	ldr	r2, [pc, #88]	; (80033b0 <HAL_ADC_ConfigChannel+0x67c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d101      	bne.n	800335e <HAL_ADC_ConfigChannel+0x62a>
 800335a:	4a16      	ldr	r2, [pc, #88]	; (80033b4 <HAL_ADC_ConfigChannel+0x680>)
 800335c:	e000      	b.n	8003360 <HAL_ADC_ConfigChannel+0x62c>
 800335e:	4a16      	ldr	r2, [pc, #88]	; (80033b8 <HAL_ADC_ConfigChannel+0x684>)
 8003360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003362:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003366:	4619      	mov	r1, r3
 8003368:	4610      	mov	r0, r2
 800336a:	f7ff f9c8 	bl	80026fe <LL_ADC_SetCommonPathInternalCh>
 800336e:	e012      	b.n	8003396 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003374:	f043 0220 	orr.w	r2, r3, #32
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003382:	e008      	b.n	8003396 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003388:	f043 0220 	orr.w	r2, r3, #32
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800339e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3784      	adds	r7, #132	; 0x84
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd90      	pop	{r4, r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40022000 	.word	0x40022000
 80033b0:	40022100 	.word	0x40022100
 80033b4:	40022300 	.word	0x40022300
 80033b8:	58026300 	.word	0x58026300
 80033bc:	58026000 	.word	0x58026000
 80033c0:	cb840000 	.word	0xcb840000
 80033c4:	24000000 	.word	0x24000000
 80033c8:	053e2d63 	.word	0x053e2d63
 80033cc:	c7520000 	.word	0xc7520000
 80033d0:	cfb80000 	.word	0xcfb80000

080033d4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a7a      	ldr	r2, [pc, #488]	; (80035cc <ADC_ConfigureBoostMode+0x1f8>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d004      	beq.n	80033f0 <ADC_ConfigureBoostMode+0x1c>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a79      	ldr	r2, [pc, #484]	; (80035d0 <ADC_ConfigureBoostMode+0x1fc>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d109      	bne.n	8003404 <ADC_ConfigureBoostMode+0x30>
 80033f0:	4b78      	ldr	r3, [pc, #480]	; (80035d4 <ADC_ConfigureBoostMode+0x200>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	bf14      	ite	ne
 80033fc:	2301      	movne	r3, #1
 80033fe:	2300      	moveq	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	e008      	b.n	8003416 <ADC_ConfigureBoostMode+0x42>
 8003404:	4b74      	ldr	r3, [pc, #464]	; (80035d8 <ADC_ConfigureBoostMode+0x204>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800340c:	2b00      	cmp	r3, #0
 800340e:	bf14      	ite	ne
 8003410:	2301      	movne	r3, #1
 8003412:	2300      	moveq	r3, #0
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d01c      	beq.n	8003454 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800341a:	f001 ff97 	bl	800534c <HAL_RCC_GetHCLKFreq>
 800341e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003428:	d010      	beq.n	800344c <ADC_ConfigureBoostMode+0x78>
 800342a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800342e:	d873      	bhi.n	8003518 <ADC_ConfigureBoostMode+0x144>
 8003430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003434:	d002      	beq.n	800343c <ADC_ConfigureBoostMode+0x68>
 8003436:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800343a:	d16d      	bne.n	8003518 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	0c1b      	lsrs	r3, r3, #16
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	fbb2 f3f3 	udiv	r3, r2, r3
 8003448:	60fb      	str	r3, [r7, #12]
        break;
 800344a:	e068      	b.n	800351e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	089b      	lsrs	r3, r3, #2
 8003450:	60fb      	str	r3, [r7, #12]
        break;
 8003452:	e064      	b.n	800351e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003454:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003458:	f04f 0100 	mov.w	r1, #0
 800345c:	f003 f9dc 	bl	8006818 <HAL_RCCEx_GetPeriphCLKFreq>
 8003460:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800346a:	d051      	beq.n	8003510 <ADC_ConfigureBoostMode+0x13c>
 800346c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003470:	d854      	bhi.n	800351c <ADC_ConfigureBoostMode+0x148>
 8003472:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003476:	d047      	beq.n	8003508 <ADC_ConfigureBoostMode+0x134>
 8003478:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800347c:	d84e      	bhi.n	800351c <ADC_ConfigureBoostMode+0x148>
 800347e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003482:	d03d      	beq.n	8003500 <ADC_ConfigureBoostMode+0x12c>
 8003484:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003488:	d848      	bhi.n	800351c <ADC_ConfigureBoostMode+0x148>
 800348a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800348e:	d033      	beq.n	80034f8 <ADC_ConfigureBoostMode+0x124>
 8003490:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003494:	d842      	bhi.n	800351c <ADC_ConfigureBoostMode+0x148>
 8003496:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800349a:	d029      	beq.n	80034f0 <ADC_ConfigureBoostMode+0x11c>
 800349c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80034a0:	d83c      	bhi.n	800351c <ADC_ConfigureBoostMode+0x148>
 80034a2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80034a6:	d01a      	beq.n	80034de <ADC_ConfigureBoostMode+0x10a>
 80034a8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80034ac:	d836      	bhi.n	800351c <ADC_ConfigureBoostMode+0x148>
 80034ae:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80034b2:	d014      	beq.n	80034de <ADC_ConfigureBoostMode+0x10a>
 80034b4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80034b8:	d830      	bhi.n	800351c <ADC_ConfigureBoostMode+0x148>
 80034ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034be:	d00e      	beq.n	80034de <ADC_ConfigureBoostMode+0x10a>
 80034c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034c4:	d82a      	bhi.n	800351c <ADC_ConfigureBoostMode+0x148>
 80034c6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80034ca:	d008      	beq.n	80034de <ADC_ConfigureBoostMode+0x10a>
 80034cc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80034d0:	d824      	bhi.n	800351c <ADC_ConfigureBoostMode+0x148>
 80034d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034d6:	d002      	beq.n	80034de <ADC_ConfigureBoostMode+0x10a>
 80034d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80034dc:	d11e      	bne.n	800351c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	0c9b      	lsrs	r3, r3, #18
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ec:	60fb      	str	r3, [r7, #12]
        break;
 80034ee:	e016      	b.n	800351e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	091b      	lsrs	r3, r3, #4
 80034f4:	60fb      	str	r3, [r7, #12]
        break;
 80034f6:	e012      	b.n	800351e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	095b      	lsrs	r3, r3, #5
 80034fc:	60fb      	str	r3, [r7, #12]
        break;
 80034fe:	e00e      	b.n	800351e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	099b      	lsrs	r3, r3, #6
 8003504:	60fb      	str	r3, [r7, #12]
        break;
 8003506:	e00a      	b.n	800351e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	09db      	lsrs	r3, r3, #7
 800350c:	60fb      	str	r3, [r7, #12]
        break;
 800350e:	e006      	b.n	800351e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	0a1b      	lsrs	r3, r3, #8
 8003514:	60fb      	str	r3, [r7, #12]
        break;
 8003516:	e002      	b.n	800351e <ADC_ConfigureBoostMode+0x14a>
        break;
 8003518:	bf00      	nop
 800351a:	e000      	b.n	800351e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800351c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800351e:	f7ff f8ab 	bl	8002678 <HAL_GetREVID>
 8003522:	4603      	mov	r3, r0
 8003524:	f241 0203 	movw	r2, #4099	; 0x1003
 8003528:	4293      	cmp	r3, r2
 800352a:	d815      	bhi.n	8003558 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4a2b      	ldr	r2, [pc, #172]	; (80035dc <ADC_ConfigureBoostMode+0x208>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d908      	bls.n	8003546 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689a      	ldr	r2, [r3, #8]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003542:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003544:	e03e      	b.n	80035c4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003554:	609a      	str	r2, [r3, #8]
}
 8003556:	e035      	b.n	80035c4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	085b      	lsrs	r3, r3, #1
 800355c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	4a1f      	ldr	r2, [pc, #124]	; (80035e0 <ADC_ConfigureBoostMode+0x20c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d808      	bhi.n	8003578 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003574:	609a      	str	r2, [r3, #8]
}
 8003576:	e025      	b.n	80035c4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	4a1a      	ldr	r2, [pc, #104]	; (80035e4 <ADC_ConfigureBoostMode+0x210>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d80a      	bhi.n	8003596 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003592:	609a      	str	r2, [r3, #8]
}
 8003594:	e016      	b.n	80035c4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	4a13      	ldr	r2, [pc, #76]	; (80035e8 <ADC_ConfigureBoostMode+0x214>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d80a      	bhi.n	80035b4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035b0:	609a      	str	r2, [r3, #8]
}
 80035b2:	e007      	b.n	80035c4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689a      	ldr	r2, [r3, #8]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80035c2:	609a      	str	r2, [r3, #8]
}
 80035c4:	bf00      	nop
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40022000 	.word	0x40022000
 80035d0:	40022100 	.word	0x40022100
 80035d4:	40022300 	.word	0x40022300
 80035d8:	58026300 	.word	0x58026300
 80035dc:	01312d00 	.word	0x01312d00
 80035e0:	005f5e10 	.word	0x005f5e10
 80035e4:	00bebc20 	.word	0x00bebc20
 80035e8:	017d7840 	.word	0x017d7840

080035ec <LL_ADC_IsEnabled>:
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d101      	bne.n	8003604 <LL_ADC_IsEnabled+0x18>
 8003600:	2301      	movs	r3, #1
 8003602:	e000      	b.n	8003606 <LL_ADC_IsEnabled+0x1a>
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <LL_ADC_REG_IsConversionOngoing>:
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 0304 	and.w	r3, r3, #4
 8003622:	2b04      	cmp	r3, #4
 8003624:	d101      	bne.n	800362a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003638:	b590      	push	{r4, r7, lr}
 800363a:	b09f      	sub	sp, #124	; 0x7c
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003642:	2300      	movs	r3, #0
 8003644:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800364e:	2b01      	cmp	r3, #1
 8003650:	d101      	bne.n	8003656 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003652:	2302      	movs	r3, #2
 8003654:	e0be      	b.n	80037d4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800365e:	2300      	movs	r3, #0
 8003660:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003662:	2300      	movs	r3, #0
 8003664:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a5c      	ldr	r2, [pc, #368]	; (80037dc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d102      	bne.n	8003676 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003670:	4b5b      	ldr	r3, [pc, #364]	; (80037e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003672:	60bb      	str	r3, [r7, #8]
 8003674:	e001      	b.n	800367a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003676:	2300      	movs	r3, #0
 8003678:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10b      	bne.n	8003698 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003684:	f043 0220 	orr.w	r2, r3, #32
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e09d      	b.n	80037d4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	4618      	mov	r0, r3
 800369c:	f7ff ffb9 	bl	8003612 <LL_ADC_REG_IsConversionOngoing>
 80036a0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff ffb3 	bl	8003612 <LL_ADC_REG_IsConversionOngoing>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d17f      	bne.n	80037b2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80036b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d17c      	bne.n	80037b2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a47      	ldr	r2, [pc, #284]	; (80037dc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d004      	beq.n	80036cc <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a46      	ldr	r2, [pc, #280]	; (80037e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d101      	bne.n	80036d0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80036cc:	4b45      	ldr	r3, [pc, #276]	; (80037e4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80036ce:	e000      	b.n	80036d2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80036d0:	4b45      	ldr	r3, [pc, #276]	; (80037e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80036d2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d039      	beq.n	8003750 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80036dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	431a      	orrs	r2, r3
 80036ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ec:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a3a      	ldr	r2, [pc, #232]	; (80037dc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d004      	beq.n	8003702 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a38      	ldr	r2, [pc, #224]	; (80037e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d10e      	bne.n	8003720 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003702:	4836      	ldr	r0, [pc, #216]	; (80037dc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003704:	f7ff ff72 	bl	80035ec <LL_ADC_IsEnabled>
 8003708:	4604      	mov	r4, r0
 800370a:	4835      	ldr	r0, [pc, #212]	; (80037e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800370c:	f7ff ff6e 	bl	80035ec <LL_ADC_IsEnabled>
 8003710:	4603      	mov	r3, r0
 8003712:	4323      	orrs	r3, r4
 8003714:	2b00      	cmp	r3, #0
 8003716:	bf0c      	ite	eq
 8003718:	2301      	moveq	r3, #1
 800371a:	2300      	movne	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	e008      	b.n	8003732 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003720:	4832      	ldr	r0, [pc, #200]	; (80037ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003722:	f7ff ff63 	bl	80035ec <LL_ADC_IsEnabled>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	bf0c      	ite	eq
 800372c:	2301      	moveq	r3, #1
 800372e:	2300      	movne	r3, #0
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d047      	beq.n	80037c6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003738:	689a      	ldr	r2, [r3, #8]
 800373a:	4b2d      	ldr	r3, [pc, #180]	; (80037f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800373c:	4013      	ands	r3, r2
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	6811      	ldr	r1, [r2, #0]
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	6892      	ldr	r2, [r2, #8]
 8003746:	430a      	orrs	r2, r1
 8003748:	431a      	orrs	r2, r3
 800374a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800374c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800374e:	e03a      	b.n	80037c6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003758:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800375a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a1e      	ldr	r2, [pc, #120]	; (80037dc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d004      	beq.n	8003770 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a1d      	ldr	r2, [pc, #116]	; (80037e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d10e      	bne.n	800378e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003770:	481a      	ldr	r0, [pc, #104]	; (80037dc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003772:	f7ff ff3b 	bl	80035ec <LL_ADC_IsEnabled>
 8003776:	4604      	mov	r4, r0
 8003778:	4819      	ldr	r0, [pc, #100]	; (80037e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800377a:	f7ff ff37 	bl	80035ec <LL_ADC_IsEnabled>
 800377e:	4603      	mov	r3, r0
 8003780:	4323      	orrs	r3, r4
 8003782:	2b00      	cmp	r3, #0
 8003784:	bf0c      	ite	eq
 8003786:	2301      	moveq	r3, #1
 8003788:	2300      	movne	r3, #0
 800378a:	b2db      	uxtb	r3, r3
 800378c:	e008      	b.n	80037a0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800378e:	4817      	ldr	r0, [pc, #92]	; (80037ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003790:	f7ff ff2c 	bl	80035ec <LL_ADC_IsEnabled>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	bf0c      	ite	eq
 800379a:	2301      	moveq	r3, #1
 800379c:	2300      	movne	r3, #0
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d010      	beq.n	80037c6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80037a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	4b11      	ldr	r3, [pc, #68]	; (80037f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80037aa:	4013      	ands	r3, r2
 80037ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80037ae:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037b0:	e009      	b.n	80037c6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b6:	f043 0220 	orr.w	r2, r3, #32
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80037c4:	e000      	b.n	80037c8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037c6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80037d0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	377c      	adds	r7, #124	; 0x7c
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd90      	pop	{r4, r7, pc}
 80037dc:	40022000 	.word	0x40022000
 80037e0:	40022100 	.word	0x40022100
 80037e4:	40022300 	.word	0x40022300
 80037e8:	58026300 	.word	0x58026300
 80037ec:	58026000 	.word	0x58026000
 80037f0:	fffff0e0 	.word	0xfffff0e0

080037f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003804:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <__NVIC_SetPriorityGrouping+0x40>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003810:	4013      	ands	r3, r2
 8003812:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800381c:	4b06      	ldr	r3, [pc, #24]	; (8003838 <__NVIC_SetPriorityGrouping+0x44>)
 800381e:	4313      	orrs	r3, r2
 8003820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003822:	4a04      	ldr	r2, [pc, #16]	; (8003834 <__NVIC_SetPriorityGrouping+0x40>)
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	60d3      	str	r3, [r2, #12]
}
 8003828:	bf00      	nop
 800382a:	3714      	adds	r7, #20
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	e000ed00 	.word	0xe000ed00
 8003838:	05fa0000 	.word	0x05fa0000

0800383c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003840:	4b04      	ldr	r3, [pc, #16]	; (8003854 <__NVIC_GetPriorityGrouping+0x18>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	0a1b      	lsrs	r3, r3, #8
 8003846:	f003 0307 	and.w	r3, r3, #7
}
 800384a:	4618      	mov	r0, r3
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	e000ed00 	.word	0xe000ed00

08003858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	4603      	mov	r3, r0
 8003860:	6039      	str	r1, [r7, #0]
 8003862:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003864:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003868:	2b00      	cmp	r3, #0
 800386a:	db0a      	blt.n	8003882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	b2da      	uxtb	r2, r3
 8003870:	490c      	ldr	r1, [pc, #48]	; (80038a4 <__NVIC_SetPriority+0x4c>)
 8003872:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003876:	0112      	lsls	r2, r2, #4
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	440b      	add	r3, r1
 800387c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003880:	e00a      	b.n	8003898 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	b2da      	uxtb	r2, r3
 8003886:	4908      	ldr	r1, [pc, #32]	; (80038a8 <__NVIC_SetPriority+0x50>)
 8003888:	88fb      	ldrh	r3, [r7, #6]
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	3b04      	subs	r3, #4
 8003890:	0112      	lsls	r2, r2, #4
 8003892:	b2d2      	uxtb	r2, r2
 8003894:	440b      	add	r3, r1
 8003896:	761a      	strb	r2, [r3, #24]
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	e000e100 	.word	0xe000e100
 80038a8:	e000ed00 	.word	0xe000ed00

080038ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b089      	sub	sp, #36	; 0x24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	f1c3 0307 	rsb	r3, r3, #7
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	bf28      	it	cs
 80038ca:	2304      	movcs	r3, #4
 80038cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	3304      	adds	r3, #4
 80038d2:	2b06      	cmp	r3, #6
 80038d4:	d902      	bls.n	80038dc <NVIC_EncodePriority+0x30>
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	3b03      	subs	r3, #3
 80038da:	e000      	b.n	80038de <NVIC_EncodePriority+0x32>
 80038dc:	2300      	movs	r3, #0
 80038de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	43da      	mvns	r2, r3
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	401a      	ands	r2, r3
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	fa01 f303 	lsl.w	r3, r1, r3
 80038fe:	43d9      	mvns	r1, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003904:	4313      	orrs	r3, r2
         );
}
 8003906:	4618      	mov	r0, r3
 8003908:	3724      	adds	r7, #36	; 0x24
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
	...

08003914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3b01      	subs	r3, #1
 8003920:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003924:	d301      	bcc.n	800392a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003926:	2301      	movs	r3, #1
 8003928:	e00f      	b.n	800394a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800392a:	4a0a      	ldr	r2, [pc, #40]	; (8003954 <SysTick_Config+0x40>)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3b01      	subs	r3, #1
 8003930:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003932:	210f      	movs	r1, #15
 8003934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003938:	f7ff ff8e 	bl	8003858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800393c:	4b05      	ldr	r3, [pc, #20]	; (8003954 <SysTick_Config+0x40>)
 800393e:	2200      	movs	r2, #0
 8003940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003942:	4b04      	ldr	r3, [pc, #16]	; (8003954 <SysTick_Config+0x40>)
 8003944:	2207      	movs	r2, #7
 8003946:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	e000e010 	.word	0xe000e010

08003958 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7ff ff47 	bl	80037f4 <__NVIC_SetPriorityGrouping>
}
 8003966:	bf00      	nop
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b086      	sub	sp, #24
 8003972:	af00      	add	r7, sp, #0
 8003974:	4603      	mov	r3, r0
 8003976:	60b9      	str	r1, [r7, #8]
 8003978:	607a      	str	r2, [r7, #4]
 800397a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800397c:	f7ff ff5e 	bl	800383c <__NVIC_GetPriorityGrouping>
 8003980:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	68b9      	ldr	r1, [r7, #8]
 8003986:	6978      	ldr	r0, [r7, #20]
 8003988:	f7ff ff90 	bl	80038ac <NVIC_EncodePriority>
 800398c:	4602      	mov	r2, r0
 800398e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003992:	4611      	mov	r1, r2
 8003994:	4618      	mov	r0, r3
 8003996:	f7ff ff5f 	bl	8003858 <__NVIC_SetPriority>
}
 800399a:	bf00      	nop
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b082      	sub	sp, #8
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7ff ffb2 	bl	8003914 <SysTick_Config>
 80039b0:	4603      	mov	r3, r0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
	...

080039bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039bc:	b480      	push	{r7}
 80039be:	b089      	sub	sp, #36	; 0x24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80039c6:	2300      	movs	r3, #0
 80039c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80039ca:	4b89      	ldr	r3, [pc, #548]	; (8003bf0 <HAL_GPIO_Init+0x234>)
 80039cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80039ce:	e194      	b.n	8003cfa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	2101      	movs	r1, #1
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	fa01 f303 	lsl.w	r3, r1, r3
 80039dc:	4013      	ands	r3, r2
 80039de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 8186 	beq.w	8003cf4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f003 0303 	and.w	r3, r3, #3
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d005      	beq.n	8003a00 <HAL_GPIO_Init+0x44>
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f003 0303 	and.w	r3, r3, #3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d130      	bne.n	8003a62 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	2203      	movs	r2, #3
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	43db      	mvns	r3, r3
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	4013      	ands	r3, r2
 8003a16:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	68da      	ldr	r2, [r3, #12]
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a36:	2201      	movs	r2, #1
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3e:	43db      	mvns	r3, r3
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	4013      	ands	r3, r2
 8003a44:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	091b      	lsrs	r3, r3, #4
 8003a4c:	f003 0201 	and.w	r2, r3, #1
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f003 0303 	and.w	r3, r3, #3
 8003a6a:	2b03      	cmp	r3, #3
 8003a6c:	d017      	beq.n	8003a9e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	2203      	movs	r2, #3
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	4013      	ands	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	689a      	ldr	r2, [r3, #8]
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f003 0303 	and.w	r3, r3, #3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d123      	bne.n	8003af2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	08da      	lsrs	r2, r3, #3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3208      	adds	r2, #8
 8003ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	f003 0307 	and.w	r3, r3, #7
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	220f      	movs	r2, #15
 8003ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac6:	43db      	mvns	r3, r3
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	4013      	ands	r3, r2
 8003acc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	691a      	ldr	r2, [r3, #16]
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	fa02 f303 	lsl.w	r3, r2, r3
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	08da      	lsrs	r2, r3, #3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3208      	adds	r2, #8
 8003aec:	69b9      	ldr	r1, [r7, #24]
 8003aee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	2203      	movs	r2, #3
 8003afe:	fa02 f303 	lsl.w	r3, r2, r3
 8003b02:	43db      	mvns	r3, r3
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	4013      	ands	r3, r2
 8003b08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f003 0203 	and.w	r2, r3, #3
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f000 80e0 	beq.w	8003cf4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b34:	4b2f      	ldr	r3, [pc, #188]	; (8003bf4 <HAL_GPIO_Init+0x238>)
 8003b36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b3a:	4a2e      	ldr	r2, [pc, #184]	; (8003bf4 <HAL_GPIO_Init+0x238>)
 8003b3c:	f043 0302 	orr.w	r3, r3, #2
 8003b40:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003b44:	4b2b      	ldr	r3, [pc, #172]	; (8003bf4 <HAL_GPIO_Init+0x238>)
 8003b46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b52:	4a29      	ldr	r2, [pc, #164]	; (8003bf8 <HAL_GPIO_Init+0x23c>)
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	089b      	lsrs	r3, r3, #2
 8003b58:	3302      	adds	r3, #2
 8003b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	220f      	movs	r2, #15
 8003b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6e:	43db      	mvns	r3, r3
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	4013      	ands	r3, r2
 8003b74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a20      	ldr	r2, [pc, #128]	; (8003bfc <HAL_GPIO_Init+0x240>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d052      	beq.n	8003c24 <HAL_GPIO_Init+0x268>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a1f      	ldr	r2, [pc, #124]	; (8003c00 <HAL_GPIO_Init+0x244>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d031      	beq.n	8003bea <HAL_GPIO_Init+0x22e>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a1e      	ldr	r2, [pc, #120]	; (8003c04 <HAL_GPIO_Init+0x248>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d02b      	beq.n	8003be6 <HAL_GPIO_Init+0x22a>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a1d      	ldr	r2, [pc, #116]	; (8003c08 <HAL_GPIO_Init+0x24c>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d025      	beq.n	8003be2 <HAL_GPIO_Init+0x226>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a1c      	ldr	r2, [pc, #112]	; (8003c0c <HAL_GPIO_Init+0x250>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d01f      	beq.n	8003bde <HAL_GPIO_Init+0x222>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a1b      	ldr	r2, [pc, #108]	; (8003c10 <HAL_GPIO_Init+0x254>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d019      	beq.n	8003bda <HAL_GPIO_Init+0x21e>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a1a      	ldr	r2, [pc, #104]	; (8003c14 <HAL_GPIO_Init+0x258>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d013      	beq.n	8003bd6 <HAL_GPIO_Init+0x21a>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a19      	ldr	r2, [pc, #100]	; (8003c18 <HAL_GPIO_Init+0x25c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d00d      	beq.n	8003bd2 <HAL_GPIO_Init+0x216>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a18      	ldr	r2, [pc, #96]	; (8003c1c <HAL_GPIO_Init+0x260>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d007      	beq.n	8003bce <HAL_GPIO_Init+0x212>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a17      	ldr	r2, [pc, #92]	; (8003c20 <HAL_GPIO_Init+0x264>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d101      	bne.n	8003bca <HAL_GPIO_Init+0x20e>
 8003bc6:	2309      	movs	r3, #9
 8003bc8:	e02d      	b.n	8003c26 <HAL_GPIO_Init+0x26a>
 8003bca:	230a      	movs	r3, #10
 8003bcc:	e02b      	b.n	8003c26 <HAL_GPIO_Init+0x26a>
 8003bce:	2308      	movs	r3, #8
 8003bd0:	e029      	b.n	8003c26 <HAL_GPIO_Init+0x26a>
 8003bd2:	2307      	movs	r3, #7
 8003bd4:	e027      	b.n	8003c26 <HAL_GPIO_Init+0x26a>
 8003bd6:	2306      	movs	r3, #6
 8003bd8:	e025      	b.n	8003c26 <HAL_GPIO_Init+0x26a>
 8003bda:	2305      	movs	r3, #5
 8003bdc:	e023      	b.n	8003c26 <HAL_GPIO_Init+0x26a>
 8003bde:	2304      	movs	r3, #4
 8003be0:	e021      	b.n	8003c26 <HAL_GPIO_Init+0x26a>
 8003be2:	2303      	movs	r3, #3
 8003be4:	e01f      	b.n	8003c26 <HAL_GPIO_Init+0x26a>
 8003be6:	2302      	movs	r3, #2
 8003be8:	e01d      	b.n	8003c26 <HAL_GPIO_Init+0x26a>
 8003bea:	2301      	movs	r3, #1
 8003bec:	e01b      	b.n	8003c26 <HAL_GPIO_Init+0x26a>
 8003bee:	bf00      	nop
 8003bf0:	58000080 	.word	0x58000080
 8003bf4:	58024400 	.word	0x58024400
 8003bf8:	58000400 	.word	0x58000400
 8003bfc:	58020000 	.word	0x58020000
 8003c00:	58020400 	.word	0x58020400
 8003c04:	58020800 	.word	0x58020800
 8003c08:	58020c00 	.word	0x58020c00
 8003c0c:	58021000 	.word	0x58021000
 8003c10:	58021400 	.word	0x58021400
 8003c14:	58021800 	.word	0x58021800
 8003c18:	58021c00 	.word	0x58021c00
 8003c1c:	58022000 	.word	0x58022000
 8003c20:	58022400 	.word	0x58022400
 8003c24:	2300      	movs	r3, #0
 8003c26:	69fa      	ldr	r2, [r7, #28]
 8003c28:	f002 0203 	and.w	r2, r2, #3
 8003c2c:	0092      	lsls	r2, r2, #2
 8003c2e:	4093      	lsls	r3, r2
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c36:	4938      	ldr	r1, [pc, #224]	; (8003d18 <HAL_GPIO_Init+0x35c>)
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	089b      	lsrs	r3, r3, #2
 8003c3c:	3302      	adds	r3, #2
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	43db      	mvns	r3, r3
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	4013      	ands	r3, r2
 8003c54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003c6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	43db      	mvns	r3, r3
 8003c7e:	69ba      	ldr	r2, [r7, #24]
 8003c80:	4013      	ands	r3, r2
 8003c82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d003      	beq.n	8003c98 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003c98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	43db      	mvns	r3, r3
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	4013      	ands	r3, r2
 8003cae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	43db      	mvns	r3, r3
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	fa22 f303 	lsr.w	r3, r2, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f47f ae63 	bne.w	80039d0 <HAL_GPIO_Init+0x14>
  }
}
 8003d0a:	bf00      	nop
 8003d0c:	bf00      	nop
 8003d0e:	3724      	adds	r7, #36	; 0x24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	58000400 	.word	0x58000400

08003d1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	460b      	mov	r3, r1
 8003d26:	807b      	strh	r3, [r7, #2]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d2c:	787b      	ldrb	r3, [r7, #1]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d32:	887a      	ldrh	r2, [r7, #2]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003d38:	e003      	b.n	8003d42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003d3a:	887b      	ldrh	r3, [r7, #2]
 8003d3c:	041a      	lsls	r2, r3, #16
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	619a      	str	r2, [r3, #24]
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
	...

08003d50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e07f      	b.n	8003e62 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d106      	bne.n	8003d7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7fd fcae 	bl	80016d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2224      	movs	r2, #36	; 0x24
 8003d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0201 	bic.w	r2, r2, #1
 8003d92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003da0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003db0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d107      	bne.n	8003dca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689a      	ldr	r2, [r3, #8]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dc6:	609a      	str	r2, [r3, #8]
 8003dc8:	e006      	b.n	8003dd8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689a      	ldr	r2, [r3, #8]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003dd6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d104      	bne.n	8003dea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003de8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6859      	ldr	r1, [r3, #4]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	4b1d      	ldr	r3, [pc, #116]	; (8003e6c <HAL_I2C_Init+0x11c>)
 8003df6:	430b      	orrs	r3, r1
 8003df8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68da      	ldr	r2, [r3, #12]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	691a      	ldr	r2, [r3, #16]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	69d9      	ldr	r1, [r3, #28]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a1a      	ldr	r2, [r3, #32]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 0201 	orr.w	r2, r2, #1
 8003e42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	02008000 	.word	0x02008000

08003e70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b20      	cmp	r3, #32
 8003e84:	d138      	bne.n	8003ef8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d101      	bne.n	8003e94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e90:	2302      	movs	r3, #2
 8003e92:	e032      	b.n	8003efa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2224      	movs	r2, #36	; 0x24
 8003ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 0201 	bic.w	r2, r2, #1
 8003eb2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ec2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6819      	ldr	r1, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0201 	orr.w	r2, r2, #1
 8003ee2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	e000      	b.n	8003efa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ef8:	2302      	movs	r3, #2
  }
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b085      	sub	sp, #20
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
 8003f0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b20      	cmp	r3, #32
 8003f1a:	d139      	bne.n	8003f90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d101      	bne.n	8003f2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f26:	2302      	movs	r3, #2
 8003f28:	e033      	b.n	8003f92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2224      	movs	r2, #36	; 0x24
 8003f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 0201 	bic.w	r2, r2, #1
 8003f48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003f58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	021b      	lsls	r3, r3, #8
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 0201 	orr.w	r2, r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	e000      	b.n	8003f92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f90:	2302      	movs	r3, #2
  }
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fa0:	b08f      	sub	sp, #60	; 0x3c
 8003fa2:	af0a      	add	r7, sp, #40	; 0x28
 8003fa4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d101      	bne.n	8003fb0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e116      	b.n	80041de <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d106      	bne.n	8003fd0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7fe f956 	bl	800227c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2203      	movs	r2, #3
 8003fd4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d102      	bne.n	8003fea <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f008 f98e 	bl	800c310 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	603b      	str	r3, [r7, #0]
 8003ffa:	687e      	ldr	r6, [r7, #4]
 8003ffc:	466d      	mov	r5, sp
 8003ffe:	f106 0410 	add.w	r4, r6, #16
 8004002:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004004:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004006:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004008:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800400a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800400e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004012:	1d33      	adds	r3, r6, #4
 8004014:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004016:	6838      	ldr	r0, [r7, #0]
 8004018:	f008 f90c 	bl	800c234 <USB_CoreInit>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d005      	beq.n	800402e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2202      	movs	r2, #2
 8004026:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e0d7      	b.n	80041de <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2100      	movs	r1, #0
 8004034:	4618      	mov	r0, r3
 8004036:	f008 f97c 	bl	800c332 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800403a:	2300      	movs	r3, #0
 800403c:	73fb      	strb	r3, [r7, #15]
 800403e:	e04a      	b.n	80040d6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004040:	7bfa      	ldrb	r2, [r7, #15]
 8004042:	6879      	ldr	r1, [r7, #4]
 8004044:	4613      	mov	r3, r2
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	4413      	add	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	440b      	add	r3, r1
 800404e:	333d      	adds	r3, #61	; 0x3d
 8004050:	2201      	movs	r2, #1
 8004052:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004054:	7bfa      	ldrb	r2, [r7, #15]
 8004056:	6879      	ldr	r1, [r7, #4]
 8004058:	4613      	mov	r3, r2
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	4413      	add	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	440b      	add	r3, r1
 8004062:	333c      	adds	r3, #60	; 0x3c
 8004064:	7bfa      	ldrb	r2, [r7, #15]
 8004066:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004068:	7bfa      	ldrb	r2, [r7, #15]
 800406a:	7bfb      	ldrb	r3, [r7, #15]
 800406c:	b298      	uxth	r0, r3
 800406e:	6879      	ldr	r1, [r7, #4]
 8004070:	4613      	mov	r3, r2
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	4413      	add	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	440b      	add	r3, r1
 800407a:	3356      	adds	r3, #86	; 0x56
 800407c:	4602      	mov	r2, r0
 800407e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004080:	7bfa      	ldrb	r2, [r7, #15]
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	4613      	mov	r3, r2
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	4413      	add	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	3340      	adds	r3, #64	; 0x40
 8004090:	2200      	movs	r2, #0
 8004092:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004094:	7bfa      	ldrb	r2, [r7, #15]
 8004096:	6879      	ldr	r1, [r7, #4]
 8004098:	4613      	mov	r3, r2
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	4413      	add	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	440b      	add	r3, r1
 80040a2:	3344      	adds	r3, #68	; 0x44
 80040a4:	2200      	movs	r2, #0
 80040a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80040a8:	7bfa      	ldrb	r2, [r7, #15]
 80040aa:	6879      	ldr	r1, [r7, #4]
 80040ac:	4613      	mov	r3, r2
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	4413      	add	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	440b      	add	r3, r1
 80040b6:	3348      	adds	r3, #72	; 0x48
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80040bc:	7bfa      	ldrb	r2, [r7, #15]
 80040be:	6879      	ldr	r1, [r7, #4]
 80040c0:	4613      	mov	r3, r2
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	4413      	add	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	440b      	add	r3, r1
 80040ca:	334c      	adds	r3, #76	; 0x4c
 80040cc:	2200      	movs	r2, #0
 80040ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040d0:	7bfb      	ldrb	r3, [r7, #15]
 80040d2:	3301      	adds	r3, #1
 80040d4:	73fb      	strb	r3, [r7, #15]
 80040d6:	7bfa      	ldrb	r2, [r7, #15]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d3af      	bcc.n	8004040 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040e0:	2300      	movs	r3, #0
 80040e2:	73fb      	strb	r3, [r7, #15]
 80040e4:	e044      	b.n	8004170 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80040e6:	7bfa      	ldrb	r2, [r7, #15]
 80040e8:	6879      	ldr	r1, [r7, #4]
 80040ea:	4613      	mov	r3, r2
 80040ec:	00db      	lsls	r3, r3, #3
 80040ee:	4413      	add	r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	440b      	add	r3, r1
 80040f4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80040f8:	2200      	movs	r2, #0
 80040fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80040fc:	7bfa      	ldrb	r2, [r7, #15]
 80040fe:	6879      	ldr	r1, [r7, #4]
 8004100:	4613      	mov	r3, r2
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	4413      	add	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	440b      	add	r3, r1
 800410a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800410e:	7bfa      	ldrb	r2, [r7, #15]
 8004110:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004112:	7bfa      	ldrb	r2, [r7, #15]
 8004114:	6879      	ldr	r1, [r7, #4]
 8004116:	4613      	mov	r3, r2
 8004118:	00db      	lsls	r3, r3, #3
 800411a:	4413      	add	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	440b      	add	r3, r1
 8004120:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004124:	2200      	movs	r2, #0
 8004126:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004128:	7bfa      	ldrb	r2, [r7, #15]
 800412a:	6879      	ldr	r1, [r7, #4]
 800412c:	4613      	mov	r3, r2
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	4413      	add	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	440b      	add	r3, r1
 8004136:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800413a:	2200      	movs	r2, #0
 800413c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800413e:	7bfa      	ldrb	r2, [r7, #15]
 8004140:	6879      	ldr	r1, [r7, #4]
 8004142:	4613      	mov	r3, r2
 8004144:	00db      	lsls	r3, r3, #3
 8004146:	4413      	add	r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	440b      	add	r3, r1
 800414c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004150:	2200      	movs	r2, #0
 8004152:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004154:	7bfa      	ldrb	r2, [r7, #15]
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	4613      	mov	r3, r2
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	4413      	add	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	440b      	add	r3, r1
 8004162:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004166:	2200      	movs	r2, #0
 8004168:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800416a:	7bfb      	ldrb	r3, [r7, #15]
 800416c:	3301      	adds	r3, #1
 800416e:	73fb      	strb	r3, [r7, #15]
 8004170:	7bfa      	ldrb	r2, [r7, #15]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	429a      	cmp	r2, r3
 8004178:	d3b5      	bcc.n	80040e6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	603b      	str	r3, [r7, #0]
 8004180:	687e      	ldr	r6, [r7, #4]
 8004182:	466d      	mov	r5, sp
 8004184:	f106 0410 	add.w	r4, r6, #16
 8004188:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800418a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800418c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800418e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004190:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004194:	e885 0003 	stmia.w	r5, {r0, r1}
 8004198:	1d33      	adds	r3, r6, #4
 800419a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800419c:	6838      	ldr	r0, [r7, #0]
 800419e:	f008 f915 	bl	800c3cc <USB_DevInit>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d005      	beq.n	80041b4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2202      	movs	r2, #2
 80041ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e014      	b.n	80041de <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d102      	bne.n	80041d2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 f80b 	bl	80041e8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f008 fad3 	bl	800c782 <USB_DevDisconnect>

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080041e8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004216:	4b05      	ldr	r3, [pc, #20]	; (800422c <HAL_PCDEx_ActivateLPM+0x44>)
 8004218:	4313      	orrs	r3, r2
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	10000003 	.word	0x10000003

08004230 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004238:	4b19      	ldr	r3, [pc, #100]	; (80042a0 <HAL_PWREx_ConfigSupply+0x70>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f003 0304 	and.w	r3, r3, #4
 8004240:	2b04      	cmp	r3, #4
 8004242:	d00a      	beq.n	800425a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004244:	4b16      	ldr	r3, [pc, #88]	; (80042a0 <HAL_PWREx_ConfigSupply+0x70>)
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	429a      	cmp	r2, r3
 8004250:	d001      	beq.n	8004256 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e01f      	b.n	8004296 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004256:	2300      	movs	r3, #0
 8004258:	e01d      	b.n	8004296 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800425a:	4b11      	ldr	r3, [pc, #68]	; (80042a0 <HAL_PWREx_ConfigSupply+0x70>)
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	f023 0207 	bic.w	r2, r3, #7
 8004262:	490f      	ldr	r1, [pc, #60]	; (80042a0 <HAL_PWREx_ConfigSupply+0x70>)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4313      	orrs	r3, r2
 8004268:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800426a:	f7fe f9d5 	bl	8002618 <HAL_GetTick>
 800426e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004270:	e009      	b.n	8004286 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004272:	f7fe f9d1 	bl	8002618 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004280:	d901      	bls.n	8004286 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e007      	b.n	8004296 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004286:	4b06      	ldr	r3, [pc, #24]	; (80042a0 <HAL_PWREx_ConfigSupply+0x70>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800428e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004292:	d1ee      	bne.n	8004272 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	58024800 	.word	0x58024800

080042a4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80042a8:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	4a04      	ldr	r2, [pc, #16]	; (80042c0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80042ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042b2:	60d3      	str	r3, [r2, #12]
}
 80042b4:	bf00      	nop
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	58024800 	.word	0x58024800

080042c4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af02      	add	r7, sp, #8
 80042ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80042cc:	f7fe f9a4 	bl	8002618 <HAL_GetTick>
 80042d0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d101      	bne.n	80042dc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e05f      	b.n	800439c <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d107      	bne.n	80042f8 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f7fd fc5d 	bl	8001ba8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80042ee:	f241 3188 	movw	r1, #5000	; 0x1388
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f85a 	bl	80043ac <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	3b01      	subs	r3, #1
 8004308:	021a      	lsls	r2, r3, #8
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	430a      	orrs	r2, r1
 8004310:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	2120      	movs	r1, #32
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f852 	bl	80043c8 <QSPI_WaitFlagStateUntilTimeout>
 8004324:	4603      	mov	r3, r0
 8004326:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004328:	7afb      	ldrb	r3, [r7, #11]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d135      	bne.n	800439a <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	4b1b      	ldr	r3, [pc, #108]	; (80043a4 <HAL_QSPI_Init+0xe0>)
 8004336:	4013      	ands	r3, r2
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6852      	ldr	r2, [r2, #4]
 800433c:	0611      	lsls	r1, r2, #24
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	68d2      	ldr	r2, [r2, #12]
 8004342:	4311      	orrs	r1, r2
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	69d2      	ldr	r2, [r2, #28]
 8004348:	4311      	orrs	r1, r2
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	6a12      	ldr	r2, [r2, #32]
 800434e:	4311      	orrs	r1, r2
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6812      	ldr	r2, [r2, #0]
 8004354:	430b      	orrs	r3, r1
 8004356:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	4b12      	ldr	r3, [pc, #72]	; (80043a8 <HAL_QSPI_Init+0xe4>)
 8004360:	4013      	ands	r3, r2
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	6912      	ldr	r2, [r2, #16]
 8004366:	0411      	lsls	r1, r2, #16
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	6952      	ldr	r2, [r2, #20]
 800436c:	4311      	orrs	r1, r2
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	6992      	ldr	r2, [r2, #24]
 8004372:	4311      	orrs	r1, r2
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	6812      	ldr	r2, [r2, #0]
 8004378:	430b      	orrs	r3, r1
 800437a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f042 0201 	orr.w	r2, r2, #1
 800438a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800439a:	7afb      	ldrb	r3, [r7, #11]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	00ffff2f 	.word	0x00ffff2f
 80043a8:	ffe0f8fe 	.word	0xffe0f8fe

080043ac <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	649a      	str	r2, [r3, #72]	; 0x48
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	603b      	str	r3, [r7, #0]
 80043d4:	4613      	mov	r3, r2
 80043d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80043d8:	e01a      	b.n	8004410 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043e0:	d016      	beq.n	8004410 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043e2:	f7fe f919 	bl	8002618 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d302      	bcc.n	80043f8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10b      	bne.n	8004410 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2204      	movs	r2, #4
 80043fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004404:	f043 0201 	orr.w	r2, r3, #1
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e00e      	b.n	800442e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689a      	ldr	r2, [r3, #8]
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	4013      	ands	r3, r2
 800441a:	2b00      	cmp	r3, #0
 800441c:	bf14      	ite	ne
 800441e:	2301      	movne	r3, #1
 8004420:	2300      	moveq	r3, #0
 8004422:	b2db      	uxtb	r3, r3
 8004424:	461a      	mov	r2, r3
 8004426:	79fb      	ldrb	r3, [r7, #7]
 8004428:	429a      	cmp	r2, r3
 800442a:	d1d6      	bne.n	80043da <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
	...

08004438 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b08c      	sub	sp, #48	; 0x30
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d102      	bne.n	800444c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	f000 bc48 	b.w	8004cdc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 8088 	beq.w	800456a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800445a:	4b99      	ldr	r3, [pc, #612]	; (80046c0 <HAL_RCC_OscConfig+0x288>)
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004462:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004464:	4b96      	ldr	r3, [pc, #600]	; (80046c0 <HAL_RCC_OscConfig+0x288>)
 8004466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004468:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800446a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800446c:	2b10      	cmp	r3, #16
 800446e:	d007      	beq.n	8004480 <HAL_RCC_OscConfig+0x48>
 8004470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004472:	2b18      	cmp	r3, #24
 8004474:	d111      	bne.n	800449a <HAL_RCC_OscConfig+0x62>
 8004476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004478:	f003 0303 	and.w	r3, r3, #3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d10c      	bne.n	800449a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004480:	4b8f      	ldr	r3, [pc, #572]	; (80046c0 <HAL_RCC_OscConfig+0x288>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d06d      	beq.n	8004568 <HAL_RCC_OscConfig+0x130>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d169      	bne.n	8004568 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	f000 bc21 	b.w	8004cdc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a2:	d106      	bne.n	80044b2 <HAL_RCC_OscConfig+0x7a>
 80044a4:	4b86      	ldr	r3, [pc, #536]	; (80046c0 <HAL_RCC_OscConfig+0x288>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a85      	ldr	r2, [pc, #532]	; (80046c0 <HAL_RCC_OscConfig+0x288>)
 80044aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ae:	6013      	str	r3, [r2, #0]
 80044b0:	e02e      	b.n	8004510 <HAL_RCC_OscConfig+0xd8>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10c      	bne.n	80044d4 <HAL_RCC_OscConfig+0x9c>
 80044ba:	4b81      	ldr	r3, [pc, #516]	; (80046c0 <HAL_RCC_OscConfig+0x288>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a80      	ldr	r2, [pc, #512]	; (80046c0 <HAL_RCC_OscConfig+0x288>)
 80044c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044c4:	6013      	str	r3, [r2, #0]
 80044c6:	4b7e      	ldr	r3, [pc, #504]	; (80046c0 <HAL_RCC_OscConfig+0x288>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a7d      	ldr	r2, [pc, #500]	; (80046c0 <HAL_RCC_OscConfig+0x288>)
 80044cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044d0:	6013      	str	r3, [r2, #0]
 80044d2:	e01d      	b.n	8004510 <HAL_RCC_OscConfig+0xd8>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044dc:	d10c      	bne.n	80044f8 <HAL_RCC_OscConfig+0xc0>
 80044de:	4b78      	ldr	r3, [pc, #480]	; (80046c0 <HAL_RCC_OscConfig+0x288>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a77      	ldr	r2, [pc, #476]	; (80046c0 <HAL_RCC_OscConfig+0x288>)
 80044e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044e8:	6013      	str	r3, [r2, #0]
 80044ea:	4b75      	ldr	r3, [pc, #468]	; (80046c0 <HAL_RCC_OscConfig+0x288>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a74      	ldr	r2, [pc, #464]	; (80046c0 <HAL_RCC_OscConfig+0x288>)
 80044f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044f4:	6013      	str	r3, [r2, #0]
 80044f6:	e00b      	b.n	8004510 <HAL_RCC_OscConfig+0xd8>
 80044f8:	4b71      	ldr	r3, [pc, #452]	; (80046c0 <HAL_RCC_OscConfig+0x288>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a70      	ldr	r2, [pc, #448]	; (80046c0 <HAL_RCC_OscConfig+0x288>)
 80044fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004502:	6013      	str	r3, [r2, #0]
 8004504:	4b6e      	ldr	r3, [pc, #440]	; (80046c0 <HAL_RCC_OscConfig+0x288>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a6d      	ldr	r2, [pc, #436]	; (80046c0 <HAL_RCC_OscConfig+0x288>)
 800450a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800450e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d013      	beq.n	8004540 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004518:	f7fe f87e 	bl	8002618 <HAL_GetTick>
 800451c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004520:	f7fe f87a 	bl	8002618 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b64      	cmp	r3, #100	; 0x64
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e3d4      	b.n	8004cdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004532:	4b63      	ldr	r3, [pc, #396]	; (80046c0 <HAL_RCC_OscConfig+0x288>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0f0      	beq.n	8004520 <HAL_RCC_OscConfig+0xe8>
 800453e:	e014      	b.n	800456a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004540:	f7fe f86a 	bl	8002618 <HAL_GetTick>
 8004544:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004548:	f7fe f866 	bl	8002618 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b64      	cmp	r3, #100	; 0x64
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e3c0      	b.n	8004cdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800455a:	4b59      	ldr	r3, [pc, #356]	; (80046c0 <HAL_RCC_OscConfig+0x288>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1f0      	bne.n	8004548 <HAL_RCC_OscConfig+0x110>
 8004566:	e000      	b.n	800456a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	f000 80ca 	beq.w	800470c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004578:	4b51      	ldr	r3, [pc, #324]	; (80046c0 <HAL_RCC_OscConfig+0x288>)
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004580:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004582:	4b4f      	ldr	r3, [pc, #316]	; (80046c0 <HAL_RCC_OscConfig+0x288>)
 8004584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004586:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d007      	beq.n	800459e <HAL_RCC_OscConfig+0x166>
 800458e:	6a3b      	ldr	r3, [r7, #32]
 8004590:	2b18      	cmp	r3, #24
 8004592:	d156      	bne.n	8004642 <HAL_RCC_OscConfig+0x20a>
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	f003 0303 	and.w	r3, r3, #3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d151      	bne.n	8004642 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800459e:	4b48      	ldr	r3, [pc, #288]	; (80046c0 <HAL_RCC_OscConfig+0x288>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0304 	and.w	r3, r3, #4
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d005      	beq.n	80045b6 <HAL_RCC_OscConfig+0x17e>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e392      	b.n	8004cdc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80045b6:	4b42      	ldr	r3, [pc, #264]	; (80046c0 <HAL_RCC_OscConfig+0x288>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f023 0219 	bic.w	r2, r3, #25
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	493f      	ldr	r1, [pc, #252]	; (80046c0 <HAL_RCC_OscConfig+0x288>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c8:	f7fe f826 	bl	8002618 <HAL_GetTick>
 80045cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045d0:	f7fe f822 	bl	8002618 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e37c      	b.n	8004cdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045e2:	4b37      	ldr	r3, [pc, #220]	; (80046c0 <HAL_RCC_OscConfig+0x288>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0304 	and.w	r3, r3, #4
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d0f0      	beq.n	80045d0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ee:	f7fe f843 	bl	8002678 <HAL_GetREVID>
 80045f2:	4603      	mov	r3, r0
 80045f4:	f241 0203 	movw	r2, #4099	; 0x1003
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d817      	bhi.n	800462c <HAL_RCC_OscConfig+0x1f4>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	2b40      	cmp	r3, #64	; 0x40
 8004602:	d108      	bne.n	8004616 <HAL_RCC_OscConfig+0x1de>
 8004604:	4b2e      	ldr	r3, [pc, #184]	; (80046c0 <HAL_RCC_OscConfig+0x288>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800460c:	4a2c      	ldr	r2, [pc, #176]	; (80046c0 <HAL_RCC_OscConfig+0x288>)
 800460e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004612:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004614:	e07a      	b.n	800470c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004616:	4b2a      	ldr	r3, [pc, #168]	; (80046c0 <HAL_RCC_OscConfig+0x288>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	031b      	lsls	r3, r3, #12
 8004624:	4926      	ldr	r1, [pc, #152]	; (80046c0 <HAL_RCC_OscConfig+0x288>)
 8004626:	4313      	orrs	r3, r2
 8004628:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800462a:	e06f      	b.n	800470c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800462c:	4b24      	ldr	r3, [pc, #144]	; (80046c0 <HAL_RCC_OscConfig+0x288>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	061b      	lsls	r3, r3, #24
 800463a:	4921      	ldr	r1, [pc, #132]	; (80046c0 <HAL_RCC_OscConfig+0x288>)
 800463c:	4313      	orrs	r3, r2
 800463e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004640:	e064      	b.n	800470c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d047      	beq.n	80046da <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800464a:	4b1d      	ldr	r3, [pc, #116]	; (80046c0 <HAL_RCC_OscConfig+0x288>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f023 0219 	bic.w	r2, r3, #25
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	491a      	ldr	r1, [pc, #104]	; (80046c0 <HAL_RCC_OscConfig+0x288>)
 8004658:	4313      	orrs	r3, r2
 800465a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800465c:	f7fd ffdc 	bl	8002618 <HAL_GetTick>
 8004660:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004662:	e008      	b.n	8004676 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004664:	f7fd ffd8 	bl	8002618 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e332      	b.n	8004cdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004676:	4b12      	ldr	r3, [pc, #72]	; (80046c0 <HAL_RCC_OscConfig+0x288>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0304 	and.w	r3, r3, #4
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0f0      	beq.n	8004664 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004682:	f7fd fff9 	bl	8002678 <HAL_GetREVID>
 8004686:	4603      	mov	r3, r0
 8004688:	f241 0203 	movw	r2, #4099	; 0x1003
 800468c:	4293      	cmp	r3, r2
 800468e:	d819      	bhi.n	80046c4 <HAL_RCC_OscConfig+0x28c>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	2b40      	cmp	r3, #64	; 0x40
 8004696:	d108      	bne.n	80046aa <HAL_RCC_OscConfig+0x272>
 8004698:	4b09      	ldr	r3, [pc, #36]	; (80046c0 <HAL_RCC_OscConfig+0x288>)
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80046a0:	4a07      	ldr	r2, [pc, #28]	; (80046c0 <HAL_RCC_OscConfig+0x288>)
 80046a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046a6:	6053      	str	r3, [r2, #4]
 80046a8:	e030      	b.n	800470c <HAL_RCC_OscConfig+0x2d4>
 80046aa:	4b05      	ldr	r3, [pc, #20]	; (80046c0 <HAL_RCC_OscConfig+0x288>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	031b      	lsls	r3, r3, #12
 80046b8:	4901      	ldr	r1, [pc, #4]	; (80046c0 <HAL_RCC_OscConfig+0x288>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	604b      	str	r3, [r1, #4]
 80046be:	e025      	b.n	800470c <HAL_RCC_OscConfig+0x2d4>
 80046c0:	58024400 	.word	0x58024400
 80046c4:	4b9a      	ldr	r3, [pc, #616]	; (8004930 <HAL_RCC_OscConfig+0x4f8>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	061b      	lsls	r3, r3, #24
 80046d2:	4997      	ldr	r1, [pc, #604]	; (8004930 <HAL_RCC_OscConfig+0x4f8>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	604b      	str	r3, [r1, #4]
 80046d8:	e018      	b.n	800470c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046da:	4b95      	ldr	r3, [pc, #596]	; (8004930 <HAL_RCC_OscConfig+0x4f8>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a94      	ldr	r2, [pc, #592]	; (8004930 <HAL_RCC_OscConfig+0x4f8>)
 80046e0:	f023 0301 	bic.w	r3, r3, #1
 80046e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e6:	f7fd ff97 	bl	8002618 <HAL_GetTick>
 80046ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80046ec:	e008      	b.n	8004700 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046ee:	f7fd ff93 	bl	8002618 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e2ed      	b.n	8004cdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004700:	4b8b      	ldr	r3, [pc, #556]	; (8004930 <HAL_RCC_OscConfig+0x4f8>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0304 	and.w	r3, r3, #4
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1f0      	bne.n	80046ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0310 	and.w	r3, r3, #16
 8004714:	2b00      	cmp	r3, #0
 8004716:	f000 80a9 	beq.w	800486c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800471a:	4b85      	ldr	r3, [pc, #532]	; (8004930 <HAL_RCC_OscConfig+0x4f8>)
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004722:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004724:	4b82      	ldr	r3, [pc, #520]	; (8004930 <HAL_RCC_OscConfig+0x4f8>)
 8004726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004728:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	2b08      	cmp	r3, #8
 800472e:	d007      	beq.n	8004740 <HAL_RCC_OscConfig+0x308>
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	2b18      	cmp	r3, #24
 8004734:	d13a      	bne.n	80047ac <HAL_RCC_OscConfig+0x374>
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f003 0303 	and.w	r3, r3, #3
 800473c:	2b01      	cmp	r3, #1
 800473e:	d135      	bne.n	80047ac <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004740:	4b7b      	ldr	r3, [pc, #492]	; (8004930 <HAL_RCC_OscConfig+0x4f8>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004748:	2b00      	cmp	r3, #0
 800474a:	d005      	beq.n	8004758 <HAL_RCC_OscConfig+0x320>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	69db      	ldr	r3, [r3, #28]
 8004750:	2b80      	cmp	r3, #128	; 0x80
 8004752:	d001      	beq.n	8004758 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e2c1      	b.n	8004cdc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004758:	f7fd ff8e 	bl	8002678 <HAL_GetREVID>
 800475c:	4603      	mov	r3, r0
 800475e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004762:	4293      	cmp	r3, r2
 8004764:	d817      	bhi.n	8004796 <HAL_RCC_OscConfig+0x35e>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	2b20      	cmp	r3, #32
 800476c:	d108      	bne.n	8004780 <HAL_RCC_OscConfig+0x348>
 800476e:	4b70      	ldr	r3, [pc, #448]	; (8004930 <HAL_RCC_OscConfig+0x4f8>)
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004776:	4a6e      	ldr	r2, [pc, #440]	; (8004930 <HAL_RCC_OscConfig+0x4f8>)
 8004778:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800477c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800477e:	e075      	b.n	800486c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004780:	4b6b      	ldr	r3, [pc, #428]	; (8004930 <HAL_RCC_OscConfig+0x4f8>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	069b      	lsls	r3, r3, #26
 800478e:	4968      	ldr	r1, [pc, #416]	; (8004930 <HAL_RCC_OscConfig+0x4f8>)
 8004790:	4313      	orrs	r3, r2
 8004792:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004794:	e06a      	b.n	800486c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004796:	4b66      	ldr	r3, [pc, #408]	; (8004930 <HAL_RCC_OscConfig+0x4f8>)
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	061b      	lsls	r3, r3, #24
 80047a4:	4962      	ldr	r1, [pc, #392]	; (8004930 <HAL_RCC_OscConfig+0x4f8>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80047aa:	e05f      	b.n	800486c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d042      	beq.n	800483a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80047b4:	4b5e      	ldr	r3, [pc, #376]	; (8004930 <HAL_RCC_OscConfig+0x4f8>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a5d      	ldr	r2, [pc, #372]	; (8004930 <HAL_RCC_OscConfig+0x4f8>)
 80047ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c0:	f7fd ff2a 	bl	8002618 <HAL_GetTick>
 80047c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047c6:	e008      	b.n	80047da <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80047c8:	f7fd ff26 	bl	8002618 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e280      	b.n	8004cdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047da:	4b55      	ldr	r3, [pc, #340]	; (8004930 <HAL_RCC_OscConfig+0x4f8>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d0f0      	beq.n	80047c8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80047e6:	f7fd ff47 	bl	8002678 <HAL_GetREVID>
 80047ea:	4603      	mov	r3, r0
 80047ec:	f241 0203 	movw	r2, #4099	; 0x1003
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d817      	bhi.n	8004824 <HAL_RCC_OscConfig+0x3ec>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	2b20      	cmp	r3, #32
 80047fa:	d108      	bne.n	800480e <HAL_RCC_OscConfig+0x3d6>
 80047fc:	4b4c      	ldr	r3, [pc, #304]	; (8004930 <HAL_RCC_OscConfig+0x4f8>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004804:	4a4a      	ldr	r2, [pc, #296]	; (8004930 <HAL_RCC_OscConfig+0x4f8>)
 8004806:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800480a:	6053      	str	r3, [r2, #4]
 800480c:	e02e      	b.n	800486c <HAL_RCC_OscConfig+0x434>
 800480e:	4b48      	ldr	r3, [pc, #288]	; (8004930 <HAL_RCC_OscConfig+0x4f8>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	069b      	lsls	r3, r3, #26
 800481c:	4944      	ldr	r1, [pc, #272]	; (8004930 <HAL_RCC_OscConfig+0x4f8>)
 800481e:	4313      	orrs	r3, r2
 8004820:	604b      	str	r3, [r1, #4]
 8004822:	e023      	b.n	800486c <HAL_RCC_OscConfig+0x434>
 8004824:	4b42      	ldr	r3, [pc, #264]	; (8004930 <HAL_RCC_OscConfig+0x4f8>)
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a1b      	ldr	r3, [r3, #32]
 8004830:	061b      	lsls	r3, r3, #24
 8004832:	493f      	ldr	r1, [pc, #252]	; (8004930 <HAL_RCC_OscConfig+0x4f8>)
 8004834:	4313      	orrs	r3, r2
 8004836:	60cb      	str	r3, [r1, #12]
 8004838:	e018      	b.n	800486c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800483a:	4b3d      	ldr	r3, [pc, #244]	; (8004930 <HAL_RCC_OscConfig+0x4f8>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a3c      	ldr	r2, [pc, #240]	; (8004930 <HAL_RCC_OscConfig+0x4f8>)
 8004840:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004844:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004846:	f7fd fee7 	bl	8002618 <HAL_GetTick>
 800484a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800484c:	e008      	b.n	8004860 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800484e:	f7fd fee3 	bl	8002618 <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	2b02      	cmp	r3, #2
 800485a:	d901      	bls.n	8004860 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e23d      	b.n	8004cdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004860:	4b33      	ldr	r3, [pc, #204]	; (8004930 <HAL_RCC_OscConfig+0x4f8>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1f0      	bne.n	800484e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0308 	and.w	r3, r3, #8
 8004874:	2b00      	cmp	r3, #0
 8004876:	d036      	beq.n	80048e6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d019      	beq.n	80048b4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004880:	4b2b      	ldr	r3, [pc, #172]	; (8004930 <HAL_RCC_OscConfig+0x4f8>)
 8004882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004884:	4a2a      	ldr	r2, [pc, #168]	; (8004930 <HAL_RCC_OscConfig+0x4f8>)
 8004886:	f043 0301 	orr.w	r3, r3, #1
 800488a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800488c:	f7fd fec4 	bl	8002618 <HAL_GetTick>
 8004890:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004894:	f7fd fec0 	bl	8002618 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e21a      	b.n	8004cdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80048a6:	4b22      	ldr	r3, [pc, #136]	; (8004930 <HAL_RCC_OscConfig+0x4f8>)
 80048a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0f0      	beq.n	8004894 <HAL_RCC_OscConfig+0x45c>
 80048b2:	e018      	b.n	80048e6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048b4:	4b1e      	ldr	r3, [pc, #120]	; (8004930 <HAL_RCC_OscConfig+0x4f8>)
 80048b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048b8:	4a1d      	ldr	r2, [pc, #116]	; (8004930 <HAL_RCC_OscConfig+0x4f8>)
 80048ba:	f023 0301 	bic.w	r3, r3, #1
 80048be:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c0:	f7fd feaa 	bl	8002618 <HAL_GetTick>
 80048c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048c8:	f7fd fea6 	bl	8002618 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e200      	b.n	8004cdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80048da:	4b15      	ldr	r3, [pc, #84]	; (8004930 <HAL_RCC_OscConfig+0x4f8>)
 80048dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1f0      	bne.n	80048c8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0320 	and.w	r3, r3, #32
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d039      	beq.n	8004966 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d01c      	beq.n	8004934 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048fa:	4b0d      	ldr	r3, [pc, #52]	; (8004930 <HAL_RCC_OscConfig+0x4f8>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a0c      	ldr	r2, [pc, #48]	; (8004930 <HAL_RCC_OscConfig+0x4f8>)
 8004900:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004904:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004906:	f7fd fe87 	bl	8002618 <HAL_GetTick>
 800490a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800490c:	e008      	b.n	8004920 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800490e:	f7fd fe83 	bl	8002618 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e1dd      	b.n	8004cdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004920:	4b03      	ldr	r3, [pc, #12]	; (8004930 <HAL_RCC_OscConfig+0x4f8>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d0f0      	beq.n	800490e <HAL_RCC_OscConfig+0x4d6>
 800492c:	e01b      	b.n	8004966 <HAL_RCC_OscConfig+0x52e>
 800492e:	bf00      	nop
 8004930:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004934:	4b9b      	ldr	r3, [pc, #620]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a9a      	ldr	r2, [pc, #616]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 800493a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800493e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004940:	f7fd fe6a 	bl	8002618 <HAL_GetTick>
 8004944:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004948:	f7fd fe66 	bl	8002618 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e1c0      	b.n	8004cdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800495a:	4b92      	ldr	r3, [pc, #584]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1f0      	bne.n	8004948 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0304 	and.w	r3, r3, #4
 800496e:	2b00      	cmp	r3, #0
 8004970:	f000 8081 	beq.w	8004a76 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004974:	4b8c      	ldr	r3, [pc, #560]	; (8004ba8 <HAL_RCC_OscConfig+0x770>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a8b      	ldr	r2, [pc, #556]	; (8004ba8 <HAL_RCC_OscConfig+0x770>)
 800497a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800497e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004980:	f7fd fe4a 	bl	8002618 <HAL_GetTick>
 8004984:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004988:	f7fd fe46 	bl	8002618 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b64      	cmp	r3, #100	; 0x64
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e1a0      	b.n	8004cdc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800499a:	4b83      	ldr	r3, [pc, #524]	; (8004ba8 <HAL_RCC_OscConfig+0x770>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0f0      	beq.n	8004988 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d106      	bne.n	80049bc <HAL_RCC_OscConfig+0x584>
 80049ae:	4b7d      	ldr	r3, [pc, #500]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 80049b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b2:	4a7c      	ldr	r2, [pc, #496]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 80049b4:	f043 0301 	orr.w	r3, r3, #1
 80049b8:	6713      	str	r3, [r2, #112]	; 0x70
 80049ba:	e02d      	b.n	8004a18 <HAL_RCC_OscConfig+0x5e0>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10c      	bne.n	80049de <HAL_RCC_OscConfig+0x5a6>
 80049c4:	4b77      	ldr	r3, [pc, #476]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 80049c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c8:	4a76      	ldr	r2, [pc, #472]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 80049ca:	f023 0301 	bic.w	r3, r3, #1
 80049ce:	6713      	str	r3, [r2, #112]	; 0x70
 80049d0:	4b74      	ldr	r3, [pc, #464]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 80049d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d4:	4a73      	ldr	r2, [pc, #460]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 80049d6:	f023 0304 	bic.w	r3, r3, #4
 80049da:	6713      	str	r3, [r2, #112]	; 0x70
 80049dc:	e01c      	b.n	8004a18 <HAL_RCC_OscConfig+0x5e0>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	2b05      	cmp	r3, #5
 80049e4:	d10c      	bne.n	8004a00 <HAL_RCC_OscConfig+0x5c8>
 80049e6:	4b6f      	ldr	r3, [pc, #444]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 80049e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ea:	4a6e      	ldr	r2, [pc, #440]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 80049ec:	f043 0304 	orr.w	r3, r3, #4
 80049f0:	6713      	str	r3, [r2, #112]	; 0x70
 80049f2:	4b6c      	ldr	r3, [pc, #432]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 80049f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f6:	4a6b      	ldr	r2, [pc, #428]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 80049f8:	f043 0301 	orr.w	r3, r3, #1
 80049fc:	6713      	str	r3, [r2, #112]	; 0x70
 80049fe:	e00b      	b.n	8004a18 <HAL_RCC_OscConfig+0x5e0>
 8004a00:	4b68      	ldr	r3, [pc, #416]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 8004a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a04:	4a67      	ldr	r2, [pc, #412]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 8004a06:	f023 0301 	bic.w	r3, r3, #1
 8004a0a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a0c:	4b65      	ldr	r3, [pc, #404]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 8004a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a10:	4a64      	ldr	r2, [pc, #400]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 8004a12:	f023 0304 	bic.w	r3, r3, #4
 8004a16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d015      	beq.n	8004a4c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a20:	f7fd fdfa 	bl	8002618 <HAL_GetTick>
 8004a24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a26:	e00a      	b.n	8004a3e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a28:	f7fd fdf6 	bl	8002618 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e14e      	b.n	8004cdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a3e:	4b59      	ldr	r3, [pc, #356]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 8004a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0ee      	beq.n	8004a28 <HAL_RCC_OscConfig+0x5f0>
 8004a4a:	e014      	b.n	8004a76 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a4c:	f7fd fde4 	bl	8002618 <HAL_GetTick>
 8004a50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a52:	e00a      	b.n	8004a6a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a54:	f7fd fde0 	bl	8002618 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e138      	b.n	8004cdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a6a:	4b4e      	ldr	r3, [pc, #312]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 8004a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1ee      	bne.n	8004a54 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f000 812d 	beq.w	8004cda <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004a80:	4b48      	ldr	r3, [pc, #288]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a88:	2b18      	cmp	r3, #24
 8004a8a:	f000 80bd 	beq.w	8004c08 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	f040 809e 	bne.w	8004bd4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a98:	4b42      	ldr	r3, [pc, #264]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a41      	ldr	r2, [pc, #260]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 8004a9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa4:	f7fd fdb8 	bl	8002618 <HAL_GetTick>
 8004aa8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aac:	f7fd fdb4 	bl	8002618 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e10e      	b.n	8004cdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004abe:	4b39      	ldr	r3, [pc, #228]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1f0      	bne.n	8004aac <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004aca:	4b36      	ldr	r3, [pc, #216]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 8004acc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ace:	4b37      	ldr	r3, [pc, #220]	; (8004bac <HAL_RCC_OscConfig+0x774>)
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004ada:	0112      	lsls	r2, r2, #4
 8004adc:	430a      	orrs	r2, r1
 8004ade:	4931      	ldr	r1, [pc, #196]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	628b      	str	r3, [r1, #40]	; 0x28
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af2:	3b01      	subs	r3, #1
 8004af4:	025b      	lsls	r3, r3, #9
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	431a      	orrs	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afe:	3b01      	subs	r3, #1
 8004b00:	041b      	lsls	r3, r3, #16
 8004b02:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004b06:	431a      	orrs	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	061b      	lsls	r3, r3, #24
 8004b10:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b14:	4923      	ldr	r1, [pc, #140]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004b1a:	4b22      	ldr	r3, [pc, #136]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 8004b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1e:	4a21      	ldr	r2, [pc, #132]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 8004b20:	f023 0301 	bic.w	r3, r3, #1
 8004b24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004b26:	4b1f      	ldr	r3, [pc, #124]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 8004b28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b2a:	4b21      	ldr	r3, [pc, #132]	; (8004bb0 <HAL_RCC_OscConfig+0x778>)
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004b32:	00d2      	lsls	r2, r2, #3
 8004b34:	491b      	ldr	r1, [pc, #108]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004b3a:	4b1a      	ldr	r3, [pc, #104]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 8004b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3e:	f023 020c 	bic.w	r2, r3, #12
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	4917      	ldr	r1, [pc, #92]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004b4c:	4b15      	ldr	r3, [pc, #84]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 8004b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b50:	f023 0202 	bic.w	r2, r3, #2
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b58:	4912      	ldr	r1, [pc, #72]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004b5e:	4b11      	ldr	r3, [pc, #68]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 8004b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b62:	4a10      	ldr	r2, [pc, #64]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 8004b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b6a:	4b0e      	ldr	r3, [pc, #56]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 8004b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6e:	4a0d      	ldr	r2, [pc, #52]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 8004b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004b76:	4b0b      	ldr	r3, [pc, #44]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 8004b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7a:	4a0a      	ldr	r2, [pc, #40]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 8004b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004b82:	4b08      	ldr	r3, [pc, #32]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 8004b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b86:	4a07      	ldr	r2, [pc, #28]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 8004b88:	f043 0301 	orr.w	r3, r3, #1
 8004b8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b8e:	4b05      	ldr	r3, [pc, #20]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a04      	ldr	r2, [pc, #16]	; (8004ba4 <HAL_RCC_OscConfig+0x76c>)
 8004b94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b9a:	f7fd fd3d 	bl	8002618 <HAL_GetTick>
 8004b9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ba0:	e011      	b.n	8004bc6 <HAL_RCC_OscConfig+0x78e>
 8004ba2:	bf00      	nop
 8004ba4:	58024400 	.word	0x58024400
 8004ba8:	58024800 	.word	0x58024800
 8004bac:	fffffc0c 	.word	0xfffffc0c
 8004bb0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bb4:	f7fd fd30 	bl	8002618 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e08a      	b.n	8004cdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004bc6:	4b47      	ldr	r3, [pc, #284]	; (8004ce4 <HAL_RCC_OscConfig+0x8ac>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d0f0      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x77c>
 8004bd2:	e082      	b.n	8004cda <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bd4:	4b43      	ldr	r3, [pc, #268]	; (8004ce4 <HAL_RCC_OscConfig+0x8ac>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a42      	ldr	r2, [pc, #264]	; (8004ce4 <HAL_RCC_OscConfig+0x8ac>)
 8004bda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be0:	f7fd fd1a 	bl	8002618 <HAL_GetTick>
 8004be4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004be6:	e008      	b.n	8004bfa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004be8:	f7fd fd16 	bl	8002618 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e070      	b.n	8004cdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bfa:	4b3a      	ldr	r3, [pc, #232]	; (8004ce4 <HAL_RCC_OscConfig+0x8ac>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1f0      	bne.n	8004be8 <HAL_RCC_OscConfig+0x7b0>
 8004c06:	e068      	b.n	8004cda <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004c08:	4b36      	ldr	r3, [pc, #216]	; (8004ce4 <HAL_RCC_OscConfig+0x8ac>)
 8004c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004c0e:	4b35      	ldr	r3, [pc, #212]	; (8004ce4 <HAL_RCC_OscConfig+0x8ac>)
 8004c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c12:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d031      	beq.n	8004c80 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	f003 0203 	and.w	r2, r3, #3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d12a      	bne.n	8004c80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	091b      	lsrs	r3, r3, #4
 8004c2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d122      	bne.n	8004c80 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c44:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d11a      	bne.n	8004c80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	0a5b      	lsrs	r3, r3, #9
 8004c4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c56:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d111      	bne.n	8004c80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	0c1b      	lsrs	r3, r3, #16
 8004c60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c68:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d108      	bne.n	8004c80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	0e1b      	lsrs	r3, r3, #24
 8004c72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d001      	beq.n	8004c84 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e02b      	b.n	8004cdc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004c84:	4b17      	ldr	r3, [pc, #92]	; (8004ce4 <HAL_RCC_OscConfig+0x8ac>)
 8004c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c88:	08db      	lsrs	r3, r3, #3
 8004c8a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c8e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d01f      	beq.n	8004cda <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004c9a:	4b12      	ldr	r3, [pc, #72]	; (8004ce4 <HAL_RCC_OscConfig+0x8ac>)
 8004c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9e:	4a11      	ldr	r2, [pc, #68]	; (8004ce4 <HAL_RCC_OscConfig+0x8ac>)
 8004ca0:	f023 0301 	bic.w	r3, r3, #1
 8004ca4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ca6:	f7fd fcb7 	bl	8002618 <HAL_GetTick>
 8004caa:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004cac:	bf00      	nop
 8004cae:	f7fd fcb3 	bl	8002618 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d0f9      	beq.n	8004cae <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004cba:	4b0a      	ldr	r3, [pc, #40]	; (8004ce4 <HAL_RCC_OscConfig+0x8ac>)
 8004cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cbe:	4b0a      	ldr	r3, [pc, #40]	; (8004ce8 <HAL_RCC_OscConfig+0x8b0>)
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004cc6:	00d2      	lsls	r2, r2, #3
 8004cc8:	4906      	ldr	r1, [pc, #24]	; (8004ce4 <HAL_RCC_OscConfig+0x8ac>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004cce:	4b05      	ldr	r3, [pc, #20]	; (8004ce4 <HAL_RCC_OscConfig+0x8ac>)
 8004cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd2:	4a04      	ldr	r2, [pc, #16]	; (8004ce4 <HAL_RCC_OscConfig+0x8ac>)
 8004cd4:	f043 0301 	orr.w	r3, r3, #1
 8004cd8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3730      	adds	r7, #48	; 0x30
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	58024400 	.word	0x58024400
 8004ce8:	ffff0007 	.word	0xffff0007

08004cec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d101      	bne.n	8004d00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e19c      	b.n	800503a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d00:	4b8a      	ldr	r3, [pc, #552]	; (8004f2c <HAL_RCC_ClockConfig+0x240>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 030f 	and.w	r3, r3, #15
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d910      	bls.n	8004d30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d0e:	4b87      	ldr	r3, [pc, #540]	; (8004f2c <HAL_RCC_ClockConfig+0x240>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f023 020f 	bic.w	r2, r3, #15
 8004d16:	4985      	ldr	r1, [pc, #532]	; (8004f2c <HAL_RCC_ClockConfig+0x240>)
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d1e:	4b83      	ldr	r3, [pc, #524]	; (8004f2c <HAL_RCC_ClockConfig+0x240>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 030f 	and.w	r3, r3, #15
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d001      	beq.n	8004d30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e184      	b.n	800503a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d010      	beq.n	8004d5e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	691a      	ldr	r2, [r3, #16]
 8004d40:	4b7b      	ldr	r3, [pc, #492]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d908      	bls.n	8004d5e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004d4c:	4b78      	ldr	r3, [pc, #480]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	4975      	ldr	r1, [pc, #468]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0308 	and.w	r3, r3, #8
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d010      	beq.n	8004d8c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	695a      	ldr	r2, [r3, #20]
 8004d6e:	4b70      	ldr	r3, [pc, #448]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004d70:	69db      	ldr	r3, [r3, #28]
 8004d72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d908      	bls.n	8004d8c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004d7a:	4b6d      	ldr	r3, [pc, #436]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004d7c:	69db      	ldr	r3, [r3, #28]
 8004d7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	496a      	ldr	r1, [pc, #424]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0310 	and.w	r3, r3, #16
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d010      	beq.n	8004dba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	699a      	ldr	r2, [r3, #24]
 8004d9c:	4b64      	ldr	r3, [pc, #400]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004d9e:	69db      	ldr	r3, [r3, #28]
 8004da0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d908      	bls.n	8004dba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004da8:	4b61      	ldr	r3, [pc, #388]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004daa:	69db      	ldr	r3, [r3, #28]
 8004dac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	495e      	ldr	r1, [pc, #376]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0320 	and.w	r3, r3, #32
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d010      	beq.n	8004de8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	69da      	ldr	r2, [r3, #28]
 8004dca:	4b59      	ldr	r3, [pc, #356]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d908      	bls.n	8004de8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004dd6:	4b56      	ldr	r3, [pc, #344]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	4953      	ldr	r1, [pc, #332]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d010      	beq.n	8004e16 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68da      	ldr	r2, [r3, #12]
 8004df8:	4b4d      	ldr	r3, [pc, #308]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	f003 030f 	and.w	r3, r3, #15
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d908      	bls.n	8004e16 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e04:	4b4a      	ldr	r3, [pc, #296]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	f023 020f 	bic.w	r2, r3, #15
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	4947      	ldr	r1, [pc, #284]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d055      	beq.n	8004ece <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004e22:	4b43      	ldr	r3, [pc, #268]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	4940      	ldr	r1, [pc, #256]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d107      	bne.n	8004e4c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e3c:	4b3c      	ldr	r3, [pc, #240]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d121      	bne.n	8004e8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e0f6      	b.n	800503a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	2b03      	cmp	r3, #3
 8004e52:	d107      	bne.n	8004e64 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e54:	4b36      	ldr	r3, [pc, #216]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d115      	bne.n	8004e8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e0ea      	b.n	800503a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d107      	bne.n	8004e7c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e6c:	4b30      	ldr	r3, [pc, #192]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d109      	bne.n	8004e8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e0de      	b.n	800503a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e7c:	4b2c      	ldr	r3, [pc, #176]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0304 	and.w	r3, r3, #4
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d101      	bne.n	8004e8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e0d6      	b.n	800503a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e8c:	4b28      	ldr	r3, [pc, #160]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	f023 0207 	bic.w	r2, r3, #7
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	4925      	ldr	r1, [pc, #148]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e9e:	f7fd fbbb 	bl	8002618 <HAL_GetTick>
 8004ea2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ea4:	e00a      	b.n	8004ebc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ea6:	f7fd fbb7 	bl	8002618 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d901      	bls.n	8004ebc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e0be      	b.n	800503a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ebc:	4b1c      	ldr	r3, [pc, #112]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	00db      	lsls	r3, r3, #3
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d1eb      	bne.n	8004ea6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d010      	beq.n	8004efc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68da      	ldr	r2, [r3, #12]
 8004ede:	4b14      	ldr	r3, [pc, #80]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	f003 030f 	and.w	r3, r3, #15
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d208      	bcs.n	8004efc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004eea:	4b11      	ldr	r3, [pc, #68]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	f023 020f 	bic.w	r2, r3, #15
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	490e      	ldr	r1, [pc, #56]	; (8004f30 <HAL_RCC_ClockConfig+0x244>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004efc:	4b0b      	ldr	r3, [pc, #44]	; (8004f2c <HAL_RCC_ClockConfig+0x240>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 030f 	and.w	r3, r3, #15
 8004f04:	683a      	ldr	r2, [r7, #0]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d214      	bcs.n	8004f34 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f0a:	4b08      	ldr	r3, [pc, #32]	; (8004f2c <HAL_RCC_ClockConfig+0x240>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f023 020f 	bic.w	r2, r3, #15
 8004f12:	4906      	ldr	r1, [pc, #24]	; (8004f2c <HAL_RCC_ClockConfig+0x240>)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f1a:	4b04      	ldr	r3, [pc, #16]	; (8004f2c <HAL_RCC_ClockConfig+0x240>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 030f 	and.w	r3, r3, #15
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d005      	beq.n	8004f34 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e086      	b.n	800503a <HAL_RCC_ClockConfig+0x34e>
 8004f2c:	52002000 	.word	0x52002000
 8004f30:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0304 	and.w	r3, r3, #4
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d010      	beq.n	8004f62 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	691a      	ldr	r2, [r3, #16]
 8004f44:	4b3f      	ldr	r3, [pc, #252]	; (8005044 <HAL_RCC_ClockConfig+0x358>)
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d208      	bcs.n	8004f62 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f50:	4b3c      	ldr	r3, [pc, #240]	; (8005044 <HAL_RCC_ClockConfig+0x358>)
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	4939      	ldr	r1, [pc, #228]	; (8005044 <HAL_RCC_ClockConfig+0x358>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0308 	and.w	r3, r3, #8
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d010      	beq.n	8004f90 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	695a      	ldr	r2, [r3, #20]
 8004f72:	4b34      	ldr	r3, [pc, #208]	; (8005044 <HAL_RCC_ClockConfig+0x358>)
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d208      	bcs.n	8004f90 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f7e:	4b31      	ldr	r3, [pc, #196]	; (8005044 <HAL_RCC_ClockConfig+0x358>)
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	492e      	ldr	r1, [pc, #184]	; (8005044 <HAL_RCC_ClockConfig+0x358>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0310 	and.w	r3, r3, #16
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d010      	beq.n	8004fbe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	699a      	ldr	r2, [r3, #24]
 8004fa0:	4b28      	ldr	r3, [pc, #160]	; (8005044 <HAL_RCC_ClockConfig+0x358>)
 8004fa2:	69db      	ldr	r3, [r3, #28]
 8004fa4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d208      	bcs.n	8004fbe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004fac:	4b25      	ldr	r3, [pc, #148]	; (8005044 <HAL_RCC_ClockConfig+0x358>)
 8004fae:	69db      	ldr	r3, [r3, #28]
 8004fb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	4922      	ldr	r1, [pc, #136]	; (8005044 <HAL_RCC_ClockConfig+0x358>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0320 	and.w	r3, r3, #32
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d010      	beq.n	8004fec <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	69da      	ldr	r2, [r3, #28]
 8004fce:	4b1d      	ldr	r3, [pc, #116]	; (8005044 <HAL_RCC_ClockConfig+0x358>)
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d208      	bcs.n	8004fec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004fda:	4b1a      	ldr	r3, [pc, #104]	; (8005044 <HAL_RCC_ClockConfig+0x358>)
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	4917      	ldr	r1, [pc, #92]	; (8005044 <HAL_RCC_ClockConfig+0x358>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004fec:	f000 f834 	bl	8005058 <HAL_RCC_GetSysClockFreq>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	4b14      	ldr	r3, [pc, #80]	; (8005044 <HAL_RCC_ClockConfig+0x358>)
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	0a1b      	lsrs	r3, r3, #8
 8004ff8:	f003 030f 	and.w	r3, r3, #15
 8004ffc:	4912      	ldr	r1, [pc, #72]	; (8005048 <HAL_RCC_ClockConfig+0x35c>)
 8004ffe:	5ccb      	ldrb	r3, [r1, r3]
 8005000:	f003 031f 	and.w	r3, r3, #31
 8005004:	fa22 f303 	lsr.w	r3, r2, r3
 8005008:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800500a:	4b0e      	ldr	r3, [pc, #56]	; (8005044 <HAL_RCC_ClockConfig+0x358>)
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	f003 030f 	and.w	r3, r3, #15
 8005012:	4a0d      	ldr	r2, [pc, #52]	; (8005048 <HAL_RCC_ClockConfig+0x35c>)
 8005014:	5cd3      	ldrb	r3, [r2, r3]
 8005016:	f003 031f 	and.w	r3, r3, #31
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	fa22 f303 	lsr.w	r3, r2, r3
 8005020:	4a0a      	ldr	r2, [pc, #40]	; (800504c <HAL_RCC_ClockConfig+0x360>)
 8005022:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005024:	4a0a      	ldr	r2, [pc, #40]	; (8005050 <HAL_RCC_ClockConfig+0x364>)
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800502a:	4b0a      	ldr	r3, [pc, #40]	; (8005054 <HAL_RCC_ClockConfig+0x368>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4618      	mov	r0, r3
 8005030:	f7fd faa8 	bl	8002584 <HAL_InitTick>
 8005034:	4603      	mov	r3, r0
 8005036:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005038:	7bfb      	ldrb	r3, [r7, #15]
}
 800503a:	4618      	mov	r0, r3
 800503c:	3718      	adds	r7, #24
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	58024400 	.word	0x58024400
 8005048:	0800c8b8 	.word	0x0800c8b8
 800504c:	24000004 	.word	0x24000004
 8005050:	24000000 	.word	0x24000000
 8005054:	24000008 	.word	0x24000008

08005058 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005058:	b480      	push	{r7}
 800505a:	b089      	sub	sp, #36	; 0x24
 800505c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800505e:	4bb3      	ldr	r3, [pc, #716]	; (800532c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005066:	2b18      	cmp	r3, #24
 8005068:	f200 8155 	bhi.w	8005316 <HAL_RCC_GetSysClockFreq+0x2be>
 800506c:	a201      	add	r2, pc, #4	; (adr r2, 8005074 <HAL_RCC_GetSysClockFreq+0x1c>)
 800506e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005072:	bf00      	nop
 8005074:	080050d9 	.word	0x080050d9
 8005078:	08005317 	.word	0x08005317
 800507c:	08005317 	.word	0x08005317
 8005080:	08005317 	.word	0x08005317
 8005084:	08005317 	.word	0x08005317
 8005088:	08005317 	.word	0x08005317
 800508c:	08005317 	.word	0x08005317
 8005090:	08005317 	.word	0x08005317
 8005094:	080050ff 	.word	0x080050ff
 8005098:	08005317 	.word	0x08005317
 800509c:	08005317 	.word	0x08005317
 80050a0:	08005317 	.word	0x08005317
 80050a4:	08005317 	.word	0x08005317
 80050a8:	08005317 	.word	0x08005317
 80050ac:	08005317 	.word	0x08005317
 80050b0:	08005317 	.word	0x08005317
 80050b4:	08005105 	.word	0x08005105
 80050b8:	08005317 	.word	0x08005317
 80050bc:	08005317 	.word	0x08005317
 80050c0:	08005317 	.word	0x08005317
 80050c4:	08005317 	.word	0x08005317
 80050c8:	08005317 	.word	0x08005317
 80050cc:	08005317 	.word	0x08005317
 80050d0:	08005317 	.word	0x08005317
 80050d4:	0800510b 	.word	0x0800510b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050d8:	4b94      	ldr	r3, [pc, #592]	; (800532c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0320 	and.w	r3, r3, #32
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d009      	beq.n	80050f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80050e4:	4b91      	ldr	r3, [pc, #580]	; (800532c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	08db      	lsrs	r3, r3, #3
 80050ea:	f003 0303 	and.w	r3, r3, #3
 80050ee:	4a90      	ldr	r2, [pc, #576]	; (8005330 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050f0:	fa22 f303 	lsr.w	r3, r2, r3
 80050f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80050f6:	e111      	b.n	800531c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80050f8:	4b8d      	ldr	r3, [pc, #564]	; (8005330 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050fa:	61bb      	str	r3, [r7, #24]
      break;
 80050fc:	e10e      	b.n	800531c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80050fe:	4b8d      	ldr	r3, [pc, #564]	; (8005334 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005100:	61bb      	str	r3, [r7, #24]
      break;
 8005102:	e10b      	b.n	800531c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005104:	4b8c      	ldr	r3, [pc, #560]	; (8005338 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005106:	61bb      	str	r3, [r7, #24]
      break;
 8005108:	e108      	b.n	800531c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800510a:	4b88      	ldr	r3, [pc, #544]	; (800532c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800510c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510e:	f003 0303 	and.w	r3, r3, #3
 8005112:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005114:	4b85      	ldr	r3, [pc, #532]	; (800532c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005118:	091b      	lsrs	r3, r3, #4
 800511a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800511e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005120:	4b82      	ldr	r3, [pc, #520]	; (800532c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800512a:	4b80      	ldr	r3, [pc, #512]	; (800532c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800512c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800512e:	08db      	lsrs	r3, r3, #3
 8005130:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	fb02 f303 	mul.w	r3, r2, r3
 800513a:	ee07 3a90 	vmov	s15, r3
 800513e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005142:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 80e1 	beq.w	8005310 <HAL_RCC_GetSysClockFreq+0x2b8>
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	2b02      	cmp	r3, #2
 8005152:	f000 8083 	beq.w	800525c <HAL_RCC_GetSysClockFreq+0x204>
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2b02      	cmp	r3, #2
 800515a:	f200 80a1 	bhi.w	80052a0 <HAL_RCC_GetSysClockFreq+0x248>
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d003      	beq.n	800516c <HAL_RCC_GetSysClockFreq+0x114>
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d056      	beq.n	8005218 <HAL_RCC_GetSysClockFreq+0x1c0>
 800516a:	e099      	b.n	80052a0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800516c:	4b6f      	ldr	r3, [pc, #444]	; (800532c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0320 	and.w	r3, r3, #32
 8005174:	2b00      	cmp	r3, #0
 8005176:	d02d      	beq.n	80051d4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005178:	4b6c      	ldr	r3, [pc, #432]	; (800532c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	08db      	lsrs	r3, r3, #3
 800517e:	f003 0303 	and.w	r3, r3, #3
 8005182:	4a6b      	ldr	r2, [pc, #428]	; (8005330 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005184:	fa22 f303 	lsr.w	r3, r2, r3
 8005188:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	ee07 3a90 	vmov	s15, r3
 8005190:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	ee07 3a90 	vmov	s15, r3
 800519a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800519e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051a2:	4b62      	ldr	r3, [pc, #392]	; (800532c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051aa:	ee07 3a90 	vmov	s15, r3
 80051ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80051b6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800533c <HAL_RCC_GetSysClockFreq+0x2e4>
 80051ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ce:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80051d2:	e087      	b.n	80052e4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	ee07 3a90 	vmov	s15, r3
 80051da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051de:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005340 <HAL_RCC_GetSysClockFreq+0x2e8>
 80051e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051e6:	4b51      	ldr	r3, [pc, #324]	; (800532c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ee:	ee07 3a90 	vmov	s15, r3
 80051f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80051fa:	eddf 5a50 	vldr	s11, [pc, #320]	; 800533c <HAL_RCC_GetSysClockFreq+0x2e4>
 80051fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800520a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800520e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005212:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005216:	e065      	b.n	80052e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	ee07 3a90 	vmov	s15, r3
 800521e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005222:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005344 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800522a:	4b40      	ldr	r3, [pc, #256]	; (800532c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800522c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005232:	ee07 3a90 	vmov	s15, r3
 8005236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800523a:	ed97 6a02 	vldr	s12, [r7, #8]
 800523e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800533c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800524a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800524e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005256:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800525a:	e043      	b.n	80052e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	ee07 3a90 	vmov	s15, r3
 8005262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005266:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005348 <HAL_RCC_GetSysClockFreq+0x2f0>
 800526a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800526e:	4b2f      	ldr	r3, [pc, #188]	; (800532c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005276:	ee07 3a90 	vmov	s15, r3
 800527a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800527e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005282:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800533c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800528a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800528e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800529a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800529e:	e021      	b.n	80052e4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	ee07 3a90 	vmov	s15, r3
 80052a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052aa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005344 <HAL_RCC_GetSysClockFreq+0x2ec>
 80052ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052b2:	4b1e      	ldr	r3, [pc, #120]	; (800532c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ba:	ee07 3a90 	vmov	s15, r3
 80052be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80052c6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800533c <HAL_RCC_GetSysClockFreq+0x2e4>
 80052ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80052e2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80052e4:	4b11      	ldr	r3, [pc, #68]	; (800532c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e8:	0a5b      	lsrs	r3, r3, #9
 80052ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052ee:	3301      	adds	r3, #1
 80052f0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	ee07 3a90 	vmov	s15, r3
 80052f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80052fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005304:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005308:	ee17 3a90 	vmov	r3, s15
 800530c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800530e:	e005      	b.n	800531c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005310:	2300      	movs	r3, #0
 8005312:	61bb      	str	r3, [r7, #24]
      break;
 8005314:	e002      	b.n	800531c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005316:	4b07      	ldr	r3, [pc, #28]	; (8005334 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005318:	61bb      	str	r3, [r7, #24]
      break;
 800531a:	bf00      	nop
  }

  return sysclockfreq;
 800531c:	69bb      	ldr	r3, [r7, #24]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3724      	adds	r7, #36	; 0x24
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	58024400 	.word	0x58024400
 8005330:	03d09000 	.word	0x03d09000
 8005334:	003d0900 	.word	0x003d0900
 8005338:	017d7840 	.word	0x017d7840
 800533c:	46000000 	.word	0x46000000
 8005340:	4c742400 	.word	0x4c742400
 8005344:	4a742400 	.word	0x4a742400
 8005348:	4bbebc20 	.word	0x4bbebc20

0800534c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005352:	f7ff fe81 	bl	8005058 <HAL_RCC_GetSysClockFreq>
 8005356:	4602      	mov	r2, r0
 8005358:	4b10      	ldr	r3, [pc, #64]	; (800539c <HAL_RCC_GetHCLKFreq+0x50>)
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	0a1b      	lsrs	r3, r3, #8
 800535e:	f003 030f 	and.w	r3, r3, #15
 8005362:	490f      	ldr	r1, [pc, #60]	; (80053a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8005364:	5ccb      	ldrb	r3, [r1, r3]
 8005366:	f003 031f 	and.w	r3, r3, #31
 800536a:	fa22 f303 	lsr.w	r3, r2, r3
 800536e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005370:	4b0a      	ldr	r3, [pc, #40]	; (800539c <HAL_RCC_GetHCLKFreq+0x50>)
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	f003 030f 	and.w	r3, r3, #15
 8005378:	4a09      	ldr	r2, [pc, #36]	; (80053a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800537a:	5cd3      	ldrb	r3, [r2, r3]
 800537c:	f003 031f 	and.w	r3, r3, #31
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	fa22 f303 	lsr.w	r3, r2, r3
 8005386:	4a07      	ldr	r2, [pc, #28]	; (80053a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8005388:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800538a:	4a07      	ldr	r2, [pc, #28]	; (80053a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005390:	4b04      	ldr	r3, [pc, #16]	; (80053a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8005392:	681b      	ldr	r3, [r3, #0]
}
 8005394:	4618      	mov	r0, r3
 8005396:	3708      	adds	r7, #8
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	58024400 	.word	0x58024400
 80053a0:	0800c8b8 	.word	0x0800c8b8
 80053a4:	24000004 	.word	0x24000004
 80053a8:	24000000 	.word	0x24000000

080053ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80053b0:	f7ff ffcc 	bl	800534c <HAL_RCC_GetHCLKFreq>
 80053b4:	4602      	mov	r2, r0
 80053b6:	4b06      	ldr	r3, [pc, #24]	; (80053d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053b8:	69db      	ldr	r3, [r3, #28]
 80053ba:	091b      	lsrs	r3, r3, #4
 80053bc:	f003 0307 	and.w	r3, r3, #7
 80053c0:	4904      	ldr	r1, [pc, #16]	; (80053d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80053c2:	5ccb      	ldrb	r3, [r1, r3]
 80053c4:	f003 031f 	and.w	r3, r3, #31
 80053c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	58024400 	.word	0x58024400
 80053d4:	0800c8b8 	.word	0x0800c8b8

080053d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80053dc:	f7ff ffb6 	bl	800534c <HAL_RCC_GetHCLKFreq>
 80053e0:	4602      	mov	r2, r0
 80053e2:	4b06      	ldr	r3, [pc, #24]	; (80053fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80053e4:	69db      	ldr	r3, [r3, #28]
 80053e6:	0a1b      	lsrs	r3, r3, #8
 80053e8:	f003 0307 	and.w	r3, r3, #7
 80053ec:	4904      	ldr	r1, [pc, #16]	; (8005400 <HAL_RCC_GetPCLK2Freq+0x28>)
 80053ee:	5ccb      	ldrb	r3, [r1, r3]
 80053f0:	f003 031f 	and.w	r3, r3, #31
 80053f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	58024400 	.word	0x58024400
 8005400:	0800c8b8 	.word	0x0800c8b8

08005404 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005408:	b0ca      	sub	sp, #296	; 0x128
 800540a:	af00      	add	r7, sp, #0
 800540c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005410:	2300      	movs	r3, #0
 8005412:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005416:	2300      	movs	r3, #0
 8005418:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800541c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005424:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005428:	2500      	movs	r5, #0
 800542a:	ea54 0305 	orrs.w	r3, r4, r5
 800542e:	d049      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005430:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005434:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005436:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800543a:	d02f      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800543c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005440:	d828      	bhi.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005442:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005446:	d01a      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005448:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800544c:	d822      	bhi.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800544e:	2b00      	cmp	r3, #0
 8005450:	d003      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005452:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005456:	d007      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005458:	e01c      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800545a:	4bb8      	ldr	r3, [pc, #736]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800545c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545e:	4ab7      	ldr	r2, [pc, #732]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005464:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005466:	e01a      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800546c:	3308      	adds	r3, #8
 800546e:	2102      	movs	r1, #2
 8005470:	4618      	mov	r0, r3
 8005472:	f002 fb61 	bl	8007b38 <RCCEx_PLL2_Config>
 8005476:	4603      	mov	r3, r0
 8005478:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800547c:	e00f      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800547e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005482:	3328      	adds	r3, #40	; 0x28
 8005484:	2102      	movs	r1, #2
 8005486:	4618      	mov	r0, r3
 8005488:	f002 fc08 	bl	8007c9c <RCCEx_PLL3_Config>
 800548c:	4603      	mov	r3, r0
 800548e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005492:	e004      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800549a:	e000      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800549c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800549e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10a      	bne.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80054a6:	4ba5      	ldr	r3, [pc, #660]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054aa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80054ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054b4:	4aa1      	ldr	r2, [pc, #644]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054b6:	430b      	orrs	r3, r1
 80054b8:	6513      	str	r3, [r2, #80]	; 0x50
 80054ba:	e003      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80054c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054cc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80054d0:	f04f 0900 	mov.w	r9, #0
 80054d4:	ea58 0309 	orrs.w	r3, r8, r9
 80054d8:	d047      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80054da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e0:	2b04      	cmp	r3, #4
 80054e2:	d82a      	bhi.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80054e4:	a201      	add	r2, pc, #4	; (adr r2, 80054ec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80054e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ea:	bf00      	nop
 80054ec:	08005501 	.word	0x08005501
 80054f0:	0800550f 	.word	0x0800550f
 80054f4:	08005525 	.word	0x08005525
 80054f8:	08005543 	.word	0x08005543
 80054fc:	08005543 	.word	0x08005543
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005500:	4b8e      	ldr	r3, [pc, #568]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005504:	4a8d      	ldr	r2, [pc, #564]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005506:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800550a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800550c:	e01a      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800550e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005512:	3308      	adds	r3, #8
 8005514:	2100      	movs	r1, #0
 8005516:	4618      	mov	r0, r3
 8005518:	f002 fb0e 	bl	8007b38 <RCCEx_PLL2_Config>
 800551c:	4603      	mov	r3, r0
 800551e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005522:	e00f      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005528:	3328      	adds	r3, #40	; 0x28
 800552a:	2100      	movs	r1, #0
 800552c:	4618      	mov	r0, r3
 800552e:	f002 fbb5 	bl	8007c9c <RCCEx_PLL3_Config>
 8005532:	4603      	mov	r3, r0
 8005534:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005538:	e004      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005540:	e000      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005542:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005544:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10a      	bne.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800554c:	4b7b      	ldr	r3, [pc, #492]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800554e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005550:	f023 0107 	bic.w	r1, r3, #7
 8005554:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800555a:	4a78      	ldr	r2, [pc, #480]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800555c:	430b      	orrs	r3, r1
 800555e:	6513      	str	r3, [r2, #80]	; 0x50
 8005560:	e003      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005562:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005566:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800556a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800556e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005572:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005576:	f04f 0b00 	mov.w	fp, #0
 800557a:	ea5a 030b 	orrs.w	r3, sl, fp
 800557e:	d04c      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005580:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800558a:	d030      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800558c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005590:	d829      	bhi.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005592:	2bc0      	cmp	r3, #192	; 0xc0
 8005594:	d02d      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005596:	2bc0      	cmp	r3, #192	; 0xc0
 8005598:	d825      	bhi.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800559a:	2b80      	cmp	r3, #128	; 0x80
 800559c:	d018      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800559e:	2b80      	cmp	r3, #128	; 0x80
 80055a0:	d821      	bhi.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d002      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80055a6:	2b40      	cmp	r3, #64	; 0x40
 80055a8:	d007      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80055aa:	e01c      	b.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055ac:	4b63      	ldr	r3, [pc, #396]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b0:	4a62      	ldr	r2, [pc, #392]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80055b8:	e01c      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055be:	3308      	adds	r3, #8
 80055c0:	2100      	movs	r1, #0
 80055c2:	4618      	mov	r0, r3
 80055c4:	f002 fab8 	bl	8007b38 <RCCEx_PLL2_Config>
 80055c8:	4603      	mov	r3, r0
 80055ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80055ce:	e011      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055d4:	3328      	adds	r3, #40	; 0x28
 80055d6:	2100      	movs	r1, #0
 80055d8:	4618      	mov	r0, r3
 80055da:	f002 fb5f 	bl	8007c9c <RCCEx_PLL3_Config>
 80055de:	4603      	mov	r3, r0
 80055e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80055e4:	e006      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80055ec:	e002      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80055ee:	bf00      	nop
 80055f0:	e000      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80055f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d10a      	bne.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80055fc:	4b4f      	ldr	r3, [pc, #316]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005600:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800560a:	4a4c      	ldr	r2, [pc, #304]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800560c:	430b      	orrs	r3, r1
 800560e:	6513      	str	r3, [r2, #80]	; 0x50
 8005610:	e003      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005612:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005616:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800561a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800561e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005622:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005626:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800562a:	2300      	movs	r3, #0
 800562c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005630:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8005634:	460b      	mov	r3, r1
 8005636:	4313      	orrs	r3, r2
 8005638:	d053      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800563a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800563e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005642:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005646:	d035      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005648:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800564c:	d82e      	bhi.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800564e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005652:	d031      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005654:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005658:	d828      	bhi.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800565a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800565e:	d01a      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005660:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005664:	d822      	bhi.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005666:	2b00      	cmp	r3, #0
 8005668:	d003      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800566a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800566e:	d007      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005670:	e01c      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005672:	4b32      	ldr	r3, [pc, #200]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005676:	4a31      	ldr	r2, [pc, #196]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800567c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800567e:	e01c      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005680:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005684:	3308      	adds	r3, #8
 8005686:	2100      	movs	r1, #0
 8005688:	4618      	mov	r0, r3
 800568a:	f002 fa55 	bl	8007b38 <RCCEx_PLL2_Config>
 800568e:	4603      	mov	r3, r0
 8005690:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005694:	e011      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800569a:	3328      	adds	r3, #40	; 0x28
 800569c:	2100      	movs	r1, #0
 800569e:	4618      	mov	r0, r3
 80056a0:	f002 fafc 	bl	8007c9c <RCCEx_PLL3_Config>
 80056a4:	4603      	mov	r3, r0
 80056a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056aa:	e006      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80056b2:	e002      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80056b4:	bf00      	nop
 80056b6:	e000      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80056b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10b      	bne.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80056c2:	4b1e      	ldr	r3, [pc, #120]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056c6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80056ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80056d2:	4a1a      	ldr	r2, [pc, #104]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056d4:	430b      	orrs	r3, r1
 80056d6:	6593      	str	r3, [r2, #88]	; 0x58
 80056d8:	e003      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80056e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ea:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80056ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80056f2:	2300      	movs	r3, #0
 80056f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80056f8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80056fc:	460b      	mov	r3, r1
 80056fe:	4313      	orrs	r3, r2
 8005700:	d056      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005706:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800570a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800570e:	d038      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005710:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005714:	d831      	bhi.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005716:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800571a:	d034      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800571c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005720:	d82b      	bhi.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005722:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005726:	d01d      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005728:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800572c:	d825      	bhi.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800572e:	2b00      	cmp	r3, #0
 8005730:	d006      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005732:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005736:	d00a      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005738:	e01f      	b.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800573a:	bf00      	nop
 800573c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005740:	4ba2      	ldr	r3, [pc, #648]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005744:	4aa1      	ldr	r2, [pc, #644]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005746:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800574a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800574c:	e01c      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800574e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005752:	3308      	adds	r3, #8
 8005754:	2100      	movs	r1, #0
 8005756:	4618      	mov	r0, r3
 8005758:	f002 f9ee 	bl	8007b38 <RCCEx_PLL2_Config>
 800575c:	4603      	mov	r3, r0
 800575e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005762:	e011      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005764:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005768:	3328      	adds	r3, #40	; 0x28
 800576a:	2100      	movs	r1, #0
 800576c:	4618      	mov	r0, r3
 800576e:	f002 fa95 	bl	8007c9c <RCCEx_PLL3_Config>
 8005772:	4603      	mov	r3, r0
 8005774:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005778:	e006      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005780:	e002      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005782:	bf00      	nop
 8005784:	e000      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005786:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005788:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10b      	bne.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005790:	4b8e      	ldr	r3, [pc, #568]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005794:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800579c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80057a0:	4a8a      	ldr	r2, [pc, #552]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057a2:	430b      	orrs	r3, r1
 80057a4:	6593      	str	r3, [r2, #88]	; 0x58
 80057a6:	e003      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80057b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80057bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80057c0:	2300      	movs	r3, #0
 80057c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80057c6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80057ca:	460b      	mov	r3, r1
 80057cc:	4313      	orrs	r3, r2
 80057ce:	d03a      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80057d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057d6:	2b30      	cmp	r3, #48	; 0x30
 80057d8:	d01f      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80057da:	2b30      	cmp	r3, #48	; 0x30
 80057dc:	d819      	bhi.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80057de:	2b20      	cmp	r3, #32
 80057e0:	d00c      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80057e2:	2b20      	cmp	r3, #32
 80057e4:	d815      	bhi.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d019      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80057ea:	2b10      	cmp	r3, #16
 80057ec:	d111      	bne.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057ee:	4b77      	ldr	r3, [pc, #476]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f2:	4a76      	ldr	r2, [pc, #472]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80057fa:	e011      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80057fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005800:	3308      	adds	r3, #8
 8005802:	2102      	movs	r1, #2
 8005804:	4618      	mov	r0, r3
 8005806:	f002 f997 	bl	8007b38 <RCCEx_PLL2_Config>
 800580a:	4603      	mov	r3, r0
 800580c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005810:	e006      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005818:	e002      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800581a:	bf00      	nop
 800581c:	e000      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800581e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005820:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10a      	bne.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005828:	4b68      	ldr	r3, [pc, #416]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800582a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800582c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005836:	4a65      	ldr	r2, [pc, #404]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005838:	430b      	orrs	r3, r1
 800583a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800583c:	e003      	b.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800583e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005842:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800584a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005852:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005856:	2300      	movs	r3, #0
 8005858:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800585c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005860:	460b      	mov	r3, r1
 8005862:	4313      	orrs	r3, r2
 8005864:	d051      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800586a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800586c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005870:	d035      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005872:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005876:	d82e      	bhi.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005878:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800587c:	d031      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800587e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005882:	d828      	bhi.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005884:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005888:	d01a      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800588a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800588e:	d822      	bhi.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005890:	2b00      	cmp	r3, #0
 8005892:	d003      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005898:	d007      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800589a:	e01c      	b.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800589c:	4b4b      	ldr	r3, [pc, #300]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800589e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a0:	4a4a      	ldr	r2, [pc, #296]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80058a8:	e01c      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058ae:	3308      	adds	r3, #8
 80058b0:	2100      	movs	r1, #0
 80058b2:	4618      	mov	r0, r3
 80058b4:	f002 f940 	bl	8007b38 <RCCEx_PLL2_Config>
 80058b8:	4603      	mov	r3, r0
 80058ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80058be:	e011      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058c4:	3328      	adds	r3, #40	; 0x28
 80058c6:	2100      	movs	r1, #0
 80058c8:	4618      	mov	r0, r3
 80058ca:	f002 f9e7 	bl	8007c9c <RCCEx_PLL3_Config>
 80058ce:	4603      	mov	r3, r0
 80058d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80058d4:	e006      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80058dc:	e002      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80058de:	bf00      	nop
 80058e0:	e000      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80058e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d10a      	bne.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80058ec:	4b37      	ldr	r3, [pc, #220]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058f0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80058f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058fa:	4a34      	ldr	r2, [pc, #208]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058fc:	430b      	orrs	r3, r1
 80058fe:	6513      	str	r3, [r2, #80]	; 0x50
 8005900:	e003      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005902:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005906:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800590a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800590e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005912:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005916:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800591a:	2300      	movs	r3, #0
 800591c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005920:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005924:	460b      	mov	r3, r1
 8005926:	4313      	orrs	r3, r2
 8005928:	d056      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800592a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800592e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005930:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005934:	d033      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005936:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800593a:	d82c      	bhi.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800593c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005940:	d02f      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005942:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005946:	d826      	bhi.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005948:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800594c:	d02b      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800594e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005952:	d820      	bhi.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005954:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005958:	d012      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800595a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800595e:	d81a      	bhi.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005960:	2b00      	cmp	r3, #0
 8005962:	d022      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005968:	d115      	bne.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800596a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800596e:	3308      	adds	r3, #8
 8005970:	2101      	movs	r1, #1
 8005972:	4618      	mov	r0, r3
 8005974:	f002 f8e0 	bl	8007b38 <RCCEx_PLL2_Config>
 8005978:	4603      	mov	r3, r0
 800597a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800597e:	e015      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005984:	3328      	adds	r3, #40	; 0x28
 8005986:	2101      	movs	r1, #1
 8005988:	4618      	mov	r0, r3
 800598a:	f002 f987 	bl	8007c9c <RCCEx_PLL3_Config>
 800598e:	4603      	mov	r3, r0
 8005990:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005994:	e00a      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800599c:	e006      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800599e:	bf00      	nop
 80059a0:	e004      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80059a2:	bf00      	nop
 80059a4:	e002      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80059a6:	bf00      	nop
 80059a8:	e000      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80059aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10d      	bne.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80059b4:	4b05      	ldr	r3, [pc, #20]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059b8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80059bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059c2:	4a02      	ldr	r2, [pc, #8]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059c4:	430b      	orrs	r3, r1
 80059c6:	6513      	str	r3, [r2, #80]	; 0x50
 80059c8:	e006      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80059ca:	bf00      	nop
 80059cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80059d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80059e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80059e8:	2300      	movs	r3, #0
 80059ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059ee:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80059f2:	460b      	mov	r3, r1
 80059f4:	4313      	orrs	r3, r2
 80059f6:	d055      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80059f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a04:	d033      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005a06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a0a:	d82c      	bhi.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a10:	d02f      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a16:	d826      	bhi.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005a18:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005a1c:	d02b      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005a1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005a22:	d820      	bhi.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005a24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a28:	d012      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005a2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a2e:	d81a      	bhi.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d022      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005a34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a38:	d115      	bne.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a3e:	3308      	adds	r3, #8
 8005a40:	2101      	movs	r1, #1
 8005a42:	4618      	mov	r0, r3
 8005a44:	f002 f878 	bl	8007b38 <RCCEx_PLL2_Config>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005a4e:	e015      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a54:	3328      	adds	r3, #40	; 0x28
 8005a56:	2101      	movs	r1, #1
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f002 f91f 	bl	8007c9c <RCCEx_PLL3_Config>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005a64:	e00a      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a6c:	e006      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005a6e:	bf00      	nop
 8005a70:	e004      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005a72:	bf00      	nop
 8005a74:	e002      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005a76:	bf00      	nop
 8005a78:	e000      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005a7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d10b      	bne.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005a84:	4ba3      	ldr	r3, [pc, #652]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a88:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a94:	4a9f      	ldr	r2, [pc, #636]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a96:	430b      	orrs	r3, r1
 8005a98:	6593      	str	r3, [r2, #88]	; 0x58
 8005a9a:	e003      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005aa0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aac:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005ab0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005aba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005abe:	460b      	mov	r3, r1
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	d037      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ace:	d00e      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005ad0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ad4:	d816      	bhi.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d018      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005ada:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ade:	d111      	bne.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ae0:	4b8c      	ldr	r3, [pc, #560]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae4:	4a8b      	ldr	r2, [pc, #556]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ae6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005aea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005aec:	e00f      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005af2:	3308      	adds	r3, #8
 8005af4:	2101      	movs	r1, #1
 8005af6:	4618      	mov	r0, r3
 8005af8:	f002 f81e 	bl	8007b38 <RCCEx_PLL2_Config>
 8005afc:	4603      	mov	r3, r0
 8005afe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005b02:	e004      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b0a:	e000      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005b0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d10a      	bne.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005b16:	4b7f      	ldr	r3, [pc, #508]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b1a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b24:	4a7b      	ldr	r2, [pc, #492]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b26:	430b      	orrs	r3, r1
 8005b28:	6513      	str	r3, [r2, #80]	; 0x50
 8005b2a:	e003      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005b40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b44:	2300      	movs	r3, #0
 8005b46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005b4a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005b4e:	460b      	mov	r3, r1
 8005b50:	4313      	orrs	r3, r2
 8005b52:	d039      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b5a:	2b03      	cmp	r3, #3
 8005b5c:	d81c      	bhi.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005b5e:	a201      	add	r2, pc, #4	; (adr r2, 8005b64 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b64:	08005ba1 	.word	0x08005ba1
 8005b68:	08005b75 	.word	0x08005b75
 8005b6c:	08005b83 	.word	0x08005b83
 8005b70:	08005ba1 	.word	0x08005ba1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b74:	4b67      	ldr	r3, [pc, #412]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b78:	4a66      	ldr	r2, [pc, #408]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005b80:	e00f      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b86:	3308      	adds	r3, #8
 8005b88:	2102      	movs	r1, #2
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f001 ffd4 	bl	8007b38 <RCCEx_PLL2_Config>
 8005b90:	4603      	mov	r3, r0
 8005b92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005b96:	e004      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b9e:	e000      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005ba0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10a      	bne.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005baa:	4b5a      	ldr	r3, [pc, #360]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bae:	f023 0103 	bic.w	r1, r3, #3
 8005bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bb8:	4a56      	ldr	r2, [pc, #344]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bba:	430b      	orrs	r3, r1
 8005bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005bbe:	e003      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bc4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005bd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005bd8:	2300      	movs	r3, #0
 8005bda:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005bde:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005be2:	460b      	mov	r3, r1
 8005be4:	4313      	orrs	r3, r2
 8005be6:	f000 809f 	beq.w	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bea:	4b4b      	ldr	r3, [pc, #300]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a4a      	ldr	r2, [pc, #296]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bf4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005bf6:	f7fc fd0f 	bl	8002618 <HAL_GetTick>
 8005bfa:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bfe:	e00b      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c00:	f7fc fd0a 	bl	8002618 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	2b64      	cmp	r3, #100	; 0x64
 8005c0e:	d903      	bls.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c16:	e005      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c18:	4b3f      	ldr	r3, [pc, #252]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d0ed      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005c24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d179      	bne.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005c2c:	4b39      	ldr	r3, [pc, #228]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c34:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005c38:	4053      	eors	r3, r2
 8005c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d015      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c42:	4b34      	ldr	r3, [pc, #208]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c4a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c4e:	4b31      	ldr	r3, [pc, #196]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c52:	4a30      	ldr	r2, [pc, #192]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c58:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c5a:	4b2e      	ldr	r3, [pc, #184]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c5e:	4a2d      	ldr	r2, [pc, #180]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c64:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005c66:	4a2b      	ldr	r2, [pc, #172]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c68:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c6c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c7a:	d118      	bne.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c7c:	f7fc fccc 	bl	8002618 <HAL_GetTick>
 8005c80:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c84:	e00d      	b.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c86:	f7fc fcc7 	bl	8002618 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005c90:	1ad2      	subs	r2, r2, r3
 8005c92:	f241 3388 	movw	r3, #5000	; 0x1388
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d903      	bls.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8005ca0:	e005      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ca2:	4b1c      	ldr	r3, [pc, #112]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca6:	f003 0302 	and.w	r3, r3, #2
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d0eb      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005cae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d129      	bne.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cc6:	d10e      	bne.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005cc8:	4b12      	ldr	r3, [pc, #72]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cd4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005cd8:	091a      	lsrs	r2, r3, #4
 8005cda:	4b10      	ldr	r3, [pc, #64]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005cdc:	4013      	ands	r3, r2
 8005cde:	4a0d      	ldr	r2, [pc, #52]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ce0:	430b      	orrs	r3, r1
 8005ce2:	6113      	str	r3, [r2, #16]
 8005ce4:	e005      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005ce6:	4b0b      	ldr	r3, [pc, #44]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	4a0a      	ldr	r2, [pc, #40]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005cf0:	6113      	str	r3, [r2, #16]
 8005cf2:	4b08      	ldr	r3, [pc, #32]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cf4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cfa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005cfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d02:	4a04      	ldr	r2, [pc, #16]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d04:	430b      	orrs	r3, r1
 8005d06:	6713      	str	r3, [r2, #112]	; 0x70
 8005d08:	e00e      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8005d12:	e009      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005d14:	58024400 	.word	0x58024400
 8005d18:	58024800 	.word	0x58024800
 8005d1c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d30:	f002 0301 	and.w	r3, r2, #1
 8005d34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d38:	2300      	movs	r3, #0
 8005d3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d3e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005d42:	460b      	mov	r3, r1
 8005d44:	4313      	orrs	r3, r2
 8005d46:	f000 8089 	beq.w	8005e5c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d50:	2b28      	cmp	r3, #40	; 0x28
 8005d52:	d86b      	bhi.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005d54:	a201      	add	r2, pc, #4	; (adr r2, 8005d5c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5a:	bf00      	nop
 8005d5c:	08005e35 	.word	0x08005e35
 8005d60:	08005e2d 	.word	0x08005e2d
 8005d64:	08005e2d 	.word	0x08005e2d
 8005d68:	08005e2d 	.word	0x08005e2d
 8005d6c:	08005e2d 	.word	0x08005e2d
 8005d70:	08005e2d 	.word	0x08005e2d
 8005d74:	08005e2d 	.word	0x08005e2d
 8005d78:	08005e2d 	.word	0x08005e2d
 8005d7c:	08005e01 	.word	0x08005e01
 8005d80:	08005e2d 	.word	0x08005e2d
 8005d84:	08005e2d 	.word	0x08005e2d
 8005d88:	08005e2d 	.word	0x08005e2d
 8005d8c:	08005e2d 	.word	0x08005e2d
 8005d90:	08005e2d 	.word	0x08005e2d
 8005d94:	08005e2d 	.word	0x08005e2d
 8005d98:	08005e2d 	.word	0x08005e2d
 8005d9c:	08005e17 	.word	0x08005e17
 8005da0:	08005e2d 	.word	0x08005e2d
 8005da4:	08005e2d 	.word	0x08005e2d
 8005da8:	08005e2d 	.word	0x08005e2d
 8005dac:	08005e2d 	.word	0x08005e2d
 8005db0:	08005e2d 	.word	0x08005e2d
 8005db4:	08005e2d 	.word	0x08005e2d
 8005db8:	08005e2d 	.word	0x08005e2d
 8005dbc:	08005e35 	.word	0x08005e35
 8005dc0:	08005e2d 	.word	0x08005e2d
 8005dc4:	08005e2d 	.word	0x08005e2d
 8005dc8:	08005e2d 	.word	0x08005e2d
 8005dcc:	08005e2d 	.word	0x08005e2d
 8005dd0:	08005e2d 	.word	0x08005e2d
 8005dd4:	08005e2d 	.word	0x08005e2d
 8005dd8:	08005e2d 	.word	0x08005e2d
 8005ddc:	08005e35 	.word	0x08005e35
 8005de0:	08005e2d 	.word	0x08005e2d
 8005de4:	08005e2d 	.word	0x08005e2d
 8005de8:	08005e2d 	.word	0x08005e2d
 8005dec:	08005e2d 	.word	0x08005e2d
 8005df0:	08005e2d 	.word	0x08005e2d
 8005df4:	08005e2d 	.word	0x08005e2d
 8005df8:	08005e2d 	.word	0x08005e2d
 8005dfc:	08005e35 	.word	0x08005e35
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e04:	3308      	adds	r3, #8
 8005e06:	2101      	movs	r1, #1
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f001 fe95 	bl	8007b38 <RCCEx_PLL2_Config>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005e14:	e00f      	b.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e1a:	3328      	adds	r3, #40	; 0x28
 8005e1c:	2101      	movs	r1, #1
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f001 ff3c 	bl	8007c9c <RCCEx_PLL3_Config>
 8005e24:	4603      	mov	r3, r0
 8005e26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005e2a:	e004      	b.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005e32:	e000      	b.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005e34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d10a      	bne.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005e3e:	4bbf      	ldr	r3, [pc, #764]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e42:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e4c:	4abb      	ldr	r2, [pc, #748]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e4e:	430b      	orrs	r3, r1
 8005e50:	6553      	str	r3, [r2, #84]	; 0x54
 8005e52:	e003      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e64:	f002 0302 	and.w	r3, r2, #2
 8005e68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005e72:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005e76:	460b      	mov	r3, r1
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	d041      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e82:	2b05      	cmp	r3, #5
 8005e84:	d824      	bhi.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005e86:	a201      	add	r2, pc, #4	; (adr r2, 8005e8c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e8c:	08005ed9 	.word	0x08005ed9
 8005e90:	08005ea5 	.word	0x08005ea5
 8005e94:	08005ebb 	.word	0x08005ebb
 8005e98:	08005ed9 	.word	0x08005ed9
 8005e9c:	08005ed9 	.word	0x08005ed9
 8005ea0:	08005ed9 	.word	0x08005ed9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ea8:	3308      	adds	r3, #8
 8005eaa:	2101      	movs	r1, #1
 8005eac:	4618      	mov	r0, r3
 8005eae:	f001 fe43 	bl	8007b38 <RCCEx_PLL2_Config>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005eb8:	e00f      	b.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ebe:	3328      	adds	r3, #40	; 0x28
 8005ec0:	2101      	movs	r1, #1
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f001 feea 	bl	8007c9c <RCCEx_PLL3_Config>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005ece:	e004      	b.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005ed6:	e000      	b.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005ed8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d10a      	bne.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005ee2:	4b96      	ldr	r3, [pc, #600]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ee6:	f023 0107 	bic.w	r1, r3, #7
 8005eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ef0:	4a92      	ldr	r2, [pc, #584]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ef2:	430b      	orrs	r3, r1
 8005ef4:	6553      	str	r3, [r2, #84]	; 0x54
 8005ef6:	e003      	b.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ef8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005efc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f08:	f002 0304 	and.w	r3, r2, #4
 8005f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f10:	2300      	movs	r3, #0
 8005f12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f16:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	d044      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f28:	2b05      	cmp	r3, #5
 8005f2a:	d825      	bhi.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005f2c:	a201      	add	r2, pc, #4	; (adr r2, 8005f34 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f32:	bf00      	nop
 8005f34:	08005f81 	.word	0x08005f81
 8005f38:	08005f4d 	.word	0x08005f4d
 8005f3c:	08005f63 	.word	0x08005f63
 8005f40:	08005f81 	.word	0x08005f81
 8005f44:	08005f81 	.word	0x08005f81
 8005f48:	08005f81 	.word	0x08005f81
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f50:	3308      	adds	r3, #8
 8005f52:	2101      	movs	r1, #1
 8005f54:	4618      	mov	r0, r3
 8005f56:	f001 fdef 	bl	8007b38 <RCCEx_PLL2_Config>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005f60:	e00f      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f66:	3328      	adds	r3, #40	; 0x28
 8005f68:	2101      	movs	r1, #1
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f001 fe96 	bl	8007c9c <RCCEx_PLL3_Config>
 8005f70:	4603      	mov	r3, r0
 8005f72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005f76:	e004      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f7e:	e000      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005f80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10b      	bne.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f8a:	4b6c      	ldr	r3, [pc, #432]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f8e:	f023 0107 	bic.w	r1, r3, #7
 8005f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f9a:	4a68      	ldr	r2, [pc, #416]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f9c:	430b      	orrs	r3, r1
 8005f9e:	6593      	str	r3, [r2, #88]	; 0x58
 8005fa0:	e003      	b.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fa6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb2:	f002 0320 	and.w	r3, r2, #32
 8005fb6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005fba:	2300      	movs	r3, #0
 8005fbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005fc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	d055      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005fd6:	d033      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005fd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005fdc:	d82c      	bhi.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fe2:	d02f      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fe8:	d826      	bhi.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005fea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005fee:	d02b      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005ff0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ff4:	d820      	bhi.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005ff6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ffa:	d012      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005ffc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006000:	d81a      	bhi.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006002:	2b00      	cmp	r3, #0
 8006004:	d022      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006006:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800600a:	d115      	bne.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800600c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006010:	3308      	adds	r3, #8
 8006012:	2100      	movs	r1, #0
 8006014:	4618      	mov	r0, r3
 8006016:	f001 fd8f 	bl	8007b38 <RCCEx_PLL2_Config>
 800601a:	4603      	mov	r3, r0
 800601c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006020:	e015      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006022:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006026:	3328      	adds	r3, #40	; 0x28
 8006028:	2102      	movs	r1, #2
 800602a:	4618      	mov	r0, r3
 800602c:	f001 fe36 	bl	8007c9c <RCCEx_PLL3_Config>
 8006030:	4603      	mov	r3, r0
 8006032:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006036:	e00a      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800603e:	e006      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006040:	bf00      	nop
 8006042:	e004      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006044:	bf00      	nop
 8006046:	e002      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006048:	bf00      	nop
 800604a:	e000      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800604c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800604e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10b      	bne.n	800606e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006056:	4b39      	ldr	r3, [pc, #228]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800605a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800605e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006066:	4a35      	ldr	r2, [pc, #212]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006068:	430b      	orrs	r3, r1
 800606a:	6553      	str	r3, [r2, #84]	; 0x54
 800606c:	e003      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800606e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006072:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006076:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800607a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006082:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006086:	2300      	movs	r3, #0
 8006088:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800608c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006090:	460b      	mov	r3, r1
 8006092:	4313      	orrs	r3, r2
 8006094:	d058      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006096:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800609a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800609e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80060a2:	d033      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80060a4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80060a8:	d82c      	bhi.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80060aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ae:	d02f      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80060b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060b4:	d826      	bhi.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80060b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060ba:	d02b      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80060bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060c0:	d820      	bhi.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80060c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060c6:	d012      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80060c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060cc:	d81a      	bhi.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d022      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80060d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060d6:	d115      	bne.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060dc:	3308      	adds	r3, #8
 80060de:	2100      	movs	r1, #0
 80060e0:	4618      	mov	r0, r3
 80060e2:	f001 fd29 	bl	8007b38 <RCCEx_PLL2_Config>
 80060e6:	4603      	mov	r3, r0
 80060e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80060ec:	e015      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060f2:	3328      	adds	r3, #40	; 0x28
 80060f4:	2102      	movs	r1, #2
 80060f6:	4618      	mov	r0, r3
 80060f8:	f001 fdd0 	bl	8007c9c <RCCEx_PLL3_Config>
 80060fc:	4603      	mov	r3, r0
 80060fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006102:	e00a      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800610a:	e006      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800610c:	bf00      	nop
 800610e:	e004      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006110:	bf00      	nop
 8006112:	e002      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006114:	bf00      	nop
 8006116:	e000      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800611a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10e      	bne.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006122:	4b06      	ldr	r3, [pc, #24]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006126:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800612a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800612e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006132:	4a02      	ldr	r2, [pc, #8]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006134:	430b      	orrs	r3, r1
 8006136:	6593      	str	r3, [r2, #88]	; 0x58
 8006138:	e006      	b.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800613a:	bf00      	nop
 800613c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006140:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006144:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006148:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800614c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006150:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006154:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006158:	2300      	movs	r3, #0
 800615a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800615e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006162:	460b      	mov	r3, r1
 8006164:	4313      	orrs	r3, r2
 8006166:	d055      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006168:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800616c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006170:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006174:	d033      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006176:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800617a:	d82c      	bhi.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800617c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006180:	d02f      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006182:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006186:	d826      	bhi.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006188:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800618c:	d02b      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800618e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006192:	d820      	bhi.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006194:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006198:	d012      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800619a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800619e:	d81a      	bhi.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d022      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80061a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061a8:	d115      	bne.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061ae:	3308      	adds	r3, #8
 80061b0:	2100      	movs	r1, #0
 80061b2:	4618      	mov	r0, r3
 80061b4:	f001 fcc0 	bl	8007b38 <RCCEx_PLL2_Config>
 80061b8:	4603      	mov	r3, r0
 80061ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80061be:	e015      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061c4:	3328      	adds	r3, #40	; 0x28
 80061c6:	2102      	movs	r1, #2
 80061c8:	4618      	mov	r0, r3
 80061ca:	f001 fd67 	bl	8007c9c <RCCEx_PLL3_Config>
 80061ce:	4603      	mov	r3, r0
 80061d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80061d4:	e00a      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80061dc:	e006      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80061de:	bf00      	nop
 80061e0:	e004      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80061e2:	bf00      	nop
 80061e4:	e002      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80061e6:	bf00      	nop
 80061e8:	e000      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80061ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10b      	bne.n	800620c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80061f4:	4ba1      	ldr	r3, [pc, #644]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061f8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80061fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006200:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006204:	4a9d      	ldr	r2, [pc, #628]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006206:	430b      	orrs	r3, r1
 8006208:	6593      	str	r3, [r2, #88]	; 0x58
 800620a:	e003      	b.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800620c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006210:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621c:	f002 0308 	and.w	r3, r2, #8
 8006220:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006224:	2300      	movs	r3, #0
 8006226:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800622a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800622e:	460b      	mov	r3, r1
 8006230:	4313      	orrs	r3, r2
 8006232:	d01e      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006234:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006238:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800623c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006240:	d10c      	bne.n	800625c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006246:	3328      	adds	r3, #40	; 0x28
 8006248:	2102      	movs	r1, #2
 800624a:	4618      	mov	r0, r3
 800624c:	f001 fd26 	bl	8007c9c <RCCEx_PLL3_Config>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d002      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800625c:	4b87      	ldr	r3, [pc, #540]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800625e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006260:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006264:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800626c:	4a83      	ldr	r2, [pc, #524]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800626e:	430b      	orrs	r3, r1
 8006270:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627a:	f002 0310 	and.w	r3, r2, #16
 800627e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006282:	2300      	movs	r3, #0
 8006284:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006288:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800628c:	460b      	mov	r3, r1
 800628e:	4313      	orrs	r3, r2
 8006290:	d01e      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006296:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800629a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800629e:	d10c      	bne.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80062a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062a4:	3328      	adds	r3, #40	; 0x28
 80062a6:	2102      	movs	r1, #2
 80062a8:	4618      	mov	r0, r3
 80062aa:	f001 fcf7 	bl	8007c9c <RCCEx_PLL3_Config>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d002      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80062ba:	4b70      	ldr	r3, [pc, #448]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80062c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062ca:	4a6c      	ldr	r2, [pc, #432]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062cc:	430b      	orrs	r3, r1
 80062ce:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80062d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80062dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80062e0:	2300      	movs	r3, #0
 80062e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80062e6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80062ea:	460b      	mov	r3, r1
 80062ec:	4313      	orrs	r3, r2
 80062ee:	d03e      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80062f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80062f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062fc:	d022      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80062fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006302:	d81b      	bhi.n	800633c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006304:	2b00      	cmp	r3, #0
 8006306:	d003      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800630c:	d00b      	beq.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800630e:	e015      	b.n	800633c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006310:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006314:	3308      	adds	r3, #8
 8006316:	2100      	movs	r1, #0
 8006318:	4618      	mov	r0, r3
 800631a:	f001 fc0d 	bl	8007b38 <RCCEx_PLL2_Config>
 800631e:	4603      	mov	r3, r0
 8006320:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006324:	e00f      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006326:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800632a:	3328      	adds	r3, #40	; 0x28
 800632c:	2102      	movs	r1, #2
 800632e:	4618      	mov	r0, r3
 8006330:	f001 fcb4 	bl	8007c9c <RCCEx_PLL3_Config>
 8006334:	4603      	mov	r3, r0
 8006336:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800633a:	e004      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006342:	e000      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006344:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006346:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10b      	bne.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800634e:	4b4b      	ldr	r3, [pc, #300]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006352:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006356:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800635a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800635e:	4a47      	ldr	r2, [pc, #284]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006360:	430b      	orrs	r3, r1
 8006362:	6593      	str	r3, [r2, #88]	; 0x58
 8006364:	e003      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006366:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800636a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800636e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006376:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800637a:	67bb      	str	r3, [r7, #120]	; 0x78
 800637c:	2300      	movs	r3, #0
 800637e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006380:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006384:	460b      	mov	r3, r1
 8006386:	4313      	orrs	r3, r2
 8006388:	d03b      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800638a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800638e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006392:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006396:	d01f      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006398:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800639c:	d818      	bhi.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800639e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063a2:	d003      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80063a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063a8:	d007      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80063aa:	e011      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063ac:	4b33      	ldr	r3, [pc, #204]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b0:	4a32      	ldr	r2, [pc, #200]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80063b8:	e00f      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063be:	3328      	adds	r3, #40	; 0x28
 80063c0:	2101      	movs	r1, #1
 80063c2:	4618      	mov	r0, r3
 80063c4:	f001 fc6a 	bl	8007c9c <RCCEx_PLL3_Config>
 80063c8:	4603      	mov	r3, r0
 80063ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80063ce:	e004      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80063d6:	e000      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80063d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d10b      	bne.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063e2:	4b26      	ldr	r3, [pc, #152]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063e6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80063ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063f2:	4a22      	ldr	r2, [pc, #136]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063f4:	430b      	orrs	r3, r1
 80063f6:	6553      	str	r3, [r2, #84]	; 0x54
 80063f8:	e003      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006402:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800640e:	673b      	str	r3, [r7, #112]	; 0x70
 8006410:	2300      	movs	r3, #0
 8006412:	677b      	str	r3, [r7, #116]	; 0x74
 8006414:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006418:	460b      	mov	r3, r1
 800641a:	4313      	orrs	r3, r2
 800641c:	d034      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800641e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006424:	2b00      	cmp	r3, #0
 8006426:	d003      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800642c:	d007      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800642e:	e011      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006430:	4b12      	ldr	r3, [pc, #72]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006434:	4a11      	ldr	r2, [pc, #68]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006436:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800643a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800643c:	e00e      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800643e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006442:	3308      	adds	r3, #8
 8006444:	2102      	movs	r1, #2
 8006446:	4618      	mov	r0, r3
 8006448:	f001 fb76 	bl	8007b38 <RCCEx_PLL2_Config>
 800644c:	4603      	mov	r3, r0
 800644e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006452:	e003      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800645a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800645c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10d      	bne.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006464:	4b05      	ldr	r3, [pc, #20]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006468:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800646c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006472:	4a02      	ldr	r2, [pc, #8]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006474:	430b      	orrs	r3, r1
 8006476:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006478:	e006      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800647a:	bf00      	nop
 800647c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006480:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006484:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006488:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800648c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006490:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006494:	66bb      	str	r3, [r7, #104]	; 0x68
 8006496:	2300      	movs	r3, #0
 8006498:	66fb      	str	r3, [r7, #108]	; 0x6c
 800649a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800649e:	460b      	mov	r3, r1
 80064a0:	4313      	orrs	r3, r2
 80064a2:	d00c      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80064a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064a8:	3328      	adds	r3, #40	; 0x28
 80064aa:	2102      	movs	r1, #2
 80064ac:	4618      	mov	r0, r3
 80064ae:	f001 fbf5 	bl	8007c9c <RCCEx_PLL3_Config>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d002      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80064be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80064ca:	663b      	str	r3, [r7, #96]	; 0x60
 80064cc:	2300      	movs	r3, #0
 80064ce:	667b      	str	r3, [r7, #100]	; 0x64
 80064d0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80064d4:	460b      	mov	r3, r1
 80064d6:	4313      	orrs	r3, r2
 80064d8:	d038      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80064da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064e6:	d018      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80064e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064ec:	d811      	bhi.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80064ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064f2:	d014      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80064f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064f8:	d80b      	bhi.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d011      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80064fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006502:	d106      	bne.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006504:	4bc3      	ldr	r3, [pc, #780]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006508:	4ac2      	ldr	r2, [pc, #776]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800650a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800650e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006510:	e008      	b.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006518:	e004      	b.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800651a:	bf00      	nop
 800651c:	e002      	b.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800651e:	bf00      	nop
 8006520:	e000      	b.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006522:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006524:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10b      	bne.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800652c:	4bb9      	ldr	r3, [pc, #740]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800652e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006530:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006538:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800653c:	4ab5      	ldr	r2, [pc, #724]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800653e:	430b      	orrs	r3, r1
 8006540:	6553      	str	r3, [r2, #84]	; 0x54
 8006542:	e003      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006544:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006548:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800654c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006554:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006558:	65bb      	str	r3, [r7, #88]	; 0x58
 800655a:	2300      	movs	r3, #0
 800655c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800655e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006562:	460b      	mov	r3, r1
 8006564:	4313      	orrs	r3, r2
 8006566:	d009      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006568:	4baa      	ldr	r3, [pc, #680]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800656a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800656c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006576:	4aa7      	ldr	r2, [pc, #668]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006578:	430b      	orrs	r3, r1
 800657a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800657c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006584:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006588:	653b      	str	r3, [r7, #80]	; 0x50
 800658a:	2300      	movs	r3, #0
 800658c:	657b      	str	r3, [r7, #84]	; 0x54
 800658e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006592:	460b      	mov	r3, r1
 8006594:	4313      	orrs	r3, r2
 8006596:	d00a      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006598:	4b9e      	ldr	r3, [pc, #632]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80065a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80065a8:	4a9a      	ldr	r2, [pc, #616]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065aa:	430b      	orrs	r3, r1
 80065ac:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80065ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80065ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80065bc:	2300      	movs	r3, #0
 80065be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065c0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80065c4:	460b      	mov	r3, r1
 80065c6:	4313      	orrs	r3, r2
 80065c8:	d009      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80065ca:	4b92      	ldr	r3, [pc, #584]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ce:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80065d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065d8:	4a8e      	ldr	r2, [pc, #568]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065da:	430b      	orrs	r3, r1
 80065dc:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80065de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80065ea:	643b      	str	r3, [r7, #64]	; 0x40
 80065ec:	2300      	movs	r3, #0
 80065ee:	647b      	str	r3, [r7, #68]	; 0x44
 80065f0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80065f4:	460b      	mov	r3, r1
 80065f6:	4313      	orrs	r3, r2
 80065f8:	d00e      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80065fa:	4b86      	ldr	r3, [pc, #536]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	4a85      	ldr	r2, [pc, #532]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006600:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006604:	6113      	str	r3, [r2, #16]
 8006606:	4b83      	ldr	r3, [pc, #524]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006608:	6919      	ldr	r1, [r3, #16]
 800660a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800660e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006612:	4a80      	ldr	r2, [pc, #512]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006614:	430b      	orrs	r3, r1
 8006616:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006618:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800661c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006620:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006624:	63bb      	str	r3, [r7, #56]	; 0x38
 8006626:	2300      	movs	r3, #0
 8006628:	63fb      	str	r3, [r7, #60]	; 0x3c
 800662a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800662e:	460b      	mov	r3, r1
 8006630:	4313      	orrs	r3, r2
 8006632:	d009      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006634:	4b77      	ldr	r3, [pc, #476]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006638:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800663c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006642:	4a74      	ldr	r2, [pc, #464]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006644:	430b      	orrs	r3, r1
 8006646:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006648:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800664c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006650:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006654:	633b      	str	r3, [r7, #48]	; 0x30
 8006656:	2300      	movs	r3, #0
 8006658:	637b      	str	r3, [r7, #52]	; 0x34
 800665a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800665e:	460b      	mov	r3, r1
 8006660:	4313      	orrs	r3, r2
 8006662:	d00a      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006664:	4b6b      	ldr	r3, [pc, #428]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006668:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800666c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006670:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006674:	4a67      	ldr	r2, [pc, #412]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006676:	430b      	orrs	r3, r1
 8006678:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800667a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800667e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006682:	2100      	movs	r1, #0
 8006684:	62b9      	str	r1, [r7, #40]	; 0x28
 8006686:	f003 0301 	and.w	r3, r3, #1
 800668a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800668c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006690:	460b      	mov	r3, r1
 8006692:	4313      	orrs	r3, r2
 8006694:	d011      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800669a:	3308      	adds	r3, #8
 800669c:	2100      	movs	r1, #0
 800669e:	4618      	mov	r0, r3
 80066a0:	f001 fa4a 	bl	8007b38 <RCCEx_PLL2_Config>
 80066a4:	4603      	mov	r3, r0
 80066a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80066aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d003      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80066ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c2:	2100      	movs	r1, #0
 80066c4:	6239      	str	r1, [r7, #32]
 80066c6:	f003 0302 	and.w	r3, r3, #2
 80066ca:	627b      	str	r3, [r7, #36]	; 0x24
 80066cc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80066d0:	460b      	mov	r3, r1
 80066d2:	4313      	orrs	r3, r2
 80066d4:	d011      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066da:	3308      	adds	r3, #8
 80066dc:	2101      	movs	r1, #1
 80066de:	4618      	mov	r0, r3
 80066e0:	f001 fa2a 	bl	8007b38 <RCCEx_PLL2_Config>
 80066e4:	4603      	mov	r3, r0
 80066e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80066ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d003      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80066fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006702:	2100      	movs	r1, #0
 8006704:	61b9      	str	r1, [r7, #24]
 8006706:	f003 0304 	and.w	r3, r3, #4
 800670a:	61fb      	str	r3, [r7, #28]
 800670c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006710:	460b      	mov	r3, r1
 8006712:	4313      	orrs	r3, r2
 8006714:	d011      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800671a:	3308      	adds	r3, #8
 800671c:	2102      	movs	r1, #2
 800671e:	4618      	mov	r0, r3
 8006720:	f001 fa0a 	bl	8007b38 <RCCEx_PLL2_Config>
 8006724:	4603      	mov	r3, r0
 8006726:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800672a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800672e:	2b00      	cmp	r3, #0
 8006730:	d003      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006732:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006736:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800673a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800673e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006742:	2100      	movs	r1, #0
 8006744:	6139      	str	r1, [r7, #16]
 8006746:	f003 0308 	and.w	r3, r3, #8
 800674a:	617b      	str	r3, [r7, #20]
 800674c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006750:	460b      	mov	r3, r1
 8006752:	4313      	orrs	r3, r2
 8006754:	d011      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800675a:	3328      	adds	r3, #40	; 0x28
 800675c:	2100      	movs	r1, #0
 800675e:	4618      	mov	r0, r3
 8006760:	f001 fa9c 	bl	8007c9c <RCCEx_PLL3_Config>
 8006764:	4603      	mov	r3, r0
 8006766:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800676a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800676e:	2b00      	cmp	r3, #0
 8006770:	d003      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006772:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006776:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800677a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800677e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006782:	2100      	movs	r1, #0
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	f003 0310 	and.w	r3, r3, #16
 800678a:	60fb      	str	r3, [r7, #12]
 800678c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006790:	460b      	mov	r3, r1
 8006792:	4313      	orrs	r3, r2
 8006794:	d011      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800679a:	3328      	adds	r3, #40	; 0x28
 800679c:	2101      	movs	r1, #1
 800679e:	4618      	mov	r0, r3
 80067a0:	f001 fa7c 	bl	8007c9c <RCCEx_PLL3_Config>
 80067a4:	4603      	mov	r3, r0
 80067a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80067aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d003      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80067ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c2:	2100      	movs	r1, #0
 80067c4:	6039      	str	r1, [r7, #0]
 80067c6:	f003 0320 	and.w	r3, r3, #32
 80067ca:	607b      	str	r3, [r7, #4]
 80067cc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80067d0:	460b      	mov	r3, r1
 80067d2:	4313      	orrs	r3, r2
 80067d4:	d011      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067da:	3328      	adds	r3, #40	; 0x28
 80067dc:	2102      	movs	r1, #2
 80067de:	4618      	mov	r0, r3
 80067e0:	f001 fa5c 	bl	8007c9c <RCCEx_PLL3_Config>
 80067e4:	4603      	mov	r3, r0
 80067e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80067ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d003      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80067fa:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d101      	bne.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006802:	2300      	movs	r3, #0
 8006804:	e000      	b.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
}
 8006808:	4618      	mov	r0, r3
 800680a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800680e:	46bd      	mov	sp, r7
 8006810:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006814:	58024400 	.word	0x58024400

08006818 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b090      	sub	sp, #64	; 0x40
 800681c:	af00      	add	r7, sp, #0
 800681e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006822:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006826:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800682a:	430b      	orrs	r3, r1
 800682c:	f040 8094 	bne.w	8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006830:	4b9e      	ldr	r3, [pc, #632]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006834:	f003 0307 	and.w	r3, r3, #7
 8006838:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800683a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683c:	2b04      	cmp	r3, #4
 800683e:	f200 8087 	bhi.w	8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006842:	a201      	add	r2, pc, #4	; (adr r2, 8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006848:	0800685d 	.word	0x0800685d
 800684c:	08006885 	.word	0x08006885
 8006850:	080068ad 	.word	0x080068ad
 8006854:	08006949 	.word	0x08006949
 8006858:	080068d5 	.word	0x080068d5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800685c:	4b93      	ldr	r3, [pc, #588]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006864:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006868:	d108      	bne.n	800687c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800686a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800686e:	4618      	mov	r0, r3
 8006870:	f001 f810 	bl	8007894 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006876:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006878:	f000 bd45 	b.w	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800687c:	2300      	movs	r3, #0
 800687e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006880:	f000 bd41 	b.w	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006884:	4b89      	ldr	r3, [pc, #548]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800688c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006890:	d108      	bne.n	80068a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006892:	f107 0318 	add.w	r3, r7, #24
 8006896:	4618      	mov	r0, r3
 8006898:	f000 fd54 	bl	8007344 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068a0:	f000 bd31 	b.w	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068a4:	2300      	movs	r3, #0
 80068a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068a8:	f000 bd2d 	b.w	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80068ac:	4b7f      	ldr	r3, [pc, #508]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068b8:	d108      	bne.n	80068cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068ba:	f107 030c 	add.w	r3, r7, #12
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 fe94 	bl	80075ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068c8:	f000 bd1d 	b.w	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068cc:	2300      	movs	r3, #0
 80068ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068d0:	f000 bd19 	b.w	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80068d4:	4b75      	ldr	r3, [pc, #468]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80068dc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80068de:	4b73      	ldr	r3, [pc, #460]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 0304 	and.w	r3, r3, #4
 80068e6:	2b04      	cmp	r3, #4
 80068e8:	d10c      	bne.n	8006904 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80068ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d109      	bne.n	8006904 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068f0:	4b6e      	ldr	r3, [pc, #440]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	08db      	lsrs	r3, r3, #3
 80068f6:	f003 0303 	and.w	r3, r3, #3
 80068fa:	4a6d      	ldr	r2, [pc, #436]	; (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80068fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006900:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006902:	e01f      	b.n	8006944 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006904:	4b69      	ldr	r3, [pc, #420]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800690c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006910:	d106      	bne.n	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006914:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006918:	d102      	bne.n	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800691a:	4b66      	ldr	r3, [pc, #408]	; (8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800691c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800691e:	e011      	b.n	8006944 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006920:	4b62      	ldr	r3, [pc, #392]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006928:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800692c:	d106      	bne.n	800693c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800692e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006930:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006934:	d102      	bne.n	800693c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006936:	4b60      	ldr	r3, [pc, #384]	; (8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006938:	63fb      	str	r3, [r7, #60]	; 0x3c
 800693a:	e003      	b.n	8006944 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800693c:	2300      	movs	r3, #0
 800693e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006940:	f000 bce1 	b.w	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006944:	f000 bcdf 	b.w	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006948:	4b5c      	ldr	r3, [pc, #368]	; (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800694a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800694c:	f000 bcdb 	b.w	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006950:	2300      	movs	r3, #0
 8006952:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006954:	f000 bcd7 	b.w	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006958:	e9d7 2300 	ldrd	r2, r3, [r7]
 800695c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8006960:	430b      	orrs	r3, r1
 8006962:	f040 80ad 	bne.w	8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006966:	4b51      	ldr	r3, [pc, #324]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800696a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800696e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006976:	d056      	beq.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800697e:	f200 8090 	bhi.w	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006984:	2bc0      	cmp	r3, #192	; 0xc0
 8006986:	f000 8088 	beq.w	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800698a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698c:	2bc0      	cmp	r3, #192	; 0xc0
 800698e:	f200 8088 	bhi.w	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006994:	2b80      	cmp	r3, #128	; 0x80
 8006996:	d032      	beq.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699a:	2b80      	cmp	r3, #128	; 0x80
 800699c:	f200 8081 	bhi.w	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80069a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d003      	beq.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80069a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a8:	2b40      	cmp	r3, #64	; 0x40
 80069aa:	d014      	beq.n	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80069ac:	e079      	b.n	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80069ae:	4b3f      	ldr	r3, [pc, #252]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069ba:	d108      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069c0:	4618      	mov	r0, r3
 80069c2:	f000 ff67 	bl	8007894 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80069c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069ca:	f000 bc9c 	b.w	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069ce:	2300      	movs	r3, #0
 80069d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069d2:	f000 bc98 	b.w	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069d6:	4b35      	ldr	r3, [pc, #212]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069e2:	d108      	bne.n	80069f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069e4:	f107 0318 	add.w	r3, r7, #24
 80069e8:	4618      	mov	r0, r3
 80069ea:	f000 fcab 	bl	8007344 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069f2:	f000 bc88 	b.w	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069f6:	2300      	movs	r3, #0
 80069f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069fa:	f000 bc84 	b.w	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069fe:	4b2b      	ldr	r3, [pc, #172]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a0a:	d108      	bne.n	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a0c:	f107 030c 	add.w	r3, r7, #12
 8006a10:	4618      	mov	r0, r3
 8006a12:	f000 fdeb 	bl	80075ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a1a:	f000 bc74 	b.w	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a22:	f000 bc70 	b.w	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006a26:	4b21      	ldr	r3, [pc, #132]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a2e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a30:	4b1e      	ldr	r3, [pc, #120]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 0304 	and.w	r3, r3, #4
 8006a38:	2b04      	cmp	r3, #4
 8006a3a:	d10c      	bne.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d109      	bne.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a42:	4b1a      	ldr	r3, [pc, #104]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	08db      	lsrs	r3, r3, #3
 8006a48:	f003 0303 	and.w	r3, r3, #3
 8006a4c:	4a18      	ldr	r2, [pc, #96]	; (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a54:	e01f      	b.n	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a56:	4b15      	ldr	r3, [pc, #84]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a62:	d106      	bne.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a6a:	d102      	bne.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006a6c:	4b11      	ldr	r3, [pc, #68]	; (8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a70:	e011      	b.n	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a72:	4b0e      	ldr	r3, [pc, #56]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a7e:	d106      	bne.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a86:	d102      	bne.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006a88:	4b0b      	ldr	r3, [pc, #44]	; (8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a8c:	e003      	b.n	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006a92:	f000 bc38 	b.w	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a96:	f000 bc36 	b.w	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006a9a:	4b08      	ldr	r3, [pc, #32]	; (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a9e:	f000 bc32 	b.w	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006aa6:	f000 bc2e 	b.w	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006aaa:	bf00      	nop
 8006aac:	58024400 	.word	0x58024400
 8006ab0:	03d09000 	.word	0x03d09000
 8006ab4:	003d0900 	.word	0x003d0900
 8006ab8:	017d7840 	.word	0x017d7840
 8006abc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006ac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ac4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006ac8:	430b      	orrs	r3, r1
 8006aca:	f040 809c 	bne.w	8006c06 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006ace:	4b9e      	ldr	r3, [pc, #632]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ad2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006ad6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ada:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ade:	d054      	beq.n	8006b8a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ae6:	f200 808b 	bhi.w	8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006af0:	f000 8083 	beq.w	8006bfa <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006afa:	f200 8081 	bhi.w	8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b04:	d02f      	beq.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b0c:	d878      	bhi.n	8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d004      	beq.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b1a:	d012      	beq.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006b1c:	e070      	b.n	8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b1e:	4b8a      	ldr	r3, [pc, #552]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b2a:	d107      	bne.n	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b30:	4618      	mov	r0, r3
 8006b32:	f000 feaf 	bl	8007894 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b3a:	e3e4      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b40:	e3e1      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b42:	4b81      	ldr	r3, [pc, #516]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b4e:	d107      	bne.n	8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b50:	f107 0318 	add.w	r3, r7, #24
 8006b54:	4618      	mov	r0, r3
 8006b56:	f000 fbf5 	bl	8007344 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b5e:	e3d2      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b60:	2300      	movs	r3, #0
 8006b62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b64:	e3cf      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b66:	4b78      	ldr	r3, [pc, #480]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b72:	d107      	bne.n	8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b74:	f107 030c 	add.w	r3, r7, #12
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f000 fd37 	bl	80075ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b82:	e3c0      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b84:	2300      	movs	r3, #0
 8006b86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b88:	e3bd      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006b8a:	4b6f      	ldr	r3, [pc, #444]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b8e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b92:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b94:	4b6c      	ldr	r3, [pc, #432]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 0304 	and.w	r3, r3, #4
 8006b9c:	2b04      	cmp	r3, #4
 8006b9e:	d10c      	bne.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d109      	bne.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ba6:	4b68      	ldr	r3, [pc, #416]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	08db      	lsrs	r3, r3, #3
 8006bac:	f003 0303 	and.w	r3, r3, #3
 8006bb0:	4a66      	ldr	r2, [pc, #408]	; (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8006bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bb8:	e01e      	b.n	8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006bba:	4b63      	ldr	r3, [pc, #396]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bc6:	d106      	bne.n	8006bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bce:	d102      	bne.n	8006bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006bd0:	4b5f      	ldr	r3, [pc, #380]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bd4:	e010      	b.n	8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006bd6:	4b5c      	ldr	r3, [pc, #368]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006be2:	d106      	bne.n	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006be6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bea:	d102      	bne.n	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006bec:	4b59      	ldr	r3, [pc, #356]	; (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006bee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bf0:	e002      	b.n	8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006bf6:	e386      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006bf8:	e385      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006bfa:	4b57      	ldr	r3, [pc, #348]	; (8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bfe:	e382      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006c00:	2300      	movs	r3, #0
 8006c02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c04:	e37f      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006c06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c0a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8006c0e:	430b      	orrs	r3, r1
 8006c10:	f040 80a7 	bne.w	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006c14:	4b4c      	ldr	r3, [pc, #304]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c18:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006c1c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c24:	d055      	beq.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c2c:	f200 8096 	bhi.w	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c32:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006c36:	f000 8084 	beq.w	8006d42 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006c40:	f200 808c 	bhi.w	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c4a:	d030      	beq.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c52:	f200 8083 	bhi.w	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d004      	beq.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c62:	d012      	beq.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006c64:	e07a      	b.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c66:	4b38      	ldr	r3, [pc, #224]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c72:	d107      	bne.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f000 fe0b 	bl	8007894 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c82:	e340      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c84:	2300      	movs	r3, #0
 8006c86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c88:	e33d      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c8a:	4b2f      	ldr	r3, [pc, #188]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c96:	d107      	bne.n	8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c98:	f107 0318 	add.w	r3, r7, #24
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f000 fb51 	bl	8007344 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ca6:	e32e      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cac:	e32b      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006cae:	4b26      	ldr	r3, [pc, #152]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cba:	d107      	bne.n	8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cbc:	f107 030c 	add.w	r3, r7, #12
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f000 fc93 	bl	80075ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cca:	e31c      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cd0:	e319      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006cd2:	4b1d      	ldr	r3, [pc, #116]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cd6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006cda:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006cdc:	4b1a      	ldr	r3, [pc, #104]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0304 	and.w	r3, r3, #4
 8006ce4:	2b04      	cmp	r3, #4
 8006ce6:	d10c      	bne.n	8006d02 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d109      	bne.n	8006d02 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006cee:	4b16      	ldr	r3, [pc, #88]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	08db      	lsrs	r3, r3, #3
 8006cf4:	f003 0303 	and.w	r3, r3, #3
 8006cf8:	4a14      	ldr	r2, [pc, #80]	; (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8006cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d00:	e01e      	b.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d02:	4b11      	ldr	r3, [pc, #68]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d0e:	d106      	bne.n	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d16:	d102      	bne.n	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006d18:	4b0d      	ldr	r3, [pc, #52]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d1c:	e010      	b.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d1e:	4b0a      	ldr	r3, [pc, #40]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d2a:	d106      	bne.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d32:	d102      	bne.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006d34:	4b07      	ldr	r3, [pc, #28]	; (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006d36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d38:	e002      	b.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006d3e:	e2e2      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d40:	e2e1      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006d42:	4b05      	ldr	r3, [pc, #20]	; (8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006d44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d46:	e2de      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d48:	58024400 	.word	0x58024400
 8006d4c:	03d09000 	.word	0x03d09000
 8006d50:	003d0900 	.word	0x003d0900
 8006d54:	017d7840 	.word	0x017d7840
 8006d58:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d60:	e2d1      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006d62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d66:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006d6a:	430b      	orrs	r3, r1
 8006d6c:	f040 809c 	bne.w	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006d70:	4b93      	ldr	r3, [pc, #588]	; (8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d74:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006d78:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d80:	d054      	beq.n	8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d88:	f200 808b 	bhi.w	8006ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d92:	f000 8083 	beq.w	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d9c:	f200 8081 	bhi.w	8006ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006da6:	d02f      	beq.n	8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006daa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dae:	d878      	bhi.n	8006ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d004      	beq.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dbc:	d012      	beq.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006dbe:	e070      	b.n	8006ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006dc0:	4b7f      	ldr	r3, [pc, #508]	; (8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006dcc:	d107      	bne.n	8006dde <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f000 fd5e 	bl	8007894 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ddc:	e293      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006dde:	2300      	movs	r3, #0
 8006de0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006de2:	e290      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006de4:	4b76      	ldr	r3, [pc, #472]	; (8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006df0:	d107      	bne.n	8006e02 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006df2:	f107 0318 	add.w	r3, r7, #24
 8006df6:	4618      	mov	r0, r3
 8006df8:	f000 faa4 	bl	8007344 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e00:	e281      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e02:	2300      	movs	r3, #0
 8006e04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e06:	e27e      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e08:	4b6d      	ldr	r3, [pc, #436]	; (8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e14:	d107      	bne.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e16:	f107 030c 	add.w	r3, r7, #12
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f000 fbe6 	bl	80075ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e24:	e26f      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e26:	2300      	movs	r3, #0
 8006e28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e2a:	e26c      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e2c:	4b64      	ldr	r3, [pc, #400]	; (8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e34:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e36:	4b62      	ldr	r3, [pc, #392]	; (8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0304 	and.w	r3, r3, #4
 8006e3e:	2b04      	cmp	r3, #4
 8006e40:	d10c      	bne.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d109      	bne.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e48:	4b5d      	ldr	r3, [pc, #372]	; (8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	08db      	lsrs	r3, r3, #3
 8006e4e:	f003 0303 	and.w	r3, r3, #3
 8006e52:	4a5c      	ldr	r2, [pc, #368]	; (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006e54:	fa22 f303 	lsr.w	r3, r2, r3
 8006e58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e5a:	e01e      	b.n	8006e9a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e5c:	4b58      	ldr	r3, [pc, #352]	; (8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e68:	d106      	bne.n	8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e70:	d102      	bne.n	8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006e72:	4b55      	ldr	r3, [pc, #340]	; (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006e74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e76:	e010      	b.n	8006e9a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e78:	4b51      	ldr	r3, [pc, #324]	; (8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e84:	d106      	bne.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e8c:	d102      	bne.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006e8e:	4b4f      	ldr	r3, [pc, #316]	; (8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006e90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e92:	e002      	b.n	8006e9a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006e94:	2300      	movs	r3, #0
 8006e96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006e98:	e235      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006e9a:	e234      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006e9c:	4b4c      	ldr	r3, [pc, #304]	; (8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ea0:	e231      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ea6:	e22e      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006ea8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006eac:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006eb0:	430b      	orrs	r3, r1
 8006eb2:	f040 808f 	bne.w	8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006eb6:	4b42      	ldr	r3, [pc, #264]	; (8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eba:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006ebe:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8006ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ec6:	d06b      	beq.n	8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ece:	d874      	bhi.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ed6:	d056      	beq.n	8006f86 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ede:	d86c      	bhi.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ee6:	d03b      	beq.n	8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006eee:	d864      	bhi.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ef6:	d021      	beq.n	8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006efe:	d85c      	bhi.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d004      	beq.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f0c:	d004      	beq.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006f0e:	e054      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006f10:	f7fe fa4c 	bl	80053ac <HAL_RCC_GetPCLK1Freq>
 8006f14:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006f16:	e1f6      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f18:	4b29      	ldr	r3, [pc, #164]	; (8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f24:	d107      	bne.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f26:	f107 0318 	add.w	r3, r7, #24
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f000 fa0a 	bl	8007344 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f34:	e1e7      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f36:	2300      	movs	r3, #0
 8006f38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f3a:	e1e4      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f3c:	4b20      	ldr	r3, [pc, #128]	; (8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f48:	d107      	bne.n	8006f5a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f4a:	f107 030c 	add.w	r3, r7, #12
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f000 fb4c 	bl	80075ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f58:	e1d5      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f5e:	e1d2      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f60:	4b17      	ldr	r3, [pc, #92]	; (8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0304 	and.w	r3, r3, #4
 8006f68:	2b04      	cmp	r3, #4
 8006f6a:	d109      	bne.n	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f6c:	4b14      	ldr	r3, [pc, #80]	; (8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	08db      	lsrs	r3, r3, #3
 8006f72:	f003 0303 	and.w	r3, r3, #3
 8006f76:	4a13      	ldr	r2, [pc, #76]	; (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006f78:	fa22 f303 	lsr.w	r3, r2, r3
 8006f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f7e:	e1c2      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f80:	2300      	movs	r3, #0
 8006f82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f84:	e1bf      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006f86:	4b0e      	ldr	r3, [pc, #56]	; (8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f92:	d102      	bne.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006f94:	4b0c      	ldr	r3, [pc, #48]	; (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006f96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f98:	e1b5      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f9e:	e1b2      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006fa0:	4b07      	ldr	r3, [pc, #28]	; (8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fac:	d102      	bne.n	8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006fae:	4b07      	ldr	r3, [pc, #28]	; (8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fb2:	e1a8      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fb8:	e1a5      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fbe:	e1a2      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006fc0:	58024400 	.word	0x58024400
 8006fc4:	03d09000 	.word	0x03d09000
 8006fc8:	003d0900 	.word	0x003d0900
 8006fcc:	017d7840 	.word	0x017d7840
 8006fd0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006fd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fd8:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8006fdc:	430b      	orrs	r3, r1
 8006fde:	d173      	bne.n	80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006fe0:	4b9c      	ldr	r3, [pc, #624]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fe4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006fe8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ff0:	d02f      	beq.n	8007052 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ff8:	d863      	bhi.n	80070c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d004      	beq.n	800700a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007006:	d012      	beq.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007008:	e05b      	b.n	80070c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800700a:	4b92      	ldr	r3, [pc, #584]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007012:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007016:	d107      	bne.n	8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007018:	f107 0318 	add.w	r3, r7, #24
 800701c:	4618      	mov	r0, r3
 800701e:	f000 f991 	bl	8007344 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007026:	e16e      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007028:	2300      	movs	r3, #0
 800702a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800702c:	e16b      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800702e:	4b89      	ldr	r3, [pc, #548]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007036:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800703a:	d107      	bne.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800703c:	f107 030c 	add.w	r3, r7, #12
 8007040:	4618      	mov	r0, r3
 8007042:	f000 fad3 	bl	80075ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800704a:	e15c      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800704c:	2300      	movs	r3, #0
 800704e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007050:	e159      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007052:	4b80      	ldr	r3, [pc, #512]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007056:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800705a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800705c:	4b7d      	ldr	r3, [pc, #500]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0304 	and.w	r3, r3, #4
 8007064:	2b04      	cmp	r3, #4
 8007066:	d10c      	bne.n	8007082 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800706a:	2b00      	cmp	r3, #0
 800706c:	d109      	bne.n	8007082 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800706e:	4b79      	ldr	r3, [pc, #484]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	08db      	lsrs	r3, r3, #3
 8007074:	f003 0303 	and.w	r3, r3, #3
 8007078:	4a77      	ldr	r2, [pc, #476]	; (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800707a:	fa22 f303 	lsr.w	r3, r2, r3
 800707e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007080:	e01e      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007082:	4b74      	ldr	r3, [pc, #464]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800708a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800708e:	d106      	bne.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007092:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007096:	d102      	bne.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007098:	4b70      	ldr	r3, [pc, #448]	; (800725c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800709a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800709c:	e010      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800709e:	4b6d      	ldr	r3, [pc, #436]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070aa:	d106      	bne.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80070ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070b2:	d102      	bne.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80070b4:	4b6a      	ldr	r3, [pc, #424]	; (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80070b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070b8:	e002      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80070ba:	2300      	movs	r3, #0
 80070bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80070be:	e122      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80070c0:	e121      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80070c2:	2300      	movs	r3, #0
 80070c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070c6:	e11e      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80070c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070cc:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80070d0:	430b      	orrs	r3, r1
 80070d2:	d133      	bne.n	800713c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80070d4:	4b5f      	ldr	r3, [pc, #380]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070dc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80070de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d004      	beq.n	80070ee <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80070e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070ea:	d012      	beq.n	8007112 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80070ec:	e023      	b.n	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80070ee:	4b59      	ldr	r3, [pc, #356]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070fa:	d107      	bne.n	800710c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007100:	4618      	mov	r0, r3
 8007102:	f000 fbc7 	bl	8007894 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007108:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800710a:	e0fc      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800710c:	2300      	movs	r3, #0
 800710e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007110:	e0f9      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007112:	4b50      	ldr	r3, [pc, #320]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800711a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800711e:	d107      	bne.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007120:	f107 0318 	add.w	r3, r7, #24
 8007124:	4618      	mov	r0, r3
 8007126:	f000 f90d 	bl	8007344 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800712a:	6a3b      	ldr	r3, [r7, #32]
 800712c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800712e:	e0ea      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007130:	2300      	movs	r3, #0
 8007132:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007134:	e0e7      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007136:	2300      	movs	r3, #0
 8007138:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800713a:	e0e4      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800713c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007140:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8007144:	430b      	orrs	r3, r1
 8007146:	f040 808d 	bne.w	8007264 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800714a:	4b42      	ldr	r3, [pc, #264]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800714c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800714e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007152:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007156:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800715a:	d06b      	beq.n	8007234 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800715c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007162:	d874      	bhi.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800716a:	d056      	beq.n	800721a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800716c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007172:	d86c      	bhi.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007176:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800717a:	d03b      	beq.n	80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800717c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007182:	d864      	bhi.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007186:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800718a:	d021      	beq.n	80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800718c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007192:	d85c      	bhi.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007196:	2b00      	cmp	r3, #0
 8007198:	d004      	beq.n	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800719a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071a0:	d004      	beq.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80071a2:	e054      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80071a4:	f000 f8b8 	bl	8007318 <HAL_RCCEx_GetD3PCLK1Freq>
 80071a8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80071aa:	e0ac      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80071ac:	4b29      	ldr	r3, [pc, #164]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071b8:	d107      	bne.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071ba:	f107 0318 	add.w	r3, r7, #24
 80071be:	4618      	mov	r0, r3
 80071c0:	f000 f8c0 	bl	8007344 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071c8:	e09d      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071ca:	2300      	movs	r3, #0
 80071cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071ce:	e09a      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80071d0:	4b20      	ldr	r3, [pc, #128]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071dc:	d107      	bne.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071de:	f107 030c 	add.w	r3, r7, #12
 80071e2:	4618      	mov	r0, r3
 80071e4:	f000 fa02 	bl	80075ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071ec:	e08b      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071ee:	2300      	movs	r3, #0
 80071f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071f2:	e088      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80071f4:	4b17      	ldr	r3, [pc, #92]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 0304 	and.w	r3, r3, #4
 80071fc:	2b04      	cmp	r3, #4
 80071fe:	d109      	bne.n	8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007200:	4b14      	ldr	r3, [pc, #80]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	08db      	lsrs	r3, r3, #3
 8007206:	f003 0303 	and.w	r3, r3, #3
 800720a:	4a13      	ldr	r2, [pc, #76]	; (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800720c:	fa22 f303 	lsr.w	r3, r2, r3
 8007210:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007212:	e078      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007214:	2300      	movs	r3, #0
 8007216:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007218:	e075      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800721a:	4b0e      	ldr	r3, [pc, #56]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007222:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007226:	d102      	bne.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007228:	4b0c      	ldr	r3, [pc, #48]	; (800725c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800722a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800722c:	e06b      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800722e:	2300      	movs	r3, #0
 8007230:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007232:	e068      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007234:	4b07      	ldr	r3, [pc, #28]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800723c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007240:	d102      	bne.n	8007248 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007242:	4b07      	ldr	r3, [pc, #28]	; (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007244:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007246:	e05e      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007248:	2300      	movs	r3, #0
 800724a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800724c:	e05b      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800724e:	2300      	movs	r3, #0
 8007250:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007252:	e058      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007254:	58024400 	.word	0x58024400
 8007258:	03d09000 	.word	0x03d09000
 800725c:	003d0900 	.word	0x003d0900
 8007260:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007264:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007268:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800726c:	430b      	orrs	r3, r1
 800726e:	d148      	bne.n	8007302 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007270:	4b27      	ldr	r3, [pc, #156]	; (8007310 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007274:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007278:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800727a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800727c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007280:	d02a      	beq.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007284:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007288:	d838      	bhi.n	80072fc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800728a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800728c:	2b00      	cmp	r3, #0
 800728e:	d004      	beq.n	800729a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007292:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007296:	d00d      	beq.n	80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007298:	e030      	b.n	80072fc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800729a:	4b1d      	ldr	r3, [pc, #116]	; (8007310 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072a6:	d102      	bne.n	80072ae <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80072a8:	4b1a      	ldr	r3, [pc, #104]	; (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80072aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072ac:	e02b      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072ae:	2300      	movs	r3, #0
 80072b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072b2:	e028      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80072b4:	4b16      	ldr	r3, [pc, #88]	; (8007310 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072c0:	d107      	bne.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80072c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072c6:	4618      	mov	r0, r3
 80072c8:	f000 fae4 	bl	8007894 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80072cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072d0:	e019      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072d2:	2300      	movs	r3, #0
 80072d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072d6:	e016      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80072d8:	4b0d      	ldr	r3, [pc, #52]	; (8007310 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072e4:	d107      	bne.n	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072e6:	f107 0318 	add.w	r3, r7, #24
 80072ea:	4618      	mov	r0, r3
 80072ec:	f000 f82a 	bl	8007344 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072f4:	e007      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072f6:	2300      	movs	r3, #0
 80072f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072fa:	e004      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80072fc:	2300      	movs	r3, #0
 80072fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007300:	e001      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007302:	2300      	movs	r3, #0
 8007304:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8007306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007308:	4618      	mov	r0, r3
 800730a:	3740      	adds	r7, #64	; 0x40
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}
 8007310:	58024400 	.word	0x58024400
 8007314:	017d7840 	.word	0x017d7840

08007318 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800731c:	f7fe f816 	bl	800534c <HAL_RCC_GetHCLKFreq>
 8007320:	4602      	mov	r2, r0
 8007322:	4b06      	ldr	r3, [pc, #24]	; (800733c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007324:	6a1b      	ldr	r3, [r3, #32]
 8007326:	091b      	lsrs	r3, r3, #4
 8007328:	f003 0307 	and.w	r3, r3, #7
 800732c:	4904      	ldr	r1, [pc, #16]	; (8007340 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800732e:	5ccb      	ldrb	r3, [r1, r3]
 8007330:	f003 031f 	and.w	r3, r3, #31
 8007334:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007338:	4618      	mov	r0, r3
 800733a:	bd80      	pop	{r7, pc}
 800733c:	58024400 	.word	0x58024400
 8007340:	0800c8b8 	.word	0x0800c8b8

08007344 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007344:	b480      	push	{r7}
 8007346:	b089      	sub	sp, #36	; 0x24
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800734c:	4ba1      	ldr	r3, [pc, #644]	; (80075d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800734e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007350:	f003 0303 	and.w	r3, r3, #3
 8007354:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007356:	4b9f      	ldr	r3, [pc, #636]	; (80075d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800735a:	0b1b      	lsrs	r3, r3, #12
 800735c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007360:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007362:	4b9c      	ldr	r3, [pc, #624]	; (80075d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007366:	091b      	lsrs	r3, r3, #4
 8007368:	f003 0301 	and.w	r3, r3, #1
 800736c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800736e:	4b99      	ldr	r3, [pc, #612]	; (80075d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007372:	08db      	lsrs	r3, r3, #3
 8007374:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007378:	693a      	ldr	r2, [r7, #16]
 800737a:	fb02 f303 	mul.w	r3, r2, r3
 800737e:	ee07 3a90 	vmov	s15, r3
 8007382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007386:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	2b00      	cmp	r3, #0
 800738e:	f000 8111 	beq.w	80075b4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	2b02      	cmp	r3, #2
 8007396:	f000 8083 	beq.w	80074a0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	2b02      	cmp	r3, #2
 800739e:	f200 80a1 	bhi.w	80074e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d003      	beq.n	80073b0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d056      	beq.n	800745c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80073ae:	e099      	b.n	80074e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073b0:	4b88      	ldr	r3, [pc, #544]	; (80075d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 0320 	and.w	r3, r3, #32
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d02d      	beq.n	8007418 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80073bc:	4b85      	ldr	r3, [pc, #532]	; (80075d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	08db      	lsrs	r3, r3, #3
 80073c2:	f003 0303 	and.w	r3, r3, #3
 80073c6:	4a84      	ldr	r2, [pc, #528]	; (80075d8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80073c8:	fa22 f303 	lsr.w	r3, r2, r3
 80073cc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	ee07 3a90 	vmov	s15, r3
 80073d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	ee07 3a90 	vmov	s15, r3
 80073de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073e6:	4b7b      	ldr	r3, [pc, #492]	; (80075d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ee:	ee07 3a90 	vmov	s15, r3
 80073f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80073fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 80075dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800740a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800740e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007412:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007416:	e087      	b.n	8007528 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	ee07 3a90 	vmov	s15, r3
 800741e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007422:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80075e0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800742a:	4b6a      	ldr	r3, [pc, #424]	; (80075d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800742c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800742e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007432:	ee07 3a90 	vmov	s15, r3
 8007436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800743a:	ed97 6a03 	vldr	s12, [r7, #12]
 800743e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80075dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800744a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800744e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007456:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800745a:	e065      	b.n	8007528 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	ee07 3a90 	vmov	s15, r3
 8007462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007466:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80075e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800746a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800746e:	4b59      	ldr	r3, [pc, #356]	; (80075d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007476:	ee07 3a90 	vmov	s15, r3
 800747a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800747e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007482:	eddf 5a56 	vldr	s11, [pc, #344]	; 80075dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800748a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800748e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800749a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800749e:	e043      	b.n	8007528 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	ee07 3a90 	vmov	s15, r3
 80074a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80075e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80074ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074b2:	4b48      	ldr	r3, [pc, #288]	; (80075d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074ba:	ee07 3a90 	vmov	s15, r3
 80074be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80074c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80075dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074e2:	e021      	b.n	8007528 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	ee07 3a90 	vmov	s15, r3
 80074ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80075e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80074f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074f6:	4b37      	ldr	r3, [pc, #220]	; (80075d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074fe:	ee07 3a90 	vmov	s15, r3
 8007502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007506:	ed97 6a03 	vldr	s12, [r7, #12]
 800750a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80075dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800750e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007516:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800751a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800751e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007522:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007526:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007528:	4b2a      	ldr	r3, [pc, #168]	; (80075d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800752a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800752c:	0a5b      	lsrs	r3, r3, #9
 800752e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007532:	ee07 3a90 	vmov	s15, r3
 8007536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800753a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800753e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007542:	edd7 6a07 	vldr	s13, [r7, #28]
 8007546:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800754a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800754e:	ee17 2a90 	vmov	r2, s15
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007556:	4b1f      	ldr	r3, [pc, #124]	; (80075d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755a:	0c1b      	lsrs	r3, r3, #16
 800755c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007560:	ee07 3a90 	vmov	s15, r3
 8007564:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007568:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800756c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007570:	edd7 6a07 	vldr	s13, [r7, #28]
 8007574:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007578:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800757c:	ee17 2a90 	vmov	r2, s15
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007584:	4b13      	ldr	r3, [pc, #76]	; (80075d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007588:	0e1b      	lsrs	r3, r3, #24
 800758a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800758e:	ee07 3a90 	vmov	s15, r3
 8007592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007596:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800759a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800759e:	edd7 6a07 	vldr	s13, [r7, #28]
 80075a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075aa:	ee17 2a90 	vmov	r2, s15
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80075b2:	e008      	b.n	80075c6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	609a      	str	r2, [r3, #8]
}
 80075c6:	bf00      	nop
 80075c8:	3724      	adds	r7, #36	; 0x24
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	58024400 	.word	0x58024400
 80075d8:	03d09000 	.word	0x03d09000
 80075dc:	46000000 	.word	0x46000000
 80075e0:	4c742400 	.word	0x4c742400
 80075e4:	4a742400 	.word	0x4a742400
 80075e8:	4bbebc20 	.word	0x4bbebc20

080075ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b089      	sub	sp, #36	; 0x24
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80075f4:	4ba1      	ldr	r3, [pc, #644]	; (800787c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f8:	f003 0303 	and.w	r3, r3, #3
 80075fc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80075fe:	4b9f      	ldr	r3, [pc, #636]	; (800787c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007602:	0d1b      	lsrs	r3, r3, #20
 8007604:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007608:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800760a:	4b9c      	ldr	r3, [pc, #624]	; (800787c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800760c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800760e:	0a1b      	lsrs	r3, r3, #8
 8007610:	f003 0301 	and.w	r3, r3, #1
 8007614:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007616:	4b99      	ldr	r3, [pc, #612]	; (800787c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800761a:	08db      	lsrs	r3, r3, #3
 800761c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007620:	693a      	ldr	r2, [r7, #16]
 8007622:	fb02 f303 	mul.w	r3, r2, r3
 8007626:	ee07 3a90 	vmov	s15, r3
 800762a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800762e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	2b00      	cmp	r3, #0
 8007636:	f000 8111 	beq.w	800785c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	2b02      	cmp	r3, #2
 800763e:	f000 8083 	beq.w	8007748 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	2b02      	cmp	r3, #2
 8007646:	f200 80a1 	bhi.w	800778c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d003      	beq.n	8007658 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d056      	beq.n	8007704 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007656:	e099      	b.n	800778c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007658:	4b88      	ldr	r3, [pc, #544]	; (800787c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 0320 	and.w	r3, r3, #32
 8007660:	2b00      	cmp	r3, #0
 8007662:	d02d      	beq.n	80076c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007664:	4b85      	ldr	r3, [pc, #532]	; (800787c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	08db      	lsrs	r3, r3, #3
 800766a:	f003 0303 	and.w	r3, r3, #3
 800766e:	4a84      	ldr	r2, [pc, #528]	; (8007880 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007670:	fa22 f303 	lsr.w	r3, r2, r3
 8007674:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	ee07 3a90 	vmov	s15, r3
 800767c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	ee07 3a90 	vmov	s15, r3
 8007686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800768a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800768e:	4b7b      	ldr	r3, [pc, #492]	; (800787c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007696:	ee07 3a90 	vmov	s15, r3
 800769a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800769e:	ed97 6a03 	vldr	s12, [r7, #12]
 80076a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007884 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80076be:	e087      	b.n	80077d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	ee07 3a90 	vmov	s15, r3
 80076c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007888 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80076ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076d2:	4b6a      	ldr	r3, [pc, #424]	; (800787c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076da:	ee07 3a90 	vmov	s15, r3
 80076de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80076e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007884 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007702:	e065      	b.n	80077d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	ee07 3a90 	vmov	s15, r3
 800770a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800770e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800788c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007716:	4b59      	ldr	r3, [pc, #356]	; (800787c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800771e:	ee07 3a90 	vmov	s15, r3
 8007722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007726:	ed97 6a03 	vldr	s12, [r7, #12]
 800772a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007884 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800772e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007736:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800773a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800773e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007742:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007746:	e043      	b.n	80077d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	ee07 3a90 	vmov	s15, r3
 800774e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007752:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007890 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800775a:	4b48      	ldr	r3, [pc, #288]	; (800787c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800775c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007762:	ee07 3a90 	vmov	s15, r3
 8007766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800776a:	ed97 6a03 	vldr	s12, [r7, #12]
 800776e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007884 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800777a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800777e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007786:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800778a:	e021      	b.n	80077d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	ee07 3a90 	vmov	s15, r3
 8007792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007796:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800788c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800779a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800779e:	4b37      	ldr	r3, [pc, #220]	; (800787c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077a6:	ee07 3a90 	vmov	s15, r3
 80077aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80077b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007884 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077ce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80077d0:	4b2a      	ldr	r3, [pc, #168]	; (800787c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d4:	0a5b      	lsrs	r3, r3, #9
 80077d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077da:	ee07 3a90 	vmov	s15, r3
 80077de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80077ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077f6:	ee17 2a90 	vmov	r2, s15
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80077fe:	4b1f      	ldr	r3, [pc, #124]	; (800787c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007802:	0c1b      	lsrs	r3, r3, #16
 8007804:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007808:	ee07 3a90 	vmov	s15, r3
 800780c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007810:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007814:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007818:	edd7 6a07 	vldr	s13, [r7, #28]
 800781c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007820:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007824:	ee17 2a90 	vmov	r2, s15
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800782c:	4b13      	ldr	r3, [pc, #76]	; (800787c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800782e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007830:	0e1b      	lsrs	r3, r3, #24
 8007832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007836:	ee07 3a90 	vmov	s15, r3
 800783a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800783e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007842:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007846:	edd7 6a07 	vldr	s13, [r7, #28]
 800784a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800784e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007852:	ee17 2a90 	vmov	r2, s15
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800785a:	e008      	b.n	800786e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	609a      	str	r2, [r3, #8]
}
 800786e:	bf00      	nop
 8007870:	3724      	adds	r7, #36	; 0x24
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	58024400 	.word	0x58024400
 8007880:	03d09000 	.word	0x03d09000
 8007884:	46000000 	.word	0x46000000
 8007888:	4c742400 	.word	0x4c742400
 800788c:	4a742400 	.word	0x4a742400
 8007890:	4bbebc20 	.word	0x4bbebc20

08007894 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007894:	b480      	push	{r7}
 8007896:	b089      	sub	sp, #36	; 0x24
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800789c:	4ba0      	ldr	r3, [pc, #640]	; (8007b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800789e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a0:	f003 0303 	and.w	r3, r3, #3
 80078a4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80078a6:	4b9e      	ldr	r3, [pc, #632]	; (8007b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078aa:	091b      	lsrs	r3, r3, #4
 80078ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078b0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80078b2:	4b9b      	ldr	r3, [pc, #620]	; (8007b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b6:	f003 0301 	and.w	r3, r3, #1
 80078ba:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80078bc:	4b98      	ldr	r3, [pc, #608]	; (8007b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078c0:	08db      	lsrs	r3, r3, #3
 80078c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078c6:	693a      	ldr	r2, [r7, #16]
 80078c8:	fb02 f303 	mul.w	r3, r2, r3
 80078cc:	ee07 3a90 	vmov	s15, r3
 80078d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078d4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f000 8111 	beq.w	8007b02 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	f000 8083 	beq.w	80079ee <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	f200 80a1 	bhi.w	8007a32 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d003      	beq.n	80078fe <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80078f6:	69bb      	ldr	r3, [r7, #24]
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d056      	beq.n	80079aa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80078fc:	e099      	b.n	8007a32 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078fe:	4b88      	ldr	r3, [pc, #544]	; (8007b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 0320 	and.w	r3, r3, #32
 8007906:	2b00      	cmp	r3, #0
 8007908:	d02d      	beq.n	8007966 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800790a:	4b85      	ldr	r3, [pc, #532]	; (8007b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	08db      	lsrs	r3, r3, #3
 8007910:	f003 0303 	and.w	r3, r3, #3
 8007914:	4a83      	ldr	r2, [pc, #524]	; (8007b24 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007916:	fa22 f303 	lsr.w	r3, r2, r3
 800791a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	ee07 3a90 	vmov	s15, r3
 8007922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	ee07 3a90 	vmov	s15, r3
 800792c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007930:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007934:	4b7a      	ldr	r3, [pc, #488]	; (8007b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800793c:	ee07 3a90 	vmov	s15, r3
 8007940:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007944:	ed97 6a03 	vldr	s12, [r7, #12]
 8007948:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007b28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800794c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007950:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007954:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007958:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800795c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007960:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007964:	e087      	b.n	8007a76 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	ee07 3a90 	vmov	s15, r3
 800796c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007970:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007b2c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007974:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007978:	4b69      	ldr	r3, [pc, #420]	; (8007b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800797a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800797c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007980:	ee07 3a90 	vmov	s15, r3
 8007984:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007988:	ed97 6a03 	vldr	s12, [r7, #12]
 800798c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007b28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007990:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007994:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007998:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800799c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079a8:	e065      	b.n	8007a76 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	ee07 3a90 	vmov	s15, r3
 80079b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079b4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007b30 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80079b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079bc:	4b58      	ldr	r3, [pc, #352]	; (8007b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079c4:	ee07 3a90 	vmov	s15, r3
 80079c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80079d0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007b28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80079d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079ec:	e043      	b.n	8007a76 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	ee07 3a90 	vmov	s15, r3
 80079f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079f8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007b34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80079fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a00:	4b47      	ldr	r3, [pc, #284]	; (8007b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a08:	ee07 3a90 	vmov	s15, r3
 8007a0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a10:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a14:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007b28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a2c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a30:	e021      	b.n	8007a76 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	ee07 3a90 	vmov	s15, r3
 8007a38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a3c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007b2c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007a40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a44:	4b36      	ldr	r3, [pc, #216]	; (8007b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a4c:	ee07 3a90 	vmov	s15, r3
 8007a50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a54:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a58:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007b28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a70:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a74:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007a76:	4b2a      	ldr	r3, [pc, #168]	; (8007b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a7a:	0a5b      	lsrs	r3, r3, #9
 8007a7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a80:	ee07 3a90 	vmov	s15, r3
 8007a84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a90:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a9c:	ee17 2a90 	vmov	r2, s15
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007aa4:	4b1e      	ldr	r3, [pc, #120]	; (8007b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa8:	0c1b      	lsrs	r3, r3, #16
 8007aaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007aae:	ee07 3a90 	vmov	s15, r3
 8007ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ab6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007aba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007abe:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ac2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ac6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007aca:	ee17 2a90 	vmov	r2, s15
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007ad2:	4b13      	ldr	r3, [pc, #76]	; (8007b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad6:	0e1b      	lsrs	r3, r3, #24
 8007ad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007adc:	ee07 3a90 	vmov	s15, r3
 8007ae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ae4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ae8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007aec:	edd7 6a07 	vldr	s13, [r7, #28]
 8007af0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007af4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007af8:	ee17 2a90 	vmov	r2, s15
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007b00:	e008      	b.n	8007b14 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	609a      	str	r2, [r3, #8]
}
 8007b14:	bf00      	nop
 8007b16:	3724      	adds	r7, #36	; 0x24
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr
 8007b20:	58024400 	.word	0x58024400
 8007b24:	03d09000 	.word	0x03d09000
 8007b28:	46000000 	.word	0x46000000
 8007b2c:	4c742400 	.word	0x4c742400
 8007b30:	4a742400 	.word	0x4a742400
 8007b34:	4bbebc20 	.word	0x4bbebc20

08007b38 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b42:	2300      	movs	r3, #0
 8007b44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b46:	4b53      	ldr	r3, [pc, #332]	; (8007c94 <RCCEx_PLL2_Config+0x15c>)
 8007b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b4a:	f003 0303 	and.w	r3, r3, #3
 8007b4e:	2b03      	cmp	r3, #3
 8007b50:	d101      	bne.n	8007b56 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e099      	b.n	8007c8a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007b56:	4b4f      	ldr	r3, [pc, #316]	; (8007c94 <RCCEx_PLL2_Config+0x15c>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a4e      	ldr	r2, [pc, #312]	; (8007c94 <RCCEx_PLL2_Config+0x15c>)
 8007b5c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007b60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b62:	f7fa fd59 	bl	8002618 <HAL_GetTick>
 8007b66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b68:	e008      	b.n	8007b7c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007b6a:	f7fa fd55 	bl	8002618 <HAL_GetTick>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	1ad3      	subs	r3, r2, r3
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d901      	bls.n	8007b7c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007b78:	2303      	movs	r3, #3
 8007b7a:	e086      	b.n	8007c8a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b7c:	4b45      	ldr	r3, [pc, #276]	; (8007c94 <RCCEx_PLL2_Config+0x15c>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d1f0      	bne.n	8007b6a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007b88:	4b42      	ldr	r3, [pc, #264]	; (8007c94 <RCCEx_PLL2_Config+0x15c>)
 8007b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b8c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	031b      	lsls	r3, r3, #12
 8007b96:	493f      	ldr	r1, [pc, #252]	; (8007c94 <RCCEx_PLL2_Config+0x15c>)
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	628b      	str	r3, [r1, #40]	; 0x28
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	3b01      	subs	r3, #1
 8007bac:	025b      	lsls	r3, r3, #9
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	431a      	orrs	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	041b      	lsls	r3, r3, #16
 8007bba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007bbe:	431a      	orrs	r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	3b01      	subs	r3, #1
 8007bc6:	061b      	lsls	r3, r3, #24
 8007bc8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007bcc:	4931      	ldr	r1, [pc, #196]	; (8007c94 <RCCEx_PLL2_Config+0x15c>)
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007bd2:	4b30      	ldr	r3, [pc, #192]	; (8007c94 <RCCEx_PLL2_Config+0x15c>)
 8007bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	492d      	ldr	r1, [pc, #180]	; (8007c94 <RCCEx_PLL2_Config+0x15c>)
 8007be0:	4313      	orrs	r3, r2
 8007be2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007be4:	4b2b      	ldr	r3, [pc, #172]	; (8007c94 <RCCEx_PLL2_Config+0x15c>)
 8007be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be8:	f023 0220 	bic.w	r2, r3, #32
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	699b      	ldr	r3, [r3, #24]
 8007bf0:	4928      	ldr	r1, [pc, #160]	; (8007c94 <RCCEx_PLL2_Config+0x15c>)
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007bf6:	4b27      	ldr	r3, [pc, #156]	; (8007c94 <RCCEx_PLL2_Config+0x15c>)
 8007bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bfa:	4a26      	ldr	r2, [pc, #152]	; (8007c94 <RCCEx_PLL2_Config+0x15c>)
 8007bfc:	f023 0310 	bic.w	r3, r3, #16
 8007c00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007c02:	4b24      	ldr	r3, [pc, #144]	; (8007c94 <RCCEx_PLL2_Config+0x15c>)
 8007c04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c06:	4b24      	ldr	r3, [pc, #144]	; (8007c98 <RCCEx_PLL2_Config+0x160>)
 8007c08:	4013      	ands	r3, r2
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	69d2      	ldr	r2, [r2, #28]
 8007c0e:	00d2      	lsls	r2, r2, #3
 8007c10:	4920      	ldr	r1, [pc, #128]	; (8007c94 <RCCEx_PLL2_Config+0x15c>)
 8007c12:	4313      	orrs	r3, r2
 8007c14:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007c16:	4b1f      	ldr	r3, [pc, #124]	; (8007c94 <RCCEx_PLL2_Config+0x15c>)
 8007c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c1a:	4a1e      	ldr	r2, [pc, #120]	; (8007c94 <RCCEx_PLL2_Config+0x15c>)
 8007c1c:	f043 0310 	orr.w	r3, r3, #16
 8007c20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d106      	bne.n	8007c36 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007c28:	4b1a      	ldr	r3, [pc, #104]	; (8007c94 <RCCEx_PLL2_Config+0x15c>)
 8007c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2c:	4a19      	ldr	r2, [pc, #100]	; (8007c94 <RCCEx_PLL2_Config+0x15c>)
 8007c2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c34:	e00f      	b.n	8007c56 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d106      	bne.n	8007c4a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007c3c:	4b15      	ldr	r3, [pc, #84]	; (8007c94 <RCCEx_PLL2_Config+0x15c>)
 8007c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c40:	4a14      	ldr	r2, [pc, #80]	; (8007c94 <RCCEx_PLL2_Config+0x15c>)
 8007c42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c48:	e005      	b.n	8007c56 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007c4a:	4b12      	ldr	r3, [pc, #72]	; (8007c94 <RCCEx_PLL2_Config+0x15c>)
 8007c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c4e:	4a11      	ldr	r2, [pc, #68]	; (8007c94 <RCCEx_PLL2_Config+0x15c>)
 8007c50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c54:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007c56:	4b0f      	ldr	r3, [pc, #60]	; (8007c94 <RCCEx_PLL2_Config+0x15c>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a0e      	ldr	r2, [pc, #56]	; (8007c94 <RCCEx_PLL2_Config+0x15c>)
 8007c5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007c60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c62:	f7fa fcd9 	bl	8002618 <HAL_GetTick>
 8007c66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c68:	e008      	b.n	8007c7c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007c6a:	f7fa fcd5 	bl	8002618 <HAL_GetTick>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	1ad3      	subs	r3, r2, r3
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d901      	bls.n	8007c7c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007c78:	2303      	movs	r3, #3
 8007c7a:	e006      	b.n	8007c8a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c7c:	4b05      	ldr	r3, [pc, #20]	; (8007c94 <RCCEx_PLL2_Config+0x15c>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d0f0      	beq.n	8007c6a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3710      	adds	r7, #16
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	58024400 	.word	0x58024400
 8007c98:	ffff0007 	.word	0xffff0007

08007c9c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007caa:	4b53      	ldr	r3, [pc, #332]	; (8007df8 <RCCEx_PLL3_Config+0x15c>)
 8007cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cae:	f003 0303 	and.w	r3, r3, #3
 8007cb2:	2b03      	cmp	r3, #3
 8007cb4:	d101      	bne.n	8007cba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e099      	b.n	8007dee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007cba:	4b4f      	ldr	r3, [pc, #316]	; (8007df8 <RCCEx_PLL3_Config+0x15c>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a4e      	ldr	r2, [pc, #312]	; (8007df8 <RCCEx_PLL3_Config+0x15c>)
 8007cc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cc6:	f7fa fca7 	bl	8002618 <HAL_GetTick>
 8007cca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ccc:	e008      	b.n	8007ce0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007cce:	f7fa fca3 	bl	8002618 <HAL_GetTick>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	1ad3      	subs	r3, r2, r3
 8007cd8:	2b02      	cmp	r3, #2
 8007cda:	d901      	bls.n	8007ce0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	e086      	b.n	8007dee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ce0:	4b45      	ldr	r3, [pc, #276]	; (8007df8 <RCCEx_PLL3_Config+0x15c>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d1f0      	bne.n	8007cce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007cec:	4b42      	ldr	r3, [pc, #264]	; (8007df8 <RCCEx_PLL3_Config+0x15c>)
 8007cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	051b      	lsls	r3, r3, #20
 8007cfa:	493f      	ldr	r1, [pc, #252]	; (8007df8 <RCCEx_PLL3_Config+0x15c>)
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	628b      	str	r3, [r1, #40]	; 0x28
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	3b01      	subs	r3, #1
 8007d06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	025b      	lsls	r3, r3, #9
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	431a      	orrs	r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	041b      	lsls	r3, r3, #16
 8007d1e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007d22:	431a      	orrs	r2, r3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	691b      	ldr	r3, [r3, #16]
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	061b      	lsls	r3, r3, #24
 8007d2c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007d30:	4931      	ldr	r1, [pc, #196]	; (8007df8 <RCCEx_PLL3_Config+0x15c>)
 8007d32:	4313      	orrs	r3, r2
 8007d34:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007d36:	4b30      	ldr	r3, [pc, #192]	; (8007df8 <RCCEx_PLL3_Config+0x15c>)
 8007d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d3a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	695b      	ldr	r3, [r3, #20]
 8007d42:	492d      	ldr	r1, [pc, #180]	; (8007df8 <RCCEx_PLL3_Config+0x15c>)
 8007d44:	4313      	orrs	r3, r2
 8007d46:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007d48:	4b2b      	ldr	r3, [pc, #172]	; (8007df8 <RCCEx_PLL3_Config+0x15c>)
 8007d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d4c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	699b      	ldr	r3, [r3, #24]
 8007d54:	4928      	ldr	r1, [pc, #160]	; (8007df8 <RCCEx_PLL3_Config+0x15c>)
 8007d56:	4313      	orrs	r3, r2
 8007d58:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007d5a:	4b27      	ldr	r3, [pc, #156]	; (8007df8 <RCCEx_PLL3_Config+0x15c>)
 8007d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d5e:	4a26      	ldr	r2, [pc, #152]	; (8007df8 <RCCEx_PLL3_Config+0x15c>)
 8007d60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007d66:	4b24      	ldr	r3, [pc, #144]	; (8007df8 <RCCEx_PLL3_Config+0x15c>)
 8007d68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d6a:	4b24      	ldr	r3, [pc, #144]	; (8007dfc <RCCEx_PLL3_Config+0x160>)
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	69d2      	ldr	r2, [r2, #28]
 8007d72:	00d2      	lsls	r2, r2, #3
 8007d74:	4920      	ldr	r1, [pc, #128]	; (8007df8 <RCCEx_PLL3_Config+0x15c>)
 8007d76:	4313      	orrs	r3, r2
 8007d78:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007d7a:	4b1f      	ldr	r3, [pc, #124]	; (8007df8 <RCCEx_PLL3_Config+0x15c>)
 8007d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7e:	4a1e      	ldr	r2, [pc, #120]	; (8007df8 <RCCEx_PLL3_Config+0x15c>)
 8007d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d106      	bne.n	8007d9a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007d8c:	4b1a      	ldr	r3, [pc, #104]	; (8007df8 <RCCEx_PLL3_Config+0x15c>)
 8007d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d90:	4a19      	ldr	r2, [pc, #100]	; (8007df8 <RCCEx_PLL3_Config+0x15c>)
 8007d92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007d96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d98:	e00f      	b.n	8007dba <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d106      	bne.n	8007dae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007da0:	4b15      	ldr	r3, [pc, #84]	; (8007df8 <RCCEx_PLL3_Config+0x15c>)
 8007da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da4:	4a14      	ldr	r2, [pc, #80]	; (8007df8 <RCCEx_PLL3_Config+0x15c>)
 8007da6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007daa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007dac:	e005      	b.n	8007dba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007dae:	4b12      	ldr	r3, [pc, #72]	; (8007df8 <RCCEx_PLL3_Config+0x15c>)
 8007db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db2:	4a11      	ldr	r2, [pc, #68]	; (8007df8 <RCCEx_PLL3_Config+0x15c>)
 8007db4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007db8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007dba:	4b0f      	ldr	r3, [pc, #60]	; (8007df8 <RCCEx_PLL3_Config+0x15c>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a0e      	ldr	r2, [pc, #56]	; (8007df8 <RCCEx_PLL3_Config+0x15c>)
 8007dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007dc6:	f7fa fc27 	bl	8002618 <HAL_GetTick>
 8007dca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007dcc:	e008      	b.n	8007de0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007dce:	f7fa fc23 	bl	8002618 <HAL_GetTick>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	1ad3      	subs	r3, r2, r3
 8007dd8:	2b02      	cmp	r3, #2
 8007dda:	d901      	bls.n	8007de0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007ddc:	2303      	movs	r3, #3
 8007dde:	e006      	b.n	8007dee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007de0:	4b05      	ldr	r3, [pc, #20]	; (8007df8 <RCCEx_PLL3_Config+0x15c>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d0f0      	beq.n	8007dce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	58024400 	.word	0x58024400
 8007dfc:	ffff0007 	.word	0xffff0007

08007e00 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b08a      	sub	sp, #40	; 0x28
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d101      	bne.n	8007e12 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e075      	b.n	8007efe <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d105      	bne.n	8007e2a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f7f9 ff89 	bl	8001d3c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2204      	movs	r2, #4
 8007e2e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 f868 	bl	8007f08 <HAL_SD_InitCard>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d001      	beq.n	8007e42 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e05d      	b.n	8007efe <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007e42:	f107 0308 	add.w	r3, r7, #8
 8007e46:	4619      	mov	r1, r3
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 fa9d 	bl	8008388 <HAL_SD_GetCardStatus>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d001      	beq.n	8007e58 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007e54:	2301      	movs	r3, #1
 8007e56:	e052      	b.n	8007efe <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8007e58:	7e3b      	ldrb	r3, [r7, #24]
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007e5e:	7e7b      	ldrb	r3, [r7, #25]
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d10a      	bne.n	8007e82 <HAL_SD_Init+0x82>
 8007e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d102      	bne.n	8007e78 <HAL_SD_Init+0x78>
 8007e72:	6a3b      	ldr	r3, [r7, #32]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d004      	beq.n	8007e82 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e7e:	659a      	str	r2, [r3, #88]	; 0x58
 8007e80:	e00b      	b.n	8007e9a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d104      	bne.n	8007e94 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e90:	659a      	str	r2, [r3, #88]	; 0x58
 8007e92:	e002      	b.n	8007e9a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 fb2f 	bl	8008504 <HAL_SD_ConfigWideBusOperation>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d001      	beq.n	8007eb0 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	e026      	b.n	8007efe <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007eb0:	f7fa fbb2 	bl	8002618 <HAL_GetTick>
 8007eb4:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007eb6:	e011      	b.n	8007edc <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007eb8:	f7fa fbae 	bl	8002618 <HAL_GetTick>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ec6:	d109      	bne.n	8007edc <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007ece:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8007ed8:	2303      	movs	r3, #3
 8007eda:	e010      	b.n	8007efe <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 fc23 	bl	8008728 <HAL_SD_GetCardState>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b04      	cmp	r3, #4
 8007ee6:	d1e7      	bne.n	8007eb8 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3728      	adds	r7, #40	; 0x28
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
	...

08007f08 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007f08:	b590      	push	{r4, r7, lr}
 8007f0a:	b08d      	sub	sp, #52	; 0x34
 8007f0c:	af02      	add	r7, sp, #8
 8007f0e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007f10:	2300      	movs	r3, #0
 8007f12:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007f14:	2300      	movs	r3, #0
 8007f16:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007f20:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007f24:	f04f 0100 	mov.w	r1, #0
 8007f28:	f7fe fc76 	bl	8006818 <HAL_RCCEx_GetPeriphCLKFreq>
 8007f2c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8007f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d109      	bne.n	8007f48 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007f42:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	e070      	b.n	800802a <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8007f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4a:	0a1b      	lsrs	r3, r3, #8
 8007f4c:	4a39      	ldr	r2, [pc, #228]	; (8008034 <HAL_SD_InitCard+0x12c>)
 8007f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f52:	091b      	lsrs	r3, r3, #4
 8007f54:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681c      	ldr	r4, [r3, #0]
 8007f5a:	466a      	mov	r2, sp
 8007f5c:	f107 0318 	add.w	r3, r7, #24
 8007f60:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007f64:	e882 0003 	stmia.w	r2, {r0, r1}
 8007f68:	f107 030c 	add.w	r3, r7, #12
 8007f6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f6e:	4620      	mov	r0, r4
 8007f70:	f003 fc72 	bl	800b858 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f003 fca4 	bl	800b8c6 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d005      	beq.n	8007f90 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	005b      	lsls	r3, r3, #1
 8007f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f8e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8007f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d007      	beq.n	8007fa6 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8007f96:	4a28      	ldr	r2, [pc, #160]	; (8008038 <HAL_SD_InitCard+0x130>)
 8007f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7fa fb45 	bl	8002630 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 fcac 	bl	8008904 <SD_PowerON>
 8007fac:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007fae:	6a3b      	ldr	r3, [r7, #32]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00b      	beq.n	8007fcc <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fc0:	6a3b      	ldr	r3, [r7, #32]
 8007fc2:	431a      	orrs	r2, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	e02e      	b.n	800802a <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 fbcb 	bl	8008768 <SD_InitCard>
 8007fd2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007fd4:	6a3b      	ldr	r3, [r7, #32]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00b      	beq.n	8007ff2 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2201      	movs	r2, #1
 8007fde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fe6:	6a3b      	ldr	r3, [r7, #32]
 8007fe8:	431a      	orrs	r2, r3
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e01b      	b.n	800802a <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f003 fcf8 	bl	800b9f0 <SDMMC_CmdBlockLength>
 8008000:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008002:	6a3b      	ldr	r3, [r7, #32]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d00f      	beq.n	8008028 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a0b      	ldr	r2, [pc, #44]	; (800803c <HAL_SD_InitCard+0x134>)
 800800e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008014:	6a3b      	ldr	r3, [r7, #32]
 8008016:	431a      	orrs	r2, r3
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2201      	movs	r2, #1
 8008020:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	e000      	b.n	800802a <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	372c      	adds	r7, #44	; 0x2c
 800802e:	46bd      	mov	sp, r7
 8008030:	bd90      	pop	{r4, r7, pc}
 8008032:	bf00      	nop
 8008034:	014f8b59 	.word	0x014f8b59
 8008038:	00012110 	.word	0x00012110
 800803c:	1fe00fff 	.word	0x1fe00fff

08008040 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800804e:	0f9b      	lsrs	r3, r3, #30
 8008050:	b2da      	uxtb	r2, r3
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800805a:	0e9b      	lsrs	r3, r3, #26
 800805c:	b2db      	uxtb	r3, r3
 800805e:	f003 030f 	and.w	r3, r3, #15
 8008062:	b2da      	uxtb	r2, r3
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800806c:	0e1b      	lsrs	r3, r3, #24
 800806e:	b2db      	uxtb	r3, r3
 8008070:	f003 0303 	and.w	r3, r3, #3
 8008074:	b2da      	uxtb	r2, r3
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800807e:	0c1b      	lsrs	r3, r3, #16
 8008080:	b2da      	uxtb	r2, r3
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800808a:	0a1b      	lsrs	r3, r3, #8
 800808c:	b2da      	uxtb	r2, r3
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008096:	b2da      	uxtb	r2, r3
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080a0:	0d1b      	lsrs	r3, r3, #20
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080ac:	0c1b      	lsrs	r3, r3, #16
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	f003 030f 	and.w	r3, r3, #15
 80080b4:	b2da      	uxtb	r2, r3
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080be:	0bdb      	lsrs	r3, r3, #15
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	f003 0301 	and.w	r3, r3, #1
 80080c6:	b2da      	uxtb	r2, r3
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080d0:	0b9b      	lsrs	r3, r3, #14
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	f003 0301 	and.w	r3, r3, #1
 80080d8:	b2da      	uxtb	r2, r3
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080e2:	0b5b      	lsrs	r3, r3, #13
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	f003 0301 	and.w	r3, r3, #1
 80080ea:	b2da      	uxtb	r2, r3
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080f4:	0b1b      	lsrs	r3, r3, #12
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	f003 0301 	and.w	r3, r3, #1
 80080fc:	b2da      	uxtb	r2, r3
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	2200      	movs	r2, #0
 8008106:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800810c:	2b00      	cmp	r3, #0
 800810e:	d163      	bne.n	80081d8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008114:	009a      	lsls	r2, r3, #2
 8008116:	f640 73fc 	movw	r3, #4092	; 0xffc
 800811a:	4013      	ands	r3, r2
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8008120:	0f92      	lsrs	r2, r2, #30
 8008122:	431a      	orrs	r2, r3
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800812c:	0edb      	lsrs	r3, r3, #27
 800812e:	b2db      	uxtb	r3, r3
 8008130:	f003 0307 	and.w	r3, r3, #7
 8008134:	b2da      	uxtb	r2, r3
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800813e:	0e1b      	lsrs	r3, r3, #24
 8008140:	b2db      	uxtb	r3, r3
 8008142:	f003 0307 	and.w	r3, r3, #7
 8008146:	b2da      	uxtb	r2, r3
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008150:	0d5b      	lsrs	r3, r3, #21
 8008152:	b2db      	uxtb	r3, r3
 8008154:	f003 0307 	and.w	r3, r3, #7
 8008158:	b2da      	uxtb	r2, r3
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008162:	0c9b      	lsrs	r3, r3, #18
 8008164:	b2db      	uxtb	r3, r3
 8008166:	f003 0307 	and.w	r3, r3, #7
 800816a:	b2da      	uxtb	r2, r3
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008174:	0bdb      	lsrs	r3, r3, #15
 8008176:	b2db      	uxtb	r3, r3
 8008178:	f003 0307 	and.w	r3, r3, #7
 800817c:	b2da      	uxtb	r2, r3
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	1c5a      	adds	r2, r3, #1
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	7e1b      	ldrb	r3, [r3, #24]
 8008190:	b2db      	uxtb	r3, r3
 8008192:	f003 0307 	and.w	r3, r3, #7
 8008196:	3302      	adds	r3, #2
 8008198:	2201      	movs	r2, #1
 800819a:	fa02 f303 	lsl.w	r3, r2, r3
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80081a2:	fb03 f202 	mul.w	r2, r3, r2
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	7a1b      	ldrb	r3, [r3, #8]
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	f003 030f 	and.w	r3, r3, #15
 80081b4:	2201      	movs	r2, #1
 80081b6:	409a      	lsls	r2, r3
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80081c4:	0a52      	lsrs	r2, r2, #9
 80081c6:	fb03 f202 	mul.w	r2, r3, r2
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081d4:	655a      	str	r2, [r3, #84]	; 0x54
 80081d6:	e031      	b.n	800823c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d11d      	bne.n	800821c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081e4:	041b      	lsls	r3, r3, #16
 80081e6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081ee:	0c1b      	lsrs	r3, r3, #16
 80081f0:	431a      	orrs	r2, r3
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	3301      	adds	r3, #1
 80081fc:	029a      	lsls	r2, r3, #10
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008210:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	655a      	str	r2, [r3, #84]	; 0x54
 800821a:	e00f      	b.n	800823c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a58      	ldr	r2, [pc, #352]	; (8008384 <HAL_SD_GetCardCSD+0x344>)
 8008222:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008228:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2201      	movs	r2, #1
 8008234:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8008238:	2301      	movs	r3, #1
 800823a:	e09d      	b.n	8008378 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008240:	0b9b      	lsrs	r3, r3, #14
 8008242:	b2db      	uxtb	r3, r3
 8008244:	f003 0301 	and.w	r3, r3, #1
 8008248:	b2da      	uxtb	r2, r3
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008252:	09db      	lsrs	r3, r3, #7
 8008254:	b2db      	uxtb	r3, r3
 8008256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800825a:	b2da      	uxtb	r2, r3
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008264:	b2db      	uxtb	r3, r3
 8008266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800826a:	b2da      	uxtb	r2, r3
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008274:	0fdb      	lsrs	r3, r3, #31
 8008276:	b2da      	uxtb	r2, r3
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008280:	0f5b      	lsrs	r3, r3, #29
 8008282:	b2db      	uxtb	r3, r3
 8008284:	f003 0303 	and.w	r3, r3, #3
 8008288:	b2da      	uxtb	r2, r3
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008292:	0e9b      	lsrs	r3, r3, #26
 8008294:	b2db      	uxtb	r3, r3
 8008296:	f003 0307 	and.w	r3, r3, #7
 800829a:	b2da      	uxtb	r2, r3
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082a4:	0d9b      	lsrs	r3, r3, #22
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	f003 030f 	and.w	r3, r3, #15
 80082ac:	b2da      	uxtb	r2, r3
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082b6:	0d5b      	lsrs	r3, r3, #21
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	f003 0301 	and.w	r3, r3, #1
 80082be:	b2da      	uxtb	r2, r3
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082d2:	0c1b      	lsrs	r3, r3, #16
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	f003 0301 	and.w	r3, r3, #1
 80082da:	b2da      	uxtb	r2, r3
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082e6:	0bdb      	lsrs	r3, r3, #15
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	f003 0301 	and.w	r3, r3, #1
 80082ee:	b2da      	uxtb	r2, r3
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082fa:	0b9b      	lsrs	r3, r3, #14
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	f003 0301 	and.w	r3, r3, #1
 8008302:	b2da      	uxtb	r2, r3
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800830e:	0b5b      	lsrs	r3, r3, #13
 8008310:	b2db      	uxtb	r3, r3
 8008312:	f003 0301 	and.w	r3, r3, #1
 8008316:	b2da      	uxtb	r2, r3
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008322:	0b1b      	lsrs	r3, r3, #12
 8008324:	b2db      	uxtb	r3, r3
 8008326:	f003 0301 	and.w	r3, r3, #1
 800832a:	b2da      	uxtb	r2, r3
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008336:	0a9b      	lsrs	r3, r3, #10
 8008338:	b2db      	uxtb	r3, r3
 800833a:	f003 0303 	and.w	r3, r3, #3
 800833e:	b2da      	uxtb	r2, r3
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800834a:	0a1b      	lsrs	r3, r3, #8
 800834c:	b2db      	uxtb	r3, r3
 800834e:	f003 0303 	and.w	r3, r3, #3
 8008352:	b2da      	uxtb	r2, r3
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800835e:	085b      	lsrs	r3, r3, #1
 8008360:	b2db      	uxtb	r3, r3
 8008362:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008366:	b2da      	uxtb	r2, r3
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	2201      	movs	r2, #1
 8008372:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008376:	2300      	movs	r3, #0
}
 8008378:	4618      	mov	r0, r3
 800837a:	370c      	adds	r7, #12
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr
 8008384:	1fe00fff 	.word	0x1fe00fff

08008388 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b094      	sub	sp, #80	; 0x50
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008392:	2300      	movs	r3, #0
 8008394:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	2b03      	cmp	r3, #3
 80083a2:	d101      	bne.n	80083a8 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	e0a7      	b.n	80084f8 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80083a8:	f107 0308 	add.w	r3, r7, #8
 80083ac:	4619      	mov	r1, r3
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 fb36 	bl	8008a20 <SD_SendSDStatus>
 80083b4:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80083b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d011      	beq.n	80083e0 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a4f      	ldr	r2, [pc, #316]	; (8008500 <HAL_SD_GetCardStatus+0x178>)
 80083c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083ca:	431a      	orrs	r2, r3
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80083de:	e070      	b.n	80084c2 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	099b      	lsrs	r3, r3, #6
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	f003 0303 	and.w	r3, r3, #3
 80083ea:	b2da      	uxtb	r2, r3
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	095b      	lsrs	r3, r3, #5
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	f003 0301 	and.w	r3, r3, #1
 80083fa:	b2da      	uxtb	r2, r3
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	0a1b      	lsrs	r3, r3, #8
 8008404:	b29b      	uxth	r3, r3
 8008406:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800840a:	b29a      	uxth	r2, r3
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	0e1b      	lsrs	r3, r3, #24
 8008410:	b29b      	uxth	r3, r3
 8008412:	4313      	orrs	r3, r2
 8008414:	b29a      	uxth	r2, r3
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	061a      	lsls	r2, r3, #24
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	021b      	lsls	r3, r3, #8
 8008422:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008426:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	0a1b      	lsrs	r3, r3, #8
 800842c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008430:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	0e1b      	lsrs	r3, r3, #24
 8008436:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	b2da      	uxtb	r2, r3
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	0a1b      	lsrs	r3, r3, #8
 8008448:	b2da      	uxtb	r2, r3
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	0d1b      	lsrs	r3, r3, #20
 8008452:	b2db      	uxtb	r3, r3
 8008454:	f003 030f 	and.w	r3, r3, #15
 8008458:	b2da      	uxtb	r2, r3
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	0c1b      	lsrs	r3, r3, #16
 8008462:	b29b      	uxth	r3, r3
 8008464:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008468:	b29a      	uxth	r2, r3
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	b29b      	uxth	r3, r3
 800846e:	b2db      	uxtb	r3, r3
 8008470:	b29b      	uxth	r3, r3
 8008472:	4313      	orrs	r3, r2
 8008474:	b29a      	uxth	r2, r3
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	0a9b      	lsrs	r3, r3, #10
 800847e:	b2db      	uxtb	r3, r3
 8008480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008484:	b2da      	uxtb	r2, r3
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	0a1b      	lsrs	r3, r3, #8
 800848e:	b2db      	uxtb	r3, r3
 8008490:	f003 0303 	and.w	r3, r3, #3
 8008494:	b2da      	uxtb	r2, r3
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	091b      	lsrs	r3, r3, #4
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	f003 030f 	and.w	r3, r3, #15
 80084a4:	b2da      	uxtb	r2, r3
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	f003 030f 	and.w	r3, r3, #15
 80084b2:	b2da      	uxtb	r2, r3
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	0e1b      	lsrs	r3, r3, #24
 80084bc:	b2da      	uxtb	r2, r3
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80084ca:	4618      	mov	r0, r3
 80084cc:	f003 fa90 	bl	800b9f0 <SDMMC_CmdBlockLength>
 80084d0:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80084d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00d      	beq.n	80084f4 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a08      	ldr	r2, [pc, #32]	; (8008500 <HAL_SD_GetCardStatus+0x178>)
 80084de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084e4:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2201      	movs	r2, #1
 80084ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 80084f4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3750      	adds	r7, #80	; 0x50
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}
 8008500:	1fe00fff 	.word	0x1fe00fff

08008504 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008504:	b590      	push	{r4, r7, lr}
 8008506:	b08d      	sub	sp, #52	; 0x34
 8008508:	af02      	add	r7, sp, #8
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800850e:	2300      	movs	r3, #0
 8008510:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2203      	movs	r2, #3
 8008518:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008520:	2b03      	cmp	r3, #3
 8008522:	d02e      	beq.n	8008582 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800852a:	d106      	bne.n	800853a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008530:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	635a      	str	r2, [r3, #52]	; 0x34
 8008538:	e029      	b.n	800858e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008540:	d10a      	bne.n	8008558 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 fb64 	bl	8008c10 <SD_WideBus_Enable>
 8008548:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800854e:	6a3b      	ldr	r3, [r7, #32]
 8008550:	431a      	orrs	r2, r3
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	635a      	str	r2, [r3, #52]	; 0x34
 8008556:	e01a      	b.n	800858e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d10a      	bne.n	8008574 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 fba1 	bl	8008ca6 <SD_WideBus_Disable>
 8008564:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800856a:	6a3b      	ldr	r3, [r7, #32]
 800856c:	431a      	orrs	r2, r3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	635a      	str	r2, [r3, #52]	; 0x34
 8008572:	e00c      	b.n	800858e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008578:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	635a      	str	r2, [r3, #52]	; 0x34
 8008580:	e005      	b.n	800858e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008586:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008592:	2b00      	cmp	r3, #0
 8008594:	d007      	beq.n	80085a6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a5f      	ldr	r2, [pc, #380]	; (8008718 <HAL_SD_ConfigWideBusOperation+0x214>)
 800859c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800859e:	2301      	movs	r3, #1
 80085a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80085a4:	e096      	b.n	80086d4 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80085a6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80085aa:	f04f 0100 	mov.w	r1, #0
 80085ae:	f7fe f933 	bl	8006818 <HAL_RCCEx_GetPeriphCLKFreq>
 80085b2:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 80085b4:	69fb      	ldr	r3, [r7, #28]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	f000 8083 	beq.w	80086c2 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	691b      	ldr	r3, [r3, #16]
 80085d0:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	695a      	ldr	r2, [r3, #20]
 80085d6:	69fb      	ldr	r3, [r7, #28]
 80085d8:	4950      	ldr	r1, [pc, #320]	; (800871c <HAL_SD_ConfigWideBusOperation+0x218>)
 80085da:	fba1 1303 	umull	r1, r3, r1, r3
 80085de:	0e1b      	lsrs	r3, r3, #24
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d303      	bcc.n	80085ec <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	695b      	ldr	r3, [r3, #20]
 80085e8:	61bb      	str	r3, [r7, #24]
 80085ea:	e05a      	b.n	80086a2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085f4:	d103      	bne.n	80085fe <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	695b      	ldr	r3, [r3, #20]
 80085fa:	61bb      	str	r3, [r7, #24]
 80085fc:	e051      	b.n	80086a2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008606:	d126      	bne.n	8008656 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	695b      	ldr	r3, [r3, #20]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d10e      	bne.n	800862e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	4a43      	ldr	r2, [pc, #268]	; (8008720 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d906      	bls.n	8008626 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	4a40      	ldr	r2, [pc, #256]	; (800871c <HAL_SD_ConfigWideBusOperation+0x218>)
 800861c:	fba2 2303 	umull	r2, r3, r2, r3
 8008620:	0e5b      	lsrs	r3, r3, #25
 8008622:	61bb      	str	r3, [r7, #24]
 8008624:	e03d      	b.n	80086a2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	695b      	ldr	r3, [r3, #20]
 800862a:	61bb      	str	r3, [r7, #24]
 800862c:	e039      	b.n	80086a2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	695b      	ldr	r3, [r3, #20]
 8008632:	005b      	lsls	r3, r3, #1
 8008634:	69fa      	ldr	r2, [r7, #28]
 8008636:	fbb2 f3f3 	udiv	r3, r2, r3
 800863a:	4a39      	ldr	r2, [pc, #228]	; (8008720 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d906      	bls.n	800864e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	4a36      	ldr	r2, [pc, #216]	; (800871c <HAL_SD_ConfigWideBusOperation+0x218>)
 8008644:	fba2 2303 	umull	r2, r3, r2, r3
 8008648:	0e5b      	lsrs	r3, r3, #25
 800864a:	61bb      	str	r3, [r7, #24]
 800864c:	e029      	b.n	80086a2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	695b      	ldr	r3, [r3, #20]
 8008652:	61bb      	str	r3, [r7, #24]
 8008654:	e025      	b.n	80086a2 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	695b      	ldr	r3, [r3, #20]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d10e      	bne.n	800867c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	4a30      	ldr	r2, [pc, #192]	; (8008724 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d906      	bls.n	8008674 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	4a2c      	ldr	r2, [pc, #176]	; (800871c <HAL_SD_ConfigWideBusOperation+0x218>)
 800866a:	fba2 2303 	umull	r2, r3, r2, r3
 800866e:	0e1b      	lsrs	r3, r3, #24
 8008670:	61bb      	str	r3, [r7, #24]
 8008672:	e016      	b.n	80086a2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	695b      	ldr	r3, [r3, #20]
 8008678:	61bb      	str	r3, [r7, #24]
 800867a:	e012      	b.n	80086a2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	695b      	ldr	r3, [r3, #20]
 8008680:	005b      	lsls	r3, r3, #1
 8008682:	69fa      	ldr	r2, [r7, #28]
 8008684:	fbb2 f3f3 	udiv	r3, r2, r3
 8008688:	4a26      	ldr	r2, [pc, #152]	; (8008724 <HAL_SD_ConfigWideBusOperation+0x220>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d906      	bls.n	800869c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	4a22      	ldr	r2, [pc, #136]	; (800871c <HAL_SD_ConfigWideBusOperation+0x218>)
 8008692:	fba2 2303 	umull	r2, r3, r2, r3
 8008696:	0e1b      	lsrs	r3, r3, #24
 8008698:	61bb      	str	r3, [r7, #24]
 800869a:	e002      	b.n	80086a2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	695b      	ldr	r3, [r3, #20]
 80086a0:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681c      	ldr	r4, [r3, #0]
 80086a6:	466a      	mov	r2, sp
 80086a8:	f107 0314 	add.w	r3, r7, #20
 80086ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80086b0:	e882 0003 	stmia.w	r2, {r0, r1}
 80086b4:	f107 0308 	add.w	r3, r7, #8
 80086b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80086ba:	4620      	mov	r0, r4
 80086bc:	f003 f8cc 	bl	800b858 <SDMMC_Init>
 80086c0:	e008      	b.n	80086d4 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086c6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
 80086d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80086dc:	4618      	mov	r0, r3
 80086de:	f003 f987 	bl	800b9f0 <SDMMC_CmdBlockLength>
 80086e2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80086e4:	6a3b      	ldr	r3, [r7, #32]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00c      	beq.n	8008704 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a0a      	ldr	r2, [pc, #40]	; (8008718 <HAL_SD_ConfigWideBusOperation+0x214>)
 80086f0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086f6:	6a3b      	ldr	r3, [r7, #32]
 80086f8:	431a      	orrs	r2, r3
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800870c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008710:	4618      	mov	r0, r3
 8008712:	372c      	adds	r7, #44	; 0x2c
 8008714:	46bd      	mov	sp, r7
 8008716:	bd90      	pop	{r4, r7, pc}
 8008718:	1fe00fff 	.word	0x1fe00fff
 800871c:	55e63b89 	.word	0x55e63b89
 8008720:	02faf080 	.word	0x02faf080
 8008724:	017d7840 	.word	0x017d7840

08008728 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b086      	sub	sp, #24
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008730:	2300      	movs	r3, #0
 8008732:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008734:	f107 030c 	add.w	r3, r7, #12
 8008738:	4619      	mov	r1, r3
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 fa40 	bl	8008bc0 <SD_SendStatus>
 8008740:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d005      	beq.n	8008754 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	431a      	orrs	r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	0a5b      	lsrs	r3, r3, #9
 8008758:	f003 030f 	and.w	r3, r3, #15
 800875c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800875e:	693b      	ldr	r3, [r7, #16]
}
 8008760:	4618      	mov	r0, r3
 8008762:	3718      	adds	r7, #24
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b090      	sub	sp, #64	; 0x40
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8008770:	2300      	movs	r3, #0
 8008772:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8008774:	f7f9 ff50 	bl	8002618 <HAL_GetTick>
 8008778:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4618      	mov	r0, r3
 8008780:	f003 f8b2 	bl	800b8e8 <SDMMC_GetPowerState>
 8008784:	4603      	mov	r3, r0
 8008786:	2b00      	cmp	r3, #0
 8008788:	d102      	bne.n	8008790 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800878a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800878e:	e0b5      	b.n	80088fc <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008794:	2b03      	cmp	r3, #3
 8008796:	d02e      	beq.n	80087f6 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4618      	mov	r0, r3
 800879e:	f003 fa33 	bl	800bc08 <SDMMC_CmdSendCID>
 80087a2:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80087a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d001      	beq.n	80087ae <SD_InitCard+0x46>
    {
      return errorstate;
 80087aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ac:	e0a6      	b.n	80088fc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2100      	movs	r1, #0
 80087b4:	4618      	mov	r0, r3
 80087b6:	f003 f8dc 	bl	800b972 <SDMMC_GetResponse>
 80087ba:	4602      	mov	r2, r0
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2104      	movs	r1, #4
 80087c6:	4618      	mov	r0, r3
 80087c8:	f003 f8d3 	bl	800b972 <SDMMC_GetResponse>
 80087cc:	4602      	mov	r2, r0
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2108      	movs	r1, #8
 80087d8:	4618      	mov	r0, r3
 80087da:	f003 f8ca 	bl	800b972 <SDMMC_GetResponse>
 80087de:	4602      	mov	r2, r0
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	210c      	movs	r1, #12
 80087ea:	4618      	mov	r0, r3
 80087ec:	f003 f8c1 	bl	800b972 <SDMMC_GetResponse>
 80087f0:	4602      	mov	r2, r0
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087fa:	2b03      	cmp	r3, #3
 80087fc:	d01d      	beq.n	800883a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 80087fe:	e019      	b.n	8008834 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f107 020a 	add.w	r2, r7, #10
 8008808:	4611      	mov	r1, r2
 800880a:	4618      	mov	r0, r3
 800880c:	f003 fa3b 	bl	800bc86 <SDMMC_CmdSetRelAdd>
 8008810:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8008812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008814:	2b00      	cmp	r3, #0
 8008816:	d001      	beq.n	800881c <SD_InitCard+0xb4>
      {
        return errorstate;
 8008818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881a:	e06f      	b.n	80088fc <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800881c:	f7f9 fefc 	bl	8002618 <HAL_GetTick>
 8008820:	4602      	mov	r2, r0
 8008822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008824:	1ad3      	subs	r3, r2, r3
 8008826:	f241 3287 	movw	r2, #4999	; 0x1387
 800882a:	4293      	cmp	r3, r2
 800882c:	d902      	bls.n	8008834 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800882e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008832:	e063      	b.n	80088fc <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8008834:	897b      	ldrh	r3, [r7, #10]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d0e2      	beq.n	8008800 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800883e:	2b03      	cmp	r3, #3
 8008840:	d036      	beq.n	80088b0 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008842:	897b      	ldrh	r3, [r7, #10]
 8008844:	461a      	mov	r2, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008852:	041b      	lsls	r3, r3, #16
 8008854:	4619      	mov	r1, r3
 8008856:	4610      	mov	r0, r2
 8008858:	f003 f9f5 	bl	800bc46 <SDMMC_CmdSendCSD>
 800885c:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800885e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008860:	2b00      	cmp	r3, #0
 8008862:	d001      	beq.n	8008868 <SD_InitCard+0x100>
    {
      return errorstate;
 8008864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008866:	e049      	b.n	80088fc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	2100      	movs	r1, #0
 800886e:	4618      	mov	r0, r3
 8008870:	f003 f87f 	bl	800b972 <SDMMC_GetResponse>
 8008874:	4602      	mov	r2, r0
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2104      	movs	r1, #4
 8008880:	4618      	mov	r0, r3
 8008882:	f003 f876 	bl	800b972 <SDMMC_GetResponse>
 8008886:	4602      	mov	r2, r0
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2108      	movs	r1, #8
 8008892:	4618      	mov	r0, r3
 8008894:	f003 f86d 	bl	800b972 <SDMMC_GetResponse>
 8008898:	4602      	mov	r2, r0
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	210c      	movs	r1, #12
 80088a4:	4618      	mov	r0, r3
 80088a6:	f003 f864 	bl	800b972 <SDMMC_GetResponse>
 80088aa:	4602      	mov	r2, r0
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2104      	movs	r1, #4
 80088b6:	4618      	mov	r0, r3
 80088b8:	f003 f85b 	bl	800b972 <SDMMC_GetResponse>
 80088bc:	4603      	mov	r3, r0
 80088be:	0d1a      	lsrs	r2, r3, #20
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80088c4:	f107 030c 	add.w	r3, r7, #12
 80088c8:	4619      	mov	r1, r3
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f7ff fbb8 	bl	8008040 <HAL_SD_GetCardCSD>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d002      	beq.n	80088dc <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80088d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80088da:	e00f      	b.n	80088fc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088e4:	041b      	lsls	r3, r3, #16
 80088e6:	4619      	mov	r1, r3
 80088e8:	4610      	mov	r0, r2
 80088ea:	f003 f8a4 	bl	800ba36 <SDMMC_CmdSelDesel>
 80088ee:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80088f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d001      	beq.n	80088fa <SD_InitCard+0x192>
  {
    return errorstate;
 80088f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f8:	e000      	b.n	80088fc <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80088fa:	2300      	movs	r3, #0
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3740      	adds	r7, #64	; 0x40
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b086      	sub	sp, #24
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800890c:	2300      	movs	r3, #0
 800890e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8008910:	2300      	movs	r3, #0
 8008912:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8008914:	2300      	movs	r3, #0
 8008916:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4618      	mov	r0, r3
 800891e:	f003 f8ad 	bl	800ba7c <SDMMC_CmdGoIdleState>
 8008922:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d001      	beq.n	800892e <SD_PowerON+0x2a>
  {
    return errorstate;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	e072      	b.n	8008a14 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4618      	mov	r0, r3
 8008934:	f003 f8c0 	bl	800bab8 <SDMMC_CmdOperCond>
 8008938:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008940:	d10d      	bne.n	800895e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4618      	mov	r0, r3
 800894e:	f003 f895 	bl	800ba7c <SDMMC_CmdGoIdleState>
 8008952:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d004      	beq.n	8008964 <SD_PowerON+0x60>
    {
      return errorstate;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	e05a      	b.n	8008a14 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2201      	movs	r2, #1
 8008962:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008968:	2b01      	cmp	r3, #1
 800896a:	d137      	bne.n	80089dc <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2100      	movs	r1, #0
 8008972:	4618      	mov	r0, r3
 8008974:	f003 f8c0 	bl	800baf8 <SDMMC_CmdAppCommand>
 8008978:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d02d      	beq.n	80089dc <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008980:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008984:	e046      	b.n	8008a14 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2100      	movs	r1, #0
 800898c:	4618      	mov	r0, r3
 800898e:	f003 f8b3 	bl	800baf8 <SDMMC_CmdAppCommand>
 8008992:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d001      	beq.n	800899e <SD_PowerON+0x9a>
    {
      return errorstate;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	e03a      	b.n	8008a14 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	491e      	ldr	r1, [pc, #120]	; (8008a1c <SD_PowerON+0x118>)
 80089a4:	4618      	mov	r0, r3
 80089a6:	f003 f8ca 	bl	800bb3e <SDMMC_CmdAppOperCommand>
 80089aa:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d002      	beq.n	80089b8 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80089b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80089b6:	e02d      	b.n	8008a14 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	2100      	movs	r1, #0
 80089be:	4618      	mov	r0, r3
 80089c0:	f002 ffd7 	bl	800b972 <SDMMC_GetResponse>
 80089c4:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	0fdb      	lsrs	r3, r3, #31
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d101      	bne.n	80089d2 <SD_PowerON+0xce>
 80089ce:	2301      	movs	r3, #1
 80089d0:	e000      	b.n	80089d4 <SD_PowerON+0xd0>
 80089d2:	2300      	movs	r3, #0
 80089d4:	613b      	str	r3, [r7, #16]

    count++;
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	3301      	adds	r3, #1
 80089da:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d802      	bhi.n	80089ec <SD_PowerON+0xe8>
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d0cc      	beq.n	8008986 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d902      	bls.n	80089fc <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80089f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80089fa:	e00b      	b.n	8008a14 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d002      	beq.n	8008a12 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8008a12:	2300      	movs	r3, #0
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3718      	adds	r7, #24
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}
 8008a1c:	c1100000 	.word	0xc1100000

08008a20 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b08c      	sub	sp, #48	; 0x30
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008a2a:	f7f9 fdf5 	bl	8002618 <HAL_GetTick>
 8008a2e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	2100      	movs	r1, #0
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f002 ff99 	bl	800b972 <SDMMC_GetResponse>
 8008a40:	4603      	mov	r3, r0
 8008a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a4a:	d102      	bne.n	8008a52 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008a4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008a50:	e0b0      	b.n	8008bb4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	2140      	movs	r1, #64	; 0x40
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f002 ffc9 	bl	800b9f0 <SDMMC_CmdBlockLength>
 8008a5e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008a60:	6a3b      	ldr	r3, [r7, #32]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d005      	beq.n	8008a72 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8008a6e:	6a3b      	ldr	r3, [r7, #32]
 8008a70:	e0a0      	b.n	8008bb4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a7a:	041b      	lsls	r3, r3, #16
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	4610      	mov	r0, r2
 8008a80:	f003 f83a 	bl	800baf8 <SDMMC_CmdAppCommand>
 8008a84:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008a86:	6a3b      	ldr	r3, [r7, #32]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d005      	beq.n	8008a98 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8008a94:	6a3b      	ldr	r3, [r7, #32]
 8008a96:	e08d      	b.n	8008bb4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008a98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a9c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8008a9e:	2340      	movs	r3, #64	; 0x40
 8008aa0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008aa2:	2360      	movs	r3, #96	; 0x60
 8008aa4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008aa6:	2302      	movs	r3, #2
 8008aa8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f107 0208 	add.w	r2, r7, #8
 8008aba:	4611      	mov	r1, r2
 8008abc:	4618      	mov	r0, r3
 8008abe:	f002 ff6b 	bl	800b998 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f003 f922 	bl	800bd10 <SDMMC_CmdStatusRegister>
 8008acc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008ace:	6a3b      	ldr	r3, [r7, #32]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d02b      	beq.n	8008b2c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8008adc:	6a3b      	ldr	r3, [r7, #32]
 8008ade:	e069      	b.n	8008bb4 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ae6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d013      	beq.n	8008b16 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8008aee:	2300      	movs	r3, #0
 8008af0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008af2:	e00d      	b.n	8008b10 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4618      	mov	r0, r3
 8008afa:	f002 fed7 	bl	800b8ac <SDMMC_ReadFIFO>
 8008afe:	4602      	mov	r2, r0
 8008b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b02:	601a      	str	r2, [r3, #0]
        pData++;
 8008b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b06:	3304      	adds	r3, #4
 8008b08:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8008b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b12:	2b07      	cmp	r3, #7
 8008b14:	d9ee      	bls.n	8008af4 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008b16:	f7f9 fd7f 	bl	8002618 <HAL_GetTick>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1e:	1ad3      	subs	r3, r2, r3
 8008b20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b24:	d102      	bne.n	8008b2c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008b26:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008b2a:	e043      	b.n	8008bb4 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b32:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d0d2      	beq.n	8008ae0 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b40:	f003 0308 	and.w	r3, r3, #8
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d001      	beq.n	8008b4c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008b48:	2308      	movs	r3, #8
 8008b4a:	e033      	b.n	8008bb4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b52:	f003 0302 	and.w	r3, r3, #2
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d001      	beq.n	8008b5e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008b5a:	2302      	movs	r3, #2
 8008b5c:	e02a      	b.n	8008bb4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b64:	f003 0320 	and.w	r3, r3, #32
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d017      	beq.n	8008b9c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008b6c:	2320      	movs	r3, #32
 8008b6e:	e021      	b.n	8008bb4 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4618      	mov	r0, r3
 8008b76:	f002 fe99 	bl	800b8ac <SDMMC_ReadFIFO>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7e:	601a      	str	r2, [r3, #0]
    pData++;
 8008b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b82:	3304      	adds	r3, #4
 8008b84:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008b86:	f7f9 fd47 	bl	8002618 <HAL_GetTick>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8e:	1ad3      	subs	r3, r2, r3
 8008b90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b94:	d102      	bne.n	8008b9c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008b96:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008b9a:	e00b      	b.n	8008bb4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ba2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d1e2      	bne.n	8008b70 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a03      	ldr	r2, [pc, #12]	; (8008bbc <SD_SendSDStatus+0x19c>)
 8008bb0:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3730      	adds	r7, #48	; 0x30
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}
 8008bbc:	18000f3a 	.word	0x18000f3a

08008bc0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d102      	bne.n	8008bd6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008bd4:	e018      	b.n	8008c08 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bde:	041b      	lsls	r3, r3, #16
 8008be0:	4619      	mov	r1, r3
 8008be2:	4610      	mov	r0, r2
 8008be4:	f003 f871 	bl	800bcca <SDMMC_CmdSendStatus>
 8008be8:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d001      	beq.n	8008bf4 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	e009      	b.n	8008c08 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	2100      	movs	r1, #0
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f002 feb9 	bl	800b972 <SDMMC_GetResponse>
 8008c00:	4602      	mov	r2, r0
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008c06:	2300      	movs	r3, #0
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3710      	adds	r7, #16
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b086      	sub	sp, #24
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008c18:	2300      	movs	r3, #0
 8008c1a:	60fb      	str	r3, [r7, #12]
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	2100      	movs	r1, #0
 8008c26:	4618      	mov	r0, r3
 8008c28:	f002 fea3 	bl	800b972 <SDMMC_GetResponse>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c36:	d102      	bne.n	8008c3e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008c38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c3c:	e02f      	b.n	8008c9e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008c3e:	f107 030c 	add.w	r3, r7, #12
 8008c42:	4619      	mov	r1, r3
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 f879 	bl	8008d3c <SD_FindSCR>
 8008c4a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d001      	beq.n	8008c56 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	e023      	b.n	8008c9e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d01c      	beq.n	8008c9a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c68:	041b      	lsls	r3, r3, #16
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	4610      	mov	r0, r2
 8008c6e:	f002 ff43 	bl	800baf8 <SDMMC_CmdAppCommand>
 8008c72:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d001      	beq.n	8008c7e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	e00f      	b.n	8008c9e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	2102      	movs	r1, #2
 8008c84:	4618      	mov	r0, r3
 8008c86:	f002 ff7a 	bl	800bb7e <SDMMC_CmdBusWidth>
 8008c8a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d001      	beq.n	8008c96 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	e003      	b.n	8008c9e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008c96:	2300      	movs	r3, #0
 8008c98:	e001      	b.n	8008c9e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008c9a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3718      	adds	r7, #24
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008ca6:	b580      	push	{r7, lr}
 8008ca8:	b086      	sub	sp, #24
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008cae:	2300      	movs	r3, #0
 8008cb0:	60fb      	str	r3, [r7, #12]
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2100      	movs	r1, #0
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f002 fe58 	bl	800b972 <SDMMC_GetResponse>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ccc:	d102      	bne.n	8008cd4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008cce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008cd2:	e02f      	b.n	8008d34 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008cd4:	f107 030c 	add.w	r3, r7, #12
 8008cd8:	4619      	mov	r1, r3
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 f82e 	bl	8008d3c <SD_FindSCR>
 8008ce0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d001      	beq.n	8008cec <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	e023      	b.n	8008d34 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d01c      	beq.n	8008d30 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cfe:	041b      	lsls	r3, r3, #16
 8008d00:	4619      	mov	r1, r3
 8008d02:	4610      	mov	r0, r2
 8008d04:	f002 fef8 	bl	800baf8 <SDMMC_CmdAppCommand>
 8008d08:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d001      	beq.n	8008d14 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	e00f      	b.n	8008d34 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	2100      	movs	r1, #0
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f002 ff2f 	bl	800bb7e <SDMMC_CmdBusWidth>
 8008d20:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d001      	beq.n	8008d2c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	e003      	b.n	8008d34 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	e001      	b.n	8008d34 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008d30:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3718      	adds	r7, #24
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b08e      	sub	sp, #56	; 0x38
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008d46:	f7f9 fc67 	bl	8002618 <HAL_GetTick>
 8008d4a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008d50:	2300      	movs	r3, #0
 8008d52:	60bb      	str	r3, [r7, #8]
 8008d54:	2300      	movs	r3, #0
 8008d56:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2108      	movs	r1, #8
 8008d62:	4618      	mov	r0, r3
 8008d64:	f002 fe44 	bl	800b9f0 <SDMMC_CmdBlockLength>
 8008d68:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d001      	beq.n	8008d74 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d72:	e0ad      	b.n	8008ed0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d7c:	041b      	lsls	r3, r3, #16
 8008d7e:	4619      	mov	r1, r3
 8008d80:	4610      	mov	r0, r2
 8008d82:	f002 feb9 	bl	800baf8 <SDMMC_CmdAppCommand>
 8008d86:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d001      	beq.n	8008d92 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d90:	e09e      	b.n	8008ed0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008d92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d96:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008d98:	2308      	movs	r3, #8
 8008d9a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008d9c:	2330      	movs	r3, #48	; 0x30
 8008d9e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008da0:	2302      	movs	r3, #2
 8008da2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008da4:	2300      	movs	r3, #0
 8008da6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008da8:	2301      	movs	r3, #1
 8008daa:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f107 0210 	add.w	r2, r7, #16
 8008db4:	4611      	mov	r1, r2
 8008db6:	4618      	mov	r0, r3
 8008db8:	f002 fdee 	bl	800b998 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f002 feff 	bl	800bbc4 <SDMMC_CmdSendSCR>
 8008dc6:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d027      	beq.n	8008e1e <SD_FindSCR+0xe2>
  {
    return errorstate;
 8008dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd0:	e07e      	b.n	8008ed0 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d113      	bne.n	8008e08 <SD_FindSCR+0xcc>
 8008de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d110      	bne.n	8008e08 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4618      	mov	r0, r3
 8008dec:	f002 fd5e 	bl	800b8ac <SDMMC_ReadFIFO>
 8008df0:	4603      	mov	r3, r0
 8008df2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f002 fd57 	bl	800b8ac <SDMMC_ReadFIFO>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	60fb      	str	r3, [r7, #12]
      index++;
 8008e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e04:	3301      	adds	r3, #1
 8008e06:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008e08:	f7f9 fc06 	bl	8002618 <HAL_GetTick>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e10:	1ad3      	subs	r3, r2, r3
 8008e12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e16:	d102      	bne.n	8008e1e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008e18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e1c:	e058      	b.n	8008ed0 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e24:	f240 532a 	movw	r3, #1322	; 0x52a
 8008e28:	4013      	ands	r3, r2
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d0d1      	beq.n	8008dd2 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e34:	f003 0308 	and.w	r3, r3, #8
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d005      	beq.n	8008e48 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2208      	movs	r2, #8
 8008e42:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008e44:	2308      	movs	r3, #8
 8008e46:	e043      	b.n	8008ed0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e4e:	f003 0302 	and.w	r3, r3, #2
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d005      	beq.n	8008e62 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	2202      	movs	r2, #2
 8008e5c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008e5e:	2302      	movs	r3, #2
 8008e60:	e036      	b.n	8008ed0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e68:	f003 0320 	and.w	r3, r3, #32
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d005      	beq.n	8008e7c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	2220      	movs	r2, #32
 8008e76:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008e78:	2320      	movs	r3, #32
 8008e7a:	e029      	b.n	8008ed0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a15      	ldr	r2, [pc, #84]	; (8008ed8 <SD_FindSCR+0x19c>)
 8008e82:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	061a      	lsls	r2, r3, #24
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	021b      	lsls	r3, r3, #8
 8008e8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008e90:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	0a1b      	lsrs	r3, r3, #8
 8008e96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008e9a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	0e1b      	lsrs	r3, r3, #24
 8008ea0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea4:	601a      	str	r2, [r3, #0]
    scr++;
 8008ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea8:	3304      	adds	r3, #4
 8008eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	061a      	lsls	r2, r3, #24
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	021b      	lsls	r3, r3, #8
 8008eb4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008eb8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	0a1b      	lsrs	r3, r3, #8
 8008ebe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008ec2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	0e1b      	lsrs	r3, r3, #24
 8008ec8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ecc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008ece:	2300      	movs	r3, #0
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3738      	adds	r7, #56	; 0x38
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	18000f3a 	.word	0x18000f3a

08008edc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d101      	bne.n	8008eee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008eea:	2301      	movs	r3, #1
 8008eec:	e10f      	b.n	800910e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a87      	ldr	r2, [pc, #540]	; (8009118 <HAL_SPI_Init+0x23c>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d00f      	beq.n	8008f1e <HAL_SPI_Init+0x42>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a86      	ldr	r2, [pc, #536]	; (800911c <HAL_SPI_Init+0x240>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d00a      	beq.n	8008f1e <HAL_SPI_Init+0x42>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a84      	ldr	r2, [pc, #528]	; (8009120 <HAL_SPI_Init+0x244>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d005      	beq.n	8008f1e <HAL_SPI_Init+0x42>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	68db      	ldr	r3, [r3, #12]
 8008f16:	2b0f      	cmp	r3, #15
 8008f18:	d901      	bls.n	8008f1e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e0f7      	b.n	800910e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 f900 	bl	8009124 <SPI_GetPacketSize>
 8008f24:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a7b      	ldr	r2, [pc, #492]	; (8009118 <HAL_SPI_Init+0x23c>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d00c      	beq.n	8008f4a <HAL_SPI_Init+0x6e>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a79      	ldr	r2, [pc, #484]	; (800911c <HAL_SPI_Init+0x240>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d007      	beq.n	8008f4a <HAL_SPI_Init+0x6e>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a78      	ldr	r2, [pc, #480]	; (8009120 <HAL_SPI_Init+0x244>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d002      	beq.n	8008f4a <HAL_SPI_Init+0x6e>
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2b08      	cmp	r3, #8
 8008f48:	d811      	bhi.n	8008f6e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008f4e:	4a72      	ldr	r2, [pc, #456]	; (8009118 <HAL_SPI_Init+0x23c>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d009      	beq.n	8008f68 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a70      	ldr	r2, [pc, #448]	; (800911c <HAL_SPI_Init+0x240>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d004      	beq.n	8008f68 <HAL_SPI_Init+0x8c>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a6f      	ldr	r2, [pc, #444]	; (8009120 <HAL_SPI_Init+0x244>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d104      	bne.n	8008f72 <HAL_SPI_Init+0x96>
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2b10      	cmp	r3, #16
 8008f6c:	d901      	bls.n	8008f72 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	e0cd      	b.n	800910e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d106      	bne.n	8008f8c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2200      	movs	r2, #0
 8008f82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f7f8 ff66 	bl	8001e58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2202      	movs	r2, #2
 8008f90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f022 0201 	bic.w	r2, r2, #1
 8008fa2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	689b      	ldr	r3, [r3, #8]
 8008faa:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008fae:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	699b      	ldr	r3, [r3, #24]
 8008fb4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008fb8:	d119      	bne.n	8008fee <HAL_SPI_Init+0x112>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008fc2:	d103      	bne.n	8008fcc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d008      	beq.n	8008fde <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d10c      	bne.n	8008fee <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008fd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fdc:	d107      	bne.n	8008fee <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008fec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d00f      	beq.n	800901a <HAL_SPI_Init+0x13e>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	68db      	ldr	r3, [r3, #12]
 8008ffe:	2b06      	cmp	r3, #6
 8009000:	d90b      	bls.n	800901a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	430a      	orrs	r2, r1
 8009016:	601a      	str	r2, [r3, #0]
 8009018:	e007      	b.n	800902a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009028:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	69da      	ldr	r2, [r3, #28]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009032:	431a      	orrs	r2, r3
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	431a      	orrs	r2, r3
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800903c:	ea42 0103 	orr.w	r1, r2, r3
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	68da      	ldr	r2, [r3, #12]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	430a      	orrs	r2, r1
 800904a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009054:	431a      	orrs	r2, r3
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800905a:	431a      	orrs	r2, r3
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	699b      	ldr	r3, [r3, #24]
 8009060:	431a      	orrs	r2, r3
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	431a      	orrs	r2, r3
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	695b      	ldr	r3, [r3, #20]
 800906c:	431a      	orrs	r2, r3
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6a1b      	ldr	r3, [r3, #32]
 8009072:	431a      	orrs	r2, r3
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	431a      	orrs	r2, r3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800907e:	431a      	orrs	r2, r3
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	431a      	orrs	r2, r3
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800908a:	ea42 0103 	orr.w	r1, r2, r3
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	430a      	orrs	r2, r1
 8009098:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d113      	bne.n	80090ca <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090b4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80090c8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f022 0201 	bic.w	r2, r2, #1
 80090d8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d00a      	beq.n	80090fc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	430a      	orrs	r2, r1
 80090fa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2200      	movs	r2, #0
 8009100:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2201      	movs	r2, #1
 8009108:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800910c:	2300      	movs	r3, #0
}
 800910e:	4618      	mov	r0, r3
 8009110:	3710      	adds	r7, #16
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	40013000 	.word	0x40013000
 800911c:	40003800 	.word	0x40003800
 8009120:	40003c00 	.word	0x40003c00

08009124 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009124:	b480      	push	{r7}
 8009126:	b085      	sub	sp, #20
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009130:	095b      	lsrs	r3, r3, #5
 8009132:	3301      	adds	r3, #1
 8009134:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	3301      	adds	r3, #1
 800913c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	3307      	adds	r3, #7
 8009142:	08db      	lsrs	r3, r3, #3
 8009144:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	68fa      	ldr	r2, [r7, #12]
 800914a:	fb02 f303 	mul.w	r3, r2, r3
}
 800914e:	4618      	mov	r0, r3
 8009150:	3714      	adds	r7, #20
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr

0800915a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800915a:	b580      	push	{r7, lr}
 800915c:	b082      	sub	sp, #8
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d101      	bne.n	800916c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009168:	2301      	movs	r3, #1
 800916a:	e049      	b.n	8009200 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009172:	b2db      	uxtb	r3, r3
 8009174:	2b00      	cmp	r3, #0
 8009176:	d106      	bne.n	8009186 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2200      	movs	r2, #0
 800917c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f7f8 ff49 	bl	8002018 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2202      	movs	r2, #2
 800918a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	3304      	adds	r3, #4
 8009196:	4619      	mov	r1, r3
 8009198:	4610      	mov	r0, r2
 800919a:	f000 fbd7 	bl	800994c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2201      	movs	r2, #1
 80091a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2201      	movs	r2, #1
 80091aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2201      	movs	r2, #1
 80091b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2201      	movs	r2, #1
 80091ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2201      	movs	r2, #1
 80091c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2201      	movs	r2, #1
 80091ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2201      	movs	r2, #1
 80091d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2201      	movs	r2, #1
 80091da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2201      	movs	r2, #1
 80091e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2201      	movs	r2, #1
 80091ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2201      	movs	r2, #1
 80091f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2201      	movs	r2, #1
 80091fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091fe:	2300      	movs	r3, #0
}
 8009200:	4618      	mov	r0, r3
 8009202:	3708      	adds	r7, #8
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d101      	bne.n	800921a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009216:	2301      	movs	r3, #1
 8009218:	e049      	b.n	80092ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009220:	b2db      	uxtb	r3, r3
 8009222:	2b00      	cmp	r3, #0
 8009224:	d106      	bne.n	8009234 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f7f8 ffa0 	bl	8002174 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2202      	movs	r2, #2
 8009238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	3304      	adds	r3, #4
 8009244:	4619      	mov	r1, r3
 8009246:	4610      	mov	r0, r2
 8009248:	f000 fb80 	bl	800994c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2201      	movs	r2, #1
 8009250:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2201      	movs	r2, #1
 8009258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2201      	movs	r2, #1
 8009260:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2201      	movs	r2, #1
 8009268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2201      	movs	r2, #1
 8009270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2201      	movs	r2, #1
 8009278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2201      	movs	r2, #1
 8009280:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2201      	movs	r2, #1
 8009288:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2201      	movs	r2, #1
 8009290:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2201      	movs	r2, #1
 8009298:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2201      	movs	r2, #1
 80092a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2201      	movs	r2, #1
 80092a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3708      	adds	r7, #8
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b082      	sub	sp, #8
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d101      	bne.n	80092c8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80092c4:	2301      	movs	r3, #1
 80092c6:	e049      	b.n	800935c <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092ce:	b2db      	uxtb	r3, r3
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d106      	bne.n	80092e2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2200      	movs	r2, #0
 80092d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 f841 	bl	8009364 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2202      	movs	r2, #2
 80092e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	3304      	adds	r3, #4
 80092f2:	4619      	mov	r1, r3
 80092f4:	4610      	mov	r0, r2
 80092f6:	f000 fb29 	bl	800994c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2201      	movs	r2, #1
 80092fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2201      	movs	r2, #1
 8009306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2201      	movs	r2, #1
 800930e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2201      	movs	r2, #1
 8009316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2201      	movs	r2, #1
 800931e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2201      	movs	r2, #1
 8009326:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2201      	movs	r2, #1
 800932e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2201      	movs	r2, #1
 8009336:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2201      	movs	r2, #1
 800933e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2201      	movs	r2, #1
 8009346:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2201      	movs	r2, #1
 800934e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2201      	movs	r2, #1
 8009356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800935a:	2300      	movs	r3, #0
}
 800935c:	4618      	mov	r0, r3
 800935e:	3708      	adds	r7, #8
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009364:	b480      	push	{r7}
 8009366:	b083      	sub	sp, #12
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800936c:	bf00      	nop
 800936e:	370c      	adds	r7, #12
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr

08009378 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b086      	sub	sp, #24
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009384:	2300      	movs	r3, #0
 8009386:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800938e:	2b01      	cmp	r3, #1
 8009390:	d101      	bne.n	8009396 <HAL_TIM_IC_ConfigChannel+0x1e>
 8009392:	2302      	movs	r3, #2
 8009394:	e088      	b.n	80094a8 <HAL_TIM_IC_ConfigChannel+0x130>
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2201      	movs	r2, #1
 800939a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d11b      	bne.n	80093dc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80093b4:	f000 ff24 	bl	800a200 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	699a      	ldr	r2, [r3, #24]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f022 020c 	bic.w	r2, r2, #12
 80093c6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	6999      	ldr	r1, [r3, #24]
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	689a      	ldr	r2, [r3, #8]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	430a      	orrs	r2, r1
 80093d8:	619a      	str	r2, [r3, #24]
 80093da:	e060      	b.n	800949e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2b04      	cmp	r3, #4
 80093e0:	d11c      	bne.n	800941c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80093f2:	f000 ffa8 	bl	800a346 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	699a      	ldr	r2, [r3, #24]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009404:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	6999      	ldr	r1, [r3, #24]
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	689b      	ldr	r3, [r3, #8]
 8009410:	021a      	lsls	r2, r3, #8
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	430a      	orrs	r2, r1
 8009418:	619a      	str	r2, [r3, #24]
 800941a:	e040      	b.n	800949e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2b08      	cmp	r3, #8
 8009420:	d11b      	bne.n	800945a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8009432:	f000 fff5 	bl	800a420 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	69da      	ldr	r2, [r3, #28]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f022 020c 	bic.w	r2, r2, #12
 8009444:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	69d9      	ldr	r1, [r3, #28]
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	689a      	ldr	r2, [r3, #8]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	430a      	orrs	r2, r1
 8009456:	61da      	str	r2, [r3, #28]
 8009458:	e021      	b.n	800949e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2b0c      	cmp	r3, #12
 800945e:	d11c      	bne.n	800949a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8009470:	f001 f812 	bl	800a498 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	69da      	ldr	r2, [r3, #28]
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009482:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	69d9      	ldr	r1, [r3, #28]
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	689b      	ldr	r3, [r3, #8]
 800948e:	021a      	lsls	r2, r3, #8
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	430a      	orrs	r2, r1
 8009496:	61da      	str	r2, [r3, #28]
 8009498:	e001      	b.n	800949e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2200      	movs	r2, #0
 80094a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80094a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3718      	adds	r7, #24
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b086      	sub	sp, #24
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	60f8      	str	r0, [r7, #12]
 80094b8:	60b9      	str	r1, [r7, #8]
 80094ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80094bc:	2300      	movs	r3, #0
 80094be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d101      	bne.n	80094ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80094ca:	2302      	movs	r3, #2
 80094cc:	e0ff      	b.n	80096ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2201      	movs	r2, #1
 80094d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2b14      	cmp	r3, #20
 80094da:	f200 80f0 	bhi.w	80096be <HAL_TIM_PWM_ConfigChannel+0x20e>
 80094de:	a201      	add	r2, pc, #4	; (adr r2, 80094e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80094e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e4:	08009539 	.word	0x08009539
 80094e8:	080096bf 	.word	0x080096bf
 80094ec:	080096bf 	.word	0x080096bf
 80094f0:	080096bf 	.word	0x080096bf
 80094f4:	08009579 	.word	0x08009579
 80094f8:	080096bf 	.word	0x080096bf
 80094fc:	080096bf 	.word	0x080096bf
 8009500:	080096bf 	.word	0x080096bf
 8009504:	080095bb 	.word	0x080095bb
 8009508:	080096bf 	.word	0x080096bf
 800950c:	080096bf 	.word	0x080096bf
 8009510:	080096bf 	.word	0x080096bf
 8009514:	080095fb 	.word	0x080095fb
 8009518:	080096bf 	.word	0x080096bf
 800951c:	080096bf 	.word	0x080096bf
 8009520:	080096bf 	.word	0x080096bf
 8009524:	0800963d 	.word	0x0800963d
 8009528:	080096bf 	.word	0x080096bf
 800952c:	080096bf 	.word	0x080096bf
 8009530:	080096bf 	.word	0x080096bf
 8009534:	0800967d 	.word	0x0800967d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	68b9      	ldr	r1, [r7, #8]
 800953e:	4618      	mov	r0, r3
 8009540:	f000 fa9e 	bl	8009a80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	699a      	ldr	r2, [r3, #24]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f042 0208 	orr.w	r2, r2, #8
 8009552:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	699a      	ldr	r2, [r3, #24]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f022 0204 	bic.w	r2, r2, #4
 8009562:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	6999      	ldr	r1, [r3, #24]
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	691a      	ldr	r2, [r3, #16]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	430a      	orrs	r2, r1
 8009574:	619a      	str	r2, [r3, #24]
      break;
 8009576:	e0a5      	b.n	80096c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	68b9      	ldr	r1, [r7, #8]
 800957e:	4618      	mov	r0, r3
 8009580:	f000 fb0e 	bl	8009ba0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	699a      	ldr	r2, [r3, #24]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009592:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	699a      	ldr	r2, [r3, #24]
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	6999      	ldr	r1, [r3, #24]
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	691b      	ldr	r3, [r3, #16]
 80095ae:	021a      	lsls	r2, r3, #8
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	430a      	orrs	r2, r1
 80095b6:	619a      	str	r2, [r3, #24]
      break;
 80095b8:	e084      	b.n	80096c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	68b9      	ldr	r1, [r7, #8]
 80095c0:	4618      	mov	r0, r3
 80095c2:	f000 fb77 	bl	8009cb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	69da      	ldr	r2, [r3, #28]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f042 0208 	orr.w	r2, r2, #8
 80095d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	69da      	ldr	r2, [r3, #28]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f022 0204 	bic.w	r2, r2, #4
 80095e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	69d9      	ldr	r1, [r3, #28]
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	691a      	ldr	r2, [r3, #16]
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	430a      	orrs	r2, r1
 80095f6:	61da      	str	r2, [r3, #28]
      break;
 80095f8:	e064      	b.n	80096c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	68b9      	ldr	r1, [r7, #8]
 8009600:	4618      	mov	r0, r3
 8009602:	f000 fbdf 	bl	8009dc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	69da      	ldr	r2, [r3, #28]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009614:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	69da      	ldr	r2, [r3, #28]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009624:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	69d9      	ldr	r1, [r3, #28]
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	691b      	ldr	r3, [r3, #16]
 8009630:	021a      	lsls	r2, r3, #8
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	430a      	orrs	r2, r1
 8009638:	61da      	str	r2, [r3, #28]
      break;
 800963a:	e043      	b.n	80096c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	68b9      	ldr	r1, [r7, #8]
 8009642:	4618      	mov	r0, r3
 8009644:	f000 fc28 	bl	8009e98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f042 0208 	orr.w	r2, r2, #8
 8009656:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f022 0204 	bic.w	r2, r2, #4
 8009666:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	691a      	ldr	r2, [r3, #16]
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	430a      	orrs	r2, r1
 8009678:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800967a:	e023      	b.n	80096c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	68b9      	ldr	r1, [r7, #8]
 8009682:	4618      	mov	r0, r3
 8009684:	f000 fc6c 	bl	8009f60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009696:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	691b      	ldr	r3, [r3, #16]
 80096b2:	021a      	lsls	r2, r3, #8
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	430a      	orrs	r2, r1
 80096ba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80096bc:	e002      	b.n	80096c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80096be:	2301      	movs	r3, #1
 80096c0:	75fb      	strb	r3, [r7, #23]
      break;
 80096c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2200      	movs	r2, #0
 80096c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80096cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3718      	adds	r7, #24
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop

080096d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80096e2:	2300      	movs	r3, #0
 80096e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d101      	bne.n	80096f4 <HAL_TIM_ConfigClockSource+0x1c>
 80096f0:	2302      	movs	r3, #2
 80096f2:	e0dc      	b.n	80098ae <HAL_TIM_ConfigClockSource+0x1d6>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2201      	movs	r2, #1
 80096f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2202      	movs	r2, #2
 8009700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800970c:	68ba      	ldr	r2, [r7, #8]
 800970e:	4b6a      	ldr	r3, [pc, #424]	; (80098b8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009710:	4013      	ands	r3, r2
 8009712:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800971a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	68ba      	ldr	r2, [r7, #8]
 8009722:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a64      	ldr	r2, [pc, #400]	; (80098bc <HAL_TIM_ConfigClockSource+0x1e4>)
 800972a:	4293      	cmp	r3, r2
 800972c:	f000 80a9 	beq.w	8009882 <HAL_TIM_ConfigClockSource+0x1aa>
 8009730:	4a62      	ldr	r2, [pc, #392]	; (80098bc <HAL_TIM_ConfigClockSource+0x1e4>)
 8009732:	4293      	cmp	r3, r2
 8009734:	f200 80ae 	bhi.w	8009894 <HAL_TIM_ConfigClockSource+0x1bc>
 8009738:	4a61      	ldr	r2, [pc, #388]	; (80098c0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800973a:	4293      	cmp	r3, r2
 800973c:	f000 80a1 	beq.w	8009882 <HAL_TIM_ConfigClockSource+0x1aa>
 8009740:	4a5f      	ldr	r2, [pc, #380]	; (80098c0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009742:	4293      	cmp	r3, r2
 8009744:	f200 80a6 	bhi.w	8009894 <HAL_TIM_ConfigClockSource+0x1bc>
 8009748:	4a5e      	ldr	r2, [pc, #376]	; (80098c4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800974a:	4293      	cmp	r3, r2
 800974c:	f000 8099 	beq.w	8009882 <HAL_TIM_ConfigClockSource+0x1aa>
 8009750:	4a5c      	ldr	r2, [pc, #368]	; (80098c4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009752:	4293      	cmp	r3, r2
 8009754:	f200 809e 	bhi.w	8009894 <HAL_TIM_ConfigClockSource+0x1bc>
 8009758:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800975c:	f000 8091 	beq.w	8009882 <HAL_TIM_ConfigClockSource+0x1aa>
 8009760:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009764:	f200 8096 	bhi.w	8009894 <HAL_TIM_ConfigClockSource+0x1bc>
 8009768:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800976c:	f000 8089 	beq.w	8009882 <HAL_TIM_ConfigClockSource+0x1aa>
 8009770:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009774:	f200 808e 	bhi.w	8009894 <HAL_TIM_ConfigClockSource+0x1bc>
 8009778:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800977c:	d03e      	beq.n	80097fc <HAL_TIM_ConfigClockSource+0x124>
 800977e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009782:	f200 8087 	bhi.w	8009894 <HAL_TIM_ConfigClockSource+0x1bc>
 8009786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800978a:	f000 8086 	beq.w	800989a <HAL_TIM_ConfigClockSource+0x1c2>
 800978e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009792:	d87f      	bhi.n	8009894 <HAL_TIM_ConfigClockSource+0x1bc>
 8009794:	2b70      	cmp	r3, #112	; 0x70
 8009796:	d01a      	beq.n	80097ce <HAL_TIM_ConfigClockSource+0xf6>
 8009798:	2b70      	cmp	r3, #112	; 0x70
 800979a:	d87b      	bhi.n	8009894 <HAL_TIM_ConfigClockSource+0x1bc>
 800979c:	2b60      	cmp	r3, #96	; 0x60
 800979e:	d050      	beq.n	8009842 <HAL_TIM_ConfigClockSource+0x16a>
 80097a0:	2b60      	cmp	r3, #96	; 0x60
 80097a2:	d877      	bhi.n	8009894 <HAL_TIM_ConfigClockSource+0x1bc>
 80097a4:	2b50      	cmp	r3, #80	; 0x50
 80097a6:	d03c      	beq.n	8009822 <HAL_TIM_ConfigClockSource+0x14a>
 80097a8:	2b50      	cmp	r3, #80	; 0x50
 80097aa:	d873      	bhi.n	8009894 <HAL_TIM_ConfigClockSource+0x1bc>
 80097ac:	2b40      	cmp	r3, #64	; 0x40
 80097ae:	d058      	beq.n	8009862 <HAL_TIM_ConfigClockSource+0x18a>
 80097b0:	2b40      	cmp	r3, #64	; 0x40
 80097b2:	d86f      	bhi.n	8009894 <HAL_TIM_ConfigClockSource+0x1bc>
 80097b4:	2b30      	cmp	r3, #48	; 0x30
 80097b6:	d064      	beq.n	8009882 <HAL_TIM_ConfigClockSource+0x1aa>
 80097b8:	2b30      	cmp	r3, #48	; 0x30
 80097ba:	d86b      	bhi.n	8009894 <HAL_TIM_ConfigClockSource+0x1bc>
 80097bc:	2b20      	cmp	r3, #32
 80097be:	d060      	beq.n	8009882 <HAL_TIM_ConfigClockSource+0x1aa>
 80097c0:	2b20      	cmp	r3, #32
 80097c2:	d867      	bhi.n	8009894 <HAL_TIM_ConfigClockSource+0x1bc>
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d05c      	beq.n	8009882 <HAL_TIM_ConfigClockSource+0x1aa>
 80097c8:	2b10      	cmp	r3, #16
 80097ca:	d05a      	beq.n	8009882 <HAL_TIM_ConfigClockSource+0x1aa>
 80097cc:	e062      	b.n	8009894 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80097de:	f000 feb7 	bl	800a550 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80097f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	68ba      	ldr	r2, [r7, #8]
 80097f8:	609a      	str	r2, [r3, #8]
      break;
 80097fa:	e04f      	b.n	800989c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800980c:	f000 fea0 	bl	800a550 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	689a      	ldr	r2, [r3, #8]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800981e:	609a      	str	r2, [r3, #8]
      break;
 8009820:	e03c      	b.n	800989c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800982e:	461a      	mov	r2, r3
 8009830:	f000 fd5a 	bl	800a2e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	2150      	movs	r1, #80	; 0x50
 800983a:	4618      	mov	r0, r3
 800983c:	f000 fe6a 	bl	800a514 <TIM_ITRx_SetConfig>
      break;
 8009840:	e02c      	b.n	800989c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800984e:	461a      	mov	r2, r3
 8009850:	f000 fdb6 	bl	800a3c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	2160      	movs	r1, #96	; 0x60
 800985a:	4618      	mov	r0, r3
 800985c:	f000 fe5a 	bl	800a514 <TIM_ITRx_SetConfig>
      break;
 8009860:	e01c      	b.n	800989c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800986e:	461a      	mov	r2, r3
 8009870:	f000 fd3a 	bl	800a2e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	2140      	movs	r1, #64	; 0x40
 800987a:	4618      	mov	r0, r3
 800987c:	f000 fe4a 	bl	800a514 <TIM_ITRx_SetConfig>
      break;
 8009880:	e00c      	b.n	800989c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4619      	mov	r1, r3
 800988c:	4610      	mov	r0, r2
 800988e:	f000 fe41 	bl	800a514 <TIM_ITRx_SetConfig>
      break;
 8009892:	e003      	b.n	800989c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009894:	2301      	movs	r3, #1
 8009896:	73fb      	strb	r3, [r7, #15]
      break;
 8009898:	e000      	b.n	800989c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800989a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2201      	movs	r2, #1
 80098a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2200      	movs	r2, #0
 80098a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80098ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3710      	adds	r7, #16
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop
 80098b8:	ffceff88 	.word	0xffceff88
 80098bc:	00100040 	.word	0x00100040
 80098c0:	00100030 	.word	0x00100030
 80098c4:	00100020 	.word	0x00100020

080098c8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d101      	bne.n	80098e0 <HAL_TIM_SlaveConfigSynchro+0x18>
 80098dc:	2302      	movs	r3, #2
 80098de:	e031      	b.n	8009944 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2201      	movs	r2, #1
 80098e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2202      	movs	r2, #2
 80098ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80098f0:	6839      	ldr	r1, [r7, #0]
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 fb9a 	bl	800a02c <TIM_SlaveTimer_SetConfig>
 80098f8:	4603      	mov	r3, r0
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d009      	beq.n	8009912 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2201      	movs	r2, #1
 8009902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2200      	movs	r2, #0
 800990a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800990e:	2301      	movs	r3, #1
 8009910:	e018      	b.n	8009944 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	68da      	ldr	r2, [r3, #12]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009920:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	68da      	ldr	r2, [r3, #12]
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009930:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2201      	movs	r2, #1
 8009936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2200      	movs	r2, #0
 800993e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009942:	2300      	movs	r3, #0
}
 8009944:	4618      	mov	r0, r3
 8009946:	3708      	adds	r7, #8
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}

0800994c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800994c:	b480      	push	{r7}
 800994e:	b085      	sub	sp, #20
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	4a40      	ldr	r2, [pc, #256]	; (8009a60 <TIM_Base_SetConfig+0x114>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d013      	beq.n	800998c <TIM_Base_SetConfig+0x40>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800996a:	d00f      	beq.n	800998c <TIM_Base_SetConfig+0x40>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	4a3d      	ldr	r2, [pc, #244]	; (8009a64 <TIM_Base_SetConfig+0x118>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d00b      	beq.n	800998c <TIM_Base_SetConfig+0x40>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	4a3c      	ldr	r2, [pc, #240]	; (8009a68 <TIM_Base_SetConfig+0x11c>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d007      	beq.n	800998c <TIM_Base_SetConfig+0x40>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	4a3b      	ldr	r2, [pc, #236]	; (8009a6c <TIM_Base_SetConfig+0x120>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d003      	beq.n	800998c <TIM_Base_SetConfig+0x40>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	4a3a      	ldr	r2, [pc, #232]	; (8009a70 <TIM_Base_SetConfig+0x124>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d108      	bne.n	800999e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009992:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	68fa      	ldr	r2, [r7, #12]
 800999a:	4313      	orrs	r3, r2
 800999c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	4a2f      	ldr	r2, [pc, #188]	; (8009a60 <TIM_Base_SetConfig+0x114>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d01f      	beq.n	80099e6 <TIM_Base_SetConfig+0x9a>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099ac:	d01b      	beq.n	80099e6 <TIM_Base_SetConfig+0x9a>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	4a2c      	ldr	r2, [pc, #176]	; (8009a64 <TIM_Base_SetConfig+0x118>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d017      	beq.n	80099e6 <TIM_Base_SetConfig+0x9a>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	4a2b      	ldr	r2, [pc, #172]	; (8009a68 <TIM_Base_SetConfig+0x11c>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d013      	beq.n	80099e6 <TIM_Base_SetConfig+0x9a>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	4a2a      	ldr	r2, [pc, #168]	; (8009a6c <TIM_Base_SetConfig+0x120>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d00f      	beq.n	80099e6 <TIM_Base_SetConfig+0x9a>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	4a29      	ldr	r2, [pc, #164]	; (8009a70 <TIM_Base_SetConfig+0x124>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d00b      	beq.n	80099e6 <TIM_Base_SetConfig+0x9a>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	4a28      	ldr	r2, [pc, #160]	; (8009a74 <TIM_Base_SetConfig+0x128>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d007      	beq.n	80099e6 <TIM_Base_SetConfig+0x9a>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	4a27      	ldr	r2, [pc, #156]	; (8009a78 <TIM_Base_SetConfig+0x12c>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d003      	beq.n	80099e6 <TIM_Base_SetConfig+0x9a>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	4a26      	ldr	r2, [pc, #152]	; (8009a7c <TIM_Base_SetConfig+0x130>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d108      	bne.n	80099f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	68db      	ldr	r3, [r3, #12]
 80099f2:	68fa      	ldr	r2, [r7, #12]
 80099f4:	4313      	orrs	r3, r2
 80099f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	695b      	ldr	r3, [r3, #20]
 8009a02:	4313      	orrs	r3, r2
 8009a04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	68fa      	ldr	r2, [r7, #12]
 8009a0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	689a      	ldr	r2, [r3, #8]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	4a10      	ldr	r2, [pc, #64]	; (8009a60 <TIM_Base_SetConfig+0x114>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d00f      	beq.n	8009a44 <TIM_Base_SetConfig+0xf8>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	4a12      	ldr	r2, [pc, #72]	; (8009a70 <TIM_Base_SetConfig+0x124>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d00b      	beq.n	8009a44 <TIM_Base_SetConfig+0xf8>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	4a11      	ldr	r2, [pc, #68]	; (8009a74 <TIM_Base_SetConfig+0x128>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d007      	beq.n	8009a44 <TIM_Base_SetConfig+0xf8>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	4a10      	ldr	r2, [pc, #64]	; (8009a78 <TIM_Base_SetConfig+0x12c>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d003      	beq.n	8009a44 <TIM_Base_SetConfig+0xf8>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	4a0f      	ldr	r2, [pc, #60]	; (8009a7c <TIM_Base_SetConfig+0x130>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d103      	bne.n	8009a4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	691a      	ldr	r2, [r3, #16]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2201      	movs	r2, #1
 8009a50:	615a      	str	r2, [r3, #20]
}
 8009a52:	bf00      	nop
 8009a54:	3714      	adds	r7, #20
 8009a56:	46bd      	mov	sp, r7
 8009a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5c:	4770      	bx	lr
 8009a5e:	bf00      	nop
 8009a60:	40010000 	.word	0x40010000
 8009a64:	40000400 	.word	0x40000400
 8009a68:	40000800 	.word	0x40000800
 8009a6c:	40000c00 	.word	0x40000c00
 8009a70:	40010400 	.word	0x40010400
 8009a74:	40014000 	.word	0x40014000
 8009a78:	40014400 	.word	0x40014400
 8009a7c:	40014800 	.word	0x40014800

08009a80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b087      	sub	sp, #28
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6a1b      	ldr	r3, [r3, #32]
 8009a8e:	f023 0201 	bic.w	r2, r3, #1
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6a1b      	ldr	r3, [r3, #32]
 8009a9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	699b      	ldr	r3, [r3, #24]
 8009aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009aa8:	68fa      	ldr	r2, [r7, #12]
 8009aaa:	4b37      	ldr	r3, [pc, #220]	; (8009b88 <TIM_OC1_SetConfig+0x108>)
 8009aac:	4013      	ands	r3, r2
 8009aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f023 0303 	bic.w	r3, r3, #3
 8009ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	68fa      	ldr	r2, [r7, #12]
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	f023 0302 	bic.w	r3, r3, #2
 8009ac8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	689b      	ldr	r3, [r3, #8]
 8009ace:	697a      	ldr	r2, [r7, #20]
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	4a2d      	ldr	r2, [pc, #180]	; (8009b8c <TIM_OC1_SetConfig+0x10c>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d00f      	beq.n	8009afc <TIM_OC1_SetConfig+0x7c>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	4a2c      	ldr	r2, [pc, #176]	; (8009b90 <TIM_OC1_SetConfig+0x110>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d00b      	beq.n	8009afc <TIM_OC1_SetConfig+0x7c>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	4a2b      	ldr	r2, [pc, #172]	; (8009b94 <TIM_OC1_SetConfig+0x114>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d007      	beq.n	8009afc <TIM_OC1_SetConfig+0x7c>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	4a2a      	ldr	r2, [pc, #168]	; (8009b98 <TIM_OC1_SetConfig+0x118>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d003      	beq.n	8009afc <TIM_OC1_SetConfig+0x7c>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	4a29      	ldr	r2, [pc, #164]	; (8009b9c <TIM_OC1_SetConfig+0x11c>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d10c      	bne.n	8009b16 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	f023 0308 	bic.w	r3, r3, #8
 8009b02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	697a      	ldr	r2, [r7, #20]
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	f023 0304 	bic.w	r3, r3, #4
 8009b14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	4a1c      	ldr	r2, [pc, #112]	; (8009b8c <TIM_OC1_SetConfig+0x10c>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d00f      	beq.n	8009b3e <TIM_OC1_SetConfig+0xbe>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	4a1b      	ldr	r2, [pc, #108]	; (8009b90 <TIM_OC1_SetConfig+0x110>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d00b      	beq.n	8009b3e <TIM_OC1_SetConfig+0xbe>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	4a1a      	ldr	r2, [pc, #104]	; (8009b94 <TIM_OC1_SetConfig+0x114>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d007      	beq.n	8009b3e <TIM_OC1_SetConfig+0xbe>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	4a19      	ldr	r2, [pc, #100]	; (8009b98 <TIM_OC1_SetConfig+0x118>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d003      	beq.n	8009b3e <TIM_OC1_SetConfig+0xbe>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	4a18      	ldr	r2, [pc, #96]	; (8009b9c <TIM_OC1_SetConfig+0x11c>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d111      	bne.n	8009b62 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	695b      	ldr	r3, [r3, #20]
 8009b52:	693a      	ldr	r2, [r7, #16]
 8009b54:	4313      	orrs	r3, r2
 8009b56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	699b      	ldr	r3, [r3, #24]
 8009b5c:	693a      	ldr	r2, [r7, #16]
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	693a      	ldr	r2, [r7, #16]
 8009b66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	68fa      	ldr	r2, [r7, #12]
 8009b6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	685a      	ldr	r2, [r3, #4]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	697a      	ldr	r2, [r7, #20]
 8009b7a:	621a      	str	r2, [r3, #32]
}
 8009b7c:	bf00      	nop
 8009b7e:	371c      	adds	r7, #28
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr
 8009b88:	fffeff8f 	.word	0xfffeff8f
 8009b8c:	40010000 	.word	0x40010000
 8009b90:	40010400 	.word	0x40010400
 8009b94:	40014000 	.word	0x40014000
 8009b98:	40014400 	.word	0x40014400
 8009b9c:	40014800 	.word	0x40014800

08009ba0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b087      	sub	sp, #28
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6a1b      	ldr	r3, [r3, #32]
 8009bae:	f023 0210 	bic.w	r2, r3, #16
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6a1b      	ldr	r3, [r3, #32]
 8009bba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	685b      	ldr	r3, [r3, #4]
 8009bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	699b      	ldr	r3, [r3, #24]
 8009bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009bc8:	68fa      	ldr	r2, [r7, #12]
 8009bca:	4b34      	ldr	r3, [pc, #208]	; (8009c9c <TIM_OC2_SetConfig+0xfc>)
 8009bcc:	4013      	ands	r3, r2
 8009bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009bd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	021b      	lsls	r3, r3, #8
 8009bde:	68fa      	ldr	r2, [r7, #12]
 8009be0:	4313      	orrs	r3, r2
 8009be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	f023 0320 	bic.w	r3, r3, #32
 8009bea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	689b      	ldr	r3, [r3, #8]
 8009bf0:	011b      	lsls	r3, r3, #4
 8009bf2:	697a      	ldr	r2, [r7, #20]
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	4a29      	ldr	r2, [pc, #164]	; (8009ca0 <TIM_OC2_SetConfig+0x100>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d003      	beq.n	8009c08 <TIM_OC2_SetConfig+0x68>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	4a28      	ldr	r2, [pc, #160]	; (8009ca4 <TIM_OC2_SetConfig+0x104>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d10d      	bne.n	8009c24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	68db      	ldr	r3, [r3, #12]
 8009c14:	011b      	lsls	r3, r3, #4
 8009c16:	697a      	ldr	r2, [r7, #20]
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	4a1e      	ldr	r2, [pc, #120]	; (8009ca0 <TIM_OC2_SetConfig+0x100>)
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d00f      	beq.n	8009c4c <TIM_OC2_SetConfig+0xac>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	4a1d      	ldr	r2, [pc, #116]	; (8009ca4 <TIM_OC2_SetConfig+0x104>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d00b      	beq.n	8009c4c <TIM_OC2_SetConfig+0xac>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	4a1c      	ldr	r2, [pc, #112]	; (8009ca8 <TIM_OC2_SetConfig+0x108>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d007      	beq.n	8009c4c <TIM_OC2_SetConfig+0xac>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	4a1b      	ldr	r2, [pc, #108]	; (8009cac <TIM_OC2_SetConfig+0x10c>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d003      	beq.n	8009c4c <TIM_OC2_SetConfig+0xac>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	4a1a      	ldr	r2, [pc, #104]	; (8009cb0 <TIM_OC2_SetConfig+0x110>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d113      	bne.n	8009c74 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	695b      	ldr	r3, [r3, #20]
 8009c60:	009b      	lsls	r3, r3, #2
 8009c62:	693a      	ldr	r2, [r7, #16]
 8009c64:	4313      	orrs	r3, r2
 8009c66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	699b      	ldr	r3, [r3, #24]
 8009c6c:	009b      	lsls	r3, r3, #2
 8009c6e:	693a      	ldr	r2, [r7, #16]
 8009c70:	4313      	orrs	r3, r2
 8009c72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	693a      	ldr	r2, [r7, #16]
 8009c78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	68fa      	ldr	r2, [r7, #12]
 8009c7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	685a      	ldr	r2, [r3, #4]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	697a      	ldr	r2, [r7, #20]
 8009c8c:	621a      	str	r2, [r3, #32]
}
 8009c8e:	bf00      	nop
 8009c90:	371c      	adds	r7, #28
 8009c92:	46bd      	mov	sp, r7
 8009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c98:	4770      	bx	lr
 8009c9a:	bf00      	nop
 8009c9c:	feff8fff 	.word	0xfeff8fff
 8009ca0:	40010000 	.word	0x40010000
 8009ca4:	40010400 	.word	0x40010400
 8009ca8:	40014000 	.word	0x40014000
 8009cac:	40014400 	.word	0x40014400
 8009cb0:	40014800 	.word	0x40014800

08009cb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b087      	sub	sp, #28
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6a1b      	ldr	r3, [r3, #32]
 8009cc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6a1b      	ldr	r3, [r3, #32]
 8009cce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	69db      	ldr	r3, [r3, #28]
 8009cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009cdc:	68fa      	ldr	r2, [r7, #12]
 8009cde:	4b33      	ldr	r3, [pc, #204]	; (8009dac <TIM_OC3_SetConfig+0xf8>)
 8009ce0:	4013      	ands	r3, r2
 8009ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f023 0303 	bic.w	r3, r3, #3
 8009cea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	68fa      	ldr	r2, [r7, #12]
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009cfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	689b      	ldr	r3, [r3, #8]
 8009d02:	021b      	lsls	r3, r3, #8
 8009d04:	697a      	ldr	r2, [r7, #20]
 8009d06:	4313      	orrs	r3, r2
 8009d08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	4a28      	ldr	r2, [pc, #160]	; (8009db0 <TIM_OC3_SetConfig+0xfc>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d003      	beq.n	8009d1a <TIM_OC3_SetConfig+0x66>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	4a27      	ldr	r2, [pc, #156]	; (8009db4 <TIM_OC3_SetConfig+0x100>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d10d      	bne.n	8009d36 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009d20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	68db      	ldr	r3, [r3, #12]
 8009d26:	021b      	lsls	r3, r3, #8
 8009d28:	697a      	ldr	r2, [r7, #20]
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009d34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	4a1d      	ldr	r2, [pc, #116]	; (8009db0 <TIM_OC3_SetConfig+0xfc>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d00f      	beq.n	8009d5e <TIM_OC3_SetConfig+0xaa>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	4a1c      	ldr	r2, [pc, #112]	; (8009db4 <TIM_OC3_SetConfig+0x100>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d00b      	beq.n	8009d5e <TIM_OC3_SetConfig+0xaa>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	4a1b      	ldr	r2, [pc, #108]	; (8009db8 <TIM_OC3_SetConfig+0x104>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d007      	beq.n	8009d5e <TIM_OC3_SetConfig+0xaa>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	4a1a      	ldr	r2, [pc, #104]	; (8009dbc <TIM_OC3_SetConfig+0x108>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d003      	beq.n	8009d5e <TIM_OC3_SetConfig+0xaa>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	4a19      	ldr	r2, [pc, #100]	; (8009dc0 <TIM_OC3_SetConfig+0x10c>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d113      	bne.n	8009d86 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	695b      	ldr	r3, [r3, #20]
 8009d72:	011b      	lsls	r3, r3, #4
 8009d74:	693a      	ldr	r2, [r7, #16]
 8009d76:	4313      	orrs	r3, r2
 8009d78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	699b      	ldr	r3, [r3, #24]
 8009d7e:	011b      	lsls	r3, r3, #4
 8009d80:	693a      	ldr	r2, [r7, #16]
 8009d82:	4313      	orrs	r3, r2
 8009d84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	693a      	ldr	r2, [r7, #16]
 8009d8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	68fa      	ldr	r2, [r7, #12]
 8009d90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	685a      	ldr	r2, [r3, #4]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	697a      	ldr	r2, [r7, #20]
 8009d9e:	621a      	str	r2, [r3, #32]
}
 8009da0:	bf00      	nop
 8009da2:	371c      	adds	r7, #28
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr
 8009dac:	fffeff8f 	.word	0xfffeff8f
 8009db0:	40010000 	.word	0x40010000
 8009db4:	40010400 	.word	0x40010400
 8009db8:	40014000 	.word	0x40014000
 8009dbc:	40014400 	.word	0x40014400
 8009dc0:	40014800 	.word	0x40014800

08009dc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b087      	sub	sp, #28
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6a1b      	ldr	r3, [r3, #32]
 8009dd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6a1b      	ldr	r3, [r3, #32]
 8009dde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	69db      	ldr	r3, [r3, #28]
 8009dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009dec:	68fa      	ldr	r2, [r7, #12]
 8009dee:	4b24      	ldr	r3, [pc, #144]	; (8009e80 <TIM_OC4_SetConfig+0xbc>)
 8009df0:	4013      	ands	r3, r2
 8009df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009dfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	021b      	lsls	r3, r3, #8
 8009e02:	68fa      	ldr	r2, [r7, #12]
 8009e04:	4313      	orrs	r3, r2
 8009e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009e0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	689b      	ldr	r3, [r3, #8]
 8009e14:	031b      	lsls	r3, r3, #12
 8009e16:	693a      	ldr	r2, [r7, #16]
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	4a19      	ldr	r2, [pc, #100]	; (8009e84 <TIM_OC4_SetConfig+0xc0>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d00f      	beq.n	8009e44 <TIM_OC4_SetConfig+0x80>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	4a18      	ldr	r2, [pc, #96]	; (8009e88 <TIM_OC4_SetConfig+0xc4>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d00b      	beq.n	8009e44 <TIM_OC4_SetConfig+0x80>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	4a17      	ldr	r2, [pc, #92]	; (8009e8c <TIM_OC4_SetConfig+0xc8>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d007      	beq.n	8009e44 <TIM_OC4_SetConfig+0x80>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	4a16      	ldr	r2, [pc, #88]	; (8009e90 <TIM_OC4_SetConfig+0xcc>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d003      	beq.n	8009e44 <TIM_OC4_SetConfig+0x80>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	4a15      	ldr	r2, [pc, #84]	; (8009e94 <TIM_OC4_SetConfig+0xd0>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d109      	bne.n	8009e58 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	695b      	ldr	r3, [r3, #20]
 8009e50:	019b      	lsls	r3, r3, #6
 8009e52:	697a      	ldr	r2, [r7, #20]
 8009e54:	4313      	orrs	r3, r2
 8009e56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	697a      	ldr	r2, [r7, #20]
 8009e5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	68fa      	ldr	r2, [r7, #12]
 8009e62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	685a      	ldr	r2, [r3, #4]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	693a      	ldr	r2, [r7, #16]
 8009e70:	621a      	str	r2, [r3, #32]
}
 8009e72:	bf00      	nop
 8009e74:	371c      	adds	r7, #28
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr
 8009e7e:	bf00      	nop
 8009e80:	feff8fff 	.word	0xfeff8fff
 8009e84:	40010000 	.word	0x40010000
 8009e88:	40010400 	.word	0x40010400
 8009e8c:	40014000 	.word	0x40014000
 8009e90:	40014400 	.word	0x40014400
 8009e94:	40014800 	.word	0x40014800

08009e98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b087      	sub	sp, #28
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6a1b      	ldr	r3, [r3, #32]
 8009ea6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6a1b      	ldr	r3, [r3, #32]
 8009eb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009ec0:	68fa      	ldr	r2, [r7, #12]
 8009ec2:	4b21      	ldr	r3, [pc, #132]	; (8009f48 <TIM_OC5_SetConfig+0xb0>)
 8009ec4:	4013      	ands	r3, r2
 8009ec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	68fa      	ldr	r2, [r7, #12]
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009ed8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	689b      	ldr	r3, [r3, #8]
 8009ede:	041b      	lsls	r3, r3, #16
 8009ee0:	693a      	ldr	r2, [r7, #16]
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	4a18      	ldr	r2, [pc, #96]	; (8009f4c <TIM_OC5_SetConfig+0xb4>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d00f      	beq.n	8009f0e <TIM_OC5_SetConfig+0x76>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	4a17      	ldr	r2, [pc, #92]	; (8009f50 <TIM_OC5_SetConfig+0xb8>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d00b      	beq.n	8009f0e <TIM_OC5_SetConfig+0x76>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	4a16      	ldr	r2, [pc, #88]	; (8009f54 <TIM_OC5_SetConfig+0xbc>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d007      	beq.n	8009f0e <TIM_OC5_SetConfig+0x76>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	4a15      	ldr	r2, [pc, #84]	; (8009f58 <TIM_OC5_SetConfig+0xc0>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d003      	beq.n	8009f0e <TIM_OC5_SetConfig+0x76>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	4a14      	ldr	r2, [pc, #80]	; (8009f5c <TIM_OC5_SetConfig+0xc4>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d109      	bne.n	8009f22 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	695b      	ldr	r3, [r3, #20]
 8009f1a:	021b      	lsls	r3, r3, #8
 8009f1c:	697a      	ldr	r2, [r7, #20]
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	697a      	ldr	r2, [r7, #20]
 8009f26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	68fa      	ldr	r2, [r7, #12]
 8009f2c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	685a      	ldr	r2, [r3, #4]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	693a      	ldr	r2, [r7, #16]
 8009f3a:	621a      	str	r2, [r3, #32]
}
 8009f3c:	bf00      	nop
 8009f3e:	371c      	adds	r7, #28
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr
 8009f48:	fffeff8f 	.word	0xfffeff8f
 8009f4c:	40010000 	.word	0x40010000
 8009f50:	40010400 	.word	0x40010400
 8009f54:	40014000 	.word	0x40014000
 8009f58:	40014400 	.word	0x40014400
 8009f5c:	40014800 	.word	0x40014800

08009f60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b087      	sub	sp, #28
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6a1b      	ldr	r3, [r3, #32]
 8009f6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6a1b      	ldr	r3, [r3, #32]
 8009f7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009f88:	68fa      	ldr	r2, [r7, #12]
 8009f8a:	4b22      	ldr	r3, [pc, #136]	; (800a014 <TIM_OC6_SetConfig+0xb4>)
 8009f8c:	4013      	ands	r3, r2
 8009f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	021b      	lsls	r3, r3, #8
 8009f96:	68fa      	ldr	r2, [r7, #12]
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009fa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	689b      	ldr	r3, [r3, #8]
 8009fa8:	051b      	lsls	r3, r3, #20
 8009faa:	693a      	ldr	r2, [r7, #16]
 8009fac:	4313      	orrs	r3, r2
 8009fae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	4a19      	ldr	r2, [pc, #100]	; (800a018 <TIM_OC6_SetConfig+0xb8>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d00f      	beq.n	8009fd8 <TIM_OC6_SetConfig+0x78>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	4a18      	ldr	r2, [pc, #96]	; (800a01c <TIM_OC6_SetConfig+0xbc>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d00b      	beq.n	8009fd8 <TIM_OC6_SetConfig+0x78>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	4a17      	ldr	r2, [pc, #92]	; (800a020 <TIM_OC6_SetConfig+0xc0>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d007      	beq.n	8009fd8 <TIM_OC6_SetConfig+0x78>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	4a16      	ldr	r2, [pc, #88]	; (800a024 <TIM_OC6_SetConfig+0xc4>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d003      	beq.n	8009fd8 <TIM_OC6_SetConfig+0x78>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	4a15      	ldr	r2, [pc, #84]	; (800a028 <TIM_OC6_SetConfig+0xc8>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d109      	bne.n	8009fec <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009fde:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	695b      	ldr	r3, [r3, #20]
 8009fe4:	029b      	lsls	r3, r3, #10
 8009fe6:	697a      	ldr	r2, [r7, #20]
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	697a      	ldr	r2, [r7, #20]
 8009ff0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	68fa      	ldr	r2, [r7, #12]
 8009ff6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	685a      	ldr	r2, [r3, #4]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	693a      	ldr	r2, [r7, #16]
 800a004:	621a      	str	r2, [r3, #32]
}
 800a006:	bf00      	nop
 800a008:	371c      	adds	r7, #28
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr
 800a012:	bf00      	nop
 800a014:	feff8fff 	.word	0xfeff8fff
 800a018:	40010000 	.word	0x40010000
 800a01c:	40010400 	.word	0x40010400
 800a020:	40014000 	.word	0x40014000
 800a024:	40014400 	.word	0x40014400
 800a028:	40014800 	.word	0x40014800

0800a02c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b086      	sub	sp, #24
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a036:	2300      	movs	r3, #0
 800a038:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	689b      	ldr	r3, [r3, #8]
 800a040:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a042:	693a      	ldr	r2, [r7, #16]
 800a044:	4b65      	ldr	r3, [pc, #404]	; (800a1dc <TIM_SlaveTimer_SetConfig+0x1b0>)
 800a046:	4013      	ands	r3, r2
 800a048:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	693a      	ldr	r2, [r7, #16]
 800a050:	4313      	orrs	r3, r2
 800a052:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a054:	693a      	ldr	r2, [r7, #16]
 800a056:	4b62      	ldr	r3, [pc, #392]	; (800a1e0 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800a058:	4013      	ands	r3, r2
 800a05a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	693a      	ldr	r2, [r7, #16]
 800a062:	4313      	orrs	r3, r2
 800a064:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	693a      	ldr	r2, [r7, #16]
 800a06c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	4a5c      	ldr	r2, [pc, #368]	; (800a1e4 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800a074:	4293      	cmp	r3, r2
 800a076:	f000 80ab 	beq.w	800a1d0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800a07a:	4a5a      	ldr	r2, [pc, #360]	; (800a1e4 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	f200 80a4 	bhi.w	800a1ca <TIM_SlaveTimer_SetConfig+0x19e>
 800a082:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a086:	f000 80a3 	beq.w	800a1d0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800a08a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a08e:	f200 809c 	bhi.w	800a1ca <TIM_SlaveTimer_SetConfig+0x19e>
 800a092:	4a55      	ldr	r2, [pc, #340]	; (800a1e8 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800a094:	4293      	cmp	r3, r2
 800a096:	f000 809b 	beq.w	800a1d0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800a09a:	4a53      	ldr	r2, [pc, #332]	; (800a1e8 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	f200 8094 	bhi.w	800a1ca <TIM_SlaveTimer_SetConfig+0x19e>
 800a0a2:	4a52      	ldr	r2, [pc, #328]	; (800a1ec <TIM_SlaveTimer_SetConfig+0x1c0>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	f000 8093 	beq.w	800a1d0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800a0aa:	4a50      	ldr	r2, [pc, #320]	; (800a1ec <TIM_SlaveTimer_SetConfig+0x1c0>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	f200 808c 	bhi.w	800a1ca <TIM_SlaveTimer_SetConfig+0x19e>
 800a0b2:	4a4f      	ldr	r2, [pc, #316]	; (800a1f0 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	f000 808b 	beq.w	800a1d0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800a0ba:	4a4d      	ldr	r2, [pc, #308]	; (800a1f0 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	f200 8084 	bhi.w	800a1ca <TIM_SlaveTimer_SetConfig+0x19e>
 800a0c2:	4a4c      	ldr	r2, [pc, #304]	; (800a1f4 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	f000 8083 	beq.w	800a1d0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800a0ca:	4a4a      	ldr	r2, [pc, #296]	; (800a1f4 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d87c      	bhi.n	800a1ca <TIM_SlaveTimer_SetConfig+0x19e>
 800a0d0:	4a49      	ldr	r2, [pc, #292]	; (800a1f8 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d07c      	beq.n	800a1d0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800a0d6:	4a48      	ldr	r2, [pc, #288]	; (800a1f8 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d876      	bhi.n	800a1ca <TIM_SlaveTimer_SetConfig+0x19e>
 800a0dc:	4a47      	ldr	r2, [pc, #284]	; (800a1fc <TIM_SlaveTimer_SetConfig+0x1d0>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d076      	beq.n	800a1d0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800a0e2:	4a46      	ldr	r2, [pc, #280]	; (800a1fc <TIM_SlaveTimer_SetConfig+0x1d0>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d870      	bhi.n	800a1ca <TIM_SlaveTimer_SetConfig+0x19e>
 800a0e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a0ec:	d070      	beq.n	800a1d0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800a0ee:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a0f2:	d86a      	bhi.n	800a1ca <TIM_SlaveTimer_SetConfig+0x19e>
 800a0f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0f8:	d06a      	beq.n	800a1d0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800a0fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0fe:	d864      	bhi.n	800a1ca <TIM_SlaveTimer_SetConfig+0x19e>
 800a100:	2b70      	cmp	r3, #112	; 0x70
 800a102:	d01a      	beq.n	800a13a <TIM_SlaveTimer_SetConfig+0x10e>
 800a104:	2b70      	cmp	r3, #112	; 0x70
 800a106:	d860      	bhi.n	800a1ca <TIM_SlaveTimer_SetConfig+0x19e>
 800a108:	2b60      	cmp	r3, #96	; 0x60
 800a10a:	d054      	beq.n	800a1b6 <TIM_SlaveTimer_SetConfig+0x18a>
 800a10c:	2b60      	cmp	r3, #96	; 0x60
 800a10e:	d85c      	bhi.n	800a1ca <TIM_SlaveTimer_SetConfig+0x19e>
 800a110:	2b50      	cmp	r3, #80	; 0x50
 800a112:	d046      	beq.n	800a1a2 <TIM_SlaveTimer_SetConfig+0x176>
 800a114:	2b50      	cmp	r3, #80	; 0x50
 800a116:	d858      	bhi.n	800a1ca <TIM_SlaveTimer_SetConfig+0x19e>
 800a118:	2b40      	cmp	r3, #64	; 0x40
 800a11a:	d019      	beq.n	800a150 <TIM_SlaveTimer_SetConfig+0x124>
 800a11c:	2b40      	cmp	r3, #64	; 0x40
 800a11e:	d854      	bhi.n	800a1ca <TIM_SlaveTimer_SetConfig+0x19e>
 800a120:	2b30      	cmp	r3, #48	; 0x30
 800a122:	d055      	beq.n	800a1d0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800a124:	2b30      	cmp	r3, #48	; 0x30
 800a126:	d850      	bhi.n	800a1ca <TIM_SlaveTimer_SetConfig+0x19e>
 800a128:	2b20      	cmp	r3, #32
 800a12a:	d051      	beq.n	800a1d0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800a12c:	2b20      	cmp	r3, #32
 800a12e:	d84c      	bhi.n	800a1ca <TIM_SlaveTimer_SetConfig+0x19e>
 800a130:	2b00      	cmp	r3, #0
 800a132:	d04d      	beq.n	800a1d0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800a134:	2b10      	cmp	r3, #16
 800a136:	d04b      	beq.n	800a1d0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800a138:	e047      	b.n	800a1ca <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800a14a:	f000 fa01 	bl	800a550 <TIM_ETR_SetConfig>
      break;
 800a14e:	e040      	b.n	800a1d2 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	2b05      	cmp	r3, #5
 800a156:	d101      	bne.n	800a15c <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 800a158:	2301      	movs	r3, #1
 800a15a:	e03b      	b.n	800a1d4 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	6a1b      	ldr	r3, [r3, #32]
 800a162:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	6a1a      	ldr	r2, [r3, #32]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f022 0201 	bic.w	r2, r2, #1
 800a172:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	699b      	ldr	r3, [r3, #24]
 800a17a:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a182:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	691b      	ldr	r3, [r3, #16]
 800a188:	011b      	lsls	r3, r3, #4
 800a18a:	68ba      	ldr	r2, [r7, #8]
 800a18c:	4313      	orrs	r3, r2
 800a18e:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	68ba      	ldr	r2, [r7, #8]
 800a196:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	68fa      	ldr	r2, [r7, #12]
 800a19e:	621a      	str	r2, [r3, #32]
      break;
 800a1a0:	e017      	b.n	800a1d2 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	f000 f89a 	bl	800a2e8 <TIM_TI1_ConfigInputStage>
      break;
 800a1b4:	e00d      	b.n	800a1d2 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	f000 f8fc 	bl	800a3c0 <TIM_TI2_ConfigInputStage>
      break;
 800a1c8:	e003      	b.n	800a1d2 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	75fb      	strb	r3, [r7, #23]
      break;
 800a1ce:	e000      	b.n	800a1d2 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 800a1d0:	bf00      	nop
  }

  return status;
 800a1d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3718      	adds	r7, #24
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}
 800a1dc:	ffcfff8f 	.word	0xffcfff8f
 800a1e0:	fffefff8 	.word	0xfffefff8
 800a1e4:	00200010 	.word	0x00200010
 800a1e8:	00100070 	.word	0x00100070
 800a1ec:	00100060 	.word	0x00100060
 800a1f0:	00100050 	.word	0x00100050
 800a1f4:	00100040 	.word	0x00100040
 800a1f8:	00100030 	.word	0x00100030
 800a1fc:	00100020 	.word	0x00100020

0800a200 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a200:	b480      	push	{r7}
 800a202:	b087      	sub	sp, #28
 800a204:	af00      	add	r7, sp, #0
 800a206:	60f8      	str	r0, [r7, #12]
 800a208:	60b9      	str	r1, [r7, #8]
 800a20a:	607a      	str	r2, [r7, #4]
 800a20c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	6a1b      	ldr	r3, [r3, #32]
 800a212:	f023 0201 	bic.w	r2, r3, #1
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	699b      	ldr	r3, [r3, #24]
 800a21e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	6a1b      	ldr	r3, [r3, #32]
 800a224:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	4a28      	ldr	r2, [pc, #160]	; (800a2cc <TIM_TI1_SetConfig+0xcc>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d01b      	beq.n	800a266 <TIM_TI1_SetConfig+0x66>
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a234:	d017      	beq.n	800a266 <TIM_TI1_SetConfig+0x66>
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	4a25      	ldr	r2, [pc, #148]	; (800a2d0 <TIM_TI1_SetConfig+0xd0>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d013      	beq.n	800a266 <TIM_TI1_SetConfig+0x66>
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	4a24      	ldr	r2, [pc, #144]	; (800a2d4 <TIM_TI1_SetConfig+0xd4>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d00f      	beq.n	800a266 <TIM_TI1_SetConfig+0x66>
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	4a23      	ldr	r2, [pc, #140]	; (800a2d8 <TIM_TI1_SetConfig+0xd8>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d00b      	beq.n	800a266 <TIM_TI1_SetConfig+0x66>
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	4a22      	ldr	r2, [pc, #136]	; (800a2dc <TIM_TI1_SetConfig+0xdc>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d007      	beq.n	800a266 <TIM_TI1_SetConfig+0x66>
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	4a21      	ldr	r2, [pc, #132]	; (800a2e0 <TIM_TI1_SetConfig+0xe0>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d003      	beq.n	800a266 <TIM_TI1_SetConfig+0x66>
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	4a20      	ldr	r2, [pc, #128]	; (800a2e4 <TIM_TI1_SetConfig+0xe4>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d101      	bne.n	800a26a <TIM_TI1_SetConfig+0x6a>
 800a266:	2301      	movs	r3, #1
 800a268:	e000      	b.n	800a26c <TIM_TI1_SetConfig+0x6c>
 800a26a:	2300      	movs	r3, #0
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d008      	beq.n	800a282 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	f023 0303 	bic.w	r3, r3, #3
 800a276:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a278:	697a      	ldr	r2, [r7, #20]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	4313      	orrs	r3, r2
 800a27e:	617b      	str	r3, [r7, #20]
 800a280:	e003      	b.n	800a28a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	f043 0301 	orr.w	r3, r3, #1
 800a288:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a290:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	011b      	lsls	r3, r3, #4
 800a296:	b2db      	uxtb	r3, r3
 800a298:	697a      	ldr	r2, [r7, #20]
 800a29a:	4313      	orrs	r3, r2
 800a29c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	f023 030a 	bic.w	r3, r3, #10
 800a2a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	f003 030a 	and.w	r3, r3, #10
 800a2ac:	693a      	ldr	r2, [r7, #16]
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	697a      	ldr	r2, [r7, #20]
 800a2b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	693a      	ldr	r2, [r7, #16]
 800a2bc:	621a      	str	r2, [r3, #32]
}
 800a2be:	bf00      	nop
 800a2c0:	371c      	adds	r7, #28
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr
 800a2ca:	bf00      	nop
 800a2cc:	40010000 	.word	0x40010000
 800a2d0:	40000400 	.word	0x40000400
 800a2d4:	40000800 	.word	0x40000800
 800a2d8:	40000c00 	.word	0x40000c00
 800a2dc:	40010400 	.word	0x40010400
 800a2e0:	40001800 	.word	0x40001800
 800a2e4:	40014000 	.word	0x40014000

0800a2e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b087      	sub	sp, #28
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	60f8      	str	r0, [r7, #12]
 800a2f0:	60b9      	str	r1, [r7, #8]
 800a2f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	6a1b      	ldr	r3, [r3, #32]
 800a2f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	6a1b      	ldr	r3, [r3, #32]
 800a2fe:	f023 0201 	bic.w	r2, r3, #1
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	699b      	ldr	r3, [r3, #24]
 800a30a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a312:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	011b      	lsls	r3, r3, #4
 800a318:	693a      	ldr	r2, [r7, #16]
 800a31a:	4313      	orrs	r3, r2
 800a31c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	f023 030a 	bic.w	r3, r3, #10
 800a324:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a326:	697a      	ldr	r2, [r7, #20]
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	4313      	orrs	r3, r2
 800a32c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	693a      	ldr	r2, [r7, #16]
 800a332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	697a      	ldr	r2, [r7, #20]
 800a338:	621a      	str	r2, [r3, #32]
}
 800a33a:	bf00      	nop
 800a33c:	371c      	adds	r7, #28
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr

0800a346 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a346:	b480      	push	{r7}
 800a348:	b087      	sub	sp, #28
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	60f8      	str	r0, [r7, #12]
 800a34e:	60b9      	str	r1, [r7, #8]
 800a350:	607a      	str	r2, [r7, #4]
 800a352:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	6a1b      	ldr	r3, [r3, #32]
 800a358:	f023 0210 	bic.w	r2, r3, #16
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	699b      	ldr	r3, [r3, #24]
 800a364:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	6a1b      	ldr	r3, [r3, #32]
 800a36a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a372:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	021b      	lsls	r3, r3, #8
 800a378:	697a      	ldr	r2, [r7, #20]
 800a37a:	4313      	orrs	r3, r2
 800a37c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a384:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	031b      	lsls	r3, r3, #12
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	697a      	ldr	r2, [r7, #20]
 800a38e:	4313      	orrs	r3, r2
 800a390:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a398:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	011b      	lsls	r3, r3, #4
 800a39e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a3a2:	693a      	ldr	r2, [r7, #16]
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	697a      	ldr	r2, [r7, #20]
 800a3ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	693a      	ldr	r2, [r7, #16]
 800a3b2:	621a      	str	r2, [r3, #32]
}
 800a3b4:	bf00      	nop
 800a3b6:	371c      	adds	r7, #28
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr

0800a3c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b087      	sub	sp, #28
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	60f8      	str	r0, [r7, #12]
 800a3c8:	60b9      	str	r1, [r7, #8]
 800a3ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	6a1b      	ldr	r3, [r3, #32]
 800a3d0:	f023 0210 	bic.w	r2, r3, #16
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	699b      	ldr	r3, [r3, #24]
 800a3dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	6a1b      	ldr	r3, [r3, #32]
 800a3e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a3ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	031b      	lsls	r3, r3, #12
 800a3f0:	697a      	ldr	r2, [r7, #20]
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a3fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	011b      	lsls	r3, r3, #4
 800a402:	693a      	ldr	r2, [r7, #16]
 800a404:	4313      	orrs	r3, r2
 800a406:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	697a      	ldr	r2, [r7, #20]
 800a40c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	693a      	ldr	r2, [r7, #16]
 800a412:	621a      	str	r2, [r3, #32]
}
 800a414:	bf00      	nop
 800a416:	371c      	adds	r7, #28
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr

0800a420 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a420:	b480      	push	{r7}
 800a422:	b087      	sub	sp, #28
 800a424:	af00      	add	r7, sp, #0
 800a426:	60f8      	str	r0, [r7, #12]
 800a428:	60b9      	str	r1, [r7, #8]
 800a42a:	607a      	str	r2, [r7, #4]
 800a42c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	6a1b      	ldr	r3, [r3, #32]
 800a432:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	69db      	ldr	r3, [r3, #28]
 800a43e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	6a1b      	ldr	r3, [r3, #32]
 800a444:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	f023 0303 	bic.w	r3, r3, #3
 800a44c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a44e:	697a      	ldr	r2, [r7, #20]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	4313      	orrs	r3, r2
 800a454:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a45c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	011b      	lsls	r3, r3, #4
 800a462:	b2db      	uxtb	r3, r3
 800a464:	697a      	ldr	r2, [r7, #20]
 800a466:	4313      	orrs	r3, r2
 800a468:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a470:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	021b      	lsls	r3, r3, #8
 800a476:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a47a:	693a      	ldr	r2, [r7, #16]
 800a47c:	4313      	orrs	r3, r2
 800a47e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	697a      	ldr	r2, [r7, #20]
 800a484:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	693a      	ldr	r2, [r7, #16]
 800a48a:	621a      	str	r2, [r3, #32]
}
 800a48c:	bf00      	nop
 800a48e:	371c      	adds	r7, #28
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr

0800a498 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a498:	b480      	push	{r7}
 800a49a:	b087      	sub	sp, #28
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	60f8      	str	r0, [r7, #12]
 800a4a0:	60b9      	str	r1, [r7, #8]
 800a4a2:	607a      	str	r2, [r7, #4]
 800a4a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	6a1b      	ldr	r3, [r3, #32]
 800a4aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	69db      	ldr	r3, [r3, #28]
 800a4b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	6a1b      	ldr	r3, [r3, #32]
 800a4bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4c4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	021b      	lsls	r3, r3, #8
 800a4ca:	697a      	ldr	r2, [r7, #20]
 800a4cc:	4313      	orrs	r3, r2
 800a4ce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a4d6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	031b      	lsls	r3, r3, #12
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	697a      	ldr	r2, [r7, #20]
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a4ea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	031b      	lsls	r3, r3, #12
 800a4f0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a4f4:	693a      	ldr	r2, [r7, #16]
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	697a      	ldr	r2, [r7, #20]
 800a4fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	693a      	ldr	r2, [r7, #16]
 800a504:	621a      	str	r2, [r3, #32]
}
 800a506:	bf00      	nop
 800a508:	371c      	adds	r7, #28
 800a50a:	46bd      	mov	sp, r7
 800a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a510:	4770      	bx	lr
	...

0800a514 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a514:	b480      	push	{r7}
 800a516:	b085      	sub	sp, #20
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	689b      	ldr	r3, [r3, #8]
 800a522:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a524:	68fa      	ldr	r2, [r7, #12]
 800a526:	4b09      	ldr	r3, [pc, #36]	; (800a54c <TIM_ITRx_SetConfig+0x38>)
 800a528:	4013      	ands	r3, r2
 800a52a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a52c:	683a      	ldr	r2, [r7, #0]
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	4313      	orrs	r3, r2
 800a532:	f043 0307 	orr.w	r3, r3, #7
 800a536:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	68fa      	ldr	r2, [r7, #12]
 800a53c:	609a      	str	r2, [r3, #8]
}
 800a53e:	bf00      	nop
 800a540:	3714      	adds	r7, #20
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr
 800a54a:	bf00      	nop
 800a54c:	ffcfff8f 	.word	0xffcfff8f

0800a550 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a550:	b480      	push	{r7}
 800a552:	b087      	sub	sp, #28
 800a554:	af00      	add	r7, sp, #0
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	60b9      	str	r1, [r7, #8]
 800a55a:	607a      	str	r2, [r7, #4]
 800a55c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	689b      	ldr	r3, [r3, #8]
 800a562:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a56a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	021a      	lsls	r2, r3, #8
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	431a      	orrs	r2, r3
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	4313      	orrs	r3, r2
 800a578:	697a      	ldr	r2, [r7, #20]
 800a57a:	4313      	orrs	r3, r2
 800a57c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	697a      	ldr	r2, [r7, #20]
 800a582:	609a      	str	r2, [r3, #8]
}
 800a584:	bf00      	nop
 800a586:	371c      	adds	r7, #28
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a590:	b480      	push	{r7}
 800a592:	b085      	sub	sp, #20
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5a0:	2b01      	cmp	r3, #1
 800a5a2:	d101      	bne.n	800a5a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a5a4:	2302      	movs	r3, #2
 800a5a6:	e06d      	b.n	800a684 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2202      	movs	r2, #2
 800a5b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	685b      	ldr	r3, [r3, #4]
 800a5be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	689b      	ldr	r3, [r3, #8]
 800a5c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4a30      	ldr	r2, [pc, #192]	; (800a690 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d004      	beq.n	800a5dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4a2f      	ldr	r2, [pc, #188]	; (800a694 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d108      	bne.n	800a5ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a5e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	68fa      	ldr	r2, [r7, #12]
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	68fa      	ldr	r2, [r7, #12]
 800a606:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4a20      	ldr	r2, [pc, #128]	; (800a690 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d022      	beq.n	800a658 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a61a:	d01d      	beq.n	800a658 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	4a1d      	ldr	r2, [pc, #116]	; (800a698 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d018      	beq.n	800a658 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	4a1c      	ldr	r2, [pc, #112]	; (800a69c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d013      	beq.n	800a658 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a1a      	ldr	r2, [pc, #104]	; (800a6a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d00e      	beq.n	800a658 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4a15      	ldr	r2, [pc, #84]	; (800a694 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d009      	beq.n	800a658 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4a16      	ldr	r2, [pc, #88]	; (800a6a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d004      	beq.n	800a658 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4a15      	ldr	r2, [pc, #84]	; (800a6a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d10c      	bne.n	800a672 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a65e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	689b      	ldr	r3, [r3, #8]
 800a664:	68ba      	ldr	r2, [r7, #8]
 800a666:	4313      	orrs	r3, r2
 800a668:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	68ba      	ldr	r2, [r7, #8]
 800a670:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2201      	movs	r2, #1
 800a676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2200      	movs	r2, #0
 800a67e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a682:	2300      	movs	r3, #0
}
 800a684:	4618      	mov	r0, r3
 800a686:	3714      	adds	r7, #20
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr
 800a690:	40010000 	.word	0x40010000
 800a694:	40010400 	.word	0x40010400
 800a698:	40000400 	.word	0x40000400
 800a69c:	40000800 	.word	0x40000800
 800a6a0:	40000c00 	.word	0x40000c00
 800a6a4:	40001800 	.word	0x40001800
 800a6a8:	40014000 	.word	0x40014000

0800a6ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b082      	sub	sp, #8
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d101      	bne.n	800a6be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	e042      	b.n	800a744 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d106      	bne.n	800a6d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f7f7 f86b 	bl	80017ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2224      	movs	r2, #36	; 0x24
 800a6da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f022 0201 	bic.w	r2, r2, #1
 800a6ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f000 f82c 	bl	800a74c <UART_SetConfig>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	d101      	bne.n	800a6fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	e022      	b.n	800a744 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a702:	2b00      	cmp	r3, #0
 800a704:	d002      	beq.n	800a70c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f000 fd88 	bl	800b21c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	685a      	ldr	r2, [r3, #4]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a71a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	689a      	ldr	r2, [r3, #8]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a72a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f042 0201 	orr.w	r2, r2, #1
 800a73a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f000 fe0f 	bl	800b360 <UART_CheckIdleState>
 800a742:	4603      	mov	r3, r0
}
 800a744:	4618      	mov	r0, r3
 800a746:	3708      	adds	r7, #8
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a74c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a750:	b092      	sub	sp, #72	; 0x48
 800a752:	af00      	add	r7, sp, #0
 800a754:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a756:	2300      	movs	r3, #0
 800a758:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	689a      	ldr	r2, [r3, #8]
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	691b      	ldr	r3, [r3, #16]
 800a764:	431a      	orrs	r2, r3
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	695b      	ldr	r3, [r3, #20]
 800a76a:	431a      	orrs	r2, r3
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	69db      	ldr	r3, [r3, #28]
 800a770:	4313      	orrs	r3, r2
 800a772:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	4bbe      	ldr	r3, [pc, #760]	; (800aa74 <UART_SetConfig+0x328>)
 800a77c:	4013      	ands	r3, r2
 800a77e:	697a      	ldr	r2, [r7, #20]
 800a780:	6812      	ldr	r2, [r2, #0]
 800a782:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a784:	430b      	orrs	r3, r1
 800a786:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	68da      	ldr	r2, [r3, #12]
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	430a      	orrs	r2, r1
 800a79c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	699b      	ldr	r3, [r3, #24]
 800a7a2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4ab3      	ldr	r2, [pc, #716]	; (800aa78 <UART_SetConfig+0x32c>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d004      	beq.n	800a7b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	6a1b      	ldr	r3, [r3, #32]
 800a7b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	689a      	ldr	r2, [r3, #8]
 800a7be:	4baf      	ldr	r3, [pc, #700]	; (800aa7c <UART_SetConfig+0x330>)
 800a7c0:	4013      	ands	r3, r2
 800a7c2:	697a      	ldr	r2, [r7, #20]
 800a7c4:	6812      	ldr	r2, [r2, #0]
 800a7c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a7c8:	430b      	orrs	r3, r1
 800a7ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7d2:	f023 010f 	bic.w	r1, r3, #15
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	430a      	orrs	r2, r1
 800a7e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	4aa6      	ldr	r2, [pc, #664]	; (800aa80 <UART_SetConfig+0x334>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d177      	bne.n	800a8dc <UART_SetConfig+0x190>
 800a7ec:	4ba5      	ldr	r3, [pc, #660]	; (800aa84 <UART_SetConfig+0x338>)
 800a7ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a7f4:	2b28      	cmp	r3, #40	; 0x28
 800a7f6:	d86d      	bhi.n	800a8d4 <UART_SetConfig+0x188>
 800a7f8:	a201      	add	r2, pc, #4	; (adr r2, 800a800 <UART_SetConfig+0xb4>)
 800a7fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7fe:	bf00      	nop
 800a800:	0800a8a5 	.word	0x0800a8a5
 800a804:	0800a8d5 	.word	0x0800a8d5
 800a808:	0800a8d5 	.word	0x0800a8d5
 800a80c:	0800a8d5 	.word	0x0800a8d5
 800a810:	0800a8d5 	.word	0x0800a8d5
 800a814:	0800a8d5 	.word	0x0800a8d5
 800a818:	0800a8d5 	.word	0x0800a8d5
 800a81c:	0800a8d5 	.word	0x0800a8d5
 800a820:	0800a8ad 	.word	0x0800a8ad
 800a824:	0800a8d5 	.word	0x0800a8d5
 800a828:	0800a8d5 	.word	0x0800a8d5
 800a82c:	0800a8d5 	.word	0x0800a8d5
 800a830:	0800a8d5 	.word	0x0800a8d5
 800a834:	0800a8d5 	.word	0x0800a8d5
 800a838:	0800a8d5 	.word	0x0800a8d5
 800a83c:	0800a8d5 	.word	0x0800a8d5
 800a840:	0800a8b5 	.word	0x0800a8b5
 800a844:	0800a8d5 	.word	0x0800a8d5
 800a848:	0800a8d5 	.word	0x0800a8d5
 800a84c:	0800a8d5 	.word	0x0800a8d5
 800a850:	0800a8d5 	.word	0x0800a8d5
 800a854:	0800a8d5 	.word	0x0800a8d5
 800a858:	0800a8d5 	.word	0x0800a8d5
 800a85c:	0800a8d5 	.word	0x0800a8d5
 800a860:	0800a8bd 	.word	0x0800a8bd
 800a864:	0800a8d5 	.word	0x0800a8d5
 800a868:	0800a8d5 	.word	0x0800a8d5
 800a86c:	0800a8d5 	.word	0x0800a8d5
 800a870:	0800a8d5 	.word	0x0800a8d5
 800a874:	0800a8d5 	.word	0x0800a8d5
 800a878:	0800a8d5 	.word	0x0800a8d5
 800a87c:	0800a8d5 	.word	0x0800a8d5
 800a880:	0800a8c5 	.word	0x0800a8c5
 800a884:	0800a8d5 	.word	0x0800a8d5
 800a888:	0800a8d5 	.word	0x0800a8d5
 800a88c:	0800a8d5 	.word	0x0800a8d5
 800a890:	0800a8d5 	.word	0x0800a8d5
 800a894:	0800a8d5 	.word	0x0800a8d5
 800a898:	0800a8d5 	.word	0x0800a8d5
 800a89c:	0800a8d5 	.word	0x0800a8d5
 800a8a0:	0800a8cd 	.word	0x0800a8cd
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8aa:	e222      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800a8ac:	2304      	movs	r3, #4
 800a8ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8b2:	e21e      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800a8b4:	2308      	movs	r3, #8
 800a8b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8ba:	e21a      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800a8bc:	2310      	movs	r3, #16
 800a8be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8c2:	e216      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800a8c4:	2320      	movs	r3, #32
 800a8c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8ca:	e212      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800a8cc:	2340      	movs	r3, #64	; 0x40
 800a8ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8d2:	e20e      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800a8d4:	2380      	movs	r3, #128	; 0x80
 800a8d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8da:	e20a      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	4a69      	ldr	r2, [pc, #420]	; (800aa88 <UART_SetConfig+0x33c>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d130      	bne.n	800a948 <UART_SetConfig+0x1fc>
 800a8e6:	4b67      	ldr	r3, [pc, #412]	; (800aa84 <UART_SetConfig+0x338>)
 800a8e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8ea:	f003 0307 	and.w	r3, r3, #7
 800a8ee:	2b05      	cmp	r3, #5
 800a8f0:	d826      	bhi.n	800a940 <UART_SetConfig+0x1f4>
 800a8f2:	a201      	add	r2, pc, #4	; (adr r2, 800a8f8 <UART_SetConfig+0x1ac>)
 800a8f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8f8:	0800a911 	.word	0x0800a911
 800a8fc:	0800a919 	.word	0x0800a919
 800a900:	0800a921 	.word	0x0800a921
 800a904:	0800a929 	.word	0x0800a929
 800a908:	0800a931 	.word	0x0800a931
 800a90c:	0800a939 	.word	0x0800a939
 800a910:	2300      	movs	r3, #0
 800a912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a916:	e1ec      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800a918:	2304      	movs	r3, #4
 800a91a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a91e:	e1e8      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800a920:	2308      	movs	r3, #8
 800a922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a926:	e1e4      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800a928:	2310      	movs	r3, #16
 800a92a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a92e:	e1e0      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800a930:	2320      	movs	r3, #32
 800a932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a936:	e1dc      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800a938:	2340      	movs	r3, #64	; 0x40
 800a93a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a93e:	e1d8      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800a940:	2380      	movs	r3, #128	; 0x80
 800a942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a946:	e1d4      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	4a4f      	ldr	r2, [pc, #316]	; (800aa8c <UART_SetConfig+0x340>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d130      	bne.n	800a9b4 <UART_SetConfig+0x268>
 800a952:	4b4c      	ldr	r3, [pc, #304]	; (800aa84 <UART_SetConfig+0x338>)
 800a954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a956:	f003 0307 	and.w	r3, r3, #7
 800a95a:	2b05      	cmp	r3, #5
 800a95c:	d826      	bhi.n	800a9ac <UART_SetConfig+0x260>
 800a95e:	a201      	add	r2, pc, #4	; (adr r2, 800a964 <UART_SetConfig+0x218>)
 800a960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a964:	0800a97d 	.word	0x0800a97d
 800a968:	0800a985 	.word	0x0800a985
 800a96c:	0800a98d 	.word	0x0800a98d
 800a970:	0800a995 	.word	0x0800a995
 800a974:	0800a99d 	.word	0x0800a99d
 800a978:	0800a9a5 	.word	0x0800a9a5
 800a97c:	2300      	movs	r3, #0
 800a97e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a982:	e1b6      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800a984:	2304      	movs	r3, #4
 800a986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a98a:	e1b2      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800a98c:	2308      	movs	r3, #8
 800a98e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a992:	e1ae      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800a994:	2310      	movs	r3, #16
 800a996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a99a:	e1aa      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800a99c:	2320      	movs	r3, #32
 800a99e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9a2:	e1a6      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800a9a4:	2340      	movs	r3, #64	; 0x40
 800a9a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9aa:	e1a2      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800a9ac:	2380      	movs	r3, #128	; 0x80
 800a9ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9b2:	e19e      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	4a35      	ldr	r2, [pc, #212]	; (800aa90 <UART_SetConfig+0x344>)
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	d130      	bne.n	800aa20 <UART_SetConfig+0x2d4>
 800a9be:	4b31      	ldr	r3, [pc, #196]	; (800aa84 <UART_SetConfig+0x338>)
 800a9c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9c2:	f003 0307 	and.w	r3, r3, #7
 800a9c6:	2b05      	cmp	r3, #5
 800a9c8:	d826      	bhi.n	800aa18 <UART_SetConfig+0x2cc>
 800a9ca:	a201      	add	r2, pc, #4	; (adr r2, 800a9d0 <UART_SetConfig+0x284>)
 800a9cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9d0:	0800a9e9 	.word	0x0800a9e9
 800a9d4:	0800a9f1 	.word	0x0800a9f1
 800a9d8:	0800a9f9 	.word	0x0800a9f9
 800a9dc:	0800aa01 	.word	0x0800aa01
 800a9e0:	0800aa09 	.word	0x0800aa09
 800a9e4:	0800aa11 	.word	0x0800aa11
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9ee:	e180      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800a9f0:	2304      	movs	r3, #4
 800a9f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9f6:	e17c      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800a9f8:	2308      	movs	r3, #8
 800a9fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9fe:	e178      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800aa00:	2310      	movs	r3, #16
 800aa02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa06:	e174      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800aa08:	2320      	movs	r3, #32
 800aa0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa0e:	e170      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800aa10:	2340      	movs	r3, #64	; 0x40
 800aa12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa16:	e16c      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800aa18:	2380      	movs	r3, #128	; 0x80
 800aa1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa1e:	e168      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	4a1b      	ldr	r2, [pc, #108]	; (800aa94 <UART_SetConfig+0x348>)
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d142      	bne.n	800aab0 <UART_SetConfig+0x364>
 800aa2a:	4b16      	ldr	r3, [pc, #88]	; (800aa84 <UART_SetConfig+0x338>)
 800aa2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa2e:	f003 0307 	and.w	r3, r3, #7
 800aa32:	2b05      	cmp	r3, #5
 800aa34:	d838      	bhi.n	800aaa8 <UART_SetConfig+0x35c>
 800aa36:	a201      	add	r2, pc, #4	; (adr r2, 800aa3c <UART_SetConfig+0x2f0>)
 800aa38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa3c:	0800aa55 	.word	0x0800aa55
 800aa40:	0800aa5d 	.word	0x0800aa5d
 800aa44:	0800aa65 	.word	0x0800aa65
 800aa48:	0800aa6d 	.word	0x0800aa6d
 800aa4c:	0800aa99 	.word	0x0800aa99
 800aa50:	0800aaa1 	.word	0x0800aaa1
 800aa54:	2300      	movs	r3, #0
 800aa56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa5a:	e14a      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800aa5c:	2304      	movs	r3, #4
 800aa5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa62:	e146      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800aa64:	2308      	movs	r3, #8
 800aa66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa6a:	e142      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800aa6c:	2310      	movs	r3, #16
 800aa6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa72:	e13e      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800aa74:	cfff69f3 	.word	0xcfff69f3
 800aa78:	58000c00 	.word	0x58000c00
 800aa7c:	11fff4ff 	.word	0x11fff4ff
 800aa80:	40011000 	.word	0x40011000
 800aa84:	58024400 	.word	0x58024400
 800aa88:	40004400 	.word	0x40004400
 800aa8c:	40004800 	.word	0x40004800
 800aa90:	40004c00 	.word	0x40004c00
 800aa94:	40005000 	.word	0x40005000
 800aa98:	2320      	movs	r3, #32
 800aa9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa9e:	e128      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800aaa0:	2340      	movs	r3, #64	; 0x40
 800aaa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaa6:	e124      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800aaa8:	2380      	movs	r3, #128	; 0x80
 800aaaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaae:	e120      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4acb      	ldr	r2, [pc, #812]	; (800ade4 <UART_SetConfig+0x698>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d176      	bne.n	800aba8 <UART_SetConfig+0x45c>
 800aaba:	4bcb      	ldr	r3, [pc, #812]	; (800ade8 <UART_SetConfig+0x69c>)
 800aabc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aabe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aac2:	2b28      	cmp	r3, #40	; 0x28
 800aac4:	d86c      	bhi.n	800aba0 <UART_SetConfig+0x454>
 800aac6:	a201      	add	r2, pc, #4	; (adr r2, 800aacc <UART_SetConfig+0x380>)
 800aac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aacc:	0800ab71 	.word	0x0800ab71
 800aad0:	0800aba1 	.word	0x0800aba1
 800aad4:	0800aba1 	.word	0x0800aba1
 800aad8:	0800aba1 	.word	0x0800aba1
 800aadc:	0800aba1 	.word	0x0800aba1
 800aae0:	0800aba1 	.word	0x0800aba1
 800aae4:	0800aba1 	.word	0x0800aba1
 800aae8:	0800aba1 	.word	0x0800aba1
 800aaec:	0800ab79 	.word	0x0800ab79
 800aaf0:	0800aba1 	.word	0x0800aba1
 800aaf4:	0800aba1 	.word	0x0800aba1
 800aaf8:	0800aba1 	.word	0x0800aba1
 800aafc:	0800aba1 	.word	0x0800aba1
 800ab00:	0800aba1 	.word	0x0800aba1
 800ab04:	0800aba1 	.word	0x0800aba1
 800ab08:	0800aba1 	.word	0x0800aba1
 800ab0c:	0800ab81 	.word	0x0800ab81
 800ab10:	0800aba1 	.word	0x0800aba1
 800ab14:	0800aba1 	.word	0x0800aba1
 800ab18:	0800aba1 	.word	0x0800aba1
 800ab1c:	0800aba1 	.word	0x0800aba1
 800ab20:	0800aba1 	.word	0x0800aba1
 800ab24:	0800aba1 	.word	0x0800aba1
 800ab28:	0800aba1 	.word	0x0800aba1
 800ab2c:	0800ab89 	.word	0x0800ab89
 800ab30:	0800aba1 	.word	0x0800aba1
 800ab34:	0800aba1 	.word	0x0800aba1
 800ab38:	0800aba1 	.word	0x0800aba1
 800ab3c:	0800aba1 	.word	0x0800aba1
 800ab40:	0800aba1 	.word	0x0800aba1
 800ab44:	0800aba1 	.word	0x0800aba1
 800ab48:	0800aba1 	.word	0x0800aba1
 800ab4c:	0800ab91 	.word	0x0800ab91
 800ab50:	0800aba1 	.word	0x0800aba1
 800ab54:	0800aba1 	.word	0x0800aba1
 800ab58:	0800aba1 	.word	0x0800aba1
 800ab5c:	0800aba1 	.word	0x0800aba1
 800ab60:	0800aba1 	.word	0x0800aba1
 800ab64:	0800aba1 	.word	0x0800aba1
 800ab68:	0800aba1 	.word	0x0800aba1
 800ab6c:	0800ab99 	.word	0x0800ab99
 800ab70:	2301      	movs	r3, #1
 800ab72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab76:	e0bc      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800ab78:	2304      	movs	r3, #4
 800ab7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab7e:	e0b8      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800ab80:	2308      	movs	r3, #8
 800ab82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab86:	e0b4      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800ab88:	2310      	movs	r3, #16
 800ab8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab8e:	e0b0      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800ab90:	2320      	movs	r3, #32
 800ab92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab96:	e0ac      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800ab98:	2340      	movs	r3, #64	; 0x40
 800ab9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab9e:	e0a8      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800aba0:	2380      	movs	r3, #128	; 0x80
 800aba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aba6:	e0a4      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4a8f      	ldr	r2, [pc, #572]	; (800adec <UART_SetConfig+0x6a0>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d130      	bne.n	800ac14 <UART_SetConfig+0x4c8>
 800abb2:	4b8d      	ldr	r3, [pc, #564]	; (800ade8 <UART_SetConfig+0x69c>)
 800abb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abb6:	f003 0307 	and.w	r3, r3, #7
 800abba:	2b05      	cmp	r3, #5
 800abbc:	d826      	bhi.n	800ac0c <UART_SetConfig+0x4c0>
 800abbe:	a201      	add	r2, pc, #4	; (adr r2, 800abc4 <UART_SetConfig+0x478>)
 800abc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abc4:	0800abdd 	.word	0x0800abdd
 800abc8:	0800abe5 	.word	0x0800abe5
 800abcc:	0800abed 	.word	0x0800abed
 800abd0:	0800abf5 	.word	0x0800abf5
 800abd4:	0800abfd 	.word	0x0800abfd
 800abd8:	0800ac05 	.word	0x0800ac05
 800abdc:	2300      	movs	r3, #0
 800abde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abe2:	e086      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800abe4:	2304      	movs	r3, #4
 800abe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abea:	e082      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800abec:	2308      	movs	r3, #8
 800abee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abf2:	e07e      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800abf4:	2310      	movs	r3, #16
 800abf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abfa:	e07a      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800abfc:	2320      	movs	r3, #32
 800abfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac02:	e076      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800ac04:	2340      	movs	r3, #64	; 0x40
 800ac06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac0a:	e072      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800ac0c:	2380      	movs	r3, #128	; 0x80
 800ac0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac12:	e06e      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	4a75      	ldr	r2, [pc, #468]	; (800adf0 <UART_SetConfig+0x6a4>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d130      	bne.n	800ac80 <UART_SetConfig+0x534>
 800ac1e:	4b72      	ldr	r3, [pc, #456]	; (800ade8 <UART_SetConfig+0x69c>)
 800ac20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac22:	f003 0307 	and.w	r3, r3, #7
 800ac26:	2b05      	cmp	r3, #5
 800ac28:	d826      	bhi.n	800ac78 <UART_SetConfig+0x52c>
 800ac2a:	a201      	add	r2, pc, #4	; (adr r2, 800ac30 <UART_SetConfig+0x4e4>)
 800ac2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac30:	0800ac49 	.word	0x0800ac49
 800ac34:	0800ac51 	.word	0x0800ac51
 800ac38:	0800ac59 	.word	0x0800ac59
 800ac3c:	0800ac61 	.word	0x0800ac61
 800ac40:	0800ac69 	.word	0x0800ac69
 800ac44:	0800ac71 	.word	0x0800ac71
 800ac48:	2300      	movs	r3, #0
 800ac4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac4e:	e050      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800ac50:	2304      	movs	r3, #4
 800ac52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac56:	e04c      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800ac58:	2308      	movs	r3, #8
 800ac5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac5e:	e048      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800ac60:	2310      	movs	r3, #16
 800ac62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac66:	e044      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800ac68:	2320      	movs	r3, #32
 800ac6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac6e:	e040      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800ac70:	2340      	movs	r3, #64	; 0x40
 800ac72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac76:	e03c      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800ac78:	2380      	movs	r3, #128	; 0x80
 800ac7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac7e:	e038      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	4a5b      	ldr	r2, [pc, #364]	; (800adf4 <UART_SetConfig+0x6a8>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d130      	bne.n	800acec <UART_SetConfig+0x5a0>
 800ac8a:	4b57      	ldr	r3, [pc, #348]	; (800ade8 <UART_SetConfig+0x69c>)
 800ac8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac8e:	f003 0307 	and.w	r3, r3, #7
 800ac92:	2b05      	cmp	r3, #5
 800ac94:	d826      	bhi.n	800ace4 <UART_SetConfig+0x598>
 800ac96:	a201      	add	r2, pc, #4	; (adr r2, 800ac9c <UART_SetConfig+0x550>)
 800ac98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac9c:	0800acb5 	.word	0x0800acb5
 800aca0:	0800acbd 	.word	0x0800acbd
 800aca4:	0800acc5 	.word	0x0800acc5
 800aca8:	0800accd 	.word	0x0800accd
 800acac:	0800acd5 	.word	0x0800acd5
 800acb0:	0800acdd 	.word	0x0800acdd
 800acb4:	2302      	movs	r3, #2
 800acb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acba:	e01a      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800acbc:	2304      	movs	r3, #4
 800acbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acc2:	e016      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800acc4:	2308      	movs	r3, #8
 800acc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acca:	e012      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800accc:	2310      	movs	r3, #16
 800acce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acd2:	e00e      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800acd4:	2320      	movs	r3, #32
 800acd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acda:	e00a      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800acdc:	2340      	movs	r3, #64	; 0x40
 800acde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ace2:	e006      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800ace4:	2380      	movs	r3, #128	; 0x80
 800ace6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acea:	e002      	b.n	800acf2 <UART_SetConfig+0x5a6>
 800acec:	2380      	movs	r3, #128	; 0x80
 800acee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	4a3f      	ldr	r2, [pc, #252]	; (800adf4 <UART_SetConfig+0x6a8>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	f040 80f8 	bne.w	800aeee <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800acfe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ad02:	2b20      	cmp	r3, #32
 800ad04:	dc46      	bgt.n	800ad94 <UART_SetConfig+0x648>
 800ad06:	2b02      	cmp	r3, #2
 800ad08:	f2c0 8082 	blt.w	800ae10 <UART_SetConfig+0x6c4>
 800ad0c:	3b02      	subs	r3, #2
 800ad0e:	2b1e      	cmp	r3, #30
 800ad10:	d87e      	bhi.n	800ae10 <UART_SetConfig+0x6c4>
 800ad12:	a201      	add	r2, pc, #4	; (adr r2, 800ad18 <UART_SetConfig+0x5cc>)
 800ad14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad18:	0800ad9b 	.word	0x0800ad9b
 800ad1c:	0800ae11 	.word	0x0800ae11
 800ad20:	0800ada3 	.word	0x0800ada3
 800ad24:	0800ae11 	.word	0x0800ae11
 800ad28:	0800ae11 	.word	0x0800ae11
 800ad2c:	0800ae11 	.word	0x0800ae11
 800ad30:	0800adb3 	.word	0x0800adb3
 800ad34:	0800ae11 	.word	0x0800ae11
 800ad38:	0800ae11 	.word	0x0800ae11
 800ad3c:	0800ae11 	.word	0x0800ae11
 800ad40:	0800ae11 	.word	0x0800ae11
 800ad44:	0800ae11 	.word	0x0800ae11
 800ad48:	0800ae11 	.word	0x0800ae11
 800ad4c:	0800ae11 	.word	0x0800ae11
 800ad50:	0800adc3 	.word	0x0800adc3
 800ad54:	0800ae11 	.word	0x0800ae11
 800ad58:	0800ae11 	.word	0x0800ae11
 800ad5c:	0800ae11 	.word	0x0800ae11
 800ad60:	0800ae11 	.word	0x0800ae11
 800ad64:	0800ae11 	.word	0x0800ae11
 800ad68:	0800ae11 	.word	0x0800ae11
 800ad6c:	0800ae11 	.word	0x0800ae11
 800ad70:	0800ae11 	.word	0x0800ae11
 800ad74:	0800ae11 	.word	0x0800ae11
 800ad78:	0800ae11 	.word	0x0800ae11
 800ad7c:	0800ae11 	.word	0x0800ae11
 800ad80:	0800ae11 	.word	0x0800ae11
 800ad84:	0800ae11 	.word	0x0800ae11
 800ad88:	0800ae11 	.word	0x0800ae11
 800ad8c:	0800ae11 	.word	0x0800ae11
 800ad90:	0800ae03 	.word	0x0800ae03
 800ad94:	2b40      	cmp	r3, #64	; 0x40
 800ad96:	d037      	beq.n	800ae08 <UART_SetConfig+0x6bc>
 800ad98:	e03a      	b.n	800ae10 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ad9a:	f7fc fabd 	bl	8007318 <HAL_RCCEx_GetD3PCLK1Freq>
 800ad9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ada0:	e03c      	b.n	800ae1c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ada2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ada6:	4618      	mov	r0, r3
 800ada8:	f7fc facc 	bl	8007344 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800adac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adb0:	e034      	b.n	800ae1c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adb2:	f107 0318 	add.w	r3, r7, #24
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7fc fc18 	bl	80075ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800adbc:	69fb      	ldr	r3, [r7, #28]
 800adbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adc0:	e02c      	b.n	800ae1c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800adc2:	4b09      	ldr	r3, [pc, #36]	; (800ade8 <UART_SetConfig+0x69c>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f003 0320 	and.w	r3, r3, #32
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d016      	beq.n	800adfc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800adce:	4b06      	ldr	r3, [pc, #24]	; (800ade8 <UART_SetConfig+0x69c>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	08db      	lsrs	r3, r3, #3
 800add4:	f003 0303 	and.w	r3, r3, #3
 800add8:	4a07      	ldr	r2, [pc, #28]	; (800adf8 <UART_SetConfig+0x6ac>)
 800adda:	fa22 f303 	lsr.w	r3, r2, r3
 800adde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ade0:	e01c      	b.n	800ae1c <UART_SetConfig+0x6d0>
 800ade2:	bf00      	nop
 800ade4:	40011400 	.word	0x40011400
 800ade8:	58024400 	.word	0x58024400
 800adec:	40007800 	.word	0x40007800
 800adf0:	40007c00 	.word	0x40007c00
 800adf4:	58000c00 	.word	0x58000c00
 800adf8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800adfc:	4b9d      	ldr	r3, [pc, #628]	; (800b074 <UART_SetConfig+0x928>)
 800adfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae00:	e00c      	b.n	800ae1c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ae02:	4b9d      	ldr	r3, [pc, #628]	; (800b078 <UART_SetConfig+0x92c>)
 800ae04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae06:	e009      	b.n	800ae1c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae0e:	e005      	b.n	800ae1c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ae10:	2300      	movs	r3, #0
 800ae12:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ae14:	2301      	movs	r3, #1
 800ae16:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ae1a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ae1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	f000 81de 	beq.w	800b1e0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae28:	4a94      	ldr	r2, [pc, #592]	; (800b07c <UART_SetConfig+0x930>)
 800ae2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae2e:	461a      	mov	r2, r3
 800ae30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae32:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae36:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	685a      	ldr	r2, [r3, #4]
 800ae3c:	4613      	mov	r3, r2
 800ae3e:	005b      	lsls	r3, r3, #1
 800ae40:	4413      	add	r3, r2
 800ae42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d305      	bcc.n	800ae54 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	685b      	ldr	r3, [r3, #4]
 800ae4c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ae4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d903      	bls.n	800ae5c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ae54:	2301      	movs	r3, #1
 800ae56:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ae5a:	e1c1      	b.n	800b1e0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae5e:	2200      	movs	r2, #0
 800ae60:	60bb      	str	r3, [r7, #8]
 800ae62:	60fa      	str	r2, [r7, #12]
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae68:	4a84      	ldr	r2, [pc, #528]	; (800b07c <UART_SetConfig+0x930>)
 800ae6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae6e:	b29b      	uxth	r3, r3
 800ae70:	2200      	movs	r2, #0
 800ae72:	603b      	str	r3, [r7, #0]
 800ae74:	607a      	str	r2, [r7, #4]
 800ae76:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ae7e:	f7f5 fa2b 	bl	80002d8 <__aeabi_uldivmod>
 800ae82:	4602      	mov	r2, r0
 800ae84:	460b      	mov	r3, r1
 800ae86:	4610      	mov	r0, r2
 800ae88:	4619      	mov	r1, r3
 800ae8a:	f04f 0200 	mov.w	r2, #0
 800ae8e:	f04f 0300 	mov.w	r3, #0
 800ae92:	020b      	lsls	r3, r1, #8
 800ae94:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ae98:	0202      	lsls	r2, r0, #8
 800ae9a:	6979      	ldr	r1, [r7, #20]
 800ae9c:	6849      	ldr	r1, [r1, #4]
 800ae9e:	0849      	lsrs	r1, r1, #1
 800aea0:	2000      	movs	r0, #0
 800aea2:	460c      	mov	r4, r1
 800aea4:	4605      	mov	r5, r0
 800aea6:	eb12 0804 	adds.w	r8, r2, r4
 800aeaa:	eb43 0905 	adc.w	r9, r3, r5
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	685b      	ldr	r3, [r3, #4]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	469a      	mov	sl, r3
 800aeb6:	4693      	mov	fp, r2
 800aeb8:	4652      	mov	r2, sl
 800aeba:	465b      	mov	r3, fp
 800aebc:	4640      	mov	r0, r8
 800aebe:	4649      	mov	r1, r9
 800aec0:	f7f5 fa0a 	bl	80002d8 <__aeabi_uldivmod>
 800aec4:	4602      	mov	r2, r0
 800aec6:	460b      	mov	r3, r1
 800aec8:	4613      	mov	r3, r2
 800aeca:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aece:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aed2:	d308      	bcc.n	800aee6 <UART_SetConfig+0x79a>
 800aed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aeda:	d204      	bcs.n	800aee6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aee2:	60da      	str	r2, [r3, #12]
 800aee4:	e17c      	b.n	800b1e0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800aee6:	2301      	movs	r3, #1
 800aee8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800aeec:	e178      	b.n	800b1e0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	69db      	ldr	r3, [r3, #28]
 800aef2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aef6:	f040 80c5 	bne.w	800b084 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800aefa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800aefe:	2b20      	cmp	r3, #32
 800af00:	dc48      	bgt.n	800af94 <UART_SetConfig+0x848>
 800af02:	2b00      	cmp	r3, #0
 800af04:	db7b      	blt.n	800affe <UART_SetConfig+0x8b2>
 800af06:	2b20      	cmp	r3, #32
 800af08:	d879      	bhi.n	800affe <UART_SetConfig+0x8b2>
 800af0a:	a201      	add	r2, pc, #4	; (adr r2, 800af10 <UART_SetConfig+0x7c4>)
 800af0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af10:	0800af9b 	.word	0x0800af9b
 800af14:	0800afa3 	.word	0x0800afa3
 800af18:	0800afff 	.word	0x0800afff
 800af1c:	0800afff 	.word	0x0800afff
 800af20:	0800afab 	.word	0x0800afab
 800af24:	0800afff 	.word	0x0800afff
 800af28:	0800afff 	.word	0x0800afff
 800af2c:	0800afff 	.word	0x0800afff
 800af30:	0800afbb 	.word	0x0800afbb
 800af34:	0800afff 	.word	0x0800afff
 800af38:	0800afff 	.word	0x0800afff
 800af3c:	0800afff 	.word	0x0800afff
 800af40:	0800afff 	.word	0x0800afff
 800af44:	0800afff 	.word	0x0800afff
 800af48:	0800afff 	.word	0x0800afff
 800af4c:	0800afff 	.word	0x0800afff
 800af50:	0800afcb 	.word	0x0800afcb
 800af54:	0800afff 	.word	0x0800afff
 800af58:	0800afff 	.word	0x0800afff
 800af5c:	0800afff 	.word	0x0800afff
 800af60:	0800afff 	.word	0x0800afff
 800af64:	0800afff 	.word	0x0800afff
 800af68:	0800afff 	.word	0x0800afff
 800af6c:	0800afff 	.word	0x0800afff
 800af70:	0800afff 	.word	0x0800afff
 800af74:	0800afff 	.word	0x0800afff
 800af78:	0800afff 	.word	0x0800afff
 800af7c:	0800afff 	.word	0x0800afff
 800af80:	0800afff 	.word	0x0800afff
 800af84:	0800afff 	.word	0x0800afff
 800af88:	0800afff 	.word	0x0800afff
 800af8c:	0800afff 	.word	0x0800afff
 800af90:	0800aff1 	.word	0x0800aff1
 800af94:	2b40      	cmp	r3, #64	; 0x40
 800af96:	d02e      	beq.n	800aff6 <UART_SetConfig+0x8aa>
 800af98:	e031      	b.n	800affe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af9a:	f7fa fa07 	bl	80053ac <HAL_RCC_GetPCLK1Freq>
 800af9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800afa0:	e033      	b.n	800b00a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800afa2:	f7fa fa19 	bl	80053d8 <HAL_RCC_GetPCLK2Freq>
 800afa6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800afa8:	e02f      	b.n	800b00a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800afae:	4618      	mov	r0, r3
 800afb0:	f7fc f9c8 	bl	8007344 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800afb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afb8:	e027      	b.n	800b00a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800afba:	f107 0318 	add.w	r3, r7, #24
 800afbe:	4618      	mov	r0, r3
 800afc0:	f7fc fb14 	bl	80075ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800afc4:	69fb      	ldr	r3, [r7, #28]
 800afc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afc8:	e01f      	b.n	800b00a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800afca:	4b2d      	ldr	r3, [pc, #180]	; (800b080 <UART_SetConfig+0x934>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f003 0320 	and.w	r3, r3, #32
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d009      	beq.n	800afea <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800afd6:	4b2a      	ldr	r3, [pc, #168]	; (800b080 <UART_SetConfig+0x934>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	08db      	lsrs	r3, r3, #3
 800afdc:	f003 0303 	and.w	r3, r3, #3
 800afe0:	4a24      	ldr	r2, [pc, #144]	; (800b074 <UART_SetConfig+0x928>)
 800afe2:	fa22 f303 	lsr.w	r3, r2, r3
 800afe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800afe8:	e00f      	b.n	800b00a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800afea:	4b22      	ldr	r3, [pc, #136]	; (800b074 <UART_SetConfig+0x928>)
 800afec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afee:	e00c      	b.n	800b00a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aff0:	4b21      	ldr	r3, [pc, #132]	; (800b078 <UART_SetConfig+0x92c>)
 800aff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aff4:	e009      	b.n	800b00a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800affa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800affc:	e005      	b.n	800b00a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800affe:	2300      	movs	r3, #0
 800b000:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b002:	2301      	movs	r3, #1
 800b004:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b008:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b00a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	f000 80e7 	beq.w	800b1e0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b016:	4a19      	ldr	r2, [pc, #100]	; (800b07c <UART_SetConfig+0x930>)
 800b018:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b01c:	461a      	mov	r2, r3
 800b01e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b020:	fbb3 f3f2 	udiv	r3, r3, r2
 800b024:	005a      	lsls	r2, r3, #1
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	685b      	ldr	r3, [r3, #4]
 800b02a:	085b      	lsrs	r3, r3, #1
 800b02c:	441a      	add	r2, r3
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	685b      	ldr	r3, [r3, #4]
 800b032:	fbb2 f3f3 	udiv	r3, r2, r3
 800b036:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b03a:	2b0f      	cmp	r3, #15
 800b03c:	d916      	bls.n	800b06c <UART_SetConfig+0x920>
 800b03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b044:	d212      	bcs.n	800b06c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b048:	b29b      	uxth	r3, r3
 800b04a:	f023 030f 	bic.w	r3, r3, #15
 800b04e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b052:	085b      	lsrs	r3, r3, #1
 800b054:	b29b      	uxth	r3, r3
 800b056:	f003 0307 	and.w	r3, r3, #7
 800b05a:	b29a      	uxth	r2, r3
 800b05c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b05e:	4313      	orrs	r3, r2
 800b060:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b068:	60da      	str	r2, [r3, #12]
 800b06a:	e0b9      	b.n	800b1e0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b06c:	2301      	movs	r3, #1
 800b06e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b072:	e0b5      	b.n	800b1e0 <UART_SetConfig+0xa94>
 800b074:	03d09000 	.word	0x03d09000
 800b078:	003d0900 	.word	0x003d0900
 800b07c:	0800c8c8 	.word	0x0800c8c8
 800b080:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b084:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b088:	2b20      	cmp	r3, #32
 800b08a:	dc49      	bgt.n	800b120 <UART_SetConfig+0x9d4>
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	db7c      	blt.n	800b18a <UART_SetConfig+0xa3e>
 800b090:	2b20      	cmp	r3, #32
 800b092:	d87a      	bhi.n	800b18a <UART_SetConfig+0xa3e>
 800b094:	a201      	add	r2, pc, #4	; (adr r2, 800b09c <UART_SetConfig+0x950>)
 800b096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b09a:	bf00      	nop
 800b09c:	0800b127 	.word	0x0800b127
 800b0a0:	0800b12f 	.word	0x0800b12f
 800b0a4:	0800b18b 	.word	0x0800b18b
 800b0a8:	0800b18b 	.word	0x0800b18b
 800b0ac:	0800b137 	.word	0x0800b137
 800b0b0:	0800b18b 	.word	0x0800b18b
 800b0b4:	0800b18b 	.word	0x0800b18b
 800b0b8:	0800b18b 	.word	0x0800b18b
 800b0bc:	0800b147 	.word	0x0800b147
 800b0c0:	0800b18b 	.word	0x0800b18b
 800b0c4:	0800b18b 	.word	0x0800b18b
 800b0c8:	0800b18b 	.word	0x0800b18b
 800b0cc:	0800b18b 	.word	0x0800b18b
 800b0d0:	0800b18b 	.word	0x0800b18b
 800b0d4:	0800b18b 	.word	0x0800b18b
 800b0d8:	0800b18b 	.word	0x0800b18b
 800b0dc:	0800b157 	.word	0x0800b157
 800b0e0:	0800b18b 	.word	0x0800b18b
 800b0e4:	0800b18b 	.word	0x0800b18b
 800b0e8:	0800b18b 	.word	0x0800b18b
 800b0ec:	0800b18b 	.word	0x0800b18b
 800b0f0:	0800b18b 	.word	0x0800b18b
 800b0f4:	0800b18b 	.word	0x0800b18b
 800b0f8:	0800b18b 	.word	0x0800b18b
 800b0fc:	0800b18b 	.word	0x0800b18b
 800b100:	0800b18b 	.word	0x0800b18b
 800b104:	0800b18b 	.word	0x0800b18b
 800b108:	0800b18b 	.word	0x0800b18b
 800b10c:	0800b18b 	.word	0x0800b18b
 800b110:	0800b18b 	.word	0x0800b18b
 800b114:	0800b18b 	.word	0x0800b18b
 800b118:	0800b18b 	.word	0x0800b18b
 800b11c:	0800b17d 	.word	0x0800b17d
 800b120:	2b40      	cmp	r3, #64	; 0x40
 800b122:	d02e      	beq.n	800b182 <UART_SetConfig+0xa36>
 800b124:	e031      	b.n	800b18a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b126:	f7fa f941 	bl	80053ac <HAL_RCC_GetPCLK1Freq>
 800b12a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b12c:	e033      	b.n	800b196 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b12e:	f7fa f953 	bl	80053d8 <HAL_RCC_GetPCLK2Freq>
 800b132:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b134:	e02f      	b.n	800b196 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b13a:	4618      	mov	r0, r3
 800b13c:	f7fc f902 	bl	8007344 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b142:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b144:	e027      	b.n	800b196 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b146:	f107 0318 	add.w	r3, r7, #24
 800b14a:	4618      	mov	r0, r3
 800b14c:	f7fc fa4e 	bl	80075ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b150:	69fb      	ldr	r3, [r7, #28]
 800b152:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b154:	e01f      	b.n	800b196 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b156:	4b2d      	ldr	r3, [pc, #180]	; (800b20c <UART_SetConfig+0xac0>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f003 0320 	and.w	r3, r3, #32
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d009      	beq.n	800b176 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b162:	4b2a      	ldr	r3, [pc, #168]	; (800b20c <UART_SetConfig+0xac0>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	08db      	lsrs	r3, r3, #3
 800b168:	f003 0303 	and.w	r3, r3, #3
 800b16c:	4a28      	ldr	r2, [pc, #160]	; (800b210 <UART_SetConfig+0xac4>)
 800b16e:	fa22 f303 	lsr.w	r3, r2, r3
 800b172:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b174:	e00f      	b.n	800b196 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b176:	4b26      	ldr	r3, [pc, #152]	; (800b210 <UART_SetConfig+0xac4>)
 800b178:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b17a:	e00c      	b.n	800b196 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b17c:	4b25      	ldr	r3, [pc, #148]	; (800b214 <UART_SetConfig+0xac8>)
 800b17e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b180:	e009      	b.n	800b196 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b186:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b188:	e005      	b.n	800b196 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b18a:	2300      	movs	r3, #0
 800b18c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b18e:	2301      	movs	r3, #1
 800b190:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b194:	bf00      	nop
    }

    if (pclk != 0U)
 800b196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d021      	beq.n	800b1e0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b19c:	697b      	ldr	r3, [r7, #20]
 800b19e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1a0:	4a1d      	ldr	r2, [pc, #116]	; (800b218 <UART_SetConfig+0xacc>)
 800b1a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1aa:	fbb3 f2f2 	udiv	r2, r3, r2
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	685b      	ldr	r3, [r3, #4]
 800b1b2:	085b      	lsrs	r3, r3, #1
 800b1b4:	441a      	add	r2, r3
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	685b      	ldr	r3, [r3, #4]
 800b1ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1be:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c2:	2b0f      	cmp	r3, #15
 800b1c4:	d909      	bls.n	800b1da <UART_SetConfig+0xa8e>
 800b1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1cc:	d205      	bcs.n	800b1da <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d0:	b29a      	uxth	r2, r3
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	60da      	str	r2, [r3, #12]
 800b1d8:	e002      	b.n	800b1e0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b1da:	2301      	movs	r3, #1
 800b1dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	2201      	movs	r2, #1
 800b1e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b1fc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800b200:	4618      	mov	r0, r3
 800b202:	3748      	adds	r7, #72	; 0x48
 800b204:	46bd      	mov	sp, r7
 800b206:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b20a:	bf00      	nop
 800b20c:	58024400 	.word	0x58024400
 800b210:	03d09000 	.word	0x03d09000
 800b214:	003d0900 	.word	0x003d0900
 800b218:	0800c8c8 	.word	0x0800c8c8

0800b21c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b083      	sub	sp, #12
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b228:	f003 0301 	and.w	r3, r3, #1
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d00a      	beq.n	800b246 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	685b      	ldr	r3, [r3, #4]
 800b236:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	430a      	orrs	r2, r1
 800b244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b24a:	f003 0302 	and.w	r3, r3, #2
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d00a      	beq.n	800b268 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	430a      	orrs	r2, r1
 800b266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b26c:	f003 0304 	and.w	r3, r3, #4
 800b270:	2b00      	cmp	r3, #0
 800b272:	d00a      	beq.n	800b28a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	430a      	orrs	r2, r1
 800b288:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b28e:	f003 0308 	and.w	r3, r3, #8
 800b292:	2b00      	cmp	r3, #0
 800b294:	d00a      	beq.n	800b2ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	430a      	orrs	r2, r1
 800b2aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2b0:	f003 0310 	and.w	r3, r3, #16
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d00a      	beq.n	800b2ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	689b      	ldr	r3, [r3, #8]
 800b2be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	430a      	orrs	r2, r1
 800b2cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2d2:	f003 0320 	and.w	r3, r3, #32
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d00a      	beq.n	800b2f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	689b      	ldr	r3, [r3, #8]
 800b2e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	430a      	orrs	r2, r1
 800b2ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d01a      	beq.n	800b332 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	685b      	ldr	r3, [r3, #4]
 800b302:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	430a      	orrs	r2, r1
 800b310:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b316:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b31a:	d10a      	bne.n	800b332 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	430a      	orrs	r2, r1
 800b330:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d00a      	beq.n	800b354 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	430a      	orrs	r2, r1
 800b352:	605a      	str	r2, [r3, #4]
  }
}
 800b354:	bf00      	nop
 800b356:	370c      	adds	r7, #12
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr

0800b360 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b098      	sub	sp, #96	; 0x60
 800b364:	af02      	add	r7, sp, #8
 800b366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2200      	movs	r2, #0
 800b36c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b370:	f7f7 f952 	bl	8002618 <HAL_GetTick>
 800b374:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f003 0308 	and.w	r3, r3, #8
 800b380:	2b08      	cmp	r3, #8
 800b382:	d12f      	bne.n	800b3e4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b384:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b388:	9300      	str	r3, [sp, #0]
 800b38a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b38c:	2200      	movs	r2, #0
 800b38e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f000 f88e 	bl	800b4b4 <UART_WaitOnFlagUntilTimeout>
 800b398:	4603      	mov	r3, r0
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d022      	beq.n	800b3e4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a6:	e853 3f00 	ldrex	r3, [r3]
 800b3aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b3ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b3b2:	653b      	str	r3, [r7, #80]	; 0x50
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	461a      	mov	r2, r3
 800b3ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3bc:	647b      	str	r3, [r7, #68]	; 0x44
 800b3be:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b3c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b3c4:	e841 2300 	strex	r3, r2, [r1]
 800b3c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b3ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d1e6      	bne.n	800b39e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2220      	movs	r2, #32
 800b3d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b3e0:	2303      	movs	r3, #3
 800b3e2:	e063      	b.n	800b4ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f003 0304 	and.w	r3, r3, #4
 800b3ee:	2b04      	cmp	r3, #4
 800b3f0:	d149      	bne.n	800b486 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b3f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b3f6:	9300      	str	r3, [sp, #0]
 800b3f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f000 f857 	bl	800b4b4 <UART_WaitOnFlagUntilTimeout>
 800b406:	4603      	mov	r3, r0
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d03c      	beq.n	800b486 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b414:	e853 3f00 	ldrex	r3, [r3]
 800b418:	623b      	str	r3, [r7, #32]
   return(result);
 800b41a:	6a3b      	ldr	r3, [r7, #32]
 800b41c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b420:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	461a      	mov	r2, r3
 800b428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b42a:	633b      	str	r3, [r7, #48]	; 0x30
 800b42c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b42e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b432:	e841 2300 	strex	r3, r2, [r1]
 800b436:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d1e6      	bne.n	800b40c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	3308      	adds	r3, #8
 800b444:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b446:	693b      	ldr	r3, [r7, #16]
 800b448:	e853 3f00 	ldrex	r3, [r3]
 800b44c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	f023 0301 	bic.w	r3, r3, #1
 800b454:	64bb      	str	r3, [r7, #72]	; 0x48
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	3308      	adds	r3, #8
 800b45c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b45e:	61fa      	str	r2, [r7, #28]
 800b460:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b462:	69b9      	ldr	r1, [r7, #24]
 800b464:	69fa      	ldr	r2, [r7, #28]
 800b466:	e841 2300 	strex	r3, r2, [r1]
 800b46a:	617b      	str	r3, [r7, #20]
   return(result);
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d1e5      	bne.n	800b43e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2220      	movs	r2, #32
 800b476:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2200      	movs	r2, #0
 800b47e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b482:	2303      	movs	r3, #3
 800b484:	e012      	b.n	800b4ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2220      	movs	r2, #32
 800b48a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2220      	movs	r2, #32
 800b492:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2200      	movs	r2, #0
 800b49a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b4aa:	2300      	movs	r3, #0
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3758      	adds	r7, #88	; 0x58
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b084      	sub	sp, #16
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	60f8      	str	r0, [r7, #12]
 800b4bc:	60b9      	str	r1, [r7, #8]
 800b4be:	603b      	str	r3, [r7, #0]
 800b4c0:	4613      	mov	r3, r2
 800b4c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b4c4:	e049      	b.n	800b55a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b4c6:	69bb      	ldr	r3, [r7, #24]
 800b4c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4cc:	d045      	beq.n	800b55a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b4ce:	f7f7 f8a3 	bl	8002618 <HAL_GetTick>
 800b4d2:	4602      	mov	r2, r0
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	1ad3      	subs	r3, r2, r3
 800b4d8:	69ba      	ldr	r2, [r7, #24]
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d302      	bcc.n	800b4e4 <UART_WaitOnFlagUntilTimeout+0x30>
 800b4de:	69bb      	ldr	r3, [r7, #24]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d101      	bne.n	800b4e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b4e4:	2303      	movs	r3, #3
 800b4e6:	e048      	b.n	800b57a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f003 0304 	and.w	r3, r3, #4
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d031      	beq.n	800b55a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	69db      	ldr	r3, [r3, #28]
 800b4fc:	f003 0308 	and.w	r3, r3, #8
 800b500:	2b08      	cmp	r3, #8
 800b502:	d110      	bne.n	800b526 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	2208      	movs	r2, #8
 800b50a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800b50c:	68f8      	ldr	r0, [r7, #12]
 800b50e:	f000 f839 	bl	800b584 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	2208      	movs	r2, #8
 800b516:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	2200      	movs	r2, #0
 800b51e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800b522:	2301      	movs	r3, #1
 800b524:	e029      	b.n	800b57a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	69db      	ldr	r3, [r3, #28]
 800b52c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b534:	d111      	bne.n	800b55a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b53e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b540:	68f8      	ldr	r0, [r7, #12]
 800b542:	f000 f81f 	bl	800b584 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2220      	movs	r2, #32
 800b54a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2200      	movs	r2, #0
 800b552:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b556:	2303      	movs	r3, #3
 800b558:	e00f      	b.n	800b57a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	69da      	ldr	r2, [r3, #28]
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	4013      	ands	r3, r2
 800b564:	68ba      	ldr	r2, [r7, #8]
 800b566:	429a      	cmp	r2, r3
 800b568:	bf0c      	ite	eq
 800b56a:	2301      	moveq	r3, #1
 800b56c:	2300      	movne	r3, #0
 800b56e:	b2db      	uxtb	r3, r3
 800b570:	461a      	mov	r2, r3
 800b572:	79fb      	ldrb	r3, [r7, #7]
 800b574:	429a      	cmp	r2, r3
 800b576:	d0a6      	beq.n	800b4c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b578:	2300      	movs	r3, #0
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3710      	adds	r7, #16
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
	...

0800b584 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b584:	b480      	push	{r7}
 800b586:	b095      	sub	sp, #84	; 0x54
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b594:	e853 3f00 	ldrex	r3, [r3]
 800b598:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b59c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b5a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5aa:	643b      	str	r3, [r7, #64]	; 0x40
 800b5ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b5b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b5b2:	e841 2300 	strex	r3, r2, [r1]
 800b5b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d1e6      	bne.n	800b58c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	3308      	adds	r3, #8
 800b5c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5c6:	6a3b      	ldr	r3, [r7, #32]
 800b5c8:	e853 3f00 	ldrex	r3, [r3]
 800b5cc:	61fb      	str	r3, [r7, #28]
   return(result);
 800b5ce:	69fa      	ldr	r2, [r7, #28]
 800b5d0:	4b1e      	ldr	r3, [pc, #120]	; (800b64c <UART_EndRxTransfer+0xc8>)
 800b5d2:	4013      	ands	r3, r2
 800b5d4:	64bb      	str	r3, [r7, #72]	; 0x48
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	3308      	adds	r3, #8
 800b5dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b5de:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b5e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b5e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5e6:	e841 2300 	strex	r3, r2, [r1]
 800b5ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d1e5      	bne.n	800b5be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5f6:	2b01      	cmp	r3, #1
 800b5f8:	d118      	bne.n	800b62c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	e853 3f00 	ldrex	r3, [r3]
 800b606:	60bb      	str	r3, [r7, #8]
   return(result);
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	f023 0310 	bic.w	r3, r3, #16
 800b60e:	647b      	str	r3, [r7, #68]	; 0x44
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	461a      	mov	r2, r3
 800b616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b618:	61bb      	str	r3, [r7, #24]
 800b61a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b61c:	6979      	ldr	r1, [r7, #20]
 800b61e:	69ba      	ldr	r2, [r7, #24]
 800b620:	e841 2300 	strex	r3, r2, [r1]
 800b624:	613b      	str	r3, [r7, #16]
   return(result);
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d1e6      	bne.n	800b5fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2220      	movs	r2, #32
 800b630:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2200      	movs	r2, #0
 800b638:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2200      	movs	r2, #0
 800b63e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b640:	bf00      	nop
 800b642:	3754      	adds	r7, #84	; 0x54
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr
 800b64c:	effffffe 	.word	0xeffffffe

0800b650 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b650:	b480      	push	{r7}
 800b652:	b085      	sub	sp, #20
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b65e:	2b01      	cmp	r3, #1
 800b660:	d101      	bne.n	800b666 <HAL_UARTEx_DisableFifoMode+0x16>
 800b662:	2302      	movs	r3, #2
 800b664:	e027      	b.n	800b6b6 <HAL_UARTEx_DisableFifoMode+0x66>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2201      	movs	r2, #1
 800b66a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2224      	movs	r2, #36	; 0x24
 800b672:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	681a      	ldr	r2, [r3, #0]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f022 0201 	bic.w	r2, r2, #1
 800b68c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b694:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2200      	movs	r2, #0
 800b69a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	68fa      	ldr	r2, [r7, #12]
 800b6a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2220      	movs	r2, #32
 800b6a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b6b4:	2300      	movs	r3, #0
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3714      	adds	r7, #20
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c0:	4770      	bx	lr

0800b6c2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b6c2:	b580      	push	{r7, lr}
 800b6c4:	b084      	sub	sp, #16
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
 800b6ca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b6d2:	2b01      	cmp	r3, #1
 800b6d4:	d101      	bne.n	800b6da <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b6d6:	2302      	movs	r3, #2
 800b6d8:	e02d      	b.n	800b736 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2201      	movs	r2, #1
 800b6de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2224      	movs	r2, #36	; 0x24
 800b6e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	681a      	ldr	r2, [r3, #0]
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f022 0201 	bic.w	r2, r2, #1
 800b700:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	689b      	ldr	r3, [r3, #8]
 800b708:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	683a      	ldr	r2, [r7, #0]
 800b712:	430a      	orrs	r2, r1
 800b714:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f000 f850 	bl	800b7bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	68fa      	ldr	r2, [r7, #12]
 800b722:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2220      	movs	r2, #32
 800b728:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2200      	movs	r2, #0
 800b730:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b734:	2300      	movs	r3, #0
}
 800b736:	4618      	mov	r0, r3
 800b738:	3710      	adds	r7, #16
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}

0800b73e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b73e:	b580      	push	{r7, lr}
 800b740:	b084      	sub	sp, #16
 800b742:	af00      	add	r7, sp, #0
 800b744:	6078      	str	r0, [r7, #4]
 800b746:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b74e:	2b01      	cmp	r3, #1
 800b750:	d101      	bne.n	800b756 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b752:	2302      	movs	r3, #2
 800b754:	e02d      	b.n	800b7b2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2201      	movs	r2, #1
 800b75a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2224      	movs	r2, #36	; 0x24
 800b762:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	681a      	ldr	r2, [r3, #0]
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	f022 0201 	bic.w	r2, r2, #1
 800b77c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	689b      	ldr	r3, [r3, #8]
 800b784:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	683a      	ldr	r2, [r7, #0]
 800b78e:	430a      	orrs	r2, r1
 800b790:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f000 f812 	bl	800b7bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	68fa      	ldr	r2, [r7, #12]
 800b79e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2220      	movs	r2, #32
 800b7a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b7b0:	2300      	movs	r3, #0
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3710      	adds	r7, #16
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}
	...

0800b7bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b085      	sub	sp, #20
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d108      	bne.n	800b7de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2201      	movs	r2, #1
 800b7d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b7dc:	e031      	b.n	800b842 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b7de:	2310      	movs	r3, #16
 800b7e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b7e2:	2310      	movs	r3, #16
 800b7e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	689b      	ldr	r3, [r3, #8]
 800b7ec:	0e5b      	lsrs	r3, r3, #25
 800b7ee:	b2db      	uxtb	r3, r3
 800b7f0:	f003 0307 	and.w	r3, r3, #7
 800b7f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	689b      	ldr	r3, [r3, #8]
 800b7fc:	0f5b      	lsrs	r3, r3, #29
 800b7fe:	b2db      	uxtb	r3, r3
 800b800:	f003 0307 	and.w	r3, r3, #7
 800b804:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b806:	7bbb      	ldrb	r3, [r7, #14]
 800b808:	7b3a      	ldrb	r2, [r7, #12]
 800b80a:	4911      	ldr	r1, [pc, #68]	; (800b850 <UARTEx_SetNbDataToProcess+0x94>)
 800b80c:	5c8a      	ldrb	r2, [r1, r2]
 800b80e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b812:	7b3a      	ldrb	r2, [r7, #12]
 800b814:	490f      	ldr	r1, [pc, #60]	; (800b854 <UARTEx_SetNbDataToProcess+0x98>)
 800b816:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b818:	fb93 f3f2 	sdiv	r3, r3, r2
 800b81c:	b29a      	uxth	r2, r3
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b824:	7bfb      	ldrb	r3, [r7, #15]
 800b826:	7b7a      	ldrb	r2, [r7, #13]
 800b828:	4909      	ldr	r1, [pc, #36]	; (800b850 <UARTEx_SetNbDataToProcess+0x94>)
 800b82a:	5c8a      	ldrb	r2, [r1, r2]
 800b82c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b830:	7b7a      	ldrb	r2, [r7, #13]
 800b832:	4908      	ldr	r1, [pc, #32]	; (800b854 <UARTEx_SetNbDataToProcess+0x98>)
 800b834:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b836:	fb93 f3f2 	sdiv	r3, r3, r2
 800b83a:	b29a      	uxth	r2, r3
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b842:	bf00      	nop
 800b844:	3714      	adds	r7, #20
 800b846:	46bd      	mov	sp, r7
 800b848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84c:	4770      	bx	lr
 800b84e:	bf00      	nop
 800b850:	0800c8e0 	.word	0x0800c8e0
 800b854:	0800c8e8 	.word	0x0800c8e8

0800b858 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b858:	b084      	sub	sp, #16
 800b85a:	b480      	push	{r7}
 800b85c:	b085      	sub	sp, #20
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
 800b862:	f107 001c 	add.w	r0, r7, #28
 800b866:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b86a:	2300      	movs	r3, #0
 800b86c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800b86e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800b870:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800b872:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800b874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800b876:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800b878:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800b87a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800b87e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800b880:	68fa      	ldr	r2, [r7, #12]
 800b882:	4313      	orrs	r3, r2
 800b884:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	685a      	ldr	r2, [r3, #4]
 800b88a:	4b07      	ldr	r3, [pc, #28]	; (800b8a8 <SDMMC_Init+0x50>)
 800b88c:	4013      	ands	r3, r2
 800b88e:	68fa      	ldr	r2, [r7, #12]
 800b890:	431a      	orrs	r2, r3
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b896:	2300      	movs	r3, #0
}
 800b898:	4618      	mov	r0, r3
 800b89a:	3714      	adds	r7, #20
 800b89c:	46bd      	mov	sp, r7
 800b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a2:	b004      	add	sp, #16
 800b8a4:	4770      	bx	lr
 800b8a6:	bf00      	nop
 800b8a8:	ffc02c00 	.word	0xffc02c00

0800b8ac <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b083      	sub	sp, #12
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	370c      	adds	r7, #12
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr

0800b8c6 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b8c6:	b480      	push	{r7}
 800b8c8:	b083      	sub	sp, #12
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f043 0203 	orr.w	r2, r3, #3
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b8da:	2300      	movs	r3, #0
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	370c      	adds	r7, #12
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr

0800b8e8 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b083      	sub	sp, #12
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f003 0303 	and.w	r3, r3, #3
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	370c      	adds	r7, #12
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr

0800b904 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b904:	b480      	push	{r7}
 800b906:	b085      	sub	sp, #20
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b90e:	2300      	movs	r3, #0
 800b910:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	681a      	ldr	r2, [r3, #0]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b922:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800b928:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800b92e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b930:	68fa      	ldr	r2, [r7, #12]
 800b932:	4313      	orrs	r3, r2
 800b934:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	68da      	ldr	r2, [r3, #12]
 800b93a:	4b06      	ldr	r3, [pc, #24]	; (800b954 <SDMMC_SendCommand+0x50>)
 800b93c:	4013      	ands	r3, r2
 800b93e:	68fa      	ldr	r2, [r7, #12]
 800b940:	431a      	orrs	r2, r3
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b946:	2300      	movs	r3, #0
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3714      	adds	r7, #20
 800b94c:	46bd      	mov	sp, r7
 800b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b952:	4770      	bx	lr
 800b954:	fffee0c0 	.word	0xfffee0c0

0800b958 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b958:	b480      	push	{r7}
 800b95a:	b083      	sub	sp, #12
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	691b      	ldr	r3, [r3, #16]
 800b964:	b2db      	uxtb	r3, r3
}
 800b966:	4618      	mov	r0, r3
 800b968:	370c      	adds	r7, #12
 800b96a:	46bd      	mov	sp, r7
 800b96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b970:	4770      	bx	lr

0800b972 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b972:	b480      	push	{r7}
 800b974:	b085      	sub	sp, #20
 800b976:	af00      	add	r7, sp, #0
 800b978:	6078      	str	r0, [r7, #4]
 800b97a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	3314      	adds	r3, #20
 800b980:	461a      	mov	r2, r3
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	4413      	add	r3, r2
 800b986:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3714      	adds	r7, #20
 800b990:	46bd      	mov	sp, r7
 800b992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b996:	4770      	bx	lr

0800b998 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800b998:	b480      	push	{r7}
 800b99a:	b085      	sub	sp, #20
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
 800b9a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	681a      	ldr	r2, [r3, #0]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	685a      	ldr	r2, [r3, #4]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b9be:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800b9c4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800b9ca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b9cc:	68fa      	ldr	r2, [r7, #12]
 800b9ce:	4313      	orrs	r3, r2
 800b9d0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	431a      	orrs	r2, r3
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b9e2:	2300      	movs	r3, #0

}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3714      	adds	r7, #20
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr

0800b9f0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b088      	sub	sp, #32
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b9fe:	2310      	movs	r3, #16
 800ba00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba02:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba10:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba12:	f107 0308 	add.w	r3, r7, #8
 800ba16:	4619      	mov	r1, r3
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f7ff ff73 	bl	800b904 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ba1e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba22:	2110      	movs	r1, #16
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f000 f995 	bl	800bd54 <SDMMC_GetCmdResp1>
 800ba2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba2c:	69fb      	ldr	r3, [r7, #28]
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3720      	adds	r7, #32
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}

0800ba36 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800ba36:	b580      	push	{r7, lr}
 800ba38:	b088      	sub	sp, #32
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	6078      	str	r0, [r7, #4]
 800ba3e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ba44:	2307      	movs	r3, #7
 800ba46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba48:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba58:	f107 0308 	add.w	r3, r7, #8
 800ba5c:	4619      	mov	r1, r3
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f7ff ff50 	bl	800b904 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ba64:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba68:	2107      	movs	r1, #7
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f000 f972 	bl	800bd54 <SDMMC_GetCmdResp1>
 800ba70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba72:	69fb      	ldr	r3, [r7, #28]
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3720      	adds	r7, #32
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b088      	sub	sp, #32
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ba84:	2300      	movs	r3, #0
 800ba86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba90:	2300      	movs	r3, #0
 800ba92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba9a:	f107 0308 	add.w	r3, r7, #8
 800ba9e:	4619      	mov	r1, r3
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f7ff ff2f 	bl	800b904 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f000 fb96 	bl	800c1d8 <SDMMC_GetCmdError>
 800baac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800baae:	69fb      	ldr	r3, [r7, #28]
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3720      	adds	r7, #32
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}

0800bab8 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b088      	sub	sp, #32
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800bac0:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800bac4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800bac6:	2308      	movs	r3, #8
 800bac8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800baca:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bace:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bad0:	2300      	movs	r3, #0
 800bad2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bad4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bad8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bada:	f107 0308 	add.w	r3, r7, #8
 800bade:	4619      	mov	r1, r3
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f7ff ff0f 	bl	800b904 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f000 fb28 	bl	800c13c <SDMMC_GetCmdResp7>
 800baec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800baee:	69fb      	ldr	r3, [r7, #28]
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	3720      	adds	r7, #32
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}

0800baf8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b088      	sub	sp, #32
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
 800bb00:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800bb06:	2337      	movs	r3, #55	; 0x37
 800bb08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb10:	2300      	movs	r3, #0
 800bb12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb18:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb1a:	f107 0308 	add.w	r3, r7, #8
 800bb1e:	4619      	mov	r1, r3
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f7ff feef 	bl	800b904 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800bb26:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb2a:	2137      	movs	r1, #55	; 0x37
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f000 f911 	bl	800bd54 <SDMMC_GetCmdResp1>
 800bb32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb34:	69fb      	ldr	r3, [r7, #28]
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3720      	adds	r7, #32
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}

0800bb3e <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bb3e:	b580      	push	{r7, lr}
 800bb40:	b088      	sub	sp, #32
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	6078      	str	r0, [r7, #4]
 800bb46:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800bb4c:	2329      	movs	r3, #41	; 0x29
 800bb4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb50:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb56:	2300      	movs	r3, #0
 800bb58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb60:	f107 0308 	add.w	r3, r7, #8
 800bb64:	4619      	mov	r1, r3
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f7ff fecc 	bl	800b904 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f000 fa2d 	bl	800bfcc <SDMMC_GetCmdResp3>
 800bb72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb74:	69fb      	ldr	r3, [r7, #28]
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3720      	adds	r7, #32
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}

0800bb7e <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800bb7e:	b580      	push	{r7, lr}
 800bb80:	b088      	sub	sp, #32
 800bb82:	af00      	add	r7, sp, #0
 800bb84:	6078      	str	r0, [r7, #4]
 800bb86:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800bb8c:	2306      	movs	r3, #6
 800bb8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb90:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb96:	2300      	movs	r3, #0
 800bb98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bba0:	f107 0308 	add.w	r3, r7, #8
 800bba4:	4619      	mov	r1, r3
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f7ff feac 	bl	800b904 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800bbac:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbb0:	2106      	movs	r1, #6
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f000 f8ce 	bl	800bd54 <SDMMC_GetCmdResp1>
 800bbb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbba:	69fb      	ldr	r3, [r7, #28]
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3720      	adds	r7, #32
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}

0800bbc4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b088      	sub	sp, #32
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800bbd0:	2333      	movs	r3, #51	; 0x33
 800bbd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bbd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bbd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bbde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bbe2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bbe4:	f107 0308 	add.w	r3, r7, #8
 800bbe8:	4619      	mov	r1, r3
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f7ff fe8a 	bl	800b904 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800bbf0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbf4:	2133      	movs	r1, #51	; 0x33
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f000 f8ac 	bl	800bd54 <SDMMC_GetCmdResp1>
 800bbfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbfe:	69fb      	ldr	r3, [r7, #28]
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	3720      	adds	r7, #32
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b088      	sub	sp, #32
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800bc10:	2300      	movs	r3, #0
 800bc12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800bc14:	2302      	movs	r3, #2
 800bc16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bc18:	f44f 7340 	mov.w	r3, #768	; 0x300
 800bc1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc28:	f107 0308 	add.w	r3, r7, #8
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f7ff fe68 	bl	800b904 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f000 f97f 	bl	800bf38 <SDMMC_GetCmdResp2>
 800bc3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc3c:	69fb      	ldr	r3, [r7, #28]
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3720      	adds	r7, #32
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}

0800bc46 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bc46:	b580      	push	{r7, lr}
 800bc48:	b088      	sub	sp, #32
 800bc4a:	af00      	add	r7, sp, #0
 800bc4c:	6078      	str	r0, [r7, #4]
 800bc4e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800bc54:	2309      	movs	r3, #9
 800bc56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bc58:	f44f 7340 	mov.w	r3, #768	; 0x300
 800bc5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc68:	f107 0308 	add.w	r3, r7, #8
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f7ff fe48 	bl	800b904 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f000 f95f 	bl	800bf38 <SDMMC_GetCmdResp2>
 800bc7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc7c:	69fb      	ldr	r3, [r7, #28]
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3720      	adds	r7, #32
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}

0800bc86 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800bc86:	b580      	push	{r7, lr}
 800bc88:	b088      	sub	sp, #32
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	6078      	str	r0, [r7, #4]
 800bc8e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800bc90:	2300      	movs	r3, #0
 800bc92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800bc94:	2303      	movs	r3, #3
 800bc96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc98:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bca2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bca6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bca8:	f107 0308 	add.w	r3, r7, #8
 800bcac:	4619      	mov	r1, r3
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f7ff fe28 	bl	800b904 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800bcb4:	683a      	ldr	r2, [r7, #0]
 800bcb6:	2103      	movs	r1, #3
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f000 f9c7 	bl	800c04c <SDMMC_GetCmdResp6>
 800bcbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bcc0:	69fb      	ldr	r3, [r7, #28]
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3720      	adds	r7, #32
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}

0800bcca <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bcca:	b580      	push	{r7, lr}
 800bccc:	b088      	sub	sp, #32
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
 800bcd2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800bcd8:	230d      	movs	r3, #13
 800bcda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bcdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bce0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bce2:	2300      	movs	r3, #0
 800bce4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bce6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bcea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bcec:	f107 0308 	add.w	r3, r7, #8
 800bcf0:	4619      	mov	r1, r3
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f7ff fe06 	bl	800b904 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800bcf8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcfc:	210d      	movs	r1, #13
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f000 f828 	bl	800bd54 <SDMMC_GetCmdResp1>
 800bd04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd06:	69fb      	ldr	r3, [r7, #28]
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3720      	adds	r7, #32
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b088      	sub	sp, #32
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800bd18:	2300      	movs	r3, #0
 800bd1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800bd1c:	230d      	movs	r3, #13
 800bd1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd20:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd26:	2300      	movs	r3, #0
 800bd28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd2e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd30:	f107 0308 	add.w	r3, r7, #8
 800bd34:	4619      	mov	r1, r3
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f7ff fde4 	bl	800b904 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800bd3c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd40:	210d      	movs	r1, #13
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f000 f806 	bl	800bd54 <SDMMC_GetCmdResp1>
 800bd48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd4a:	69fb      	ldr	r3, [r7, #28]
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	3720      	adds	r7, #32
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}

0800bd54 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b088      	sub	sp, #32
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	60f8      	str	r0, [r7, #12]
 800bd5c:	460b      	mov	r3, r1
 800bd5e:	607a      	str	r2, [r7, #4]
 800bd60:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bd62:	4b70      	ldr	r3, [pc, #448]	; (800bf24 <SDMMC_GetCmdResp1+0x1d0>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	4a70      	ldr	r2, [pc, #448]	; (800bf28 <SDMMC_GetCmdResp1+0x1d4>)
 800bd68:	fba2 2303 	umull	r2, r3, r2, r3
 800bd6c:	0a5a      	lsrs	r2, r3, #9
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	fb02 f303 	mul.w	r3, r2, r3
 800bd74:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800bd76:	69fb      	ldr	r3, [r7, #28]
 800bd78:	1e5a      	subs	r2, r3, #1
 800bd7a:	61fa      	str	r2, [r7, #28]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d102      	bne.n	800bd86 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd84:	e0c9      	b.n	800bf1a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd8a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800bd8c:	69ba      	ldr	r2, [r7, #24]
 800bd8e:	4b67      	ldr	r3, [pc, #412]	; (800bf2c <SDMMC_GetCmdResp1+0x1d8>)
 800bd90:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d0ef      	beq.n	800bd76 <SDMMC_GetCmdResp1+0x22>
 800bd96:	69bb      	ldr	r3, [r7, #24]
 800bd98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d1ea      	bne.n	800bd76 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bda4:	f003 0304 	and.w	r3, r3, #4
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d004      	beq.n	800bdb6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	2204      	movs	r2, #4
 800bdb0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bdb2:	2304      	movs	r3, #4
 800bdb4:	e0b1      	b.n	800bf1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdba:	f003 0301 	and.w	r3, r3, #1
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d004      	beq.n	800bdcc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	2201      	movs	r2, #1
 800bdc6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bdc8:	2301      	movs	r3, #1
 800bdca:	e0a6      	b.n	800bf1a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	4a58      	ldr	r2, [pc, #352]	; (800bf30 <SDMMC_GetCmdResp1+0x1dc>)
 800bdd0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bdd2:	68f8      	ldr	r0, [r7, #12]
 800bdd4:	f7ff fdc0 	bl	800b958 <SDMMC_GetCommandResponse>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	461a      	mov	r2, r3
 800bddc:	7afb      	ldrb	r3, [r7, #11]
 800bdde:	4293      	cmp	r3, r2
 800bde0:	d001      	beq.n	800bde6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bde2:	2301      	movs	r3, #1
 800bde4:	e099      	b.n	800bf1a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bde6:	2100      	movs	r1, #0
 800bde8:	68f8      	ldr	r0, [r7, #12]
 800bdea:	f7ff fdc2 	bl	800b972 <SDMMC_GetResponse>
 800bdee:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bdf0:	697a      	ldr	r2, [r7, #20]
 800bdf2:	4b50      	ldr	r3, [pc, #320]	; (800bf34 <SDMMC_GetCmdResp1+0x1e0>)
 800bdf4:	4013      	ands	r3, r2
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d101      	bne.n	800bdfe <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	e08d      	b.n	800bf1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	2b00      	cmp	r3, #0
 800be02:	da02      	bge.n	800be0a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800be04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800be08:	e087      	b.n	800bf1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800be0a:	697b      	ldr	r3, [r7, #20]
 800be0c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800be10:	2b00      	cmp	r3, #0
 800be12:	d001      	beq.n	800be18 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800be14:	2340      	movs	r3, #64	; 0x40
 800be16:	e080      	b.n	800bf1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800be18:	697b      	ldr	r3, [r7, #20]
 800be1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d001      	beq.n	800be26 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800be22:	2380      	movs	r3, #128	; 0x80
 800be24:	e079      	b.n	800bf1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d002      	beq.n	800be36 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800be30:	f44f 7380 	mov.w	r3, #256	; 0x100
 800be34:	e071      	b.n	800bf1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d002      	beq.n	800be46 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800be40:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be44:	e069      	b.n	800bf1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d002      	beq.n	800be56 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800be50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be54:	e061      	b.n	800bf1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d002      	beq.n	800be66 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800be60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800be64:	e059      	b.n	800bf1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800be66:	697b      	ldr	r3, [r7, #20]
 800be68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d002      	beq.n	800be76 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800be70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be74:	e051      	b.n	800bf1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d002      	beq.n	800be86 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800be80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800be84:	e049      	b.n	800bf1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d002      	beq.n	800be96 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800be90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800be94:	e041      	b.n	800bf1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d002      	beq.n	800bea6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800bea0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bea4:	e039      	b.n	800bf1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bea6:	697b      	ldr	r3, [r7, #20]
 800bea8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800beac:	2b00      	cmp	r3, #0
 800beae:	d002      	beq.n	800beb6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800beb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800beb4:	e031      	b.n	800bf1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d002      	beq.n	800bec6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bec0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bec4:	e029      	b.n	800bf1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800becc:	2b00      	cmp	r3, #0
 800bece:	d002      	beq.n	800bed6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bed0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bed4:	e021      	b.n	800bf1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d002      	beq.n	800bee6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bee0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bee4:	e019      	b.n	800bf1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800beec:	2b00      	cmp	r3, #0
 800beee:	d002      	beq.n	800bef6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bef0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bef4:	e011      	b.n	800bf1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bef6:	697b      	ldr	r3, [r7, #20]
 800bef8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800befc:	2b00      	cmp	r3, #0
 800befe:	d002      	beq.n	800bf06 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bf00:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bf04:	e009      	b.n	800bf1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	f003 0308 	and.w	r3, r3, #8
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d002      	beq.n	800bf16 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bf10:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800bf14:	e001      	b.n	800bf1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bf16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3720      	adds	r7, #32
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}
 800bf22:	bf00      	nop
 800bf24:	24000000 	.word	0x24000000
 800bf28:	10624dd3 	.word	0x10624dd3
 800bf2c:	00200045 	.word	0x00200045
 800bf30:	002000c5 	.word	0x002000c5
 800bf34:	fdffe008 	.word	0xfdffe008

0800bf38 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800bf38:	b480      	push	{r7}
 800bf3a:	b085      	sub	sp, #20
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bf40:	4b1f      	ldr	r3, [pc, #124]	; (800bfc0 <SDMMC_GetCmdResp2+0x88>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	4a1f      	ldr	r2, [pc, #124]	; (800bfc4 <SDMMC_GetCmdResp2+0x8c>)
 800bf46:	fba2 2303 	umull	r2, r3, r2, r3
 800bf4a:	0a5b      	lsrs	r3, r3, #9
 800bf4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf50:	fb02 f303 	mul.w	r3, r2, r3
 800bf54:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	1e5a      	subs	r2, r3, #1
 800bf5a:	60fa      	str	r2, [r7, #12]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d102      	bne.n	800bf66 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bf60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bf64:	e026      	b.n	800bfb4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf6a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d0ef      	beq.n	800bf56 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d1ea      	bne.n	800bf56 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf84:	f003 0304 	and.w	r3, r3, #4
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d004      	beq.n	800bf96 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2204      	movs	r2, #4
 800bf90:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bf92:	2304      	movs	r3, #4
 800bf94:	e00e      	b.n	800bfb4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf9a:	f003 0301 	and.w	r3, r3, #1
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d004      	beq.n	800bfac <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2201      	movs	r2, #1
 800bfa6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	e003      	b.n	800bfb4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	4a06      	ldr	r2, [pc, #24]	; (800bfc8 <SDMMC_GetCmdResp2+0x90>)
 800bfb0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bfb2:	2300      	movs	r3, #0
}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	3714      	adds	r7, #20
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbe:	4770      	bx	lr
 800bfc0:	24000000 	.word	0x24000000
 800bfc4:	10624dd3 	.word	0x10624dd3
 800bfc8:	002000c5 	.word	0x002000c5

0800bfcc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bfcc:	b480      	push	{r7}
 800bfce:	b085      	sub	sp, #20
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bfd4:	4b1a      	ldr	r3, [pc, #104]	; (800c040 <SDMMC_GetCmdResp3+0x74>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	4a1a      	ldr	r2, [pc, #104]	; (800c044 <SDMMC_GetCmdResp3+0x78>)
 800bfda:	fba2 2303 	umull	r2, r3, r2, r3
 800bfde:	0a5b      	lsrs	r3, r3, #9
 800bfe0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfe4:	fb02 f303 	mul.w	r3, r2, r3
 800bfe8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	1e5a      	subs	r2, r3, #1
 800bfee:	60fa      	str	r2, [r7, #12]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d102      	bne.n	800bffa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bff4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bff8:	e01b      	b.n	800c032 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bffe:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c006:	2b00      	cmp	r3, #0
 800c008:	d0ef      	beq.n	800bfea <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c010:	2b00      	cmp	r3, #0
 800c012:	d1ea      	bne.n	800bfea <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c018:	f003 0304 	and.w	r3, r3, #4
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d004      	beq.n	800c02a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2204      	movs	r2, #4
 800c024:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c026:	2304      	movs	r3, #4
 800c028:	e003      	b.n	800c032 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	4a06      	ldr	r2, [pc, #24]	; (800c048 <SDMMC_GetCmdResp3+0x7c>)
 800c02e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c030:	2300      	movs	r3, #0
}
 800c032:	4618      	mov	r0, r3
 800c034:	3714      	adds	r7, #20
 800c036:	46bd      	mov	sp, r7
 800c038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03c:	4770      	bx	lr
 800c03e:	bf00      	nop
 800c040:	24000000 	.word	0x24000000
 800c044:	10624dd3 	.word	0x10624dd3
 800c048:	002000c5 	.word	0x002000c5

0800c04c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b088      	sub	sp, #32
 800c050:	af00      	add	r7, sp, #0
 800c052:	60f8      	str	r0, [r7, #12]
 800c054:	460b      	mov	r3, r1
 800c056:	607a      	str	r2, [r7, #4]
 800c058:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c05a:	4b35      	ldr	r3, [pc, #212]	; (800c130 <SDMMC_GetCmdResp6+0xe4>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	4a35      	ldr	r2, [pc, #212]	; (800c134 <SDMMC_GetCmdResp6+0xe8>)
 800c060:	fba2 2303 	umull	r2, r3, r2, r3
 800c064:	0a5b      	lsrs	r3, r3, #9
 800c066:	f241 3288 	movw	r2, #5000	; 0x1388
 800c06a:	fb02 f303 	mul.w	r3, r2, r3
 800c06e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c070:	69fb      	ldr	r3, [r7, #28]
 800c072:	1e5a      	subs	r2, r3, #1
 800c074:	61fa      	str	r2, [r7, #28]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d102      	bne.n	800c080 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c07a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c07e:	e052      	b.n	800c126 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c084:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c086:	69bb      	ldr	r3, [r7, #24]
 800c088:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d0ef      	beq.n	800c070 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c090:	69bb      	ldr	r3, [r7, #24]
 800c092:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c096:	2b00      	cmp	r3, #0
 800c098:	d1ea      	bne.n	800c070 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c09e:	f003 0304 	and.w	r3, r3, #4
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d004      	beq.n	800c0b0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	2204      	movs	r2, #4
 800c0aa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c0ac:	2304      	movs	r3, #4
 800c0ae:	e03a      	b.n	800c126 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0b4:	f003 0301 	and.w	r3, r3, #1
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d004      	beq.n	800c0c6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	2201      	movs	r2, #1
 800c0c0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	e02f      	b.n	800c126 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c0c6:	68f8      	ldr	r0, [r7, #12]
 800c0c8:	f7ff fc46 	bl	800b958 <SDMMC_GetCommandResponse>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	7afb      	ldrb	r3, [r7, #11]
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	d001      	beq.n	800c0da <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	e025      	b.n	800c126 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	4a16      	ldr	r2, [pc, #88]	; (800c138 <SDMMC_GetCmdResp6+0xec>)
 800c0de:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c0e0:	2100      	movs	r1, #0
 800c0e2:	68f8      	ldr	r0, [r7, #12]
 800c0e4:	f7ff fc45 	bl	800b972 <SDMMC_GetResponse>
 800c0e8:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d106      	bne.n	800c102 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	0c1b      	lsrs	r3, r3, #16
 800c0f8:	b29a      	uxth	r2, r3
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800c0fe:	2300      	movs	r3, #0
 800c100:	e011      	b.n	800c126 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d002      	beq.n	800c112 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c10c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c110:	e009      	b.n	800c126 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c112:	697b      	ldr	r3, [r7, #20]
 800c114:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d002      	beq.n	800c122 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c11c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c120:	e001      	b.n	800c126 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c122:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c126:	4618      	mov	r0, r3
 800c128:	3720      	adds	r7, #32
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}
 800c12e:	bf00      	nop
 800c130:	24000000 	.word	0x24000000
 800c134:	10624dd3 	.word	0x10624dd3
 800c138:	002000c5 	.word	0x002000c5

0800c13c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c13c:	b480      	push	{r7}
 800c13e:	b085      	sub	sp, #20
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c144:	4b22      	ldr	r3, [pc, #136]	; (800c1d0 <SDMMC_GetCmdResp7+0x94>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	4a22      	ldr	r2, [pc, #136]	; (800c1d4 <SDMMC_GetCmdResp7+0x98>)
 800c14a:	fba2 2303 	umull	r2, r3, r2, r3
 800c14e:	0a5b      	lsrs	r3, r3, #9
 800c150:	f241 3288 	movw	r2, #5000	; 0x1388
 800c154:	fb02 f303 	mul.w	r3, r2, r3
 800c158:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	1e5a      	subs	r2, r3, #1
 800c15e:	60fa      	str	r2, [r7, #12]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d102      	bne.n	800c16a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c164:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c168:	e02c      	b.n	800c1c4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c16e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c176:	2b00      	cmp	r3, #0
 800c178:	d0ef      	beq.n	800c15a <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c180:	2b00      	cmp	r3, #0
 800c182:	d1ea      	bne.n	800c15a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c188:	f003 0304 	and.w	r3, r3, #4
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d004      	beq.n	800c19a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2204      	movs	r2, #4
 800c194:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c196:	2304      	movs	r3, #4
 800c198:	e014      	b.n	800c1c4 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c19e:	f003 0301 	and.w	r3, r3, #1
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d004      	beq.n	800c1b0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2201      	movs	r2, #1
 800c1aa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	e009      	b.n	800c1c4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d002      	beq.n	800c1c2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2240      	movs	r2, #64	; 0x40
 800c1c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c1c2:	2300      	movs	r3, #0

}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	3714      	adds	r7, #20
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ce:	4770      	bx	lr
 800c1d0:	24000000 	.word	0x24000000
 800c1d4:	10624dd3 	.word	0x10624dd3

0800c1d8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b085      	sub	sp, #20
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c1e0:	4b11      	ldr	r3, [pc, #68]	; (800c228 <SDMMC_GetCmdError+0x50>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	4a11      	ldr	r2, [pc, #68]	; (800c22c <SDMMC_GetCmdError+0x54>)
 800c1e6:	fba2 2303 	umull	r2, r3, r2, r3
 800c1ea:	0a5b      	lsrs	r3, r3, #9
 800c1ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1f0:	fb02 f303 	mul.w	r3, r2, r3
 800c1f4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	1e5a      	subs	r2, r3, #1
 800c1fa:	60fa      	str	r2, [r7, #12]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d102      	bne.n	800c206 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c200:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c204:	e009      	b.n	800c21a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c20a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d0f1      	beq.n	800c1f6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	4a06      	ldr	r2, [pc, #24]	; (800c230 <SDMMC_GetCmdError+0x58>)
 800c216:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800c218:	2300      	movs	r3, #0
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	3714      	adds	r7, #20
 800c21e:	46bd      	mov	sp, r7
 800c220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c224:	4770      	bx	lr
 800c226:	bf00      	nop
 800c228:	24000000 	.word	0x24000000
 800c22c:	10624dd3 	.word	0x10624dd3
 800c230:	002000c5 	.word	0x002000c5

0800c234 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c234:	b084      	sub	sp, #16
 800c236:	b580      	push	{r7, lr}
 800c238:	b084      	sub	sp, #16
 800c23a:	af00      	add	r7, sp, #0
 800c23c:	6078      	str	r0, [r7, #4]
 800c23e:	f107 001c 	add.w	r0, r7, #28
 800c242:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c248:	2b01      	cmp	r3, #1
 800c24a:	d120      	bne.n	800c28e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c250:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	68da      	ldr	r2, [r3, #12]
 800c25c:	4b2a      	ldr	r3, [pc, #168]	; (800c308 <USB_CoreInit+0xd4>)
 800c25e:	4013      	ands	r3, r2
 800c260:	687a      	ldr	r2, [r7, #4]
 800c262:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	68db      	ldr	r3, [r3, #12]
 800c268:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c272:	2b01      	cmp	r3, #1
 800c274:	d105      	bne.n	800c282 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	68db      	ldr	r3, [r3, #12]
 800c27a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f000 faac 	bl	800c7e0 <USB_CoreReset>
 800c288:	4603      	mov	r3, r0
 800c28a:	73fb      	strb	r3, [r7, #15]
 800c28c:	e01a      	b.n	800c2c4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	68db      	ldr	r3, [r3, #12]
 800c292:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f000 faa0 	bl	800c7e0 <USB_CoreReset>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c2a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d106      	bne.n	800c2b8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	639a      	str	r2, [r3, #56]	; 0x38
 800c2b6:	e005      	b.n	800c2c4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c6:	2b01      	cmp	r3, #1
 800c2c8:	d116      	bne.n	800c2f8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c2ce:	b29a      	uxth	r2, r3
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c2d8:	4b0c      	ldr	r3, [pc, #48]	; (800c30c <USB_CoreInit+0xd8>)
 800c2da:	4313      	orrs	r3, r2
 800c2dc:	687a      	ldr	r2, [r7, #4]
 800c2de:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	689b      	ldr	r3, [r3, #8]
 800c2e4:	f043 0206 	orr.w	r2, r3, #6
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	689b      	ldr	r3, [r3, #8]
 800c2f0:	f043 0220 	orr.w	r2, r3, #32
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c2f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3710      	adds	r7, #16
 800c2fe:	46bd      	mov	sp, r7
 800c300:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c304:	b004      	add	sp, #16
 800c306:	4770      	bx	lr
 800c308:	ffbdffbf 	.word	0xffbdffbf
 800c30c:	03ee0000 	.word	0x03ee0000

0800c310 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c310:	b480      	push	{r7}
 800c312:	b083      	sub	sp, #12
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	689b      	ldr	r3, [r3, #8]
 800c31c:	f023 0201 	bic.w	r2, r3, #1
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c324:	2300      	movs	r3, #0
}
 800c326:	4618      	mov	r0, r3
 800c328:	370c      	adds	r7, #12
 800c32a:	46bd      	mov	sp, r7
 800c32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c330:	4770      	bx	lr

0800c332 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c332:	b580      	push	{r7, lr}
 800c334:	b084      	sub	sp, #16
 800c336:	af00      	add	r7, sp, #0
 800c338:	6078      	str	r0, [r7, #4]
 800c33a:	460b      	mov	r3, r1
 800c33c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c33e:	2300      	movs	r3, #0
 800c340:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	68db      	ldr	r3, [r3, #12]
 800c346:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c34e:	78fb      	ldrb	r3, [r7, #3]
 800c350:	2b01      	cmp	r3, #1
 800c352:	d115      	bne.n	800c380 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	68db      	ldr	r3, [r3, #12]
 800c358:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c360:	2001      	movs	r0, #1
 800c362:	f7f6 f965 	bl	8002630 <HAL_Delay>
      ms++;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	3301      	adds	r3, #1
 800c36a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f000 fa29 	bl	800c7c4 <USB_GetMode>
 800c372:	4603      	mov	r3, r0
 800c374:	2b01      	cmp	r3, #1
 800c376:	d01e      	beq.n	800c3b6 <USB_SetCurrentMode+0x84>
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	2b31      	cmp	r3, #49	; 0x31
 800c37c:	d9f0      	bls.n	800c360 <USB_SetCurrentMode+0x2e>
 800c37e:	e01a      	b.n	800c3b6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c380:	78fb      	ldrb	r3, [r7, #3]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d115      	bne.n	800c3b2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	68db      	ldr	r3, [r3, #12]
 800c38a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c392:	2001      	movs	r0, #1
 800c394:	f7f6 f94c 	bl	8002630 <HAL_Delay>
      ms++;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	3301      	adds	r3, #1
 800c39c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f000 fa10 	bl	800c7c4 <USB_GetMode>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d005      	beq.n	800c3b6 <USB_SetCurrentMode+0x84>
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	2b31      	cmp	r3, #49	; 0x31
 800c3ae:	d9f0      	bls.n	800c392 <USB_SetCurrentMode+0x60>
 800c3b0:	e001      	b.n	800c3b6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	e005      	b.n	800c3c2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	2b32      	cmp	r3, #50	; 0x32
 800c3ba:	d101      	bne.n	800c3c0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c3bc:	2301      	movs	r3, #1
 800c3be:	e000      	b.n	800c3c2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c3c0:	2300      	movs	r3, #0
}
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	3710      	adds	r7, #16
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}
	...

0800c3cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c3cc:	b084      	sub	sp, #16
 800c3ce:	b580      	push	{r7, lr}
 800c3d0:	b086      	sub	sp, #24
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	6078      	str	r0, [r7, #4]
 800c3d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c3da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	613b      	str	r3, [r7, #16]
 800c3ea:	e009      	b.n	800c400 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c3ec:	687a      	ldr	r2, [r7, #4]
 800c3ee:	693b      	ldr	r3, [r7, #16]
 800c3f0:	3340      	adds	r3, #64	; 0x40
 800c3f2:	009b      	lsls	r3, r3, #2
 800c3f4:	4413      	add	r3, r2
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c3fa:	693b      	ldr	r3, [r7, #16]
 800c3fc:	3301      	adds	r3, #1
 800c3fe:	613b      	str	r3, [r7, #16]
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	2b0e      	cmp	r3, #14
 800c404:	d9f2      	bls.n	800c3ec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d11c      	bne.n	800c446 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c412:	685b      	ldr	r3, [r3, #4]
 800c414:	68fa      	ldr	r2, [r7, #12]
 800c416:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c41a:	f043 0302 	orr.w	r3, r3, #2
 800c41e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c424:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	601a      	str	r2, [r3, #0]
 800c444:	e005      	b.n	800c452 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c44a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c458:	461a      	mov	r2, r3
 800c45a:	2300      	movs	r3, #0
 800c45c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c464:	4619      	mov	r1, r3
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c46c:	461a      	mov	r2, r3
 800c46e:	680b      	ldr	r3, [r1, #0]
 800c470:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c474:	2b01      	cmp	r3, #1
 800c476:	d10c      	bne.n	800c492 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d104      	bne.n	800c488 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c47e:	2100      	movs	r1, #0
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f000 f965 	bl	800c750 <USB_SetDevSpeed>
 800c486:	e008      	b.n	800c49a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c488:	2101      	movs	r1, #1
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f000 f960 	bl	800c750 <USB_SetDevSpeed>
 800c490:	e003      	b.n	800c49a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c492:	2103      	movs	r1, #3
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	f000 f95b 	bl	800c750 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c49a:	2110      	movs	r1, #16
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f000 f8f3 	bl	800c688 <USB_FlushTxFifo>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d001      	beq.n	800c4ac <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f000 f91f 	bl	800c6f0 <USB_FlushRxFifo>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d001      	beq.n	800c4bc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4c2:	461a      	mov	r2, r3
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4ce:	461a      	mov	r2, r3
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4da:	461a      	mov	r2, r3
 800c4dc:	2300      	movs	r3, #0
 800c4de:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	613b      	str	r3, [r7, #16]
 800c4e4:	e043      	b.n	800c56e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	015a      	lsls	r2, r3, #5
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	4413      	add	r3, r2
 800c4ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c4f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c4fc:	d118      	bne.n	800c530 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c4fe:	693b      	ldr	r3, [r7, #16]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d10a      	bne.n	800c51a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c504:	693b      	ldr	r3, [r7, #16]
 800c506:	015a      	lsls	r2, r3, #5
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	4413      	add	r3, r2
 800c50c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c510:	461a      	mov	r2, r3
 800c512:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c516:	6013      	str	r3, [r2, #0]
 800c518:	e013      	b.n	800c542 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	015a      	lsls	r2, r3, #5
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	4413      	add	r3, r2
 800c522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c526:	461a      	mov	r2, r3
 800c528:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c52c:	6013      	str	r3, [r2, #0]
 800c52e:	e008      	b.n	800c542 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	015a      	lsls	r2, r3, #5
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	4413      	add	r3, r2
 800c538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c53c:	461a      	mov	r2, r3
 800c53e:	2300      	movs	r3, #0
 800c540:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c542:	693b      	ldr	r3, [r7, #16]
 800c544:	015a      	lsls	r2, r3, #5
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	4413      	add	r3, r2
 800c54a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c54e:	461a      	mov	r2, r3
 800c550:	2300      	movs	r3, #0
 800c552:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	015a      	lsls	r2, r3, #5
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	4413      	add	r3, r2
 800c55c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c560:	461a      	mov	r2, r3
 800c562:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c566:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c568:	693b      	ldr	r3, [r7, #16]
 800c56a:	3301      	adds	r3, #1
 800c56c:	613b      	str	r3, [r7, #16]
 800c56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c570:	693a      	ldr	r2, [r7, #16]
 800c572:	429a      	cmp	r2, r3
 800c574:	d3b7      	bcc.n	800c4e6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c576:	2300      	movs	r3, #0
 800c578:	613b      	str	r3, [r7, #16]
 800c57a:	e043      	b.n	800c604 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c57c:	693b      	ldr	r3, [r7, #16]
 800c57e:	015a      	lsls	r2, r3, #5
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	4413      	add	r3, r2
 800c584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c58e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c592:	d118      	bne.n	800c5c6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d10a      	bne.n	800c5b0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c59a:	693b      	ldr	r3, [r7, #16]
 800c59c:	015a      	lsls	r2, r3, #5
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	4413      	add	r3, r2
 800c5a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5a6:	461a      	mov	r2, r3
 800c5a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c5ac:	6013      	str	r3, [r2, #0]
 800c5ae:	e013      	b.n	800c5d8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c5b0:	693b      	ldr	r3, [r7, #16]
 800c5b2:	015a      	lsls	r2, r3, #5
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	4413      	add	r3, r2
 800c5b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5bc:	461a      	mov	r2, r3
 800c5be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c5c2:	6013      	str	r3, [r2, #0]
 800c5c4:	e008      	b.n	800c5d8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c5c6:	693b      	ldr	r3, [r7, #16]
 800c5c8:	015a      	lsls	r2, r3, #5
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	4413      	add	r3, r2
 800c5ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5d2:	461a      	mov	r2, r3
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c5d8:	693b      	ldr	r3, [r7, #16]
 800c5da:	015a      	lsls	r2, r3, #5
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	4413      	add	r3, r2
 800c5e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5e4:	461a      	mov	r2, r3
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	015a      	lsls	r2, r3, #5
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	4413      	add	r3, r2
 800c5f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5f6:	461a      	mov	r2, r3
 800c5f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c5fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c5fe:	693b      	ldr	r3, [r7, #16]
 800c600:	3301      	adds	r3, #1
 800c602:	613b      	str	r3, [r7, #16]
 800c604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c606:	693a      	ldr	r2, [r7, #16]
 800c608:	429a      	cmp	r2, r3
 800c60a:	d3b7      	bcc.n	800c57c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c612:	691b      	ldr	r3, [r3, #16]
 800c614:	68fa      	ldr	r2, [r7, #12]
 800c616:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c61a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c61e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2200      	movs	r2, #0
 800c624:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c62c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c630:	2b00      	cmp	r3, #0
 800c632:	d105      	bne.n	800c640 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	699b      	ldr	r3, [r3, #24]
 800c638:	f043 0210 	orr.w	r2, r3, #16
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	699a      	ldr	r2, [r3, #24]
 800c644:	4b0e      	ldr	r3, [pc, #56]	; (800c680 <USB_DevInit+0x2b4>)
 800c646:	4313      	orrs	r3, r2
 800c648:	687a      	ldr	r2, [r7, #4]
 800c64a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c64c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d005      	beq.n	800c65e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	699b      	ldr	r3, [r3, #24]
 800c656:	f043 0208 	orr.w	r2, r3, #8
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c65e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c660:	2b01      	cmp	r3, #1
 800c662:	d105      	bne.n	800c670 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	699a      	ldr	r2, [r3, #24]
 800c668:	4b06      	ldr	r3, [pc, #24]	; (800c684 <USB_DevInit+0x2b8>)
 800c66a:	4313      	orrs	r3, r2
 800c66c:	687a      	ldr	r2, [r7, #4]
 800c66e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c670:	7dfb      	ldrb	r3, [r7, #23]
}
 800c672:	4618      	mov	r0, r3
 800c674:	3718      	adds	r7, #24
 800c676:	46bd      	mov	sp, r7
 800c678:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c67c:	b004      	add	sp, #16
 800c67e:	4770      	bx	lr
 800c680:	803c3800 	.word	0x803c3800
 800c684:	40000004 	.word	0x40000004

0800c688 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c688:	b480      	push	{r7}
 800c68a:	b085      	sub	sp, #20
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
 800c690:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c692:	2300      	movs	r3, #0
 800c694:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	3301      	adds	r3, #1
 800c69a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	4a13      	ldr	r2, [pc, #76]	; (800c6ec <USB_FlushTxFifo+0x64>)
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d901      	bls.n	800c6a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c6a4:	2303      	movs	r3, #3
 800c6a6:	e01b      	b.n	800c6e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	691b      	ldr	r3, [r3, #16]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	daf2      	bge.n	800c696 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	019b      	lsls	r3, r3, #6
 800c6b8:	f043 0220 	orr.w	r2, r3, #32
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	3301      	adds	r3, #1
 800c6c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	4a08      	ldr	r2, [pc, #32]	; (800c6ec <USB_FlushTxFifo+0x64>)
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	d901      	bls.n	800c6d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c6ce:	2303      	movs	r3, #3
 800c6d0:	e006      	b.n	800c6e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	691b      	ldr	r3, [r3, #16]
 800c6d6:	f003 0320 	and.w	r3, r3, #32
 800c6da:	2b20      	cmp	r3, #32
 800c6dc:	d0f0      	beq.n	800c6c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c6de:	2300      	movs	r3, #0
}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	3714      	adds	r7, #20
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ea:	4770      	bx	lr
 800c6ec:	00030d40 	.word	0x00030d40

0800c6f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c6f0:	b480      	push	{r7}
 800c6f2:	b085      	sub	sp, #20
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	3301      	adds	r3, #1
 800c700:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	4a11      	ldr	r2, [pc, #68]	; (800c74c <USB_FlushRxFifo+0x5c>)
 800c706:	4293      	cmp	r3, r2
 800c708:	d901      	bls.n	800c70e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c70a:	2303      	movs	r3, #3
 800c70c:	e018      	b.n	800c740 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	691b      	ldr	r3, [r3, #16]
 800c712:	2b00      	cmp	r3, #0
 800c714:	daf2      	bge.n	800c6fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c716:	2300      	movs	r3, #0
 800c718:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	2210      	movs	r2, #16
 800c71e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	3301      	adds	r3, #1
 800c724:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	4a08      	ldr	r2, [pc, #32]	; (800c74c <USB_FlushRxFifo+0x5c>)
 800c72a:	4293      	cmp	r3, r2
 800c72c:	d901      	bls.n	800c732 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c72e:	2303      	movs	r3, #3
 800c730:	e006      	b.n	800c740 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	691b      	ldr	r3, [r3, #16]
 800c736:	f003 0310 	and.w	r3, r3, #16
 800c73a:	2b10      	cmp	r3, #16
 800c73c:	d0f0      	beq.n	800c720 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c73e:	2300      	movs	r3, #0
}
 800c740:	4618      	mov	r0, r3
 800c742:	3714      	adds	r7, #20
 800c744:	46bd      	mov	sp, r7
 800c746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74a:	4770      	bx	lr
 800c74c:	00030d40 	.word	0x00030d40

0800c750 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c750:	b480      	push	{r7}
 800c752:	b085      	sub	sp, #20
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
 800c758:	460b      	mov	r3, r1
 800c75a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c766:	681a      	ldr	r2, [r3, #0]
 800c768:	78fb      	ldrb	r3, [r7, #3]
 800c76a:	68f9      	ldr	r1, [r7, #12]
 800c76c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c770:	4313      	orrs	r3, r2
 800c772:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c774:	2300      	movs	r3, #0
}
 800c776:	4618      	mov	r0, r3
 800c778:	3714      	adds	r7, #20
 800c77a:	46bd      	mov	sp, r7
 800c77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c780:	4770      	bx	lr

0800c782 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c782:	b480      	push	{r7}
 800c784:	b085      	sub	sp, #20
 800c786:	af00      	add	r7, sp, #0
 800c788:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	68fa      	ldr	r2, [r7, #12]
 800c798:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c79c:	f023 0303 	bic.w	r3, r3, #3
 800c7a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7a8:	685b      	ldr	r3, [r3, #4]
 800c7aa:	68fa      	ldr	r2, [r7, #12]
 800c7ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c7b0:	f043 0302 	orr.w	r3, r3, #2
 800c7b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c7b6:	2300      	movs	r3, #0
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3714      	adds	r7, #20
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr

0800c7c4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b083      	sub	sp, #12
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	695b      	ldr	r3, [r3, #20]
 800c7d0:	f003 0301 	and.w	r3, r3, #1
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	370c      	adds	r7, #12
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7de:	4770      	bx	lr

0800c7e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b085      	sub	sp, #20
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	3301      	adds	r3, #1
 800c7f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	4a13      	ldr	r2, [pc, #76]	; (800c844 <USB_CoreReset+0x64>)
 800c7f6:	4293      	cmp	r3, r2
 800c7f8:	d901      	bls.n	800c7fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c7fa:	2303      	movs	r3, #3
 800c7fc:	e01b      	b.n	800c836 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	691b      	ldr	r3, [r3, #16]
 800c802:	2b00      	cmp	r3, #0
 800c804:	daf2      	bge.n	800c7ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c806:	2300      	movs	r3, #0
 800c808:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	691b      	ldr	r3, [r3, #16]
 800c80e:	f043 0201 	orr.w	r2, r3, #1
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	3301      	adds	r3, #1
 800c81a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	4a09      	ldr	r2, [pc, #36]	; (800c844 <USB_CoreReset+0x64>)
 800c820:	4293      	cmp	r3, r2
 800c822:	d901      	bls.n	800c828 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c824:	2303      	movs	r3, #3
 800c826:	e006      	b.n	800c836 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	691b      	ldr	r3, [r3, #16]
 800c82c:	f003 0301 	and.w	r3, r3, #1
 800c830:	2b01      	cmp	r3, #1
 800c832:	d0f0      	beq.n	800c816 <USB_CoreReset+0x36>

  return HAL_OK;
 800c834:	2300      	movs	r3, #0
}
 800c836:	4618      	mov	r0, r3
 800c838:	3714      	adds	r7, #20
 800c83a:	46bd      	mov	sp, r7
 800c83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c840:	4770      	bx	lr
 800c842:	bf00      	nop
 800c844:	00030d40 	.word	0x00030d40

0800c848 <memset>:
 800c848:	4402      	add	r2, r0
 800c84a:	4603      	mov	r3, r0
 800c84c:	4293      	cmp	r3, r2
 800c84e:	d100      	bne.n	800c852 <memset+0xa>
 800c850:	4770      	bx	lr
 800c852:	f803 1b01 	strb.w	r1, [r3], #1
 800c856:	e7f9      	b.n	800c84c <memset+0x4>

0800c858 <__libc_init_array>:
 800c858:	b570      	push	{r4, r5, r6, lr}
 800c85a:	4d0d      	ldr	r5, [pc, #52]	; (800c890 <__libc_init_array+0x38>)
 800c85c:	4c0d      	ldr	r4, [pc, #52]	; (800c894 <__libc_init_array+0x3c>)
 800c85e:	1b64      	subs	r4, r4, r5
 800c860:	10a4      	asrs	r4, r4, #2
 800c862:	2600      	movs	r6, #0
 800c864:	42a6      	cmp	r6, r4
 800c866:	d109      	bne.n	800c87c <__libc_init_array+0x24>
 800c868:	4d0b      	ldr	r5, [pc, #44]	; (800c898 <__libc_init_array+0x40>)
 800c86a:	4c0c      	ldr	r4, [pc, #48]	; (800c89c <__libc_init_array+0x44>)
 800c86c:	f000 f818 	bl	800c8a0 <_init>
 800c870:	1b64      	subs	r4, r4, r5
 800c872:	10a4      	asrs	r4, r4, #2
 800c874:	2600      	movs	r6, #0
 800c876:	42a6      	cmp	r6, r4
 800c878:	d105      	bne.n	800c886 <__libc_init_array+0x2e>
 800c87a:	bd70      	pop	{r4, r5, r6, pc}
 800c87c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c880:	4798      	blx	r3
 800c882:	3601      	adds	r6, #1
 800c884:	e7ee      	b.n	800c864 <__libc_init_array+0xc>
 800c886:	f855 3b04 	ldr.w	r3, [r5], #4
 800c88a:	4798      	blx	r3
 800c88c:	3601      	adds	r6, #1
 800c88e:	e7f2      	b.n	800c876 <__libc_init_array+0x1e>
 800c890:	0800c8f8 	.word	0x0800c8f8
 800c894:	0800c8f8 	.word	0x0800c8f8
 800c898:	0800c8f8 	.word	0x0800c8f8
 800c89c:	0800c8fc 	.word	0x0800c8fc

0800c8a0 <_init>:
 800c8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8a2:	bf00      	nop
 800c8a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8a6:	bc08      	pop	{r3}
 800c8a8:	469e      	mov	lr, r3
 800c8aa:	4770      	bx	lr

0800c8ac <_fini>:
 800c8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ae:	bf00      	nop
 800c8b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8b2:	bc08      	pop	{r3}
 800c8b4:	469e      	mov	lr, r3
 800c8b6:	4770      	bx	lr
