
racecar_h750vb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c35c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800c5f4  0800c5f4  0001c5f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c62c  0800c62c  0001c62c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c634  0800c634  0001c634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c638  0800c638  0001c638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800c63c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000af4  24000010  0800c64c  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000b04  0800c64c  00020b04  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002750f  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003de5  00000000  00000000  00047590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002090  00000000  00000000  0004b378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000198e  00000000  00000000  0004d408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003ce74  00000000  00000000  0004ed96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000284ed  00000000  00000000  0008bc0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00187e14  00000000  00000000  000b40f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00009020  00000000  00000000  0023bf0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006d  00000000  00000000  00244f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800c5dc 	.word	0x0800c5dc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800c5dc 	.word	0x0800c5dc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f001 fe40 	bl	800225c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005dc:	f000 f822 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e0:	f000 fddc 	bl	800119c <MX_GPIO_Init>
  MX_ADC1_Init();
 80005e4:	f000 f898 	bl	8000718 <MX_ADC1_Init>
  MX_QUADSPI_Init();
 80005e8:	f000 fa34 	bl	8000a54 <MX_QUADSPI_Init>
  MX_SDMMC1_SD_Init();
 80005ec:	f000 fa5e 	bl	8000aac <MX_SDMMC1_SD_Init>
  MX_SPI4_Init();
 80005f0:	f000 fad6 	bl	8000ba0 <MX_SPI4_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f4:	f000 fda0 	bl	8001138 <MX_USB_OTG_FS_PCD_Init>
  MX_LPUART1_UART_Init();
 80005f8:	f000 f946 	bl	8000888 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 80005fc:	f000 fb26 	bl	8000c4c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000600:	f000 fb78 	bl	8000cf4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000604:	f000 fc0e 	bl	8000e24 <MX_TIM3_Init>
  MX_I2C1_Init();
 8000608:	f000 f8fe 	bl	8000808 <MX_I2C1_Init>
  MX_UART4_Init();
 800060c:	f000 f98a 	bl	8000924 <MX_UART4_Init>
  MX_UART7_Init();
 8000610:	f000 f9d4 	bl	80009bc <MX_UART7_Init>
  MX_SPI1_Init();
 8000614:	f000 fa6e 	bl	8000af4 <MX_SPI1_Init>
  MX_TIM5_Init();
 8000618:	f000 fc6a 	bl	8000ef0 <MX_TIM5_Init>
  MX_TIM15_Init();
 800061c:	f000 fcea 	bl	8000ff4 <MX_TIM15_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000620:	e7fe      	b.n	8000620 <main+0x4c>
	...

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b09c      	sub	sp, #112	; 0x70
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800062e:	224c      	movs	r2, #76	; 0x4c
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f00b ffa6 	bl	800c584 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2220      	movs	r2, #32
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f00b ffa0 	bl	800c584 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000644:	2002      	movs	r0, #2
 8000646:	f003 fc9b 	bl	8003f80 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800064a:	2300      	movs	r3, #0
 800064c:	603b      	str	r3, [r7, #0]
 800064e:	4b30      	ldr	r3, [pc, #192]	; (8000710 <SystemClock_Config+0xec>)
 8000650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000652:	4a2f      	ldr	r2, [pc, #188]	; (8000710 <SystemClock_Config+0xec>)
 8000654:	f023 0301 	bic.w	r3, r3, #1
 8000658:	62d3      	str	r3, [r2, #44]	; 0x2c
 800065a:	4b2d      	ldr	r3, [pc, #180]	; (8000710 <SystemClock_Config+0xec>)
 800065c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	4b2b      	ldr	r3, [pc, #172]	; (8000714 <SystemClock_Config+0xf0>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	4a2a      	ldr	r2, [pc, #168]	; (8000714 <SystemClock_Config+0xf0>)
 800066a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800066e:	6193      	str	r3, [r2, #24]
 8000670:	4b28      	ldr	r3, [pc, #160]	; (8000714 <SystemClock_Config+0xf0>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000678:	603b      	str	r3, [r7, #0]
 800067a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800067c:	bf00      	nop
 800067e:	4b25      	ldr	r3, [pc, #148]	; (8000714 <SystemClock_Config+0xf0>)
 8000680:	699b      	ldr	r3, [r3, #24]
 8000682:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800068a:	d1f8      	bne.n	800067e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800068c:	2301      	movs	r3, #1
 800068e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000690:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000694:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000696:	2302      	movs	r3, #2
 8000698:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069a:	2302      	movs	r3, #2
 800069c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800069e:	2305      	movs	r3, #5
 80006a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 80006a2:	23a0      	movs	r3, #160	; 0xa0
 80006a4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006a6:	2302      	movs	r3, #2
 80006a8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 20;
 80006aa:	2314      	movs	r3, #20
 80006ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80006b2:	2308      	movs	r3, #8
 80006b4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006b6:	2300      	movs	r3, #0
 80006b8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006c2:	4618      	mov	r0, r3
 80006c4:	f003 fd60 	bl	8004188 <HAL_RCC_OscConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006ce:	f000 fe81 	bl	80013d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d2:	233f      	movs	r3, #63	; 0x3f
 80006d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d6:	2303      	movs	r3, #3
 80006d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80006de:	2308      	movs	r3, #8
 80006e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006e2:	2340      	movs	r3, #64	; 0x40
 80006e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006e6:	2340      	movs	r3, #64	; 0x40
 80006e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ee:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006f0:	2340      	movs	r3, #64	; 0x40
 80006f2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2102      	movs	r1, #2
 80006f8:	4618      	mov	r0, r3
 80006fa:	f004 f99f 	bl	8004a3c <HAL_RCC_ClockConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000704:	f000 fe66 	bl	80013d4 <Error_Handler>
  }
}
 8000708:	bf00      	nop
 800070a:	3770      	adds	r7, #112	; 0x70
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	58000400 	.word	0x58000400
 8000714:	58024800 	.word	0x58024800

08000718 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	; 0x28
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800072a:	463b      	mov	r3, r7
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]
 8000738:	615a      	str	r2, [r3, #20]
 800073a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800073c:	4b2f      	ldr	r3, [pc, #188]	; (80007fc <MX_ADC1_Init+0xe4>)
 800073e:	4a30      	ldr	r2, [pc, #192]	; (8000800 <MX_ADC1_Init+0xe8>)
 8000740:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000742:	4b2e      	ldr	r3, [pc, #184]	; (80007fc <MX_ADC1_Init+0xe4>)
 8000744:	2200      	movs	r2, #0
 8000746:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000748:	4b2c      	ldr	r3, [pc, #176]	; (80007fc <MX_ADC1_Init+0xe4>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800074e:	4b2b      	ldr	r3, [pc, #172]	; (80007fc <MX_ADC1_Init+0xe4>)
 8000750:	2200      	movs	r2, #0
 8000752:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000754:	4b29      	ldr	r3, [pc, #164]	; (80007fc <MX_ADC1_Init+0xe4>)
 8000756:	2204      	movs	r2, #4
 8000758:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800075a:	4b28      	ldr	r3, [pc, #160]	; (80007fc <MX_ADC1_Init+0xe4>)
 800075c:	2200      	movs	r2, #0
 800075e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000760:	4b26      	ldr	r3, [pc, #152]	; (80007fc <MX_ADC1_Init+0xe4>)
 8000762:	2200      	movs	r2, #0
 8000764:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000766:	4b25      	ldr	r3, [pc, #148]	; (80007fc <MX_ADC1_Init+0xe4>)
 8000768:	2201      	movs	r2, #1
 800076a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800076c:	4b23      	ldr	r3, [pc, #140]	; (80007fc <MX_ADC1_Init+0xe4>)
 800076e:	2200      	movs	r2, #0
 8000770:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000772:	4b22      	ldr	r3, [pc, #136]	; (80007fc <MX_ADC1_Init+0xe4>)
 8000774:	2200      	movs	r2, #0
 8000776:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000778:	4b20      	ldr	r3, [pc, #128]	; (80007fc <MX_ADC1_Init+0xe4>)
 800077a:	2200      	movs	r2, #0
 800077c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800077e:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <MX_ADC1_Init+0xe4>)
 8000780:	2200      	movs	r2, #0
 8000782:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000784:	4b1d      	ldr	r3, [pc, #116]	; (80007fc <MX_ADC1_Init+0xe4>)
 8000786:	2200      	movs	r2, #0
 8000788:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800078a:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <MX_ADC1_Init+0xe4>)
 800078c:	2200      	movs	r2, #0
 800078e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000790:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <MX_ADC1_Init+0xe4>)
 8000792:	2200      	movs	r2, #0
 8000794:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000798:	4818      	ldr	r0, [pc, #96]	; (80007fc <MX_ADC1_Init+0xe4>)
 800079a:	f001 ffd1 	bl	8002740 <HAL_ADC_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007a4:	f000 fe16 	bl	80013d4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007ac:	f107 031c 	add.w	r3, r7, #28
 80007b0:	4619      	mov	r1, r3
 80007b2:	4812      	ldr	r0, [pc, #72]	; (80007fc <MX_ADC1_Init+0xe4>)
 80007b4:	f002 fde8 	bl	8003388 <HAL_ADCEx_MultiModeConfigChannel>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80007be:	f000 fe09 	bl	80013d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <MX_ADC1_Init+0xec>)
 80007c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007c6:	2306      	movs	r3, #6
 80007c8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007ce:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80007d2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007d4:	2304      	movs	r3, #4
 80007d6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80007dc:	2300      	movs	r3, #0
 80007de:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e0:	463b      	mov	r3, r7
 80007e2:	4619      	mov	r1, r3
 80007e4:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_ADC1_Init+0xe4>)
 80007e6:	f002 f94d 	bl	8002a84 <HAL_ADC_ConfigChannel>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80007f0:	f000 fdf0 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	3728      	adds	r7, #40	; 0x28
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	2400002c 	.word	0x2400002c
 8000800:	40022000 	.word	0x40022000
 8000804:	0c900008 	.word	0x0c900008

08000808 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800080c:	4b1b      	ldr	r3, [pc, #108]	; (800087c <MX_I2C1_Init+0x74>)
 800080e:	4a1c      	ldr	r2, [pc, #112]	; (8000880 <MX_I2C1_Init+0x78>)
 8000810:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0ECFF;
 8000812:	4b1a      	ldr	r3, [pc, #104]	; (800087c <MX_I2C1_Init+0x74>)
 8000814:	4a1b      	ldr	r2, [pc, #108]	; (8000884 <MX_I2C1_Init+0x7c>)
 8000816:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000818:	4b18      	ldr	r3, [pc, #96]	; (800087c <MX_I2C1_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800081e:	4b17      	ldr	r3, [pc, #92]	; (800087c <MX_I2C1_Init+0x74>)
 8000820:	2201      	movs	r2, #1
 8000822:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000824:	4b15      	ldr	r3, [pc, #84]	; (800087c <MX_I2C1_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800082a:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_I2C1_Init+0x74>)
 800082c:	2200      	movs	r2, #0
 800082e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <MX_I2C1_Init+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_I2C1_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_I2C1_Init+0x74>)
 800083e:	2200      	movs	r2, #0
 8000840:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000842:	480e      	ldr	r0, [pc, #56]	; (800087c <MX_I2C1_Init+0x74>)
 8000844:	f003 f92c 	bl	8003aa0 <HAL_I2C_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800084e:	f000 fdc1 	bl	80013d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000852:	2100      	movs	r1, #0
 8000854:	4809      	ldr	r0, [pc, #36]	; (800087c <MX_I2C1_Init+0x74>)
 8000856:	f003 f9b3 	bl	8003bc0 <HAL_I2CEx_ConfigAnalogFilter>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000860:	f000 fdb8 	bl	80013d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000864:	2100      	movs	r1, #0
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_I2C1_Init+0x74>)
 8000868:	f003 f9f5 	bl	8003c56 <HAL_I2CEx_ConfigDigitalFilter>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000872:	f000 fdaf 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	24000090 	.word	0x24000090
 8000880:	40005400 	.word	0x40005400
 8000884:	10c0ecff 	.word	0x10c0ecff

08000888 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800088c:	4b22      	ldr	r3, [pc, #136]	; (8000918 <MX_LPUART1_UART_Init+0x90>)
 800088e:	4a23      	ldr	r2, [pc, #140]	; (800091c <MX_LPUART1_UART_Init+0x94>)
 8000890:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000892:	4b21      	ldr	r3, [pc, #132]	; (8000918 <MX_LPUART1_UART_Init+0x90>)
 8000894:	4a22      	ldr	r2, [pc, #136]	; (8000920 <MX_LPUART1_UART_Init+0x98>)
 8000896:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000898:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <MX_LPUART1_UART_Init+0x90>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800089e:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <MX_LPUART1_UART_Init+0x90>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008a4:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <MX_LPUART1_UART_Init+0x90>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008aa:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <MX_LPUART1_UART_Init+0x90>)
 80008ac:	220c      	movs	r2, #12
 80008ae:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b0:	4b19      	ldr	r3, [pc, #100]	; (8000918 <MX_LPUART1_UART_Init+0x90>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b6:	4b18      	ldr	r3, [pc, #96]	; (8000918 <MX_LPUART1_UART_Init+0x90>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008bc:	4b16      	ldr	r3, [pc, #88]	; (8000918 <MX_LPUART1_UART_Init+0x90>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c2:	4b15      	ldr	r3, [pc, #84]	; (8000918 <MX_LPUART1_UART_Init+0x90>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80008c8:	4b13      	ldr	r3, [pc, #76]	; (8000918 <MX_LPUART1_UART_Init+0x90>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008ce:	4812      	ldr	r0, [pc, #72]	; (8000918 <MX_LPUART1_UART_Init+0x90>)
 80008d0:	f009 fd8a 	bl	800a3e8 <HAL_UART_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 80008da:	f000 fd7b 	bl	80013d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008de:	2100      	movs	r1, #0
 80008e0:	480d      	ldr	r0, [pc, #52]	; (8000918 <MX_LPUART1_UART_Init+0x90>)
 80008e2:	f00a fd8c 	bl	800b3fe <HAL_UARTEx_SetTxFifoThreshold>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 80008ec:	f000 fd72 	bl	80013d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f0:	2100      	movs	r1, #0
 80008f2:	4809      	ldr	r0, [pc, #36]	; (8000918 <MX_LPUART1_UART_Init+0x90>)
 80008f4:	f00a fdc1 	bl	800b47a <HAL_UARTEx_SetRxFifoThreshold>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 80008fe:	f000 fd69 	bl	80013d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_LPUART1_UART_Init+0x90>)
 8000904:	f00a fd42 	bl	800b38c <HAL_UARTEx_DisableFifoMode>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 800090e:	f000 fd61 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	240000e4 	.word	0x240000e4
 800091c:	58000c00 	.word	0x58000c00
 8000920:	00033324 	.word	0x00033324

08000924 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000928:	4b22      	ldr	r3, [pc, #136]	; (80009b4 <MX_UART4_Init+0x90>)
 800092a:	4a23      	ldr	r2, [pc, #140]	; (80009b8 <MX_UART4_Init+0x94>)
 800092c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800092e:	4b21      	ldr	r3, [pc, #132]	; (80009b4 <MX_UART4_Init+0x90>)
 8000930:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000934:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000936:	4b1f      	ldr	r3, [pc, #124]	; (80009b4 <MX_UART4_Init+0x90>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800093c:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <MX_UART4_Init+0x90>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000942:	4b1c      	ldr	r3, [pc, #112]	; (80009b4 <MX_UART4_Init+0x90>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000948:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <MX_UART4_Init+0x90>)
 800094a:	220c      	movs	r2, #12
 800094c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094e:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <MX_UART4_Init+0x90>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000954:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <MX_UART4_Init+0x90>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800095a:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <MX_UART4_Init+0x90>)
 800095c:	2200      	movs	r2, #0
 800095e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000960:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_UART4_Init+0x90>)
 8000962:	2200      	movs	r2, #0
 8000964:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000966:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <MX_UART4_Init+0x90>)
 8000968:	2200      	movs	r2, #0
 800096a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800096c:	4811      	ldr	r0, [pc, #68]	; (80009b4 <MX_UART4_Init+0x90>)
 800096e:	f009 fd3b 	bl	800a3e8 <HAL_UART_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000978:	f000 fd2c 	bl	80013d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800097c:	2100      	movs	r1, #0
 800097e:	480d      	ldr	r0, [pc, #52]	; (80009b4 <MX_UART4_Init+0x90>)
 8000980:	f00a fd3d 	bl	800b3fe <HAL_UARTEx_SetTxFifoThreshold>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800098a:	f000 fd23 	bl	80013d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800098e:	2100      	movs	r1, #0
 8000990:	4808      	ldr	r0, [pc, #32]	; (80009b4 <MX_UART4_Init+0x90>)
 8000992:	f00a fd72 	bl	800b47a <HAL_UARTEx_SetRxFifoThreshold>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800099c:	f000 fd1a 	bl	80013d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80009a0:	4804      	ldr	r0, [pc, #16]	; (80009b4 <MX_UART4_Init+0x90>)
 80009a2:	f00a fcf3 	bl	800b38c <HAL_UARTEx_DisableFifoMode>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80009ac:	f000 fd12 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	24000178 	.word	0x24000178
 80009b8:	40004c00 	.word	0x40004c00

080009bc <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80009c0:	4b22      	ldr	r3, [pc, #136]	; (8000a4c <MX_UART7_Init+0x90>)
 80009c2:	4a23      	ldr	r2, [pc, #140]	; (8000a50 <MX_UART7_Init+0x94>)
 80009c4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80009c6:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <MX_UART7_Init+0x90>)
 80009c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009cc:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80009ce:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <MX_UART7_Init+0x90>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80009d4:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <MX_UART7_Init+0x90>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80009da:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <MX_UART7_Init+0x90>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80009e0:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <MX_UART7_Init+0x90>)
 80009e2:	220c      	movs	r2, #12
 80009e4:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e6:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <MX_UART7_Init+0x90>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ec:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <MX_UART7_Init+0x90>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009f2:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <MX_UART7_Init+0x90>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <MX_UART7_Init+0x90>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009fe:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <MX_UART7_Init+0x90>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000a04:	4811      	ldr	r0, [pc, #68]	; (8000a4c <MX_UART7_Init+0x90>)
 8000a06:	f009 fcef 	bl	800a3e8 <HAL_UART_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8000a10:	f000 fce0 	bl	80013d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a14:	2100      	movs	r1, #0
 8000a16:	480d      	ldr	r0, [pc, #52]	; (8000a4c <MX_UART7_Init+0x90>)
 8000a18:	f00a fcf1 	bl	800b3fe <HAL_UARTEx_SetTxFifoThreshold>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8000a22:	f000 fcd7 	bl	80013d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a26:	2100      	movs	r1, #0
 8000a28:	4808      	ldr	r0, [pc, #32]	; (8000a4c <MX_UART7_Init+0x90>)
 8000a2a:	f00a fd26 	bl	800b47a <HAL_UARTEx_SetRxFifoThreshold>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000a34:	f000 fcce 	bl	80013d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <MX_UART7_Init+0x90>)
 8000a3a:	f00a fca7 	bl	800b38c <HAL_UARTEx_DisableFifoMode>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000a44:	f000 fcc6 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	2400020c 	.word	0x2400020c
 8000a50:	40007800 	.word	0x40007800

08000a54 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <MX_QUADSPI_Init+0x50>)
 8000a5a:	4a13      	ldr	r2, [pc, #76]	; (8000aa8 <MX_QUADSPI_Init+0x54>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <MX_QUADSPI_Init+0x50>)
 8000a60:	22ff      	movs	r2, #255	; 0xff
 8000a62:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <MX_QUADSPI_Init+0x50>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <MX_QUADSPI_Init+0x50>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <MX_QUADSPI_Init+0x50>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000a76:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <MX_QUADSPI_Init+0x50>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000a7c:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <MX_QUADSPI_Init+0x50>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000a82:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <MX_QUADSPI_Init+0x50>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <MX_QUADSPI_Init+0x50>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000a8e:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <MX_QUADSPI_Init+0x50>)
 8000a90:	f003 fac0 	bl	8004014 <HAL_QSPI_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000a9a:	f000 fc9b 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	240002a0 	.word	0x240002a0
 8000aa8:	52005000 	.word	0x52005000

08000aac <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <MX_SDMMC1_SD_Init+0x40>)
 8000ab2:	4a0f      	ldr	r2, [pc, #60]	; (8000af0 <MX_SDMMC1_SD_Init+0x44>)
 8000ab4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <MX_SDMMC1_SD_Init+0x40>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000abc:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <MX_SDMMC1_SD_Init+0x40>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <MX_SDMMC1_SD_Init+0x40>)
 8000ac4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ac8:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <MX_SDMMC1_SD_Init+0x40>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <MX_SDMMC1_SD_Init+0x40>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_SDMMC1_SD_Init+0x40>)
 8000ad8:	f007 f83a 	bl	8007b50 <HAL_SD_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8000ae2:	f000 fc77 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	240002ec 	.word	0x240002ec
 8000af0:	52007000 	.word	0x52007000

08000af4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000af8:	4b27      	ldr	r3, [pc, #156]	; (8000b98 <MX_SPI1_Init+0xa4>)
 8000afa:	4a28      	ldr	r2, [pc, #160]	; (8000b9c <MX_SPI1_Init+0xa8>)
 8000afc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000afe:	4b26      	ldr	r3, [pc, #152]	; (8000b98 <MX_SPI1_Init+0xa4>)
 8000b00:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000b04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b06:	4b24      	ldr	r3, [pc, #144]	; (8000b98 <MX_SPI1_Init+0xa4>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b0c:	4b22      	ldr	r3, [pc, #136]	; (8000b98 <MX_SPI1_Init+0xa4>)
 8000b0e:	2203      	movs	r2, #3
 8000b10:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b12:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <MX_SPI1_Init+0xa4>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b18:	4b1f      	ldr	r3, [pc, #124]	; (8000b98 <MX_SPI1_Init+0xa4>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b1e:	4b1e      	ldr	r3, [pc, #120]	; (8000b98 <MX_SPI1_Init+0xa4>)
 8000b20:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000b24:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b26:	4b1c      	ldr	r3, [pc, #112]	; (8000b98 <MX_SPI1_Init+0xa4>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b2c:	4b1a      	ldr	r3, [pc, #104]	; (8000b98 <MX_SPI1_Init+0xa4>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b32:	4b19      	ldr	r3, [pc, #100]	; (8000b98 <MX_SPI1_Init+0xa4>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b38:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <MX_SPI1_Init+0xa4>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000b3e:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <MX_SPI1_Init+0xa4>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b44:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <MX_SPI1_Init+0xa4>)
 8000b46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b4a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <MX_SPI1_Init+0xa4>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <MX_SPI1_Init+0xa4>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <MX_SPI1_Init+0xa4>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <MX_SPI1_Init+0xa4>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <MX_SPI1_Init+0xa4>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <MX_SPI1_Init+0xa4>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <MX_SPI1_Init+0xa4>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <MX_SPI1_Init+0xa4>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <MX_SPI1_Init+0xa4>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b82:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MX_SPI1_Init+0xa4>)
 8000b84:	f008 f852 	bl	8008c2c <HAL_SPI_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000b8e:	f000 fc21 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	24000368 	.word	0x24000368
 8000b9c:	40013000 	.word	0x40013000

08000ba0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000ba4:	4b27      	ldr	r3, [pc, #156]	; (8000c44 <MX_SPI4_Init+0xa4>)
 8000ba6:	4a28      	ldr	r2, [pc, #160]	; (8000c48 <MX_SPI4_Init+0xa8>)
 8000ba8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000baa:	4b26      	ldr	r3, [pc, #152]	; (8000c44 <MX_SPI4_Init+0xa4>)
 8000bac:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000bb0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000bb2:	4b24      	ldr	r3, [pc, #144]	; (8000c44 <MX_SPI4_Init+0xa4>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000bb8:	4b22      	ldr	r3, [pc, #136]	; (8000c44 <MX_SPI4_Init+0xa4>)
 8000bba:	2203      	movs	r2, #3
 8000bbc:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bbe:	4b21      	ldr	r3, [pc, #132]	; (8000c44 <MX_SPI4_Init+0xa4>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bc4:	4b1f      	ldr	r3, [pc, #124]	; (8000c44 <MX_SPI4_Init+0xa4>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000bca:	4b1e      	ldr	r3, [pc, #120]	; (8000c44 <MX_SPI4_Init+0xa4>)
 8000bcc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000bd0:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bd2:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <MX_SPI4_Init+0xa4>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bd8:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <MX_SPI4_Init+0xa4>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bde:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <MX_SPI4_Init+0xa4>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000be4:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <MX_SPI4_Init+0xa4>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000bea:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <MX_SPI4_Init+0xa4>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bf0:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <MX_SPI4_Init+0xa4>)
 8000bf2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bf6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <MX_SPI4_Init+0xa4>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <MX_SPI4_Init+0xa4>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c04:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <MX_SPI4_Init+0xa4>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <MX_SPI4_Init+0xa4>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <MX_SPI4_Init+0xa4>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c16:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <MX_SPI4_Init+0xa4>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c1c:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <MX_SPI4_Init+0xa4>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c22:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <MX_SPI4_Init+0xa4>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <MX_SPI4_Init+0xa4>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_SPI4_Init+0xa4>)
 8000c30:	f007 fffc 	bl	8008c2c <HAL_SPI_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000c3a:	f000 fbcb 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	240003f0 	.word	0x240003f0
 8000c48:	40013400 	.word	0x40013400

08000c4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b088      	sub	sp, #32
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c52:	f107 0310 	add.w	r3, r7, #16
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c6a:	4b20      	ldr	r3, [pc, #128]	; (8000cec <MX_TIM1_Init+0xa0>)
 8000c6c:	4a20      	ldr	r2, [pc, #128]	; (8000cf0 <MX_TIM1_Init+0xa4>)
 8000c6e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c70:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <MX_TIM1_Init+0xa0>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c76:	4b1d      	ldr	r3, [pc, #116]	; (8000cec <MX_TIM1_Init+0xa0>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c7c:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <MX_TIM1_Init+0xa0>)
 8000c7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c82:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c84:	4b19      	ldr	r3, [pc, #100]	; (8000cec <MX_TIM1_Init+0xa0>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c8a:	4b18      	ldr	r3, [pc, #96]	; (8000cec <MX_TIM1_Init+0xa0>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c90:	4b16      	ldr	r3, [pc, #88]	; (8000cec <MX_TIM1_Init+0xa0>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c96:	4815      	ldr	r0, [pc, #84]	; (8000cec <MX_TIM1_Init+0xa0>)
 8000c98:	f008 f907 	bl	8008eaa <HAL_TIM_Base_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000ca2:	f000 fb97 	bl	80013d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000caa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cac:	f107 0310 	add.w	r3, r7, #16
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	480e      	ldr	r0, [pc, #56]	; (8000cec <MX_TIM1_Init+0xa0>)
 8000cb4:	f008 fbae 	bl	8009414 <HAL_TIM_ConfigClockSource>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000cbe:	f000 fb89 	bl	80013d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4806      	ldr	r0, [pc, #24]	; (8000cec <MX_TIM1_Init+0xa0>)
 8000cd4:	f009 fafa 	bl	800a2cc <HAL_TIMEx_MasterConfigSynchronization>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000cde:	f000 fb79 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	3720      	adds	r7, #32
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	24000478 	.word	0x24000478
 8000cf0:	40010000 	.word	0x40010000

08000cf4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08e      	sub	sp, #56	; 0x38
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d08:	f107 031c 	add.w	r3, r7, #28
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d14:	463b      	mov	r3, r7
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
 8000d20:	611a      	str	r2, [r3, #16]
 8000d22:	615a      	str	r2, [r3, #20]
 8000d24:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d26:	4b3e      	ldr	r3, [pc, #248]	; (8000e20 <MX_TIM2_Init+0x12c>)
 8000d28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d2c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d2e:	4b3c      	ldr	r3, [pc, #240]	; (8000e20 <MX_TIM2_Init+0x12c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d34:	4b3a      	ldr	r3, [pc, #232]	; (8000e20 <MX_TIM2_Init+0x12c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d3a:	4b39      	ldr	r3, [pc, #228]	; (8000e20 <MX_TIM2_Init+0x12c>)
 8000d3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d40:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d42:	4b37      	ldr	r3, [pc, #220]	; (8000e20 <MX_TIM2_Init+0x12c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d48:	4b35      	ldr	r3, [pc, #212]	; (8000e20 <MX_TIM2_Init+0x12c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d4e:	4834      	ldr	r0, [pc, #208]	; (8000e20 <MX_TIM2_Init+0x12c>)
 8000d50:	f008 f8ab 	bl	8008eaa <HAL_TIM_Base_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000d5a:	f000 fb3b 	bl	80013d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d62:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d68:	4619      	mov	r1, r3
 8000d6a:	482d      	ldr	r0, [pc, #180]	; (8000e20 <MX_TIM2_Init+0x12c>)
 8000d6c:	f008 fb52 	bl	8009414 <HAL_TIM_ConfigClockSource>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000d76:	f000 fb2d 	bl	80013d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d7a:	4829      	ldr	r0, [pc, #164]	; (8000e20 <MX_TIM2_Init+0x12c>)
 8000d7c:	f008 f8ec 	bl	8008f58 <HAL_TIM_PWM_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000d86:	f000 fb25 	bl	80013d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d92:	f107 031c 	add.w	r3, r7, #28
 8000d96:	4619      	mov	r1, r3
 8000d98:	4821      	ldr	r0, [pc, #132]	; (8000e20 <MX_TIM2_Init+0x12c>)
 8000d9a:	f009 fa97 	bl	800a2cc <HAL_TIMEx_MasterConfigSynchronization>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000da4:	f000 fb16 	bl	80013d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000da8:	2360      	movs	r3, #96	; 0x60
 8000daa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000db8:	463b      	mov	r3, r7
 8000dba:	2200      	movs	r2, #0
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4818      	ldr	r0, [pc, #96]	; (8000e20 <MX_TIM2_Init+0x12c>)
 8000dc0:	f008 fa14 	bl	80091ec <HAL_TIM_PWM_ConfigChannel>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000dca:	f000 fb03 	bl	80013d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000dce:	463b      	mov	r3, r7
 8000dd0:	2204      	movs	r2, #4
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4812      	ldr	r0, [pc, #72]	; (8000e20 <MX_TIM2_Init+0x12c>)
 8000dd6:	f008 fa09 	bl	80091ec <HAL_TIM_PWM_ConfigChannel>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000de0:	f000 faf8 	bl	80013d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000de4:	463b      	mov	r3, r7
 8000de6:	2208      	movs	r2, #8
 8000de8:	4619      	mov	r1, r3
 8000dea:	480d      	ldr	r0, [pc, #52]	; (8000e20 <MX_TIM2_Init+0x12c>)
 8000dec:	f008 f9fe 	bl	80091ec <HAL_TIM_PWM_ConfigChannel>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000df6:	f000 faed 	bl	80013d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	220c      	movs	r2, #12
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4807      	ldr	r0, [pc, #28]	; (8000e20 <MX_TIM2_Init+0x12c>)
 8000e02:	f008 f9f3 	bl	80091ec <HAL_TIM_PWM_ConfigChannel>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8000e0c:	f000 fae2 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e10:	4803      	ldr	r0, [pc, #12]	; (8000e20 <MX_TIM2_Init+0x12c>)
 8000e12:	f001 f879 	bl	8001f08 <HAL_TIM_MspPostInit>

}
 8000e16:	bf00      	nop
 8000e18:	3738      	adds	r7, #56	; 0x38
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	240004c4 	.word	0x240004c4

08000e24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	; 0x28
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e2a:	f107 031c 	add.w	r3, r7, #28
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e36:	463b      	mov	r3, r7
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
 8000e44:	615a      	str	r2, [r3, #20]
 8000e46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e48:	4b27      	ldr	r3, [pc, #156]	; (8000ee8 <MX_TIM3_Init+0xc4>)
 8000e4a:	4a28      	ldr	r2, [pc, #160]	; (8000eec <MX_TIM3_Init+0xc8>)
 8000e4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e4e:	4b26      	ldr	r3, [pc, #152]	; (8000ee8 <MX_TIM3_Init+0xc4>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e54:	4b24      	ldr	r3, [pc, #144]	; (8000ee8 <MX_TIM3_Init+0xc4>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e5a:	4b23      	ldr	r3, [pc, #140]	; (8000ee8 <MX_TIM3_Init+0xc4>)
 8000e5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e60:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e62:	4b21      	ldr	r3, [pc, #132]	; (8000ee8 <MX_TIM3_Init+0xc4>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e68:	4b1f      	ldr	r3, [pc, #124]	; (8000ee8 <MX_TIM3_Init+0xc4>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e6e:	481e      	ldr	r0, [pc, #120]	; (8000ee8 <MX_TIM3_Init+0xc4>)
 8000e70:	f008 f872 	bl	8008f58 <HAL_TIM_PWM_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000e7a:	f000 faab 	bl	80013d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e86:	f107 031c 	add.w	r3, r7, #28
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4816      	ldr	r0, [pc, #88]	; (8000ee8 <MX_TIM3_Init+0xc4>)
 8000e8e:	f009 fa1d 	bl	800a2cc <HAL_TIMEx_MasterConfigSynchronization>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000e98:	f000 fa9c 	bl	80013d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e9c:	2360      	movs	r3, #96	; 0x60
 8000e9e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eac:	463b      	mov	r3, r7
 8000eae:	2200      	movs	r2, #0
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	480d      	ldr	r0, [pc, #52]	; (8000ee8 <MX_TIM3_Init+0xc4>)
 8000eb4:	f008 f99a 	bl	80091ec <HAL_TIM_PWM_ConfigChannel>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000ebe:	f000 fa89 	bl	80013d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	2204      	movs	r2, #4
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4807      	ldr	r0, [pc, #28]	; (8000ee8 <MX_TIM3_Init+0xc4>)
 8000eca:	f008 f98f 	bl	80091ec <HAL_TIM_PWM_ConfigChannel>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000ed4:	f000 fa7e 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ed8:	4803      	ldr	r0, [pc, #12]	; (8000ee8 <MX_TIM3_Init+0xc4>)
 8000eda:	f001 f815 	bl	8001f08 <HAL_TIM_MspPostInit>

}
 8000ede:	bf00      	nop
 8000ee0:	3728      	adds	r7, #40	; 0x28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	24000510 	.word	0x24000510
 8000eec:	40000400 	.word	0x40000400

08000ef0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08c      	sub	sp, #48	; 0x30
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ef6:	f107 031c 	add.w	r3, r7, #28
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
 8000f04:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f06:	f107 030c 	add.w	r3, r7, #12
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f14:	463b      	mov	r3, r7
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f1e:	4b33      	ldr	r3, [pc, #204]	; (8000fec <MX_TIM5_Init+0xfc>)
 8000f20:	4a33      	ldr	r2, [pc, #204]	; (8000ff0 <MX_TIM5_Init+0x100>)
 8000f22:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000f24:	4b31      	ldr	r3, [pc, #196]	; (8000fec <MX_TIM5_Init+0xfc>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f2a:	4b30      	ldr	r3, [pc, #192]	; (8000fec <MX_TIM5_Init+0xfc>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000f30:	4b2e      	ldr	r3, [pc, #184]	; (8000fec <MX_TIM5_Init+0xfc>)
 8000f32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f36:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f38:	4b2c      	ldr	r3, [pc, #176]	; (8000fec <MX_TIM5_Init+0xfc>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f3e:	4b2b      	ldr	r3, [pc, #172]	; (8000fec <MX_TIM5_Init+0xfc>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8000f44:	4829      	ldr	r0, [pc, #164]	; (8000fec <MX_TIM5_Init+0xfc>)
 8000f46:	f008 f85e 	bl	8009006 <HAL_TIM_IC_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8000f50:	f000 fa40 	bl	80013d4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000f54:	2304      	movs	r3, #4
 8000f56:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000f58:	2350      	movs	r3, #80	; 0x50
 8000f5a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000f60:	2300      	movs	r3, #0
 8000f62:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000f68:	f107 031c 	add.w	r3, r7, #28
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	481f      	ldr	r0, [pc, #124]	; (8000fec <MX_TIM5_Init+0xfc>)
 8000f70:	f008 fb48 	bl	8009604 <HAL_TIM_SlaveConfigSynchro>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8000f7a:	f000 fa2b 	bl	80013d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f82:	2301      	movs	r3, #1
 8000f84:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f8e:	f107 030c 	add.w	r3, r7, #12
 8000f92:	2200      	movs	r2, #0
 8000f94:	4619      	mov	r1, r3
 8000f96:	4815      	ldr	r0, [pc, #84]	; (8000fec <MX_TIM5_Init+0xfc>)
 8000f98:	f008 f88c 	bl	80090b4 <HAL_TIM_IC_ConfigChannel>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM5_Init+0xb6>
  {
    Error_Handler();
 8000fa2:	f000 fa17 	bl	80013d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000faa:	2302      	movs	r3, #2
 8000fac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000fae:	f107 030c 	add.w	r3, r7, #12
 8000fb2:	2204      	movs	r2, #4
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	480d      	ldr	r0, [pc, #52]	; (8000fec <MX_TIM5_Init+0xfc>)
 8000fb8:	f008 f87c 	bl	80090b4 <HAL_TIM_IC_ConfigChannel>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8000fc2:	f000 fa07 	bl	80013d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000fce:	463b      	mov	r3, r7
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4806      	ldr	r0, [pc, #24]	; (8000fec <MX_TIM5_Init+0xfc>)
 8000fd4:	f009 f97a 	bl	800a2cc <HAL_TIMEx_MasterConfigSynchronization>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_TIM5_Init+0xf2>
  {
    Error_Handler();
 8000fde:	f000 f9f9 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000fe2:	bf00      	nop
 8000fe4:	3730      	adds	r7, #48	; 0x30
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	2400055c 	.word	0x2400055c
 8000ff0:	40000c00 	.word	0x40000c00

08000ff4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b090      	sub	sp, #64	; 0x40
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ffa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001008:	f107 031c 	add.w	r3, r7, #28
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001026:	463b      	mov	r3, r7
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001030:	4b3f      	ldr	r3, [pc, #252]	; (8001130 <MX_TIM15_Init+0x13c>)
 8001032:	4a40      	ldr	r2, [pc, #256]	; (8001134 <MX_TIM15_Init+0x140>)
 8001034:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001036:	4b3e      	ldr	r3, [pc, #248]	; (8001130 <MX_TIM15_Init+0x13c>)
 8001038:	2200      	movs	r2, #0
 800103a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800103c:	4b3c      	ldr	r3, [pc, #240]	; (8001130 <MX_TIM15_Init+0x13c>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001042:	4b3b      	ldr	r3, [pc, #236]	; (8001130 <MX_TIM15_Init+0x13c>)
 8001044:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001048:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104a:	4b39      	ldr	r3, [pc, #228]	; (8001130 <MX_TIM15_Init+0x13c>)
 800104c:	2200      	movs	r2, #0
 800104e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001050:	4b37      	ldr	r3, [pc, #220]	; (8001130 <MX_TIM15_Init+0x13c>)
 8001052:	2200      	movs	r2, #0
 8001054:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001056:	4b36      	ldr	r3, [pc, #216]	; (8001130 <MX_TIM15_Init+0x13c>)
 8001058:	2200      	movs	r2, #0
 800105a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800105c:	4834      	ldr	r0, [pc, #208]	; (8001130 <MX_TIM15_Init+0x13c>)
 800105e:	f007 ff24 	bl	8008eaa <HAL_TIM_Base_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8001068:	f000 f9b4 	bl	80013d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800106c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001070:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001072:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001076:	4619      	mov	r1, r3
 8001078:	482d      	ldr	r0, [pc, #180]	; (8001130 <MX_TIM15_Init+0x13c>)
 800107a:	f008 f9cb 	bl	8009414 <HAL_TIM_ConfigClockSource>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001084:	f000 f9a6 	bl	80013d4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8001088:	4829      	ldr	r0, [pc, #164]	; (8001130 <MX_TIM15_Init+0x13c>)
 800108a:	f007 ffbc 	bl	8009006 <HAL_TIM_IC_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM15_Init+0xa4>
  {
    Error_Handler();
 8001094:	f000 f99e 	bl	80013d4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001098:	2304      	movs	r3, #4
 800109a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800109c:	2350      	movs	r3, #80	; 0x50
 800109e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010a0:	2300      	movs	r3, #0
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 80010ac:	f107 031c 	add.w	r3, r7, #28
 80010b0:	4619      	mov	r1, r3
 80010b2:	481f      	ldr	r0, [pc, #124]	; (8001130 <MX_TIM15_Init+0x13c>)
 80010b4:	f008 faa6 	bl	8009604 <HAL_TIM_SlaveConfigSynchro>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 80010be:	f000 f989 	bl	80013d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010c6:	2301      	movs	r3, #1
 80010c8:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80010d2:	f107 030c 	add.w	r3, r7, #12
 80010d6:	2200      	movs	r2, #0
 80010d8:	4619      	mov	r1, r3
 80010da:	4815      	ldr	r0, [pc, #84]	; (8001130 <MX_TIM15_Init+0x13c>)
 80010dc:	f007 ffea 	bl	80090b4 <HAL_TIM_IC_ConfigChannel>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 80010e6:	f000 f975 	bl	80013d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80010ea:	2302      	movs	r3, #2
 80010ec:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80010ee:	2302      	movs	r3, #2
 80010f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80010f2:	f107 030c 	add.w	r3, r7, #12
 80010f6:	2204      	movs	r2, #4
 80010f8:	4619      	mov	r1, r3
 80010fa:	480d      	ldr	r0, [pc, #52]	; (8001130 <MX_TIM15_Init+0x13c>)
 80010fc:	f007 ffda 	bl	80090b4 <HAL_TIM_IC_ConfigChannel>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM15_Init+0x116>
  {
    Error_Handler();
 8001106:	f000 f965 	bl	80013d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110a:	2300      	movs	r3, #0
 800110c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800110e:	2300      	movs	r3, #0
 8001110:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001112:	463b      	mov	r3, r7
 8001114:	4619      	mov	r1, r3
 8001116:	4806      	ldr	r0, [pc, #24]	; (8001130 <MX_TIM15_Init+0x13c>)
 8001118:	f009 f8d8 	bl	800a2cc <HAL_TIMEx_MasterConfigSynchronization>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8001122:	f000 f957 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	3740      	adds	r7, #64	; 0x40
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	240005a8 	.word	0x240005a8
 8001134:	40014000 	.word	0x40014000

08001138 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800113c:	4b15      	ldr	r3, [pc, #84]	; (8001194 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800113e:	4a16      	ldr	r2, [pc, #88]	; (8001198 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001140:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001142:	4b14      	ldr	r3, [pc, #80]	; (8001194 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001144:	2209      	movs	r2, #9
 8001146:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800114a:	2202      	movs	r2, #2
 800114c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800114e:	4b11      	ldr	r3, [pc, #68]	; (8001194 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001150:	2200      	movs	r2, #0
 8001152:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001156:	2202      	movs	r2, #2
 8001158:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800115c:	2200      	movs	r2, #0
 800115e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001162:	2200      	movs	r2, #0
 8001164:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001168:	2200      	movs	r2, #0
 800116a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800116c:	4b09      	ldr	r3, [pc, #36]	; (8001194 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800116e:	2200      	movs	r2, #0
 8001170:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001172:	4b08      	ldr	r3, [pc, #32]	; (8001194 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001174:	2200      	movs	r2, #0
 8001176:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800117a:	2200      	movs	r2, #0
 800117c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800117e:	4805      	ldr	r0, [pc, #20]	; (8001194 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001180:	f002 fdb5 	bl	8003cee <HAL_PCD_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800118a:	f000 f923 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	240005f4 	.word	0x240005f4
 8001198:	40080000 	.word	0x40080000

0800119c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08c      	sub	sp, #48	; 0x30
 80011a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a2:	f107 031c 	add.w	r3, r7, #28
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
 80011b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011b2:	4b82      	ldr	r3, [pc, #520]	; (80013bc <MX_GPIO_Init+0x220>)
 80011b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b8:	4a80      	ldr	r2, [pc, #512]	; (80013bc <MX_GPIO_Init+0x220>)
 80011ba:	f043 0310 	orr.w	r3, r3, #16
 80011be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011c2:	4b7e      	ldr	r3, [pc, #504]	; (80013bc <MX_GPIO_Init+0x220>)
 80011c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c8:	f003 0310 	and.w	r3, r3, #16
 80011cc:	61bb      	str	r3, [r7, #24]
 80011ce:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d0:	4b7a      	ldr	r3, [pc, #488]	; (80013bc <MX_GPIO_Init+0x220>)
 80011d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d6:	4a79      	ldr	r2, [pc, #484]	; (80013bc <MX_GPIO_Init+0x220>)
 80011d8:	f043 0304 	orr.w	r3, r3, #4
 80011dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011e0:	4b76      	ldr	r3, [pc, #472]	; (80013bc <MX_GPIO_Init+0x220>)
 80011e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e6:	f003 0304 	and.w	r3, r3, #4
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ee:	4b73      	ldr	r3, [pc, #460]	; (80013bc <MX_GPIO_Init+0x220>)
 80011f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f4:	4a71      	ldr	r2, [pc, #452]	; (80013bc <MX_GPIO_Init+0x220>)
 80011f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011fe:	4b6f      	ldr	r3, [pc, #444]	; (80013bc <MX_GPIO_Init+0x220>)
 8001200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800120c:	4b6b      	ldr	r3, [pc, #428]	; (80013bc <MX_GPIO_Init+0x220>)
 800120e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001212:	4a6a      	ldr	r2, [pc, #424]	; (80013bc <MX_GPIO_Init+0x220>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800121c:	4b67      	ldr	r3, [pc, #412]	; (80013bc <MX_GPIO_Init+0x220>)
 800121e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800122a:	4b64      	ldr	r3, [pc, #400]	; (80013bc <MX_GPIO_Init+0x220>)
 800122c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001230:	4a62      	ldr	r2, [pc, #392]	; (80013bc <MX_GPIO_Init+0x220>)
 8001232:	f043 0302 	orr.w	r3, r3, #2
 8001236:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800123a:	4b60      	ldr	r3, [pc, #384]	; (80013bc <MX_GPIO_Init+0x220>)
 800123c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001248:	4b5c      	ldr	r3, [pc, #368]	; (80013bc <MX_GPIO_Init+0x220>)
 800124a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800124e:	4a5b      	ldr	r2, [pc, #364]	; (80013bc <MX_GPIO_Init+0x220>)
 8001250:	f043 0308 	orr.w	r3, r3, #8
 8001254:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001258:	4b58      	ldr	r3, [pc, #352]	; (80013bc <MX_GPIO_Init+0x220>)
 800125a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800125e:	f003 0308 	and.w	r3, r3, #8
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ONBOARD_LED_Pin|LCD_LED_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8001266:	2200      	movs	r2, #0
 8001268:	f640 4108 	movw	r1, #3080	; 0xc08
 800126c:	4854      	ldr	r0, [pc, #336]	; (80013c0 <MX_GPIO_Init+0x224>)
 800126e:	f002 fbfd 	bl	8003a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, PCA9685_OE_Pin|LED_BLUE_Pin|LED_RED_Pin|LED_YELLOW_Pin
 8001272:	2200      	movs	r2, #0
 8001274:	f44f 618f 	mov.w	r1, #1144	; 0x478
 8001278:	4852      	ldr	r0, [pc, #328]	; (80013c4 <MX_GPIO_Init+0x228>)
 800127a:	f002 fbf7 	bl	8003a6c <HAL_GPIO_WritePin>
                          |SPI1_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Manual_Output_GPIO_Port, Manual_Output_Pin, GPIO_PIN_RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	2120      	movs	r1, #32
 8001282:	4851      	ldr	r0, [pc, #324]	; (80013c8 <MX_GPIO_Init+0x22c>)
 8001284:	f002 fbf2 	bl	8003a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ONBOARD_LED_Pin LCD_LED_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = ONBOARD_LED_Pin|LCD_LED_Pin|LCD_CS_Pin;
 8001288:	f640 4308 	movw	r3, #3080	; 0xc08
 800128c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128e:	2301      	movs	r3, #1
 8001290:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001296:	2300      	movs	r3, #0
 8001298:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800129a:	f107 031c 	add.w	r3, r7, #28
 800129e:	4619      	mov	r1, r3
 80012a0:	4847      	ldr	r0, [pc, #284]	; (80013c0 <MX_GPIO_Init+0x224>)
 80012a2:	f002 fa33 	bl	800370c <HAL_GPIO_Init>

  /*Configure GPIO pins : S06_Pin S07_Pin S00_Pin S01_Pin */
  GPIO_InitStruct.Pin = S06_Pin|S07_Pin|S00_Pin|S01_Pin;
 80012a6:	23c3      	movs	r3, #195	; 0xc3
 80012a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012b4:	f107 031c 	add.w	r3, r7, #28
 80012b8:	4619      	mov	r1, r3
 80012ba:	4841      	ldr	r0, [pc, #260]	; (80013c0 <MX_GPIO_Init+0x224>)
 80012bc:	f002 fa26 	bl	800370c <HAL_GPIO_Init>

  /*Configure GPIO pin : ONBOARD_KEY1_Pin */
  GPIO_InitStruct.Pin = ONBOARD_KEY1_Pin;
 80012c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c6:	2300      	movs	r3, #0
 80012c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ONBOARD_KEY1_GPIO_Port, &GPIO_InitStruct);
 80012ce:	f107 031c 	add.w	r3, r7, #28
 80012d2:	4619      	mov	r1, r3
 80012d4:	483d      	ldr	r0, [pc, #244]	; (80013cc <MX_GPIO_Init+0x230>)
 80012d6:	f002 fa19 	bl	800370c <HAL_GPIO_Init>

  /*Configure GPIO pins : S02_Pin S03_Pin */
  GPIO_InitStruct.Pin = S02_Pin|S03_Pin;
 80012da:	230c      	movs	r3, #12
 80012dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e8:	f107 031c 	add.w	r3, r7, #28
 80012ec:	4619      	mov	r1, r3
 80012ee:	4837      	ldr	r0, [pc, #220]	; (80013cc <MX_GPIO_Init+0x230>)
 80012f0:	f002 fa0c 	bl	800370c <HAL_GPIO_Init>

  /*Configure GPIO pins : S04_Pin S05_Pin */
  GPIO_InitStruct.Pin = S04_Pin|S05_Pin;
 80012f4:	2330      	movs	r3, #48	; 0x30
 80012f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012f8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	4619      	mov	r1, r3
 8001308:	4831      	ldr	r0, [pc, #196]	; (80013d0 <MX_GPIO_Init+0x234>)
 800130a:	f002 f9ff 	bl	800370c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_SWITCH_Pin */
  GPIO_InitStruct.Pin = LCD_SWITCH_Pin;
 800130e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001312:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001314:	2300      	movs	r3, #0
 8001316:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LCD_SWITCH_GPIO_Port, &GPIO_InitStruct);
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	4619      	mov	r1, r3
 8001322:	4827      	ldr	r0, [pc, #156]	; (80013c0 <MX_GPIO_Init+0x224>)
 8001324:	f002 f9f2 	bl	800370c <HAL_GPIO_Init>

  /*Configure GPIO pins : S10_Pin S11_Pin S12_Pin S13_Pin
                           S14_Pin S15_Pin */
  GPIO_InitStruct.Pin = S10_Pin|S11_Pin|S12_Pin|S13_Pin
 8001328:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800132c:	61fb      	str	r3, [r7, #28]
                          |S14_Pin|S15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800132e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001332:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	4619      	mov	r1, r3
 800133e:	4822      	ldr	r0, [pc, #136]	; (80013c8 <MX_GPIO_Init+0x22c>)
 8001340:	f002 f9e4 	bl	800370c <HAL_GPIO_Init>

  /*Configure GPIO pins : S08_Pin S09_Pin */
  GPIO_InitStruct.Pin = S08_Pin|S09_Pin;
 8001344:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001348:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800134a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800134e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	4619      	mov	r1, r3
 800135a:	481a      	ldr	r0, [pc, #104]	; (80013c4 <MX_GPIO_Init+0x228>)
 800135c:	f002 f9d6 	bl	800370c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCA9685_OE_Pin LED_BLUE_Pin LED_RED_Pin LED_YELLOW_Pin
                           SPI1_CS_Pin */
  GPIO_InitStruct.Pin = PCA9685_OE_Pin|LED_BLUE_Pin|LED_RED_Pin|LED_YELLOW_Pin
 8001360:	f44f 638f 	mov.w	r3, #1144	; 0x478
 8001364:	61fb      	str	r3, [r7, #28]
                          |SPI1_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001366:	2301      	movs	r3, #1
 8001368:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2300      	movs	r3, #0
 8001370:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001372:	f107 031c 	add.w	r3, r7, #28
 8001376:	4619      	mov	r1, r3
 8001378:	4812      	ldr	r0, [pc, #72]	; (80013c4 <MX_GPIO_Init+0x228>)
 800137a:	f002 f9c7 	bl	800370c <HAL_GPIO_Init>

  /*Configure GPIO pin : Manual_Output_Pin */
  GPIO_InitStruct.Pin = Manual_Output_Pin;
 800137e:	2320      	movs	r3, #32
 8001380:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001382:	2301      	movs	r3, #1
 8001384:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Manual_Output_GPIO_Port, &GPIO_InitStruct);
 800138e:	f107 031c 	add.w	r3, r7, #28
 8001392:	4619      	mov	r1, r3
 8001394:	480c      	ldr	r0, [pc, #48]	; (80013c8 <MX_GPIO_Init+0x22c>)
 8001396:	f002 f9b9 	bl	800370c <HAL_GPIO_Init>

  /*Configure GPIO pin : Manual_Input_Pin */
  GPIO_InitStruct.Pin = Manual_Input_Pin;
 800139a:	2380      	movs	r3, #128	; 0x80
 800139c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139e:	2300      	movs	r3, #0
 80013a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Manual_Input_GPIO_Port, &GPIO_InitStruct);
 80013a6:	f107 031c 	add.w	r3, r7, #28
 80013aa:	4619      	mov	r1, r3
 80013ac:	4806      	ldr	r0, [pc, #24]	; (80013c8 <MX_GPIO_Init+0x22c>)
 80013ae:	f002 f9ad 	bl	800370c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013b2:	bf00      	nop
 80013b4:	3730      	adds	r7, #48	; 0x30
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	58024400 	.word	0x58024400
 80013c0:	58021000 	.word	0x58021000
 80013c4:	58020c00 	.word	0x58020c00
 80013c8:	58020400 	.word	0x58020400
 80013cc:	58020800 	.word	0x58020800
 80013d0:	58020000 	.word	0x58020000

080013d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d8:	b672      	cpsid	i
}
 80013da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013dc:	e7fe      	b.n	80013dc <Error_Handler+0x8>
	...

080013e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e6:	4b13      	ldr	r3, [pc, #76]	; (8001434 <HAL_MspInit+0x54>)
 80013e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013ec:	4a11      	ldr	r2, [pc, #68]	; (8001434 <HAL_MspInit+0x54>)
 80013ee:	f043 0302 	orr.w	r3, r3, #2
 80013f2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013f6:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <HAL_MspInit+0x54>)
 80013f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8001404:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <HAL_MspInit+0x54>)
 8001406:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800140a:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <HAL_MspInit+0x54>)
 800140c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001410:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001414:	4b07      	ldr	r3, [pc, #28]	; (8001434 <HAL_MspInit+0x54>)
 8001416:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800141a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800141e:	603b      	str	r3, [r7, #0]
 8001420:	683b      	ldr	r3, [r7, #0]

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8001422:	f000 fff1 	bl	8002408 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8001426:	2002      	movs	r0, #2
 8001428:	f000 ffda 	bl	80023e0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	58024400 	.word	0x58024400

08001438 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b0bc      	sub	sp, #240	; 0xf0
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001450:	f107 0318 	add.w	r3, r7, #24
 8001454:	22c0      	movs	r2, #192	; 0xc0
 8001456:	2100      	movs	r1, #0
 8001458:	4618      	mov	r0, r3
 800145a:	f00b f893 	bl	800c584 <memset>
  if(hadc->Instance==ADC1)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a4a      	ldr	r2, [pc, #296]	; (800158c <HAL_ADC_MspInit+0x154>)
 8001464:	4293      	cmp	r3, r2
 8001466:	f040 808c 	bne.w	8001582 <HAL_ADC_MspInit+0x14a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800146a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800146e:	f04f 0300 	mov.w	r3, #0
 8001472:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 10;
 8001476:	230a      	movs	r3, #10
 8001478:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 60;
 800147a:	233c      	movs	r3, #60	; 0x3c
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800147e:	2302      	movs	r3, #2
 8001480:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001482:	2302      	movs	r3, #2
 8001484:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001486:	2302      	movs	r3, #2
 8001488:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 800148a:	2340      	movs	r3, #64	; 0x40
 800148c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800148e:	2320      	movs	r3, #32
 8001490:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001496:	2300      	movs	r3, #0
 8001498:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800149c:	f107 0318 	add.w	r3, r7, #24
 80014a0:	4618      	mov	r0, r3
 80014a2:	f003 fe57 	bl	8005154 <HAL_RCCEx_PeriphCLKConfig>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 80014ac:	f7ff ff92 	bl	80013d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80014b0:	4b37      	ldr	r3, [pc, #220]	; (8001590 <HAL_ADC_MspInit+0x158>)
 80014b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014b6:	4a36      	ldr	r2, [pc, #216]	; (8001590 <HAL_ADC_MspInit+0x158>)
 80014b8:	f043 0320 	orr.w	r3, r3, #32
 80014bc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80014c0:	4b33      	ldr	r3, [pc, #204]	; (8001590 <HAL_ADC_MspInit+0x158>)
 80014c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014c6:	f003 0320 	and.w	r3, r3, #32
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ce:	4b30      	ldr	r3, [pc, #192]	; (8001590 <HAL_ADC_MspInit+0x158>)
 80014d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d4:	4a2e      	ldr	r2, [pc, #184]	; (8001590 <HAL_ADC_MspInit+0x158>)
 80014d6:	f043 0304 	orr.w	r3, r3, #4
 80014da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014de:	4b2c      	ldr	r3, [pc, #176]	; (8001590 <HAL_ADC_MspInit+0x158>)
 80014e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	613b      	str	r3, [r7, #16]
 80014ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ec:	4b28      	ldr	r3, [pc, #160]	; (8001590 <HAL_ADC_MspInit+0x158>)
 80014ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f2:	4a27      	ldr	r2, [pc, #156]	; (8001590 <HAL_ADC_MspInit+0x158>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014fc:	4b24      	ldr	r3, [pc, #144]	; (8001590 <HAL_ADC_MspInit+0x158>)
 80014fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150a:	4b21      	ldr	r3, [pc, #132]	; (8001590 <HAL_ADC_MspInit+0x158>)
 800150c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001510:	4a1f      	ldr	r2, [pc, #124]	; (8001590 <HAL_ADC_MspInit+0x158>)
 8001512:	f043 0302 	orr.w	r3, r3, #2
 8001516:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800151a:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <HAL_ADC_MspInit+0x158>)
 800151c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = F06_Pin|F07_Pin|F01_Pin|F04_Pin;
 8001528:	2333      	movs	r3, #51	; 0x33
 800152a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800152e:	2303      	movs	r3, #3
 8001530:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800153a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800153e:	4619      	mov	r1, r3
 8001540:	4814      	ldr	r0, [pc, #80]	; (8001594 <HAL_ADC_MspInit+0x15c>)
 8001542:	f002 f8e3 	bl	800370c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = F00_Pin|F03_Pin;
 8001546:	23c0      	movs	r3, #192	; 0xc0
 8001548:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800154c:	2303      	movs	r3, #3
 800154e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001558:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800155c:	4619      	mov	r1, r3
 800155e:	480e      	ldr	r0, [pc, #56]	; (8001598 <HAL_ADC_MspInit+0x160>)
 8001560:	f002 f8d4 	bl	800370c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = F05_Pin|F02_Pin;
 8001564:	2303      	movs	r3, #3
 8001566:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800156a:	2303      	movs	r3, #3
 800156c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001576:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800157a:	4619      	mov	r1, r3
 800157c:	4807      	ldr	r0, [pc, #28]	; (800159c <HAL_ADC_MspInit+0x164>)
 800157e:	f002 f8c5 	bl	800370c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001582:	bf00      	nop
 8001584:	37f0      	adds	r7, #240	; 0xf0
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40022000 	.word	0x40022000
 8001590:	58024400 	.word	0x58024400
 8001594:	58020800 	.word	0x58020800
 8001598:	58020000 	.word	0x58020000
 800159c:	58020400 	.word	0x58020400

080015a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b0ba      	sub	sp, #232	; 0xe8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015b8:	f107 0310 	add.w	r3, r7, #16
 80015bc:	22c0      	movs	r2, #192	; 0xc0
 80015be:	2100      	movs	r1, #0
 80015c0:	4618      	mov	r0, r3
 80015c2:	f00a ffdf 	bl	800c584 <memset>
  if(hi2c->Instance==I2C1)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a27      	ldr	r2, [pc, #156]	; (8001668 <HAL_I2C_MspInit+0xc8>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d146      	bne.n	800165e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015d0:	f04f 0208 	mov.w	r2, #8
 80015d4:	f04f 0300 	mov.w	r3, #0
 80015d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80015dc:	2300      	movs	r3, #0
 80015de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015e2:	f107 0310 	add.w	r3, r7, #16
 80015e6:	4618      	mov	r0, r3
 80015e8:	f003 fdb4 	bl	8005154 <HAL_RCCEx_PeriphCLKConfig>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80015f2:	f7ff feef 	bl	80013d4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f6:	4b1d      	ldr	r3, [pc, #116]	; (800166c <HAL_I2C_MspInit+0xcc>)
 80015f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015fc:	4a1b      	ldr	r2, [pc, #108]	; (800166c <HAL_I2C_MspInit+0xcc>)
 80015fe:	f043 0302 	orr.w	r3, r3, #2
 8001602:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001606:	4b19      	ldr	r3, [pc, #100]	; (800166c <HAL_I2C_MspInit+0xcc>)
 8001608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001614:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001618:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800161c:	2312      	movs	r3, #18
 800161e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001628:	2300      	movs	r3, #0
 800162a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800162e:	2304      	movs	r3, #4
 8001630:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001634:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001638:	4619      	mov	r1, r3
 800163a:	480d      	ldr	r0, [pc, #52]	; (8001670 <HAL_I2C_MspInit+0xd0>)
 800163c:	f002 f866 	bl	800370c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001640:	4b0a      	ldr	r3, [pc, #40]	; (800166c <HAL_I2C_MspInit+0xcc>)
 8001642:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001646:	4a09      	ldr	r2, [pc, #36]	; (800166c <HAL_I2C_MspInit+0xcc>)
 8001648:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800164c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_I2C_MspInit+0xcc>)
 8001652:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001656:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800165e:	bf00      	nop
 8001660:	37e8      	adds	r7, #232	; 0xe8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40005400 	.word	0x40005400
 800166c:	58024400 	.word	0x58024400
 8001670:	58020400 	.word	0x58020400

08001674 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b0c0      	sub	sp, #256	; 0x100
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800168c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001690:	22c0      	movs	r2, #192	; 0xc0
 8001692:	2100      	movs	r1, #0
 8001694:	4618      	mov	r0, r3
 8001696:	f00a ff75 	bl	800c584 <memset>
  if(huart->Instance==LPUART1)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a86      	ldr	r2, [pc, #536]	; (80018b8 <HAL_UART_MspInit+0x244>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d147      	bne.n	8001734 <HAL_UART_MspInit+0xc0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80016a4:	f04f 0204 	mov.w	r2, #4
 80016a8:	f04f 0300 	mov.w	r3, #0
 80016ac:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 80016b0:	2300      	movs	r3, #0
 80016b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ba:	4618      	mov	r0, r3
 80016bc:	f003 fd4a 	bl	8005154 <HAL_RCCEx_PeriphCLKConfig>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80016c6:	f7ff fe85 	bl	80013d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80016ca:	4b7c      	ldr	r3, [pc, #496]	; (80018bc <HAL_UART_MspInit+0x248>)
 80016cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016d0:	4a7a      	ldr	r2, [pc, #488]	; (80018bc <HAL_UART_MspInit+0x248>)
 80016d2:	f043 0308 	orr.w	r3, r3, #8
 80016d6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80016da:	4b78      	ldr	r3, [pc, #480]	; (80018bc <HAL_UART_MspInit+0x248>)
 80016dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016e0:	f003 0308 	and.w	r3, r3, #8
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
 80016e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e8:	4b74      	ldr	r3, [pc, #464]	; (80018bc <HAL_UART_MspInit+0x248>)
 80016ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ee:	4a73      	ldr	r2, [pc, #460]	; (80018bc <HAL_UART_MspInit+0x248>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016f8:	4b70      	ldr	r3, [pc, #448]	; (80018bc <HAL_UART_MspInit+0x248>)
 80016fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	623b      	str	r3, [r7, #32]
 8001704:	6a3b      	ldr	r3, [r7, #32]
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001706:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800170a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170e:	2302      	movs	r3, #2
 8001710:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171a:	2300      	movs	r3, #0
 800171c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 8001720:	2303      	movs	r3, #3
 8001722:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001726:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800172a:	4619      	mov	r1, r3
 800172c:	4864      	ldr	r0, [pc, #400]	; (80018c0 <HAL_UART_MspInit+0x24c>)
 800172e:	f001 ffed 	bl	800370c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8001732:	e0bc      	b.n	80018ae <HAL_UART_MspInit+0x23a>
  else if(huart->Instance==UART4)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a62      	ldr	r2, [pc, #392]	; (80018c4 <HAL_UART_MspInit+0x250>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d146      	bne.n	80017cc <HAL_UART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800173e:	f04f 0202 	mov.w	r2, #2
 8001742:	f04f 0300 	mov.w	r3, #0
 8001746:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800174a:	2300      	movs	r3, #0
 800174c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001750:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001754:	4618      	mov	r0, r3
 8001756:	f003 fcfd 	bl	8005154 <HAL_RCCEx_PeriphCLKConfig>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8001760:	f7ff fe38 	bl	80013d4 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8001764:	4b55      	ldr	r3, [pc, #340]	; (80018bc <HAL_UART_MspInit+0x248>)
 8001766:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800176a:	4a54      	ldr	r2, [pc, #336]	; (80018bc <HAL_UART_MspInit+0x248>)
 800176c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001770:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001774:	4b51      	ldr	r3, [pc, #324]	; (80018bc <HAL_UART_MspInit+0x248>)
 8001776:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800177a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800177e:	61fb      	str	r3, [r7, #28]
 8001780:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001782:	4b4e      	ldr	r3, [pc, #312]	; (80018bc <HAL_UART_MspInit+0x248>)
 8001784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001788:	4a4c      	ldr	r2, [pc, #304]	; (80018bc <HAL_UART_MspInit+0x248>)
 800178a:	f043 0308 	orr.w	r3, r3, #8
 800178e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001792:	4b4a      	ldr	r3, [pc, #296]	; (80018bc <HAL_UART_MspInit+0x248>)
 8001794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001798:	f003 0308 	and.w	r3, r3, #8
 800179c:	61bb      	str	r3, [r7, #24]
 800179e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017a0:	2303      	movs	r3, #3
 80017a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	2302      	movs	r3, #2
 80017a8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b2:	2300      	movs	r3, #0
 80017b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80017b8:	2308      	movs	r3, #8
 80017ba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017be:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80017c2:	4619      	mov	r1, r3
 80017c4:	4840      	ldr	r0, [pc, #256]	; (80018c8 <HAL_UART_MspInit+0x254>)
 80017c6:	f001 ffa1 	bl	800370c <HAL_GPIO_Init>
}
 80017ca:	e070      	b.n	80018ae <HAL_UART_MspInit+0x23a>
  else if(huart->Instance==UART7)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a3e      	ldr	r2, [pc, #248]	; (80018cc <HAL_UART_MspInit+0x258>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d16b      	bne.n	80018ae <HAL_UART_MspInit+0x23a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80017d6:	f04f 0202 	mov.w	r2, #2
 80017da:	f04f 0300 	mov.w	r3, #0
 80017de:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017ec:	4618      	mov	r0, r3
 80017ee:	f003 fcb1 	bl	8005154 <HAL_RCCEx_PeriphCLKConfig>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <HAL_UART_MspInit+0x188>
      Error_Handler();
 80017f8:	f7ff fdec 	bl	80013d4 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 80017fc:	4b2f      	ldr	r3, [pc, #188]	; (80018bc <HAL_UART_MspInit+0x248>)
 80017fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001802:	4a2e      	ldr	r2, [pc, #184]	; (80018bc <HAL_UART_MspInit+0x248>)
 8001804:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001808:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800180c:	4b2b      	ldr	r3, [pc, #172]	; (80018bc <HAL_UART_MspInit+0x248>)
 800180e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001812:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001816:	617b      	str	r3, [r7, #20]
 8001818:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800181a:	4b28      	ldr	r3, [pc, #160]	; (80018bc <HAL_UART_MspInit+0x248>)
 800181c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001820:	4a26      	ldr	r2, [pc, #152]	; (80018bc <HAL_UART_MspInit+0x248>)
 8001822:	f043 0310 	orr.w	r3, r3, #16
 8001826:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800182a:	4b24      	ldr	r3, [pc, #144]	; (80018bc <HAL_UART_MspInit+0x248>)
 800182c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001830:	f003 0310 	and.w	r3, r3, #16
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001838:	4b20      	ldr	r3, [pc, #128]	; (80018bc <HAL_UART_MspInit+0x248>)
 800183a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800183e:	4a1f      	ldr	r2, [pc, #124]	; (80018bc <HAL_UART_MspInit+0x248>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001848:	4b1c      	ldr	r3, [pc, #112]	; (80018bc <HAL_UART_MspInit+0x248>)
 800184a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001856:	f44f 7380 	mov.w	r3, #256	; 0x100
 800185a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	2302      	movs	r3, #2
 8001860:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186a:	2300      	movs	r3, #0
 800186c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001870:	2307      	movs	r3, #7
 8001872:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001876:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800187a:	4619      	mov	r1, r3
 800187c:	4814      	ldr	r0, [pc, #80]	; (80018d0 <HAL_UART_MspInit+0x25c>)
 800187e:	f001 ff45 	bl	800370c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001882:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001886:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188a:	2302      	movs	r3, #2
 800188c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001896:	2300      	movs	r3, #0
 8001898:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
 800189c:	230b      	movs	r3, #11
 800189e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80018a6:	4619      	mov	r1, r3
 80018a8:	4805      	ldr	r0, [pc, #20]	; (80018c0 <HAL_UART_MspInit+0x24c>)
 80018aa:	f001 ff2f 	bl	800370c <HAL_GPIO_Init>
}
 80018ae:	bf00      	nop
 80018b0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	58000c00 	.word	0x58000c00
 80018bc:	58024400 	.word	0x58024400
 80018c0:	58020000 	.word	0x58020000
 80018c4:	40004c00 	.word	0x40004c00
 80018c8:	58020c00 	.word	0x58020c00
 80018cc:	40007800 	.word	0x40007800
 80018d0:	58021000 	.word	0x58021000

080018d4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b0bc      	sub	sp, #240	; 0xf0
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018ec:	f107 0318 	add.w	r3, r7, #24
 80018f0:	22c0      	movs	r2, #192	; 0xc0
 80018f2:	2100      	movs	r1, #0
 80018f4:	4618      	mov	r0, r3
 80018f6:	f00a fe45 	bl	800c584 <memset>
  if(hqspi->Instance==QUADSPI)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a55      	ldr	r2, [pc, #340]	; (8001a54 <HAL_QSPI_MspInit+0x180>)
 8001900:	4293      	cmp	r3, r2
 8001902:	f040 80a3 	bne.w	8001a4c <HAL_QSPI_MspInit+0x178>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001906:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800190a:	f04f 0300 	mov.w	r3, #0
 800190e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8001912:	2300      	movs	r3, #0
 8001914:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001916:	f107 0318 	add.w	r3, r7, #24
 800191a:	4618      	mov	r0, r3
 800191c:	f003 fc1a 	bl	8005154 <HAL_RCCEx_PeriphCLKConfig>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8001926:	f7ff fd55 	bl	80013d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800192a:	4b4b      	ldr	r3, [pc, #300]	; (8001a58 <HAL_QSPI_MspInit+0x184>)
 800192c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001930:	4a49      	ldr	r2, [pc, #292]	; (8001a58 <HAL_QSPI_MspInit+0x184>)
 8001932:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001936:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800193a:	4b47      	ldr	r3, [pc, #284]	; (8001a58 <HAL_QSPI_MspInit+0x184>)
 800193c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001940:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001948:	4b43      	ldr	r3, [pc, #268]	; (8001a58 <HAL_QSPI_MspInit+0x184>)
 800194a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800194e:	4a42      	ldr	r2, [pc, #264]	; (8001a58 <HAL_QSPI_MspInit+0x184>)
 8001950:	f043 0310 	orr.w	r3, r3, #16
 8001954:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001958:	4b3f      	ldr	r3, [pc, #252]	; (8001a58 <HAL_QSPI_MspInit+0x184>)
 800195a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800195e:	f003 0310 	and.w	r3, r3, #16
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001966:	4b3c      	ldr	r3, [pc, #240]	; (8001a58 <HAL_QSPI_MspInit+0x184>)
 8001968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800196c:	4a3a      	ldr	r2, [pc, #232]	; (8001a58 <HAL_QSPI_MspInit+0x184>)
 800196e:	f043 0302 	orr.w	r3, r3, #2
 8001972:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001976:	4b38      	ldr	r3, [pc, #224]	; (8001a58 <HAL_QSPI_MspInit+0x184>)
 8001978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001984:	4b34      	ldr	r3, [pc, #208]	; (8001a58 <HAL_QSPI_MspInit+0x184>)
 8001986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800198a:	4a33      	ldr	r2, [pc, #204]	; (8001a58 <HAL_QSPI_MspInit+0x184>)
 800198c:	f043 0308 	orr.w	r3, r3, #8
 8001990:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001994:	4b30      	ldr	r3, [pc, #192]	; (8001a58 <HAL_QSPI_MspInit+0x184>)
 8001996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	68bb      	ldr	r3, [r7, #8]
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019a2:	2304      	movs	r3, #4
 80019a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a8:	2302      	movs	r3, #2
 80019aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b4:	2300      	movs	r3, #0
 80019b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80019ba:	2309      	movs	r3, #9
 80019bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019c0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80019c4:	4619      	mov	r1, r3
 80019c6:	4825      	ldr	r0, [pc, #148]	; (8001a5c <HAL_QSPI_MspInit+0x188>)
 80019c8:	f001 fea0 	bl	800370c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019cc:	2304      	movs	r3, #4
 80019ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019de:	2300      	movs	r3, #0
 80019e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80019e4:	2309      	movs	r3, #9
 80019e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ea:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80019ee:	4619      	mov	r1, r3
 80019f0:	481b      	ldr	r0, [pc, #108]	; (8001a60 <HAL_QSPI_MspInit+0x18c>)
 80019f2:	f001 fe8b 	bl	800370c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80019f6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80019fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fe:	2302      	movs	r3, #2
 8001a00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001a10:	2309      	movs	r3, #9
 8001a12:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a16:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4811      	ldr	r0, [pc, #68]	; (8001a64 <HAL_QSPI_MspInit+0x190>)
 8001a1e:	f001 fe75 	bl	800370c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a22:	2340      	movs	r3, #64	; 0x40
 8001a24:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a34:	2300      	movs	r3, #0
 8001a36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001a3a:	230a      	movs	r3, #10
 8001a3c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a40:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a44:	4619      	mov	r1, r3
 8001a46:	4806      	ldr	r0, [pc, #24]	; (8001a60 <HAL_QSPI_MspInit+0x18c>)
 8001a48:	f001 fe60 	bl	800370c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001a4c:	bf00      	nop
 8001a4e:	37f0      	adds	r7, #240	; 0xf0
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	52005000 	.word	0x52005000
 8001a58:	58024400 	.word	0x58024400
 8001a5c:	58021000 	.word	0x58021000
 8001a60:	58020400 	.word	0x58020400
 8001a64:	58020c00 	.word	0x58020c00

08001a68 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b0bc      	sub	sp, #240	; 0xf0
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a70:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a80:	f107 0318 	add.w	r3, r7, #24
 8001a84:	22c0      	movs	r2, #192	; 0xc0
 8001a86:	2100      	movs	r1, #0
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f00a fd7b 	bl	800c584 <memset>
  if(hsd->Instance==SDMMC1)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a38      	ldr	r2, [pc, #224]	; (8001b74 <HAL_SD_MspInit+0x10c>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d169      	bne.n	8001b6c <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001a98:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a9c:	f04f 0300 	mov.w	r3, #0
 8001aa0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aa8:	f107 0318 	add.w	r3, r7, #24
 8001aac:	4618      	mov	r0, r3
 8001aae:	f003 fb51 	bl	8005154 <HAL_RCCEx_PeriphCLKConfig>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001ab8:	f7ff fc8c 	bl	80013d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001abc:	4b2e      	ldr	r3, [pc, #184]	; (8001b78 <HAL_SD_MspInit+0x110>)
 8001abe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001ac2:	4a2d      	ldr	r2, [pc, #180]	; (8001b78 <HAL_SD_MspInit+0x110>)
 8001ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001acc:	4b2a      	ldr	r3, [pc, #168]	; (8001b78 <HAL_SD_MspInit+0x110>)
 8001ace:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001ad2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad6:	617b      	str	r3, [r7, #20]
 8001ad8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ada:	4b27      	ldr	r3, [pc, #156]	; (8001b78 <HAL_SD_MspInit+0x110>)
 8001adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae0:	4a25      	ldr	r2, [pc, #148]	; (8001b78 <HAL_SD_MspInit+0x110>)
 8001ae2:	f043 0304 	orr.w	r3, r3, #4
 8001ae6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aea:	4b23      	ldr	r3, [pc, #140]	; (8001b78 <HAL_SD_MspInit+0x110>)
 8001aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	613b      	str	r3, [r7, #16]
 8001af6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af8:	4b1f      	ldr	r3, [pc, #124]	; (8001b78 <HAL_SD_MspInit+0x110>)
 8001afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001afe:	4a1e      	ldr	r2, [pc, #120]	; (8001b78 <HAL_SD_MspInit+0x110>)
 8001b00:	f043 0308 	orr.w	r3, r3, #8
 8001b04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b08:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <HAL_SD_MspInit+0x110>)
 8001b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001b16:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001b1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001b30:	230c      	movs	r3, #12
 8001b32:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b36:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	480f      	ldr	r0, [pc, #60]	; (8001b7c <HAL_SD_MspInit+0x114>)
 8001b3e:	f001 fde5 	bl	800370c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b42:	2304      	movs	r3, #4
 8001b44:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b54:	2303      	movs	r3, #3
 8001b56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001b5a:	230c      	movs	r3, #12
 8001b5c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b60:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001b64:	4619      	mov	r1, r3
 8001b66:	4806      	ldr	r0, [pc, #24]	; (8001b80 <HAL_SD_MspInit+0x118>)
 8001b68:	f001 fdd0 	bl	800370c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001b6c:	bf00      	nop
 8001b6e:	37f0      	adds	r7, #240	; 0xf0
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	52007000 	.word	0x52007000
 8001b78:	58024400 	.word	0x58024400
 8001b7c:	58020800 	.word	0x58020800
 8001b80:	58020c00 	.word	0x58020c00

08001b84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b0be      	sub	sp, #248	; 0xf8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b9c:	f107 0320 	add.w	r3, r7, #32
 8001ba0:	22c0      	movs	r2, #192	; 0xc0
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f00a fced 	bl	800c584 <memset>
  if(hspi->Instance==SPI1)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a5f      	ldr	r2, [pc, #380]	; (8001d2c <HAL_SPI_MspInit+0x1a8>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d16a      	bne.n	8001c8a <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001bb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bb8:	f04f 0300 	mov.w	r3, #0
 8001bbc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bc6:	f107 0320 	add.w	r3, r7, #32
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f003 fac2 	bl	8005154 <HAL_RCCEx_PeriphCLKConfig>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001bd6:	f7ff fbfd 	bl	80013d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bda:	4b55      	ldr	r3, [pc, #340]	; (8001d30 <HAL_SPI_MspInit+0x1ac>)
 8001bdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001be0:	4a53      	ldr	r2, [pc, #332]	; (8001d30 <HAL_SPI_MspInit+0x1ac>)
 8001be2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001be6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001bea:	4b51      	ldr	r3, [pc, #324]	; (8001d30 <HAL_SPI_MspInit+0x1ac>)
 8001bec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bf4:	61fb      	str	r3, [r7, #28]
 8001bf6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bf8:	4b4d      	ldr	r3, [pc, #308]	; (8001d30 <HAL_SPI_MspInit+0x1ac>)
 8001bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bfe:	4a4c      	ldr	r2, [pc, #304]	; (8001d30 <HAL_SPI_MspInit+0x1ac>)
 8001c00:	f043 0308 	orr.w	r3, r3, #8
 8001c04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c08:	4b49      	ldr	r3, [pc, #292]	; (8001d30 <HAL_SPI_MspInit+0x1ac>)
 8001c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	61bb      	str	r3, [r7, #24]
 8001c14:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c16:	4b46      	ldr	r3, [pc, #280]	; (8001d30 <HAL_SPI_MspInit+0x1ac>)
 8001c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c1c:	4a44      	ldr	r2, [pc, #272]	; (8001d30 <HAL_SPI_MspInit+0x1ac>)
 8001c1e:	f043 0302 	orr.w	r3, r3, #2
 8001c22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c26:	4b42      	ldr	r3, [pc, #264]	; (8001d30 <HAL_SPI_MspInit+0x1ac>)
 8001c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c34:	2380      	movs	r3, #128	; 0x80
 8001c36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c46:	2300      	movs	r3, #0
 8001c48:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c4c:	2305      	movs	r3, #5
 8001c4e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c52:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c56:	4619      	mov	r1, r3
 8001c58:	4836      	ldr	r0, [pc, #216]	; (8001d34 <HAL_SPI_MspInit+0x1b0>)
 8001c5a:	f001 fd57 	bl	800370c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001c5e:	2318      	movs	r3, #24
 8001c60:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c64:	2302      	movs	r3, #2
 8001c66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c70:	2300      	movs	r3, #0
 8001c72:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c76:	2305      	movs	r3, #5
 8001c78:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c80:	4619      	mov	r1, r3
 8001c82:	482d      	ldr	r0, [pc, #180]	; (8001d38 <HAL_SPI_MspInit+0x1b4>)
 8001c84:	f001 fd42 	bl	800370c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001c88:	e04b      	b.n	8001d22 <HAL_SPI_MspInit+0x19e>
  else if(hspi->Instance==SPI4)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a2b      	ldr	r2, [pc, #172]	; (8001d3c <HAL_SPI_MspInit+0x1b8>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d146      	bne.n	8001d22 <HAL_SPI_MspInit+0x19e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001c94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c98:	f04f 0300 	mov.w	r3, #0
 8001c9c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ca6:	f107 0320 	add.w	r3, r7, #32
 8001caa:	4618      	mov	r0, r3
 8001cac:	f003 fa52 	bl	8005154 <HAL_RCCEx_PeriphCLKConfig>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <HAL_SPI_MspInit+0x136>
      Error_Handler();
 8001cb6:	f7ff fb8d 	bl	80013d4 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001cba:	4b1d      	ldr	r3, [pc, #116]	; (8001d30 <HAL_SPI_MspInit+0x1ac>)
 8001cbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cc0:	4a1b      	ldr	r2, [pc, #108]	; (8001d30 <HAL_SPI_MspInit+0x1ac>)
 8001cc2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cc6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001cca:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <HAL_SPI_MspInit+0x1ac>)
 8001ccc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cd4:	613b      	str	r3, [r7, #16]
 8001cd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cd8:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <HAL_SPI_MspInit+0x1ac>)
 8001cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cde:	4a14      	ldr	r2, [pc, #80]	; (8001d30 <HAL_SPI_MspInit+0x1ac>)
 8001ce0:	f043 0310 	orr.w	r3, r3, #16
 8001ce4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ce8:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <HAL_SPI_MspInit+0x1ac>)
 8001cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cee:	f003 0310 	and.w	r3, r3, #16
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_WR_RS_Pin|LCD_SDA_Pin;
 8001cf6:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001cfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001d10:	2305      	movs	r3, #5
 8001d12:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d16:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4808      	ldr	r0, [pc, #32]	; (8001d40 <HAL_SPI_MspInit+0x1bc>)
 8001d1e:	f001 fcf5 	bl	800370c <HAL_GPIO_Init>
}
 8001d22:	bf00      	nop
 8001d24:	37f8      	adds	r7, #248	; 0xf8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40013000 	.word	0x40013000
 8001d30:	58024400 	.word	0x58024400
 8001d34:	58020c00 	.word	0x58020c00
 8001d38:	58020400 	.word	0x58020400
 8001d3c:	40013400 	.word	0x40013400
 8001d40:	58021000 	.word	0x58021000

08001d44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08c      	sub	sp, #48	; 0x30
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 031c 	add.w	r3, r7, #28
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a2f      	ldr	r2, [pc, #188]	; (8001e20 <HAL_TIM_Base_MspInit+0xdc>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d10f      	bne.n	8001d86 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d66:	4b2f      	ldr	r3, [pc, #188]	; (8001e24 <HAL_TIM_Base_MspInit+0xe0>)
 8001d68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d6c:	4a2d      	ldr	r2, [pc, #180]	; (8001e24 <HAL_TIM_Base_MspInit+0xe0>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001d76:	4b2b      	ldr	r3, [pc, #172]	; (8001e24 <HAL_TIM_Base_MspInit+0xe0>)
 8001d78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	61bb      	str	r3, [r7, #24]
 8001d82:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001d84:	e047      	b.n	8001e16 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM2)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d8e:	d10f      	bne.n	8001db0 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d90:	4b24      	ldr	r3, [pc, #144]	; (8001e24 <HAL_TIM_Base_MspInit+0xe0>)
 8001d92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d96:	4a23      	ldr	r2, [pc, #140]	; (8001e24 <HAL_TIM_Base_MspInit+0xe0>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001da0:	4b20      	ldr	r3, [pc, #128]	; (8001e24 <HAL_TIM_Base_MspInit+0xe0>)
 8001da2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	697b      	ldr	r3, [r7, #20]
}
 8001dae:	e032      	b.n	8001e16 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM15)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a1c      	ldr	r2, [pc, #112]	; (8001e28 <HAL_TIM_Base_MspInit+0xe4>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d12d      	bne.n	8001e16 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001dba:	4b1a      	ldr	r3, [pc, #104]	; (8001e24 <HAL_TIM_Base_MspInit+0xe0>)
 8001dbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dc0:	4a18      	ldr	r2, [pc, #96]	; (8001e24 <HAL_TIM_Base_MspInit+0xe0>)
 8001dc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001dca:	4b16      	ldr	r3, [pc, #88]	; (8001e24 <HAL_TIM_Base_MspInit+0xe0>)
 8001dcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd4:	613b      	str	r3, [r7, #16]
 8001dd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dd8:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <HAL_TIM_Base_MspInit+0xe0>)
 8001dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dde:	4a11      	ldr	r2, [pc, #68]	; (8001e24 <HAL_TIM_Base_MspInit+0xe0>)
 8001de0:	f043 0310 	orr.w	r3, r3, #16
 8001de4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001de8:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <HAL_TIM_Base_MspInit+0xe0>)
 8001dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dee:	f003 0310 	and.w	r3, r3, #16
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ESC_Input_Pin;
 8001df6:	2320      	movs	r3, #32
 8001df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e02:	2300      	movs	r3, #0
 8001e04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8001e06:	2304      	movs	r3, #4
 8001e08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ESC_Input_GPIO_Port, &GPIO_InitStruct);
 8001e0a:	f107 031c 	add.w	r3, r7, #28
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4806      	ldr	r0, [pc, #24]	; (8001e2c <HAL_TIM_Base_MspInit+0xe8>)
 8001e12:	f001 fc7b 	bl	800370c <HAL_GPIO_Init>
}
 8001e16:	bf00      	nop
 8001e18:	3730      	adds	r7, #48	; 0x30
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40010000 	.word	0x40010000
 8001e24:	58024400 	.word	0x58024400
 8001e28:	40014000 	.word	0x40014000
 8001e2c:	58021000 	.word	0x58021000

08001e30 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a0b      	ldr	r2, [pc, #44]	; (8001e6c <HAL_TIM_PWM_MspInit+0x3c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d10e      	bne.n	8001e60 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e42:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <HAL_TIM_PWM_MspInit+0x40>)
 8001e44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e48:	4a09      	ldr	r2, [pc, #36]	; (8001e70 <HAL_TIM_PWM_MspInit+0x40>)
 8001e4a:	f043 0302 	orr.w	r3, r3, #2
 8001e4e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e52:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <HAL_TIM_PWM_MspInit+0x40>)
 8001e54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e60:	bf00      	nop
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	40000400 	.word	0x40000400
 8001e70:	58024400 	.word	0x58024400

08001e74 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08a      	sub	sp, #40	; 0x28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	f107 0314 	add.w	r3, r7, #20
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM5)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a1a      	ldr	r2, [pc, #104]	; (8001efc <HAL_TIM_IC_MspInit+0x88>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d12d      	bne.n	8001ef2 <HAL_TIM_IC_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e96:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <HAL_TIM_IC_MspInit+0x8c>)
 8001e98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e9c:	4a18      	ldr	r2, [pc, #96]	; (8001f00 <HAL_TIM_IC_MspInit+0x8c>)
 8001e9e:	f043 0308 	orr.w	r3, r3, #8
 8001ea2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ea6:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <HAL_TIM_IC_MspInit+0x8c>)
 8001ea8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001eac:	f003 0308 	and.w	r3, r3, #8
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb4:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <HAL_TIM_IC_MspInit+0x8c>)
 8001eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eba:	4a11      	ldr	r2, [pc, #68]	; (8001f00 <HAL_TIM_IC_MspInit+0x8c>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ec4:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <HAL_TIM_IC_MspInit+0x8c>)
 8001ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = Servo_Input_Pin;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Servo_Input_GPIO_Port, &GPIO_InitStruct);
 8001ee6:	f107 0314 	add.w	r3, r7, #20
 8001eea:	4619      	mov	r1, r3
 8001eec:	4805      	ldr	r0, [pc, #20]	; (8001f04 <HAL_TIM_IC_MspInit+0x90>)
 8001eee:	f001 fc0d 	bl	800370c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001ef2:	bf00      	nop
 8001ef4:	3728      	adds	r7, #40	; 0x28
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40000c00 	.word	0x40000c00
 8001f00:	58024400 	.word	0x58024400
 8001f04:	58020000 	.word	0x58020000

08001f08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08a      	sub	sp, #40	; 0x28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 0314 	add.w	r3, r7, #20
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f28:	d120      	bne.n	8001f6c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2a:	4b24      	ldr	r3, [pc, #144]	; (8001fbc <HAL_TIM_MspPostInit+0xb4>)
 8001f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f30:	4a22      	ldr	r2, [pc, #136]	; (8001fbc <HAL_TIM_MspPostInit+0xb4>)
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f3a:	4b20      	ldr	r3, [pc, #128]	; (8001fbc <HAL_TIM_MspPostInit+0xb4>)
 8001f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	613b      	str	r3, [r7, #16]
 8001f46:	693b      	ldr	r3, [r7, #16]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin|PWM3_Pin|PWM0_Pin;
 8001f48:	f248 030e 	movw	r3, #32782	; 0x800e
 8001f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f56:	2300      	movs	r3, #0
 8001f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5e:	f107 0314 	add.w	r3, r7, #20
 8001f62:	4619      	mov	r1, r3
 8001f64:	4816      	ldr	r0, [pc, #88]	; (8001fc0 <HAL_TIM_MspPostInit+0xb8>)
 8001f66:	f001 fbd1 	bl	800370c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f6a:	e023      	b.n	8001fb4 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM3)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a14      	ldr	r2, [pc, #80]	; (8001fc4 <HAL_TIM_MspPostInit+0xbc>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d11e      	bne.n	8001fb4 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f76:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <HAL_TIM_MspPostInit+0xb4>)
 8001f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f7c:	4a0f      	ldr	r2, [pc, #60]	; (8001fbc <HAL_TIM_MspPostInit+0xb4>)
 8001f7e:	f043 0304 	orr.w	r3, r3, #4
 8001f82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f86:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <HAL_TIM_MspPostInit+0xb4>)
 8001f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo_Output_Pin|ESC_Output_Pin;
 8001f94:	23c0      	movs	r3, #192	; 0xc0
 8001f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fa8:	f107 0314 	add.w	r3, r7, #20
 8001fac:	4619      	mov	r1, r3
 8001fae:	4806      	ldr	r0, [pc, #24]	; (8001fc8 <HAL_TIM_MspPostInit+0xc0>)
 8001fb0:	f001 fbac 	bl	800370c <HAL_GPIO_Init>
}
 8001fb4:	bf00      	nop
 8001fb6:	3728      	adds	r7, #40	; 0x28
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	58024400 	.word	0x58024400
 8001fc0:	58020000 	.word	0x58020000
 8001fc4:	40000400 	.word	0x40000400
 8001fc8:	58020800 	.word	0x58020800

08001fcc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b0ba      	sub	sp, #232	; 0xe8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fe4:	f107 0310 	add.w	r3, r7, #16
 8001fe8:	22c0      	movs	r2, #192	; 0xc0
 8001fea:	2100      	movs	r1, #0
 8001fec:	4618      	mov	r0, r3
 8001fee:	f00a fac9 	bl	800c584 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a28      	ldr	r2, [pc, #160]	; (8002098 <HAL_PCD_MspInit+0xcc>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d149      	bne.n	8002090 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001ffc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002000:	f04f 0300 	mov.w	r3, #0
 8002004:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002008:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800200c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002010:	f107 0310 	add.w	r3, r7, #16
 8002014:	4618      	mov	r0, r3
 8002016:	f003 f89d 	bl	8005154 <HAL_RCCEx_PeriphCLKConfig>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8002020:	f7ff f9d8 	bl	80013d4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002024:	f001 ffe6 	bl	8003ff4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002028:	4b1c      	ldr	r3, [pc, #112]	; (800209c <HAL_PCD_MspInit+0xd0>)
 800202a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800202e:	4a1b      	ldr	r2, [pc, #108]	; (800209c <HAL_PCD_MspInit+0xd0>)
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002038:	4b18      	ldr	r3, [pc, #96]	; (800209c <HAL_PCD_MspInit+0xd0>)
 800203a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002046:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800204a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204e:	2302      	movs	r3, #2
 8002050:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205a:	2300      	movs	r3, #0
 800205c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002060:	230a      	movs	r3, #10
 8002062:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002066:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800206a:	4619      	mov	r1, r3
 800206c:	480c      	ldr	r0, [pc, #48]	; (80020a0 <HAL_PCD_MspInit+0xd4>)
 800206e:	f001 fb4d 	bl	800370c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002072:	4b0a      	ldr	r3, [pc, #40]	; (800209c <HAL_PCD_MspInit+0xd0>)
 8002074:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002078:	4a08      	ldr	r2, [pc, #32]	; (800209c <HAL_PCD_MspInit+0xd0>)
 800207a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800207e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002082:	4b06      	ldr	r3, [pc, #24]	; (800209c <HAL_PCD_MspInit+0xd0>)
 8002084:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002088:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800208c:	60bb      	str	r3, [r7, #8]
 800208e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002090:	bf00      	nop
 8002092:	37e8      	adds	r7, #232	; 0xe8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40080000 	.word	0x40080000
 800209c:	58024400 	.word	0x58024400
 80020a0:	58020000 	.word	0x58020000

080020a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020a8:	e7fe      	b.n	80020a8 <NMI_Handler+0x4>

080020aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ae:	e7fe      	b.n	80020ae <HardFault_Handler+0x4>

080020b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020b4:	e7fe      	b.n	80020b4 <MemManage_Handler+0x4>

080020b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020b6:	b480      	push	{r7}
 80020b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ba:	e7fe      	b.n	80020ba <BusFault_Handler+0x4>

080020bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020c0:	e7fe      	b.n	80020c0 <UsageFault_Handler+0x4>

080020c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020c2:	b480      	push	{r7}
 80020c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020de:	b480      	push	{r7}
 80020e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020f0:	f000 f926 	bl	8002340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020f4:	bf00      	nop
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80020fc:	4b37      	ldr	r3, [pc, #220]	; (80021dc <SystemInit+0xe4>)
 80020fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002102:	4a36      	ldr	r2, [pc, #216]	; (80021dc <SystemInit+0xe4>)
 8002104:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002108:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800210c:	4b34      	ldr	r3, [pc, #208]	; (80021e0 <SystemInit+0xe8>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 030f 	and.w	r3, r3, #15
 8002114:	2b06      	cmp	r3, #6
 8002116:	d807      	bhi.n	8002128 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002118:	4b31      	ldr	r3, [pc, #196]	; (80021e0 <SystemInit+0xe8>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f023 030f 	bic.w	r3, r3, #15
 8002120:	4a2f      	ldr	r2, [pc, #188]	; (80021e0 <SystemInit+0xe8>)
 8002122:	f043 0307 	orr.w	r3, r3, #7
 8002126:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002128:	4b2e      	ldr	r3, [pc, #184]	; (80021e4 <SystemInit+0xec>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a2d      	ldr	r2, [pc, #180]	; (80021e4 <SystemInit+0xec>)
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002134:	4b2b      	ldr	r3, [pc, #172]	; (80021e4 <SystemInit+0xec>)
 8002136:	2200      	movs	r2, #0
 8002138:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800213a:	4b2a      	ldr	r3, [pc, #168]	; (80021e4 <SystemInit+0xec>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	4929      	ldr	r1, [pc, #164]	; (80021e4 <SystemInit+0xec>)
 8002140:	4b29      	ldr	r3, [pc, #164]	; (80021e8 <SystemInit+0xf0>)
 8002142:	4013      	ands	r3, r2
 8002144:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002146:	4b26      	ldr	r3, [pc, #152]	; (80021e0 <SystemInit+0xe8>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b00      	cmp	r3, #0
 8002150:	d007      	beq.n	8002162 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002152:	4b23      	ldr	r3, [pc, #140]	; (80021e0 <SystemInit+0xe8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f023 030f 	bic.w	r3, r3, #15
 800215a:	4a21      	ldr	r2, [pc, #132]	; (80021e0 <SystemInit+0xe8>)
 800215c:	f043 0307 	orr.w	r3, r3, #7
 8002160:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002162:	4b20      	ldr	r3, [pc, #128]	; (80021e4 <SystemInit+0xec>)
 8002164:	2200      	movs	r2, #0
 8002166:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002168:	4b1e      	ldr	r3, [pc, #120]	; (80021e4 <SystemInit+0xec>)
 800216a:	2200      	movs	r2, #0
 800216c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800216e:	4b1d      	ldr	r3, [pc, #116]	; (80021e4 <SystemInit+0xec>)
 8002170:	2200      	movs	r2, #0
 8002172:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002174:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <SystemInit+0xec>)
 8002176:	4a1d      	ldr	r2, [pc, #116]	; (80021ec <SystemInit+0xf4>)
 8002178:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800217a:	4b1a      	ldr	r3, [pc, #104]	; (80021e4 <SystemInit+0xec>)
 800217c:	4a1c      	ldr	r2, [pc, #112]	; (80021f0 <SystemInit+0xf8>)
 800217e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002180:	4b18      	ldr	r3, [pc, #96]	; (80021e4 <SystemInit+0xec>)
 8002182:	4a1c      	ldr	r2, [pc, #112]	; (80021f4 <SystemInit+0xfc>)
 8002184:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002186:	4b17      	ldr	r3, [pc, #92]	; (80021e4 <SystemInit+0xec>)
 8002188:	2200      	movs	r2, #0
 800218a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800218c:	4b15      	ldr	r3, [pc, #84]	; (80021e4 <SystemInit+0xec>)
 800218e:	4a19      	ldr	r2, [pc, #100]	; (80021f4 <SystemInit+0xfc>)
 8002190:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002192:	4b14      	ldr	r3, [pc, #80]	; (80021e4 <SystemInit+0xec>)
 8002194:	2200      	movs	r2, #0
 8002196:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002198:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <SystemInit+0xec>)
 800219a:	4a16      	ldr	r2, [pc, #88]	; (80021f4 <SystemInit+0xfc>)
 800219c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800219e:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <SystemInit+0xec>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80021a4:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <SystemInit+0xec>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a0e      	ldr	r2, [pc, #56]	; (80021e4 <SystemInit+0xec>)
 80021aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80021b0:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <SystemInit+0xec>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80021b6:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <SystemInit+0x100>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	4b10      	ldr	r3, [pc, #64]	; (80021fc <SystemInit+0x104>)
 80021bc:	4013      	ands	r3, r2
 80021be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021c2:	d202      	bcs.n	80021ca <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80021c4:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <SystemInit+0x108>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80021ca:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <SystemInit+0x10c>)
 80021cc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80021d0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80021d2:	bf00      	nop
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	e000ed00 	.word	0xe000ed00
 80021e0:	52002000 	.word	0x52002000
 80021e4:	58024400 	.word	0x58024400
 80021e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80021ec:	02020200 	.word	0x02020200
 80021f0:	01ff0000 	.word	0x01ff0000
 80021f4:	01010280 	.word	0x01010280
 80021f8:	5c001000 	.word	0x5c001000
 80021fc:	ffff0000 	.word	0xffff0000
 8002200:	51008108 	.word	0x51008108
 8002204:	52004000 	.word	0x52004000

08002208 <Reset_Handler>:
 8002208:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002240 <LoopFillZerobss+0xe>
 800220c:	f7ff ff74 	bl	80020f8 <SystemInit>
 8002210:	480c      	ldr	r0, [pc, #48]	; (8002244 <LoopFillZerobss+0x12>)
 8002212:	490d      	ldr	r1, [pc, #52]	; (8002248 <LoopFillZerobss+0x16>)
 8002214:	4a0d      	ldr	r2, [pc, #52]	; (800224c <LoopFillZerobss+0x1a>)
 8002216:	2300      	movs	r3, #0
 8002218:	e002      	b.n	8002220 <LoopCopyDataInit>

0800221a <CopyDataInit>:
 800221a:	58d4      	ldr	r4, [r2, r3]
 800221c:	50c4      	str	r4, [r0, r3]
 800221e:	3304      	adds	r3, #4

08002220 <LoopCopyDataInit>:
 8002220:	18c4      	adds	r4, r0, r3
 8002222:	428c      	cmp	r4, r1
 8002224:	d3f9      	bcc.n	800221a <CopyDataInit>
 8002226:	4a0a      	ldr	r2, [pc, #40]	; (8002250 <LoopFillZerobss+0x1e>)
 8002228:	4c0a      	ldr	r4, [pc, #40]	; (8002254 <LoopFillZerobss+0x22>)
 800222a:	2300      	movs	r3, #0
 800222c:	e001      	b.n	8002232 <LoopFillZerobss>

0800222e <FillZerobss>:
 800222e:	6013      	str	r3, [r2, #0]
 8002230:	3204      	adds	r2, #4

08002232 <LoopFillZerobss>:
 8002232:	42a2      	cmp	r2, r4
 8002234:	d3fb      	bcc.n	800222e <FillZerobss>
 8002236:	f00a f9ad 	bl	800c594 <__libc_init_array>
 800223a:	f7fe f9cb 	bl	80005d4 <main>
 800223e:	4770      	bx	lr
 8002240:	24080000 	.word	0x24080000
 8002244:	24000000 	.word	0x24000000
 8002248:	24000010 	.word	0x24000010
 800224c:	0800c63c 	.word	0x0800c63c
 8002250:	24000010 	.word	0x24000010
 8002254:	24000b04 	.word	0x24000b04

08002258 <ADC3_IRQHandler>:
 8002258:	e7fe      	b.n	8002258 <ADC3_IRQHandler>
	...

0800225c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002262:	2003      	movs	r0, #3
 8002264:	f001 fa20 	bl	80036a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002268:	f002 fd9e 	bl	8004da8 <HAL_RCC_GetSysClockFreq>
 800226c:	4602      	mov	r2, r0
 800226e:	4b15      	ldr	r3, [pc, #84]	; (80022c4 <HAL_Init+0x68>)
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	0a1b      	lsrs	r3, r3, #8
 8002274:	f003 030f 	and.w	r3, r3, #15
 8002278:	4913      	ldr	r1, [pc, #76]	; (80022c8 <HAL_Init+0x6c>)
 800227a:	5ccb      	ldrb	r3, [r1, r3]
 800227c:	f003 031f 	and.w	r3, r3, #31
 8002280:	fa22 f303 	lsr.w	r3, r2, r3
 8002284:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002286:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <HAL_Init+0x68>)
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	4a0e      	ldr	r2, [pc, #56]	; (80022c8 <HAL_Init+0x6c>)
 8002290:	5cd3      	ldrb	r3, [r2, r3]
 8002292:	f003 031f 	and.w	r3, r3, #31
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	fa22 f303 	lsr.w	r3, r2, r3
 800229c:	4a0b      	ldr	r2, [pc, #44]	; (80022cc <HAL_Init+0x70>)
 800229e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022a0:	4a0b      	ldr	r2, [pc, #44]	; (80022d0 <HAL_Init+0x74>)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022a6:	200f      	movs	r0, #15
 80022a8:	f000 f814 	bl	80022d4 <HAL_InitTick>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e002      	b.n	80022bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80022b6:	f7ff f893 	bl	80013e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	58024400 	.word	0x58024400
 80022c8:	0800c5f4 	.word	0x0800c5f4
 80022cc:	24000004 	.word	0x24000004
 80022d0:	24000000 	.word	0x24000000

080022d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80022dc:	4b15      	ldr	r3, [pc, #84]	; (8002334 <HAL_InitTick+0x60>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e021      	b.n	800232c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80022e8:	4b13      	ldr	r3, [pc, #76]	; (8002338 <HAL_InitTick+0x64>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	4b11      	ldr	r3, [pc, #68]	; (8002334 <HAL_InitTick+0x60>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	4619      	mov	r1, r3
 80022f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fe:	4618      	mov	r0, r3
 8002300:	f001 f9f7 	bl	80036f2 <HAL_SYSTICK_Config>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e00e      	b.n	800232c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b0f      	cmp	r3, #15
 8002312:	d80a      	bhi.n	800232a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002314:	2200      	movs	r2, #0
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800231c:	f001 f9cf 	bl	80036be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002320:	4a06      	ldr	r2, [pc, #24]	; (800233c <HAL_InitTick+0x68>)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002326:	2300      	movs	r3, #0
 8002328:	e000      	b.n	800232c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
}
 800232c:	4618      	mov	r0, r3
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	2400000c 	.word	0x2400000c
 8002338:	24000000 	.word	0x24000000
 800233c:	24000008 	.word	0x24000008

08002340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002344:	4b06      	ldr	r3, [pc, #24]	; (8002360 <HAL_IncTick+0x20>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	461a      	mov	r2, r3
 800234a:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_IncTick+0x24>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4413      	add	r3, r2
 8002350:	4a04      	ldr	r2, [pc, #16]	; (8002364 <HAL_IncTick+0x24>)
 8002352:	6013      	str	r3, [r2, #0]
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	2400000c 	.word	0x2400000c
 8002364:	24000b00 	.word	0x24000b00

08002368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  return uwTick;
 800236c:	4b03      	ldr	r3, [pc, #12]	; (800237c <HAL_GetTick+0x14>)
 800236e:	681b      	ldr	r3, [r3, #0]
}
 8002370:	4618      	mov	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	24000b00 	.word	0x24000b00

08002380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002388:	f7ff ffee 	bl	8002368 <HAL_GetTick>
 800238c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002398:	d005      	beq.n	80023a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800239a:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <HAL_Delay+0x44>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	461a      	mov	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4413      	add	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023a6:	bf00      	nop
 80023a8:	f7ff ffde 	bl	8002368 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d8f7      	bhi.n	80023a8 <HAL_Delay+0x28>
  {
  }
}
 80023b8:	bf00      	nop
 80023ba:	bf00      	nop
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	2400000c 	.word	0x2400000c

080023c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80023cc:	4b03      	ldr	r3, [pc, #12]	; (80023dc <HAL_GetREVID+0x14>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	0c1b      	lsrs	r3, r3, #16
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	5c001000 	.word	0x5c001000

080023e0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80023e8:	4b06      	ldr	r3, [pc, #24]	; (8002404 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f023 0202 	bic.w	r2, r3, #2
 80023f0:	4904      	ldr	r1, [pc, #16]	; (8002404 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	600b      	str	r3, [r1, #0]
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	58003c00 	.word	0x58003c00

08002408 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 800240c:	4b05      	ldr	r3, [pc, #20]	; (8002424 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a04      	ldr	r2, [pc, #16]	; (8002424 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8002412:	f023 0301 	bic.w	r3, r3, #1
 8002416:	6013      	str	r3, [r2, #0]
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	58003c00 	.word	0x58003c00

08002428 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	431a      	orrs	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	609a      	str	r2, [r3, #8]
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
 8002456:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	609a      	str	r2, [r3, #8]
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002484:	4618      	mov	r0, r3
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002490:	b480      	push	{r7}
 8002492:	b087      	sub	sp, #28
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
 800249c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	3360      	adds	r3, #96	; 0x60
 80024a2:	461a      	mov	r2, r3
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	430b      	orrs	r3, r1
 80024be:	431a      	orrs	r2, r3
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80024c4:	bf00      	nop
 80024c6:	371c      	adds	r7, #28
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	f003 031f 	and.w	r3, r3, #31
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	fa01 f303 	lsl.w	r3, r1, r3
 80024f0:	431a      	orrs	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	611a      	str	r2, [r3, #16]
}
 80024f6:	bf00      	nop
 80024f8:	3714      	adds	r7, #20
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002502:	b480      	push	{r7}
 8002504:	b087      	sub	sp, #28
 8002506:	af00      	add	r7, sp, #0
 8002508:	60f8      	str	r0, [r7, #12]
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	3360      	adds	r3, #96	; 0x60
 8002512:	461a      	mov	r2, r3
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	431a      	orrs	r2, r3
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	601a      	str	r2, [r3, #0]
  }
}
 800252c:	bf00      	nop
 800252e:	371c      	adds	r7, #28
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002538:	b480      	push	{r7}
 800253a:	b087      	sub	sp, #28
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	3330      	adds	r3, #48	; 0x30
 8002548:	461a      	mov	r2, r3
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	0a1b      	lsrs	r3, r3, #8
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	f003 030c 	and.w	r3, r3, #12
 8002554:	4413      	add	r3, r2
 8002556:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	f003 031f 	and.w	r3, r3, #31
 8002562:	211f      	movs	r1, #31
 8002564:	fa01 f303 	lsl.w	r3, r1, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	401a      	ands	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	0e9b      	lsrs	r3, r3, #26
 8002570:	f003 011f 	and.w	r1, r3, #31
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	f003 031f 	and.w	r3, r3, #31
 800257a:	fa01 f303 	lsl.w	r3, r1, r3
 800257e:	431a      	orrs	r2, r3
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002584:	bf00      	nop
 8002586:	371c      	adds	r7, #28
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002590:	b480      	push	{r7}
 8002592:	b087      	sub	sp, #28
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	3314      	adds	r3, #20
 80025a0:	461a      	mov	r2, r3
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	0e5b      	lsrs	r3, r3, #25
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	4413      	add	r3, r2
 80025ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	0d1b      	lsrs	r3, r3, #20
 80025b8:	f003 031f 	and.w	r3, r3, #31
 80025bc:	2107      	movs	r1, #7
 80025be:	fa01 f303 	lsl.w	r3, r1, r3
 80025c2:	43db      	mvns	r3, r3
 80025c4:	401a      	ands	r2, r3
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	0d1b      	lsrs	r3, r3, #20
 80025ca:	f003 031f 	and.w	r3, r3, #31
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	fa01 f303 	lsl.w	r3, r1, r3
 80025d4:	431a      	orrs	r2, r3
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80025da:	bf00      	nop
 80025dc:	371c      	adds	r7, #28
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
	...

080025e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002600:	43db      	mvns	r3, r3
 8002602:	401a      	ands	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f003 0318 	and.w	r3, r3, #24
 800260a:	4908      	ldr	r1, [pc, #32]	; (800262c <LL_ADC_SetChannelSingleDiff+0x44>)
 800260c:	40d9      	lsrs	r1, r3
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	400b      	ands	r3, r1
 8002612:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002616:	431a      	orrs	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800261e:	bf00      	nop
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	000fffff 	.word	0x000fffff

08002630 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	4b04      	ldr	r3, [pc, #16]	; (8002650 <LL_ADC_DisableDeepPowerDown+0x20>)
 800263e:	4013      	ands	r3, r2
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6093      	str	r3, [r2, #8]
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	5fffffc0 	.word	0x5fffffc0

08002654 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002664:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002668:	d101      	bne.n	800266e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <LL_ADC_EnableInternalRegulator+0x24>)
 800268a:	4013      	ands	r3, r2
 800268c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	6fffffc0 	.word	0x6fffffc0

080026a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026b8:	d101      	bne.n	80026be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80026ba:	2301      	movs	r3, #1
 80026bc:	e000      	b.n	80026c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <LL_ADC_IsEnabled+0x18>
 80026e0:	2301      	movs	r3, #1
 80026e2:	e000      	b.n	80026e6 <LL_ADC_IsEnabled+0x1a>
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 0304 	and.w	r3, r3, #4
 8002702:	2b04      	cmp	r3, #4
 8002704:	d101      	bne.n	800270a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 0308 	and.w	r3, r3, #8
 8002728:	2b08      	cmp	r3, #8
 800272a:	d101      	bne.n	8002730 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800272c:	2301      	movs	r3, #1
 800272e:	e000      	b.n	8002732 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
	...

08002740 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002740:	b590      	push	{r4, r7, lr}
 8002742:	b089      	sub	sp, #36	; 0x24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002748:	2300      	movs	r3, #0
 800274a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800274c:	2300      	movs	r3, #0
 800274e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e18f      	b.n	8002a7a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002764:	2b00      	cmp	r3, #0
 8002766:	d109      	bne.n	800277c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f7fe fe65 	bl	8001438 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff ff67 	bl	8002654 <LL_ADC_IsDeepPowerDownEnabled>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d004      	beq.n	8002796 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff ff4d 	bl	8002630 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff ff82 	bl	80026a4 <LL_ADC_IsInternalRegulatorEnabled>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d114      	bne.n	80027d0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff ff66 	bl	800267c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027b0:	4b87      	ldr	r3, [pc, #540]	; (80029d0 <HAL_ADC_Init+0x290>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	099b      	lsrs	r3, r3, #6
 80027b6:	4a87      	ldr	r2, [pc, #540]	; (80029d4 <HAL_ADC_Init+0x294>)
 80027b8:	fba2 2303 	umull	r2, r3, r2, r3
 80027bc:	099b      	lsrs	r3, r3, #6
 80027be:	3301      	adds	r3, #1
 80027c0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027c2:	e002      	b.n	80027ca <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1f9      	bne.n	80027c4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff ff65 	bl	80026a4 <LL_ADC_IsInternalRegulatorEnabled>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d10d      	bne.n	80027fc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e4:	f043 0210 	orr.w	r2, r3, #16
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f0:	f043 0201 	orr.w	r2, r3, #1
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff ff76 	bl	80026f2 <LL_ADC_REG_IsConversionOngoing>
 8002806:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280c:	f003 0310 	and.w	r3, r3, #16
 8002810:	2b00      	cmp	r3, #0
 8002812:	f040 8129 	bne.w	8002a68 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	2b00      	cmp	r3, #0
 800281a:	f040 8125 	bne.w	8002a68 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002822:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002826:	f043 0202 	orr.w	r2, r3, #2
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff ff4a 	bl	80026cc <LL_ADC_IsEnabled>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d136      	bne.n	80028ac <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a65      	ldr	r2, [pc, #404]	; (80029d8 <HAL_ADC_Init+0x298>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d004      	beq.n	8002852 <HAL_ADC_Init+0x112>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a63      	ldr	r2, [pc, #396]	; (80029dc <HAL_ADC_Init+0x29c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d10e      	bne.n	8002870 <HAL_ADC_Init+0x130>
 8002852:	4861      	ldr	r0, [pc, #388]	; (80029d8 <HAL_ADC_Init+0x298>)
 8002854:	f7ff ff3a 	bl	80026cc <LL_ADC_IsEnabled>
 8002858:	4604      	mov	r4, r0
 800285a:	4860      	ldr	r0, [pc, #384]	; (80029dc <HAL_ADC_Init+0x29c>)
 800285c:	f7ff ff36 	bl	80026cc <LL_ADC_IsEnabled>
 8002860:	4603      	mov	r3, r0
 8002862:	4323      	orrs	r3, r4
 8002864:	2b00      	cmp	r3, #0
 8002866:	bf0c      	ite	eq
 8002868:	2301      	moveq	r3, #1
 800286a:	2300      	movne	r3, #0
 800286c:	b2db      	uxtb	r3, r3
 800286e:	e008      	b.n	8002882 <HAL_ADC_Init+0x142>
 8002870:	485b      	ldr	r0, [pc, #364]	; (80029e0 <HAL_ADC_Init+0x2a0>)
 8002872:	f7ff ff2b 	bl	80026cc <LL_ADC_IsEnabled>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	bf0c      	ite	eq
 800287c:	2301      	moveq	r3, #1
 800287e:	2300      	movne	r3, #0
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d012      	beq.n	80028ac <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a53      	ldr	r2, [pc, #332]	; (80029d8 <HAL_ADC_Init+0x298>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d004      	beq.n	800289a <HAL_ADC_Init+0x15a>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a51      	ldr	r2, [pc, #324]	; (80029dc <HAL_ADC_Init+0x29c>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d101      	bne.n	800289e <HAL_ADC_Init+0x15e>
 800289a:	4a52      	ldr	r2, [pc, #328]	; (80029e4 <HAL_ADC_Init+0x2a4>)
 800289c:	e000      	b.n	80028a0 <HAL_ADC_Init+0x160>
 800289e:	4a52      	ldr	r2, [pc, #328]	; (80029e8 <HAL_ADC_Init+0x2a8>)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	4619      	mov	r1, r3
 80028a6:	4610      	mov	r0, r2
 80028a8:	f7ff fdbe 	bl	8002428 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80028ac:	f7ff fd8c 	bl	80023c8 <HAL_GetREVID>
 80028b0:	4603      	mov	r3, r0
 80028b2:	f241 0203 	movw	r2, #4099	; 0x1003
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d914      	bls.n	80028e4 <HAL_ADC_Init+0x1a4>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	2b10      	cmp	r3, #16
 80028c0:	d110      	bne.n	80028e4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	7d5b      	ldrb	r3, [r3, #21]
 80028c6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028cc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80028d2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	7f1b      	ldrb	r3, [r3, #28]
 80028d8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80028da:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028dc:	f043 030c 	orr.w	r3, r3, #12
 80028e0:	61bb      	str	r3, [r7, #24]
 80028e2:	e00d      	b.n	8002900 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	7d5b      	ldrb	r3, [r3, #21]
 80028e8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028ee:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80028f4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	7f1b      	ldrb	r3, [r3, #28]
 80028fa:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028fc:	4313      	orrs	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	7f1b      	ldrb	r3, [r3, #28]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d106      	bne.n	8002916 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	3b01      	subs	r3, #1
 800290e:	045b      	lsls	r3, r3, #17
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291a:	2b00      	cmp	r3, #0
 800291c:	d009      	beq.n	8002932 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002922:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68da      	ldr	r2, [r3, #12]
 8002938:	4b2c      	ldr	r3, [pc, #176]	; (80029ec <HAL_ADC_Init+0x2ac>)
 800293a:	4013      	ands	r3, r2
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6812      	ldr	r2, [r2, #0]
 8002940:	69b9      	ldr	r1, [r7, #24]
 8002942:	430b      	orrs	r3, r1
 8002944:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff fed1 	bl	80026f2 <LL_ADC_REG_IsConversionOngoing>
 8002950:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff fede 	bl	8002718 <LL_ADC_INJ_IsConversionOngoing>
 800295c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d15f      	bne.n	8002a24 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d15c      	bne.n	8002a24 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	7d1b      	ldrb	r3, [r3, #20]
 800296e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68da      	ldr	r2, [r3, #12]
 800297e:	4b1c      	ldr	r3, [pc, #112]	; (80029f0 <HAL_ADC_Init+0x2b0>)
 8002980:	4013      	ands	r3, r2
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6812      	ldr	r2, [r2, #0]
 8002986:	69b9      	ldr	r1, [r7, #24]
 8002988:	430b      	orrs	r3, r1
 800298a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002992:	2b01      	cmp	r3, #1
 8002994:	d130      	bne.n	80029f8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	691a      	ldr	r2, [r3, #16]
 80029a2:	4b14      	ldr	r3, [pc, #80]	; (80029f4 <HAL_ADC_Init+0x2b4>)
 80029a4:	4013      	ands	r3, r2
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80029aa:	3a01      	subs	r2, #1
 80029ac:	0411      	lsls	r1, r2, #16
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029b2:	4311      	orrs	r1, r2
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80029b8:	4311      	orrs	r1, r2
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80029be:	430a      	orrs	r2, r1
 80029c0:	431a      	orrs	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f042 0201 	orr.w	r2, r2, #1
 80029ca:	611a      	str	r2, [r3, #16]
 80029cc:	e01c      	b.n	8002a08 <HAL_ADC_Init+0x2c8>
 80029ce:	bf00      	nop
 80029d0:	24000000 	.word	0x24000000
 80029d4:	053e2d63 	.word	0x053e2d63
 80029d8:	40022000 	.word	0x40022000
 80029dc:	40022100 	.word	0x40022100
 80029e0:	58026000 	.word	0x58026000
 80029e4:	40022300 	.word	0x40022300
 80029e8:	58026300 	.word	0x58026300
 80029ec:	fff0c003 	.word	0xfff0c003
 80029f0:	ffffbffc 	.word	0xffffbffc
 80029f4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	691a      	ldr	r2, [r3, #16]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0201 	bic.w	r2, r2, #1
 8002a06:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 fb80 	bl	8003124 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d10c      	bne.n	8002a46 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	f023 010f 	bic.w	r1, r3, #15
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	1e5a      	subs	r2, r3, #1
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	631a      	str	r2, [r3, #48]	; 0x30
 8002a44:	e007      	b.n	8002a56 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 020f 	bic.w	r2, r2, #15
 8002a54:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5a:	f023 0303 	bic.w	r3, r3, #3
 8002a5e:	f043 0201 	orr.w	r2, r3, #1
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	655a      	str	r2, [r3, #84]	; 0x54
 8002a66:	e007      	b.n	8002a78 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6c:	f043 0210 	orr.w	r2, r3, #16
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a78:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3724      	adds	r7, #36	; 0x24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd90      	pop	{r4, r7, pc}
 8002a82:	bf00      	nop

08002a84 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a84:	b590      	push	{r4, r7, lr}
 8002a86:	b0a1      	sub	sp, #132	; 0x84
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002a94:	2300      	movs	r3, #0
 8002a96:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	4a9d      	ldr	r2, [pc, #628]	; (8002d14 <HAL_ADC_ConfigChannel+0x290>)
 8002a9e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d101      	bne.n	8002aae <HAL_ADC_ConfigChannel+0x2a>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e321      	b.n	80030f2 <HAL_ADC_ConfigChannel+0x66e>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff fe19 	bl	80026f2 <LL_ADC_REG_IsConversionOngoing>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f040 8306 	bne.w	80030d4 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d108      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x62>
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	0e9b      	lsrs	r3, r3, #26
 8002ada:	f003 031f 	and.w	r3, r3, #31
 8002ade:	2201      	movs	r2, #1
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	e016      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x90>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002aee:	fa93 f3a3 	rbit	r3, r3
 8002af2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002af4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002af6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002af8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002afe:	2320      	movs	r3, #32
 8002b00:	e003      	b.n	8002b0a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002b02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b04:	fab3 f383 	clz	r3, r3
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	f003 031f 	and.w	r3, r3, #31
 8002b0e:	2201      	movs	r2, #1
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6812      	ldr	r2, [r2, #0]
 8002b18:	69d1      	ldr	r1, [r2, #28]
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	6812      	ldr	r2, [r2, #0]
 8002b1e:	430b      	orrs	r3, r1
 8002b20:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6818      	ldr	r0, [r3, #0]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	6859      	ldr	r1, [r3, #4]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	f7ff fd02 	bl	8002538 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff fdda 	bl	80026f2 <LL_ADC_REG_IsConversionOngoing>
 8002b3e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff fde7 	bl	8002718 <LL_ADC_INJ_IsConversionOngoing>
 8002b4a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f040 80b3 	bne.w	8002cba <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f040 80af 	bne.w	8002cba <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6818      	ldr	r0, [r3, #0]
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	6819      	ldr	r1, [r3, #0]
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	f7ff fd11 	bl	8002590 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002b6e:	4b6a      	ldr	r3, [pc, #424]	; (8002d18 <HAL_ADC_ConfigChannel+0x294>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002b76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b7a:	d10b      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x110>
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	695a      	ldr	r2, [r3, #20]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	089b      	lsrs	r3, r3, #2
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	e01d      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x14c>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	f003 0310 	and.w	r3, r3, #16
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10b      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x136>
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	695a      	ldr	r2, [r3, #20]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	089b      	lsrs	r3, r3, #2
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	e00a      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x14c>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	695a      	ldr	r2, [r3, #20]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	089b      	lsrs	r3, r3, #2
 8002bc6:	f003 0304 	and.w	r3, r3, #4
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d027      	beq.n	8002c2a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6818      	ldr	r0, [r3, #0]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	6919      	ldr	r1, [r3, #16]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002be8:	f7ff fc52 	bl	8002490 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6818      	ldr	r0, [r3, #0]
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	6919      	ldr	r1, [r3, #16]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	7e5b      	ldrb	r3, [r3, #25]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d102      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x17e>
 8002bfc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002c00:	e000      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x180>
 8002c02:	2300      	movs	r3, #0
 8002c04:	461a      	mov	r2, r3
 8002c06:	f7ff fc7c 	bl	8002502 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6818      	ldr	r0, [r3, #0]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	6919      	ldr	r1, [r3, #16]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	7e1b      	ldrb	r3, [r3, #24]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d102      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x19c>
 8002c1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c1e:	e000      	b.n	8002c22 <HAL_ADC_ConfigChannel+0x19e>
 8002c20:	2300      	movs	r3, #0
 8002c22:	461a      	mov	r2, r3
 8002c24:	f7ff fc54 	bl	80024d0 <LL_ADC_SetDataRightShift>
 8002c28:	e047      	b.n	8002cba <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	069b      	lsls	r3, r3, #26
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d107      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c4c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	069b      	lsls	r3, r3, #26
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d107      	bne.n	8002c72 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c70:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c78:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	069b      	lsls	r3, r3, #26
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d107      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c94:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	069b      	lsls	r3, r3, #26
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d107      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002cb8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff fd04 	bl	80026cc <LL_ADC_IsEnabled>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f040 820d 	bne.w	80030e6 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6818      	ldr	r0, [r3, #0]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	6819      	ldr	r1, [r3, #0]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	f7ff fc85 	bl	80025e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	4a0c      	ldr	r2, [pc, #48]	; (8002d14 <HAL_ADC_ConfigChannel+0x290>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	f040 8133 	bne.w	8002f50 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d110      	bne.n	8002d1c <HAL_ADC_ConfigChannel+0x298>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	0e9b      	lsrs	r3, r3, #26
 8002d00:	3301      	adds	r3, #1
 8002d02:	f003 031f 	and.w	r3, r3, #31
 8002d06:	2b09      	cmp	r3, #9
 8002d08:	bf94      	ite	ls
 8002d0a:	2301      	movls	r3, #1
 8002d0c:	2300      	movhi	r3, #0
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	e01e      	b.n	8002d50 <HAL_ADC_ConfigChannel+0x2cc>
 8002d12:	bf00      	nop
 8002d14:	47ff0000 	.word	0x47ff0000
 8002d18:	5c001000 	.word	0x5c001000
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d24:	fa93 f3a3 	rbit	r3, r3
 8002d28:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002d2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002d2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002d34:	2320      	movs	r3, #32
 8002d36:	e003      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002d38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d3a:	fab3 f383 	clz	r3, r3
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	3301      	adds	r3, #1
 8002d42:	f003 031f 	and.w	r3, r3, #31
 8002d46:	2b09      	cmp	r3, #9
 8002d48:	bf94      	ite	ls
 8002d4a:	2301      	movls	r3, #1
 8002d4c:	2300      	movhi	r3, #0
 8002d4e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d079      	beq.n	8002e48 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d107      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0x2ec>
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	0e9b      	lsrs	r3, r3, #26
 8002d66:	3301      	adds	r3, #1
 8002d68:	069b      	lsls	r3, r3, #26
 8002d6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d6e:	e015      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x318>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d78:	fa93 f3a3 	rbit	r3, r3
 8002d7c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002d7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d80:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002d82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d101      	bne.n	8002d8c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002d88:	2320      	movs	r3, #32
 8002d8a:	e003      	b.n	8002d94 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002d8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d8e:	fab3 f383 	clz	r3, r3
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	3301      	adds	r3, #1
 8002d96:	069b      	lsls	r3, r3, #26
 8002d98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d109      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x338>
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	0e9b      	lsrs	r3, r3, #26
 8002dae:	3301      	adds	r3, #1
 8002db0:	f003 031f 	and.w	r3, r3, #31
 8002db4:	2101      	movs	r1, #1
 8002db6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dba:	e017      	b.n	8002dec <HAL_ADC_ConfigChannel+0x368>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dc4:	fa93 f3a3 	rbit	r3, r3
 8002dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dcc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002dce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002dd4:	2320      	movs	r3, #32
 8002dd6:	e003      	b.n	8002de0 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002dd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dda:	fab3 f383 	clz	r3, r3
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	3301      	adds	r3, #1
 8002de2:	f003 031f 	and.w	r3, r3, #31
 8002de6:	2101      	movs	r1, #1
 8002de8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dec:	ea42 0103 	orr.w	r1, r2, r3
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10a      	bne.n	8002e12 <HAL_ADC_ConfigChannel+0x38e>
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	0e9b      	lsrs	r3, r3, #26
 8002e02:	3301      	adds	r3, #1
 8002e04:	f003 021f 	and.w	r2, r3, #31
 8002e08:	4613      	mov	r3, r2
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	4413      	add	r3, r2
 8002e0e:	051b      	lsls	r3, r3, #20
 8002e10:	e018      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x3c0>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e1a:	fa93 f3a3 	rbit	r3, r3
 8002e1e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e22:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002e2a:	2320      	movs	r3, #32
 8002e2c:	e003      	b.n	8002e36 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e30:	fab3 f383 	clz	r3, r3
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	3301      	adds	r3, #1
 8002e38:	f003 021f 	and.w	r2, r3, #31
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	4413      	add	r3, r2
 8002e42:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e44:	430b      	orrs	r3, r1
 8002e46:	e07e      	b.n	8002f46 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d107      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x3e0>
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	0e9b      	lsrs	r3, r3, #26
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	069b      	lsls	r3, r3, #26
 8002e5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e62:	e015      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x40c>
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6c:	fa93 f3a3 	rbit	r3, r3
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002e7c:	2320      	movs	r3, #32
 8002e7e:	e003      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e82:	fab3 f383 	clz	r3, r3
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	3301      	adds	r3, #1
 8002e8a:	069b      	lsls	r3, r3, #26
 8002e8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d109      	bne.n	8002eb0 <HAL_ADC_ConfigChannel+0x42c>
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	0e9b      	lsrs	r3, r3, #26
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	f003 031f 	and.w	r3, r3, #31
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8002eae:	e017      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x45c>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	fa93 f3a3 	rbit	r3, r3
 8002ebc:	61bb      	str	r3, [r7, #24]
  return result;
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002ec8:	2320      	movs	r3, #32
 8002eca:	e003      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002ecc:	6a3b      	ldr	r3, [r7, #32]
 8002ece:	fab3 f383 	clz	r3, r3
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	f003 031f 	and.w	r3, r3, #31
 8002eda:	2101      	movs	r1, #1
 8002edc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee0:	ea42 0103 	orr.w	r1, r2, r3
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10d      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x488>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	0e9b      	lsrs	r3, r3, #26
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	f003 021f 	and.w	r2, r3, #31
 8002efc:	4613      	mov	r3, r2
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	4413      	add	r3, r2
 8002f02:	3b1e      	subs	r3, #30
 8002f04:	051b      	lsls	r3, r3, #20
 8002f06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f0a:	e01b      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x4c0>
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	fa93 f3a3 	rbit	r3, r3
 8002f18:	60fb      	str	r3, [r7, #12]
  return result;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002f24:	2320      	movs	r3, #32
 8002f26:	e003      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	fab3 f383 	clz	r3, r3
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	3301      	adds	r3, #1
 8002f32:	f003 021f 	and.w	r2, r3, #31
 8002f36:	4613      	mov	r3, r2
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	4413      	add	r3, r2
 8002f3c:	3b1e      	subs	r3, #30
 8002f3e:	051b      	lsls	r3, r3, #20
 8002f40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f44:	430b      	orrs	r3, r1
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	6892      	ldr	r2, [r2, #8]
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	f7ff fb20 	bl	8002590 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f280 80c6 	bge.w	80030e6 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a67      	ldr	r2, [pc, #412]	; (80030fc <HAL_ADC_ConfigChannel+0x678>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d004      	beq.n	8002f6e <HAL_ADC_ConfigChannel+0x4ea>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a65      	ldr	r2, [pc, #404]	; (8003100 <HAL_ADC_ConfigChannel+0x67c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d101      	bne.n	8002f72 <HAL_ADC_ConfigChannel+0x4ee>
 8002f6e:	4b65      	ldr	r3, [pc, #404]	; (8003104 <HAL_ADC_ConfigChannel+0x680>)
 8002f70:	e000      	b.n	8002f74 <HAL_ADC_ConfigChannel+0x4f0>
 8002f72:	4b65      	ldr	r3, [pc, #404]	; (8003108 <HAL_ADC_ConfigChannel+0x684>)
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff fa7d 	bl	8002474 <LL_ADC_GetCommonPathInternalCh>
 8002f7a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a5e      	ldr	r2, [pc, #376]	; (80030fc <HAL_ADC_ConfigChannel+0x678>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d004      	beq.n	8002f90 <HAL_ADC_ConfigChannel+0x50c>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a5d      	ldr	r2, [pc, #372]	; (8003100 <HAL_ADC_ConfigChannel+0x67c>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d10e      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x52a>
 8002f90:	485a      	ldr	r0, [pc, #360]	; (80030fc <HAL_ADC_ConfigChannel+0x678>)
 8002f92:	f7ff fb9b 	bl	80026cc <LL_ADC_IsEnabled>
 8002f96:	4604      	mov	r4, r0
 8002f98:	4859      	ldr	r0, [pc, #356]	; (8003100 <HAL_ADC_ConfigChannel+0x67c>)
 8002f9a:	f7ff fb97 	bl	80026cc <LL_ADC_IsEnabled>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	4323      	orrs	r3, r4
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	bf0c      	ite	eq
 8002fa6:	2301      	moveq	r3, #1
 8002fa8:	2300      	movne	r3, #0
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	e008      	b.n	8002fc0 <HAL_ADC_ConfigChannel+0x53c>
 8002fae:	4857      	ldr	r0, [pc, #348]	; (800310c <HAL_ADC_ConfigChannel+0x688>)
 8002fb0:	f7ff fb8c 	bl	80026cc <LL_ADC_IsEnabled>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	bf0c      	ite	eq
 8002fba:	2301      	moveq	r3, #1
 8002fbc:	2300      	movne	r3, #0
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d07d      	beq.n	80030c0 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a51      	ldr	r2, [pc, #324]	; (8003110 <HAL_ADC_ConfigChannel+0x68c>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d130      	bne.n	8003030 <HAL_ADC_ConfigChannel+0x5ac>
 8002fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d12b      	bne.n	8003030 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a4b      	ldr	r2, [pc, #300]	; (800310c <HAL_ADC_ConfigChannel+0x688>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	f040 8081 	bne.w	80030e6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a44      	ldr	r2, [pc, #272]	; (80030fc <HAL_ADC_ConfigChannel+0x678>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d004      	beq.n	8002ff8 <HAL_ADC_ConfigChannel+0x574>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a43      	ldr	r2, [pc, #268]	; (8003100 <HAL_ADC_ConfigChannel+0x67c>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d101      	bne.n	8002ffc <HAL_ADC_ConfigChannel+0x578>
 8002ff8:	4a42      	ldr	r2, [pc, #264]	; (8003104 <HAL_ADC_ConfigChannel+0x680>)
 8002ffa:	e000      	b.n	8002ffe <HAL_ADC_ConfigChannel+0x57a>
 8002ffc:	4a42      	ldr	r2, [pc, #264]	; (8003108 <HAL_ADC_ConfigChannel+0x684>)
 8002ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003000:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003004:	4619      	mov	r1, r3
 8003006:	4610      	mov	r0, r2
 8003008:	f7ff fa21 	bl	800244e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800300c:	4b41      	ldr	r3, [pc, #260]	; (8003114 <HAL_ADC_ConfigChannel+0x690>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	099b      	lsrs	r3, r3, #6
 8003012:	4a41      	ldr	r2, [pc, #260]	; (8003118 <HAL_ADC_ConfigChannel+0x694>)
 8003014:	fba2 2303 	umull	r2, r3, r2, r3
 8003018:	099b      	lsrs	r3, r3, #6
 800301a:	3301      	adds	r3, #1
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003020:	e002      	b.n	8003028 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	3b01      	subs	r3, #1
 8003026:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1f9      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800302e:	e05a      	b.n	80030e6 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a39      	ldr	r2, [pc, #228]	; (800311c <HAL_ADC_ConfigChannel+0x698>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d11e      	bne.n	8003078 <HAL_ADC_ConfigChannel+0x5f4>
 800303a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800303c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d119      	bne.n	8003078 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a30      	ldr	r2, [pc, #192]	; (800310c <HAL_ADC_ConfigChannel+0x688>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d14b      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a2a      	ldr	r2, [pc, #168]	; (80030fc <HAL_ADC_ConfigChannel+0x678>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d004      	beq.n	8003062 <HAL_ADC_ConfigChannel+0x5de>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a28      	ldr	r2, [pc, #160]	; (8003100 <HAL_ADC_ConfigChannel+0x67c>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d101      	bne.n	8003066 <HAL_ADC_ConfigChannel+0x5e2>
 8003062:	4a28      	ldr	r2, [pc, #160]	; (8003104 <HAL_ADC_ConfigChannel+0x680>)
 8003064:	e000      	b.n	8003068 <HAL_ADC_ConfigChannel+0x5e4>
 8003066:	4a28      	ldr	r2, [pc, #160]	; (8003108 <HAL_ADC_ConfigChannel+0x684>)
 8003068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800306a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800306e:	4619      	mov	r1, r3
 8003070:	4610      	mov	r0, r2
 8003072:	f7ff f9ec 	bl	800244e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003076:	e036      	b.n	80030e6 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a28      	ldr	r2, [pc, #160]	; (8003120 <HAL_ADC_ConfigChannel+0x69c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d131      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x662>
 8003082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003084:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d12c      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a1e      	ldr	r2, [pc, #120]	; (800310c <HAL_ADC_ConfigChannel+0x688>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d127      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a18      	ldr	r2, [pc, #96]	; (80030fc <HAL_ADC_ConfigChannel+0x678>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d004      	beq.n	80030aa <HAL_ADC_ConfigChannel+0x626>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a16      	ldr	r2, [pc, #88]	; (8003100 <HAL_ADC_ConfigChannel+0x67c>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d101      	bne.n	80030ae <HAL_ADC_ConfigChannel+0x62a>
 80030aa:	4a16      	ldr	r2, [pc, #88]	; (8003104 <HAL_ADC_ConfigChannel+0x680>)
 80030ac:	e000      	b.n	80030b0 <HAL_ADC_ConfigChannel+0x62c>
 80030ae:	4a16      	ldr	r2, [pc, #88]	; (8003108 <HAL_ADC_ConfigChannel+0x684>)
 80030b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030b6:	4619      	mov	r1, r3
 80030b8:	4610      	mov	r0, r2
 80030ba:	f7ff f9c8 	bl	800244e <LL_ADC_SetCommonPathInternalCh>
 80030be:	e012      	b.n	80030e6 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c4:	f043 0220 	orr.w	r2, r3, #32
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80030d2:	e008      	b.n	80030e6 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d8:	f043 0220 	orr.w	r2, r3, #32
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80030ee:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3784      	adds	r7, #132	; 0x84
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd90      	pop	{r4, r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40022000 	.word	0x40022000
 8003100:	40022100 	.word	0x40022100
 8003104:	40022300 	.word	0x40022300
 8003108:	58026300 	.word	0x58026300
 800310c:	58026000 	.word	0x58026000
 8003110:	cb840000 	.word	0xcb840000
 8003114:	24000000 	.word	0x24000000
 8003118:	053e2d63 	.word	0x053e2d63
 800311c:	c7520000 	.word	0xc7520000
 8003120:	cfb80000 	.word	0xcfb80000

08003124 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a7a      	ldr	r2, [pc, #488]	; (800331c <ADC_ConfigureBoostMode+0x1f8>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d004      	beq.n	8003140 <ADC_ConfigureBoostMode+0x1c>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a79      	ldr	r2, [pc, #484]	; (8003320 <ADC_ConfigureBoostMode+0x1fc>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d109      	bne.n	8003154 <ADC_ConfigureBoostMode+0x30>
 8003140:	4b78      	ldr	r3, [pc, #480]	; (8003324 <ADC_ConfigureBoostMode+0x200>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003148:	2b00      	cmp	r3, #0
 800314a:	bf14      	ite	ne
 800314c:	2301      	movne	r3, #1
 800314e:	2300      	moveq	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	e008      	b.n	8003166 <ADC_ConfigureBoostMode+0x42>
 8003154:	4b74      	ldr	r3, [pc, #464]	; (8003328 <ADC_ConfigureBoostMode+0x204>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800315c:	2b00      	cmp	r3, #0
 800315e:	bf14      	ite	ne
 8003160:	2301      	movne	r3, #1
 8003162:	2300      	moveq	r3, #0
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d01c      	beq.n	80031a4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800316a:	f001 ff97 	bl	800509c <HAL_RCC_GetHCLKFreq>
 800316e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003178:	d010      	beq.n	800319c <ADC_ConfigureBoostMode+0x78>
 800317a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800317e:	d873      	bhi.n	8003268 <ADC_ConfigureBoostMode+0x144>
 8003180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003184:	d002      	beq.n	800318c <ADC_ConfigureBoostMode+0x68>
 8003186:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800318a:	d16d      	bne.n	8003268 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	0c1b      	lsrs	r3, r3, #16
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	fbb2 f3f3 	udiv	r3, r2, r3
 8003198:	60fb      	str	r3, [r7, #12]
        break;
 800319a:	e068      	b.n	800326e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	089b      	lsrs	r3, r3, #2
 80031a0:	60fb      	str	r3, [r7, #12]
        break;
 80031a2:	e064      	b.n	800326e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80031a4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80031a8:	f04f 0100 	mov.w	r1, #0
 80031ac:	f003 f9dc 	bl	8006568 <HAL_RCCEx_GetPeriphCLKFreq>
 80031b0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80031ba:	d051      	beq.n	8003260 <ADC_ConfigureBoostMode+0x13c>
 80031bc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80031c0:	d854      	bhi.n	800326c <ADC_ConfigureBoostMode+0x148>
 80031c2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80031c6:	d047      	beq.n	8003258 <ADC_ConfigureBoostMode+0x134>
 80031c8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80031cc:	d84e      	bhi.n	800326c <ADC_ConfigureBoostMode+0x148>
 80031ce:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80031d2:	d03d      	beq.n	8003250 <ADC_ConfigureBoostMode+0x12c>
 80031d4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80031d8:	d848      	bhi.n	800326c <ADC_ConfigureBoostMode+0x148>
 80031da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031de:	d033      	beq.n	8003248 <ADC_ConfigureBoostMode+0x124>
 80031e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031e4:	d842      	bhi.n	800326c <ADC_ConfigureBoostMode+0x148>
 80031e6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80031ea:	d029      	beq.n	8003240 <ADC_ConfigureBoostMode+0x11c>
 80031ec:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80031f0:	d83c      	bhi.n	800326c <ADC_ConfigureBoostMode+0x148>
 80031f2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80031f6:	d01a      	beq.n	800322e <ADC_ConfigureBoostMode+0x10a>
 80031f8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80031fc:	d836      	bhi.n	800326c <ADC_ConfigureBoostMode+0x148>
 80031fe:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003202:	d014      	beq.n	800322e <ADC_ConfigureBoostMode+0x10a>
 8003204:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003208:	d830      	bhi.n	800326c <ADC_ConfigureBoostMode+0x148>
 800320a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800320e:	d00e      	beq.n	800322e <ADC_ConfigureBoostMode+0x10a>
 8003210:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003214:	d82a      	bhi.n	800326c <ADC_ConfigureBoostMode+0x148>
 8003216:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800321a:	d008      	beq.n	800322e <ADC_ConfigureBoostMode+0x10a>
 800321c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003220:	d824      	bhi.n	800326c <ADC_ConfigureBoostMode+0x148>
 8003222:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003226:	d002      	beq.n	800322e <ADC_ConfigureBoostMode+0x10a>
 8003228:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800322c:	d11e      	bne.n	800326c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	0c9b      	lsrs	r3, r3, #18
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	fbb2 f3f3 	udiv	r3, r2, r3
 800323c:	60fb      	str	r3, [r7, #12]
        break;
 800323e:	e016      	b.n	800326e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	091b      	lsrs	r3, r3, #4
 8003244:	60fb      	str	r3, [r7, #12]
        break;
 8003246:	e012      	b.n	800326e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	095b      	lsrs	r3, r3, #5
 800324c:	60fb      	str	r3, [r7, #12]
        break;
 800324e:	e00e      	b.n	800326e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	099b      	lsrs	r3, r3, #6
 8003254:	60fb      	str	r3, [r7, #12]
        break;
 8003256:	e00a      	b.n	800326e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	09db      	lsrs	r3, r3, #7
 800325c:	60fb      	str	r3, [r7, #12]
        break;
 800325e:	e006      	b.n	800326e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	0a1b      	lsrs	r3, r3, #8
 8003264:	60fb      	str	r3, [r7, #12]
        break;
 8003266:	e002      	b.n	800326e <ADC_ConfigureBoostMode+0x14a>
        break;
 8003268:	bf00      	nop
 800326a:	e000      	b.n	800326e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800326c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800326e:	f7ff f8ab 	bl	80023c8 <HAL_GetREVID>
 8003272:	4603      	mov	r3, r0
 8003274:	f241 0203 	movw	r2, #4099	; 0x1003
 8003278:	4293      	cmp	r3, r2
 800327a:	d815      	bhi.n	80032a8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4a2b      	ldr	r2, [pc, #172]	; (800332c <ADC_ConfigureBoostMode+0x208>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d908      	bls.n	8003296 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689a      	ldr	r2, [r3, #8]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003292:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003294:	e03e      	b.n	8003314 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032a4:	609a      	str	r2, [r3, #8]
}
 80032a6:	e035      	b.n	8003314 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	085b      	lsrs	r3, r3, #1
 80032ac:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	4a1f      	ldr	r2, [pc, #124]	; (8003330 <ADC_ConfigureBoostMode+0x20c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d808      	bhi.n	80032c8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80032c4:	609a      	str	r2, [r3, #8]
}
 80032c6:	e025      	b.n	8003314 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4a1a      	ldr	r2, [pc, #104]	; (8003334 <ADC_ConfigureBoostMode+0x210>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d80a      	bhi.n	80032e6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032e2:	609a      	str	r2, [r3, #8]
}
 80032e4:	e016      	b.n	8003314 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	4a13      	ldr	r2, [pc, #76]	; (8003338 <ADC_ConfigureBoostMode+0x214>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d80a      	bhi.n	8003304 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003300:	609a      	str	r2, [r3, #8]
}
 8003302:	e007      	b.n	8003314 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689a      	ldr	r2, [r3, #8]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003312:	609a      	str	r2, [r3, #8]
}
 8003314:	bf00      	nop
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40022000 	.word	0x40022000
 8003320:	40022100 	.word	0x40022100
 8003324:	40022300 	.word	0x40022300
 8003328:	58026300 	.word	0x58026300
 800332c:	01312d00 	.word	0x01312d00
 8003330:	005f5e10 	.word	0x005f5e10
 8003334:	00bebc20 	.word	0x00bebc20
 8003338:	017d7840 	.word	0x017d7840

0800333c <LL_ADC_IsEnabled>:
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b01      	cmp	r3, #1
 800334e:	d101      	bne.n	8003354 <LL_ADC_IsEnabled+0x18>
 8003350:	2301      	movs	r3, #1
 8003352:	e000      	b.n	8003356 <LL_ADC_IsEnabled+0x1a>
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <LL_ADC_REG_IsConversionOngoing>:
{
 8003362:	b480      	push	{r7}
 8003364:	b083      	sub	sp, #12
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 0304 	and.w	r3, r3, #4
 8003372:	2b04      	cmp	r3, #4
 8003374:	d101      	bne.n	800337a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003376:	2301      	movs	r3, #1
 8003378:	e000      	b.n	800337c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003388:	b590      	push	{r4, r7, lr}
 800338a:	b09f      	sub	sp, #124	; 0x7c
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003392:	2300      	movs	r3, #0
 8003394:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d101      	bne.n	80033a6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80033a2:	2302      	movs	r3, #2
 80033a4:	e0be      	b.n	8003524 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80033ae:	2300      	movs	r3, #0
 80033b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80033b2:	2300      	movs	r3, #0
 80033b4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a5c      	ldr	r2, [pc, #368]	; (800352c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d102      	bne.n	80033c6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80033c0:	4b5b      	ldr	r3, [pc, #364]	; (8003530 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80033c2:	60bb      	str	r3, [r7, #8]
 80033c4:	e001      	b.n	80033ca <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80033c6:	2300      	movs	r3, #0
 80033c8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10b      	bne.n	80033e8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d4:	f043 0220 	orr.w	r2, r3, #32
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e09d      	b.n	8003524 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff ffb9 	bl	8003362 <LL_ADC_REG_IsConversionOngoing>
 80033f0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7ff ffb3 	bl	8003362 <LL_ADC_REG_IsConversionOngoing>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d17f      	bne.n	8003502 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003402:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003404:	2b00      	cmp	r3, #0
 8003406:	d17c      	bne.n	8003502 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a47      	ldr	r2, [pc, #284]	; (800352c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d004      	beq.n	800341c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a46      	ldr	r2, [pc, #280]	; (8003530 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d101      	bne.n	8003420 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800341c:	4b45      	ldr	r3, [pc, #276]	; (8003534 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800341e:	e000      	b.n	8003422 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003420:	4b45      	ldr	r3, [pc, #276]	; (8003538 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003422:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d039      	beq.n	80034a0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800342c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	431a      	orrs	r2, r3
 800343a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800343c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a3a      	ldr	r2, [pc, #232]	; (800352c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d004      	beq.n	8003452 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a38      	ldr	r2, [pc, #224]	; (8003530 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d10e      	bne.n	8003470 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003452:	4836      	ldr	r0, [pc, #216]	; (800352c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003454:	f7ff ff72 	bl	800333c <LL_ADC_IsEnabled>
 8003458:	4604      	mov	r4, r0
 800345a:	4835      	ldr	r0, [pc, #212]	; (8003530 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800345c:	f7ff ff6e 	bl	800333c <LL_ADC_IsEnabled>
 8003460:	4603      	mov	r3, r0
 8003462:	4323      	orrs	r3, r4
 8003464:	2b00      	cmp	r3, #0
 8003466:	bf0c      	ite	eq
 8003468:	2301      	moveq	r3, #1
 800346a:	2300      	movne	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	e008      	b.n	8003482 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003470:	4832      	ldr	r0, [pc, #200]	; (800353c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003472:	f7ff ff63 	bl	800333c <LL_ADC_IsEnabled>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	bf0c      	ite	eq
 800347c:	2301      	moveq	r3, #1
 800347e:	2300      	movne	r3, #0
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d047      	beq.n	8003516 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	4b2d      	ldr	r3, [pc, #180]	; (8003540 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800348c:	4013      	ands	r3, r2
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	6811      	ldr	r1, [r2, #0]
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	6892      	ldr	r2, [r2, #8]
 8003496:	430a      	orrs	r2, r1
 8003498:	431a      	orrs	r2, r3
 800349a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800349c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800349e:	e03a      	b.n	8003516 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80034a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034aa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a1e      	ldr	r2, [pc, #120]	; (800352c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d004      	beq.n	80034c0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a1d      	ldr	r2, [pc, #116]	; (8003530 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d10e      	bne.n	80034de <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80034c0:	481a      	ldr	r0, [pc, #104]	; (800352c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80034c2:	f7ff ff3b 	bl	800333c <LL_ADC_IsEnabled>
 80034c6:	4604      	mov	r4, r0
 80034c8:	4819      	ldr	r0, [pc, #100]	; (8003530 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80034ca:	f7ff ff37 	bl	800333c <LL_ADC_IsEnabled>
 80034ce:	4603      	mov	r3, r0
 80034d0:	4323      	orrs	r3, r4
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	bf0c      	ite	eq
 80034d6:	2301      	moveq	r3, #1
 80034d8:	2300      	movne	r3, #0
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	e008      	b.n	80034f0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80034de:	4817      	ldr	r0, [pc, #92]	; (800353c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80034e0:	f7ff ff2c 	bl	800333c <LL_ADC_IsEnabled>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	bf0c      	ite	eq
 80034ea:	2301      	moveq	r3, #1
 80034ec:	2300      	movne	r3, #0
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d010      	beq.n	8003516 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80034f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	4b11      	ldr	r3, [pc, #68]	; (8003540 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80034fa:	4013      	ands	r3, r2
 80034fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80034fe:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003500:	e009      	b.n	8003516 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003506:	f043 0220 	orr.w	r2, r3, #32
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003514:	e000      	b.n	8003518 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003516:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003520:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003524:	4618      	mov	r0, r3
 8003526:	377c      	adds	r7, #124	; 0x7c
 8003528:	46bd      	mov	sp, r7
 800352a:	bd90      	pop	{r4, r7, pc}
 800352c:	40022000 	.word	0x40022000
 8003530:	40022100 	.word	0x40022100
 8003534:	40022300 	.word	0x40022300
 8003538:	58026300 	.word	0x58026300
 800353c:	58026000 	.word	0x58026000
 8003540:	fffff0e0 	.word	0xfffff0e0

08003544 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003554:	4b0b      	ldr	r3, [pc, #44]	; (8003584 <__NVIC_SetPriorityGrouping+0x40>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003560:	4013      	ands	r3, r2
 8003562:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800356c:	4b06      	ldr	r3, [pc, #24]	; (8003588 <__NVIC_SetPriorityGrouping+0x44>)
 800356e:	4313      	orrs	r3, r2
 8003570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003572:	4a04      	ldr	r2, [pc, #16]	; (8003584 <__NVIC_SetPriorityGrouping+0x40>)
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	60d3      	str	r3, [r2, #12]
}
 8003578:	bf00      	nop
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	e000ed00 	.word	0xe000ed00
 8003588:	05fa0000 	.word	0x05fa0000

0800358c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003590:	4b04      	ldr	r3, [pc, #16]	; (80035a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	0a1b      	lsrs	r3, r3, #8
 8003596:	f003 0307 	and.w	r3, r3, #7
}
 800359a:	4618      	mov	r0, r3
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	e000ed00 	.word	0xe000ed00

080035a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	4603      	mov	r3, r0
 80035b0:	6039      	str	r1, [r7, #0]
 80035b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80035b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	db0a      	blt.n	80035d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	b2da      	uxtb	r2, r3
 80035c0:	490c      	ldr	r1, [pc, #48]	; (80035f4 <__NVIC_SetPriority+0x4c>)
 80035c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035c6:	0112      	lsls	r2, r2, #4
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	440b      	add	r3, r1
 80035cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035d0:	e00a      	b.n	80035e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	4908      	ldr	r1, [pc, #32]	; (80035f8 <__NVIC_SetPriority+0x50>)
 80035d8:	88fb      	ldrh	r3, [r7, #6]
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	3b04      	subs	r3, #4
 80035e0:	0112      	lsls	r2, r2, #4
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	440b      	add	r3, r1
 80035e6:	761a      	strb	r2, [r3, #24]
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	e000e100 	.word	0xe000e100
 80035f8:	e000ed00 	.word	0xe000ed00

080035fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b089      	sub	sp, #36	; 0x24
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f1c3 0307 	rsb	r3, r3, #7
 8003616:	2b04      	cmp	r3, #4
 8003618:	bf28      	it	cs
 800361a:	2304      	movcs	r3, #4
 800361c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	3304      	adds	r3, #4
 8003622:	2b06      	cmp	r3, #6
 8003624:	d902      	bls.n	800362c <NVIC_EncodePriority+0x30>
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	3b03      	subs	r3, #3
 800362a:	e000      	b.n	800362e <NVIC_EncodePriority+0x32>
 800362c:	2300      	movs	r3, #0
 800362e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003630:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	fa02 f303 	lsl.w	r3, r2, r3
 800363a:	43da      	mvns	r2, r3
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	401a      	ands	r2, r3
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003644:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	fa01 f303 	lsl.w	r3, r1, r3
 800364e:	43d9      	mvns	r1, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003654:	4313      	orrs	r3, r2
         );
}
 8003656:	4618      	mov	r0, r3
 8003658:	3724      	adds	r7, #36	; 0x24
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
	...

08003664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3b01      	subs	r3, #1
 8003670:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003674:	d301      	bcc.n	800367a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003676:	2301      	movs	r3, #1
 8003678:	e00f      	b.n	800369a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800367a:	4a0a      	ldr	r2, [pc, #40]	; (80036a4 <SysTick_Config+0x40>)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3b01      	subs	r3, #1
 8003680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003682:	210f      	movs	r1, #15
 8003684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003688:	f7ff ff8e 	bl	80035a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800368c:	4b05      	ldr	r3, [pc, #20]	; (80036a4 <SysTick_Config+0x40>)
 800368e:	2200      	movs	r2, #0
 8003690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003692:	4b04      	ldr	r3, [pc, #16]	; (80036a4 <SysTick_Config+0x40>)
 8003694:	2207      	movs	r2, #7
 8003696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	e000e010 	.word	0xe000e010

080036a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7ff ff47 	bl	8003544 <__NVIC_SetPriorityGrouping>
}
 80036b6:	bf00      	nop
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b086      	sub	sp, #24
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	4603      	mov	r3, r0
 80036c6:	60b9      	str	r1, [r7, #8]
 80036c8:	607a      	str	r2, [r7, #4]
 80036ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036cc:	f7ff ff5e 	bl	800358c <__NVIC_GetPriorityGrouping>
 80036d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	68b9      	ldr	r1, [r7, #8]
 80036d6:	6978      	ldr	r0, [r7, #20]
 80036d8:	f7ff ff90 	bl	80035fc <NVIC_EncodePriority>
 80036dc:	4602      	mov	r2, r0
 80036de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80036e2:	4611      	mov	r1, r2
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff ff5f 	bl	80035a8 <__NVIC_SetPriority>
}
 80036ea:	bf00      	nop
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b082      	sub	sp, #8
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7ff ffb2 	bl	8003664 <SysTick_Config>
 8003700:	4603      	mov	r3, r0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
	...

0800370c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800370c:	b480      	push	{r7}
 800370e:	b089      	sub	sp, #36	; 0x24
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003716:	2300      	movs	r3, #0
 8003718:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800371a:	4b89      	ldr	r3, [pc, #548]	; (8003940 <HAL_GPIO_Init+0x234>)
 800371c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800371e:	e194      	b.n	8003a4a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	2101      	movs	r1, #1
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	fa01 f303 	lsl.w	r3, r1, r3
 800372c:	4013      	ands	r3, r2
 800372e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 8186 	beq.w	8003a44 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f003 0303 	and.w	r3, r3, #3
 8003740:	2b01      	cmp	r3, #1
 8003742:	d005      	beq.n	8003750 <HAL_GPIO_Init+0x44>
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f003 0303 	and.w	r3, r3, #3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d130      	bne.n	80037b2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	2203      	movs	r2, #3
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	43db      	mvns	r3, r3
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	4013      	ands	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	68da      	ldr	r2, [r3, #12]
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	4313      	orrs	r3, r2
 8003778:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003786:	2201      	movs	r2, #1
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	fa02 f303 	lsl.w	r3, r2, r3
 800378e:	43db      	mvns	r3, r3
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	4013      	ands	r3, r2
 8003794:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	091b      	lsrs	r3, r3, #4
 800379c:	f003 0201 	and.w	r2, r3, #1
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f003 0303 	and.w	r3, r3, #3
 80037ba:	2b03      	cmp	r3, #3
 80037bc:	d017      	beq.n	80037ee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	2203      	movs	r2, #3
 80037ca:	fa02 f303 	lsl.w	r3, r2, r3
 80037ce:	43db      	mvns	r3, r3
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	4013      	ands	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	689a      	ldr	r2, [r3, #8]
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d123      	bne.n	8003842 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	08da      	lsrs	r2, r3, #3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3208      	adds	r2, #8
 8003802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003806:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	220f      	movs	r2, #15
 8003812:	fa02 f303 	lsl.w	r3, r2, r3
 8003816:	43db      	mvns	r3, r3
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	4013      	ands	r3, r2
 800381c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	691a      	ldr	r2, [r3, #16]
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	4313      	orrs	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	08da      	lsrs	r2, r3, #3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3208      	adds	r2, #8
 800383c:	69b9      	ldr	r1, [r7, #24]
 800383e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	2203      	movs	r2, #3
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	43db      	mvns	r3, r3
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4013      	ands	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f003 0203 	and.w	r2, r3, #3
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	fa02 f303 	lsl.w	r3, r2, r3
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	4313      	orrs	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800387e:	2b00      	cmp	r3, #0
 8003880:	f000 80e0 	beq.w	8003a44 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003884:	4b2f      	ldr	r3, [pc, #188]	; (8003944 <HAL_GPIO_Init+0x238>)
 8003886:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800388a:	4a2e      	ldr	r2, [pc, #184]	; (8003944 <HAL_GPIO_Init+0x238>)
 800388c:	f043 0302 	orr.w	r3, r3, #2
 8003890:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003894:	4b2b      	ldr	r3, [pc, #172]	; (8003944 <HAL_GPIO_Init+0x238>)
 8003896:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038a2:	4a29      	ldr	r2, [pc, #164]	; (8003948 <HAL_GPIO_Init+0x23c>)
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	089b      	lsrs	r3, r3, #2
 80038a8:	3302      	adds	r3, #2
 80038aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	220f      	movs	r2, #15
 80038ba:	fa02 f303 	lsl.w	r3, r2, r3
 80038be:	43db      	mvns	r3, r3
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	4013      	ands	r3, r2
 80038c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a20      	ldr	r2, [pc, #128]	; (800394c <HAL_GPIO_Init+0x240>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d052      	beq.n	8003974 <HAL_GPIO_Init+0x268>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a1f      	ldr	r2, [pc, #124]	; (8003950 <HAL_GPIO_Init+0x244>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d031      	beq.n	800393a <HAL_GPIO_Init+0x22e>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a1e      	ldr	r2, [pc, #120]	; (8003954 <HAL_GPIO_Init+0x248>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d02b      	beq.n	8003936 <HAL_GPIO_Init+0x22a>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a1d      	ldr	r2, [pc, #116]	; (8003958 <HAL_GPIO_Init+0x24c>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d025      	beq.n	8003932 <HAL_GPIO_Init+0x226>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a1c      	ldr	r2, [pc, #112]	; (800395c <HAL_GPIO_Init+0x250>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d01f      	beq.n	800392e <HAL_GPIO_Init+0x222>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a1b      	ldr	r2, [pc, #108]	; (8003960 <HAL_GPIO_Init+0x254>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d019      	beq.n	800392a <HAL_GPIO_Init+0x21e>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a1a      	ldr	r2, [pc, #104]	; (8003964 <HAL_GPIO_Init+0x258>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d013      	beq.n	8003926 <HAL_GPIO_Init+0x21a>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a19      	ldr	r2, [pc, #100]	; (8003968 <HAL_GPIO_Init+0x25c>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d00d      	beq.n	8003922 <HAL_GPIO_Init+0x216>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a18      	ldr	r2, [pc, #96]	; (800396c <HAL_GPIO_Init+0x260>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d007      	beq.n	800391e <HAL_GPIO_Init+0x212>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a17      	ldr	r2, [pc, #92]	; (8003970 <HAL_GPIO_Init+0x264>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d101      	bne.n	800391a <HAL_GPIO_Init+0x20e>
 8003916:	2309      	movs	r3, #9
 8003918:	e02d      	b.n	8003976 <HAL_GPIO_Init+0x26a>
 800391a:	230a      	movs	r3, #10
 800391c:	e02b      	b.n	8003976 <HAL_GPIO_Init+0x26a>
 800391e:	2308      	movs	r3, #8
 8003920:	e029      	b.n	8003976 <HAL_GPIO_Init+0x26a>
 8003922:	2307      	movs	r3, #7
 8003924:	e027      	b.n	8003976 <HAL_GPIO_Init+0x26a>
 8003926:	2306      	movs	r3, #6
 8003928:	e025      	b.n	8003976 <HAL_GPIO_Init+0x26a>
 800392a:	2305      	movs	r3, #5
 800392c:	e023      	b.n	8003976 <HAL_GPIO_Init+0x26a>
 800392e:	2304      	movs	r3, #4
 8003930:	e021      	b.n	8003976 <HAL_GPIO_Init+0x26a>
 8003932:	2303      	movs	r3, #3
 8003934:	e01f      	b.n	8003976 <HAL_GPIO_Init+0x26a>
 8003936:	2302      	movs	r3, #2
 8003938:	e01d      	b.n	8003976 <HAL_GPIO_Init+0x26a>
 800393a:	2301      	movs	r3, #1
 800393c:	e01b      	b.n	8003976 <HAL_GPIO_Init+0x26a>
 800393e:	bf00      	nop
 8003940:	58000080 	.word	0x58000080
 8003944:	58024400 	.word	0x58024400
 8003948:	58000400 	.word	0x58000400
 800394c:	58020000 	.word	0x58020000
 8003950:	58020400 	.word	0x58020400
 8003954:	58020800 	.word	0x58020800
 8003958:	58020c00 	.word	0x58020c00
 800395c:	58021000 	.word	0x58021000
 8003960:	58021400 	.word	0x58021400
 8003964:	58021800 	.word	0x58021800
 8003968:	58021c00 	.word	0x58021c00
 800396c:	58022000 	.word	0x58022000
 8003970:	58022400 	.word	0x58022400
 8003974:	2300      	movs	r3, #0
 8003976:	69fa      	ldr	r2, [r7, #28]
 8003978:	f002 0203 	and.w	r2, r2, #3
 800397c:	0092      	lsls	r2, r2, #2
 800397e:	4093      	lsls	r3, r2
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	4313      	orrs	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003986:	4938      	ldr	r1, [pc, #224]	; (8003a68 <HAL_GPIO_Init+0x35c>)
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	089b      	lsrs	r3, r3, #2
 800398c:	3302      	adds	r3, #2
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	43db      	mvns	r3, r3
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	4013      	ands	r3, r2
 80039a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80039ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80039c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	43db      	mvns	r3, r3
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	4013      	ands	r3, r2
 80039d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d003      	beq.n	80039e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80039e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	43db      	mvns	r3, r3
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	4013      	ands	r3, r2
 80039fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	43db      	mvns	r3, r3
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	4013      	ands	r3, r2
 8003a28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	3301      	adds	r3, #1
 8003a48:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	fa22 f303 	lsr.w	r3, r2, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f47f ae63 	bne.w	8003720 <HAL_GPIO_Init+0x14>
  }
}
 8003a5a:	bf00      	nop
 8003a5c:	bf00      	nop
 8003a5e:	3724      	adds	r7, #36	; 0x24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	58000400 	.word	0x58000400

08003a6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	460b      	mov	r3, r1
 8003a76:	807b      	strh	r3, [r7, #2]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a7c:	787b      	ldrb	r3, [r7, #1]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a82:	887a      	ldrh	r2, [r7, #2]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003a88:	e003      	b.n	8003a92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003a8a:	887b      	ldrh	r3, [r7, #2]
 8003a8c:	041a      	lsls	r2, r3, #16
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	619a      	str	r2, [r3, #24]
}
 8003a92:	bf00      	nop
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
	...

08003aa0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e07f      	b.n	8003bb2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d106      	bne.n	8003acc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f7fd fd6a 	bl	80015a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2224      	movs	r2, #36	; 0x24
 8003ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 0201 	bic.w	r2, r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003af0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b00:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d107      	bne.n	8003b1a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689a      	ldr	r2, [r3, #8]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b16:	609a      	str	r2, [r3, #8]
 8003b18:	e006      	b.n	8003b28 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003b26:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d104      	bne.n	8003b3a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	6859      	ldr	r1, [r3, #4]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	4b1d      	ldr	r3, [pc, #116]	; (8003bbc <HAL_I2C_Init+0x11c>)
 8003b46:	430b      	orrs	r3, r1
 8003b48:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68da      	ldr	r2, [r3, #12]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b58:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691a      	ldr	r2, [r3, #16]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	69d9      	ldr	r1, [r3, #28]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a1a      	ldr	r2, [r3, #32]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 0201 	orr.w	r2, r2, #1
 8003b92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2220      	movs	r2, #32
 8003b9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	02008000 	.word	0x02008000

08003bc0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b20      	cmp	r3, #32
 8003bd4:	d138      	bne.n	8003c48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d101      	bne.n	8003be4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003be0:	2302      	movs	r3, #2
 8003be2:	e032      	b.n	8003c4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2224      	movs	r2, #36	; 0x24
 8003bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 0201 	bic.w	r2, r2, #1
 8003c02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6819      	ldr	r1, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f042 0201 	orr.w	r2, r2, #1
 8003c32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2220      	movs	r2, #32
 8003c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c44:	2300      	movs	r3, #0
 8003c46:	e000      	b.n	8003c4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c48:	2302      	movs	r3, #2
  }
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b085      	sub	sp, #20
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
 8003c5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b20      	cmp	r3, #32
 8003c6a:	d139      	bne.n	8003ce0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d101      	bne.n	8003c7a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c76:	2302      	movs	r3, #2
 8003c78:	e033      	b.n	8003ce2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2224      	movs	r2, #36	; 0x24
 8003c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0201 	bic.w	r2, r2, #1
 8003c98:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ca8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	021b      	lsls	r3, r3, #8
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f042 0201 	orr.w	r2, r2, #1
 8003cca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	e000      	b.n	8003ce2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ce0:	2302      	movs	r3, #2
  }
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003cee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cf0:	b08f      	sub	sp, #60	; 0x3c
 8003cf2:	af0a      	add	r7, sp, #40	; 0x28
 8003cf4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d101      	bne.n	8003d00 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e116      	b.n	8003f2e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d106      	bne.n	8003d20 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7fe f956 	bl	8001fcc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2203      	movs	r2, #3
 8003d24:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d102      	bne.n	8003d3a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f008 f984 	bl	800c04c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	603b      	str	r3, [r7, #0]
 8003d4a:	687e      	ldr	r6, [r7, #4]
 8003d4c:	466d      	mov	r5, sp
 8003d4e:	f106 0410 	add.w	r4, r6, #16
 8003d52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d62:	1d33      	adds	r3, r6, #4
 8003d64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d66:	6838      	ldr	r0, [r7, #0]
 8003d68:	f008 f902 	bl	800bf70 <USB_CoreInit>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d005      	beq.n	8003d7e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2202      	movs	r2, #2
 8003d76:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e0d7      	b.n	8003f2e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2100      	movs	r1, #0
 8003d84:	4618      	mov	r0, r3
 8003d86:	f008 f972 	bl	800c06e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	73fb      	strb	r3, [r7, #15]
 8003d8e:	e04a      	b.n	8003e26 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d90:	7bfa      	ldrb	r2, [r7, #15]
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	4613      	mov	r3, r2
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	4413      	add	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	333d      	adds	r3, #61	; 0x3d
 8003da0:	2201      	movs	r2, #1
 8003da2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003da4:	7bfa      	ldrb	r2, [r7, #15]
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	4613      	mov	r3, r2
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	4413      	add	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	440b      	add	r3, r1
 8003db2:	333c      	adds	r3, #60	; 0x3c
 8003db4:	7bfa      	ldrb	r2, [r7, #15]
 8003db6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003db8:	7bfa      	ldrb	r2, [r7, #15]
 8003dba:	7bfb      	ldrb	r3, [r7, #15]
 8003dbc:	b298      	uxth	r0, r3
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	4413      	add	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	440b      	add	r3, r1
 8003dca:	3356      	adds	r3, #86	; 0x56
 8003dcc:	4602      	mov	r2, r0
 8003dce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003dd0:	7bfa      	ldrb	r2, [r7, #15]
 8003dd2:	6879      	ldr	r1, [r7, #4]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	4413      	add	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	440b      	add	r3, r1
 8003dde:	3340      	adds	r3, #64	; 0x40
 8003de0:	2200      	movs	r2, #0
 8003de2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003de4:	7bfa      	ldrb	r2, [r7, #15]
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	4613      	mov	r3, r2
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	4413      	add	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	3344      	adds	r3, #68	; 0x44
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003df8:	7bfa      	ldrb	r2, [r7, #15]
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	4413      	add	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	3348      	adds	r3, #72	; 0x48
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e0c:	7bfa      	ldrb	r2, [r7, #15]
 8003e0e:	6879      	ldr	r1, [r7, #4]
 8003e10:	4613      	mov	r3, r2
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	4413      	add	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	440b      	add	r3, r1
 8003e1a:	334c      	adds	r3, #76	; 0x4c
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e20:	7bfb      	ldrb	r3, [r7, #15]
 8003e22:	3301      	adds	r3, #1
 8003e24:	73fb      	strb	r3, [r7, #15]
 8003e26:	7bfa      	ldrb	r2, [r7, #15]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d3af      	bcc.n	8003d90 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e30:	2300      	movs	r3, #0
 8003e32:	73fb      	strb	r3, [r7, #15]
 8003e34:	e044      	b.n	8003ec0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e36:	7bfa      	ldrb	r2, [r7, #15]
 8003e38:	6879      	ldr	r1, [r7, #4]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	4413      	add	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	440b      	add	r3, r1
 8003e44:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003e48:	2200      	movs	r2, #0
 8003e4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e4c:	7bfa      	ldrb	r2, [r7, #15]
 8003e4e:	6879      	ldr	r1, [r7, #4]
 8003e50:	4613      	mov	r3, r2
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	4413      	add	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003e5e:	7bfa      	ldrb	r2, [r7, #15]
 8003e60:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e62:	7bfa      	ldrb	r2, [r7, #15]
 8003e64:	6879      	ldr	r1, [r7, #4]
 8003e66:	4613      	mov	r3, r2
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	4413      	add	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	440b      	add	r3, r1
 8003e70:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003e74:	2200      	movs	r2, #0
 8003e76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e78:	7bfa      	ldrb	r2, [r7, #15]
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	4413      	add	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	440b      	add	r3, r1
 8003e86:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e8e:	7bfa      	ldrb	r2, [r7, #15]
 8003e90:	6879      	ldr	r1, [r7, #4]
 8003e92:	4613      	mov	r3, r2
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	4413      	add	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ea4:	7bfa      	ldrb	r2, [r7, #15]
 8003ea6:	6879      	ldr	r1, [r7, #4]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	4413      	add	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eba:	7bfb      	ldrb	r3, [r7, #15]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	73fb      	strb	r3, [r7, #15]
 8003ec0:	7bfa      	ldrb	r2, [r7, #15]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d3b5      	bcc.n	8003e36 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	603b      	str	r3, [r7, #0]
 8003ed0:	687e      	ldr	r6, [r7, #4]
 8003ed2:	466d      	mov	r5, sp
 8003ed4:	f106 0410 	add.w	r4, r6, #16
 8003ed8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003eda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003edc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ede:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ee0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ee4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ee8:	1d33      	adds	r3, r6, #4
 8003eea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003eec:	6838      	ldr	r0, [r7, #0]
 8003eee:	f008 f90b 	bl	800c108 <USB_DevInit>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d005      	beq.n	8003f04 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2202      	movs	r2, #2
 8003efc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e014      	b.n	8003f2e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d102      	bne.n	8003f22 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 f80b 	bl	8003f38 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f008 fac9 	bl	800c4be <USB_DevDisconnect>

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003f38 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f66:	4b05      	ldr	r3, [pc, #20]	; (8003f7c <HAL_PCDEx_ActivateLPM+0x44>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3714      	adds	r7, #20
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	10000003 	.word	0x10000003

08003f80 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003f88:	4b19      	ldr	r3, [pc, #100]	; (8003ff0 <HAL_PWREx_ConfigSupply+0x70>)
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	f003 0304 	and.w	r3, r3, #4
 8003f90:	2b04      	cmp	r3, #4
 8003f92:	d00a      	beq.n	8003faa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003f94:	4b16      	ldr	r3, [pc, #88]	; (8003ff0 <HAL_PWREx_ConfigSupply+0x70>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d001      	beq.n	8003fa6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e01f      	b.n	8003fe6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	e01d      	b.n	8003fe6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003faa:	4b11      	ldr	r3, [pc, #68]	; (8003ff0 <HAL_PWREx_ConfigSupply+0x70>)
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	f023 0207 	bic.w	r2, r3, #7
 8003fb2:	490f      	ldr	r1, [pc, #60]	; (8003ff0 <HAL_PWREx_ConfigSupply+0x70>)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003fba:	f7fe f9d5 	bl	8002368 <HAL_GetTick>
 8003fbe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003fc0:	e009      	b.n	8003fd6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003fc2:	f7fe f9d1 	bl	8002368 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fd0:	d901      	bls.n	8003fd6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e007      	b.n	8003fe6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003fd6:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <HAL_PWREx_ConfigSupply+0x70>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe2:	d1ee      	bne.n	8003fc2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	58024800 	.word	0x58024800

08003ff4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003ff8:	4b05      	ldr	r3, [pc, #20]	; (8004010 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	4a04      	ldr	r2, [pc, #16]	; (8004010 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003ffe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004002:	60d3      	str	r3, [r2, #12]
}
 8004004:	bf00      	nop
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	58024800 	.word	0x58024800

08004014 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af02      	add	r7, sp, #8
 800401a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800401c:	f7fe f9a4 	bl	8002368 <HAL_GetTick>
 8004020:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e05f      	b.n	80040ec <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	d107      	bne.n	8004048 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7fd fc4b 	bl	80018d4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800403e:	f241 3188 	movw	r1, #5000	; 0x1388
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f85a 	bl	80040fc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	3b01      	subs	r3, #1
 8004058:	021a      	lsls	r2, r3, #8
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	2120      	movs	r1, #32
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f852 	bl	8004118 <QSPI_WaitFlagStateUntilTimeout>
 8004074:	4603      	mov	r3, r0
 8004076:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004078:	7afb      	ldrb	r3, [r7, #11]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d135      	bne.n	80040ea <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	4b1b      	ldr	r3, [pc, #108]	; (80040f4 <HAL_QSPI_Init+0xe0>)
 8004086:	4013      	ands	r3, r2
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6852      	ldr	r2, [r2, #4]
 800408c:	0611      	lsls	r1, r2, #24
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	68d2      	ldr	r2, [r2, #12]
 8004092:	4311      	orrs	r1, r2
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	69d2      	ldr	r2, [r2, #28]
 8004098:	4311      	orrs	r1, r2
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6a12      	ldr	r2, [r2, #32]
 800409e:	4311      	orrs	r1, r2
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	6812      	ldr	r2, [r2, #0]
 80040a4:	430b      	orrs	r3, r1
 80040a6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	4b12      	ldr	r3, [pc, #72]	; (80040f8 <HAL_QSPI_Init+0xe4>)
 80040b0:	4013      	ands	r3, r2
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6912      	ldr	r2, [r2, #16]
 80040b6:	0411      	lsls	r1, r2, #16
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	6952      	ldr	r2, [r2, #20]
 80040bc:	4311      	orrs	r1, r2
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	6992      	ldr	r2, [r2, #24]
 80040c2:	4311      	orrs	r1, r2
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	6812      	ldr	r2, [r2, #0]
 80040c8:	430b      	orrs	r3, r1
 80040ca:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0201 	orr.w	r2, r2, #1
 80040da:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80040ea:	7afb      	ldrb	r3, [r7, #11]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	00ffff2f 	.word	0x00ffff2f
 80040f8:	ffe0f8fe 	.word	0xffe0f8fe

080040fc <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	603b      	str	r3, [r7, #0]
 8004124:	4613      	mov	r3, r2
 8004126:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004128:	e01a      	b.n	8004160 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004130:	d016      	beq.n	8004160 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004132:	f7fe f919 	bl	8002368 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	429a      	cmp	r2, r3
 8004140:	d302      	bcc.n	8004148 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10b      	bne.n	8004160 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2204      	movs	r2, #4
 800414c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004154:	f043 0201 	orr.w	r2, r3, #1
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e00e      	b.n	800417e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689a      	ldr	r2, [r3, #8]
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	4013      	ands	r3, r2
 800416a:	2b00      	cmp	r3, #0
 800416c:	bf14      	ite	ne
 800416e:	2301      	movne	r3, #1
 8004170:	2300      	moveq	r3, #0
 8004172:	b2db      	uxtb	r3, r3
 8004174:	461a      	mov	r2, r3
 8004176:	79fb      	ldrb	r3, [r7, #7]
 8004178:	429a      	cmp	r2, r3
 800417a:	d1d6      	bne.n	800412a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
	...

08004188 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b08c      	sub	sp, #48	; 0x30
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d102      	bne.n	800419c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	f000 bc48 	b.w	8004a2c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 8088 	beq.w	80042ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041aa:	4b99      	ldr	r3, [pc, #612]	; (8004410 <HAL_RCC_OscConfig+0x288>)
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80041b4:	4b96      	ldr	r3, [pc, #600]	; (8004410 <HAL_RCC_OscConfig+0x288>)
 80041b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80041ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041bc:	2b10      	cmp	r3, #16
 80041be:	d007      	beq.n	80041d0 <HAL_RCC_OscConfig+0x48>
 80041c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c2:	2b18      	cmp	r3, #24
 80041c4:	d111      	bne.n	80041ea <HAL_RCC_OscConfig+0x62>
 80041c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c8:	f003 0303 	and.w	r3, r3, #3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d10c      	bne.n	80041ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d0:	4b8f      	ldr	r3, [pc, #572]	; (8004410 <HAL_RCC_OscConfig+0x288>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d06d      	beq.n	80042b8 <HAL_RCC_OscConfig+0x130>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d169      	bne.n	80042b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	f000 bc21 	b.w	8004a2c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041f2:	d106      	bne.n	8004202 <HAL_RCC_OscConfig+0x7a>
 80041f4:	4b86      	ldr	r3, [pc, #536]	; (8004410 <HAL_RCC_OscConfig+0x288>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a85      	ldr	r2, [pc, #532]	; (8004410 <HAL_RCC_OscConfig+0x288>)
 80041fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041fe:	6013      	str	r3, [r2, #0]
 8004200:	e02e      	b.n	8004260 <HAL_RCC_OscConfig+0xd8>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10c      	bne.n	8004224 <HAL_RCC_OscConfig+0x9c>
 800420a:	4b81      	ldr	r3, [pc, #516]	; (8004410 <HAL_RCC_OscConfig+0x288>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a80      	ldr	r2, [pc, #512]	; (8004410 <HAL_RCC_OscConfig+0x288>)
 8004210:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004214:	6013      	str	r3, [r2, #0]
 8004216:	4b7e      	ldr	r3, [pc, #504]	; (8004410 <HAL_RCC_OscConfig+0x288>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a7d      	ldr	r2, [pc, #500]	; (8004410 <HAL_RCC_OscConfig+0x288>)
 800421c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004220:	6013      	str	r3, [r2, #0]
 8004222:	e01d      	b.n	8004260 <HAL_RCC_OscConfig+0xd8>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800422c:	d10c      	bne.n	8004248 <HAL_RCC_OscConfig+0xc0>
 800422e:	4b78      	ldr	r3, [pc, #480]	; (8004410 <HAL_RCC_OscConfig+0x288>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a77      	ldr	r2, [pc, #476]	; (8004410 <HAL_RCC_OscConfig+0x288>)
 8004234:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004238:	6013      	str	r3, [r2, #0]
 800423a:	4b75      	ldr	r3, [pc, #468]	; (8004410 <HAL_RCC_OscConfig+0x288>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a74      	ldr	r2, [pc, #464]	; (8004410 <HAL_RCC_OscConfig+0x288>)
 8004240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004244:	6013      	str	r3, [r2, #0]
 8004246:	e00b      	b.n	8004260 <HAL_RCC_OscConfig+0xd8>
 8004248:	4b71      	ldr	r3, [pc, #452]	; (8004410 <HAL_RCC_OscConfig+0x288>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a70      	ldr	r2, [pc, #448]	; (8004410 <HAL_RCC_OscConfig+0x288>)
 800424e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004252:	6013      	str	r3, [r2, #0]
 8004254:	4b6e      	ldr	r3, [pc, #440]	; (8004410 <HAL_RCC_OscConfig+0x288>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a6d      	ldr	r2, [pc, #436]	; (8004410 <HAL_RCC_OscConfig+0x288>)
 800425a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800425e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d013      	beq.n	8004290 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004268:	f7fe f87e 	bl	8002368 <HAL_GetTick>
 800426c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004270:	f7fe f87a 	bl	8002368 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b64      	cmp	r3, #100	; 0x64
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e3d4      	b.n	8004a2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004282:	4b63      	ldr	r3, [pc, #396]	; (8004410 <HAL_RCC_OscConfig+0x288>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0f0      	beq.n	8004270 <HAL_RCC_OscConfig+0xe8>
 800428e:	e014      	b.n	80042ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004290:	f7fe f86a 	bl	8002368 <HAL_GetTick>
 8004294:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004298:	f7fe f866 	bl	8002368 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b64      	cmp	r3, #100	; 0x64
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e3c0      	b.n	8004a2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80042aa:	4b59      	ldr	r3, [pc, #356]	; (8004410 <HAL_RCC_OscConfig+0x288>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1f0      	bne.n	8004298 <HAL_RCC_OscConfig+0x110>
 80042b6:	e000      	b.n	80042ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 80ca 	beq.w	800445c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042c8:	4b51      	ldr	r3, [pc, #324]	; (8004410 <HAL_RCC_OscConfig+0x288>)
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042d0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80042d2:	4b4f      	ldr	r3, [pc, #316]	; (8004410 <HAL_RCC_OscConfig+0x288>)
 80042d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80042d8:	6a3b      	ldr	r3, [r7, #32]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d007      	beq.n	80042ee <HAL_RCC_OscConfig+0x166>
 80042de:	6a3b      	ldr	r3, [r7, #32]
 80042e0:	2b18      	cmp	r3, #24
 80042e2:	d156      	bne.n	8004392 <HAL_RCC_OscConfig+0x20a>
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	f003 0303 	and.w	r3, r3, #3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d151      	bne.n	8004392 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042ee:	4b48      	ldr	r3, [pc, #288]	; (8004410 <HAL_RCC_OscConfig+0x288>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0304 	and.w	r3, r3, #4
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d005      	beq.n	8004306 <HAL_RCC_OscConfig+0x17e>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e392      	b.n	8004a2c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004306:	4b42      	ldr	r3, [pc, #264]	; (8004410 <HAL_RCC_OscConfig+0x288>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f023 0219 	bic.w	r2, r3, #25
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	493f      	ldr	r1, [pc, #252]	; (8004410 <HAL_RCC_OscConfig+0x288>)
 8004314:	4313      	orrs	r3, r2
 8004316:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004318:	f7fe f826 	bl	8002368 <HAL_GetTick>
 800431c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800431e:	e008      	b.n	8004332 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004320:	f7fe f822 	bl	8002368 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b02      	cmp	r3, #2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e37c      	b.n	8004a2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004332:	4b37      	ldr	r3, [pc, #220]	; (8004410 <HAL_RCC_OscConfig+0x288>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0304 	and.w	r3, r3, #4
 800433a:	2b00      	cmp	r3, #0
 800433c:	d0f0      	beq.n	8004320 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800433e:	f7fe f843 	bl	80023c8 <HAL_GetREVID>
 8004342:	4603      	mov	r3, r0
 8004344:	f241 0203 	movw	r2, #4099	; 0x1003
 8004348:	4293      	cmp	r3, r2
 800434a:	d817      	bhi.n	800437c <HAL_RCC_OscConfig+0x1f4>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	2b40      	cmp	r3, #64	; 0x40
 8004352:	d108      	bne.n	8004366 <HAL_RCC_OscConfig+0x1de>
 8004354:	4b2e      	ldr	r3, [pc, #184]	; (8004410 <HAL_RCC_OscConfig+0x288>)
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800435c:	4a2c      	ldr	r2, [pc, #176]	; (8004410 <HAL_RCC_OscConfig+0x288>)
 800435e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004362:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004364:	e07a      	b.n	800445c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004366:	4b2a      	ldr	r3, [pc, #168]	; (8004410 <HAL_RCC_OscConfig+0x288>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	031b      	lsls	r3, r3, #12
 8004374:	4926      	ldr	r1, [pc, #152]	; (8004410 <HAL_RCC_OscConfig+0x288>)
 8004376:	4313      	orrs	r3, r2
 8004378:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800437a:	e06f      	b.n	800445c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800437c:	4b24      	ldr	r3, [pc, #144]	; (8004410 <HAL_RCC_OscConfig+0x288>)
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	061b      	lsls	r3, r3, #24
 800438a:	4921      	ldr	r1, [pc, #132]	; (8004410 <HAL_RCC_OscConfig+0x288>)
 800438c:	4313      	orrs	r3, r2
 800438e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004390:	e064      	b.n	800445c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d047      	beq.n	800442a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800439a:	4b1d      	ldr	r3, [pc, #116]	; (8004410 <HAL_RCC_OscConfig+0x288>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f023 0219 	bic.w	r2, r3, #25
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	491a      	ldr	r1, [pc, #104]	; (8004410 <HAL_RCC_OscConfig+0x288>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ac:	f7fd ffdc 	bl	8002368 <HAL_GetTick>
 80043b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043b2:	e008      	b.n	80043c6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043b4:	f7fd ffd8 	bl	8002368 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e332      	b.n	8004a2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043c6:	4b12      	ldr	r3, [pc, #72]	; (8004410 <HAL_RCC_OscConfig+0x288>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0304 	and.w	r3, r3, #4
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d0f0      	beq.n	80043b4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043d2:	f7fd fff9 	bl	80023c8 <HAL_GetREVID>
 80043d6:	4603      	mov	r3, r0
 80043d8:	f241 0203 	movw	r2, #4099	; 0x1003
 80043dc:	4293      	cmp	r3, r2
 80043de:	d819      	bhi.n	8004414 <HAL_RCC_OscConfig+0x28c>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	2b40      	cmp	r3, #64	; 0x40
 80043e6:	d108      	bne.n	80043fa <HAL_RCC_OscConfig+0x272>
 80043e8:	4b09      	ldr	r3, [pc, #36]	; (8004410 <HAL_RCC_OscConfig+0x288>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80043f0:	4a07      	ldr	r2, [pc, #28]	; (8004410 <HAL_RCC_OscConfig+0x288>)
 80043f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043f6:	6053      	str	r3, [r2, #4]
 80043f8:	e030      	b.n	800445c <HAL_RCC_OscConfig+0x2d4>
 80043fa:	4b05      	ldr	r3, [pc, #20]	; (8004410 <HAL_RCC_OscConfig+0x288>)
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	031b      	lsls	r3, r3, #12
 8004408:	4901      	ldr	r1, [pc, #4]	; (8004410 <HAL_RCC_OscConfig+0x288>)
 800440a:	4313      	orrs	r3, r2
 800440c:	604b      	str	r3, [r1, #4]
 800440e:	e025      	b.n	800445c <HAL_RCC_OscConfig+0x2d4>
 8004410:	58024400 	.word	0x58024400
 8004414:	4b9a      	ldr	r3, [pc, #616]	; (8004680 <HAL_RCC_OscConfig+0x4f8>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	061b      	lsls	r3, r3, #24
 8004422:	4997      	ldr	r1, [pc, #604]	; (8004680 <HAL_RCC_OscConfig+0x4f8>)
 8004424:	4313      	orrs	r3, r2
 8004426:	604b      	str	r3, [r1, #4]
 8004428:	e018      	b.n	800445c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800442a:	4b95      	ldr	r3, [pc, #596]	; (8004680 <HAL_RCC_OscConfig+0x4f8>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a94      	ldr	r2, [pc, #592]	; (8004680 <HAL_RCC_OscConfig+0x4f8>)
 8004430:	f023 0301 	bic.w	r3, r3, #1
 8004434:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004436:	f7fd ff97 	bl	8002368 <HAL_GetTick>
 800443a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800443c:	e008      	b.n	8004450 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800443e:	f7fd ff93 	bl	8002368 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d901      	bls.n	8004450 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e2ed      	b.n	8004a2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004450:	4b8b      	ldr	r3, [pc, #556]	; (8004680 <HAL_RCC_OscConfig+0x4f8>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0304 	and.w	r3, r3, #4
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1f0      	bne.n	800443e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0310 	and.w	r3, r3, #16
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 80a9 	beq.w	80045bc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800446a:	4b85      	ldr	r3, [pc, #532]	; (8004680 <HAL_RCC_OscConfig+0x4f8>)
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004472:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004474:	4b82      	ldr	r3, [pc, #520]	; (8004680 <HAL_RCC_OscConfig+0x4f8>)
 8004476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004478:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	2b08      	cmp	r3, #8
 800447e:	d007      	beq.n	8004490 <HAL_RCC_OscConfig+0x308>
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	2b18      	cmp	r3, #24
 8004484:	d13a      	bne.n	80044fc <HAL_RCC_OscConfig+0x374>
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f003 0303 	and.w	r3, r3, #3
 800448c:	2b01      	cmp	r3, #1
 800448e:	d135      	bne.n	80044fc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004490:	4b7b      	ldr	r3, [pc, #492]	; (8004680 <HAL_RCC_OscConfig+0x4f8>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004498:	2b00      	cmp	r3, #0
 800449a:	d005      	beq.n	80044a8 <HAL_RCC_OscConfig+0x320>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	2b80      	cmp	r3, #128	; 0x80
 80044a2:	d001      	beq.n	80044a8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e2c1      	b.n	8004a2c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80044a8:	f7fd ff8e 	bl	80023c8 <HAL_GetREVID>
 80044ac:	4603      	mov	r3, r0
 80044ae:	f241 0203 	movw	r2, #4099	; 0x1003
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d817      	bhi.n	80044e6 <HAL_RCC_OscConfig+0x35e>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	2b20      	cmp	r3, #32
 80044bc:	d108      	bne.n	80044d0 <HAL_RCC_OscConfig+0x348>
 80044be:	4b70      	ldr	r3, [pc, #448]	; (8004680 <HAL_RCC_OscConfig+0x4f8>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80044c6:	4a6e      	ldr	r2, [pc, #440]	; (8004680 <HAL_RCC_OscConfig+0x4f8>)
 80044c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044cc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80044ce:	e075      	b.n	80045bc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80044d0:	4b6b      	ldr	r3, [pc, #428]	; (8004680 <HAL_RCC_OscConfig+0x4f8>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	069b      	lsls	r3, r3, #26
 80044de:	4968      	ldr	r1, [pc, #416]	; (8004680 <HAL_RCC_OscConfig+0x4f8>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80044e4:	e06a      	b.n	80045bc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80044e6:	4b66      	ldr	r3, [pc, #408]	; (8004680 <HAL_RCC_OscConfig+0x4f8>)
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	061b      	lsls	r3, r3, #24
 80044f4:	4962      	ldr	r1, [pc, #392]	; (8004680 <HAL_RCC_OscConfig+0x4f8>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80044fa:	e05f      	b.n	80045bc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	69db      	ldr	r3, [r3, #28]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d042      	beq.n	800458a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004504:	4b5e      	ldr	r3, [pc, #376]	; (8004680 <HAL_RCC_OscConfig+0x4f8>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a5d      	ldr	r2, [pc, #372]	; (8004680 <HAL_RCC_OscConfig+0x4f8>)
 800450a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800450e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004510:	f7fd ff2a 	bl	8002368 <HAL_GetTick>
 8004514:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004516:	e008      	b.n	800452a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004518:	f7fd ff26 	bl	8002368 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b02      	cmp	r3, #2
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e280      	b.n	8004a2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800452a:	4b55      	ldr	r3, [pc, #340]	; (8004680 <HAL_RCC_OscConfig+0x4f8>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004532:	2b00      	cmp	r3, #0
 8004534:	d0f0      	beq.n	8004518 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004536:	f7fd ff47 	bl	80023c8 <HAL_GetREVID>
 800453a:	4603      	mov	r3, r0
 800453c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004540:	4293      	cmp	r3, r2
 8004542:	d817      	bhi.n	8004574 <HAL_RCC_OscConfig+0x3ec>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	2b20      	cmp	r3, #32
 800454a:	d108      	bne.n	800455e <HAL_RCC_OscConfig+0x3d6>
 800454c:	4b4c      	ldr	r3, [pc, #304]	; (8004680 <HAL_RCC_OscConfig+0x4f8>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004554:	4a4a      	ldr	r2, [pc, #296]	; (8004680 <HAL_RCC_OscConfig+0x4f8>)
 8004556:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800455a:	6053      	str	r3, [r2, #4]
 800455c:	e02e      	b.n	80045bc <HAL_RCC_OscConfig+0x434>
 800455e:	4b48      	ldr	r3, [pc, #288]	; (8004680 <HAL_RCC_OscConfig+0x4f8>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	069b      	lsls	r3, r3, #26
 800456c:	4944      	ldr	r1, [pc, #272]	; (8004680 <HAL_RCC_OscConfig+0x4f8>)
 800456e:	4313      	orrs	r3, r2
 8004570:	604b      	str	r3, [r1, #4]
 8004572:	e023      	b.n	80045bc <HAL_RCC_OscConfig+0x434>
 8004574:	4b42      	ldr	r3, [pc, #264]	; (8004680 <HAL_RCC_OscConfig+0x4f8>)
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	061b      	lsls	r3, r3, #24
 8004582:	493f      	ldr	r1, [pc, #252]	; (8004680 <HAL_RCC_OscConfig+0x4f8>)
 8004584:	4313      	orrs	r3, r2
 8004586:	60cb      	str	r3, [r1, #12]
 8004588:	e018      	b.n	80045bc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800458a:	4b3d      	ldr	r3, [pc, #244]	; (8004680 <HAL_RCC_OscConfig+0x4f8>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a3c      	ldr	r2, [pc, #240]	; (8004680 <HAL_RCC_OscConfig+0x4f8>)
 8004590:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004594:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004596:	f7fd fee7 	bl	8002368 <HAL_GetTick>
 800459a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800459c:	e008      	b.n	80045b0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800459e:	f7fd fee3 	bl	8002368 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d901      	bls.n	80045b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e23d      	b.n	8004a2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80045b0:	4b33      	ldr	r3, [pc, #204]	; (8004680 <HAL_RCC_OscConfig+0x4f8>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1f0      	bne.n	800459e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0308 	and.w	r3, r3, #8
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d036      	beq.n	8004636 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d019      	beq.n	8004604 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045d0:	4b2b      	ldr	r3, [pc, #172]	; (8004680 <HAL_RCC_OscConfig+0x4f8>)
 80045d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045d4:	4a2a      	ldr	r2, [pc, #168]	; (8004680 <HAL_RCC_OscConfig+0x4f8>)
 80045d6:	f043 0301 	orr.w	r3, r3, #1
 80045da:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045dc:	f7fd fec4 	bl	8002368 <HAL_GetTick>
 80045e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045e4:	f7fd fec0 	bl	8002368 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e21a      	b.n	8004a2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80045f6:	4b22      	ldr	r3, [pc, #136]	; (8004680 <HAL_RCC_OscConfig+0x4f8>)
 80045f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d0f0      	beq.n	80045e4 <HAL_RCC_OscConfig+0x45c>
 8004602:	e018      	b.n	8004636 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004604:	4b1e      	ldr	r3, [pc, #120]	; (8004680 <HAL_RCC_OscConfig+0x4f8>)
 8004606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004608:	4a1d      	ldr	r2, [pc, #116]	; (8004680 <HAL_RCC_OscConfig+0x4f8>)
 800460a:	f023 0301 	bic.w	r3, r3, #1
 800460e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004610:	f7fd feaa 	bl	8002368 <HAL_GetTick>
 8004614:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004616:	e008      	b.n	800462a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004618:	f7fd fea6 	bl	8002368 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e200      	b.n	8004a2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800462a:	4b15      	ldr	r3, [pc, #84]	; (8004680 <HAL_RCC_OscConfig+0x4f8>)
 800462c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1f0      	bne.n	8004618 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0320 	and.w	r3, r3, #32
 800463e:	2b00      	cmp	r3, #0
 8004640:	d039      	beq.n	80046b6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d01c      	beq.n	8004684 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800464a:	4b0d      	ldr	r3, [pc, #52]	; (8004680 <HAL_RCC_OscConfig+0x4f8>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a0c      	ldr	r2, [pc, #48]	; (8004680 <HAL_RCC_OscConfig+0x4f8>)
 8004650:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004654:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004656:	f7fd fe87 	bl	8002368 <HAL_GetTick>
 800465a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800465c:	e008      	b.n	8004670 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800465e:	f7fd fe83 	bl	8002368 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d901      	bls.n	8004670 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e1dd      	b.n	8004a2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004670:	4b03      	ldr	r3, [pc, #12]	; (8004680 <HAL_RCC_OscConfig+0x4f8>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d0f0      	beq.n	800465e <HAL_RCC_OscConfig+0x4d6>
 800467c:	e01b      	b.n	80046b6 <HAL_RCC_OscConfig+0x52e>
 800467e:	bf00      	nop
 8004680:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004684:	4b9b      	ldr	r3, [pc, #620]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a9a      	ldr	r2, [pc, #616]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 800468a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800468e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004690:	f7fd fe6a 	bl	8002368 <HAL_GetTick>
 8004694:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004696:	e008      	b.n	80046aa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004698:	f7fd fe66 	bl	8002368 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e1c0      	b.n	8004a2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80046aa:	4b92      	ldr	r3, [pc, #584]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1f0      	bne.n	8004698 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0304 	and.w	r3, r3, #4
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 8081 	beq.w	80047c6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80046c4:	4b8c      	ldr	r3, [pc, #560]	; (80048f8 <HAL_RCC_OscConfig+0x770>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a8b      	ldr	r2, [pc, #556]	; (80048f8 <HAL_RCC_OscConfig+0x770>)
 80046ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046d0:	f7fd fe4a 	bl	8002368 <HAL_GetTick>
 80046d4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046d6:	e008      	b.n	80046ea <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046d8:	f7fd fe46 	bl	8002368 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b64      	cmp	r3, #100	; 0x64
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e1a0      	b.n	8004a2c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046ea:	4b83      	ldr	r3, [pc, #524]	; (80048f8 <HAL_RCC_OscConfig+0x770>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d0f0      	beq.n	80046d8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d106      	bne.n	800470c <HAL_RCC_OscConfig+0x584>
 80046fe:	4b7d      	ldr	r3, [pc, #500]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 8004700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004702:	4a7c      	ldr	r2, [pc, #496]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 8004704:	f043 0301 	orr.w	r3, r3, #1
 8004708:	6713      	str	r3, [r2, #112]	; 0x70
 800470a:	e02d      	b.n	8004768 <HAL_RCC_OscConfig+0x5e0>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d10c      	bne.n	800472e <HAL_RCC_OscConfig+0x5a6>
 8004714:	4b77      	ldr	r3, [pc, #476]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 8004716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004718:	4a76      	ldr	r2, [pc, #472]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 800471a:	f023 0301 	bic.w	r3, r3, #1
 800471e:	6713      	str	r3, [r2, #112]	; 0x70
 8004720:	4b74      	ldr	r3, [pc, #464]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 8004722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004724:	4a73      	ldr	r2, [pc, #460]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 8004726:	f023 0304 	bic.w	r3, r3, #4
 800472a:	6713      	str	r3, [r2, #112]	; 0x70
 800472c:	e01c      	b.n	8004768 <HAL_RCC_OscConfig+0x5e0>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	2b05      	cmp	r3, #5
 8004734:	d10c      	bne.n	8004750 <HAL_RCC_OscConfig+0x5c8>
 8004736:	4b6f      	ldr	r3, [pc, #444]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 8004738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473a:	4a6e      	ldr	r2, [pc, #440]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 800473c:	f043 0304 	orr.w	r3, r3, #4
 8004740:	6713      	str	r3, [r2, #112]	; 0x70
 8004742:	4b6c      	ldr	r3, [pc, #432]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 8004744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004746:	4a6b      	ldr	r2, [pc, #428]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 8004748:	f043 0301 	orr.w	r3, r3, #1
 800474c:	6713      	str	r3, [r2, #112]	; 0x70
 800474e:	e00b      	b.n	8004768 <HAL_RCC_OscConfig+0x5e0>
 8004750:	4b68      	ldr	r3, [pc, #416]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 8004752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004754:	4a67      	ldr	r2, [pc, #412]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 8004756:	f023 0301 	bic.w	r3, r3, #1
 800475a:	6713      	str	r3, [r2, #112]	; 0x70
 800475c:	4b65      	ldr	r3, [pc, #404]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 800475e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004760:	4a64      	ldr	r2, [pc, #400]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 8004762:	f023 0304 	bic.w	r3, r3, #4
 8004766:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d015      	beq.n	800479c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004770:	f7fd fdfa 	bl	8002368 <HAL_GetTick>
 8004774:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004776:	e00a      	b.n	800478e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004778:	f7fd fdf6 	bl	8002368 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	f241 3288 	movw	r2, #5000	; 0x1388
 8004786:	4293      	cmp	r3, r2
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e14e      	b.n	8004a2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800478e:	4b59      	ldr	r3, [pc, #356]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 8004790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d0ee      	beq.n	8004778 <HAL_RCC_OscConfig+0x5f0>
 800479a:	e014      	b.n	80047c6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800479c:	f7fd fde4 	bl	8002368 <HAL_GetTick>
 80047a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80047a2:	e00a      	b.n	80047ba <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047a4:	f7fd fde0 	bl	8002368 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e138      	b.n	8004a2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80047ba:	4b4e      	ldr	r3, [pc, #312]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 80047bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1ee      	bne.n	80047a4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f000 812d 	beq.w	8004a2a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80047d0:	4b48      	ldr	r3, [pc, #288]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047d8:	2b18      	cmp	r3, #24
 80047da:	f000 80bd 	beq.w	8004958 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	f040 809e 	bne.w	8004924 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047e8:	4b42      	ldr	r3, [pc, #264]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a41      	ldr	r2, [pc, #260]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 80047ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f4:	f7fd fdb8 	bl	8002368 <HAL_GetTick>
 80047f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047fa:	e008      	b.n	800480e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047fc:	f7fd fdb4 	bl	8002368 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b02      	cmp	r3, #2
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e10e      	b.n	8004a2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800480e:	4b39      	ldr	r3, [pc, #228]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1f0      	bne.n	80047fc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800481a:	4b36      	ldr	r3, [pc, #216]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 800481c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800481e:	4b37      	ldr	r3, [pc, #220]	; (80048fc <HAL_RCC_OscConfig+0x774>)
 8004820:	4013      	ands	r3, r2
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800482a:	0112      	lsls	r2, r2, #4
 800482c:	430a      	orrs	r2, r1
 800482e:	4931      	ldr	r1, [pc, #196]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 8004830:	4313      	orrs	r3, r2
 8004832:	628b      	str	r3, [r1, #40]	; 0x28
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004838:	3b01      	subs	r3, #1
 800483a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004842:	3b01      	subs	r3, #1
 8004844:	025b      	lsls	r3, r3, #9
 8004846:	b29b      	uxth	r3, r3
 8004848:	431a      	orrs	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484e:	3b01      	subs	r3, #1
 8004850:	041b      	lsls	r3, r3, #16
 8004852:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004856:	431a      	orrs	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800485c:	3b01      	subs	r3, #1
 800485e:	061b      	lsls	r3, r3, #24
 8004860:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004864:	4923      	ldr	r1, [pc, #140]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 8004866:	4313      	orrs	r3, r2
 8004868:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800486a:	4b22      	ldr	r3, [pc, #136]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 800486c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486e:	4a21      	ldr	r2, [pc, #132]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 8004870:	f023 0301 	bic.w	r3, r3, #1
 8004874:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004876:	4b1f      	ldr	r3, [pc, #124]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 8004878:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800487a:	4b21      	ldr	r3, [pc, #132]	; (8004900 <HAL_RCC_OscConfig+0x778>)
 800487c:	4013      	ands	r3, r2
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004882:	00d2      	lsls	r2, r2, #3
 8004884:	491b      	ldr	r1, [pc, #108]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 8004886:	4313      	orrs	r3, r2
 8004888:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800488a:	4b1a      	ldr	r3, [pc, #104]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 800488c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488e:	f023 020c 	bic.w	r2, r3, #12
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004896:	4917      	ldr	r1, [pc, #92]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 8004898:	4313      	orrs	r3, r2
 800489a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800489c:	4b15      	ldr	r3, [pc, #84]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 800489e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a0:	f023 0202 	bic.w	r2, r3, #2
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a8:	4912      	ldr	r1, [pc, #72]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80048ae:	4b11      	ldr	r3, [pc, #68]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 80048b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b2:	4a10      	ldr	r2, [pc, #64]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 80048b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048ba:	4b0e      	ldr	r3, [pc, #56]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 80048bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048be:	4a0d      	ldr	r2, [pc, #52]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 80048c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80048c6:	4b0b      	ldr	r3, [pc, #44]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 80048c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ca:	4a0a      	ldr	r2, [pc, #40]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 80048cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80048d2:	4b08      	ldr	r3, [pc, #32]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 80048d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d6:	4a07      	ldr	r2, [pc, #28]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 80048d8:	f043 0301 	orr.w	r3, r3, #1
 80048dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048de:	4b05      	ldr	r3, [pc, #20]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a04      	ldr	r2, [pc, #16]	; (80048f4 <HAL_RCC_OscConfig+0x76c>)
 80048e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ea:	f7fd fd3d 	bl	8002368 <HAL_GetTick>
 80048ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048f0:	e011      	b.n	8004916 <HAL_RCC_OscConfig+0x78e>
 80048f2:	bf00      	nop
 80048f4:	58024400 	.word	0x58024400
 80048f8:	58024800 	.word	0x58024800
 80048fc:	fffffc0c 	.word	0xfffffc0c
 8004900:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004904:	f7fd fd30 	bl	8002368 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e08a      	b.n	8004a2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004916:	4b47      	ldr	r3, [pc, #284]	; (8004a34 <HAL_RCC_OscConfig+0x8ac>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d0f0      	beq.n	8004904 <HAL_RCC_OscConfig+0x77c>
 8004922:	e082      	b.n	8004a2a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004924:	4b43      	ldr	r3, [pc, #268]	; (8004a34 <HAL_RCC_OscConfig+0x8ac>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a42      	ldr	r2, [pc, #264]	; (8004a34 <HAL_RCC_OscConfig+0x8ac>)
 800492a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800492e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004930:	f7fd fd1a 	bl	8002368 <HAL_GetTick>
 8004934:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004936:	e008      	b.n	800494a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004938:	f7fd fd16 	bl	8002368 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b02      	cmp	r3, #2
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e070      	b.n	8004a2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800494a:	4b3a      	ldr	r3, [pc, #232]	; (8004a34 <HAL_RCC_OscConfig+0x8ac>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1f0      	bne.n	8004938 <HAL_RCC_OscConfig+0x7b0>
 8004956:	e068      	b.n	8004a2a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004958:	4b36      	ldr	r3, [pc, #216]	; (8004a34 <HAL_RCC_OscConfig+0x8ac>)
 800495a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800495e:	4b35      	ldr	r3, [pc, #212]	; (8004a34 <HAL_RCC_OscConfig+0x8ac>)
 8004960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004962:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004968:	2b01      	cmp	r3, #1
 800496a:	d031      	beq.n	80049d0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	f003 0203 	and.w	r2, r3, #3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004976:	429a      	cmp	r2, r3
 8004978:	d12a      	bne.n	80049d0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	091b      	lsrs	r3, r3, #4
 800497e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004986:	429a      	cmp	r2, r3
 8004988:	d122      	bne.n	80049d0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004994:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004996:	429a      	cmp	r2, r3
 8004998:	d11a      	bne.n	80049d0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	0a5b      	lsrs	r3, r3, #9
 800499e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d111      	bne.n	80049d0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	0c1b      	lsrs	r3, r3, #16
 80049b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d108      	bne.n	80049d0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	0e1b      	lsrs	r3, r3, #24
 80049c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ca:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d001      	beq.n	80049d4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e02b      	b.n	8004a2c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80049d4:	4b17      	ldr	r3, [pc, #92]	; (8004a34 <HAL_RCC_OscConfig+0x8ac>)
 80049d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d8:	08db      	lsrs	r3, r3, #3
 80049da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049de:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d01f      	beq.n	8004a2a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80049ea:	4b12      	ldr	r3, [pc, #72]	; (8004a34 <HAL_RCC_OscConfig+0x8ac>)
 80049ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ee:	4a11      	ldr	r2, [pc, #68]	; (8004a34 <HAL_RCC_OscConfig+0x8ac>)
 80049f0:	f023 0301 	bic.w	r3, r3, #1
 80049f4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80049f6:	f7fd fcb7 	bl	8002368 <HAL_GetTick>
 80049fa:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80049fc:	bf00      	nop
 80049fe:	f7fd fcb3 	bl	8002368 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d0f9      	beq.n	80049fe <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004a0a:	4b0a      	ldr	r3, [pc, #40]	; (8004a34 <HAL_RCC_OscConfig+0x8ac>)
 8004a0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a0e:	4b0a      	ldr	r3, [pc, #40]	; (8004a38 <HAL_RCC_OscConfig+0x8b0>)
 8004a10:	4013      	ands	r3, r2
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004a16:	00d2      	lsls	r2, r2, #3
 8004a18:	4906      	ldr	r1, [pc, #24]	; (8004a34 <HAL_RCC_OscConfig+0x8ac>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004a1e:	4b05      	ldr	r3, [pc, #20]	; (8004a34 <HAL_RCC_OscConfig+0x8ac>)
 8004a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a22:	4a04      	ldr	r2, [pc, #16]	; (8004a34 <HAL_RCC_OscConfig+0x8ac>)
 8004a24:	f043 0301 	orr.w	r3, r3, #1
 8004a28:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3730      	adds	r7, #48	; 0x30
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	58024400 	.word	0x58024400
 8004a38:	ffff0007 	.word	0xffff0007

08004a3c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d101      	bne.n	8004a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e19c      	b.n	8004d8a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a50:	4b8a      	ldr	r3, [pc, #552]	; (8004c7c <HAL_RCC_ClockConfig+0x240>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 030f 	and.w	r3, r3, #15
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d910      	bls.n	8004a80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a5e:	4b87      	ldr	r3, [pc, #540]	; (8004c7c <HAL_RCC_ClockConfig+0x240>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f023 020f 	bic.w	r2, r3, #15
 8004a66:	4985      	ldr	r1, [pc, #532]	; (8004c7c <HAL_RCC_ClockConfig+0x240>)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a6e:	4b83      	ldr	r3, [pc, #524]	; (8004c7c <HAL_RCC_ClockConfig+0x240>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 030f 	and.w	r3, r3, #15
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d001      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e184      	b.n	8004d8a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0304 	and.w	r3, r3, #4
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d010      	beq.n	8004aae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	691a      	ldr	r2, [r3, #16]
 8004a90:	4b7b      	ldr	r3, [pc, #492]	; (8004c80 <HAL_RCC_ClockConfig+0x244>)
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d908      	bls.n	8004aae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004a9c:	4b78      	ldr	r3, [pc, #480]	; (8004c80 <HAL_RCC_ClockConfig+0x244>)
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	4975      	ldr	r1, [pc, #468]	; (8004c80 <HAL_RCC_ClockConfig+0x244>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0308 	and.w	r3, r3, #8
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d010      	beq.n	8004adc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	695a      	ldr	r2, [r3, #20]
 8004abe:	4b70      	ldr	r3, [pc, #448]	; (8004c80 <HAL_RCC_ClockConfig+0x244>)
 8004ac0:	69db      	ldr	r3, [r3, #28]
 8004ac2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d908      	bls.n	8004adc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004aca:	4b6d      	ldr	r3, [pc, #436]	; (8004c80 <HAL_RCC_ClockConfig+0x244>)
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	496a      	ldr	r1, [pc, #424]	; (8004c80 <HAL_RCC_ClockConfig+0x244>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0310 	and.w	r3, r3, #16
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d010      	beq.n	8004b0a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	699a      	ldr	r2, [r3, #24]
 8004aec:	4b64      	ldr	r3, [pc, #400]	; (8004c80 <HAL_RCC_ClockConfig+0x244>)
 8004aee:	69db      	ldr	r3, [r3, #28]
 8004af0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d908      	bls.n	8004b0a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004af8:	4b61      	ldr	r3, [pc, #388]	; (8004c80 <HAL_RCC_ClockConfig+0x244>)
 8004afa:	69db      	ldr	r3, [r3, #28]
 8004afc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	495e      	ldr	r1, [pc, #376]	; (8004c80 <HAL_RCC_ClockConfig+0x244>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0320 	and.w	r3, r3, #32
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d010      	beq.n	8004b38 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	69da      	ldr	r2, [r3, #28]
 8004b1a:	4b59      	ldr	r3, [pc, #356]	; (8004c80 <HAL_RCC_ClockConfig+0x244>)
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d908      	bls.n	8004b38 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004b26:	4b56      	ldr	r3, [pc, #344]	; (8004c80 <HAL_RCC_ClockConfig+0x244>)
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	69db      	ldr	r3, [r3, #28]
 8004b32:	4953      	ldr	r1, [pc, #332]	; (8004c80 <HAL_RCC_ClockConfig+0x244>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d010      	beq.n	8004b66 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68da      	ldr	r2, [r3, #12]
 8004b48:	4b4d      	ldr	r3, [pc, #308]	; (8004c80 <HAL_RCC_ClockConfig+0x244>)
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	f003 030f 	and.w	r3, r3, #15
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d908      	bls.n	8004b66 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b54:	4b4a      	ldr	r3, [pc, #296]	; (8004c80 <HAL_RCC_ClockConfig+0x244>)
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	f023 020f 	bic.w	r2, r3, #15
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	4947      	ldr	r1, [pc, #284]	; (8004c80 <HAL_RCC_ClockConfig+0x244>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d055      	beq.n	8004c1e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004b72:	4b43      	ldr	r3, [pc, #268]	; (8004c80 <HAL_RCC_ClockConfig+0x244>)
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	4940      	ldr	r1, [pc, #256]	; (8004c80 <HAL_RCC_ClockConfig+0x244>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d107      	bne.n	8004b9c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b8c:	4b3c      	ldr	r3, [pc, #240]	; (8004c80 <HAL_RCC_ClockConfig+0x244>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d121      	bne.n	8004bdc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e0f6      	b.n	8004d8a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	2b03      	cmp	r3, #3
 8004ba2:	d107      	bne.n	8004bb4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ba4:	4b36      	ldr	r3, [pc, #216]	; (8004c80 <HAL_RCC_ClockConfig+0x244>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d115      	bne.n	8004bdc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e0ea      	b.n	8004d8a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d107      	bne.n	8004bcc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004bbc:	4b30      	ldr	r3, [pc, #192]	; (8004c80 <HAL_RCC_ClockConfig+0x244>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d109      	bne.n	8004bdc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e0de      	b.n	8004d8a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bcc:	4b2c      	ldr	r3, [pc, #176]	; (8004c80 <HAL_RCC_ClockConfig+0x244>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0304 	and.w	r3, r3, #4
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e0d6      	b.n	8004d8a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004bdc:	4b28      	ldr	r3, [pc, #160]	; (8004c80 <HAL_RCC_ClockConfig+0x244>)
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	f023 0207 	bic.w	r2, r3, #7
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	4925      	ldr	r1, [pc, #148]	; (8004c80 <HAL_RCC_ClockConfig+0x244>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bee:	f7fd fbbb 	bl	8002368 <HAL_GetTick>
 8004bf2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bf4:	e00a      	b.n	8004c0c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bf6:	f7fd fbb7 	bl	8002368 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d901      	bls.n	8004c0c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e0be      	b.n	8004d8a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c0c:	4b1c      	ldr	r3, [pc, #112]	; (8004c80 <HAL_RCC_ClockConfig+0x244>)
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	00db      	lsls	r3, r3, #3
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d1eb      	bne.n	8004bf6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d010      	beq.n	8004c4c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68da      	ldr	r2, [r3, #12]
 8004c2e:	4b14      	ldr	r3, [pc, #80]	; (8004c80 <HAL_RCC_ClockConfig+0x244>)
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	f003 030f 	and.w	r3, r3, #15
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d208      	bcs.n	8004c4c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c3a:	4b11      	ldr	r3, [pc, #68]	; (8004c80 <HAL_RCC_ClockConfig+0x244>)
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	f023 020f 	bic.w	r2, r3, #15
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	490e      	ldr	r1, [pc, #56]	; (8004c80 <HAL_RCC_ClockConfig+0x244>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c4c:	4b0b      	ldr	r3, [pc, #44]	; (8004c7c <HAL_RCC_ClockConfig+0x240>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 030f 	and.w	r3, r3, #15
 8004c54:	683a      	ldr	r2, [r7, #0]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d214      	bcs.n	8004c84 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c5a:	4b08      	ldr	r3, [pc, #32]	; (8004c7c <HAL_RCC_ClockConfig+0x240>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f023 020f 	bic.w	r2, r3, #15
 8004c62:	4906      	ldr	r1, [pc, #24]	; (8004c7c <HAL_RCC_ClockConfig+0x240>)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c6a:	4b04      	ldr	r3, [pc, #16]	; (8004c7c <HAL_RCC_ClockConfig+0x240>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 030f 	and.w	r3, r3, #15
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d005      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e086      	b.n	8004d8a <HAL_RCC_ClockConfig+0x34e>
 8004c7c:	52002000 	.word	0x52002000
 8004c80:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0304 	and.w	r3, r3, #4
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d010      	beq.n	8004cb2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	691a      	ldr	r2, [r3, #16]
 8004c94:	4b3f      	ldr	r3, [pc, #252]	; (8004d94 <HAL_RCC_ClockConfig+0x358>)
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d208      	bcs.n	8004cb2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004ca0:	4b3c      	ldr	r3, [pc, #240]	; (8004d94 <HAL_RCC_ClockConfig+0x358>)
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	4939      	ldr	r1, [pc, #228]	; (8004d94 <HAL_RCC_ClockConfig+0x358>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0308 	and.w	r3, r3, #8
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d010      	beq.n	8004ce0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	695a      	ldr	r2, [r3, #20]
 8004cc2:	4b34      	ldr	r3, [pc, #208]	; (8004d94 <HAL_RCC_ClockConfig+0x358>)
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d208      	bcs.n	8004ce0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004cce:	4b31      	ldr	r3, [pc, #196]	; (8004d94 <HAL_RCC_ClockConfig+0x358>)
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	492e      	ldr	r1, [pc, #184]	; (8004d94 <HAL_RCC_ClockConfig+0x358>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0310 	and.w	r3, r3, #16
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d010      	beq.n	8004d0e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	699a      	ldr	r2, [r3, #24]
 8004cf0:	4b28      	ldr	r3, [pc, #160]	; (8004d94 <HAL_RCC_ClockConfig+0x358>)
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d208      	bcs.n	8004d0e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004cfc:	4b25      	ldr	r3, [pc, #148]	; (8004d94 <HAL_RCC_ClockConfig+0x358>)
 8004cfe:	69db      	ldr	r3, [r3, #28]
 8004d00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	4922      	ldr	r1, [pc, #136]	; (8004d94 <HAL_RCC_ClockConfig+0x358>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0320 	and.w	r3, r3, #32
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d010      	beq.n	8004d3c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	69da      	ldr	r2, [r3, #28]
 8004d1e:	4b1d      	ldr	r3, [pc, #116]	; (8004d94 <HAL_RCC_ClockConfig+0x358>)
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d208      	bcs.n	8004d3c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004d2a:	4b1a      	ldr	r3, [pc, #104]	; (8004d94 <HAL_RCC_ClockConfig+0x358>)
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	4917      	ldr	r1, [pc, #92]	; (8004d94 <HAL_RCC_ClockConfig+0x358>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004d3c:	f000 f834 	bl	8004da8 <HAL_RCC_GetSysClockFreq>
 8004d40:	4602      	mov	r2, r0
 8004d42:	4b14      	ldr	r3, [pc, #80]	; (8004d94 <HAL_RCC_ClockConfig+0x358>)
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	0a1b      	lsrs	r3, r3, #8
 8004d48:	f003 030f 	and.w	r3, r3, #15
 8004d4c:	4912      	ldr	r1, [pc, #72]	; (8004d98 <HAL_RCC_ClockConfig+0x35c>)
 8004d4e:	5ccb      	ldrb	r3, [r1, r3]
 8004d50:	f003 031f 	and.w	r3, r3, #31
 8004d54:	fa22 f303 	lsr.w	r3, r2, r3
 8004d58:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004d5a:	4b0e      	ldr	r3, [pc, #56]	; (8004d94 <HAL_RCC_ClockConfig+0x358>)
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	f003 030f 	and.w	r3, r3, #15
 8004d62:	4a0d      	ldr	r2, [pc, #52]	; (8004d98 <HAL_RCC_ClockConfig+0x35c>)
 8004d64:	5cd3      	ldrb	r3, [r2, r3]
 8004d66:	f003 031f 	and.w	r3, r3, #31
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d70:	4a0a      	ldr	r2, [pc, #40]	; (8004d9c <HAL_RCC_ClockConfig+0x360>)
 8004d72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d74:	4a0a      	ldr	r2, [pc, #40]	; (8004da0 <HAL_RCC_ClockConfig+0x364>)
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004d7a:	4b0a      	ldr	r3, [pc, #40]	; (8004da4 <HAL_RCC_ClockConfig+0x368>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7fd faa8 	bl	80022d4 <HAL_InitTick>
 8004d84:	4603      	mov	r3, r0
 8004d86:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3718      	adds	r7, #24
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	58024400 	.word	0x58024400
 8004d98:	0800c5f4 	.word	0x0800c5f4
 8004d9c:	24000004 	.word	0x24000004
 8004da0:	24000000 	.word	0x24000000
 8004da4:	24000008 	.word	0x24000008

08004da8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b089      	sub	sp, #36	; 0x24
 8004dac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dae:	4bb3      	ldr	r3, [pc, #716]	; (800507c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004db6:	2b18      	cmp	r3, #24
 8004db8:	f200 8155 	bhi.w	8005066 <HAL_RCC_GetSysClockFreq+0x2be>
 8004dbc:	a201      	add	r2, pc, #4	; (adr r2, 8004dc4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc2:	bf00      	nop
 8004dc4:	08004e29 	.word	0x08004e29
 8004dc8:	08005067 	.word	0x08005067
 8004dcc:	08005067 	.word	0x08005067
 8004dd0:	08005067 	.word	0x08005067
 8004dd4:	08005067 	.word	0x08005067
 8004dd8:	08005067 	.word	0x08005067
 8004ddc:	08005067 	.word	0x08005067
 8004de0:	08005067 	.word	0x08005067
 8004de4:	08004e4f 	.word	0x08004e4f
 8004de8:	08005067 	.word	0x08005067
 8004dec:	08005067 	.word	0x08005067
 8004df0:	08005067 	.word	0x08005067
 8004df4:	08005067 	.word	0x08005067
 8004df8:	08005067 	.word	0x08005067
 8004dfc:	08005067 	.word	0x08005067
 8004e00:	08005067 	.word	0x08005067
 8004e04:	08004e55 	.word	0x08004e55
 8004e08:	08005067 	.word	0x08005067
 8004e0c:	08005067 	.word	0x08005067
 8004e10:	08005067 	.word	0x08005067
 8004e14:	08005067 	.word	0x08005067
 8004e18:	08005067 	.word	0x08005067
 8004e1c:	08005067 	.word	0x08005067
 8004e20:	08005067 	.word	0x08005067
 8004e24:	08004e5b 	.word	0x08004e5b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e28:	4b94      	ldr	r3, [pc, #592]	; (800507c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0320 	and.w	r3, r3, #32
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d009      	beq.n	8004e48 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e34:	4b91      	ldr	r3, [pc, #580]	; (800507c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	08db      	lsrs	r3, r3, #3
 8004e3a:	f003 0303 	and.w	r3, r3, #3
 8004e3e:	4a90      	ldr	r2, [pc, #576]	; (8005080 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004e40:	fa22 f303 	lsr.w	r3, r2, r3
 8004e44:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004e46:	e111      	b.n	800506c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004e48:	4b8d      	ldr	r3, [pc, #564]	; (8005080 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004e4a:	61bb      	str	r3, [r7, #24]
      break;
 8004e4c:	e10e      	b.n	800506c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004e4e:	4b8d      	ldr	r3, [pc, #564]	; (8005084 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004e50:	61bb      	str	r3, [r7, #24]
      break;
 8004e52:	e10b      	b.n	800506c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004e54:	4b8c      	ldr	r3, [pc, #560]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004e56:	61bb      	str	r3, [r7, #24]
      break;
 8004e58:	e108      	b.n	800506c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e5a:	4b88      	ldr	r3, [pc, #544]	; (800507c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5e:	f003 0303 	and.w	r3, r3, #3
 8004e62:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004e64:	4b85      	ldr	r3, [pc, #532]	; (800507c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e68:	091b      	lsrs	r3, r3, #4
 8004e6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e6e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004e70:	4b82      	ldr	r3, [pc, #520]	; (800507c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004e7a:	4b80      	ldr	r3, [pc, #512]	; (800507c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e7e:	08db      	lsrs	r3, r3, #3
 8004e80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	fb02 f303 	mul.w	r3, r2, r3
 8004e8a:	ee07 3a90 	vmov	s15, r3
 8004e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e92:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 80e1 	beq.w	8005060 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	f000 8083 	beq.w	8004fac <HAL_RCC_GetSysClockFreq+0x204>
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	f200 80a1 	bhi.w	8004ff0 <HAL_RCC_GetSysClockFreq+0x248>
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d003      	beq.n	8004ebc <HAL_RCC_GetSysClockFreq+0x114>
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d056      	beq.n	8004f68 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004eba:	e099      	b.n	8004ff0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ebc:	4b6f      	ldr	r3, [pc, #444]	; (800507c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0320 	and.w	r3, r3, #32
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d02d      	beq.n	8004f24 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ec8:	4b6c      	ldr	r3, [pc, #432]	; (800507c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	08db      	lsrs	r3, r3, #3
 8004ece:	f003 0303 	and.w	r3, r3, #3
 8004ed2:	4a6b      	ldr	r2, [pc, #428]	; (8005080 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ed8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	ee07 3a90 	vmov	s15, r3
 8004ee0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	ee07 3a90 	vmov	s15, r3
 8004eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ef2:	4b62      	ldr	r3, [pc, #392]	; (800507c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004efa:	ee07 3a90 	vmov	s15, r3
 8004efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f02:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f06:	eddf 5a61 	vldr	s11, [pc, #388]	; 800508c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f1e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004f22:	e087      	b.n	8005034 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	ee07 3a90 	vmov	s15, r3
 8004f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f2e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005090 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f36:	4b51      	ldr	r3, [pc, #324]	; (800507c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f3e:	ee07 3a90 	vmov	s15, r3
 8004f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f46:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f4a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800508c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004f66:	e065      	b.n	8005034 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	ee07 3a90 	vmov	s15, r3
 8004f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f72:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005094 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f7a:	4b40      	ldr	r3, [pc, #256]	; (800507c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f82:	ee07 3a90 	vmov	s15, r3
 8004f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f8e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800508c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fa6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004faa:	e043      	b.n	8005034 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	ee07 3a90 	vmov	s15, r3
 8004fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fb6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005098 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fbe:	4b2f      	ldr	r3, [pc, #188]	; (800507c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fc6:	ee07 3a90 	vmov	s15, r3
 8004fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fce:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fd2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800508c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004fee:	e021      	b.n	8005034 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	ee07 3a90 	vmov	s15, r3
 8004ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ffa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005094 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005002:	4b1e      	ldr	r3, [pc, #120]	; (800507c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800500a:	ee07 3a90 	vmov	s15, r3
 800500e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005012:	ed97 6a02 	vldr	s12, [r7, #8]
 8005016:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800508c <HAL_RCC_GetSysClockFreq+0x2e4>
 800501a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800501e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005022:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800502a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800502e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005032:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005034:	4b11      	ldr	r3, [pc, #68]	; (800507c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005038:	0a5b      	lsrs	r3, r3, #9
 800503a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800503e:	3301      	adds	r3, #1
 8005040:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	ee07 3a90 	vmov	s15, r3
 8005048:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800504c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005050:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005054:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005058:	ee17 3a90 	vmov	r3, s15
 800505c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800505e:	e005      	b.n	800506c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005060:	2300      	movs	r3, #0
 8005062:	61bb      	str	r3, [r7, #24]
      break;
 8005064:	e002      	b.n	800506c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005066:	4b07      	ldr	r3, [pc, #28]	; (8005084 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005068:	61bb      	str	r3, [r7, #24]
      break;
 800506a:	bf00      	nop
  }

  return sysclockfreq;
 800506c:	69bb      	ldr	r3, [r7, #24]
}
 800506e:	4618      	mov	r0, r3
 8005070:	3724      	adds	r7, #36	; 0x24
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	58024400 	.word	0x58024400
 8005080:	03d09000 	.word	0x03d09000
 8005084:	003d0900 	.word	0x003d0900
 8005088:	017d7840 	.word	0x017d7840
 800508c:	46000000 	.word	0x46000000
 8005090:	4c742400 	.word	0x4c742400
 8005094:	4a742400 	.word	0x4a742400
 8005098:	4bbebc20 	.word	0x4bbebc20

0800509c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80050a2:	f7ff fe81 	bl	8004da8 <HAL_RCC_GetSysClockFreq>
 80050a6:	4602      	mov	r2, r0
 80050a8:	4b10      	ldr	r3, [pc, #64]	; (80050ec <HAL_RCC_GetHCLKFreq+0x50>)
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	0a1b      	lsrs	r3, r3, #8
 80050ae:	f003 030f 	and.w	r3, r3, #15
 80050b2:	490f      	ldr	r1, [pc, #60]	; (80050f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80050b4:	5ccb      	ldrb	r3, [r1, r3]
 80050b6:	f003 031f 	and.w	r3, r3, #31
 80050ba:	fa22 f303 	lsr.w	r3, r2, r3
 80050be:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80050c0:	4b0a      	ldr	r3, [pc, #40]	; (80050ec <HAL_RCC_GetHCLKFreq+0x50>)
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	f003 030f 	and.w	r3, r3, #15
 80050c8:	4a09      	ldr	r2, [pc, #36]	; (80050f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80050ca:	5cd3      	ldrb	r3, [r2, r3]
 80050cc:	f003 031f 	and.w	r3, r3, #31
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	fa22 f303 	lsr.w	r3, r2, r3
 80050d6:	4a07      	ldr	r2, [pc, #28]	; (80050f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80050d8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80050da:	4a07      	ldr	r2, [pc, #28]	; (80050f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80050e0:	4b04      	ldr	r3, [pc, #16]	; (80050f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80050e2:	681b      	ldr	r3, [r3, #0]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	58024400 	.word	0x58024400
 80050f0:	0800c5f4 	.word	0x0800c5f4
 80050f4:	24000004 	.word	0x24000004
 80050f8:	24000000 	.word	0x24000000

080050fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005100:	f7ff ffcc 	bl	800509c <HAL_RCC_GetHCLKFreq>
 8005104:	4602      	mov	r2, r0
 8005106:	4b06      	ldr	r3, [pc, #24]	; (8005120 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	091b      	lsrs	r3, r3, #4
 800510c:	f003 0307 	and.w	r3, r3, #7
 8005110:	4904      	ldr	r1, [pc, #16]	; (8005124 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005112:	5ccb      	ldrb	r3, [r1, r3]
 8005114:	f003 031f 	and.w	r3, r3, #31
 8005118:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800511c:	4618      	mov	r0, r3
 800511e:	bd80      	pop	{r7, pc}
 8005120:	58024400 	.word	0x58024400
 8005124:	0800c5f4 	.word	0x0800c5f4

08005128 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800512c:	f7ff ffb6 	bl	800509c <HAL_RCC_GetHCLKFreq>
 8005130:	4602      	mov	r2, r0
 8005132:	4b06      	ldr	r3, [pc, #24]	; (800514c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005134:	69db      	ldr	r3, [r3, #28]
 8005136:	0a1b      	lsrs	r3, r3, #8
 8005138:	f003 0307 	and.w	r3, r3, #7
 800513c:	4904      	ldr	r1, [pc, #16]	; (8005150 <HAL_RCC_GetPCLK2Freq+0x28>)
 800513e:	5ccb      	ldrb	r3, [r1, r3]
 8005140:	f003 031f 	and.w	r3, r3, #31
 8005144:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005148:	4618      	mov	r0, r3
 800514a:	bd80      	pop	{r7, pc}
 800514c:	58024400 	.word	0x58024400
 8005150:	0800c5f4 	.word	0x0800c5f4

08005154 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005158:	b0ca      	sub	sp, #296	; 0x128
 800515a:	af00      	add	r7, sp, #0
 800515c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005160:	2300      	movs	r3, #0
 8005162:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005166:	2300      	movs	r3, #0
 8005168:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800516c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005174:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005178:	2500      	movs	r5, #0
 800517a:	ea54 0305 	orrs.w	r3, r4, r5
 800517e:	d049      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005180:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005184:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005186:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800518a:	d02f      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x98>
 800518c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005190:	d828      	bhi.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005192:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005196:	d01a      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005198:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800519c:	d822      	bhi.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d003      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80051a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051a6:	d007      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80051a8:	e01c      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051aa:	4bb8      	ldr	r3, [pc, #736]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ae:	4ab7      	ldr	r2, [pc, #732]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80051b6:	e01a      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80051b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051bc:	3308      	adds	r3, #8
 80051be:	2102      	movs	r1, #2
 80051c0:	4618      	mov	r0, r3
 80051c2:	f002 fb61 	bl	8007888 <RCCEx_PLL2_Config>
 80051c6:	4603      	mov	r3, r0
 80051c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80051cc:	e00f      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80051ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051d2:	3328      	adds	r3, #40	; 0x28
 80051d4:	2102      	movs	r1, #2
 80051d6:	4618      	mov	r0, r3
 80051d8:	f002 fc08 	bl	80079ec <RCCEx_PLL3_Config>
 80051dc:	4603      	mov	r3, r0
 80051de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80051e2:	e004      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80051ea:	e000      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80051ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d10a      	bne.n	800520c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80051f6:	4ba5      	ldr	r3, [pc, #660]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051fa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80051fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005202:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005204:	4aa1      	ldr	r2, [pc, #644]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005206:	430b      	orrs	r3, r1
 8005208:	6513      	str	r3, [r2, #80]	; 0x50
 800520a:	e003      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800520c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005210:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005220:	f04f 0900 	mov.w	r9, #0
 8005224:	ea58 0309 	orrs.w	r3, r8, r9
 8005228:	d047      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800522a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800522e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005230:	2b04      	cmp	r3, #4
 8005232:	d82a      	bhi.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005234:	a201      	add	r2, pc, #4	; (adr r2, 800523c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523a:	bf00      	nop
 800523c:	08005251 	.word	0x08005251
 8005240:	0800525f 	.word	0x0800525f
 8005244:	08005275 	.word	0x08005275
 8005248:	08005293 	.word	0x08005293
 800524c:	08005293 	.word	0x08005293
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005250:	4b8e      	ldr	r3, [pc, #568]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005254:	4a8d      	ldr	r2, [pc, #564]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005256:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800525a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800525c:	e01a      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800525e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005262:	3308      	adds	r3, #8
 8005264:	2100      	movs	r1, #0
 8005266:	4618      	mov	r0, r3
 8005268:	f002 fb0e 	bl	8007888 <RCCEx_PLL2_Config>
 800526c:	4603      	mov	r3, r0
 800526e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005272:	e00f      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005274:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005278:	3328      	adds	r3, #40	; 0x28
 800527a:	2100      	movs	r1, #0
 800527c:	4618      	mov	r0, r3
 800527e:	f002 fbb5 	bl	80079ec <RCCEx_PLL3_Config>
 8005282:	4603      	mov	r3, r0
 8005284:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005288:	e004      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005290:	e000      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005292:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005294:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005298:	2b00      	cmp	r3, #0
 800529a:	d10a      	bne.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800529c:	4b7b      	ldr	r3, [pc, #492]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800529e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052a0:	f023 0107 	bic.w	r1, r3, #7
 80052a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052aa:	4a78      	ldr	r2, [pc, #480]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052ac:	430b      	orrs	r3, r1
 80052ae:	6513      	str	r3, [r2, #80]	; 0x50
 80052b0:	e003      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80052ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80052c6:	f04f 0b00 	mov.w	fp, #0
 80052ca:	ea5a 030b 	orrs.w	r3, sl, fp
 80052ce:	d04c      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80052d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052da:	d030      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80052dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052e0:	d829      	bhi.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80052e2:	2bc0      	cmp	r3, #192	; 0xc0
 80052e4:	d02d      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80052e6:	2bc0      	cmp	r3, #192	; 0xc0
 80052e8:	d825      	bhi.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80052ea:	2b80      	cmp	r3, #128	; 0x80
 80052ec:	d018      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80052ee:	2b80      	cmp	r3, #128	; 0x80
 80052f0:	d821      	bhi.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d002      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80052f6:	2b40      	cmp	r3, #64	; 0x40
 80052f8:	d007      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80052fa:	e01c      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052fc:	4b63      	ldr	r3, [pc, #396]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005300:	4a62      	ldr	r2, [pc, #392]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005302:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005306:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005308:	e01c      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800530a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800530e:	3308      	adds	r3, #8
 8005310:	2100      	movs	r1, #0
 8005312:	4618      	mov	r0, r3
 8005314:	f002 fab8 	bl	8007888 <RCCEx_PLL2_Config>
 8005318:	4603      	mov	r3, r0
 800531a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800531e:	e011      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005320:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005324:	3328      	adds	r3, #40	; 0x28
 8005326:	2100      	movs	r1, #0
 8005328:	4618      	mov	r0, r3
 800532a:	f002 fb5f 	bl	80079ec <RCCEx_PLL3_Config>
 800532e:	4603      	mov	r3, r0
 8005330:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005334:	e006      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800533c:	e002      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800533e:	bf00      	nop
 8005340:	e000      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005342:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005344:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005348:	2b00      	cmp	r3, #0
 800534a:	d10a      	bne.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800534c:	4b4f      	ldr	r3, [pc, #316]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800534e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005350:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005354:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800535a:	4a4c      	ldr	r2, [pc, #304]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800535c:	430b      	orrs	r3, r1
 800535e:	6513      	str	r3, [r2, #80]	; 0x50
 8005360:	e003      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005362:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005366:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800536a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800536e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005372:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005376:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800537a:	2300      	movs	r3, #0
 800537c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005380:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8005384:	460b      	mov	r3, r1
 8005386:	4313      	orrs	r3, r2
 8005388:	d053      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800538a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800538e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005392:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005396:	d035      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005398:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800539c:	d82e      	bhi.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800539e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80053a2:	d031      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80053a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80053a8:	d828      	bhi.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80053aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053ae:	d01a      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80053b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053b4:	d822      	bhi.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80053ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053be:	d007      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80053c0:	e01c      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053c2:	4b32      	ldr	r3, [pc, #200]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c6:	4a31      	ldr	r2, [pc, #196]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053ce:	e01c      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053d4:	3308      	adds	r3, #8
 80053d6:	2100      	movs	r1, #0
 80053d8:	4618      	mov	r0, r3
 80053da:	f002 fa55 	bl	8007888 <RCCEx_PLL2_Config>
 80053de:	4603      	mov	r3, r0
 80053e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80053e4:	e011      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053ea:	3328      	adds	r3, #40	; 0x28
 80053ec:	2100      	movs	r1, #0
 80053ee:	4618      	mov	r0, r3
 80053f0:	f002 fafc 	bl	80079ec <RCCEx_PLL3_Config>
 80053f4:	4603      	mov	r3, r0
 80053f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053fa:	e006      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005402:	e002      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005404:	bf00      	nop
 8005406:	e000      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005408:	bf00      	nop
    }

    if (ret == HAL_OK)
 800540a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10b      	bne.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005412:	4b1e      	ldr	r3, [pc, #120]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005416:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800541a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800541e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005422:	4a1a      	ldr	r2, [pc, #104]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005424:	430b      	orrs	r3, r1
 8005426:	6593      	str	r3, [r2, #88]	; 0x58
 8005428:	e003      	b.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800542a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800542e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005432:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800543e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005442:	2300      	movs	r3, #0
 8005444:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005448:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800544c:	460b      	mov	r3, r1
 800544e:	4313      	orrs	r3, r2
 8005450:	d056      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005456:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800545a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800545e:	d038      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005460:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005464:	d831      	bhi.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005466:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800546a:	d034      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800546c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005470:	d82b      	bhi.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005472:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005476:	d01d      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005478:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800547c:	d825      	bhi.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 800547e:	2b00      	cmp	r3, #0
 8005480:	d006      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005482:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005486:	d00a      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005488:	e01f      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 800548a:	bf00      	nop
 800548c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005490:	4ba2      	ldr	r3, [pc, #648]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005494:	4aa1      	ldr	r2, [pc, #644]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800549a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800549c:	e01c      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800549e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054a2:	3308      	adds	r3, #8
 80054a4:	2100      	movs	r1, #0
 80054a6:	4618      	mov	r0, r3
 80054a8:	f002 f9ee 	bl	8007888 <RCCEx_PLL2_Config>
 80054ac:	4603      	mov	r3, r0
 80054ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80054b2:	e011      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054b8:	3328      	adds	r3, #40	; 0x28
 80054ba:	2100      	movs	r1, #0
 80054bc:	4618      	mov	r0, r3
 80054be:	f002 fa95 	bl	80079ec <RCCEx_PLL3_Config>
 80054c2:	4603      	mov	r3, r0
 80054c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054c8:	e006      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80054d0:	e002      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80054d2:	bf00      	nop
 80054d4:	e000      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80054d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10b      	bne.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80054e0:	4b8e      	ldr	r3, [pc, #568]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80054e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80054f0:	4a8a      	ldr	r2, [pc, #552]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054f2:	430b      	orrs	r3, r1
 80054f4:	6593      	str	r3, [r2, #88]	; 0x58
 80054f6:	e003      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005500:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005508:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800550c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005510:	2300      	movs	r3, #0
 8005512:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005516:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800551a:	460b      	mov	r3, r1
 800551c:	4313      	orrs	r3, r2
 800551e:	d03a      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005526:	2b30      	cmp	r3, #48	; 0x30
 8005528:	d01f      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800552a:	2b30      	cmp	r3, #48	; 0x30
 800552c:	d819      	bhi.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800552e:	2b20      	cmp	r3, #32
 8005530:	d00c      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005532:	2b20      	cmp	r3, #32
 8005534:	d815      	bhi.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005536:	2b00      	cmp	r3, #0
 8005538:	d019      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800553a:	2b10      	cmp	r3, #16
 800553c:	d111      	bne.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800553e:	4b77      	ldr	r3, [pc, #476]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005542:	4a76      	ldr	r2, [pc, #472]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005548:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800554a:	e011      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800554c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005550:	3308      	adds	r3, #8
 8005552:	2102      	movs	r1, #2
 8005554:	4618      	mov	r0, r3
 8005556:	f002 f997 	bl	8007888 <RCCEx_PLL2_Config>
 800555a:	4603      	mov	r3, r0
 800555c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005560:	e006      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005568:	e002      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800556a:	bf00      	nop
 800556c:	e000      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800556e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005570:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10a      	bne.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005578:	4b68      	ldr	r3, [pc, #416]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800557a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800557c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005580:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005586:	4a65      	ldr	r2, [pc, #404]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005588:	430b      	orrs	r3, r1
 800558a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800558c:	e003      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800558e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005592:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800559a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80055a2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80055a6:	2300      	movs	r3, #0
 80055a8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80055ac:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80055b0:	460b      	mov	r3, r1
 80055b2:	4313      	orrs	r3, r2
 80055b4:	d051      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80055b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055c0:	d035      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80055c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055c6:	d82e      	bhi.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80055c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055cc:	d031      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80055ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055d2:	d828      	bhi.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80055d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055d8:	d01a      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80055da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055de:	d822      	bhi.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d003      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x498>
 80055e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055e8:	d007      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80055ea:	e01c      	b.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055ec:	4b4b      	ldr	r3, [pc, #300]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f0:	4a4a      	ldr	r2, [pc, #296]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80055f8:	e01c      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055fe:	3308      	adds	r3, #8
 8005600:	2100      	movs	r1, #0
 8005602:	4618      	mov	r0, r3
 8005604:	f002 f940 	bl	8007888 <RCCEx_PLL2_Config>
 8005608:	4603      	mov	r3, r0
 800560a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800560e:	e011      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005610:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005614:	3328      	adds	r3, #40	; 0x28
 8005616:	2100      	movs	r1, #0
 8005618:	4618      	mov	r0, r3
 800561a:	f002 f9e7 	bl	80079ec <RCCEx_PLL3_Config>
 800561e:	4603      	mov	r3, r0
 8005620:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005624:	e006      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800562c:	e002      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800562e:	bf00      	nop
 8005630:	e000      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005632:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005634:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10a      	bne.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800563c:	4b37      	ldr	r3, [pc, #220]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800563e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005640:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005644:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800564a:	4a34      	ldr	r2, [pc, #208]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800564c:	430b      	orrs	r3, r1
 800564e:	6513      	str	r3, [r2, #80]	; 0x50
 8005650:	e003      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005652:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005656:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800565a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800565e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005662:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005666:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800566a:	2300      	movs	r3, #0
 800566c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005670:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005674:	460b      	mov	r3, r1
 8005676:	4313      	orrs	r3, r2
 8005678:	d056      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800567a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800567e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005680:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005684:	d033      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005686:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800568a:	d82c      	bhi.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800568c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005690:	d02f      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005692:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005696:	d826      	bhi.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005698:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800569c:	d02b      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800569e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80056a2:	d820      	bhi.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80056a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056a8:	d012      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80056aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056ae:	d81a      	bhi.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d022      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80056b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056b8:	d115      	bne.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056be:	3308      	adds	r3, #8
 80056c0:	2101      	movs	r1, #1
 80056c2:	4618      	mov	r0, r3
 80056c4:	f002 f8e0 	bl	8007888 <RCCEx_PLL2_Config>
 80056c8:	4603      	mov	r3, r0
 80056ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80056ce:	e015      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056d4:	3328      	adds	r3, #40	; 0x28
 80056d6:	2101      	movs	r1, #1
 80056d8:	4618      	mov	r0, r3
 80056da:	f002 f987 	bl	80079ec <RCCEx_PLL3_Config>
 80056de:	4603      	mov	r3, r0
 80056e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80056e4:	e00a      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80056ec:	e006      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80056ee:	bf00      	nop
 80056f0:	e004      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80056f2:	bf00      	nop
 80056f4:	e002      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80056f6:	bf00      	nop
 80056f8:	e000      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80056fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10d      	bne.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005704:	4b05      	ldr	r3, [pc, #20]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005708:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800570c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005710:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005712:	4a02      	ldr	r2, [pc, #8]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005714:	430b      	orrs	r3, r1
 8005716:	6513      	str	r3, [r2, #80]	; 0x50
 8005718:	e006      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800571a:	bf00      	nop
 800571c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005720:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005724:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005728:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800572c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005730:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005734:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005738:	2300      	movs	r3, #0
 800573a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800573e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005742:	460b      	mov	r3, r1
 8005744:	4313      	orrs	r3, r2
 8005746:	d055      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005748:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800574c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005750:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005754:	d033      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005756:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800575a:	d82c      	bhi.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800575c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005760:	d02f      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005766:	d826      	bhi.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005768:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800576c:	d02b      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800576e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005772:	d820      	bhi.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005778:	d012      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800577a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800577e:	d81a      	bhi.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005780:	2b00      	cmp	r3, #0
 8005782:	d022      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005784:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005788:	d115      	bne.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800578a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800578e:	3308      	adds	r3, #8
 8005790:	2101      	movs	r1, #1
 8005792:	4618      	mov	r0, r3
 8005794:	f002 f878 	bl	8007888 <RCCEx_PLL2_Config>
 8005798:	4603      	mov	r3, r0
 800579a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800579e:	e015      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057a4:	3328      	adds	r3, #40	; 0x28
 80057a6:	2101      	movs	r1, #1
 80057a8:	4618      	mov	r0, r3
 80057aa:	f002 f91f 	bl	80079ec <RCCEx_PLL3_Config>
 80057ae:	4603      	mov	r3, r0
 80057b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80057b4:	e00a      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80057bc:	e006      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80057be:	bf00      	nop
 80057c0:	e004      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80057c2:	bf00      	nop
 80057c4:	e002      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80057c6:	bf00      	nop
 80057c8:	e000      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80057ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10b      	bne.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80057d4:	4ba3      	ldr	r3, [pc, #652]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80057dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057e4:	4a9f      	ldr	r2, [pc, #636]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057e6:	430b      	orrs	r3, r1
 80057e8:	6593      	str	r3, [r2, #88]	; 0x58
 80057ea:	e003      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80057f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005800:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005804:	2300      	movs	r3, #0
 8005806:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800580a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800580e:	460b      	mov	r3, r1
 8005810:	4313      	orrs	r3, r2
 8005812:	d037      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005814:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800581a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800581e:	d00e      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005820:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005824:	d816      	bhi.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005826:	2b00      	cmp	r3, #0
 8005828:	d018      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800582a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800582e:	d111      	bne.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005830:	4b8c      	ldr	r3, [pc, #560]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005834:	4a8b      	ldr	r2, [pc, #556]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800583a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800583c:	e00f      	b.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800583e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005842:	3308      	adds	r3, #8
 8005844:	2101      	movs	r1, #1
 8005846:	4618      	mov	r0, r3
 8005848:	f002 f81e 	bl	8007888 <RCCEx_PLL2_Config>
 800584c:	4603      	mov	r3, r0
 800584e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005852:	e004      	b.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800585a:	e000      	b.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800585c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800585e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10a      	bne.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005866:	4b7f      	ldr	r3, [pc, #508]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800586a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800586e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005874:	4a7b      	ldr	r2, [pc, #492]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005876:	430b      	orrs	r3, r1
 8005878:	6513      	str	r3, [r2, #80]	; 0x50
 800587a:	e003      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800587c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005880:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005884:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005890:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005894:	2300      	movs	r3, #0
 8005896:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800589a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800589e:	460b      	mov	r3, r1
 80058a0:	4313      	orrs	r3, r2
 80058a2:	d039      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80058a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058aa:	2b03      	cmp	r3, #3
 80058ac:	d81c      	bhi.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80058ae:	a201      	add	r2, pc, #4	; (adr r2, 80058b4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80058b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b4:	080058f1 	.word	0x080058f1
 80058b8:	080058c5 	.word	0x080058c5
 80058bc:	080058d3 	.word	0x080058d3
 80058c0:	080058f1 	.word	0x080058f1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058c4:	4b67      	ldr	r3, [pc, #412]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c8:	4a66      	ldr	r2, [pc, #408]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80058d0:	e00f      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058d6:	3308      	adds	r3, #8
 80058d8:	2102      	movs	r1, #2
 80058da:	4618      	mov	r0, r3
 80058dc:	f001 ffd4 	bl	8007888 <RCCEx_PLL2_Config>
 80058e0:	4603      	mov	r3, r0
 80058e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80058e6:	e004      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80058ee:	e000      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80058f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10a      	bne.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80058fa:	4b5a      	ldr	r3, [pc, #360]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058fe:	f023 0103 	bic.w	r1, r3, #3
 8005902:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005906:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005908:	4a56      	ldr	r2, [pc, #344]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800590a:	430b      	orrs	r3, r1
 800590c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800590e:	e003      	b.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005910:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005914:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005918:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800591c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005920:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005924:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005928:	2300      	movs	r3, #0
 800592a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800592e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005932:	460b      	mov	r3, r1
 8005934:	4313      	orrs	r3, r2
 8005936:	f000 809f 	beq.w	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800593a:	4b4b      	ldr	r3, [pc, #300]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a4a      	ldr	r2, [pc, #296]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005944:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005946:	f7fc fd0f 	bl	8002368 <HAL_GetTick>
 800594a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800594e:	e00b      	b.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005950:	f7fc fd0a 	bl	8002368 <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	2b64      	cmp	r3, #100	; 0x64
 800595e:	d903      	bls.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005966:	e005      	b.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005968:	4b3f      	ldr	r3, [pc, #252]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005970:	2b00      	cmp	r3, #0
 8005972:	d0ed      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005974:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005978:	2b00      	cmp	r3, #0
 800597a:	d179      	bne.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800597c:	4b39      	ldr	r3, [pc, #228]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800597e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005984:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005988:	4053      	eors	r3, r2
 800598a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800598e:	2b00      	cmp	r3, #0
 8005990:	d015      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005992:	4b34      	ldr	r3, [pc, #208]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800599a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800599e:	4b31      	ldr	r3, [pc, #196]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a2:	4a30      	ldr	r2, [pc, #192]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059a8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80059aa:	4b2e      	ldr	r3, [pc, #184]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ae:	4a2d      	ldr	r2, [pc, #180]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059b4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80059b6:	4a2b      	ldr	r2, [pc, #172]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80059bc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80059be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80059c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059ca:	d118      	bne.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059cc:	f7fc fccc 	bl	8002368 <HAL_GetTick>
 80059d0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059d4:	e00d      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059d6:	f7fc fcc7 	bl	8002368 <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80059e0:	1ad2      	subs	r2, r2, r3
 80059e2:	f241 3388 	movw	r3, #5000	; 0x1388
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d903      	bls.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80059f0:	e005      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059f2:	4b1c      	ldr	r3, [pc, #112]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d0eb      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80059fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d129      	bne.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a16:	d10e      	bne.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005a18:	4b12      	ldr	r3, [pc, #72]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005a28:	091a      	lsrs	r2, r3, #4
 8005a2a:	4b10      	ldr	r3, [pc, #64]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	4a0d      	ldr	r2, [pc, #52]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a30:	430b      	orrs	r3, r1
 8005a32:	6113      	str	r3, [r2, #16]
 8005a34:	e005      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005a36:	4b0b      	ldr	r3, [pc, #44]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	4a0a      	ldr	r2, [pc, #40]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a3c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005a40:	6113      	str	r3, [r2, #16]
 8005a42:	4b08      	ldr	r3, [pc, #32]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a44:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005a4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a52:	4a04      	ldr	r2, [pc, #16]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a54:	430b      	orrs	r3, r1
 8005a56:	6713      	str	r3, [r2, #112]	; 0x70
 8005a58:	e00e      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8005a62:	e009      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005a64:	58024400 	.word	0x58024400
 8005a68:	58024800 	.word	0x58024800
 8005a6c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a80:	f002 0301 	and.w	r3, r2, #1
 8005a84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a88:	2300      	movs	r3, #0
 8005a8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a8e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005a92:	460b      	mov	r3, r1
 8005a94:	4313      	orrs	r3, r2
 8005a96:	f000 8089 	beq.w	8005bac <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aa0:	2b28      	cmp	r3, #40	; 0x28
 8005aa2:	d86b      	bhi.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005aa4:	a201      	add	r2, pc, #4	; (adr r2, 8005aac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aaa:	bf00      	nop
 8005aac:	08005b85 	.word	0x08005b85
 8005ab0:	08005b7d 	.word	0x08005b7d
 8005ab4:	08005b7d 	.word	0x08005b7d
 8005ab8:	08005b7d 	.word	0x08005b7d
 8005abc:	08005b7d 	.word	0x08005b7d
 8005ac0:	08005b7d 	.word	0x08005b7d
 8005ac4:	08005b7d 	.word	0x08005b7d
 8005ac8:	08005b7d 	.word	0x08005b7d
 8005acc:	08005b51 	.word	0x08005b51
 8005ad0:	08005b7d 	.word	0x08005b7d
 8005ad4:	08005b7d 	.word	0x08005b7d
 8005ad8:	08005b7d 	.word	0x08005b7d
 8005adc:	08005b7d 	.word	0x08005b7d
 8005ae0:	08005b7d 	.word	0x08005b7d
 8005ae4:	08005b7d 	.word	0x08005b7d
 8005ae8:	08005b7d 	.word	0x08005b7d
 8005aec:	08005b67 	.word	0x08005b67
 8005af0:	08005b7d 	.word	0x08005b7d
 8005af4:	08005b7d 	.word	0x08005b7d
 8005af8:	08005b7d 	.word	0x08005b7d
 8005afc:	08005b7d 	.word	0x08005b7d
 8005b00:	08005b7d 	.word	0x08005b7d
 8005b04:	08005b7d 	.word	0x08005b7d
 8005b08:	08005b7d 	.word	0x08005b7d
 8005b0c:	08005b85 	.word	0x08005b85
 8005b10:	08005b7d 	.word	0x08005b7d
 8005b14:	08005b7d 	.word	0x08005b7d
 8005b18:	08005b7d 	.word	0x08005b7d
 8005b1c:	08005b7d 	.word	0x08005b7d
 8005b20:	08005b7d 	.word	0x08005b7d
 8005b24:	08005b7d 	.word	0x08005b7d
 8005b28:	08005b7d 	.word	0x08005b7d
 8005b2c:	08005b85 	.word	0x08005b85
 8005b30:	08005b7d 	.word	0x08005b7d
 8005b34:	08005b7d 	.word	0x08005b7d
 8005b38:	08005b7d 	.word	0x08005b7d
 8005b3c:	08005b7d 	.word	0x08005b7d
 8005b40:	08005b7d 	.word	0x08005b7d
 8005b44:	08005b7d 	.word	0x08005b7d
 8005b48:	08005b7d 	.word	0x08005b7d
 8005b4c:	08005b85 	.word	0x08005b85
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b54:	3308      	adds	r3, #8
 8005b56:	2101      	movs	r1, #1
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f001 fe95 	bl	8007888 <RCCEx_PLL2_Config>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005b64:	e00f      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b6a:	3328      	adds	r3, #40	; 0x28
 8005b6c:	2101      	movs	r1, #1
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f001 ff3c 	bl	80079ec <RCCEx_PLL3_Config>
 8005b74:	4603      	mov	r3, r0
 8005b76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005b7a:	e004      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b82:	e000      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005b84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10a      	bne.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005b8e:	4bbf      	ldr	r3, [pc, #764]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b92:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b9c:	4abb      	ldr	r2, [pc, #748]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b9e:	430b      	orrs	r3, r1
 8005ba0:	6553      	str	r3, [r2, #84]	; 0x54
 8005ba2:	e003      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ba8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb4:	f002 0302 	and.w	r3, r2, #2
 8005bb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005bc2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	d041      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bd2:	2b05      	cmp	r3, #5
 8005bd4:	d824      	bhi.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005bd6:	a201      	add	r2, pc, #4	; (adr r2, 8005bdc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bdc:	08005c29 	.word	0x08005c29
 8005be0:	08005bf5 	.word	0x08005bf5
 8005be4:	08005c0b 	.word	0x08005c0b
 8005be8:	08005c29 	.word	0x08005c29
 8005bec:	08005c29 	.word	0x08005c29
 8005bf0:	08005c29 	.word	0x08005c29
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bf8:	3308      	adds	r3, #8
 8005bfa:	2101      	movs	r1, #1
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f001 fe43 	bl	8007888 <RCCEx_PLL2_Config>
 8005c02:	4603      	mov	r3, r0
 8005c04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005c08:	e00f      	b.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c0e:	3328      	adds	r3, #40	; 0x28
 8005c10:	2101      	movs	r1, #1
 8005c12:	4618      	mov	r0, r3
 8005c14:	f001 feea 	bl	80079ec <RCCEx_PLL3_Config>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005c1e:	e004      	b.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c26:	e000      	b.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005c28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10a      	bne.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005c32:	4b96      	ldr	r3, [pc, #600]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c36:	f023 0107 	bic.w	r1, r3, #7
 8005c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c40:	4a92      	ldr	r2, [pc, #584]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c42:	430b      	orrs	r3, r1
 8005c44:	6553      	str	r3, [r2, #84]	; 0x54
 8005c46:	e003      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c58:	f002 0304 	and.w	r3, r2, #4
 8005c5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c60:	2300      	movs	r3, #0
 8005c62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c66:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	d044      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c78:	2b05      	cmp	r3, #5
 8005c7a:	d825      	bhi.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005c7c:	a201      	add	r2, pc, #4	; (adr r2, 8005c84 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c82:	bf00      	nop
 8005c84:	08005cd1 	.word	0x08005cd1
 8005c88:	08005c9d 	.word	0x08005c9d
 8005c8c:	08005cb3 	.word	0x08005cb3
 8005c90:	08005cd1 	.word	0x08005cd1
 8005c94:	08005cd1 	.word	0x08005cd1
 8005c98:	08005cd1 	.word	0x08005cd1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ca0:	3308      	adds	r3, #8
 8005ca2:	2101      	movs	r1, #1
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f001 fdef 	bl	8007888 <RCCEx_PLL2_Config>
 8005caa:	4603      	mov	r3, r0
 8005cac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005cb0:	e00f      	b.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cb6:	3328      	adds	r3, #40	; 0x28
 8005cb8:	2101      	movs	r1, #1
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f001 fe96 	bl	80079ec <RCCEx_PLL3_Config>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005cc6:	e004      	b.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005cce:	e000      	b.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005cd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10b      	bne.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005cda:	4b6c      	ldr	r3, [pc, #432]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cde:	f023 0107 	bic.w	r1, r3, #7
 8005ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cea:	4a68      	ldr	r2, [pc, #416]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005cec:	430b      	orrs	r3, r1
 8005cee:	6593      	str	r3, [r2, #88]	; 0x58
 8005cf0:	e003      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cf6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d02:	f002 0320 	and.w	r3, r2, #32
 8005d06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005d14:	460b      	mov	r3, r1
 8005d16:	4313      	orrs	r3, r2
 8005d18:	d055      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d26:	d033      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005d28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d2c:	d82c      	bhi.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d32:	d02f      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d38:	d826      	bhi.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005d3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d3e:	d02b      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005d40:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d44:	d820      	bhi.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005d46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d4a:	d012      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005d4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d50:	d81a      	bhi.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d022      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005d56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d5a:	d115      	bne.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d60:	3308      	adds	r3, #8
 8005d62:	2100      	movs	r1, #0
 8005d64:	4618      	mov	r0, r3
 8005d66:	f001 fd8f 	bl	8007888 <RCCEx_PLL2_Config>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005d70:	e015      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d76:	3328      	adds	r3, #40	; 0x28
 8005d78:	2102      	movs	r1, #2
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f001 fe36 	bl	80079ec <RCCEx_PLL3_Config>
 8005d80:	4603      	mov	r3, r0
 8005d82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005d86:	e00a      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d8e:	e006      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005d90:	bf00      	nop
 8005d92:	e004      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005d94:	bf00      	nop
 8005d96:	e002      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005d98:	bf00      	nop
 8005d9a:	e000      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005d9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10b      	bne.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005da6:	4b39      	ldr	r3, [pc, #228]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005daa:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005db6:	4a35      	ldr	r2, [pc, #212]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005db8:	430b      	orrs	r3, r1
 8005dba:	6553      	str	r3, [r2, #84]	; 0x54
 8005dbc:	e003      	b.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005dc2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dce:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005dd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005ddc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005de0:	460b      	mov	r3, r1
 8005de2:	4313      	orrs	r3, r2
 8005de4:	d058      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005dee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005df2:	d033      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005df4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005df8:	d82c      	bhi.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dfe:	d02f      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005e00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e04:	d826      	bhi.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005e06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e0a:	d02b      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005e0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e10:	d820      	bhi.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005e12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e16:	d012      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005e18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e1c:	d81a      	bhi.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d022      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e26:	d115      	bne.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e2c:	3308      	adds	r3, #8
 8005e2e:	2100      	movs	r1, #0
 8005e30:	4618      	mov	r0, r3
 8005e32:	f001 fd29 	bl	8007888 <RCCEx_PLL2_Config>
 8005e36:	4603      	mov	r3, r0
 8005e38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005e3c:	e015      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e42:	3328      	adds	r3, #40	; 0x28
 8005e44:	2102      	movs	r1, #2
 8005e46:	4618      	mov	r0, r3
 8005e48:	f001 fdd0 	bl	80079ec <RCCEx_PLL3_Config>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005e52:	e00a      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005e5a:	e006      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005e5c:	bf00      	nop
 8005e5e:	e004      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005e60:	bf00      	nop
 8005e62:	e002      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005e64:	bf00      	nop
 8005e66:	e000      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005e68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d10e      	bne.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e72:	4b06      	ldr	r3, [pc, #24]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e76:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e82:	4a02      	ldr	r2, [pc, #8]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e84:	430b      	orrs	r3, r1
 8005e86:	6593      	str	r3, [r2, #88]	; 0x58
 8005e88:	e006      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005e8a:	bf00      	nop
 8005e8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005ea4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005eae:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	d055      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ebc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005ec0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005ec4:	d033      	beq.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005ec6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005eca:	d82c      	bhi.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005ecc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ed0:	d02f      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005ed2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ed6:	d826      	bhi.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005ed8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005edc:	d02b      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005ede:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005ee2:	d820      	bhi.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005ee4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ee8:	d012      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005eea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005eee:	d81a      	bhi.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d022      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005ef4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ef8:	d115      	bne.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005efe:	3308      	adds	r3, #8
 8005f00:	2100      	movs	r1, #0
 8005f02:	4618      	mov	r0, r3
 8005f04:	f001 fcc0 	bl	8007888 <RCCEx_PLL2_Config>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005f0e:	e015      	b.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f14:	3328      	adds	r3, #40	; 0x28
 8005f16:	2102      	movs	r1, #2
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f001 fd67 	bl	80079ec <RCCEx_PLL3_Config>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005f24:	e00a      	b.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f2c:	e006      	b.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005f2e:	bf00      	nop
 8005f30:	e004      	b.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005f32:	bf00      	nop
 8005f34:	e002      	b.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005f36:	bf00      	nop
 8005f38:	e000      	b.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005f3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10b      	bne.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005f44:	4ba1      	ldr	r3, [pc, #644]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f48:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f50:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005f54:	4a9d      	ldr	r2, [pc, #628]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f56:	430b      	orrs	r3, r1
 8005f58:	6593      	str	r3, [r2, #88]	; 0x58
 8005f5a:	e003      	b.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6c:	f002 0308 	and.w	r3, r2, #8
 8005f70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f74:	2300      	movs	r3, #0
 8005f76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005f7a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005f7e:	460b      	mov	r3, r1
 8005f80:	4313      	orrs	r3, r2
 8005f82:	d01e      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f90:	d10c      	bne.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f96:	3328      	adds	r3, #40	; 0x28
 8005f98:	2102      	movs	r1, #2
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f001 fd26 	bl	80079ec <RCCEx_PLL3_Config>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d002      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005fac:	4b87      	ldr	r3, [pc, #540]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fbc:	4a83      	ldr	r2, [pc, #524]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005fbe:	430b      	orrs	r3, r1
 8005fc0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fca:	f002 0310 	and.w	r3, r2, #16
 8005fce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005fd8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005fdc:	460b      	mov	r3, r1
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	d01e      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fe6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fee:	d10c      	bne.n	800600a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ff4:	3328      	adds	r3, #40	; 0x28
 8005ff6:	2102      	movs	r1, #2
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f001 fcf7 	bl	80079ec <RCCEx_PLL3_Config>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d002      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800600a:	4b70      	ldr	r3, [pc, #448]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800600c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800600e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006016:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800601a:	4a6c      	ldr	r2, [pc, #432]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800601c:	430b      	orrs	r3, r1
 800601e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006020:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006028:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800602c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006030:	2300      	movs	r3, #0
 8006032:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006036:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800603a:	460b      	mov	r3, r1
 800603c:	4313      	orrs	r3, r2
 800603e:	d03e      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006040:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006044:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006048:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800604c:	d022      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800604e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006052:	d81b      	bhi.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006054:	2b00      	cmp	r3, #0
 8006056:	d003      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800605c:	d00b      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800605e:	e015      	b.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006064:	3308      	adds	r3, #8
 8006066:	2100      	movs	r1, #0
 8006068:	4618      	mov	r0, r3
 800606a:	f001 fc0d 	bl	8007888 <RCCEx_PLL2_Config>
 800606e:	4603      	mov	r3, r0
 8006070:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006074:	e00f      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006076:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800607a:	3328      	adds	r3, #40	; 0x28
 800607c:	2102      	movs	r1, #2
 800607e:	4618      	mov	r0, r3
 8006080:	f001 fcb4 	bl	80079ec <RCCEx_PLL3_Config>
 8006084:	4603      	mov	r3, r0
 8006086:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800608a:	e004      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006092:	e000      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006094:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006096:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10b      	bne.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800609e:	4b4b      	ldr	r3, [pc, #300]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060a2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80060a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80060ae:	4a47      	ldr	r2, [pc, #284]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060b0:	430b      	orrs	r3, r1
 80060b2:	6593      	str	r3, [r2, #88]	; 0x58
 80060b4:	e003      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80060be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80060ca:	67bb      	str	r3, [r7, #120]	; 0x78
 80060cc:	2300      	movs	r3, #0
 80060ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 80060d0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80060d4:	460b      	mov	r3, r1
 80060d6:	4313      	orrs	r3, r2
 80060d8:	d03b      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80060da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060e6:	d01f      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80060e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060ec:	d818      	bhi.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80060ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060f2:	d003      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80060f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060f8:	d007      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80060fa:	e011      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060fc:	4b33      	ldr	r3, [pc, #204]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006100:	4a32      	ldr	r2, [pc, #200]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006102:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006106:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006108:	e00f      	b.n	800612a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800610a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800610e:	3328      	adds	r3, #40	; 0x28
 8006110:	2101      	movs	r1, #1
 8006112:	4618      	mov	r0, r3
 8006114:	f001 fc6a 	bl	80079ec <RCCEx_PLL3_Config>
 8006118:	4603      	mov	r3, r0
 800611a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800611e:	e004      	b.n	800612a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006126:	e000      	b.n	800612a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006128:	bf00      	nop
    }

    if (ret == HAL_OK)
 800612a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800612e:	2b00      	cmp	r3, #0
 8006130:	d10b      	bne.n	800614a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006132:	4b26      	ldr	r3, [pc, #152]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006136:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800613a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800613e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006142:	4a22      	ldr	r2, [pc, #136]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006144:	430b      	orrs	r3, r1
 8006146:	6553      	str	r3, [r2, #84]	; 0x54
 8006148:	e003      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800614a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800614e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006152:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800615e:	673b      	str	r3, [r7, #112]	; 0x70
 8006160:	2300      	movs	r3, #0
 8006162:	677b      	str	r3, [r7, #116]	; 0x74
 8006164:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006168:	460b      	mov	r3, r1
 800616a:	4313      	orrs	r3, r2
 800616c:	d034      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800616e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006174:	2b00      	cmp	r3, #0
 8006176:	d003      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800617c:	d007      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800617e:	e011      	b.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006180:	4b12      	ldr	r3, [pc, #72]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006184:	4a11      	ldr	r2, [pc, #68]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800618a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800618c:	e00e      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800618e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006192:	3308      	adds	r3, #8
 8006194:	2102      	movs	r1, #2
 8006196:	4618      	mov	r0, r3
 8006198:	f001 fb76 	bl	8007888 <RCCEx_PLL2_Config>
 800619c:	4603      	mov	r3, r0
 800619e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80061a2:	e003      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80061aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10d      	bne.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80061b4:	4b05      	ldr	r3, [pc, #20]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061c2:	4a02      	ldr	r2, [pc, #8]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061c4:	430b      	orrs	r3, r1
 80061c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80061c8:	e006      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80061ca:	bf00      	nop
 80061cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80061d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80061e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80061e6:	2300      	movs	r3, #0
 80061e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061ea:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80061ee:	460b      	mov	r3, r1
 80061f0:	4313      	orrs	r3, r2
 80061f2:	d00c      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80061f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061f8:	3328      	adds	r3, #40	; 0x28
 80061fa:	2102      	movs	r1, #2
 80061fc:	4618      	mov	r0, r3
 80061fe:	f001 fbf5 	bl	80079ec <RCCEx_PLL3_Config>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d002      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800620e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006216:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800621a:	663b      	str	r3, [r7, #96]	; 0x60
 800621c:	2300      	movs	r3, #0
 800621e:	667b      	str	r3, [r7, #100]	; 0x64
 8006220:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006224:	460b      	mov	r3, r1
 8006226:	4313      	orrs	r3, r2
 8006228:	d038      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800622a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800622e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006232:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006236:	d018      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006238:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800623c:	d811      	bhi.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800623e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006242:	d014      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006248:	d80b      	bhi.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800624a:	2b00      	cmp	r3, #0
 800624c:	d011      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800624e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006252:	d106      	bne.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006254:	4bc3      	ldr	r3, [pc, #780]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006258:	4ac2      	ldr	r2, [pc, #776]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800625a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800625e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006260:	e008      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006268:	e004      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800626a:	bf00      	nop
 800626c:	e002      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800626e:	bf00      	nop
 8006270:	e000      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006272:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006274:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006278:	2b00      	cmp	r3, #0
 800627a:	d10b      	bne.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800627c:	4bb9      	ldr	r3, [pc, #740]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800627e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006280:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006284:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006288:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800628c:	4ab5      	ldr	r2, [pc, #724]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800628e:	430b      	orrs	r3, r1
 8006290:	6553      	str	r3, [r2, #84]	; 0x54
 8006292:	e003      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006294:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006298:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800629c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80062a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80062aa:	2300      	movs	r3, #0
 80062ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062ae:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80062b2:	460b      	mov	r3, r1
 80062b4:	4313      	orrs	r3, r2
 80062b6:	d009      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80062b8:	4baa      	ldr	r3, [pc, #680]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062bc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80062c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062c6:	4aa7      	ldr	r2, [pc, #668]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062c8:	430b      	orrs	r3, r1
 80062ca:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80062cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80062d8:	653b      	str	r3, [r7, #80]	; 0x50
 80062da:	2300      	movs	r3, #0
 80062dc:	657b      	str	r3, [r7, #84]	; 0x54
 80062de:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80062e2:	460b      	mov	r3, r1
 80062e4:	4313      	orrs	r3, r2
 80062e6:	d00a      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80062e8:	4b9e      	ldr	r3, [pc, #632]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80062f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80062f8:	4a9a      	ldr	r2, [pc, #616]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062fa:	430b      	orrs	r3, r1
 80062fc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80062fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006306:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800630a:	64bb      	str	r3, [r7, #72]	; 0x48
 800630c:	2300      	movs	r3, #0
 800630e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006310:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006314:	460b      	mov	r3, r1
 8006316:	4313      	orrs	r3, r2
 8006318:	d009      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800631a:	4b92      	ldr	r3, [pc, #584]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800631c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800631e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006322:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006328:	4a8e      	ldr	r2, [pc, #568]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800632a:	430b      	orrs	r3, r1
 800632c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800632e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006336:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800633a:	643b      	str	r3, [r7, #64]	; 0x40
 800633c:	2300      	movs	r3, #0
 800633e:	647b      	str	r3, [r7, #68]	; 0x44
 8006340:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006344:	460b      	mov	r3, r1
 8006346:	4313      	orrs	r3, r2
 8006348:	d00e      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800634a:	4b86      	ldr	r3, [pc, #536]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	4a85      	ldr	r2, [pc, #532]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006350:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006354:	6113      	str	r3, [r2, #16]
 8006356:	4b83      	ldr	r3, [pc, #524]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006358:	6919      	ldr	r1, [r3, #16]
 800635a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800635e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006362:	4a80      	ldr	r2, [pc, #512]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006364:	430b      	orrs	r3, r1
 8006366:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006368:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800636c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006370:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006374:	63bb      	str	r3, [r7, #56]	; 0x38
 8006376:	2300      	movs	r3, #0
 8006378:	63fb      	str	r3, [r7, #60]	; 0x3c
 800637a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800637e:	460b      	mov	r3, r1
 8006380:	4313      	orrs	r3, r2
 8006382:	d009      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006384:	4b77      	ldr	r3, [pc, #476]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006388:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800638c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006392:	4a74      	ldr	r2, [pc, #464]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006394:	430b      	orrs	r3, r1
 8006396:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006398:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800639c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80063a4:	633b      	str	r3, [r7, #48]	; 0x30
 80063a6:	2300      	movs	r3, #0
 80063a8:	637b      	str	r3, [r7, #52]	; 0x34
 80063aa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80063ae:	460b      	mov	r3, r1
 80063b0:	4313      	orrs	r3, r2
 80063b2:	d00a      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80063b4:	4b6b      	ldr	r3, [pc, #428]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80063bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063c4:	4a67      	ldr	r2, [pc, #412]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063c6:	430b      	orrs	r3, r1
 80063c8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80063ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d2:	2100      	movs	r1, #0
 80063d4:	62b9      	str	r1, [r7, #40]	; 0x28
 80063d6:	f003 0301 	and.w	r3, r3, #1
 80063da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063dc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80063e0:	460b      	mov	r3, r1
 80063e2:	4313      	orrs	r3, r2
 80063e4:	d011      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063ea:	3308      	adds	r3, #8
 80063ec:	2100      	movs	r1, #0
 80063ee:	4618      	mov	r0, r3
 80063f0:	f001 fa4a 	bl	8007888 <RCCEx_PLL2_Config>
 80063f4:	4603      	mov	r3, r0
 80063f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80063fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d003      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006402:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006406:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800640a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800640e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006412:	2100      	movs	r1, #0
 8006414:	6239      	str	r1, [r7, #32]
 8006416:	f003 0302 	and.w	r3, r3, #2
 800641a:	627b      	str	r3, [r7, #36]	; 0x24
 800641c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006420:	460b      	mov	r3, r1
 8006422:	4313      	orrs	r3, r2
 8006424:	d011      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006426:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800642a:	3308      	adds	r3, #8
 800642c:	2101      	movs	r1, #1
 800642e:	4618      	mov	r0, r3
 8006430:	f001 fa2a 	bl	8007888 <RCCEx_PLL2_Config>
 8006434:	4603      	mov	r3, r0
 8006436:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800643a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800643e:	2b00      	cmp	r3, #0
 8006440:	d003      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006442:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006446:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800644a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800644e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006452:	2100      	movs	r1, #0
 8006454:	61b9      	str	r1, [r7, #24]
 8006456:	f003 0304 	and.w	r3, r3, #4
 800645a:	61fb      	str	r3, [r7, #28]
 800645c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006460:	460b      	mov	r3, r1
 8006462:	4313      	orrs	r3, r2
 8006464:	d011      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006466:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800646a:	3308      	adds	r3, #8
 800646c:	2102      	movs	r1, #2
 800646e:	4618      	mov	r0, r3
 8006470:	f001 fa0a 	bl	8007888 <RCCEx_PLL2_Config>
 8006474:	4603      	mov	r3, r0
 8006476:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800647a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800647e:	2b00      	cmp	r3, #0
 8006480:	d003      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006482:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006486:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800648a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800648e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006492:	2100      	movs	r1, #0
 8006494:	6139      	str	r1, [r7, #16]
 8006496:	f003 0308 	and.w	r3, r3, #8
 800649a:	617b      	str	r3, [r7, #20]
 800649c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80064a0:	460b      	mov	r3, r1
 80064a2:	4313      	orrs	r3, r2
 80064a4:	d011      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80064a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064aa:	3328      	adds	r3, #40	; 0x28
 80064ac:	2100      	movs	r1, #0
 80064ae:	4618      	mov	r0, r3
 80064b0:	f001 fa9c 	bl	80079ec <RCCEx_PLL3_Config>
 80064b4:	4603      	mov	r3, r0
 80064b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80064ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d003      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80064ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d2:	2100      	movs	r1, #0
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	f003 0310 	and.w	r3, r3, #16
 80064da:	60fb      	str	r3, [r7, #12]
 80064dc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80064e0:	460b      	mov	r3, r1
 80064e2:	4313      	orrs	r3, r2
 80064e4:	d011      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ea:	3328      	adds	r3, #40	; 0x28
 80064ec:	2101      	movs	r1, #1
 80064ee:	4618      	mov	r0, r3
 80064f0:	f001 fa7c 	bl	80079ec <RCCEx_PLL3_Config>
 80064f4:	4603      	mov	r3, r0
 80064f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80064fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d003      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006502:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006506:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800650a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800650e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006512:	2100      	movs	r1, #0
 8006514:	6039      	str	r1, [r7, #0]
 8006516:	f003 0320 	and.w	r3, r3, #32
 800651a:	607b      	str	r3, [r7, #4]
 800651c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006520:	460b      	mov	r3, r1
 8006522:	4313      	orrs	r3, r2
 8006524:	d011      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800652a:	3328      	adds	r3, #40	; 0x28
 800652c:	2102      	movs	r1, #2
 800652e:	4618      	mov	r0, r3
 8006530:	f001 fa5c 	bl	80079ec <RCCEx_PLL3_Config>
 8006534:	4603      	mov	r3, r0
 8006536:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800653a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800653e:	2b00      	cmp	r3, #0
 8006540:	d003      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006542:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006546:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800654a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800654e:	2b00      	cmp	r3, #0
 8006550:	d101      	bne.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006552:	2300      	movs	r3, #0
 8006554:	e000      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
}
 8006558:	4618      	mov	r0, r3
 800655a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800655e:	46bd      	mov	sp, r7
 8006560:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006564:	58024400 	.word	0x58024400

08006568 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b090      	sub	sp, #64	; 0x40
 800656c:	af00      	add	r7, sp, #0
 800656e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006572:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006576:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800657a:	430b      	orrs	r3, r1
 800657c:	f040 8094 	bne.w	80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006580:	4b9e      	ldr	r3, [pc, #632]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006584:	f003 0307 	and.w	r3, r3, #7
 8006588:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800658a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658c:	2b04      	cmp	r3, #4
 800658e:	f200 8087 	bhi.w	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006592:	a201      	add	r2, pc, #4	; (adr r2, 8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006598:	080065ad 	.word	0x080065ad
 800659c:	080065d5 	.word	0x080065d5
 80065a0:	080065fd 	.word	0x080065fd
 80065a4:	08006699 	.word	0x08006699
 80065a8:	08006625 	.word	0x08006625
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80065ac:	4b93      	ldr	r3, [pc, #588]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065b8:	d108      	bne.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065be:	4618      	mov	r0, r3
 80065c0:	f001 f810 	bl	80075e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80065c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065c8:	f000 bd45 	b.w	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80065cc:	2300      	movs	r3, #0
 80065ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065d0:	f000 bd41 	b.w	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80065d4:	4b89      	ldr	r3, [pc, #548]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065e0:	d108      	bne.n	80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065e2:	f107 0318 	add.w	r3, r7, #24
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 fd54 	bl	8007094 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065f0:	f000 bd31 	b.w	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80065f4:	2300      	movs	r3, #0
 80065f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065f8:	f000 bd2d 	b.w	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80065fc:	4b7f      	ldr	r3, [pc, #508]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006604:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006608:	d108      	bne.n	800661c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800660a:	f107 030c 	add.w	r3, r7, #12
 800660e:	4618      	mov	r0, r3
 8006610:	f000 fe94 	bl	800733c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006618:	f000 bd1d 	b.w	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800661c:	2300      	movs	r3, #0
 800661e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006620:	f000 bd19 	b.w	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006624:	4b75      	ldr	r3, [pc, #468]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006628:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800662c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800662e:	4b73      	ldr	r3, [pc, #460]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 0304 	and.w	r3, r3, #4
 8006636:	2b04      	cmp	r3, #4
 8006638:	d10c      	bne.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800663a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800663c:	2b00      	cmp	r3, #0
 800663e:	d109      	bne.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006640:	4b6e      	ldr	r3, [pc, #440]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	08db      	lsrs	r3, r3, #3
 8006646:	f003 0303 	and.w	r3, r3, #3
 800664a:	4a6d      	ldr	r2, [pc, #436]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800664c:	fa22 f303 	lsr.w	r3, r2, r3
 8006650:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006652:	e01f      	b.n	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006654:	4b69      	ldr	r3, [pc, #420]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800665c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006660:	d106      	bne.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006664:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006668:	d102      	bne.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800666a:	4b66      	ldr	r3, [pc, #408]	; (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800666c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800666e:	e011      	b.n	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006670:	4b62      	ldr	r3, [pc, #392]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006678:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800667c:	d106      	bne.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800667e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006680:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006684:	d102      	bne.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006686:	4b60      	ldr	r3, [pc, #384]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006688:	63fb      	str	r3, [r7, #60]	; 0x3c
 800668a:	e003      	b.n	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800668c:	2300      	movs	r3, #0
 800668e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006690:	f000 bce1 	b.w	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006694:	f000 bcdf 	b.w	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006698:	4b5c      	ldr	r3, [pc, #368]	; (800680c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800669a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800669c:	f000 bcdb 	b.w	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80066a0:	2300      	movs	r3, #0
 80066a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066a4:	f000 bcd7 	b.w	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80066a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066ac:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80066b0:	430b      	orrs	r3, r1
 80066b2:	f040 80ad 	bne.w	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80066b6:	4b51      	ldr	r3, [pc, #324]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ba:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80066be:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80066c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066c6:	d056      	beq.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80066c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066ce:	f200 8090 	bhi.w	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80066d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d4:	2bc0      	cmp	r3, #192	; 0xc0
 80066d6:	f000 8088 	beq.w	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80066da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066dc:	2bc0      	cmp	r3, #192	; 0xc0
 80066de:	f200 8088 	bhi.w	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80066e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e4:	2b80      	cmp	r3, #128	; 0x80
 80066e6:	d032      	beq.n	800674e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80066e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ea:	2b80      	cmp	r3, #128	; 0x80
 80066ec:	f200 8081 	bhi.w	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80066f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d003      	beq.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80066f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f8:	2b40      	cmp	r3, #64	; 0x40
 80066fa:	d014      	beq.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80066fc:	e079      	b.n	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80066fe:	4b3f      	ldr	r3, [pc, #252]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006706:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800670a:	d108      	bne.n	800671e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800670c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006710:	4618      	mov	r0, r3
 8006712:	f000 ff67 	bl	80075e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006718:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800671a:	f000 bc9c 	b.w	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800671e:	2300      	movs	r3, #0
 8006720:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006722:	f000 bc98 	b.w	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006726:	4b35      	ldr	r3, [pc, #212]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800672e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006732:	d108      	bne.n	8006746 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006734:	f107 0318 	add.w	r3, r7, #24
 8006738:	4618      	mov	r0, r3
 800673a:	f000 fcab 	bl	8007094 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006742:	f000 bc88 	b.w	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006746:	2300      	movs	r3, #0
 8006748:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800674a:	f000 bc84 	b.w	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800674e:	4b2b      	ldr	r3, [pc, #172]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006756:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800675a:	d108      	bne.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800675c:	f107 030c 	add.w	r3, r7, #12
 8006760:	4618      	mov	r0, r3
 8006762:	f000 fdeb 	bl	800733c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800676a:	f000 bc74 	b.w	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800676e:	2300      	movs	r3, #0
 8006770:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006772:	f000 bc70 	b.w	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006776:	4b21      	ldr	r3, [pc, #132]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800677a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800677e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006780:	4b1e      	ldr	r3, [pc, #120]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0304 	and.w	r3, r3, #4
 8006788:	2b04      	cmp	r3, #4
 800678a:	d10c      	bne.n	80067a6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800678c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800678e:	2b00      	cmp	r3, #0
 8006790:	d109      	bne.n	80067a6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006792:	4b1a      	ldr	r3, [pc, #104]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	08db      	lsrs	r3, r3, #3
 8006798:	f003 0303 	and.w	r3, r3, #3
 800679c:	4a18      	ldr	r2, [pc, #96]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800679e:	fa22 f303 	lsr.w	r3, r2, r3
 80067a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067a4:	e01f      	b.n	80067e6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80067a6:	4b15      	ldr	r3, [pc, #84]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067b2:	d106      	bne.n	80067c2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80067b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067ba:	d102      	bne.n	80067c2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80067bc:	4b11      	ldr	r3, [pc, #68]	; (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80067be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067c0:	e011      	b.n	80067e6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80067c2:	4b0e      	ldr	r3, [pc, #56]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067ce:	d106      	bne.n	80067de <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80067d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067d6:	d102      	bne.n	80067de <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80067d8:	4b0b      	ldr	r3, [pc, #44]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80067da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067dc:	e003      	b.n	80067e6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80067de:	2300      	movs	r3, #0
 80067e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80067e2:	f000 bc38 	b.w	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80067e6:	f000 bc36 	b.w	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80067ea:	4b08      	ldr	r3, [pc, #32]	; (800680c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80067ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067ee:	f000 bc32 	b.w	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80067f2:	2300      	movs	r3, #0
 80067f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067f6:	f000 bc2e 	b.w	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80067fa:	bf00      	nop
 80067fc:	58024400 	.word	0x58024400
 8006800:	03d09000 	.word	0x03d09000
 8006804:	003d0900 	.word	0x003d0900
 8006808:	017d7840 	.word	0x017d7840
 800680c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006810:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006814:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006818:	430b      	orrs	r3, r1
 800681a:	f040 809c 	bne.w	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800681e:	4b9e      	ldr	r3, [pc, #632]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006822:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006826:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800682e:	d054      	beq.n	80068da <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006832:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006836:	f200 808b 	bhi.w	8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800683a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006840:	f000 8083 	beq.w	800694a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006846:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800684a:	f200 8081 	bhi.w	8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800684e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006850:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006854:	d02f      	beq.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006858:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800685c:	d878      	bhi.n	8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800685e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006860:	2b00      	cmp	r3, #0
 8006862:	d004      	beq.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006866:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800686a:	d012      	beq.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800686c:	e070      	b.n	8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800686e:	4b8a      	ldr	r3, [pc, #552]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006876:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800687a:	d107      	bne.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800687c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006880:	4618      	mov	r0, r3
 8006882:	f000 feaf 	bl	80075e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006888:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800688a:	e3e4      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800688c:	2300      	movs	r3, #0
 800688e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006890:	e3e1      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006892:	4b81      	ldr	r3, [pc, #516]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800689a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800689e:	d107      	bne.n	80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068a0:	f107 0318 	add.w	r3, r7, #24
 80068a4:	4618      	mov	r0, r3
 80068a6:	f000 fbf5 	bl	8007094 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068ae:	e3d2      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068b0:	2300      	movs	r3, #0
 80068b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068b4:	e3cf      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80068b6:	4b78      	ldr	r3, [pc, #480]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068c2:	d107      	bne.n	80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068c4:	f107 030c 	add.w	r3, r7, #12
 80068c8:	4618      	mov	r0, r3
 80068ca:	f000 fd37 	bl	800733c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068d2:	e3c0      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068d4:	2300      	movs	r3, #0
 80068d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068d8:	e3bd      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80068da:	4b6f      	ldr	r3, [pc, #444]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80068e2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80068e4:	4b6c      	ldr	r3, [pc, #432]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 0304 	and.w	r3, r3, #4
 80068ec:	2b04      	cmp	r3, #4
 80068ee:	d10c      	bne.n	800690a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80068f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d109      	bne.n	800690a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068f6:	4b68      	ldr	r3, [pc, #416]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	08db      	lsrs	r3, r3, #3
 80068fc:	f003 0303 	and.w	r3, r3, #3
 8006900:	4a66      	ldr	r2, [pc, #408]	; (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006902:	fa22 f303 	lsr.w	r3, r2, r3
 8006906:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006908:	e01e      	b.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800690a:	4b63      	ldr	r3, [pc, #396]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006916:	d106      	bne.n	8006926 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800691a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800691e:	d102      	bne.n	8006926 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006920:	4b5f      	ldr	r3, [pc, #380]	; (8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006922:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006924:	e010      	b.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006926:	4b5c      	ldr	r3, [pc, #368]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800692e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006932:	d106      	bne.n	8006942 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006936:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800693a:	d102      	bne.n	8006942 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800693c:	4b59      	ldr	r3, [pc, #356]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800693e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006940:	e002      	b.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006942:	2300      	movs	r3, #0
 8006944:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006946:	e386      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006948:	e385      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800694a:	4b57      	ldr	r3, [pc, #348]	; (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800694c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800694e:	e382      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006950:	2300      	movs	r3, #0
 8006952:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006954:	e37f      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006956:	e9d7 2300 	ldrd	r2, r3, [r7]
 800695a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800695e:	430b      	orrs	r3, r1
 8006960:	f040 80a7 	bne.w	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006964:	4b4c      	ldr	r3, [pc, #304]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006968:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800696c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800696e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006970:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006974:	d055      	beq.n	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006978:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800697c:	f200 8096 	bhi.w	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006982:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006986:	f000 8084 	beq.w	8006a92 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800698a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006990:	f200 808c 	bhi.w	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006996:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800699a:	d030      	beq.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800699c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069a2:	f200 8083 	bhi.w	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80069a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d004      	beq.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80069ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80069b2:	d012      	beq.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80069b4:	e07a      	b.n	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80069b6:	4b38      	ldr	r3, [pc, #224]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069c2:	d107      	bne.n	80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069c8:	4618      	mov	r0, r3
 80069ca:	f000 fe0b 	bl	80075e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80069ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069d2:	e340      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069d4:	2300      	movs	r3, #0
 80069d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069d8:	e33d      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069da:	4b2f      	ldr	r3, [pc, #188]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069e6:	d107      	bne.n	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069e8:	f107 0318 	add.w	r3, r7, #24
 80069ec:	4618      	mov	r0, r3
 80069ee:	f000 fb51 	bl	8007094 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069f6:	e32e      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069f8:	2300      	movs	r3, #0
 80069fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069fc:	e32b      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069fe:	4b26      	ldr	r3, [pc, #152]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a0a:	d107      	bne.n	8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a0c:	f107 030c 	add.w	r3, r7, #12
 8006a10:	4618      	mov	r0, r3
 8006a12:	f000 fc93 	bl	800733c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a1a:	e31c      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a20:	e319      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006a22:	4b1d      	ldr	r3, [pc, #116]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a2a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a2c:	4b1a      	ldr	r3, [pc, #104]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0304 	and.w	r3, r3, #4
 8006a34:	2b04      	cmp	r3, #4
 8006a36:	d10c      	bne.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d109      	bne.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a3e:	4b16      	ldr	r3, [pc, #88]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	08db      	lsrs	r3, r3, #3
 8006a44:	f003 0303 	and.w	r3, r3, #3
 8006a48:	4a14      	ldr	r2, [pc, #80]	; (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a50:	e01e      	b.n	8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a52:	4b11      	ldr	r3, [pc, #68]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a5e:	d106      	bne.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a66:	d102      	bne.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006a68:	4b0d      	ldr	r3, [pc, #52]	; (8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a6c:	e010      	b.n	8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a6e:	4b0a      	ldr	r3, [pc, #40]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a7a:	d106      	bne.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a82:	d102      	bne.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006a84:	4b07      	ldr	r3, [pc, #28]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006a86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a88:	e002      	b.n	8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006a8e:	e2e2      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a90:	e2e1      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006a92:	4b05      	ldr	r3, [pc, #20]	; (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006a94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a96:	e2de      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a98:	58024400 	.word	0x58024400
 8006a9c:	03d09000 	.word	0x03d09000
 8006aa0:	003d0900 	.word	0x003d0900
 8006aa4:	017d7840 	.word	0x017d7840
 8006aa8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006aac:	2300      	movs	r3, #0
 8006aae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ab0:	e2d1      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006ab2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ab6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006aba:	430b      	orrs	r3, r1
 8006abc:	f040 809c 	bne.w	8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006ac0:	4b93      	ldr	r3, [pc, #588]	; (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ac4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006ac8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006acc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ad0:	d054      	beq.n	8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ad8:	f200 808b 	bhi.w	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ade:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ae2:	f000 8083 	beq.w	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006aec:	f200 8081 	bhi.w	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006af6:	d02f      	beq.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006afe:	d878      	bhi.n	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d004      	beq.n	8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b0c:	d012      	beq.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006b0e:	e070      	b.n	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b10:	4b7f      	ldr	r3, [pc, #508]	; (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b1c:	d107      	bne.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b22:	4618      	mov	r0, r3
 8006b24:	f000 fd5e 	bl	80075e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b2c:	e293      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b32:	e290      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b34:	4b76      	ldr	r3, [pc, #472]	; (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b40:	d107      	bne.n	8006b52 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b42:	f107 0318 	add.w	r3, r7, #24
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 faa4 	bl	8007094 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b50:	e281      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b52:	2300      	movs	r3, #0
 8006b54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b56:	e27e      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b58:	4b6d      	ldr	r3, [pc, #436]	; (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b64:	d107      	bne.n	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b66:	f107 030c 	add.w	r3, r7, #12
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f000 fbe6 	bl	800733c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b74:	e26f      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b76:	2300      	movs	r3, #0
 8006b78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b7a:	e26c      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006b7c:	4b64      	ldr	r3, [pc, #400]	; (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b84:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b86:	4b62      	ldr	r3, [pc, #392]	; (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 0304 	and.w	r3, r3, #4
 8006b8e:	2b04      	cmp	r3, #4
 8006b90:	d10c      	bne.n	8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d109      	bne.n	8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b98:	4b5d      	ldr	r3, [pc, #372]	; (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	08db      	lsrs	r3, r3, #3
 8006b9e:	f003 0303 	and.w	r3, r3, #3
 8006ba2:	4a5c      	ldr	r2, [pc, #368]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006baa:	e01e      	b.n	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006bac:	4b58      	ldr	r3, [pc, #352]	; (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bb8:	d106      	bne.n	8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bc0:	d102      	bne.n	8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006bc2:	4b55      	ldr	r3, [pc, #340]	; (8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bc6:	e010      	b.n	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006bc8:	4b51      	ldr	r3, [pc, #324]	; (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bd4:	d106      	bne.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bdc:	d102      	bne.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006bde:	4b4f      	ldr	r3, [pc, #316]	; (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006be0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006be2:	e002      	b.n	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006be4:	2300      	movs	r3, #0
 8006be6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006be8:	e235      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006bea:	e234      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006bec:	4b4c      	ldr	r3, [pc, #304]	; (8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006bee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bf0:	e231      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bf6:	e22e      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006bf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bfc:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006c00:	430b      	orrs	r3, r1
 8006c02:	f040 808f 	bne.w	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006c06:	4b42      	ldr	r3, [pc, #264]	; (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c0a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006c0e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8006c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c16:	d06b      	beq.n	8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c1e:	d874      	bhi.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c26:	d056      	beq.n	8006cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c2e:	d86c      	bhi.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c36:	d03b      	beq.n	8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c3e:	d864      	bhi.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c46:	d021      	beq.n	8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c4e:	d85c      	bhi.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d004      	beq.n	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c5c:	d004      	beq.n	8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006c5e:	e054      	b.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006c60:	f7fe fa4c 	bl	80050fc <HAL_RCC_GetPCLK1Freq>
 8006c64:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006c66:	e1f6      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c68:	4b29      	ldr	r3, [pc, #164]	; (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c74:	d107      	bne.n	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c76:	f107 0318 	add.w	r3, r7, #24
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 fa0a 	bl	8007094 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c84:	e1e7      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c86:	2300      	movs	r3, #0
 8006c88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c8a:	e1e4      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c8c:	4b20      	ldr	r3, [pc, #128]	; (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c98:	d107      	bne.n	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c9a:	f107 030c 	add.w	r3, r7, #12
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 fb4c 	bl	800733c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ca8:	e1d5      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006caa:	2300      	movs	r3, #0
 8006cac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cae:	e1d2      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006cb0:	4b17      	ldr	r3, [pc, #92]	; (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 0304 	and.w	r3, r3, #4
 8006cb8:	2b04      	cmp	r3, #4
 8006cba:	d109      	bne.n	8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006cbc:	4b14      	ldr	r3, [pc, #80]	; (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	08db      	lsrs	r3, r3, #3
 8006cc2:	f003 0303 	and.w	r3, r3, #3
 8006cc6:	4a13      	ldr	r2, [pc, #76]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8006ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cce:	e1c2      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cd4:	e1bf      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006cd6:	4b0e      	ldr	r3, [pc, #56]	; (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ce2:	d102      	bne.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006ce4:	4b0c      	ldr	r3, [pc, #48]	; (8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ce8:	e1b5      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cea:	2300      	movs	r3, #0
 8006cec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cee:	e1b2      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006cf0:	4b07      	ldr	r3, [pc, #28]	; (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cfc:	d102      	bne.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006cfe:	4b07      	ldr	r3, [pc, #28]	; (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006d00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d02:	e1a8      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d04:	2300      	movs	r3, #0
 8006d06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d08:	e1a5      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d0e:	e1a2      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d10:	58024400 	.word	0x58024400
 8006d14:	03d09000 	.word	0x03d09000
 8006d18:	003d0900 	.word	0x003d0900
 8006d1c:	017d7840 	.word	0x017d7840
 8006d20:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006d24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d28:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8006d2c:	430b      	orrs	r3, r1
 8006d2e:	d173      	bne.n	8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006d30:	4b9c      	ldr	r3, [pc, #624]	; (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d38:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d40:	d02f      	beq.n	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d48:	d863      	bhi.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d004      	beq.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d56:	d012      	beq.n	8006d7e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006d58:	e05b      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d5a:	4b92      	ldr	r3, [pc, #584]	; (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d66:	d107      	bne.n	8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d68:	f107 0318 	add.w	r3, r7, #24
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f000 f991 	bl	8007094 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d76:	e16e      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d7c:	e16b      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d7e:	4b89      	ldr	r3, [pc, #548]	; (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d8a:	d107      	bne.n	8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d8c:	f107 030c 	add.w	r3, r7, #12
 8006d90:	4618      	mov	r0, r3
 8006d92:	f000 fad3 	bl	800733c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d9a:	e15c      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006da0:	e159      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006da2:	4b80      	ldr	r3, [pc, #512]	; (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006da6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006daa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006dac:	4b7d      	ldr	r3, [pc, #500]	; (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 0304 	and.w	r3, r3, #4
 8006db4:	2b04      	cmp	r3, #4
 8006db6:	d10c      	bne.n	8006dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d109      	bne.n	8006dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006dbe:	4b79      	ldr	r3, [pc, #484]	; (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	08db      	lsrs	r3, r3, #3
 8006dc4:	f003 0303 	and.w	r3, r3, #3
 8006dc8:	4a77      	ldr	r2, [pc, #476]	; (8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006dca:	fa22 f303 	lsr.w	r3, r2, r3
 8006dce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dd0:	e01e      	b.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006dd2:	4b74      	ldr	r3, [pc, #464]	; (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dde:	d106      	bne.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006de2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006de6:	d102      	bne.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006de8:	4b70      	ldr	r3, [pc, #448]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006dea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dec:	e010      	b.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006dee:	4b6d      	ldr	r3, [pc, #436]	; (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006df6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dfa:	d106      	bne.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e02:	d102      	bne.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006e04:	4b6a      	ldr	r3, [pc, #424]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006e06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e08:	e002      	b.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006e0e:	e122      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006e10:	e121      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006e12:	2300      	movs	r3, #0
 8006e14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e16:	e11e      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006e18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e1c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006e20:	430b      	orrs	r3, r1
 8006e22:	d133      	bne.n	8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006e24:	4b5f      	ldr	r3, [pc, #380]	; (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e2c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d004      	beq.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e3a:	d012      	beq.n	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006e3c:	e023      	b.n	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e3e:	4b59      	ldr	r3, [pc, #356]	; (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e4a:	d107      	bne.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e50:	4618      	mov	r0, r3
 8006e52:	f000 fbc7 	bl	80075e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e5a:	e0fc      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e60:	e0f9      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e62:	4b50      	ldr	r3, [pc, #320]	; (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e6e:	d107      	bne.n	8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e70:	f107 0318 	add.w	r3, r7, #24
 8006e74:	4618      	mov	r0, r3
 8006e76:	f000 f90d 	bl	8007094 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006e7a:	6a3b      	ldr	r3, [r7, #32]
 8006e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e7e:	e0ea      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e80:	2300      	movs	r3, #0
 8006e82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e84:	e0e7      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006e86:	2300      	movs	r3, #0
 8006e88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e8a:	e0e4      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006e8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e90:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006e94:	430b      	orrs	r3, r1
 8006e96:	f040 808d 	bne.w	8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006e9a:	4b42      	ldr	r3, [pc, #264]	; (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e9e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006ea2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006eaa:	d06b      	beq.n	8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006eb2:	d874      	bhi.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eba:	d056      	beq.n	8006f6a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ec2:	d86c      	bhi.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006eca:	d03b      	beq.n	8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8006ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ece:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ed2:	d864      	bhi.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006eda:	d021      	beq.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ede:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ee2:	d85c      	bhi.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d004      	beq.n	8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8006eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ef0:	d004      	beq.n	8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8006ef2:	e054      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006ef4:	f000 f8b8 	bl	8007068 <HAL_RCCEx_GetD3PCLK1Freq>
 8006ef8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006efa:	e0ac      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006efc:	4b29      	ldr	r3, [pc, #164]	; (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f08:	d107      	bne.n	8006f1a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f0a:	f107 0318 	add.w	r3, r7, #24
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f000 f8c0 	bl	8007094 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f18:	e09d      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f1e:	e09a      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f20:	4b20      	ldr	r3, [pc, #128]	; (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f2c:	d107      	bne.n	8006f3e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f2e:	f107 030c 	add.w	r3, r7, #12
 8006f32:	4618      	mov	r0, r3
 8006f34:	f000 fa02 	bl	800733c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f3c:	e08b      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f42:	e088      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f44:	4b17      	ldr	r3, [pc, #92]	; (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 0304 	and.w	r3, r3, #4
 8006f4c:	2b04      	cmp	r3, #4
 8006f4e:	d109      	bne.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f50:	4b14      	ldr	r3, [pc, #80]	; (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	08db      	lsrs	r3, r3, #3
 8006f56:	f003 0303 	and.w	r3, r3, #3
 8006f5a:	4a13      	ldr	r2, [pc, #76]	; (8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f62:	e078      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f64:	2300      	movs	r3, #0
 8006f66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f68:	e075      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006f6a:	4b0e      	ldr	r3, [pc, #56]	; (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f76:	d102      	bne.n	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006f78:	4b0c      	ldr	r3, [pc, #48]	; (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f7c:	e06b      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f82:	e068      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006f84:	4b07      	ldr	r3, [pc, #28]	; (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f90:	d102      	bne.n	8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8006f92:	4b07      	ldr	r3, [pc, #28]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006f94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f96:	e05e      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f9c:	e05b      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fa2:	e058      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006fa4:	58024400 	.word	0x58024400
 8006fa8:	03d09000 	.word	0x03d09000
 8006fac:	003d0900 	.word	0x003d0900
 8006fb0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006fb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fb8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8006fbc:	430b      	orrs	r3, r1
 8006fbe:	d148      	bne.n	8007052 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006fc0:	4b27      	ldr	r3, [pc, #156]	; (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fc4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006fc8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fd0:	d02a      	beq.n	8007028 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8006fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fd8:	d838      	bhi.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d004      	beq.n	8006fea <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006fe6:	d00d      	beq.n	8007004 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8006fe8:	e030      	b.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006fea:	4b1d      	ldr	r3, [pc, #116]	; (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ff2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ff6:	d102      	bne.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8006ff8:	4b1a      	ldr	r3, [pc, #104]	; (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ffc:	e02b      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ffe:	2300      	movs	r3, #0
 8007000:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007002:	e028      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007004:	4b16      	ldr	r3, [pc, #88]	; (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800700c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007010:	d107      	bne.n	8007022 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007016:	4618      	mov	r0, r3
 8007018:	f000 fae4 	bl	80075e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800701c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007020:	e019      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007022:	2300      	movs	r3, #0
 8007024:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007026:	e016      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007028:	4b0d      	ldr	r3, [pc, #52]	; (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007030:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007034:	d107      	bne.n	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007036:	f107 0318 	add.w	r3, r7, #24
 800703a:	4618      	mov	r0, r3
 800703c:	f000 f82a 	bl	8007094 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007044:	e007      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007046:	2300      	movs	r3, #0
 8007048:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800704a:	e004      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800704c:	2300      	movs	r3, #0
 800704e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007050:	e001      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007052:	2300      	movs	r3, #0
 8007054:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8007056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007058:	4618      	mov	r0, r3
 800705a:	3740      	adds	r7, #64	; 0x40
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}
 8007060:	58024400 	.word	0x58024400
 8007064:	017d7840 	.word	0x017d7840

08007068 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800706c:	f7fe f816 	bl	800509c <HAL_RCC_GetHCLKFreq>
 8007070:	4602      	mov	r2, r0
 8007072:	4b06      	ldr	r3, [pc, #24]	; (800708c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	091b      	lsrs	r3, r3, #4
 8007078:	f003 0307 	and.w	r3, r3, #7
 800707c:	4904      	ldr	r1, [pc, #16]	; (8007090 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800707e:	5ccb      	ldrb	r3, [r1, r3]
 8007080:	f003 031f 	and.w	r3, r3, #31
 8007084:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007088:	4618      	mov	r0, r3
 800708a:	bd80      	pop	{r7, pc}
 800708c:	58024400 	.word	0x58024400
 8007090:	0800c5f4 	.word	0x0800c5f4

08007094 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007094:	b480      	push	{r7}
 8007096:	b089      	sub	sp, #36	; 0x24
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800709c:	4ba1      	ldr	r3, [pc, #644]	; (8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800709e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a0:	f003 0303 	and.w	r3, r3, #3
 80070a4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80070a6:	4b9f      	ldr	r3, [pc, #636]	; (8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070aa:	0b1b      	lsrs	r3, r3, #12
 80070ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070b0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80070b2:	4b9c      	ldr	r3, [pc, #624]	; (8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b6:	091b      	lsrs	r3, r3, #4
 80070b8:	f003 0301 	and.w	r3, r3, #1
 80070bc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80070be:	4b99      	ldr	r3, [pc, #612]	; (8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c2:	08db      	lsrs	r3, r3, #3
 80070c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	fb02 f303 	mul.w	r3, r2, r3
 80070ce:	ee07 3a90 	vmov	s15, r3
 80070d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f000 8111 	beq.w	8007304 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	f000 8083 	beq.w	80071f0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	f200 80a1 	bhi.w	8007234 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d003      	beq.n	8007100 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d056      	beq.n	80071ac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80070fe:	e099      	b.n	8007234 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007100:	4b88      	ldr	r3, [pc, #544]	; (8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 0320 	and.w	r3, r3, #32
 8007108:	2b00      	cmp	r3, #0
 800710a:	d02d      	beq.n	8007168 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800710c:	4b85      	ldr	r3, [pc, #532]	; (8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	08db      	lsrs	r3, r3, #3
 8007112:	f003 0303 	and.w	r3, r3, #3
 8007116:	4a84      	ldr	r2, [pc, #528]	; (8007328 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007118:	fa22 f303 	lsr.w	r3, r2, r3
 800711c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	ee07 3a90 	vmov	s15, r3
 8007124:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	ee07 3a90 	vmov	s15, r3
 800712e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007136:	4b7b      	ldr	r3, [pc, #492]	; (8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800713e:	ee07 3a90 	vmov	s15, r3
 8007142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007146:	ed97 6a03 	vldr	s12, [r7, #12]
 800714a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800732c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800714e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007156:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800715a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800715e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007162:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007166:	e087      	b.n	8007278 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	ee07 3a90 	vmov	s15, r3
 800716e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007172:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007330 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800717a:	4b6a      	ldr	r3, [pc, #424]	; (8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800717c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007182:	ee07 3a90 	vmov	s15, r3
 8007186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800718a:	ed97 6a03 	vldr	s12, [r7, #12]
 800718e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800732c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800719a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800719e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071aa:	e065      	b.n	8007278 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	ee07 3a90 	vmov	s15, r3
 80071b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007334 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80071ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071be:	4b59      	ldr	r3, [pc, #356]	; (8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071c6:	ee07 3a90 	vmov	s15, r3
 80071ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80071d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800732c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071ee:	e043      	b.n	8007278 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	ee07 3a90 	vmov	s15, r3
 80071f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007338 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80071fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007202:	4b48      	ldr	r3, [pc, #288]	; (8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800720a:	ee07 3a90 	vmov	s15, r3
 800720e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007212:	ed97 6a03 	vldr	s12, [r7, #12]
 8007216:	eddf 5a45 	vldr	s11, [pc, #276]	; 800732c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800721a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800721e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800722a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800722e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007232:	e021      	b.n	8007278 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	ee07 3a90 	vmov	s15, r3
 800723a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800723e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007334 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007246:	4b37      	ldr	r3, [pc, #220]	; (8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800724e:	ee07 3a90 	vmov	s15, r3
 8007252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007256:	ed97 6a03 	vldr	s12, [r7, #12]
 800725a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800732c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800725e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007266:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800726a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800726e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007272:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007276:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007278:	4b2a      	ldr	r3, [pc, #168]	; (8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800727a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800727c:	0a5b      	lsrs	r3, r3, #9
 800727e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007282:	ee07 3a90 	vmov	s15, r3
 8007286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800728a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800728e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007292:	edd7 6a07 	vldr	s13, [r7, #28]
 8007296:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800729a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800729e:	ee17 2a90 	vmov	r2, s15
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80072a6:	4b1f      	ldr	r3, [pc, #124]	; (8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072aa:	0c1b      	lsrs	r3, r3, #16
 80072ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072b0:	ee07 3a90 	vmov	s15, r3
 80072b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80072c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072cc:	ee17 2a90 	vmov	r2, s15
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80072d4:	4b13      	ldr	r3, [pc, #76]	; (8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d8:	0e1b      	lsrs	r3, r3, #24
 80072da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072de:	ee07 3a90 	vmov	s15, r3
 80072e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80072f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072fa:	ee17 2a90 	vmov	r2, s15
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007302:	e008      	b.n	8007316 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	609a      	str	r2, [r3, #8]
}
 8007316:	bf00      	nop
 8007318:	3724      	adds	r7, #36	; 0x24
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	58024400 	.word	0x58024400
 8007328:	03d09000 	.word	0x03d09000
 800732c:	46000000 	.word	0x46000000
 8007330:	4c742400 	.word	0x4c742400
 8007334:	4a742400 	.word	0x4a742400
 8007338:	4bbebc20 	.word	0x4bbebc20

0800733c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800733c:	b480      	push	{r7}
 800733e:	b089      	sub	sp, #36	; 0x24
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007344:	4ba1      	ldr	r3, [pc, #644]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007348:	f003 0303 	and.w	r3, r3, #3
 800734c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800734e:	4b9f      	ldr	r3, [pc, #636]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007352:	0d1b      	lsrs	r3, r3, #20
 8007354:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007358:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800735a:	4b9c      	ldr	r3, [pc, #624]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800735c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735e:	0a1b      	lsrs	r3, r3, #8
 8007360:	f003 0301 	and.w	r3, r3, #1
 8007364:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007366:	4b99      	ldr	r3, [pc, #612]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800736a:	08db      	lsrs	r3, r3, #3
 800736c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	fb02 f303 	mul.w	r3, r2, r3
 8007376:	ee07 3a90 	vmov	s15, r3
 800737a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800737e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	2b00      	cmp	r3, #0
 8007386:	f000 8111 	beq.w	80075ac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	2b02      	cmp	r3, #2
 800738e:	f000 8083 	beq.w	8007498 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	2b02      	cmp	r3, #2
 8007396:	f200 80a1 	bhi.w	80074dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d003      	beq.n	80073a8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d056      	beq.n	8007454 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80073a6:	e099      	b.n	80074dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073a8:	4b88      	ldr	r3, [pc, #544]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 0320 	and.w	r3, r3, #32
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d02d      	beq.n	8007410 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80073b4:	4b85      	ldr	r3, [pc, #532]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	08db      	lsrs	r3, r3, #3
 80073ba:	f003 0303 	and.w	r3, r3, #3
 80073be:	4a84      	ldr	r2, [pc, #528]	; (80075d0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80073c0:	fa22 f303 	lsr.w	r3, r2, r3
 80073c4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	ee07 3a90 	vmov	s15, r3
 80073cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	ee07 3a90 	vmov	s15, r3
 80073d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073de:	4b7b      	ldr	r3, [pc, #492]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073e6:	ee07 3a90 	vmov	s15, r3
 80073ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80073f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80075d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800740a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800740e:	e087      	b.n	8007520 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	ee07 3a90 	vmov	s15, r3
 8007416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800741a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80075d8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800741e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007422:	4b6a      	ldr	r3, [pc, #424]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800742a:	ee07 3a90 	vmov	s15, r3
 800742e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007432:	ed97 6a03 	vldr	s12, [r7, #12]
 8007436:	eddf 5a67 	vldr	s11, [pc, #412]	; 80075d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800743a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800743e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007442:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800744a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800744e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007452:	e065      	b.n	8007520 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	ee07 3a90 	vmov	s15, r3
 800745a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800745e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80075dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007466:	4b59      	ldr	r3, [pc, #356]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800746e:	ee07 3a90 	vmov	s15, r3
 8007472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007476:	ed97 6a03 	vldr	s12, [r7, #12]
 800747a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80075d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800747e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007486:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800748a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800748e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007492:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007496:	e043      	b.n	8007520 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	ee07 3a90 	vmov	s15, r3
 800749e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80075e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80074a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074aa:	4b48      	ldr	r3, [pc, #288]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074b2:	ee07 3a90 	vmov	s15, r3
 80074b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80074be:	eddf 5a45 	vldr	s11, [pc, #276]	; 80075d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074da:	e021      	b.n	8007520 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	ee07 3a90 	vmov	s15, r3
 80074e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80075dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80074ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ee:	4b37      	ldr	r3, [pc, #220]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074f6:	ee07 3a90 	vmov	s15, r3
 80074fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007502:	eddf 5a34 	vldr	s11, [pc, #208]	; 80075d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800750a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800750e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800751a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800751e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007520:	4b2a      	ldr	r3, [pc, #168]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007524:	0a5b      	lsrs	r3, r3, #9
 8007526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800752a:	ee07 3a90 	vmov	s15, r3
 800752e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007532:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007536:	ee37 7a87 	vadd.f32	s14, s15, s14
 800753a:	edd7 6a07 	vldr	s13, [r7, #28]
 800753e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007542:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007546:	ee17 2a90 	vmov	r2, s15
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800754e:	4b1f      	ldr	r3, [pc, #124]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007552:	0c1b      	lsrs	r3, r3, #16
 8007554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007558:	ee07 3a90 	vmov	s15, r3
 800755c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007560:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007564:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007568:	edd7 6a07 	vldr	s13, [r7, #28]
 800756c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007570:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007574:	ee17 2a90 	vmov	r2, s15
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800757c:	4b13      	ldr	r3, [pc, #76]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800757e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007580:	0e1b      	lsrs	r3, r3, #24
 8007582:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007586:	ee07 3a90 	vmov	s15, r3
 800758a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800758e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007592:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007596:	edd7 6a07 	vldr	s13, [r7, #28]
 800759a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800759e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075a2:	ee17 2a90 	vmov	r2, s15
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80075aa:	e008      	b.n	80075be <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	609a      	str	r2, [r3, #8]
}
 80075be:	bf00      	nop
 80075c0:	3724      	adds	r7, #36	; 0x24
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop
 80075cc:	58024400 	.word	0x58024400
 80075d0:	03d09000 	.word	0x03d09000
 80075d4:	46000000 	.word	0x46000000
 80075d8:	4c742400 	.word	0x4c742400
 80075dc:	4a742400 	.word	0x4a742400
 80075e0:	4bbebc20 	.word	0x4bbebc20

080075e4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b089      	sub	sp, #36	; 0x24
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80075ec:	4ba0      	ldr	r3, [pc, #640]	; (8007870 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f0:	f003 0303 	and.w	r3, r3, #3
 80075f4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80075f6:	4b9e      	ldr	r3, [pc, #632]	; (8007870 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fa:	091b      	lsrs	r3, r3, #4
 80075fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007600:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007602:	4b9b      	ldr	r3, [pc, #620]	; (8007870 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007606:	f003 0301 	and.w	r3, r3, #1
 800760a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800760c:	4b98      	ldr	r3, [pc, #608]	; (8007870 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800760e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007610:	08db      	lsrs	r3, r3, #3
 8007612:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	fb02 f303 	mul.w	r3, r2, r3
 800761c:	ee07 3a90 	vmov	s15, r3
 8007620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007624:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	2b00      	cmp	r3, #0
 800762c:	f000 8111 	beq.w	8007852 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	2b02      	cmp	r3, #2
 8007634:	f000 8083 	beq.w	800773e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	2b02      	cmp	r3, #2
 800763c:	f200 80a1 	bhi.w	8007782 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d003      	beq.n	800764e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	2b01      	cmp	r3, #1
 800764a:	d056      	beq.n	80076fa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800764c:	e099      	b.n	8007782 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800764e:	4b88      	ldr	r3, [pc, #544]	; (8007870 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 0320 	and.w	r3, r3, #32
 8007656:	2b00      	cmp	r3, #0
 8007658:	d02d      	beq.n	80076b6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800765a:	4b85      	ldr	r3, [pc, #532]	; (8007870 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	08db      	lsrs	r3, r3, #3
 8007660:	f003 0303 	and.w	r3, r3, #3
 8007664:	4a83      	ldr	r2, [pc, #524]	; (8007874 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007666:	fa22 f303 	lsr.w	r3, r2, r3
 800766a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	ee07 3a90 	vmov	s15, r3
 8007672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	ee07 3a90 	vmov	s15, r3
 800767c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007680:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007684:	4b7a      	ldr	r3, [pc, #488]	; (8007870 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800768c:	ee07 3a90 	vmov	s15, r3
 8007690:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007694:	ed97 6a03 	vldr	s12, [r7, #12]
 8007698:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007878 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800769c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076b0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80076b4:	e087      	b.n	80077c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	ee07 3a90 	vmov	s15, r3
 80076bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076c0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800787c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80076c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076c8:	4b69      	ldr	r3, [pc, #420]	; (8007870 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076d0:	ee07 3a90 	vmov	s15, r3
 80076d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80076dc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007878 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80076e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076f8:	e065      	b.n	80077c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	ee07 3a90 	vmov	s15, r3
 8007700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007704:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007880 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007708:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800770c:	4b58      	ldr	r3, [pc, #352]	; (8007870 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800770e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007714:	ee07 3a90 	vmov	s15, r3
 8007718:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800771c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007720:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007878 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007724:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007728:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800772c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007730:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007738:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800773c:	e043      	b.n	80077c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	ee07 3a90 	vmov	s15, r3
 8007744:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007748:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007884 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800774c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007750:	4b47      	ldr	r3, [pc, #284]	; (8007870 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007758:	ee07 3a90 	vmov	s15, r3
 800775c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007760:	ed97 6a03 	vldr	s12, [r7, #12]
 8007764:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007878 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007768:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800776c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007770:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007774:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800777c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007780:	e021      	b.n	80077c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	ee07 3a90 	vmov	s15, r3
 8007788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800778c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800787c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007790:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007794:	4b36      	ldr	r3, [pc, #216]	; (8007870 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800779c:	ee07 3a90 	vmov	s15, r3
 80077a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80077a8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007878 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80077ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077c4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80077c6:	4b2a      	ldr	r3, [pc, #168]	; (8007870 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ca:	0a5b      	lsrs	r3, r3, #9
 80077cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077d0:	ee07 3a90 	vmov	s15, r3
 80077d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80077e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077ec:	ee17 2a90 	vmov	r2, s15
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80077f4:	4b1e      	ldr	r3, [pc, #120]	; (8007870 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f8:	0c1b      	lsrs	r3, r3, #16
 80077fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077fe:	ee07 3a90 	vmov	s15, r3
 8007802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007806:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800780a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800780e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007812:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007816:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800781a:	ee17 2a90 	vmov	r2, s15
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007822:	4b13      	ldr	r3, [pc, #76]	; (8007870 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007826:	0e1b      	lsrs	r3, r3, #24
 8007828:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800782c:	ee07 3a90 	vmov	s15, r3
 8007830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007834:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007838:	ee37 7a87 	vadd.f32	s14, s15, s14
 800783c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007840:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007844:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007848:	ee17 2a90 	vmov	r2, s15
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007850:	e008      	b.n	8007864 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	609a      	str	r2, [r3, #8]
}
 8007864:	bf00      	nop
 8007866:	3724      	adds	r7, #36	; 0x24
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr
 8007870:	58024400 	.word	0x58024400
 8007874:	03d09000 	.word	0x03d09000
 8007878:	46000000 	.word	0x46000000
 800787c:	4c742400 	.word	0x4c742400
 8007880:	4a742400 	.word	0x4a742400
 8007884:	4bbebc20 	.word	0x4bbebc20

08007888 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007892:	2300      	movs	r3, #0
 8007894:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007896:	4b53      	ldr	r3, [pc, #332]	; (80079e4 <RCCEx_PLL2_Config+0x15c>)
 8007898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800789a:	f003 0303 	and.w	r3, r3, #3
 800789e:	2b03      	cmp	r3, #3
 80078a0:	d101      	bne.n	80078a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e099      	b.n	80079da <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80078a6:	4b4f      	ldr	r3, [pc, #316]	; (80079e4 <RCCEx_PLL2_Config+0x15c>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a4e      	ldr	r2, [pc, #312]	; (80079e4 <RCCEx_PLL2_Config+0x15c>)
 80078ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80078b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078b2:	f7fa fd59 	bl	8002368 <HAL_GetTick>
 80078b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80078b8:	e008      	b.n	80078cc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80078ba:	f7fa fd55 	bl	8002368 <HAL_GetTick>
 80078be:	4602      	mov	r2, r0
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	1ad3      	subs	r3, r2, r3
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	d901      	bls.n	80078cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80078c8:	2303      	movs	r3, #3
 80078ca:	e086      	b.n	80079da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80078cc:	4b45      	ldr	r3, [pc, #276]	; (80079e4 <RCCEx_PLL2_Config+0x15c>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d1f0      	bne.n	80078ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80078d8:	4b42      	ldr	r3, [pc, #264]	; (80079e4 <RCCEx_PLL2_Config+0x15c>)
 80078da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078dc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	031b      	lsls	r3, r3, #12
 80078e6:	493f      	ldr	r1, [pc, #252]	; (80079e4 <RCCEx_PLL2_Config+0x15c>)
 80078e8:	4313      	orrs	r3, r2
 80078ea:	628b      	str	r3, [r1, #40]	; 0x28
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	3b01      	subs	r3, #1
 80078f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	3b01      	subs	r3, #1
 80078fc:	025b      	lsls	r3, r3, #9
 80078fe:	b29b      	uxth	r3, r3
 8007900:	431a      	orrs	r2, r3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	3b01      	subs	r3, #1
 8007908:	041b      	lsls	r3, r3, #16
 800790a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800790e:	431a      	orrs	r2, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	3b01      	subs	r3, #1
 8007916:	061b      	lsls	r3, r3, #24
 8007918:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800791c:	4931      	ldr	r1, [pc, #196]	; (80079e4 <RCCEx_PLL2_Config+0x15c>)
 800791e:	4313      	orrs	r3, r2
 8007920:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007922:	4b30      	ldr	r3, [pc, #192]	; (80079e4 <RCCEx_PLL2_Config+0x15c>)
 8007924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007926:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	695b      	ldr	r3, [r3, #20]
 800792e:	492d      	ldr	r1, [pc, #180]	; (80079e4 <RCCEx_PLL2_Config+0x15c>)
 8007930:	4313      	orrs	r3, r2
 8007932:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007934:	4b2b      	ldr	r3, [pc, #172]	; (80079e4 <RCCEx_PLL2_Config+0x15c>)
 8007936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007938:	f023 0220 	bic.w	r2, r3, #32
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	4928      	ldr	r1, [pc, #160]	; (80079e4 <RCCEx_PLL2_Config+0x15c>)
 8007942:	4313      	orrs	r3, r2
 8007944:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007946:	4b27      	ldr	r3, [pc, #156]	; (80079e4 <RCCEx_PLL2_Config+0x15c>)
 8007948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800794a:	4a26      	ldr	r2, [pc, #152]	; (80079e4 <RCCEx_PLL2_Config+0x15c>)
 800794c:	f023 0310 	bic.w	r3, r3, #16
 8007950:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007952:	4b24      	ldr	r3, [pc, #144]	; (80079e4 <RCCEx_PLL2_Config+0x15c>)
 8007954:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007956:	4b24      	ldr	r3, [pc, #144]	; (80079e8 <RCCEx_PLL2_Config+0x160>)
 8007958:	4013      	ands	r3, r2
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	69d2      	ldr	r2, [r2, #28]
 800795e:	00d2      	lsls	r2, r2, #3
 8007960:	4920      	ldr	r1, [pc, #128]	; (80079e4 <RCCEx_PLL2_Config+0x15c>)
 8007962:	4313      	orrs	r3, r2
 8007964:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007966:	4b1f      	ldr	r3, [pc, #124]	; (80079e4 <RCCEx_PLL2_Config+0x15c>)
 8007968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796a:	4a1e      	ldr	r2, [pc, #120]	; (80079e4 <RCCEx_PLL2_Config+0x15c>)
 800796c:	f043 0310 	orr.w	r3, r3, #16
 8007970:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d106      	bne.n	8007986 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007978:	4b1a      	ldr	r3, [pc, #104]	; (80079e4 <RCCEx_PLL2_Config+0x15c>)
 800797a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797c:	4a19      	ldr	r2, [pc, #100]	; (80079e4 <RCCEx_PLL2_Config+0x15c>)
 800797e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007982:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007984:	e00f      	b.n	80079a6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	2b01      	cmp	r3, #1
 800798a:	d106      	bne.n	800799a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800798c:	4b15      	ldr	r3, [pc, #84]	; (80079e4 <RCCEx_PLL2_Config+0x15c>)
 800798e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007990:	4a14      	ldr	r2, [pc, #80]	; (80079e4 <RCCEx_PLL2_Config+0x15c>)
 8007992:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007996:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007998:	e005      	b.n	80079a6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800799a:	4b12      	ldr	r3, [pc, #72]	; (80079e4 <RCCEx_PLL2_Config+0x15c>)
 800799c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799e:	4a11      	ldr	r2, [pc, #68]	; (80079e4 <RCCEx_PLL2_Config+0x15c>)
 80079a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80079a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80079a6:	4b0f      	ldr	r3, [pc, #60]	; (80079e4 <RCCEx_PLL2_Config+0x15c>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a0e      	ldr	r2, [pc, #56]	; (80079e4 <RCCEx_PLL2_Config+0x15c>)
 80079ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80079b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079b2:	f7fa fcd9 	bl	8002368 <HAL_GetTick>
 80079b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80079b8:	e008      	b.n	80079cc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80079ba:	f7fa fcd5 	bl	8002368 <HAL_GetTick>
 80079be:	4602      	mov	r2, r0
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	d901      	bls.n	80079cc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80079c8:	2303      	movs	r3, #3
 80079ca:	e006      	b.n	80079da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80079cc:	4b05      	ldr	r3, [pc, #20]	; (80079e4 <RCCEx_PLL2_Config+0x15c>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d0f0      	beq.n	80079ba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80079d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	58024400 	.word	0x58024400
 80079e8:	ffff0007 	.word	0xffff0007

080079ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80079f6:	2300      	movs	r3, #0
 80079f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80079fa:	4b53      	ldr	r3, [pc, #332]	; (8007b48 <RCCEx_PLL3_Config+0x15c>)
 80079fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079fe:	f003 0303 	and.w	r3, r3, #3
 8007a02:	2b03      	cmp	r3, #3
 8007a04:	d101      	bne.n	8007a0a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	e099      	b.n	8007b3e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007a0a:	4b4f      	ldr	r3, [pc, #316]	; (8007b48 <RCCEx_PLL3_Config+0x15c>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a4e      	ldr	r2, [pc, #312]	; (8007b48 <RCCEx_PLL3_Config+0x15c>)
 8007a10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a16:	f7fa fca7 	bl	8002368 <HAL_GetTick>
 8007a1a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a1c:	e008      	b.n	8007a30 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007a1e:	f7fa fca3 	bl	8002368 <HAL_GetTick>
 8007a22:	4602      	mov	r2, r0
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	1ad3      	subs	r3, r2, r3
 8007a28:	2b02      	cmp	r3, #2
 8007a2a:	d901      	bls.n	8007a30 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007a2c:	2303      	movs	r3, #3
 8007a2e:	e086      	b.n	8007b3e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a30:	4b45      	ldr	r3, [pc, #276]	; (8007b48 <RCCEx_PLL3_Config+0x15c>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d1f0      	bne.n	8007a1e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007a3c:	4b42      	ldr	r3, [pc, #264]	; (8007b48 <RCCEx_PLL3_Config+0x15c>)
 8007a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a40:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	051b      	lsls	r3, r3, #20
 8007a4a:	493f      	ldr	r1, [pc, #252]	; (8007b48 <RCCEx_PLL3_Config+0x15c>)
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	628b      	str	r3, [r1, #40]	; 0x28
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	3b01      	subs	r3, #1
 8007a56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	025b      	lsls	r3, r3, #9
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	431a      	orrs	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	041b      	lsls	r3, r3, #16
 8007a6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007a72:	431a      	orrs	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	061b      	lsls	r3, r3, #24
 8007a7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007a80:	4931      	ldr	r1, [pc, #196]	; (8007b48 <RCCEx_PLL3_Config+0x15c>)
 8007a82:	4313      	orrs	r3, r2
 8007a84:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007a86:	4b30      	ldr	r3, [pc, #192]	; (8007b48 <RCCEx_PLL3_Config+0x15c>)
 8007a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	695b      	ldr	r3, [r3, #20]
 8007a92:	492d      	ldr	r1, [pc, #180]	; (8007b48 <RCCEx_PLL3_Config+0x15c>)
 8007a94:	4313      	orrs	r3, r2
 8007a96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007a98:	4b2b      	ldr	r3, [pc, #172]	; (8007b48 <RCCEx_PLL3_Config+0x15c>)
 8007a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a9c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	699b      	ldr	r3, [r3, #24]
 8007aa4:	4928      	ldr	r1, [pc, #160]	; (8007b48 <RCCEx_PLL3_Config+0x15c>)
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007aaa:	4b27      	ldr	r3, [pc, #156]	; (8007b48 <RCCEx_PLL3_Config+0x15c>)
 8007aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aae:	4a26      	ldr	r2, [pc, #152]	; (8007b48 <RCCEx_PLL3_Config+0x15c>)
 8007ab0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ab4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007ab6:	4b24      	ldr	r3, [pc, #144]	; (8007b48 <RCCEx_PLL3_Config+0x15c>)
 8007ab8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007aba:	4b24      	ldr	r3, [pc, #144]	; (8007b4c <RCCEx_PLL3_Config+0x160>)
 8007abc:	4013      	ands	r3, r2
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	69d2      	ldr	r2, [r2, #28]
 8007ac2:	00d2      	lsls	r2, r2, #3
 8007ac4:	4920      	ldr	r1, [pc, #128]	; (8007b48 <RCCEx_PLL3_Config+0x15c>)
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007aca:	4b1f      	ldr	r3, [pc, #124]	; (8007b48 <RCCEx_PLL3_Config+0x15c>)
 8007acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ace:	4a1e      	ldr	r2, [pc, #120]	; (8007b48 <RCCEx_PLL3_Config+0x15c>)
 8007ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ad4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d106      	bne.n	8007aea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007adc:	4b1a      	ldr	r3, [pc, #104]	; (8007b48 <RCCEx_PLL3_Config+0x15c>)
 8007ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae0:	4a19      	ldr	r2, [pc, #100]	; (8007b48 <RCCEx_PLL3_Config+0x15c>)
 8007ae2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007ae6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ae8:	e00f      	b.n	8007b0a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d106      	bne.n	8007afe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007af0:	4b15      	ldr	r3, [pc, #84]	; (8007b48 <RCCEx_PLL3_Config+0x15c>)
 8007af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af4:	4a14      	ldr	r2, [pc, #80]	; (8007b48 <RCCEx_PLL3_Config+0x15c>)
 8007af6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007afa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007afc:	e005      	b.n	8007b0a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007afe:	4b12      	ldr	r3, [pc, #72]	; (8007b48 <RCCEx_PLL3_Config+0x15c>)
 8007b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b02:	4a11      	ldr	r2, [pc, #68]	; (8007b48 <RCCEx_PLL3_Config+0x15c>)
 8007b04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007b0a:	4b0f      	ldr	r3, [pc, #60]	; (8007b48 <RCCEx_PLL3_Config+0x15c>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a0e      	ldr	r2, [pc, #56]	; (8007b48 <RCCEx_PLL3_Config+0x15c>)
 8007b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b16:	f7fa fc27 	bl	8002368 <HAL_GetTick>
 8007b1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007b1c:	e008      	b.n	8007b30 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007b1e:	f7fa fc23 	bl	8002368 <HAL_GetTick>
 8007b22:	4602      	mov	r2, r0
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	1ad3      	subs	r3, r2, r3
 8007b28:	2b02      	cmp	r3, #2
 8007b2a:	d901      	bls.n	8007b30 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007b2c:	2303      	movs	r3, #3
 8007b2e:	e006      	b.n	8007b3e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007b30:	4b05      	ldr	r3, [pc, #20]	; (8007b48 <RCCEx_PLL3_Config+0x15c>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d0f0      	beq.n	8007b1e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3710      	adds	r7, #16
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	58024400 	.word	0x58024400
 8007b4c:	ffff0007 	.word	0xffff0007

08007b50 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b08a      	sub	sp, #40	; 0x28
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d101      	bne.n	8007b62 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e075      	b.n	8007c4e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d105      	bne.n	8007b7a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f7f9 ff77 	bl	8001a68 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2204      	movs	r2, #4
 8007b7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f868 	bl	8007c58 <HAL_SD_InitCard>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d001      	beq.n	8007b92 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e05d      	b.n	8007c4e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007b92:	f107 0308 	add.w	r3, r7, #8
 8007b96:	4619      	mov	r1, r3
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 fa9d 	bl	80080d8 <HAL_SD_GetCardStatus>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d001      	beq.n	8007ba8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e052      	b.n	8007c4e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8007ba8:	7e3b      	ldrb	r3, [r7, #24]
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007bae:	7e7b      	ldrb	r3, [r7, #25]
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d10a      	bne.n	8007bd2 <HAL_SD_Init+0x82>
 8007bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d102      	bne.n	8007bc8 <HAL_SD_Init+0x78>
 8007bc2:	6a3b      	ldr	r3, [r7, #32]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d004      	beq.n	8007bd2 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bce:	659a      	str	r2, [r3, #88]	; 0x58
 8007bd0:	e00b      	b.n	8007bea <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d104      	bne.n	8007be4 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007be0:	659a      	str	r2, [r3, #88]	; 0x58
 8007be2:	e002      	b.n	8007bea <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	4619      	mov	r1, r3
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 fb2f 	bl	8008254 <HAL_SD_ConfigWideBusOperation>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d001      	beq.n	8007c00 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e026      	b.n	8007c4e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007c00:	f7fa fbb2 	bl	8002368 <HAL_GetTick>
 8007c04:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007c06:	e011      	b.n	8007c2c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007c08:	f7fa fbae 	bl	8002368 <HAL_GetTick>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c16:	d109      	bne.n	8007c2c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007c1e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8007c28:	2303      	movs	r3, #3
 8007c2a:	e010      	b.n	8007c4e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 fc23 	bl	8008478 <HAL_SD_GetCardState>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b04      	cmp	r3, #4
 8007c36:	d1e7      	bne.n	8007c08 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3728      	adds	r7, #40	; 0x28
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
	...

08007c58 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007c58:	b590      	push	{r4, r7, lr}
 8007c5a:	b08d      	sub	sp, #52	; 0x34
 8007c5c:	af02      	add	r7, sp, #8
 8007c5e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007c60:	2300      	movs	r3, #0
 8007c62:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007c64:	2300      	movs	r3, #0
 8007c66:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007c70:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007c74:	f04f 0100 	mov.w	r1, #0
 8007c78:	f7fe fc76 	bl	8006568 <HAL_RCCEx_GetPeriphCLKFreq>
 8007c7c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8007c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d109      	bne.n	8007c98 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007c92:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	e070      	b.n	8007d7a <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8007c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9a:	0a1b      	lsrs	r3, r3, #8
 8007c9c:	4a39      	ldr	r2, [pc, #228]	; (8007d84 <HAL_SD_InitCard+0x12c>)
 8007c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007ca2:	091b      	lsrs	r3, r3, #4
 8007ca4:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681c      	ldr	r4, [r3, #0]
 8007caa:	466a      	mov	r2, sp
 8007cac:	f107 0318 	add.w	r3, r7, #24
 8007cb0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007cb4:	e882 0003 	stmia.w	r2, {r0, r1}
 8007cb8:	f107 030c 	add.w	r3, r7, #12
 8007cbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	f003 fc68 	bl	800b594 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f003 fc9a 	bl	800b602 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8007cce:	69fb      	ldr	r3, [r7, #28]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d005      	beq.n	8007ce0 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	005b      	lsls	r3, r3, #1
 8007cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cde:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8007ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d007      	beq.n	8007cf6 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8007ce6:	4a28      	ldr	r2, [pc, #160]	; (8007d88 <HAL_SD_InitCard+0x130>)
 8007ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cee:	3301      	adds	r3, #1
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7fa fb45 	bl	8002380 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fcac 	bl	8008654 <SD_PowerON>
 8007cfc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007cfe:	6a3b      	ldr	r3, [r7, #32]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d00b      	beq.n	8007d1c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d10:	6a3b      	ldr	r3, [r7, #32]
 8007d12:	431a      	orrs	r2, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e02e      	b.n	8007d7a <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 fbcb 	bl	80084b8 <SD_InitCard>
 8007d22:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007d24:	6a3b      	ldr	r3, [r7, #32]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00b      	beq.n	8007d42 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d36:	6a3b      	ldr	r3, [r7, #32]
 8007d38:	431a      	orrs	r2, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e01b      	b.n	8007d7a <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f003 fcee 	bl	800b72c <SDMMC_CmdBlockLength>
 8007d50:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007d52:	6a3b      	ldr	r3, [r7, #32]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d00f      	beq.n	8007d78 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a0b      	ldr	r2, [pc, #44]	; (8007d8c <HAL_SD_InitCard+0x134>)
 8007d5e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d64:	6a3b      	ldr	r3, [r7, #32]
 8007d66:	431a      	orrs	r2, r3
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	e000      	b.n	8007d7a <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8007d78:	2300      	movs	r3, #0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	372c      	adds	r7, #44	; 0x2c
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd90      	pop	{r4, r7, pc}
 8007d82:	bf00      	nop
 8007d84:	014f8b59 	.word	0x014f8b59
 8007d88:	00012110 	.word	0x00012110
 8007d8c:	1fe00fff 	.word	0x1fe00fff

08007d90 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d9e:	0f9b      	lsrs	r3, r3, #30
 8007da0:	b2da      	uxtb	r2, r3
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007daa:	0e9b      	lsrs	r3, r3, #26
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	f003 030f 	and.w	r3, r3, #15
 8007db2:	b2da      	uxtb	r2, r3
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dbc:	0e1b      	lsrs	r3, r3, #24
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	f003 0303 	and.w	r3, r3, #3
 8007dc4:	b2da      	uxtb	r2, r3
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dce:	0c1b      	lsrs	r3, r3, #16
 8007dd0:	b2da      	uxtb	r2, r3
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dda:	0a1b      	lsrs	r3, r3, #8
 8007ddc:	b2da      	uxtb	r2, r3
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007de6:	b2da      	uxtb	r2, r3
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007df0:	0d1b      	lsrs	r3, r3, #20
 8007df2:	b29a      	uxth	r2, r3
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dfc:	0c1b      	lsrs	r3, r3, #16
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	f003 030f 	and.w	r3, r3, #15
 8007e04:	b2da      	uxtb	r2, r3
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e0e:	0bdb      	lsrs	r3, r3, #15
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	f003 0301 	and.w	r3, r3, #1
 8007e16:	b2da      	uxtb	r2, r3
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e20:	0b9b      	lsrs	r3, r3, #14
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	f003 0301 	and.w	r3, r3, #1
 8007e28:	b2da      	uxtb	r2, r3
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e32:	0b5b      	lsrs	r3, r3, #13
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	f003 0301 	and.w	r3, r3, #1
 8007e3a:	b2da      	uxtb	r2, r3
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e44:	0b1b      	lsrs	r3, r3, #12
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	f003 0301 	and.w	r3, r3, #1
 8007e4c:	b2da      	uxtb	r2, r3
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	2200      	movs	r2, #0
 8007e56:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d163      	bne.n	8007f28 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e64:	009a      	lsls	r2, r3, #2
 8007e66:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8007e70:	0f92      	lsrs	r2, r2, #30
 8007e72:	431a      	orrs	r2, r3
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e7c:	0edb      	lsrs	r3, r3, #27
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	f003 0307 	and.w	r3, r3, #7
 8007e84:	b2da      	uxtb	r2, r3
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e8e:	0e1b      	lsrs	r3, r3, #24
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	f003 0307 	and.w	r3, r3, #7
 8007e96:	b2da      	uxtb	r2, r3
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ea0:	0d5b      	lsrs	r3, r3, #21
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	f003 0307 	and.w	r3, r3, #7
 8007ea8:	b2da      	uxtb	r2, r3
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007eb2:	0c9b      	lsrs	r3, r3, #18
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	f003 0307 	and.w	r3, r3, #7
 8007eba:	b2da      	uxtb	r2, r3
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ec4:	0bdb      	lsrs	r3, r3, #15
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	f003 0307 	and.w	r3, r3, #7
 8007ecc:	b2da      	uxtb	r2, r3
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	1c5a      	adds	r2, r3, #1
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	7e1b      	ldrb	r3, [r3, #24]
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	f003 0307 	and.w	r3, r3, #7
 8007ee6:	3302      	adds	r3, #2
 8007ee8:	2201      	movs	r2, #1
 8007eea:	fa02 f303 	lsl.w	r3, r2, r3
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007ef2:	fb03 f202 	mul.w	r2, r3, r2
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	7a1b      	ldrb	r3, [r3, #8]
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	f003 030f 	and.w	r3, r3, #15
 8007f04:	2201      	movs	r2, #1
 8007f06:	409a      	lsls	r2, r3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007f14:	0a52      	lsrs	r2, r2, #9
 8007f16:	fb03 f202 	mul.w	r2, r3, r2
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f24:	655a      	str	r2, [r3, #84]	; 0x54
 8007f26:	e031      	b.n	8007f8c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d11d      	bne.n	8007f6c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f34:	041b      	lsls	r3, r3, #16
 8007f36:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f3e:	0c1b      	lsrs	r3, r3, #16
 8007f40:	431a      	orrs	r2, r3
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	029a      	lsls	r2, r3, #10
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f60:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	655a      	str	r2, [r3, #84]	; 0x54
 8007f6a:	e00f      	b.n	8007f8c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a58      	ldr	r2, [pc, #352]	; (80080d4 <HAL_SD_GetCardCSD+0x344>)
 8007f72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f78:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e09d      	b.n	80080c8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f90:	0b9b      	lsrs	r3, r3, #14
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	f003 0301 	and.w	r3, r3, #1
 8007f98:	b2da      	uxtb	r2, r3
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fa2:	09db      	lsrs	r3, r3, #7
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007faa:	b2da      	uxtb	r2, r3
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fba:	b2da      	uxtb	r2, r3
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fc4:	0fdb      	lsrs	r3, r3, #31
 8007fc6:	b2da      	uxtb	r2, r3
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fd0:	0f5b      	lsrs	r3, r3, #29
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	f003 0303 	and.w	r3, r3, #3
 8007fd8:	b2da      	uxtb	r2, r3
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fe2:	0e9b      	lsrs	r3, r3, #26
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	f003 0307 	and.w	r3, r3, #7
 8007fea:	b2da      	uxtb	r2, r3
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ff4:	0d9b      	lsrs	r3, r3, #22
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	f003 030f 	and.w	r3, r3, #15
 8007ffc:	b2da      	uxtb	r2, r3
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008006:	0d5b      	lsrs	r3, r3, #21
 8008008:	b2db      	uxtb	r3, r3
 800800a:	f003 0301 	and.w	r3, r3, #1
 800800e:	b2da      	uxtb	r2, r3
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	2200      	movs	r2, #0
 800801a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008022:	0c1b      	lsrs	r3, r3, #16
 8008024:	b2db      	uxtb	r3, r3
 8008026:	f003 0301 	and.w	r3, r3, #1
 800802a:	b2da      	uxtb	r2, r3
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008036:	0bdb      	lsrs	r3, r3, #15
 8008038:	b2db      	uxtb	r3, r3
 800803a:	f003 0301 	and.w	r3, r3, #1
 800803e:	b2da      	uxtb	r2, r3
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800804a:	0b9b      	lsrs	r3, r3, #14
 800804c:	b2db      	uxtb	r3, r3
 800804e:	f003 0301 	and.w	r3, r3, #1
 8008052:	b2da      	uxtb	r2, r3
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800805e:	0b5b      	lsrs	r3, r3, #13
 8008060:	b2db      	uxtb	r3, r3
 8008062:	f003 0301 	and.w	r3, r3, #1
 8008066:	b2da      	uxtb	r2, r3
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008072:	0b1b      	lsrs	r3, r3, #12
 8008074:	b2db      	uxtb	r3, r3
 8008076:	f003 0301 	and.w	r3, r3, #1
 800807a:	b2da      	uxtb	r2, r3
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008086:	0a9b      	lsrs	r3, r3, #10
 8008088:	b2db      	uxtb	r3, r3
 800808a:	f003 0303 	and.w	r3, r3, #3
 800808e:	b2da      	uxtb	r2, r3
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800809a:	0a1b      	lsrs	r3, r3, #8
 800809c:	b2db      	uxtb	r3, r3
 800809e:	f003 0303 	and.w	r3, r3, #3
 80080a2:	b2da      	uxtb	r2, r3
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080ae:	085b      	lsrs	r3, r3, #1
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080b6:	b2da      	uxtb	r2, r3
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	2201      	movs	r2, #1
 80080c2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr
 80080d4:	1fe00fff 	.word	0x1fe00fff

080080d8 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b094      	sub	sp, #80	; 0x50
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80080e2:	2300      	movs	r3, #0
 80080e4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	2b03      	cmp	r3, #3
 80080f2:	d101      	bne.n	80080f8 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 80080f4:	2301      	movs	r3, #1
 80080f6:	e0a7      	b.n	8008248 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80080f8:	f107 0308 	add.w	r3, r7, #8
 80080fc:	4619      	mov	r1, r3
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 fb36 	bl	8008770 <SD_SendSDStatus>
 8008104:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008108:	2b00      	cmp	r3, #0
 800810a:	d011      	beq.n	8008130 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a4f      	ldr	r2, [pc, #316]	; (8008250 <HAL_SD_GetCardStatus+0x178>)
 8008112:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008118:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800811a:	431a      	orrs	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8008128:	2301      	movs	r3, #1
 800812a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800812e:	e070      	b.n	8008212 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	099b      	lsrs	r3, r3, #6
 8008134:	b2db      	uxtb	r3, r3
 8008136:	f003 0303 	and.w	r3, r3, #3
 800813a:	b2da      	uxtb	r2, r3
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	095b      	lsrs	r3, r3, #5
 8008144:	b2db      	uxtb	r3, r3
 8008146:	f003 0301 	and.w	r3, r3, #1
 800814a:	b2da      	uxtb	r2, r3
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	0a1b      	lsrs	r3, r3, #8
 8008154:	b29b      	uxth	r3, r3
 8008156:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800815a:	b29a      	uxth	r2, r3
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	0e1b      	lsrs	r3, r3, #24
 8008160:	b29b      	uxth	r3, r3
 8008162:	4313      	orrs	r3, r2
 8008164:	b29a      	uxth	r2, r3
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	061a      	lsls	r2, r3, #24
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	021b      	lsls	r3, r3, #8
 8008172:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008176:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	0a1b      	lsrs	r3, r3, #8
 800817c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008180:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	0e1b      	lsrs	r3, r3, #24
 8008186:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	b2da      	uxtb	r2, r3
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	0a1b      	lsrs	r3, r3, #8
 8008198:	b2da      	uxtb	r2, r3
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	0d1b      	lsrs	r3, r3, #20
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	f003 030f 	and.w	r3, r3, #15
 80081a8:	b2da      	uxtb	r2, r3
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	0c1b      	lsrs	r3, r3, #16
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80081b8:	b29a      	uxth	r2, r3
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	b29b      	uxth	r3, r3
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	4313      	orrs	r3, r2
 80081c4:	b29a      	uxth	r2, r3
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	0a9b      	lsrs	r3, r3, #10
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081d4:	b2da      	uxtb	r2, r3
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	0a1b      	lsrs	r3, r3, #8
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	f003 0303 	and.w	r3, r3, #3
 80081e4:	b2da      	uxtb	r2, r3
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	091b      	lsrs	r3, r3, #4
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	f003 030f 	and.w	r3, r3, #15
 80081f4:	b2da      	uxtb	r2, r3
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	f003 030f 	and.w	r3, r3, #15
 8008202:	b2da      	uxtb	r2, r3
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	0e1b      	lsrs	r3, r3, #24
 800820c:	b2da      	uxtb	r2, r3
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f44f 7100 	mov.w	r1, #512	; 0x200
 800821a:	4618      	mov	r0, r3
 800821c:	f003 fa86 	bl	800b72c <SDMMC_CmdBlockLength>
 8008220:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008222:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00d      	beq.n	8008244 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a08      	ldr	r2, [pc, #32]	; (8008250 <HAL_SD_GetCardStatus+0x178>)
 800822e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008234:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2201      	movs	r2, #1
 800823a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800823e:	2301      	movs	r3, #1
 8008240:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8008244:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8008248:	4618      	mov	r0, r3
 800824a:	3750      	adds	r7, #80	; 0x50
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}
 8008250:	1fe00fff 	.word	0x1fe00fff

08008254 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008254:	b590      	push	{r4, r7, lr}
 8008256:	b08d      	sub	sp, #52	; 0x34
 8008258:	af02      	add	r7, sp, #8
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800825e:	2300      	movs	r3, #0
 8008260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2203      	movs	r2, #3
 8008268:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008270:	2b03      	cmp	r3, #3
 8008272:	d02e      	beq.n	80082d2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800827a:	d106      	bne.n	800828a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008280:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	635a      	str	r2, [r3, #52]	; 0x34
 8008288:	e029      	b.n	80082de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008290:	d10a      	bne.n	80082a8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 fb64 	bl	8008960 <SD_WideBus_Enable>
 8008298:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800829e:	6a3b      	ldr	r3, [r7, #32]
 80082a0:	431a      	orrs	r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	635a      	str	r2, [r3, #52]	; 0x34
 80082a6:	e01a      	b.n	80082de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d10a      	bne.n	80082c4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 fba1 	bl	80089f6 <SD_WideBus_Disable>
 80082b4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082ba:	6a3b      	ldr	r3, [r7, #32]
 80082bc:	431a      	orrs	r2, r3
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	635a      	str	r2, [r3, #52]	; 0x34
 80082c2:	e00c      	b.n	80082de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082c8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	635a      	str	r2, [r3, #52]	; 0x34
 80082d0:	e005      	b.n	80082de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082d6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d007      	beq.n	80082f6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a5f      	ldr	r2, [pc, #380]	; (8008468 <HAL_SD_ConfigWideBusOperation+0x214>)
 80082ec:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80082f4:	e096      	b.n	8008424 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80082f6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80082fa:	f04f 0100 	mov.w	r1, #0
 80082fe:	f7fe f933 	bl	8006568 <HAL_RCCEx_GetPeriphCLKFreq>
 8008302:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	2b00      	cmp	r3, #0
 8008308:	f000 8083 	beq.w	8008412 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	691b      	ldr	r3, [r3, #16]
 8008320:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	695a      	ldr	r2, [r3, #20]
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	4950      	ldr	r1, [pc, #320]	; (800846c <HAL_SD_ConfigWideBusOperation+0x218>)
 800832a:	fba1 1303 	umull	r1, r3, r1, r3
 800832e:	0e1b      	lsrs	r3, r3, #24
 8008330:	429a      	cmp	r2, r3
 8008332:	d303      	bcc.n	800833c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	695b      	ldr	r3, [r3, #20]
 8008338:	61bb      	str	r3, [r7, #24]
 800833a:	e05a      	b.n	80083f2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008344:	d103      	bne.n	800834e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	695b      	ldr	r3, [r3, #20]
 800834a:	61bb      	str	r3, [r7, #24]
 800834c:	e051      	b.n	80083f2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008356:	d126      	bne.n	80083a6 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	695b      	ldr	r3, [r3, #20]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d10e      	bne.n	800837e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	4a43      	ldr	r2, [pc, #268]	; (8008470 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d906      	bls.n	8008376 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008368:	69fb      	ldr	r3, [r7, #28]
 800836a:	4a40      	ldr	r2, [pc, #256]	; (800846c <HAL_SD_ConfigWideBusOperation+0x218>)
 800836c:	fba2 2303 	umull	r2, r3, r2, r3
 8008370:	0e5b      	lsrs	r3, r3, #25
 8008372:	61bb      	str	r3, [r7, #24]
 8008374:	e03d      	b.n	80083f2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	695b      	ldr	r3, [r3, #20]
 800837a:	61bb      	str	r3, [r7, #24]
 800837c:	e039      	b.n	80083f2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	695b      	ldr	r3, [r3, #20]
 8008382:	005b      	lsls	r3, r3, #1
 8008384:	69fa      	ldr	r2, [r7, #28]
 8008386:	fbb2 f3f3 	udiv	r3, r2, r3
 800838a:	4a39      	ldr	r2, [pc, #228]	; (8008470 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d906      	bls.n	800839e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008390:	69fb      	ldr	r3, [r7, #28]
 8008392:	4a36      	ldr	r2, [pc, #216]	; (800846c <HAL_SD_ConfigWideBusOperation+0x218>)
 8008394:	fba2 2303 	umull	r2, r3, r2, r3
 8008398:	0e5b      	lsrs	r3, r3, #25
 800839a:	61bb      	str	r3, [r7, #24]
 800839c:	e029      	b.n	80083f2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	695b      	ldr	r3, [r3, #20]
 80083a2:	61bb      	str	r3, [r7, #24]
 80083a4:	e025      	b.n	80083f2 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	695b      	ldr	r3, [r3, #20]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d10e      	bne.n	80083cc <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	4a30      	ldr	r2, [pc, #192]	; (8008474 <HAL_SD_ConfigWideBusOperation+0x220>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d906      	bls.n	80083c4 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	4a2c      	ldr	r2, [pc, #176]	; (800846c <HAL_SD_ConfigWideBusOperation+0x218>)
 80083ba:	fba2 2303 	umull	r2, r3, r2, r3
 80083be:	0e1b      	lsrs	r3, r3, #24
 80083c0:	61bb      	str	r3, [r7, #24]
 80083c2:	e016      	b.n	80083f2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	695b      	ldr	r3, [r3, #20]
 80083c8:	61bb      	str	r3, [r7, #24]
 80083ca:	e012      	b.n	80083f2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	695b      	ldr	r3, [r3, #20]
 80083d0:	005b      	lsls	r3, r3, #1
 80083d2:	69fa      	ldr	r2, [r7, #28]
 80083d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80083d8:	4a26      	ldr	r2, [pc, #152]	; (8008474 <HAL_SD_ConfigWideBusOperation+0x220>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d906      	bls.n	80083ec <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	4a22      	ldr	r2, [pc, #136]	; (800846c <HAL_SD_ConfigWideBusOperation+0x218>)
 80083e2:	fba2 2303 	umull	r2, r3, r2, r3
 80083e6:	0e1b      	lsrs	r3, r3, #24
 80083e8:	61bb      	str	r3, [r7, #24]
 80083ea:	e002      	b.n	80083f2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	695b      	ldr	r3, [r3, #20]
 80083f0:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681c      	ldr	r4, [r3, #0]
 80083f6:	466a      	mov	r2, sp
 80083f8:	f107 0314 	add.w	r3, r7, #20
 80083fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008400:	e882 0003 	stmia.w	r2, {r0, r1}
 8008404:	f107 0308 	add.w	r3, r7, #8
 8008408:	cb0e      	ldmia	r3, {r1, r2, r3}
 800840a:	4620      	mov	r0, r4
 800840c:	f003 f8c2 	bl	800b594 <SDMMC_Init>
 8008410:	e008      	b.n	8008424 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008416:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f44f 7100 	mov.w	r1, #512	; 0x200
 800842c:	4618      	mov	r0, r3
 800842e:	f003 f97d 	bl	800b72c <SDMMC_CmdBlockLength>
 8008432:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008434:	6a3b      	ldr	r3, [r7, #32]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00c      	beq.n	8008454 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a0a      	ldr	r2, [pc, #40]	; (8008468 <HAL_SD_ConfigWideBusOperation+0x214>)
 8008440:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008446:	6a3b      	ldr	r3, [r7, #32]
 8008448:	431a      	orrs	r2, r3
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2201      	movs	r2, #1
 8008458:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800845c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008460:	4618      	mov	r0, r3
 8008462:	372c      	adds	r7, #44	; 0x2c
 8008464:	46bd      	mov	sp, r7
 8008466:	bd90      	pop	{r4, r7, pc}
 8008468:	1fe00fff 	.word	0x1fe00fff
 800846c:	55e63b89 	.word	0x55e63b89
 8008470:	02faf080 	.word	0x02faf080
 8008474:	017d7840 	.word	0x017d7840

08008478 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b086      	sub	sp, #24
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008480:	2300      	movs	r3, #0
 8008482:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008484:	f107 030c 	add.w	r3, r7, #12
 8008488:	4619      	mov	r1, r3
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 fa40 	bl	8008910 <SD_SendStatus>
 8008490:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d005      	beq.n	80084a4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	431a      	orrs	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	0a5b      	lsrs	r3, r3, #9
 80084a8:	f003 030f 	and.w	r3, r3, #15
 80084ac:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80084ae:	693b      	ldr	r3, [r7, #16]
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3718      	adds	r7, #24
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b090      	sub	sp, #64	; 0x40
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 80084c0:	2300      	movs	r3, #0
 80084c2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80084c4:	f7f9 ff50 	bl	8002368 <HAL_GetTick>
 80084c8:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4618      	mov	r0, r3
 80084d0:	f003 f8a8 	bl	800b624 <SDMMC_GetPowerState>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d102      	bne.n	80084e0 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80084da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80084de:	e0b5      	b.n	800864c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e4:	2b03      	cmp	r3, #3
 80084e6:	d02e      	beq.n	8008546 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4618      	mov	r0, r3
 80084ee:	f003 fa29 	bl	800b944 <SDMMC_CmdSendCID>
 80084f2:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80084f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d001      	beq.n	80084fe <SD_InitCard+0x46>
    {
      return errorstate;
 80084fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084fc:	e0a6      	b.n	800864c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2100      	movs	r1, #0
 8008504:	4618      	mov	r0, r3
 8008506:	f003 f8d2 	bl	800b6ae <SDMMC_GetResponse>
 800850a:	4602      	mov	r2, r0
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2104      	movs	r1, #4
 8008516:	4618      	mov	r0, r3
 8008518:	f003 f8c9 	bl	800b6ae <SDMMC_GetResponse>
 800851c:	4602      	mov	r2, r0
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2108      	movs	r1, #8
 8008528:	4618      	mov	r0, r3
 800852a:	f003 f8c0 	bl	800b6ae <SDMMC_GetResponse>
 800852e:	4602      	mov	r2, r0
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	210c      	movs	r1, #12
 800853a:	4618      	mov	r0, r3
 800853c:	f003 f8b7 	bl	800b6ae <SDMMC_GetResponse>
 8008540:	4602      	mov	r2, r0
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800854a:	2b03      	cmp	r3, #3
 800854c:	d01d      	beq.n	800858a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800854e:	e019      	b.n	8008584 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f107 020a 	add.w	r2, r7, #10
 8008558:	4611      	mov	r1, r2
 800855a:	4618      	mov	r0, r3
 800855c:	f003 fa31 	bl	800b9c2 <SDMMC_CmdSetRelAdd>
 8008560:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8008562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008564:	2b00      	cmp	r3, #0
 8008566:	d001      	beq.n	800856c <SD_InitCard+0xb4>
      {
        return errorstate;
 8008568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800856a:	e06f      	b.n	800864c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800856c:	f7f9 fefc 	bl	8002368 <HAL_GetTick>
 8008570:	4602      	mov	r2, r0
 8008572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008574:	1ad3      	subs	r3, r2, r3
 8008576:	f241 3287 	movw	r2, #4999	; 0x1387
 800857a:	4293      	cmp	r3, r2
 800857c:	d902      	bls.n	8008584 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800857e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008582:	e063      	b.n	800864c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8008584:	897b      	ldrh	r3, [r7, #10]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d0e2      	beq.n	8008550 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800858e:	2b03      	cmp	r3, #3
 8008590:	d036      	beq.n	8008600 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008592:	897b      	ldrh	r3, [r7, #10]
 8008594:	461a      	mov	r2, r3
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085a2:	041b      	lsls	r3, r3, #16
 80085a4:	4619      	mov	r1, r3
 80085a6:	4610      	mov	r0, r2
 80085a8:	f003 f9eb 	bl	800b982 <SDMMC_CmdSendCSD>
 80085ac:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80085ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d001      	beq.n	80085b8 <SD_InitCard+0x100>
    {
      return errorstate;
 80085b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b6:	e049      	b.n	800864c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2100      	movs	r1, #0
 80085be:	4618      	mov	r0, r3
 80085c0:	f003 f875 	bl	800b6ae <SDMMC_GetResponse>
 80085c4:	4602      	mov	r2, r0
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2104      	movs	r1, #4
 80085d0:	4618      	mov	r0, r3
 80085d2:	f003 f86c 	bl	800b6ae <SDMMC_GetResponse>
 80085d6:	4602      	mov	r2, r0
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2108      	movs	r1, #8
 80085e2:	4618      	mov	r0, r3
 80085e4:	f003 f863 	bl	800b6ae <SDMMC_GetResponse>
 80085e8:	4602      	mov	r2, r0
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	210c      	movs	r1, #12
 80085f4:	4618      	mov	r0, r3
 80085f6:	f003 f85a 	bl	800b6ae <SDMMC_GetResponse>
 80085fa:	4602      	mov	r2, r0
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2104      	movs	r1, #4
 8008606:	4618      	mov	r0, r3
 8008608:	f003 f851 	bl	800b6ae <SDMMC_GetResponse>
 800860c:	4603      	mov	r3, r0
 800860e:	0d1a      	lsrs	r2, r3, #20
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008614:	f107 030c 	add.w	r3, r7, #12
 8008618:	4619      	mov	r1, r3
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f7ff fbb8 	bl	8007d90 <HAL_SD_GetCardCSD>
 8008620:	4603      	mov	r3, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d002      	beq.n	800862c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008626:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800862a:	e00f      	b.n	800864c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008634:	041b      	lsls	r3, r3, #16
 8008636:	4619      	mov	r1, r3
 8008638:	4610      	mov	r0, r2
 800863a:	f003 f89a 	bl	800b772 <SDMMC_CmdSelDesel>
 800863e:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8008640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008642:	2b00      	cmp	r3, #0
 8008644:	d001      	beq.n	800864a <SD_InitCard+0x192>
  {
    return errorstate;
 8008646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008648:	e000      	b.n	800864c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3740      	adds	r7, #64	; 0x40
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b086      	sub	sp, #24
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800865c:	2300      	movs	r3, #0
 800865e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8008660:	2300      	movs	r3, #0
 8008662:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8008664:	2300      	movs	r3, #0
 8008666:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4618      	mov	r0, r3
 800866e:	f003 f8a3 	bl	800b7b8 <SDMMC_CmdGoIdleState>
 8008672:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d001      	beq.n	800867e <SD_PowerON+0x2a>
  {
    return errorstate;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	e072      	b.n	8008764 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4618      	mov	r0, r3
 8008684:	f003 f8b6 	bl	800b7f4 <SDMMC_CmdOperCond>
 8008688:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008690:	d10d      	bne.n	80086ae <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2200      	movs	r2, #0
 8008696:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4618      	mov	r0, r3
 800869e:	f003 f88b 	bl	800b7b8 <SDMMC_CmdGoIdleState>
 80086a2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d004      	beq.n	80086b4 <SD_PowerON+0x60>
    {
      return errorstate;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	e05a      	b.n	8008764 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2201      	movs	r2, #1
 80086b2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d137      	bne.n	800872c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2100      	movs	r1, #0
 80086c2:	4618      	mov	r0, r3
 80086c4:	f003 f8b6 	bl	800b834 <SDMMC_CmdAppCommand>
 80086c8:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d02d      	beq.n	800872c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80086d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80086d4:	e046      	b.n	8008764 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2100      	movs	r1, #0
 80086dc:	4618      	mov	r0, r3
 80086de:	f003 f8a9 	bl	800b834 <SDMMC_CmdAppCommand>
 80086e2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d001      	beq.n	80086ee <SD_PowerON+0x9a>
    {
      return errorstate;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	e03a      	b.n	8008764 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	491e      	ldr	r1, [pc, #120]	; (800876c <SD_PowerON+0x118>)
 80086f4:	4618      	mov	r0, r3
 80086f6:	f003 f8c0 	bl	800b87a <SDMMC_CmdAppOperCommand>
 80086fa:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d002      	beq.n	8008708 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008702:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008706:	e02d      	b.n	8008764 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2100      	movs	r1, #0
 800870e:	4618      	mov	r0, r3
 8008710:	f002 ffcd 	bl	800b6ae <SDMMC_GetResponse>
 8008714:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	0fdb      	lsrs	r3, r3, #31
 800871a:	2b01      	cmp	r3, #1
 800871c:	d101      	bne.n	8008722 <SD_PowerON+0xce>
 800871e:	2301      	movs	r3, #1
 8008720:	e000      	b.n	8008724 <SD_PowerON+0xd0>
 8008722:	2300      	movs	r3, #0
 8008724:	613b      	str	r3, [r7, #16]

    count++;
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	3301      	adds	r3, #1
 800872a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008732:	4293      	cmp	r3, r2
 8008734:	d802      	bhi.n	800873c <SD_PowerON+0xe8>
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d0cc      	beq.n	80086d6 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008742:	4293      	cmp	r3, r2
 8008744:	d902      	bls.n	800874c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008746:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800874a:	e00b      	b.n	8008764 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008758:	2b00      	cmp	r3, #0
 800875a:	d002      	beq.n	8008762 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2201      	movs	r2, #1
 8008760:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8008762:	2300      	movs	r3, #0
}
 8008764:	4618      	mov	r0, r3
 8008766:	3718      	adds	r7, #24
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}
 800876c:	c1100000 	.word	0xc1100000

08008770 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b08c      	sub	sp, #48	; 0x30
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800877a:	f7f9 fdf5 	bl	8002368 <HAL_GetTick>
 800877e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2100      	movs	r1, #0
 800878a:	4618      	mov	r0, r3
 800878c:	f002 ff8f 	bl	800b6ae <SDMMC_GetResponse>
 8008790:	4603      	mov	r3, r0
 8008792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008796:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800879a:	d102      	bne.n	80087a2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800879c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80087a0:	e0b0      	b.n	8008904 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	2140      	movs	r1, #64	; 0x40
 80087a8:	4618      	mov	r0, r3
 80087aa:	f002 ffbf 	bl	800b72c <SDMMC_CmdBlockLength>
 80087ae:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80087b0:	6a3b      	ldr	r3, [r7, #32]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d005      	beq.n	80087c2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80087be:	6a3b      	ldr	r3, [r7, #32]
 80087c0:	e0a0      	b.n	8008904 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087ca:	041b      	lsls	r3, r3, #16
 80087cc:	4619      	mov	r1, r3
 80087ce:	4610      	mov	r0, r2
 80087d0:	f003 f830 	bl	800b834 <SDMMC_CmdAppCommand>
 80087d4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80087d6:	6a3b      	ldr	r3, [r7, #32]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d005      	beq.n	80087e8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80087e4:	6a3b      	ldr	r3, [r7, #32]
 80087e6:	e08d      	b.n	8008904 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80087e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087ec:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80087ee:	2340      	movs	r3, #64	; 0x40
 80087f0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80087f2:	2360      	movs	r3, #96	; 0x60
 80087f4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80087f6:	2302      	movs	r3, #2
 80087f8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80087fa:	2300      	movs	r3, #0
 80087fc:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80087fe:	2301      	movs	r3, #1
 8008800:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f107 0208 	add.w	r2, r7, #8
 800880a:	4611      	mov	r1, r2
 800880c:	4618      	mov	r0, r3
 800880e:	f002 ff61 	bl	800b6d4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4618      	mov	r0, r3
 8008818:	f003 f918 	bl	800ba4c <SDMMC_CmdStatusRegister>
 800881c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800881e:	6a3b      	ldr	r3, [r7, #32]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d02b      	beq.n	800887c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800882c:	6a3b      	ldr	r3, [r7, #32]
 800882e:	e069      	b.n	8008904 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008836:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800883a:	2b00      	cmp	r3, #0
 800883c:	d013      	beq.n	8008866 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800883e:	2300      	movs	r3, #0
 8008840:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008842:	e00d      	b.n	8008860 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4618      	mov	r0, r3
 800884a:	f002 fecd 	bl	800b5e8 <SDMMC_ReadFIFO>
 800884e:	4602      	mov	r2, r0
 8008850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008852:	601a      	str	r2, [r3, #0]
        pData++;
 8008854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008856:	3304      	adds	r3, #4
 8008858:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800885a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800885c:	3301      	adds	r3, #1
 800885e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008862:	2b07      	cmp	r3, #7
 8008864:	d9ee      	bls.n	8008844 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008866:	f7f9 fd7f 	bl	8002368 <HAL_GetTick>
 800886a:	4602      	mov	r2, r0
 800886c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886e:	1ad3      	subs	r3, r2, r3
 8008870:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008874:	d102      	bne.n	800887c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008876:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800887a:	e043      	b.n	8008904 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008882:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008886:	2b00      	cmp	r3, #0
 8008888:	d0d2      	beq.n	8008830 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008890:	f003 0308 	and.w	r3, r3, #8
 8008894:	2b00      	cmp	r3, #0
 8008896:	d001      	beq.n	800889c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008898:	2308      	movs	r3, #8
 800889a:	e033      	b.n	8008904 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088a2:	f003 0302 	and.w	r3, r3, #2
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d001      	beq.n	80088ae <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80088aa:	2302      	movs	r3, #2
 80088ac:	e02a      	b.n	8008904 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088b4:	f003 0320 	and.w	r3, r3, #32
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d017      	beq.n	80088ec <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80088bc:	2320      	movs	r3, #32
 80088be:	e021      	b.n	8008904 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4618      	mov	r0, r3
 80088c6:	f002 fe8f 	bl	800b5e8 <SDMMC_ReadFIFO>
 80088ca:	4602      	mov	r2, r0
 80088cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ce:	601a      	str	r2, [r3, #0]
    pData++;
 80088d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d2:	3304      	adds	r3, #4
 80088d4:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80088d6:	f7f9 fd47 	bl	8002368 <HAL_GetTick>
 80088da:	4602      	mov	r2, r0
 80088dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088de:	1ad3      	subs	r3, r2, r3
 80088e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088e4:	d102      	bne.n	80088ec <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80088e6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80088ea:	e00b      	b.n	8008904 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d1e2      	bne.n	80088c0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a03      	ldr	r2, [pc, #12]	; (800890c <SD_SendSDStatus+0x19c>)
 8008900:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8008902:	2300      	movs	r3, #0
}
 8008904:	4618      	mov	r0, r3
 8008906:	3730      	adds	r7, #48	; 0x30
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}
 800890c:	18000f3a 	.word	0x18000f3a

08008910 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d102      	bne.n	8008926 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008920:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008924:	e018      	b.n	8008958 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800892e:	041b      	lsls	r3, r3, #16
 8008930:	4619      	mov	r1, r3
 8008932:	4610      	mov	r0, r2
 8008934:	f003 f867 	bl	800ba06 <SDMMC_CmdSendStatus>
 8008938:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d001      	beq.n	8008944 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	e009      	b.n	8008958 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	2100      	movs	r1, #0
 800894a:	4618      	mov	r0, r3
 800894c:	f002 feaf 	bl	800b6ae <SDMMC_GetResponse>
 8008950:	4602      	mov	r2, r0
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008956:	2300      	movs	r3, #0
}
 8008958:	4618      	mov	r0, r3
 800895a:	3710      	adds	r7, #16
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b086      	sub	sp, #24
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008968:	2300      	movs	r3, #0
 800896a:	60fb      	str	r3, [r7, #12]
 800896c:	2300      	movs	r3, #0
 800896e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	2100      	movs	r1, #0
 8008976:	4618      	mov	r0, r3
 8008978:	f002 fe99 	bl	800b6ae <SDMMC_GetResponse>
 800897c:	4603      	mov	r3, r0
 800897e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008982:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008986:	d102      	bne.n	800898e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008988:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800898c:	e02f      	b.n	80089ee <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800898e:	f107 030c 	add.w	r3, r7, #12
 8008992:	4619      	mov	r1, r3
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 f879 	bl	8008a8c <SD_FindSCR>
 800899a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d001      	beq.n	80089a6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	e023      	b.n	80089ee <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d01c      	beq.n	80089ea <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089b8:	041b      	lsls	r3, r3, #16
 80089ba:	4619      	mov	r1, r3
 80089bc:	4610      	mov	r0, r2
 80089be:	f002 ff39 	bl	800b834 <SDMMC_CmdAppCommand>
 80089c2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d001      	beq.n	80089ce <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	e00f      	b.n	80089ee <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	2102      	movs	r1, #2
 80089d4:	4618      	mov	r0, r3
 80089d6:	f002 ff70 	bl	800b8ba <SDMMC_CmdBusWidth>
 80089da:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d001      	beq.n	80089e6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	e003      	b.n	80089ee <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80089e6:	2300      	movs	r3, #0
 80089e8:	e001      	b.n	80089ee <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80089ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3718      	adds	r7, #24
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80089f6:	b580      	push	{r7, lr}
 80089f8:	b086      	sub	sp, #24
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80089fe:	2300      	movs	r3, #0
 8008a00:	60fb      	str	r3, [r7, #12]
 8008a02:	2300      	movs	r3, #0
 8008a04:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2100      	movs	r1, #0
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f002 fe4e 	bl	800b6ae <SDMMC_GetResponse>
 8008a12:	4603      	mov	r3, r0
 8008a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a1c:	d102      	bne.n	8008a24 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008a1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008a22:	e02f      	b.n	8008a84 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008a24:	f107 030c 	add.w	r3, r7, #12
 8008a28:	4619      	mov	r1, r3
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 f82e 	bl	8008a8c <SD_FindSCR>
 8008a30:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d001      	beq.n	8008a3c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	e023      	b.n	8008a84 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d01c      	beq.n	8008a80 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a4e:	041b      	lsls	r3, r3, #16
 8008a50:	4619      	mov	r1, r3
 8008a52:	4610      	mov	r0, r2
 8008a54:	f002 feee 	bl	800b834 <SDMMC_CmdAppCommand>
 8008a58:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d001      	beq.n	8008a64 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	e00f      	b.n	8008a84 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2100      	movs	r1, #0
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f002 ff25 	bl	800b8ba <SDMMC_CmdBusWidth>
 8008a70:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d001      	beq.n	8008a7c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	e003      	b.n	8008a84 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	e001      	b.n	8008a84 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008a80:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3718      	adds	r7, #24
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b08e      	sub	sp, #56	; 0x38
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008a96:	f7f9 fc67 	bl	8002368 <HAL_GetTick>
 8008a9a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	60bb      	str	r3, [r7, #8]
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	2108      	movs	r1, #8
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f002 fe3a 	bl	800b72c <SDMMC_CmdBlockLength>
 8008ab8:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d001      	beq.n	8008ac4 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac2:	e0ad      	b.n	8008c20 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008acc:	041b      	lsls	r3, r3, #16
 8008ace:	4619      	mov	r1, r3
 8008ad0:	4610      	mov	r0, r2
 8008ad2:	f002 feaf 	bl	800b834 <SDMMC_CmdAppCommand>
 8008ad6:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d001      	beq.n	8008ae2 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae0:	e09e      	b.n	8008c20 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008ae2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ae6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008ae8:	2308      	movs	r3, #8
 8008aea:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008aec:	2330      	movs	r3, #48	; 0x30
 8008aee:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008af0:	2302      	movs	r3, #2
 8008af2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008af4:	2300      	movs	r3, #0
 8008af6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008af8:	2301      	movs	r3, #1
 8008afa:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f107 0210 	add.w	r2, r7, #16
 8008b04:	4611      	mov	r1, r2
 8008b06:	4618      	mov	r0, r3
 8008b08:	f002 fde4 	bl	800b6d4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4618      	mov	r0, r3
 8008b12:	f002 fef5 	bl	800b900 <SDMMC_CmdSendSCR>
 8008b16:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d027      	beq.n	8008b6e <SD_FindSCR+0xe2>
  {
    return errorstate;
 8008b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b20:	e07e      	b.n	8008c20 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d113      	bne.n	8008b58 <SD_FindSCR+0xcc>
 8008b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d110      	bne.n	8008b58 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f002 fd54 	bl	800b5e8 <SDMMC_ReadFIFO>
 8008b40:	4603      	mov	r3, r0
 8008b42:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f002 fd4d 	bl	800b5e8 <SDMMC_ReadFIFO>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	60fb      	str	r3, [r7, #12]
      index++;
 8008b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b54:	3301      	adds	r3, #1
 8008b56:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008b58:	f7f9 fc06 	bl	8002368 <HAL_GetTick>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b60:	1ad3      	subs	r3, r2, r3
 8008b62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b66:	d102      	bne.n	8008b6e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008b68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008b6c:	e058      	b.n	8008c20 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b74:	f240 532a 	movw	r3, #1322	; 0x52a
 8008b78:	4013      	ands	r3, r2
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d0d1      	beq.n	8008b22 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b84:	f003 0308 	and.w	r3, r3, #8
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d005      	beq.n	8008b98 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	2208      	movs	r2, #8
 8008b92:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008b94:	2308      	movs	r3, #8
 8008b96:	e043      	b.n	8008c20 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b9e:	f003 0302 	and.w	r3, r3, #2
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d005      	beq.n	8008bb2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2202      	movs	r2, #2
 8008bac:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008bae:	2302      	movs	r3, #2
 8008bb0:	e036      	b.n	8008c20 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bb8:	f003 0320 	and.w	r3, r3, #32
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d005      	beq.n	8008bcc <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	2220      	movs	r2, #32
 8008bc6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008bc8:	2320      	movs	r3, #32
 8008bca:	e029      	b.n	8008c20 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a15      	ldr	r2, [pc, #84]	; (8008c28 <SD_FindSCR+0x19c>)
 8008bd2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	061a      	lsls	r2, r3, #24
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	021b      	lsls	r3, r3, #8
 8008bdc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008be0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	0a1b      	lsrs	r3, r3, #8
 8008be6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008bea:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	0e1b      	lsrs	r3, r3, #24
 8008bf0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf4:	601a      	str	r2, [r3, #0]
    scr++;
 8008bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf8:	3304      	adds	r3, #4
 8008bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	061a      	lsls	r2, r3, #24
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	021b      	lsls	r3, r3, #8
 8008c04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008c08:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	0a1b      	lsrs	r3, r3, #8
 8008c0e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008c12:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	0e1b      	lsrs	r3, r3, #24
 8008c18:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c1c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008c1e:	2300      	movs	r3, #0
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3738      	adds	r7, #56	; 0x38
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	18000f3a 	.word	0x18000f3a

08008c2c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d101      	bne.n	8008c3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e10f      	b.n	8008e5e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2200      	movs	r2, #0
 8008c42:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a87      	ldr	r2, [pc, #540]	; (8008e68 <HAL_SPI_Init+0x23c>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d00f      	beq.n	8008c6e <HAL_SPI_Init+0x42>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a86      	ldr	r2, [pc, #536]	; (8008e6c <HAL_SPI_Init+0x240>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d00a      	beq.n	8008c6e <HAL_SPI_Init+0x42>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a84      	ldr	r2, [pc, #528]	; (8008e70 <HAL_SPI_Init+0x244>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d005      	beq.n	8008c6e <HAL_SPI_Init+0x42>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	2b0f      	cmp	r3, #15
 8008c68:	d901      	bls.n	8008c6e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	e0f7      	b.n	8008e5e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 f900 	bl	8008e74 <SPI_GetPacketSize>
 8008c74:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a7b      	ldr	r2, [pc, #492]	; (8008e68 <HAL_SPI_Init+0x23c>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d00c      	beq.n	8008c9a <HAL_SPI_Init+0x6e>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a79      	ldr	r2, [pc, #484]	; (8008e6c <HAL_SPI_Init+0x240>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d007      	beq.n	8008c9a <HAL_SPI_Init+0x6e>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a78      	ldr	r2, [pc, #480]	; (8008e70 <HAL_SPI_Init+0x244>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d002      	beq.n	8008c9a <HAL_SPI_Init+0x6e>
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2b08      	cmp	r3, #8
 8008c98:	d811      	bhi.n	8008cbe <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008c9e:	4a72      	ldr	r2, [pc, #456]	; (8008e68 <HAL_SPI_Init+0x23c>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d009      	beq.n	8008cb8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a70      	ldr	r2, [pc, #448]	; (8008e6c <HAL_SPI_Init+0x240>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d004      	beq.n	8008cb8 <HAL_SPI_Init+0x8c>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a6f      	ldr	r2, [pc, #444]	; (8008e70 <HAL_SPI_Init+0x244>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d104      	bne.n	8008cc2 <HAL_SPI_Init+0x96>
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2b10      	cmp	r3, #16
 8008cbc:	d901      	bls.n	8008cc2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	e0cd      	b.n	8008e5e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d106      	bne.n	8008cdc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f7f8 ff54 	bl	8001b84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2202      	movs	r2, #2
 8008ce0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f022 0201 	bic.w	r2, r2, #1
 8008cf2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	689b      	ldr	r3, [r3, #8]
 8008cfa:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008cfe:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	699b      	ldr	r3, [r3, #24]
 8008d04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008d08:	d119      	bne.n	8008d3e <HAL_SPI_Init+0x112>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d12:	d103      	bne.n	8008d1c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d008      	beq.n	8008d2e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d10c      	bne.n	8008d3e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008d28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d2c:	d107      	bne.n	8008d3e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008d3c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d00f      	beq.n	8008d6a <HAL_SPI_Init+0x13e>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	68db      	ldr	r3, [r3, #12]
 8008d4e:	2b06      	cmp	r3, #6
 8008d50:	d90b      	bls.n	8008d6a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	430a      	orrs	r2, r1
 8008d66:	601a      	str	r2, [r3, #0]
 8008d68:	e007      	b.n	8008d7a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d78:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	69da      	ldr	r2, [r3, #28]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d82:	431a      	orrs	r2, r3
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	431a      	orrs	r2, r3
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d8c:	ea42 0103 	orr.w	r1, r2, r3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	68da      	ldr	r2, [r3, #12]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	430a      	orrs	r2, r1
 8008d9a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da4:	431a      	orrs	r2, r3
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008daa:	431a      	orrs	r2, r3
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	699b      	ldr	r3, [r3, #24]
 8008db0:	431a      	orrs	r2, r3
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	691b      	ldr	r3, [r3, #16]
 8008db6:	431a      	orrs	r2, r3
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	695b      	ldr	r3, [r3, #20]
 8008dbc:	431a      	orrs	r2, r3
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6a1b      	ldr	r3, [r3, #32]
 8008dc2:	431a      	orrs	r2, r3
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	431a      	orrs	r2, r3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dce:	431a      	orrs	r2, r3
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	431a      	orrs	r2, r3
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dda:	ea42 0103 	orr.w	r1, r2, r3
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	430a      	orrs	r2, r1
 8008de8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d113      	bne.n	8008e1a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e04:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	689b      	ldr	r3, [r3, #8]
 8008e0c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008e18:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f022 0201 	bic.w	r2, r2, #1
 8008e28:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d00a      	beq.n	8008e4c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	68db      	ldr	r3, [r3, #12]
 8008e3c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	430a      	orrs	r2, r1
 8008e4a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3710      	adds	r7, #16
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	40013000 	.word	0x40013000
 8008e6c:	40003800 	.word	0x40003800
 8008e70:	40003c00 	.word	0x40003c00

08008e74 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b085      	sub	sp, #20
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e80:	095b      	lsrs	r3, r3, #5
 8008e82:	3301      	adds	r3, #1
 8008e84:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	3307      	adds	r3, #7
 8008e92:	08db      	lsrs	r3, r3, #3
 8008e94:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	68fa      	ldr	r2, [r7, #12]
 8008e9a:	fb02 f303 	mul.w	r3, r2, r3
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3714      	adds	r7, #20
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr

08008eaa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b082      	sub	sp, #8
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d101      	bne.n	8008ebc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e049      	b.n	8008f50 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d106      	bne.n	8008ed6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f7f8 ff37 	bl	8001d44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2202      	movs	r2, #2
 8008eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	3304      	adds	r3, #4
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	4610      	mov	r0, r2
 8008eea:	f000 fbcd 	bl	8009688 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2201      	movs	r2, #1
 8008efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2201      	movs	r2, #1
 8008f02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2201      	movs	r2, #1
 8008f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2201      	movs	r2, #1
 8008f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2201      	movs	r2, #1
 8008f1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2201      	movs	r2, #1
 8008f22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2201      	movs	r2, #1
 8008f2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2201      	movs	r2, #1
 8008f32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2201      	movs	r2, #1
 8008f3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2201      	movs	r2, #1
 8008f42:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2201      	movs	r2, #1
 8008f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f4e:	2300      	movs	r3, #0
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3708      	adds	r7, #8
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b082      	sub	sp, #8
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d101      	bne.n	8008f6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008f66:	2301      	movs	r3, #1
 8008f68:	e049      	b.n	8008ffe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d106      	bne.n	8008f84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f7f8 ff56 	bl	8001e30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2202      	movs	r2, #2
 8008f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	3304      	adds	r3, #4
 8008f94:	4619      	mov	r1, r3
 8008f96:	4610      	mov	r0, r2
 8008f98:	f000 fb76 	bl	8009688 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3708      	adds	r7, #8
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b082      	sub	sp, #8
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d101      	bne.n	8009018 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009014:	2301      	movs	r3, #1
 8009016:	e049      	b.n	80090ac <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800901e:	b2db      	uxtb	r3, r3
 8009020:	2b00      	cmp	r3, #0
 8009022:	d106      	bne.n	8009032 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2200      	movs	r2, #0
 8009028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f7f8 ff21 	bl	8001e74 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2202      	movs	r2, #2
 8009036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681a      	ldr	r2, [r3, #0]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	3304      	adds	r3, #4
 8009042:	4619      	mov	r1, r3
 8009044:	4610      	mov	r0, r2
 8009046:	f000 fb1f 	bl	8009688 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2201      	movs	r2, #1
 800904e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2201      	movs	r2, #1
 8009056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2201      	movs	r2, #1
 800905e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2201      	movs	r2, #1
 8009066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2201      	movs	r2, #1
 800906e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2201      	movs	r2, #1
 8009076:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2201      	movs	r2, #1
 800907e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2201      	movs	r2, #1
 8009086:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2201      	movs	r2, #1
 800908e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2201      	movs	r2, #1
 8009096:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2201      	movs	r2, #1
 800909e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2201      	movs	r2, #1
 80090a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80090aa:	2300      	movs	r3, #0
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3708      	adds	r7, #8
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b086      	sub	sp, #24
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	60f8      	str	r0, [r7, #12]
 80090bc:	60b9      	str	r1, [r7, #8]
 80090be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80090c0:	2300      	movs	r3, #0
 80090c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d101      	bne.n	80090d2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80090ce:	2302      	movs	r3, #2
 80090d0:	e088      	b.n	80091e4 <HAL_TIM_IC_ConfigChannel+0x130>
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2201      	movs	r2, #1
 80090d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d11b      	bne.n	8009118 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80090f0:	f000 ff24 	bl	8009f3c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	699a      	ldr	r2, [r3, #24]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f022 020c 	bic.w	r2, r2, #12
 8009102:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	6999      	ldr	r1, [r3, #24]
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	689a      	ldr	r2, [r3, #8]
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	430a      	orrs	r2, r1
 8009114:	619a      	str	r2, [r3, #24]
 8009116:	e060      	b.n	80091da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2b04      	cmp	r3, #4
 800911c:	d11c      	bne.n	8009158 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800912e:	f000 ffa8 	bl	800a082 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	699a      	ldr	r2, [r3, #24]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009140:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	6999      	ldr	r1, [r3, #24]
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	021a      	lsls	r2, r3, #8
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	430a      	orrs	r2, r1
 8009154:	619a      	str	r2, [r3, #24]
 8009156:	e040      	b.n	80091da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2b08      	cmp	r3, #8
 800915c:	d11b      	bne.n	8009196 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800916e:	f000 fff5 	bl	800a15c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	69da      	ldr	r2, [r3, #28]
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f022 020c 	bic.w	r2, r2, #12
 8009180:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	69d9      	ldr	r1, [r3, #28]
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	689a      	ldr	r2, [r3, #8]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	430a      	orrs	r2, r1
 8009192:	61da      	str	r2, [r3, #28]
 8009194:	e021      	b.n	80091da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2b0c      	cmp	r3, #12
 800919a:	d11c      	bne.n	80091d6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80091ac:	f001 f812 	bl	800a1d4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	69da      	ldr	r2, [r3, #28]
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80091be:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	69d9      	ldr	r1, [r3, #28]
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	689b      	ldr	r3, [r3, #8]
 80091ca:	021a      	lsls	r2, r3, #8
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	430a      	orrs	r2, r1
 80091d2:	61da      	str	r2, [r3, #28]
 80091d4:	e001      	b.n	80091da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2200      	movs	r2, #0
 80091de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80091e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3718      	adds	r7, #24
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b086      	sub	sp, #24
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80091f8:	2300      	movs	r3, #0
 80091fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009202:	2b01      	cmp	r3, #1
 8009204:	d101      	bne.n	800920a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009206:	2302      	movs	r3, #2
 8009208:	e0ff      	b.n	800940a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2201      	movs	r2, #1
 800920e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2b14      	cmp	r3, #20
 8009216:	f200 80f0 	bhi.w	80093fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800921a:	a201      	add	r2, pc, #4	; (adr r2, 8009220 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800921c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009220:	08009275 	.word	0x08009275
 8009224:	080093fb 	.word	0x080093fb
 8009228:	080093fb 	.word	0x080093fb
 800922c:	080093fb 	.word	0x080093fb
 8009230:	080092b5 	.word	0x080092b5
 8009234:	080093fb 	.word	0x080093fb
 8009238:	080093fb 	.word	0x080093fb
 800923c:	080093fb 	.word	0x080093fb
 8009240:	080092f7 	.word	0x080092f7
 8009244:	080093fb 	.word	0x080093fb
 8009248:	080093fb 	.word	0x080093fb
 800924c:	080093fb 	.word	0x080093fb
 8009250:	08009337 	.word	0x08009337
 8009254:	080093fb 	.word	0x080093fb
 8009258:	080093fb 	.word	0x080093fb
 800925c:	080093fb 	.word	0x080093fb
 8009260:	08009379 	.word	0x08009379
 8009264:	080093fb 	.word	0x080093fb
 8009268:	080093fb 	.word	0x080093fb
 800926c:	080093fb 	.word	0x080093fb
 8009270:	080093b9 	.word	0x080093b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	68b9      	ldr	r1, [r7, #8]
 800927a:	4618      	mov	r0, r3
 800927c:	f000 fa9e 	bl	80097bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	699a      	ldr	r2, [r3, #24]
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f042 0208 	orr.w	r2, r2, #8
 800928e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	699a      	ldr	r2, [r3, #24]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f022 0204 	bic.w	r2, r2, #4
 800929e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	6999      	ldr	r1, [r3, #24]
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	691a      	ldr	r2, [r3, #16]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	430a      	orrs	r2, r1
 80092b0:	619a      	str	r2, [r3, #24]
      break;
 80092b2:	e0a5      	b.n	8009400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	68b9      	ldr	r1, [r7, #8]
 80092ba:	4618      	mov	r0, r3
 80092bc:	f000 fb0e 	bl	80098dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	699a      	ldr	r2, [r3, #24]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	699a      	ldr	r2, [r3, #24]
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	6999      	ldr	r1, [r3, #24]
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	021a      	lsls	r2, r3, #8
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	430a      	orrs	r2, r1
 80092f2:	619a      	str	r2, [r3, #24]
      break;
 80092f4:	e084      	b.n	8009400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	68b9      	ldr	r1, [r7, #8]
 80092fc:	4618      	mov	r0, r3
 80092fe:	f000 fb77 	bl	80099f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	69da      	ldr	r2, [r3, #28]
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f042 0208 	orr.w	r2, r2, #8
 8009310:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	69da      	ldr	r2, [r3, #28]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f022 0204 	bic.w	r2, r2, #4
 8009320:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	69d9      	ldr	r1, [r3, #28]
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	691a      	ldr	r2, [r3, #16]
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	430a      	orrs	r2, r1
 8009332:	61da      	str	r2, [r3, #28]
      break;
 8009334:	e064      	b.n	8009400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	68b9      	ldr	r1, [r7, #8]
 800933c:	4618      	mov	r0, r3
 800933e:	f000 fbdf 	bl	8009b00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	69da      	ldr	r2, [r3, #28]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009350:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	69da      	ldr	r2, [r3, #28]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009360:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	69d9      	ldr	r1, [r3, #28]
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	691b      	ldr	r3, [r3, #16]
 800936c:	021a      	lsls	r2, r3, #8
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	430a      	orrs	r2, r1
 8009374:	61da      	str	r2, [r3, #28]
      break;
 8009376:	e043      	b.n	8009400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	68b9      	ldr	r1, [r7, #8]
 800937e:	4618      	mov	r0, r3
 8009380:	f000 fc28 	bl	8009bd4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f042 0208 	orr.w	r2, r2, #8
 8009392:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f022 0204 	bic.w	r2, r2, #4
 80093a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	691a      	ldr	r2, [r3, #16]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	430a      	orrs	r2, r1
 80093b4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80093b6:	e023      	b.n	8009400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	68b9      	ldr	r1, [r7, #8]
 80093be:	4618      	mov	r0, r3
 80093c0:	f000 fc6c 	bl	8009c9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	691b      	ldr	r3, [r3, #16]
 80093ee:	021a      	lsls	r2, r3, #8
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	430a      	orrs	r2, r1
 80093f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80093f8:	e002      	b.n	8009400 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80093fa:	2301      	movs	r3, #1
 80093fc:	75fb      	strb	r3, [r7, #23]
      break;
 80093fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2200      	movs	r2, #0
 8009404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009408:	7dfb      	ldrb	r3, [r7, #23]
}
 800940a:	4618      	mov	r0, r3
 800940c:	3718      	adds	r7, #24
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop

08009414 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800941e:	2300      	movs	r3, #0
 8009420:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009428:	2b01      	cmp	r3, #1
 800942a:	d101      	bne.n	8009430 <HAL_TIM_ConfigClockSource+0x1c>
 800942c:	2302      	movs	r3, #2
 800942e:	e0dc      	b.n	80095ea <HAL_TIM_ConfigClockSource+0x1d6>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2201      	movs	r2, #1
 8009434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2202      	movs	r2, #2
 800943c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009448:	68ba      	ldr	r2, [r7, #8]
 800944a:	4b6a      	ldr	r3, [pc, #424]	; (80095f4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800944c:	4013      	ands	r3, r2
 800944e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009456:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	68ba      	ldr	r2, [r7, #8]
 800945e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a64      	ldr	r2, [pc, #400]	; (80095f8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009466:	4293      	cmp	r3, r2
 8009468:	f000 80a9 	beq.w	80095be <HAL_TIM_ConfigClockSource+0x1aa>
 800946c:	4a62      	ldr	r2, [pc, #392]	; (80095f8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800946e:	4293      	cmp	r3, r2
 8009470:	f200 80ae 	bhi.w	80095d0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009474:	4a61      	ldr	r2, [pc, #388]	; (80095fc <HAL_TIM_ConfigClockSource+0x1e8>)
 8009476:	4293      	cmp	r3, r2
 8009478:	f000 80a1 	beq.w	80095be <HAL_TIM_ConfigClockSource+0x1aa>
 800947c:	4a5f      	ldr	r2, [pc, #380]	; (80095fc <HAL_TIM_ConfigClockSource+0x1e8>)
 800947e:	4293      	cmp	r3, r2
 8009480:	f200 80a6 	bhi.w	80095d0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009484:	4a5e      	ldr	r2, [pc, #376]	; (8009600 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009486:	4293      	cmp	r3, r2
 8009488:	f000 8099 	beq.w	80095be <HAL_TIM_ConfigClockSource+0x1aa>
 800948c:	4a5c      	ldr	r2, [pc, #368]	; (8009600 <HAL_TIM_ConfigClockSource+0x1ec>)
 800948e:	4293      	cmp	r3, r2
 8009490:	f200 809e 	bhi.w	80095d0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009494:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009498:	f000 8091 	beq.w	80095be <HAL_TIM_ConfigClockSource+0x1aa>
 800949c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80094a0:	f200 8096 	bhi.w	80095d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80094a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094a8:	f000 8089 	beq.w	80095be <HAL_TIM_ConfigClockSource+0x1aa>
 80094ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094b0:	f200 808e 	bhi.w	80095d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80094b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094b8:	d03e      	beq.n	8009538 <HAL_TIM_ConfigClockSource+0x124>
 80094ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094be:	f200 8087 	bhi.w	80095d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80094c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094c6:	f000 8086 	beq.w	80095d6 <HAL_TIM_ConfigClockSource+0x1c2>
 80094ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094ce:	d87f      	bhi.n	80095d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80094d0:	2b70      	cmp	r3, #112	; 0x70
 80094d2:	d01a      	beq.n	800950a <HAL_TIM_ConfigClockSource+0xf6>
 80094d4:	2b70      	cmp	r3, #112	; 0x70
 80094d6:	d87b      	bhi.n	80095d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80094d8:	2b60      	cmp	r3, #96	; 0x60
 80094da:	d050      	beq.n	800957e <HAL_TIM_ConfigClockSource+0x16a>
 80094dc:	2b60      	cmp	r3, #96	; 0x60
 80094de:	d877      	bhi.n	80095d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80094e0:	2b50      	cmp	r3, #80	; 0x50
 80094e2:	d03c      	beq.n	800955e <HAL_TIM_ConfigClockSource+0x14a>
 80094e4:	2b50      	cmp	r3, #80	; 0x50
 80094e6:	d873      	bhi.n	80095d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80094e8:	2b40      	cmp	r3, #64	; 0x40
 80094ea:	d058      	beq.n	800959e <HAL_TIM_ConfigClockSource+0x18a>
 80094ec:	2b40      	cmp	r3, #64	; 0x40
 80094ee:	d86f      	bhi.n	80095d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80094f0:	2b30      	cmp	r3, #48	; 0x30
 80094f2:	d064      	beq.n	80095be <HAL_TIM_ConfigClockSource+0x1aa>
 80094f4:	2b30      	cmp	r3, #48	; 0x30
 80094f6:	d86b      	bhi.n	80095d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80094f8:	2b20      	cmp	r3, #32
 80094fa:	d060      	beq.n	80095be <HAL_TIM_ConfigClockSource+0x1aa>
 80094fc:	2b20      	cmp	r3, #32
 80094fe:	d867      	bhi.n	80095d0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009500:	2b00      	cmp	r3, #0
 8009502:	d05c      	beq.n	80095be <HAL_TIM_ConfigClockSource+0x1aa>
 8009504:	2b10      	cmp	r3, #16
 8009506:	d05a      	beq.n	80095be <HAL_TIM_ConfigClockSource+0x1aa>
 8009508:	e062      	b.n	80095d0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800951a:	f000 feb7 	bl	800a28c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	689b      	ldr	r3, [r3, #8]
 8009524:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800952c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	68ba      	ldr	r2, [r7, #8]
 8009534:	609a      	str	r2, [r3, #8]
      break;
 8009536:	e04f      	b.n	80095d8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009548:	f000 fea0 	bl	800a28c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	689a      	ldr	r2, [r3, #8]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800955a:	609a      	str	r2, [r3, #8]
      break;
 800955c:	e03c      	b.n	80095d8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800956a:	461a      	mov	r2, r3
 800956c:	f000 fd5a 	bl	800a024 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	2150      	movs	r1, #80	; 0x50
 8009576:	4618      	mov	r0, r3
 8009578:	f000 fe6a 	bl	800a250 <TIM_ITRx_SetConfig>
      break;
 800957c:	e02c      	b.n	80095d8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800958a:	461a      	mov	r2, r3
 800958c:	f000 fdb6 	bl	800a0fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	2160      	movs	r1, #96	; 0x60
 8009596:	4618      	mov	r0, r3
 8009598:	f000 fe5a 	bl	800a250 <TIM_ITRx_SetConfig>
      break;
 800959c:	e01c      	b.n	80095d8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80095aa:	461a      	mov	r2, r3
 80095ac:	f000 fd3a 	bl	800a024 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2140      	movs	r1, #64	; 0x40
 80095b6:	4618      	mov	r0, r3
 80095b8:	f000 fe4a 	bl	800a250 <TIM_ITRx_SetConfig>
      break;
 80095bc:	e00c      	b.n	80095d8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4619      	mov	r1, r3
 80095c8:	4610      	mov	r0, r2
 80095ca:	f000 fe41 	bl	800a250 <TIM_ITRx_SetConfig>
      break;
 80095ce:	e003      	b.n	80095d8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80095d0:	2301      	movs	r3, #1
 80095d2:	73fb      	strb	r3, [r7, #15]
      break;
 80095d4:	e000      	b.n	80095d8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80095d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2201      	movs	r2, #1
 80095dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2200      	movs	r2, #0
 80095e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80095e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3710      	adds	r7, #16
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
 80095f2:	bf00      	nop
 80095f4:	ffceff88 	.word	0xffceff88
 80095f8:	00100040 	.word	0x00100040
 80095fc:	00100030 	.word	0x00100030
 8009600:	00100020 	.word	0x00100020

08009604 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b082      	sub	sp, #8
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009614:	2b01      	cmp	r3, #1
 8009616:	d101      	bne.n	800961c <HAL_TIM_SlaveConfigSynchro+0x18>
 8009618:	2302      	movs	r3, #2
 800961a:	e031      	b.n	8009680 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2201      	movs	r2, #1
 8009620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2202      	movs	r2, #2
 8009628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800962c:	6839      	ldr	r1, [r7, #0]
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 fb9a 	bl	8009d68 <TIM_SlaveTimer_SetConfig>
 8009634:	4603      	mov	r3, r0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d009      	beq.n	800964e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2201      	movs	r2, #1
 800963e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2200      	movs	r2, #0
 8009646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800964a:	2301      	movs	r3, #1
 800964c:	e018      	b.n	8009680 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	68da      	ldr	r2, [r3, #12]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800965c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	68da      	ldr	r2, [r3, #12]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800966c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2201      	movs	r2, #1
 8009672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2200      	movs	r2, #0
 800967a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800967e:	2300      	movs	r3, #0
}
 8009680:	4618      	mov	r0, r3
 8009682:	3708      	adds	r7, #8
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009688:	b480      	push	{r7}
 800968a:	b085      	sub	sp, #20
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4a40      	ldr	r2, [pc, #256]	; (800979c <TIM_Base_SetConfig+0x114>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d013      	beq.n	80096c8 <TIM_Base_SetConfig+0x40>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096a6:	d00f      	beq.n	80096c8 <TIM_Base_SetConfig+0x40>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	4a3d      	ldr	r2, [pc, #244]	; (80097a0 <TIM_Base_SetConfig+0x118>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d00b      	beq.n	80096c8 <TIM_Base_SetConfig+0x40>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	4a3c      	ldr	r2, [pc, #240]	; (80097a4 <TIM_Base_SetConfig+0x11c>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d007      	beq.n	80096c8 <TIM_Base_SetConfig+0x40>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	4a3b      	ldr	r2, [pc, #236]	; (80097a8 <TIM_Base_SetConfig+0x120>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d003      	beq.n	80096c8 <TIM_Base_SetConfig+0x40>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	4a3a      	ldr	r2, [pc, #232]	; (80097ac <TIM_Base_SetConfig+0x124>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d108      	bne.n	80096da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	4313      	orrs	r3, r2
 80096d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	4a2f      	ldr	r2, [pc, #188]	; (800979c <TIM_Base_SetConfig+0x114>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d01f      	beq.n	8009722 <TIM_Base_SetConfig+0x9a>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096e8:	d01b      	beq.n	8009722 <TIM_Base_SetConfig+0x9a>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4a2c      	ldr	r2, [pc, #176]	; (80097a0 <TIM_Base_SetConfig+0x118>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d017      	beq.n	8009722 <TIM_Base_SetConfig+0x9a>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4a2b      	ldr	r2, [pc, #172]	; (80097a4 <TIM_Base_SetConfig+0x11c>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d013      	beq.n	8009722 <TIM_Base_SetConfig+0x9a>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	4a2a      	ldr	r2, [pc, #168]	; (80097a8 <TIM_Base_SetConfig+0x120>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d00f      	beq.n	8009722 <TIM_Base_SetConfig+0x9a>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4a29      	ldr	r2, [pc, #164]	; (80097ac <TIM_Base_SetConfig+0x124>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d00b      	beq.n	8009722 <TIM_Base_SetConfig+0x9a>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	4a28      	ldr	r2, [pc, #160]	; (80097b0 <TIM_Base_SetConfig+0x128>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d007      	beq.n	8009722 <TIM_Base_SetConfig+0x9a>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4a27      	ldr	r2, [pc, #156]	; (80097b4 <TIM_Base_SetConfig+0x12c>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d003      	beq.n	8009722 <TIM_Base_SetConfig+0x9a>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	4a26      	ldr	r2, [pc, #152]	; (80097b8 <TIM_Base_SetConfig+0x130>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d108      	bne.n	8009734 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009728:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	68db      	ldr	r3, [r3, #12]
 800972e:	68fa      	ldr	r2, [r7, #12]
 8009730:	4313      	orrs	r3, r2
 8009732:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	695b      	ldr	r3, [r3, #20]
 800973e:	4313      	orrs	r3, r2
 8009740:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	68fa      	ldr	r2, [r7, #12]
 8009746:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	689a      	ldr	r2, [r3, #8]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	4a10      	ldr	r2, [pc, #64]	; (800979c <TIM_Base_SetConfig+0x114>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d00f      	beq.n	8009780 <TIM_Base_SetConfig+0xf8>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	4a12      	ldr	r2, [pc, #72]	; (80097ac <TIM_Base_SetConfig+0x124>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d00b      	beq.n	8009780 <TIM_Base_SetConfig+0xf8>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	4a11      	ldr	r2, [pc, #68]	; (80097b0 <TIM_Base_SetConfig+0x128>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d007      	beq.n	8009780 <TIM_Base_SetConfig+0xf8>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	4a10      	ldr	r2, [pc, #64]	; (80097b4 <TIM_Base_SetConfig+0x12c>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d003      	beq.n	8009780 <TIM_Base_SetConfig+0xf8>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	4a0f      	ldr	r2, [pc, #60]	; (80097b8 <TIM_Base_SetConfig+0x130>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d103      	bne.n	8009788 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	691a      	ldr	r2, [r3, #16]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2201      	movs	r2, #1
 800978c:	615a      	str	r2, [r3, #20]
}
 800978e:	bf00      	nop
 8009790:	3714      	adds	r7, #20
 8009792:	46bd      	mov	sp, r7
 8009794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009798:	4770      	bx	lr
 800979a:	bf00      	nop
 800979c:	40010000 	.word	0x40010000
 80097a0:	40000400 	.word	0x40000400
 80097a4:	40000800 	.word	0x40000800
 80097a8:	40000c00 	.word	0x40000c00
 80097ac:	40010400 	.word	0x40010400
 80097b0:	40014000 	.word	0x40014000
 80097b4:	40014400 	.word	0x40014400
 80097b8:	40014800 	.word	0x40014800

080097bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80097bc:	b480      	push	{r7}
 80097be:	b087      	sub	sp, #28
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6a1b      	ldr	r3, [r3, #32]
 80097ca:	f023 0201 	bic.w	r2, r3, #1
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6a1b      	ldr	r3, [r3, #32]
 80097d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	699b      	ldr	r3, [r3, #24]
 80097e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80097e4:	68fa      	ldr	r2, [r7, #12]
 80097e6:	4b37      	ldr	r3, [pc, #220]	; (80098c4 <TIM_OC1_SetConfig+0x108>)
 80097e8:	4013      	ands	r3, r2
 80097ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f023 0303 	bic.w	r3, r3, #3
 80097f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	68fa      	ldr	r2, [r7, #12]
 80097fa:	4313      	orrs	r3, r2
 80097fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	f023 0302 	bic.w	r3, r3, #2
 8009804:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	689b      	ldr	r3, [r3, #8]
 800980a:	697a      	ldr	r2, [r7, #20]
 800980c:	4313      	orrs	r3, r2
 800980e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	4a2d      	ldr	r2, [pc, #180]	; (80098c8 <TIM_OC1_SetConfig+0x10c>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d00f      	beq.n	8009838 <TIM_OC1_SetConfig+0x7c>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4a2c      	ldr	r2, [pc, #176]	; (80098cc <TIM_OC1_SetConfig+0x110>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d00b      	beq.n	8009838 <TIM_OC1_SetConfig+0x7c>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	4a2b      	ldr	r2, [pc, #172]	; (80098d0 <TIM_OC1_SetConfig+0x114>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d007      	beq.n	8009838 <TIM_OC1_SetConfig+0x7c>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	4a2a      	ldr	r2, [pc, #168]	; (80098d4 <TIM_OC1_SetConfig+0x118>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d003      	beq.n	8009838 <TIM_OC1_SetConfig+0x7c>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	4a29      	ldr	r2, [pc, #164]	; (80098d8 <TIM_OC1_SetConfig+0x11c>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d10c      	bne.n	8009852 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	f023 0308 	bic.w	r3, r3, #8
 800983e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	68db      	ldr	r3, [r3, #12]
 8009844:	697a      	ldr	r2, [r7, #20]
 8009846:	4313      	orrs	r3, r2
 8009848:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	f023 0304 	bic.w	r3, r3, #4
 8009850:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	4a1c      	ldr	r2, [pc, #112]	; (80098c8 <TIM_OC1_SetConfig+0x10c>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d00f      	beq.n	800987a <TIM_OC1_SetConfig+0xbe>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	4a1b      	ldr	r2, [pc, #108]	; (80098cc <TIM_OC1_SetConfig+0x110>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d00b      	beq.n	800987a <TIM_OC1_SetConfig+0xbe>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	4a1a      	ldr	r2, [pc, #104]	; (80098d0 <TIM_OC1_SetConfig+0x114>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d007      	beq.n	800987a <TIM_OC1_SetConfig+0xbe>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	4a19      	ldr	r2, [pc, #100]	; (80098d4 <TIM_OC1_SetConfig+0x118>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d003      	beq.n	800987a <TIM_OC1_SetConfig+0xbe>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	4a18      	ldr	r2, [pc, #96]	; (80098d8 <TIM_OC1_SetConfig+0x11c>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d111      	bne.n	800989e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009880:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009888:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	695b      	ldr	r3, [r3, #20]
 800988e:	693a      	ldr	r2, [r7, #16]
 8009890:	4313      	orrs	r3, r2
 8009892:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	699b      	ldr	r3, [r3, #24]
 8009898:	693a      	ldr	r2, [r7, #16]
 800989a:	4313      	orrs	r3, r2
 800989c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	693a      	ldr	r2, [r7, #16]
 80098a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	68fa      	ldr	r2, [r7, #12]
 80098a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	685a      	ldr	r2, [r3, #4]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	697a      	ldr	r2, [r7, #20]
 80098b6:	621a      	str	r2, [r3, #32]
}
 80098b8:	bf00      	nop
 80098ba:	371c      	adds	r7, #28
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr
 80098c4:	fffeff8f 	.word	0xfffeff8f
 80098c8:	40010000 	.word	0x40010000
 80098cc:	40010400 	.word	0x40010400
 80098d0:	40014000 	.word	0x40014000
 80098d4:	40014400 	.word	0x40014400
 80098d8:	40014800 	.word	0x40014800

080098dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80098dc:	b480      	push	{r7}
 80098de:	b087      	sub	sp, #28
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6a1b      	ldr	r3, [r3, #32]
 80098ea:	f023 0210 	bic.w	r2, r3, #16
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6a1b      	ldr	r3, [r3, #32]
 80098f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	699b      	ldr	r3, [r3, #24]
 8009902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009904:	68fa      	ldr	r2, [r7, #12]
 8009906:	4b34      	ldr	r3, [pc, #208]	; (80099d8 <TIM_OC2_SetConfig+0xfc>)
 8009908:	4013      	ands	r3, r2
 800990a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009912:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	021b      	lsls	r3, r3, #8
 800991a:	68fa      	ldr	r2, [r7, #12]
 800991c:	4313      	orrs	r3, r2
 800991e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	f023 0320 	bic.w	r3, r3, #32
 8009926:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	689b      	ldr	r3, [r3, #8]
 800992c:	011b      	lsls	r3, r3, #4
 800992e:	697a      	ldr	r2, [r7, #20]
 8009930:	4313      	orrs	r3, r2
 8009932:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	4a29      	ldr	r2, [pc, #164]	; (80099dc <TIM_OC2_SetConfig+0x100>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d003      	beq.n	8009944 <TIM_OC2_SetConfig+0x68>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	4a28      	ldr	r2, [pc, #160]	; (80099e0 <TIM_OC2_SetConfig+0x104>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d10d      	bne.n	8009960 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800994a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	68db      	ldr	r3, [r3, #12]
 8009950:	011b      	lsls	r3, r3, #4
 8009952:	697a      	ldr	r2, [r7, #20]
 8009954:	4313      	orrs	r3, r2
 8009956:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800995e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	4a1e      	ldr	r2, [pc, #120]	; (80099dc <TIM_OC2_SetConfig+0x100>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d00f      	beq.n	8009988 <TIM_OC2_SetConfig+0xac>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	4a1d      	ldr	r2, [pc, #116]	; (80099e0 <TIM_OC2_SetConfig+0x104>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d00b      	beq.n	8009988 <TIM_OC2_SetConfig+0xac>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	4a1c      	ldr	r2, [pc, #112]	; (80099e4 <TIM_OC2_SetConfig+0x108>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d007      	beq.n	8009988 <TIM_OC2_SetConfig+0xac>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	4a1b      	ldr	r2, [pc, #108]	; (80099e8 <TIM_OC2_SetConfig+0x10c>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d003      	beq.n	8009988 <TIM_OC2_SetConfig+0xac>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	4a1a      	ldr	r2, [pc, #104]	; (80099ec <TIM_OC2_SetConfig+0x110>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d113      	bne.n	80099b0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800998e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009996:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	695b      	ldr	r3, [r3, #20]
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	693a      	ldr	r2, [r7, #16]
 80099a0:	4313      	orrs	r3, r2
 80099a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	699b      	ldr	r3, [r3, #24]
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	693a      	ldr	r2, [r7, #16]
 80099ac:	4313      	orrs	r3, r2
 80099ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	693a      	ldr	r2, [r7, #16]
 80099b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	68fa      	ldr	r2, [r7, #12]
 80099ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	685a      	ldr	r2, [r3, #4]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	697a      	ldr	r2, [r7, #20]
 80099c8:	621a      	str	r2, [r3, #32]
}
 80099ca:	bf00      	nop
 80099cc:	371c      	adds	r7, #28
 80099ce:	46bd      	mov	sp, r7
 80099d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d4:	4770      	bx	lr
 80099d6:	bf00      	nop
 80099d8:	feff8fff 	.word	0xfeff8fff
 80099dc:	40010000 	.word	0x40010000
 80099e0:	40010400 	.word	0x40010400
 80099e4:	40014000 	.word	0x40014000
 80099e8:	40014400 	.word	0x40014400
 80099ec:	40014800 	.word	0x40014800

080099f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b087      	sub	sp, #28
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6a1b      	ldr	r3, [r3, #32]
 80099fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6a1b      	ldr	r3, [r3, #32]
 8009a0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	69db      	ldr	r3, [r3, #28]
 8009a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009a18:	68fa      	ldr	r2, [r7, #12]
 8009a1a:	4b33      	ldr	r3, [pc, #204]	; (8009ae8 <TIM_OC3_SetConfig+0xf8>)
 8009a1c:	4013      	ands	r3, r2
 8009a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f023 0303 	bic.w	r3, r3, #3
 8009a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	68fa      	ldr	r2, [r7, #12]
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	689b      	ldr	r3, [r3, #8]
 8009a3e:	021b      	lsls	r3, r3, #8
 8009a40:	697a      	ldr	r2, [r7, #20]
 8009a42:	4313      	orrs	r3, r2
 8009a44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	4a28      	ldr	r2, [pc, #160]	; (8009aec <TIM_OC3_SetConfig+0xfc>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d003      	beq.n	8009a56 <TIM_OC3_SetConfig+0x66>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	4a27      	ldr	r2, [pc, #156]	; (8009af0 <TIM_OC3_SetConfig+0x100>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d10d      	bne.n	8009a72 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009a5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	68db      	ldr	r3, [r3, #12]
 8009a62:	021b      	lsls	r3, r3, #8
 8009a64:	697a      	ldr	r2, [r7, #20]
 8009a66:	4313      	orrs	r3, r2
 8009a68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4a1d      	ldr	r2, [pc, #116]	; (8009aec <TIM_OC3_SetConfig+0xfc>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d00f      	beq.n	8009a9a <TIM_OC3_SetConfig+0xaa>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	4a1c      	ldr	r2, [pc, #112]	; (8009af0 <TIM_OC3_SetConfig+0x100>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d00b      	beq.n	8009a9a <TIM_OC3_SetConfig+0xaa>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	4a1b      	ldr	r2, [pc, #108]	; (8009af4 <TIM_OC3_SetConfig+0x104>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d007      	beq.n	8009a9a <TIM_OC3_SetConfig+0xaa>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	4a1a      	ldr	r2, [pc, #104]	; (8009af8 <TIM_OC3_SetConfig+0x108>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d003      	beq.n	8009a9a <TIM_OC3_SetConfig+0xaa>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	4a19      	ldr	r2, [pc, #100]	; (8009afc <TIM_OC3_SetConfig+0x10c>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d113      	bne.n	8009ac2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009aa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	695b      	ldr	r3, [r3, #20]
 8009aae:	011b      	lsls	r3, r3, #4
 8009ab0:	693a      	ldr	r2, [r7, #16]
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	699b      	ldr	r3, [r3, #24]
 8009aba:	011b      	lsls	r3, r3, #4
 8009abc:	693a      	ldr	r2, [r7, #16]
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	693a      	ldr	r2, [r7, #16]
 8009ac6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	68fa      	ldr	r2, [r7, #12]
 8009acc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	685a      	ldr	r2, [r3, #4]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	697a      	ldr	r2, [r7, #20]
 8009ada:	621a      	str	r2, [r3, #32]
}
 8009adc:	bf00      	nop
 8009ade:	371c      	adds	r7, #28
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr
 8009ae8:	fffeff8f 	.word	0xfffeff8f
 8009aec:	40010000 	.word	0x40010000
 8009af0:	40010400 	.word	0x40010400
 8009af4:	40014000 	.word	0x40014000
 8009af8:	40014400 	.word	0x40014400
 8009afc:	40014800 	.word	0x40014800

08009b00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b087      	sub	sp, #28
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6a1b      	ldr	r3, [r3, #32]
 8009b0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a1b      	ldr	r3, [r3, #32]
 8009b1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	69db      	ldr	r3, [r3, #28]
 8009b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009b28:	68fa      	ldr	r2, [r7, #12]
 8009b2a:	4b24      	ldr	r3, [pc, #144]	; (8009bbc <TIM_OC4_SetConfig+0xbc>)
 8009b2c:	4013      	ands	r3, r2
 8009b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	021b      	lsls	r3, r3, #8
 8009b3e:	68fa      	ldr	r2, [r7, #12]
 8009b40:	4313      	orrs	r3, r2
 8009b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	031b      	lsls	r3, r3, #12
 8009b52:	693a      	ldr	r2, [r7, #16]
 8009b54:	4313      	orrs	r3, r2
 8009b56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	4a19      	ldr	r2, [pc, #100]	; (8009bc0 <TIM_OC4_SetConfig+0xc0>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d00f      	beq.n	8009b80 <TIM_OC4_SetConfig+0x80>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	4a18      	ldr	r2, [pc, #96]	; (8009bc4 <TIM_OC4_SetConfig+0xc4>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d00b      	beq.n	8009b80 <TIM_OC4_SetConfig+0x80>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	4a17      	ldr	r2, [pc, #92]	; (8009bc8 <TIM_OC4_SetConfig+0xc8>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d007      	beq.n	8009b80 <TIM_OC4_SetConfig+0x80>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	4a16      	ldr	r2, [pc, #88]	; (8009bcc <TIM_OC4_SetConfig+0xcc>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d003      	beq.n	8009b80 <TIM_OC4_SetConfig+0x80>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	4a15      	ldr	r2, [pc, #84]	; (8009bd0 <TIM_OC4_SetConfig+0xd0>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d109      	bne.n	8009b94 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	695b      	ldr	r3, [r3, #20]
 8009b8c:	019b      	lsls	r3, r3, #6
 8009b8e:	697a      	ldr	r2, [r7, #20]
 8009b90:	4313      	orrs	r3, r2
 8009b92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	697a      	ldr	r2, [r7, #20]
 8009b98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	68fa      	ldr	r2, [r7, #12]
 8009b9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	685a      	ldr	r2, [r3, #4]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	693a      	ldr	r2, [r7, #16]
 8009bac:	621a      	str	r2, [r3, #32]
}
 8009bae:	bf00      	nop
 8009bb0:	371c      	adds	r7, #28
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb8:	4770      	bx	lr
 8009bba:	bf00      	nop
 8009bbc:	feff8fff 	.word	0xfeff8fff
 8009bc0:	40010000 	.word	0x40010000
 8009bc4:	40010400 	.word	0x40010400
 8009bc8:	40014000 	.word	0x40014000
 8009bcc:	40014400 	.word	0x40014400
 8009bd0:	40014800 	.word	0x40014800

08009bd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b087      	sub	sp, #28
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6a1b      	ldr	r3, [r3, #32]
 8009be2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6a1b      	ldr	r3, [r3, #32]
 8009bee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009bfc:	68fa      	ldr	r2, [r7, #12]
 8009bfe:	4b21      	ldr	r3, [pc, #132]	; (8009c84 <TIM_OC5_SetConfig+0xb0>)
 8009c00:	4013      	ands	r3, r2
 8009c02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	68fa      	ldr	r2, [r7, #12]
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009c14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	689b      	ldr	r3, [r3, #8]
 8009c1a:	041b      	lsls	r3, r3, #16
 8009c1c:	693a      	ldr	r2, [r7, #16]
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	4a18      	ldr	r2, [pc, #96]	; (8009c88 <TIM_OC5_SetConfig+0xb4>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d00f      	beq.n	8009c4a <TIM_OC5_SetConfig+0x76>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	4a17      	ldr	r2, [pc, #92]	; (8009c8c <TIM_OC5_SetConfig+0xb8>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d00b      	beq.n	8009c4a <TIM_OC5_SetConfig+0x76>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	4a16      	ldr	r2, [pc, #88]	; (8009c90 <TIM_OC5_SetConfig+0xbc>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d007      	beq.n	8009c4a <TIM_OC5_SetConfig+0x76>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	4a15      	ldr	r2, [pc, #84]	; (8009c94 <TIM_OC5_SetConfig+0xc0>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d003      	beq.n	8009c4a <TIM_OC5_SetConfig+0x76>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	4a14      	ldr	r2, [pc, #80]	; (8009c98 <TIM_OC5_SetConfig+0xc4>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d109      	bne.n	8009c5e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	695b      	ldr	r3, [r3, #20]
 8009c56:	021b      	lsls	r3, r3, #8
 8009c58:	697a      	ldr	r2, [r7, #20]
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	697a      	ldr	r2, [r7, #20]
 8009c62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	68fa      	ldr	r2, [r7, #12]
 8009c68:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	685a      	ldr	r2, [r3, #4]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	693a      	ldr	r2, [r7, #16]
 8009c76:	621a      	str	r2, [r3, #32]
}
 8009c78:	bf00      	nop
 8009c7a:	371c      	adds	r7, #28
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr
 8009c84:	fffeff8f 	.word	0xfffeff8f
 8009c88:	40010000 	.word	0x40010000
 8009c8c:	40010400 	.word	0x40010400
 8009c90:	40014000 	.word	0x40014000
 8009c94:	40014400 	.word	0x40014400
 8009c98:	40014800 	.word	0x40014800

08009c9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b087      	sub	sp, #28
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6a1b      	ldr	r3, [r3, #32]
 8009caa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6a1b      	ldr	r3, [r3, #32]
 8009cb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009cc4:	68fa      	ldr	r2, [r7, #12]
 8009cc6:	4b22      	ldr	r3, [pc, #136]	; (8009d50 <TIM_OC6_SetConfig+0xb4>)
 8009cc8:	4013      	ands	r3, r2
 8009cca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	021b      	lsls	r3, r3, #8
 8009cd2:	68fa      	ldr	r2, [r7, #12]
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009cde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	689b      	ldr	r3, [r3, #8]
 8009ce4:	051b      	lsls	r3, r3, #20
 8009ce6:	693a      	ldr	r2, [r7, #16]
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	4a19      	ldr	r2, [pc, #100]	; (8009d54 <TIM_OC6_SetConfig+0xb8>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d00f      	beq.n	8009d14 <TIM_OC6_SetConfig+0x78>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	4a18      	ldr	r2, [pc, #96]	; (8009d58 <TIM_OC6_SetConfig+0xbc>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d00b      	beq.n	8009d14 <TIM_OC6_SetConfig+0x78>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	4a17      	ldr	r2, [pc, #92]	; (8009d5c <TIM_OC6_SetConfig+0xc0>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d007      	beq.n	8009d14 <TIM_OC6_SetConfig+0x78>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	4a16      	ldr	r2, [pc, #88]	; (8009d60 <TIM_OC6_SetConfig+0xc4>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d003      	beq.n	8009d14 <TIM_OC6_SetConfig+0x78>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	4a15      	ldr	r2, [pc, #84]	; (8009d64 <TIM_OC6_SetConfig+0xc8>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d109      	bne.n	8009d28 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009d1a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	695b      	ldr	r3, [r3, #20]
 8009d20:	029b      	lsls	r3, r3, #10
 8009d22:	697a      	ldr	r2, [r7, #20]
 8009d24:	4313      	orrs	r3, r2
 8009d26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	697a      	ldr	r2, [r7, #20]
 8009d2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	68fa      	ldr	r2, [r7, #12]
 8009d32:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	685a      	ldr	r2, [r3, #4]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	693a      	ldr	r2, [r7, #16]
 8009d40:	621a      	str	r2, [r3, #32]
}
 8009d42:	bf00      	nop
 8009d44:	371c      	adds	r7, #28
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr
 8009d4e:	bf00      	nop
 8009d50:	feff8fff 	.word	0xfeff8fff
 8009d54:	40010000 	.word	0x40010000
 8009d58:	40010400 	.word	0x40010400
 8009d5c:	40014000 	.word	0x40014000
 8009d60:	40014400 	.word	0x40014400
 8009d64:	40014800 	.word	0x40014800

08009d68 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b086      	sub	sp, #24
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d72:	2300      	movs	r3, #0
 8009d74:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	689b      	ldr	r3, [r3, #8]
 8009d7c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d7e:	693a      	ldr	r2, [r7, #16]
 8009d80:	4b65      	ldr	r3, [pc, #404]	; (8009f18 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8009d82:	4013      	ands	r3, r2
 8009d84:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	693a      	ldr	r2, [r7, #16]
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009d90:	693a      	ldr	r2, [r7, #16]
 8009d92:	4b62      	ldr	r3, [pc, #392]	; (8009f1c <TIM_SlaveTimer_SetConfig+0x1b4>)
 8009d94:	4013      	ands	r3, r2
 8009d96:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	693a      	ldr	r2, [r7, #16]
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	693a      	ldr	r2, [r7, #16]
 8009da8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	4a5c      	ldr	r2, [pc, #368]	; (8009f20 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	f000 80ab 	beq.w	8009f0c <TIM_SlaveTimer_SetConfig+0x1a4>
 8009db6:	4a5a      	ldr	r2, [pc, #360]	; (8009f20 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	f200 80a4 	bhi.w	8009f06 <TIM_SlaveTimer_SetConfig+0x19e>
 8009dbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009dc2:	f000 80a3 	beq.w	8009f0c <TIM_SlaveTimer_SetConfig+0x1a4>
 8009dc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009dca:	f200 809c 	bhi.w	8009f06 <TIM_SlaveTimer_SetConfig+0x19e>
 8009dce:	4a55      	ldr	r2, [pc, #340]	; (8009f24 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	f000 809b 	beq.w	8009f0c <TIM_SlaveTimer_SetConfig+0x1a4>
 8009dd6:	4a53      	ldr	r2, [pc, #332]	; (8009f24 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	f200 8094 	bhi.w	8009f06 <TIM_SlaveTimer_SetConfig+0x19e>
 8009dde:	4a52      	ldr	r2, [pc, #328]	; (8009f28 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	f000 8093 	beq.w	8009f0c <TIM_SlaveTimer_SetConfig+0x1a4>
 8009de6:	4a50      	ldr	r2, [pc, #320]	; (8009f28 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	f200 808c 	bhi.w	8009f06 <TIM_SlaveTimer_SetConfig+0x19e>
 8009dee:	4a4f      	ldr	r2, [pc, #316]	; (8009f2c <TIM_SlaveTimer_SetConfig+0x1c4>)
 8009df0:	4293      	cmp	r3, r2
 8009df2:	f000 808b 	beq.w	8009f0c <TIM_SlaveTimer_SetConfig+0x1a4>
 8009df6:	4a4d      	ldr	r2, [pc, #308]	; (8009f2c <TIM_SlaveTimer_SetConfig+0x1c4>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	f200 8084 	bhi.w	8009f06 <TIM_SlaveTimer_SetConfig+0x19e>
 8009dfe:	4a4c      	ldr	r2, [pc, #304]	; (8009f30 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	f000 8083 	beq.w	8009f0c <TIM_SlaveTimer_SetConfig+0x1a4>
 8009e06:	4a4a      	ldr	r2, [pc, #296]	; (8009f30 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d87c      	bhi.n	8009f06 <TIM_SlaveTimer_SetConfig+0x19e>
 8009e0c:	4a49      	ldr	r2, [pc, #292]	; (8009f34 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d07c      	beq.n	8009f0c <TIM_SlaveTimer_SetConfig+0x1a4>
 8009e12:	4a48      	ldr	r2, [pc, #288]	; (8009f34 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d876      	bhi.n	8009f06 <TIM_SlaveTimer_SetConfig+0x19e>
 8009e18:	4a47      	ldr	r2, [pc, #284]	; (8009f38 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d076      	beq.n	8009f0c <TIM_SlaveTimer_SetConfig+0x1a4>
 8009e1e:	4a46      	ldr	r2, [pc, #280]	; (8009f38 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d870      	bhi.n	8009f06 <TIM_SlaveTimer_SetConfig+0x19e>
 8009e24:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009e28:	d070      	beq.n	8009f0c <TIM_SlaveTimer_SetConfig+0x1a4>
 8009e2a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009e2e:	d86a      	bhi.n	8009f06 <TIM_SlaveTimer_SetConfig+0x19e>
 8009e30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e34:	d06a      	beq.n	8009f0c <TIM_SlaveTimer_SetConfig+0x1a4>
 8009e36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e3a:	d864      	bhi.n	8009f06 <TIM_SlaveTimer_SetConfig+0x19e>
 8009e3c:	2b70      	cmp	r3, #112	; 0x70
 8009e3e:	d01a      	beq.n	8009e76 <TIM_SlaveTimer_SetConfig+0x10e>
 8009e40:	2b70      	cmp	r3, #112	; 0x70
 8009e42:	d860      	bhi.n	8009f06 <TIM_SlaveTimer_SetConfig+0x19e>
 8009e44:	2b60      	cmp	r3, #96	; 0x60
 8009e46:	d054      	beq.n	8009ef2 <TIM_SlaveTimer_SetConfig+0x18a>
 8009e48:	2b60      	cmp	r3, #96	; 0x60
 8009e4a:	d85c      	bhi.n	8009f06 <TIM_SlaveTimer_SetConfig+0x19e>
 8009e4c:	2b50      	cmp	r3, #80	; 0x50
 8009e4e:	d046      	beq.n	8009ede <TIM_SlaveTimer_SetConfig+0x176>
 8009e50:	2b50      	cmp	r3, #80	; 0x50
 8009e52:	d858      	bhi.n	8009f06 <TIM_SlaveTimer_SetConfig+0x19e>
 8009e54:	2b40      	cmp	r3, #64	; 0x40
 8009e56:	d019      	beq.n	8009e8c <TIM_SlaveTimer_SetConfig+0x124>
 8009e58:	2b40      	cmp	r3, #64	; 0x40
 8009e5a:	d854      	bhi.n	8009f06 <TIM_SlaveTimer_SetConfig+0x19e>
 8009e5c:	2b30      	cmp	r3, #48	; 0x30
 8009e5e:	d055      	beq.n	8009f0c <TIM_SlaveTimer_SetConfig+0x1a4>
 8009e60:	2b30      	cmp	r3, #48	; 0x30
 8009e62:	d850      	bhi.n	8009f06 <TIM_SlaveTimer_SetConfig+0x19e>
 8009e64:	2b20      	cmp	r3, #32
 8009e66:	d051      	beq.n	8009f0c <TIM_SlaveTimer_SetConfig+0x1a4>
 8009e68:	2b20      	cmp	r3, #32
 8009e6a:	d84c      	bhi.n	8009f06 <TIM_SlaveTimer_SetConfig+0x19e>
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d04d      	beq.n	8009f0c <TIM_SlaveTimer_SetConfig+0x1a4>
 8009e70:	2b10      	cmp	r3, #16
 8009e72:	d04b      	beq.n	8009f0c <TIM_SlaveTimer_SetConfig+0x1a4>
 8009e74:	e047      	b.n	8009f06 <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8009e86:	f000 fa01 	bl	800a28c <TIM_ETR_SetConfig>
      break;
 8009e8a:	e040      	b.n	8009f0e <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	2b05      	cmp	r3, #5
 8009e92:	d101      	bne.n	8009e98 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 8009e94:	2301      	movs	r3, #1
 8009e96:	e03b      	b.n	8009f10 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	6a1b      	ldr	r3, [r3, #32]
 8009e9e:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	6a1a      	ldr	r2, [r3, #32]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f022 0201 	bic.w	r2, r2, #1
 8009eae:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	699b      	ldr	r3, [r3, #24]
 8009eb6:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ebe:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	691b      	ldr	r3, [r3, #16]
 8009ec4:	011b      	lsls	r3, r3, #4
 8009ec6:	68ba      	ldr	r2, [r7, #8]
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	68ba      	ldr	r2, [r7, #8]
 8009ed2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	68fa      	ldr	r2, [r7, #12]
 8009eda:	621a      	str	r2, [r3, #32]
      break;
 8009edc:	e017      	b.n	8009f0e <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009eea:	461a      	mov	r2, r3
 8009eec:	f000 f89a 	bl	800a024 <TIM_TI1_ConfigInputStage>
      break;
 8009ef0:	e00d      	b.n	8009f0e <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009efe:	461a      	mov	r2, r3
 8009f00:	f000 f8fc 	bl	800a0fc <TIM_TI2_ConfigInputStage>
      break;
 8009f04:	e003      	b.n	8009f0e <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8009f06:	2301      	movs	r3, #1
 8009f08:	75fb      	strb	r3, [r7, #23]
      break;
 8009f0a:	e000      	b.n	8009f0e <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 8009f0c:	bf00      	nop
  }

  return status;
 8009f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3718      	adds	r7, #24
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}
 8009f18:	ffcfff8f 	.word	0xffcfff8f
 8009f1c:	fffefff8 	.word	0xfffefff8
 8009f20:	00200010 	.word	0x00200010
 8009f24:	00100070 	.word	0x00100070
 8009f28:	00100060 	.word	0x00100060
 8009f2c:	00100050 	.word	0x00100050
 8009f30:	00100040 	.word	0x00100040
 8009f34:	00100030 	.word	0x00100030
 8009f38:	00100020 	.word	0x00100020

08009f3c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b087      	sub	sp, #28
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	60f8      	str	r0, [r7, #12]
 8009f44:	60b9      	str	r1, [r7, #8]
 8009f46:	607a      	str	r2, [r7, #4]
 8009f48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	6a1b      	ldr	r3, [r3, #32]
 8009f4e:	f023 0201 	bic.w	r2, r3, #1
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	699b      	ldr	r3, [r3, #24]
 8009f5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	6a1b      	ldr	r3, [r3, #32]
 8009f60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	4a28      	ldr	r2, [pc, #160]	; (800a008 <TIM_TI1_SetConfig+0xcc>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d01b      	beq.n	8009fa2 <TIM_TI1_SetConfig+0x66>
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f70:	d017      	beq.n	8009fa2 <TIM_TI1_SetConfig+0x66>
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	4a25      	ldr	r2, [pc, #148]	; (800a00c <TIM_TI1_SetConfig+0xd0>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d013      	beq.n	8009fa2 <TIM_TI1_SetConfig+0x66>
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	4a24      	ldr	r2, [pc, #144]	; (800a010 <TIM_TI1_SetConfig+0xd4>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d00f      	beq.n	8009fa2 <TIM_TI1_SetConfig+0x66>
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	4a23      	ldr	r2, [pc, #140]	; (800a014 <TIM_TI1_SetConfig+0xd8>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d00b      	beq.n	8009fa2 <TIM_TI1_SetConfig+0x66>
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	4a22      	ldr	r2, [pc, #136]	; (800a018 <TIM_TI1_SetConfig+0xdc>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d007      	beq.n	8009fa2 <TIM_TI1_SetConfig+0x66>
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	4a21      	ldr	r2, [pc, #132]	; (800a01c <TIM_TI1_SetConfig+0xe0>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d003      	beq.n	8009fa2 <TIM_TI1_SetConfig+0x66>
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	4a20      	ldr	r2, [pc, #128]	; (800a020 <TIM_TI1_SetConfig+0xe4>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d101      	bne.n	8009fa6 <TIM_TI1_SetConfig+0x6a>
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	e000      	b.n	8009fa8 <TIM_TI1_SetConfig+0x6c>
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d008      	beq.n	8009fbe <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	f023 0303 	bic.w	r3, r3, #3
 8009fb2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009fb4:	697a      	ldr	r2, [r7, #20]
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	4313      	orrs	r3, r2
 8009fba:	617b      	str	r3, [r7, #20]
 8009fbc:	e003      	b.n	8009fc6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	f043 0301 	orr.w	r3, r3, #1
 8009fc4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009fcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	011b      	lsls	r3, r3, #4
 8009fd2:	b2db      	uxtb	r3, r3
 8009fd4:	697a      	ldr	r2, [r7, #20]
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	f023 030a 	bic.w	r3, r3, #10
 8009fe0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	f003 030a 	and.w	r3, r3, #10
 8009fe8:	693a      	ldr	r2, [r7, #16]
 8009fea:	4313      	orrs	r3, r2
 8009fec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	697a      	ldr	r2, [r7, #20]
 8009ff2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	693a      	ldr	r2, [r7, #16]
 8009ff8:	621a      	str	r2, [r3, #32]
}
 8009ffa:	bf00      	nop
 8009ffc:	371c      	adds	r7, #28
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr
 800a006:	bf00      	nop
 800a008:	40010000 	.word	0x40010000
 800a00c:	40000400 	.word	0x40000400
 800a010:	40000800 	.word	0x40000800
 800a014:	40000c00 	.word	0x40000c00
 800a018:	40010400 	.word	0x40010400
 800a01c:	40001800 	.word	0x40001800
 800a020:	40014000 	.word	0x40014000

0800a024 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a024:	b480      	push	{r7}
 800a026:	b087      	sub	sp, #28
 800a028:	af00      	add	r7, sp, #0
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	60b9      	str	r1, [r7, #8]
 800a02e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	6a1b      	ldr	r3, [r3, #32]
 800a034:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	6a1b      	ldr	r3, [r3, #32]
 800a03a:	f023 0201 	bic.w	r2, r3, #1
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	699b      	ldr	r3, [r3, #24]
 800a046:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a04e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	011b      	lsls	r3, r3, #4
 800a054:	693a      	ldr	r2, [r7, #16]
 800a056:	4313      	orrs	r3, r2
 800a058:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	f023 030a 	bic.w	r3, r3, #10
 800a060:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a062:	697a      	ldr	r2, [r7, #20]
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	4313      	orrs	r3, r2
 800a068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	693a      	ldr	r2, [r7, #16]
 800a06e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	697a      	ldr	r2, [r7, #20]
 800a074:	621a      	str	r2, [r3, #32]
}
 800a076:	bf00      	nop
 800a078:	371c      	adds	r7, #28
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr

0800a082 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a082:	b480      	push	{r7}
 800a084:	b087      	sub	sp, #28
 800a086:	af00      	add	r7, sp, #0
 800a088:	60f8      	str	r0, [r7, #12]
 800a08a:	60b9      	str	r1, [r7, #8]
 800a08c:	607a      	str	r2, [r7, #4]
 800a08e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	6a1b      	ldr	r3, [r3, #32]
 800a094:	f023 0210 	bic.w	r2, r3, #16
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	699b      	ldr	r3, [r3, #24]
 800a0a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	6a1b      	ldr	r3, [r3, #32]
 800a0a6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	021b      	lsls	r3, r3, #8
 800a0b4:	697a      	ldr	r2, [r7, #20]
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a0c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	031b      	lsls	r3, r3, #12
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	697a      	ldr	r2, [r7, #20]
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a0d4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	011b      	lsls	r3, r3, #4
 800a0da:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a0de:	693a      	ldr	r2, [r7, #16]
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	697a      	ldr	r2, [r7, #20]
 800a0e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	693a      	ldr	r2, [r7, #16]
 800a0ee:	621a      	str	r2, [r3, #32]
}
 800a0f0:	bf00      	nop
 800a0f2:	371c      	adds	r7, #28
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b087      	sub	sp, #28
 800a100:	af00      	add	r7, sp, #0
 800a102:	60f8      	str	r0, [r7, #12]
 800a104:	60b9      	str	r1, [r7, #8]
 800a106:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	6a1b      	ldr	r3, [r3, #32]
 800a10c:	f023 0210 	bic.w	r2, r3, #16
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	699b      	ldr	r3, [r3, #24]
 800a118:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	6a1b      	ldr	r3, [r3, #32]
 800a11e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a126:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	031b      	lsls	r3, r3, #12
 800a12c:	697a      	ldr	r2, [r7, #20]
 800a12e:	4313      	orrs	r3, r2
 800a130:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a138:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	011b      	lsls	r3, r3, #4
 800a13e:	693a      	ldr	r2, [r7, #16]
 800a140:	4313      	orrs	r3, r2
 800a142:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	697a      	ldr	r2, [r7, #20]
 800a148:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	693a      	ldr	r2, [r7, #16]
 800a14e:	621a      	str	r2, [r3, #32]
}
 800a150:	bf00      	nop
 800a152:	371c      	adds	r7, #28
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr

0800a15c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b087      	sub	sp, #28
 800a160:	af00      	add	r7, sp, #0
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	607a      	str	r2, [r7, #4]
 800a168:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	6a1b      	ldr	r3, [r3, #32]
 800a16e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	69db      	ldr	r3, [r3, #28]
 800a17a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	6a1b      	ldr	r3, [r3, #32]
 800a180:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	f023 0303 	bic.w	r3, r3, #3
 800a188:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a18a:	697a      	ldr	r2, [r7, #20]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	4313      	orrs	r3, r2
 800a190:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a198:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	011b      	lsls	r3, r3, #4
 800a19e:	b2db      	uxtb	r3, r3
 800a1a0:	697a      	ldr	r2, [r7, #20]
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a1ac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	021b      	lsls	r3, r3, #8
 800a1b2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a1b6:	693a      	ldr	r2, [r7, #16]
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	697a      	ldr	r2, [r7, #20]
 800a1c0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	693a      	ldr	r2, [r7, #16]
 800a1c6:	621a      	str	r2, [r3, #32]
}
 800a1c8:	bf00      	nop
 800a1ca:	371c      	adds	r7, #28
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b087      	sub	sp, #28
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	60f8      	str	r0, [r7, #12]
 800a1dc:	60b9      	str	r1, [r7, #8]
 800a1de:	607a      	str	r2, [r7, #4]
 800a1e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	6a1b      	ldr	r3, [r3, #32]
 800a1e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	69db      	ldr	r3, [r3, #28]
 800a1f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	6a1b      	ldr	r3, [r3, #32]
 800a1f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a200:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	021b      	lsls	r3, r3, #8
 800a206:	697a      	ldr	r2, [r7, #20]
 800a208:	4313      	orrs	r3, r2
 800a20a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a212:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	031b      	lsls	r3, r3, #12
 800a218:	b29b      	uxth	r3, r3
 800a21a:	697a      	ldr	r2, [r7, #20]
 800a21c:	4313      	orrs	r3, r2
 800a21e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a226:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	031b      	lsls	r3, r3, #12
 800a22c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a230:	693a      	ldr	r2, [r7, #16]
 800a232:	4313      	orrs	r3, r2
 800a234:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	697a      	ldr	r2, [r7, #20]
 800a23a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	693a      	ldr	r2, [r7, #16]
 800a240:	621a      	str	r2, [r3, #32]
}
 800a242:	bf00      	nop
 800a244:	371c      	adds	r7, #28
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr
	...

0800a250 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a250:	b480      	push	{r7}
 800a252:	b085      	sub	sp, #20
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	689b      	ldr	r3, [r3, #8]
 800a25e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a260:	68fa      	ldr	r2, [r7, #12]
 800a262:	4b09      	ldr	r3, [pc, #36]	; (800a288 <TIM_ITRx_SetConfig+0x38>)
 800a264:	4013      	ands	r3, r2
 800a266:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a268:	683a      	ldr	r2, [r7, #0]
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	4313      	orrs	r3, r2
 800a26e:	f043 0307 	orr.w	r3, r3, #7
 800a272:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	68fa      	ldr	r2, [r7, #12]
 800a278:	609a      	str	r2, [r3, #8]
}
 800a27a:	bf00      	nop
 800a27c:	3714      	adds	r7, #20
 800a27e:	46bd      	mov	sp, r7
 800a280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a284:	4770      	bx	lr
 800a286:	bf00      	nop
 800a288:	ffcfff8f 	.word	0xffcfff8f

0800a28c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b087      	sub	sp, #28
 800a290:	af00      	add	r7, sp, #0
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	60b9      	str	r1, [r7, #8]
 800a296:	607a      	str	r2, [r7, #4]
 800a298:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	689b      	ldr	r3, [r3, #8]
 800a29e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a2a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	021a      	lsls	r2, r3, #8
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	431a      	orrs	r2, r3
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	697a      	ldr	r2, [r7, #20]
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	697a      	ldr	r2, [r7, #20]
 800a2be:	609a      	str	r2, [r3, #8]
}
 800a2c0:	bf00      	nop
 800a2c2:	371c      	adds	r7, #28
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr

0800a2cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b085      	sub	sp, #20
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d101      	bne.n	800a2e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a2e0:	2302      	movs	r3, #2
 800a2e2:	e06d      	b.n	800a3c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2202      	movs	r2, #2
 800a2f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	689b      	ldr	r3, [r3, #8]
 800a302:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	4a30      	ldr	r2, [pc, #192]	; (800a3cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d004      	beq.n	800a318 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	4a2f      	ldr	r2, [pc, #188]	; (800a3d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a314:	4293      	cmp	r3, r2
 800a316:	d108      	bne.n	800a32a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a31e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	68fa      	ldr	r2, [r7, #12]
 800a326:	4313      	orrs	r3, r2
 800a328:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a330:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	68fa      	ldr	r2, [r7, #12]
 800a338:	4313      	orrs	r3, r2
 800a33a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	68fa      	ldr	r2, [r7, #12]
 800a342:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a20      	ldr	r2, [pc, #128]	; (800a3cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d022      	beq.n	800a394 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a356:	d01d      	beq.n	800a394 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a1d      	ldr	r2, [pc, #116]	; (800a3d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d018      	beq.n	800a394 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a1c      	ldr	r2, [pc, #112]	; (800a3d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d013      	beq.n	800a394 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a1a      	ldr	r2, [pc, #104]	; (800a3dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d00e      	beq.n	800a394 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4a15      	ldr	r2, [pc, #84]	; (800a3d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d009      	beq.n	800a394 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a16      	ldr	r2, [pc, #88]	; (800a3e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d004      	beq.n	800a394 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a15      	ldr	r2, [pc, #84]	; (800a3e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d10c      	bne.n	800a3ae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a39a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	689b      	ldr	r3, [r3, #8]
 800a3a0:	68ba      	ldr	r2, [r7, #8]
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	68ba      	ldr	r2, [r7, #8]
 800a3ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a3be:	2300      	movs	r3, #0
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3714      	adds	r7, #20
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ca:	4770      	bx	lr
 800a3cc:	40010000 	.word	0x40010000
 800a3d0:	40010400 	.word	0x40010400
 800a3d4:	40000400 	.word	0x40000400
 800a3d8:	40000800 	.word	0x40000800
 800a3dc:	40000c00 	.word	0x40000c00
 800a3e0:	40001800 	.word	0x40001800
 800a3e4:	40014000 	.word	0x40014000

0800a3e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b082      	sub	sp, #8
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d101      	bne.n	800a3fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	e042      	b.n	800a480 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a400:	2b00      	cmp	r3, #0
 800a402:	d106      	bne.n	800a412 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2200      	movs	r2, #0
 800a408:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f7f7 f931 	bl	8001674 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2224      	movs	r2, #36	; 0x24
 800a416:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	681a      	ldr	r2, [r3, #0]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f022 0201 	bic.w	r2, r2, #1
 800a428:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f000 f82c 	bl	800a488 <UART_SetConfig>
 800a430:	4603      	mov	r3, r0
 800a432:	2b01      	cmp	r3, #1
 800a434:	d101      	bne.n	800a43a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a436:	2301      	movs	r3, #1
 800a438:	e022      	b.n	800a480 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d002      	beq.n	800a448 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f000 fd88 	bl	800af58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	685a      	ldr	r2, [r3, #4]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a456:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	689a      	ldr	r2, [r3, #8]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a466:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	681a      	ldr	r2, [r3, #0]
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f042 0201 	orr.w	r2, r2, #1
 800a476:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f000 fe0f 	bl	800b09c <UART_CheckIdleState>
 800a47e:	4603      	mov	r3, r0
}
 800a480:	4618      	mov	r0, r3
 800a482:	3708      	adds	r7, #8
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a48c:	b092      	sub	sp, #72	; 0x48
 800a48e:	af00      	add	r7, sp, #0
 800a490:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a492:	2300      	movs	r3, #0
 800a494:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	689a      	ldr	r2, [r3, #8]
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	691b      	ldr	r3, [r3, #16]
 800a4a0:	431a      	orrs	r2, r3
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	695b      	ldr	r3, [r3, #20]
 800a4a6:	431a      	orrs	r2, r3
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	69db      	ldr	r3, [r3, #28]
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	4bbe      	ldr	r3, [pc, #760]	; (800a7b0 <UART_SetConfig+0x328>)
 800a4b8:	4013      	ands	r3, r2
 800a4ba:	697a      	ldr	r2, [r7, #20]
 800a4bc:	6812      	ldr	r2, [r2, #0]
 800a4be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a4c0:	430b      	orrs	r3, r1
 800a4c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	68da      	ldr	r2, [r3, #12]
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	430a      	orrs	r2, r1
 800a4d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	699b      	ldr	r3, [r3, #24]
 800a4de:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4ab3      	ldr	r2, [pc, #716]	; (800a7b4 <UART_SetConfig+0x32c>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d004      	beq.n	800a4f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	6a1b      	ldr	r3, [r3, #32]
 800a4ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	689a      	ldr	r2, [r3, #8]
 800a4fa:	4baf      	ldr	r3, [pc, #700]	; (800a7b8 <UART_SetConfig+0x330>)
 800a4fc:	4013      	ands	r3, r2
 800a4fe:	697a      	ldr	r2, [r7, #20]
 800a500:	6812      	ldr	r2, [r2, #0]
 800a502:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a504:	430b      	orrs	r3, r1
 800a506:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a50e:	f023 010f 	bic.w	r1, r3, #15
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	430a      	orrs	r2, r1
 800a51c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	4aa6      	ldr	r2, [pc, #664]	; (800a7bc <UART_SetConfig+0x334>)
 800a524:	4293      	cmp	r3, r2
 800a526:	d177      	bne.n	800a618 <UART_SetConfig+0x190>
 800a528:	4ba5      	ldr	r3, [pc, #660]	; (800a7c0 <UART_SetConfig+0x338>)
 800a52a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a52c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a530:	2b28      	cmp	r3, #40	; 0x28
 800a532:	d86d      	bhi.n	800a610 <UART_SetConfig+0x188>
 800a534:	a201      	add	r2, pc, #4	; (adr r2, 800a53c <UART_SetConfig+0xb4>)
 800a536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a53a:	bf00      	nop
 800a53c:	0800a5e1 	.word	0x0800a5e1
 800a540:	0800a611 	.word	0x0800a611
 800a544:	0800a611 	.word	0x0800a611
 800a548:	0800a611 	.word	0x0800a611
 800a54c:	0800a611 	.word	0x0800a611
 800a550:	0800a611 	.word	0x0800a611
 800a554:	0800a611 	.word	0x0800a611
 800a558:	0800a611 	.word	0x0800a611
 800a55c:	0800a5e9 	.word	0x0800a5e9
 800a560:	0800a611 	.word	0x0800a611
 800a564:	0800a611 	.word	0x0800a611
 800a568:	0800a611 	.word	0x0800a611
 800a56c:	0800a611 	.word	0x0800a611
 800a570:	0800a611 	.word	0x0800a611
 800a574:	0800a611 	.word	0x0800a611
 800a578:	0800a611 	.word	0x0800a611
 800a57c:	0800a5f1 	.word	0x0800a5f1
 800a580:	0800a611 	.word	0x0800a611
 800a584:	0800a611 	.word	0x0800a611
 800a588:	0800a611 	.word	0x0800a611
 800a58c:	0800a611 	.word	0x0800a611
 800a590:	0800a611 	.word	0x0800a611
 800a594:	0800a611 	.word	0x0800a611
 800a598:	0800a611 	.word	0x0800a611
 800a59c:	0800a5f9 	.word	0x0800a5f9
 800a5a0:	0800a611 	.word	0x0800a611
 800a5a4:	0800a611 	.word	0x0800a611
 800a5a8:	0800a611 	.word	0x0800a611
 800a5ac:	0800a611 	.word	0x0800a611
 800a5b0:	0800a611 	.word	0x0800a611
 800a5b4:	0800a611 	.word	0x0800a611
 800a5b8:	0800a611 	.word	0x0800a611
 800a5bc:	0800a601 	.word	0x0800a601
 800a5c0:	0800a611 	.word	0x0800a611
 800a5c4:	0800a611 	.word	0x0800a611
 800a5c8:	0800a611 	.word	0x0800a611
 800a5cc:	0800a611 	.word	0x0800a611
 800a5d0:	0800a611 	.word	0x0800a611
 800a5d4:	0800a611 	.word	0x0800a611
 800a5d8:	0800a611 	.word	0x0800a611
 800a5dc:	0800a609 	.word	0x0800a609
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5e6:	e222      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a5e8:	2304      	movs	r3, #4
 800a5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5ee:	e21e      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a5f0:	2308      	movs	r3, #8
 800a5f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5f6:	e21a      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a5f8:	2310      	movs	r3, #16
 800a5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5fe:	e216      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a600:	2320      	movs	r3, #32
 800a602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a606:	e212      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a608:	2340      	movs	r3, #64	; 0x40
 800a60a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a60e:	e20e      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a610:	2380      	movs	r3, #128	; 0x80
 800a612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a616:	e20a      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	4a69      	ldr	r2, [pc, #420]	; (800a7c4 <UART_SetConfig+0x33c>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d130      	bne.n	800a684 <UART_SetConfig+0x1fc>
 800a622:	4b67      	ldr	r3, [pc, #412]	; (800a7c0 <UART_SetConfig+0x338>)
 800a624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a626:	f003 0307 	and.w	r3, r3, #7
 800a62a:	2b05      	cmp	r3, #5
 800a62c:	d826      	bhi.n	800a67c <UART_SetConfig+0x1f4>
 800a62e:	a201      	add	r2, pc, #4	; (adr r2, 800a634 <UART_SetConfig+0x1ac>)
 800a630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a634:	0800a64d 	.word	0x0800a64d
 800a638:	0800a655 	.word	0x0800a655
 800a63c:	0800a65d 	.word	0x0800a65d
 800a640:	0800a665 	.word	0x0800a665
 800a644:	0800a66d 	.word	0x0800a66d
 800a648:	0800a675 	.word	0x0800a675
 800a64c:	2300      	movs	r3, #0
 800a64e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a652:	e1ec      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a654:	2304      	movs	r3, #4
 800a656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a65a:	e1e8      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a65c:	2308      	movs	r3, #8
 800a65e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a662:	e1e4      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a664:	2310      	movs	r3, #16
 800a666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a66a:	e1e0      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a66c:	2320      	movs	r3, #32
 800a66e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a672:	e1dc      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a674:	2340      	movs	r3, #64	; 0x40
 800a676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a67a:	e1d8      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a67c:	2380      	movs	r3, #128	; 0x80
 800a67e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a682:	e1d4      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a4f      	ldr	r2, [pc, #316]	; (800a7c8 <UART_SetConfig+0x340>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d130      	bne.n	800a6f0 <UART_SetConfig+0x268>
 800a68e:	4b4c      	ldr	r3, [pc, #304]	; (800a7c0 <UART_SetConfig+0x338>)
 800a690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a692:	f003 0307 	and.w	r3, r3, #7
 800a696:	2b05      	cmp	r3, #5
 800a698:	d826      	bhi.n	800a6e8 <UART_SetConfig+0x260>
 800a69a:	a201      	add	r2, pc, #4	; (adr r2, 800a6a0 <UART_SetConfig+0x218>)
 800a69c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6a0:	0800a6b9 	.word	0x0800a6b9
 800a6a4:	0800a6c1 	.word	0x0800a6c1
 800a6a8:	0800a6c9 	.word	0x0800a6c9
 800a6ac:	0800a6d1 	.word	0x0800a6d1
 800a6b0:	0800a6d9 	.word	0x0800a6d9
 800a6b4:	0800a6e1 	.word	0x0800a6e1
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6be:	e1b6      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a6c0:	2304      	movs	r3, #4
 800a6c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6c6:	e1b2      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a6c8:	2308      	movs	r3, #8
 800a6ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6ce:	e1ae      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a6d0:	2310      	movs	r3, #16
 800a6d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6d6:	e1aa      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a6d8:	2320      	movs	r3, #32
 800a6da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6de:	e1a6      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a6e0:	2340      	movs	r3, #64	; 0x40
 800a6e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6e6:	e1a2      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a6e8:	2380      	movs	r3, #128	; 0x80
 800a6ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6ee:	e19e      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	4a35      	ldr	r2, [pc, #212]	; (800a7cc <UART_SetConfig+0x344>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d130      	bne.n	800a75c <UART_SetConfig+0x2d4>
 800a6fa:	4b31      	ldr	r3, [pc, #196]	; (800a7c0 <UART_SetConfig+0x338>)
 800a6fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6fe:	f003 0307 	and.w	r3, r3, #7
 800a702:	2b05      	cmp	r3, #5
 800a704:	d826      	bhi.n	800a754 <UART_SetConfig+0x2cc>
 800a706:	a201      	add	r2, pc, #4	; (adr r2, 800a70c <UART_SetConfig+0x284>)
 800a708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a70c:	0800a725 	.word	0x0800a725
 800a710:	0800a72d 	.word	0x0800a72d
 800a714:	0800a735 	.word	0x0800a735
 800a718:	0800a73d 	.word	0x0800a73d
 800a71c:	0800a745 	.word	0x0800a745
 800a720:	0800a74d 	.word	0x0800a74d
 800a724:	2300      	movs	r3, #0
 800a726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a72a:	e180      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a72c:	2304      	movs	r3, #4
 800a72e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a732:	e17c      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a734:	2308      	movs	r3, #8
 800a736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a73a:	e178      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a73c:	2310      	movs	r3, #16
 800a73e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a742:	e174      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a744:	2320      	movs	r3, #32
 800a746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a74a:	e170      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a74c:	2340      	movs	r3, #64	; 0x40
 800a74e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a752:	e16c      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a754:	2380      	movs	r3, #128	; 0x80
 800a756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a75a:	e168      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	4a1b      	ldr	r2, [pc, #108]	; (800a7d0 <UART_SetConfig+0x348>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d142      	bne.n	800a7ec <UART_SetConfig+0x364>
 800a766:	4b16      	ldr	r3, [pc, #88]	; (800a7c0 <UART_SetConfig+0x338>)
 800a768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a76a:	f003 0307 	and.w	r3, r3, #7
 800a76e:	2b05      	cmp	r3, #5
 800a770:	d838      	bhi.n	800a7e4 <UART_SetConfig+0x35c>
 800a772:	a201      	add	r2, pc, #4	; (adr r2, 800a778 <UART_SetConfig+0x2f0>)
 800a774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a778:	0800a791 	.word	0x0800a791
 800a77c:	0800a799 	.word	0x0800a799
 800a780:	0800a7a1 	.word	0x0800a7a1
 800a784:	0800a7a9 	.word	0x0800a7a9
 800a788:	0800a7d5 	.word	0x0800a7d5
 800a78c:	0800a7dd 	.word	0x0800a7dd
 800a790:	2300      	movs	r3, #0
 800a792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a796:	e14a      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a798:	2304      	movs	r3, #4
 800a79a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a79e:	e146      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a7a0:	2308      	movs	r3, #8
 800a7a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7a6:	e142      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a7a8:	2310      	movs	r3, #16
 800a7aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7ae:	e13e      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a7b0:	cfff69f3 	.word	0xcfff69f3
 800a7b4:	58000c00 	.word	0x58000c00
 800a7b8:	11fff4ff 	.word	0x11fff4ff
 800a7bc:	40011000 	.word	0x40011000
 800a7c0:	58024400 	.word	0x58024400
 800a7c4:	40004400 	.word	0x40004400
 800a7c8:	40004800 	.word	0x40004800
 800a7cc:	40004c00 	.word	0x40004c00
 800a7d0:	40005000 	.word	0x40005000
 800a7d4:	2320      	movs	r3, #32
 800a7d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7da:	e128      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a7dc:	2340      	movs	r3, #64	; 0x40
 800a7de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7e2:	e124      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a7e4:	2380      	movs	r3, #128	; 0x80
 800a7e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7ea:	e120      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4acb      	ldr	r2, [pc, #812]	; (800ab20 <UART_SetConfig+0x698>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d176      	bne.n	800a8e4 <UART_SetConfig+0x45c>
 800a7f6:	4bcb      	ldr	r3, [pc, #812]	; (800ab24 <UART_SetConfig+0x69c>)
 800a7f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a7fe:	2b28      	cmp	r3, #40	; 0x28
 800a800:	d86c      	bhi.n	800a8dc <UART_SetConfig+0x454>
 800a802:	a201      	add	r2, pc, #4	; (adr r2, 800a808 <UART_SetConfig+0x380>)
 800a804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a808:	0800a8ad 	.word	0x0800a8ad
 800a80c:	0800a8dd 	.word	0x0800a8dd
 800a810:	0800a8dd 	.word	0x0800a8dd
 800a814:	0800a8dd 	.word	0x0800a8dd
 800a818:	0800a8dd 	.word	0x0800a8dd
 800a81c:	0800a8dd 	.word	0x0800a8dd
 800a820:	0800a8dd 	.word	0x0800a8dd
 800a824:	0800a8dd 	.word	0x0800a8dd
 800a828:	0800a8b5 	.word	0x0800a8b5
 800a82c:	0800a8dd 	.word	0x0800a8dd
 800a830:	0800a8dd 	.word	0x0800a8dd
 800a834:	0800a8dd 	.word	0x0800a8dd
 800a838:	0800a8dd 	.word	0x0800a8dd
 800a83c:	0800a8dd 	.word	0x0800a8dd
 800a840:	0800a8dd 	.word	0x0800a8dd
 800a844:	0800a8dd 	.word	0x0800a8dd
 800a848:	0800a8bd 	.word	0x0800a8bd
 800a84c:	0800a8dd 	.word	0x0800a8dd
 800a850:	0800a8dd 	.word	0x0800a8dd
 800a854:	0800a8dd 	.word	0x0800a8dd
 800a858:	0800a8dd 	.word	0x0800a8dd
 800a85c:	0800a8dd 	.word	0x0800a8dd
 800a860:	0800a8dd 	.word	0x0800a8dd
 800a864:	0800a8dd 	.word	0x0800a8dd
 800a868:	0800a8c5 	.word	0x0800a8c5
 800a86c:	0800a8dd 	.word	0x0800a8dd
 800a870:	0800a8dd 	.word	0x0800a8dd
 800a874:	0800a8dd 	.word	0x0800a8dd
 800a878:	0800a8dd 	.word	0x0800a8dd
 800a87c:	0800a8dd 	.word	0x0800a8dd
 800a880:	0800a8dd 	.word	0x0800a8dd
 800a884:	0800a8dd 	.word	0x0800a8dd
 800a888:	0800a8cd 	.word	0x0800a8cd
 800a88c:	0800a8dd 	.word	0x0800a8dd
 800a890:	0800a8dd 	.word	0x0800a8dd
 800a894:	0800a8dd 	.word	0x0800a8dd
 800a898:	0800a8dd 	.word	0x0800a8dd
 800a89c:	0800a8dd 	.word	0x0800a8dd
 800a8a0:	0800a8dd 	.word	0x0800a8dd
 800a8a4:	0800a8dd 	.word	0x0800a8dd
 800a8a8:	0800a8d5 	.word	0x0800a8d5
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8b2:	e0bc      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a8b4:	2304      	movs	r3, #4
 800a8b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8ba:	e0b8      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a8bc:	2308      	movs	r3, #8
 800a8be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8c2:	e0b4      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a8c4:	2310      	movs	r3, #16
 800a8c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8ca:	e0b0      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a8cc:	2320      	movs	r3, #32
 800a8ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8d2:	e0ac      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a8d4:	2340      	movs	r3, #64	; 0x40
 800a8d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8da:	e0a8      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a8dc:	2380      	movs	r3, #128	; 0x80
 800a8de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8e2:	e0a4      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	4a8f      	ldr	r2, [pc, #572]	; (800ab28 <UART_SetConfig+0x6a0>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d130      	bne.n	800a950 <UART_SetConfig+0x4c8>
 800a8ee:	4b8d      	ldr	r3, [pc, #564]	; (800ab24 <UART_SetConfig+0x69c>)
 800a8f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8f2:	f003 0307 	and.w	r3, r3, #7
 800a8f6:	2b05      	cmp	r3, #5
 800a8f8:	d826      	bhi.n	800a948 <UART_SetConfig+0x4c0>
 800a8fa:	a201      	add	r2, pc, #4	; (adr r2, 800a900 <UART_SetConfig+0x478>)
 800a8fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a900:	0800a919 	.word	0x0800a919
 800a904:	0800a921 	.word	0x0800a921
 800a908:	0800a929 	.word	0x0800a929
 800a90c:	0800a931 	.word	0x0800a931
 800a910:	0800a939 	.word	0x0800a939
 800a914:	0800a941 	.word	0x0800a941
 800a918:	2300      	movs	r3, #0
 800a91a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a91e:	e086      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a920:	2304      	movs	r3, #4
 800a922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a926:	e082      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a928:	2308      	movs	r3, #8
 800a92a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a92e:	e07e      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a930:	2310      	movs	r3, #16
 800a932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a936:	e07a      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a938:	2320      	movs	r3, #32
 800a93a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a93e:	e076      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a940:	2340      	movs	r3, #64	; 0x40
 800a942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a946:	e072      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a948:	2380      	movs	r3, #128	; 0x80
 800a94a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a94e:	e06e      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4a75      	ldr	r2, [pc, #468]	; (800ab2c <UART_SetConfig+0x6a4>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d130      	bne.n	800a9bc <UART_SetConfig+0x534>
 800a95a:	4b72      	ldr	r3, [pc, #456]	; (800ab24 <UART_SetConfig+0x69c>)
 800a95c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a95e:	f003 0307 	and.w	r3, r3, #7
 800a962:	2b05      	cmp	r3, #5
 800a964:	d826      	bhi.n	800a9b4 <UART_SetConfig+0x52c>
 800a966:	a201      	add	r2, pc, #4	; (adr r2, 800a96c <UART_SetConfig+0x4e4>)
 800a968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a96c:	0800a985 	.word	0x0800a985
 800a970:	0800a98d 	.word	0x0800a98d
 800a974:	0800a995 	.word	0x0800a995
 800a978:	0800a99d 	.word	0x0800a99d
 800a97c:	0800a9a5 	.word	0x0800a9a5
 800a980:	0800a9ad 	.word	0x0800a9ad
 800a984:	2300      	movs	r3, #0
 800a986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a98a:	e050      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a98c:	2304      	movs	r3, #4
 800a98e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a992:	e04c      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a994:	2308      	movs	r3, #8
 800a996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a99a:	e048      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a99c:	2310      	movs	r3, #16
 800a99e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9a2:	e044      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a9a4:	2320      	movs	r3, #32
 800a9a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9aa:	e040      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a9ac:	2340      	movs	r3, #64	; 0x40
 800a9ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9b2:	e03c      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a9b4:	2380      	movs	r3, #128	; 0x80
 800a9b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9ba:	e038      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4a5b      	ldr	r2, [pc, #364]	; (800ab30 <UART_SetConfig+0x6a8>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d130      	bne.n	800aa28 <UART_SetConfig+0x5a0>
 800a9c6:	4b57      	ldr	r3, [pc, #348]	; (800ab24 <UART_SetConfig+0x69c>)
 800a9c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9ca:	f003 0307 	and.w	r3, r3, #7
 800a9ce:	2b05      	cmp	r3, #5
 800a9d0:	d826      	bhi.n	800aa20 <UART_SetConfig+0x598>
 800a9d2:	a201      	add	r2, pc, #4	; (adr r2, 800a9d8 <UART_SetConfig+0x550>)
 800a9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9d8:	0800a9f1 	.word	0x0800a9f1
 800a9dc:	0800a9f9 	.word	0x0800a9f9
 800a9e0:	0800aa01 	.word	0x0800aa01
 800a9e4:	0800aa09 	.word	0x0800aa09
 800a9e8:	0800aa11 	.word	0x0800aa11
 800a9ec:	0800aa19 	.word	0x0800aa19
 800a9f0:	2302      	movs	r3, #2
 800a9f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9f6:	e01a      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800a9f8:	2304      	movs	r3, #4
 800a9fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9fe:	e016      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800aa00:	2308      	movs	r3, #8
 800aa02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa06:	e012      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800aa08:	2310      	movs	r3, #16
 800aa0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa0e:	e00e      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800aa10:	2320      	movs	r3, #32
 800aa12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa16:	e00a      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800aa18:	2340      	movs	r3, #64	; 0x40
 800aa1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa1e:	e006      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800aa20:	2380      	movs	r3, #128	; 0x80
 800aa22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa26:	e002      	b.n	800aa2e <UART_SetConfig+0x5a6>
 800aa28:	2380      	movs	r3, #128	; 0x80
 800aa2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	4a3f      	ldr	r2, [pc, #252]	; (800ab30 <UART_SetConfig+0x6a8>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	f040 80f8 	bne.w	800ac2a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aa3a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800aa3e:	2b20      	cmp	r3, #32
 800aa40:	dc46      	bgt.n	800aad0 <UART_SetConfig+0x648>
 800aa42:	2b02      	cmp	r3, #2
 800aa44:	f2c0 8082 	blt.w	800ab4c <UART_SetConfig+0x6c4>
 800aa48:	3b02      	subs	r3, #2
 800aa4a:	2b1e      	cmp	r3, #30
 800aa4c:	d87e      	bhi.n	800ab4c <UART_SetConfig+0x6c4>
 800aa4e:	a201      	add	r2, pc, #4	; (adr r2, 800aa54 <UART_SetConfig+0x5cc>)
 800aa50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa54:	0800aad7 	.word	0x0800aad7
 800aa58:	0800ab4d 	.word	0x0800ab4d
 800aa5c:	0800aadf 	.word	0x0800aadf
 800aa60:	0800ab4d 	.word	0x0800ab4d
 800aa64:	0800ab4d 	.word	0x0800ab4d
 800aa68:	0800ab4d 	.word	0x0800ab4d
 800aa6c:	0800aaef 	.word	0x0800aaef
 800aa70:	0800ab4d 	.word	0x0800ab4d
 800aa74:	0800ab4d 	.word	0x0800ab4d
 800aa78:	0800ab4d 	.word	0x0800ab4d
 800aa7c:	0800ab4d 	.word	0x0800ab4d
 800aa80:	0800ab4d 	.word	0x0800ab4d
 800aa84:	0800ab4d 	.word	0x0800ab4d
 800aa88:	0800ab4d 	.word	0x0800ab4d
 800aa8c:	0800aaff 	.word	0x0800aaff
 800aa90:	0800ab4d 	.word	0x0800ab4d
 800aa94:	0800ab4d 	.word	0x0800ab4d
 800aa98:	0800ab4d 	.word	0x0800ab4d
 800aa9c:	0800ab4d 	.word	0x0800ab4d
 800aaa0:	0800ab4d 	.word	0x0800ab4d
 800aaa4:	0800ab4d 	.word	0x0800ab4d
 800aaa8:	0800ab4d 	.word	0x0800ab4d
 800aaac:	0800ab4d 	.word	0x0800ab4d
 800aab0:	0800ab4d 	.word	0x0800ab4d
 800aab4:	0800ab4d 	.word	0x0800ab4d
 800aab8:	0800ab4d 	.word	0x0800ab4d
 800aabc:	0800ab4d 	.word	0x0800ab4d
 800aac0:	0800ab4d 	.word	0x0800ab4d
 800aac4:	0800ab4d 	.word	0x0800ab4d
 800aac8:	0800ab4d 	.word	0x0800ab4d
 800aacc:	0800ab3f 	.word	0x0800ab3f
 800aad0:	2b40      	cmp	r3, #64	; 0x40
 800aad2:	d037      	beq.n	800ab44 <UART_SetConfig+0x6bc>
 800aad4:	e03a      	b.n	800ab4c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800aad6:	f7fc fac7 	bl	8007068 <HAL_RCCEx_GetD3PCLK1Freq>
 800aada:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aadc:	e03c      	b.n	800ab58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aae2:	4618      	mov	r0, r3
 800aae4:	f7fc fad6 	bl	8007094 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aaec:	e034      	b.n	800ab58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aaee:	f107 0318 	add.w	r3, r7, #24
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f7fc fc22 	bl	800733c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aaf8:	69fb      	ldr	r3, [r7, #28]
 800aafa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aafc:	e02c      	b.n	800ab58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aafe:	4b09      	ldr	r3, [pc, #36]	; (800ab24 <UART_SetConfig+0x69c>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f003 0320 	and.w	r3, r3, #32
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d016      	beq.n	800ab38 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ab0a:	4b06      	ldr	r3, [pc, #24]	; (800ab24 <UART_SetConfig+0x69c>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	08db      	lsrs	r3, r3, #3
 800ab10:	f003 0303 	and.w	r3, r3, #3
 800ab14:	4a07      	ldr	r2, [pc, #28]	; (800ab34 <UART_SetConfig+0x6ac>)
 800ab16:	fa22 f303 	lsr.w	r3, r2, r3
 800ab1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ab1c:	e01c      	b.n	800ab58 <UART_SetConfig+0x6d0>
 800ab1e:	bf00      	nop
 800ab20:	40011400 	.word	0x40011400
 800ab24:	58024400 	.word	0x58024400
 800ab28:	40007800 	.word	0x40007800
 800ab2c:	40007c00 	.word	0x40007c00
 800ab30:	58000c00 	.word	0x58000c00
 800ab34:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ab38:	4b9d      	ldr	r3, [pc, #628]	; (800adb0 <UART_SetConfig+0x928>)
 800ab3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab3c:	e00c      	b.n	800ab58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ab3e:	4b9d      	ldr	r3, [pc, #628]	; (800adb4 <UART_SetConfig+0x92c>)
 800ab40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab42:	e009      	b.n	800ab58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab4a:	e005      	b.n	800ab58 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ab50:	2301      	movs	r3, #1
 800ab52:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ab56:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ab58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	f000 81de 	beq.w	800af1c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab64:	4a94      	ldr	r2, [pc, #592]	; (800adb8 <UART_SetConfig+0x930>)
 800ab66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab6e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab72:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	685a      	ldr	r2, [r3, #4]
 800ab78:	4613      	mov	r3, r2
 800ab7a:	005b      	lsls	r3, r3, #1
 800ab7c:	4413      	add	r3, r2
 800ab7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d305      	bcc.n	800ab90 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ab8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d903      	bls.n	800ab98 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ab90:	2301      	movs	r3, #1
 800ab92:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ab96:	e1c1      	b.n	800af1c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	60bb      	str	r3, [r7, #8]
 800ab9e:	60fa      	str	r2, [r7, #12]
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba4:	4a84      	ldr	r2, [pc, #528]	; (800adb8 <UART_SetConfig+0x930>)
 800aba6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abaa:	b29b      	uxth	r3, r3
 800abac:	2200      	movs	r2, #0
 800abae:	603b      	str	r3, [r7, #0]
 800abb0:	607a      	str	r2, [r7, #4]
 800abb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800abba:	f7f5 fb8d 	bl	80002d8 <__aeabi_uldivmod>
 800abbe:	4602      	mov	r2, r0
 800abc0:	460b      	mov	r3, r1
 800abc2:	4610      	mov	r0, r2
 800abc4:	4619      	mov	r1, r3
 800abc6:	f04f 0200 	mov.w	r2, #0
 800abca:	f04f 0300 	mov.w	r3, #0
 800abce:	020b      	lsls	r3, r1, #8
 800abd0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800abd4:	0202      	lsls	r2, r0, #8
 800abd6:	6979      	ldr	r1, [r7, #20]
 800abd8:	6849      	ldr	r1, [r1, #4]
 800abda:	0849      	lsrs	r1, r1, #1
 800abdc:	2000      	movs	r0, #0
 800abde:	460c      	mov	r4, r1
 800abe0:	4605      	mov	r5, r0
 800abe2:	eb12 0804 	adds.w	r8, r2, r4
 800abe6:	eb43 0905 	adc.w	r9, r3, r5
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	2200      	movs	r2, #0
 800abf0:	469a      	mov	sl, r3
 800abf2:	4693      	mov	fp, r2
 800abf4:	4652      	mov	r2, sl
 800abf6:	465b      	mov	r3, fp
 800abf8:	4640      	mov	r0, r8
 800abfa:	4649      	mov	r1, r9
 800abfc:	f7f5 fb6c 	bl	80002d8 <__aeabi_uldivmod>
 800ac00:	4602      	mov	r2, r0
 800ac02:	460b      	mov	r3, r1
 800ac04:	4613      	mov	r3, r2
 800ac06:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ac08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac0e:	d308      	bcc.n	800ac22 <UART_SetConfig+0x79a>
 800ac10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac16:	d204      	bcs.n	800ac22 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac1e:	60da      	str	r2, [r3, #12]
 800ac20:	e17c      	b.n	800af1c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ac22:	2301      	movs	r3, #1
 800ac24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ac28:	e178      	b.n	800af1c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	69db      	ldr	r3, [r3, #28]
 800ac2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac32:	f040 80c5 	bne.w	800adc0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ac36:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ac3a:	2b20      	cmp	r3, #32
 800ac3c:	dc48      	bgt.n	800acd0 <UART_SetConfig+0x848>
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	db7b      	blt.n	800ad3a <UART_SetConfig+0x8b2>
 800ac42:	2b20      	cmp	r3, #32
 800ac44:	d879      	bhi.n	800ad3a <UART_SetConfig+0x8b2>
 800ac46:	a201      	add	r2, pc, #4	; (adr r2, 800ac4c <UART_SetConfig+0x7c4>)
 800ac48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac4c:	0800acd7 	.word	0x0800acd7
 800ac50:	0800acdf 	.word	0x0800acdf
 800ac54:	0800ad3b 	.word	0x0800ad3b
 800ac58:	0800ad3b 	.word	0x0800ad3b
 800ac5c:	0800ace7 	.word	0x0800ace7
 800ac60:	0800ad3b 	.word	0x0800ad3b
 800ac64:	0800ad3b 	.word	0x0800ad3b
 800ac68:	0800ad3b 	.word	0x0800ad3b
 800ac6c:	0800acf7 	.word	0x0800acf7
 800ac70:	0800ad3b 	.word	0x0800ad3b
 800ac74:	0800ad3b 	.word	0x0800ad3b
 800ac78:	0800ad3b 	.word	0x0800ad3b
 800ac7c:	0800ad3b 	.word	0x0800ad3b
 800ac80:	0800ad3b 	.word	0x0800ad3b
 800ac84:	0800ad3b 	.word	0x0800ad3b
 800ac88:	0800ad3b 	.word	0x0800ad3b
 800ac8c:	0800ad07 	.word	0x0800ad07
 800ac90:	0800ad3b 	.word	0x0800ad3b
 800ac94:	0800ad3b 	.word	0x0800ad3b
 800ac98:	0800ad3b 	.word	0x0800ad3b
 800ac9c:	0800ad3b 	.word	0x0800ad3b
 800aca0:	0800ad3b 	.word	0x0800ad3b
 800aca4:	0800ad3b 	.word	0x0800ad3b
 800aca8:	0800ad3b 	.word	0x0800ad3b
 800acac:	0800ad3b 	.word	0x0800ad3b
 800acb0:	0800ad3b 	.word	0x0800ad3b
 800acb4:	0800ad3b 	.word	0x0800ad3b
 800acb8:	0800ad3b 	.word	0x0800ad3b
 800acbc:	0800ad3b 	.word	0x0800ad3b
 800acc0:	0800ad3b 	.word	0x0800ad3b
 800acc4:	0800ad3b 	.word	0x0800ad3b
 800acc8:	0800ad3b 	.word	0x0800ad3b
 800accc:	0800ad2d 	.word	0x0800ad2d
 800acd0:	2b40      	cmp	r3, #64	; 0x40
 800acd2:	d02e      	beq.n	800ad32 <UART_SetConfig+0x8aa>
 800acd4:	e031      	b.n	800ad3a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800acd6:	f7fa fa11 	bl	80050fc <HAL_RCC_GetPCLK1Freq>
 800acda:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800acdc:	e033      	b.n	800ad46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800acde:	f7fa fa23 	bl	8005128 <HAL_RCC_GetPCLK2Freq>
 800ace2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ace4:	e02f      	b.n	800ad46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ace6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800acea:	4618      	mov	r0, r3
 800acec:	f7fc f9d2 	bl	8007094 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800acf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acf4:	e027      	b.n	800ad46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acf6:	f107 0318 	add.w	r3, r7, #24
 800acfa:	4618      	mov	r0, r3
 800acfc:	f7fc fb1e 	bl	800733c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ad00:	69fb      	ldr	r3, [r7, #28]
 800ad02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad04:	e01f      	b.n	800ad46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad06:	4b2d      	ldr	r3, [pc, #180]	; (800adbc <UART_SetConfig+0x934>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f003 0320 	and.w	r3, r3, #32
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d009      	beq.n	800ad26 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ad12:	4b2a      	ldr	r3, [pc, #168]	; (800adbc <UART_SetConfig+0x934>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	08db      	lsrs	r3, r3, #3
 800ad18:	f003 0303 	and.w	r3, r3, #3
 800ad1c:	4a24      	ldr	r2, [pc, #144]	; (800adb0 <UART_SetConfig+0x928>)
 800ad1e:	fa22 f303 	lsr.w	r3, r2, r3
 800ad22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ad24:	e00f      	b.n	800ad46 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ad26:	4b22      	ldr	r3, [pc, #136]	; (800adb0 <UART_SetConfig+0x928>)
 800ad28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad2a:	e00c      	b.n	800ad46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ad2c:	4b21      	ldr	r3, [pc, #132]	; (800adb4 <UART_SetConfig+0x92c>)
 800ad2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad30:	e009      	b.n	800ad46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad38:	e005      	b.n	800ad46 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ad3e:	2301      	movs	r3, #1
 800ad40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ad44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ad46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	f000 80e7 	beq.w	800af1c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad52:	4a19      	ldr	r2, [pc, #100]	; (800adb8 <UART_SetConfig+0x930>)
 800ad54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad58:	461a      	mov	r2, r3
 800ad5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad5c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad60:	005a      	lsls	r2, r3, #1
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	685b      	ldr	r3, [r3, #4]
 800ad66:	085b      	lsrs	r3, r3, #1
 800ad68:	441a      	add	r2, r3
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad72:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad76:	2b0f      	cmp	r3, #15
 800ad78:	d916      	bls.n	800ada8 <UART_SetConfig+0x920>
 800ad7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad80:	d212      	bcs.n	800ada8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ad82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad84:	b29b      	uxth	r3, r3
 800ad86:	f023 030f 	bic.w	r3, r3, #15
 800ad8a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ad8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad8e:	085b      	lsrs	r3, r3, #1
 800ad90:	b29b      	uxth	r3, r3
 800ad92:	f003 0307 	and.w	r3, r3, #7
 800ad96:	b29a      	uxth	r2, r3
 800ad98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ada4:	60da      	str	r2, [r3, #12]
 800ada6:	e0b9      	b.n	800af1c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ada8:	2301      	movs	r3, #1
 800adaa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800adae:	e0b5      	b.n	800af1c <UART_SetConfig+0xa94>
 800adb0:	03d09000 	.word	0x03d09000
 800adb4:	003d0900 	.word	0x003d0900
 800adb8:	0800c604 	.word	0x0800c604
 800adbc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800adc0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800adc4:	2b20      	cmp	r3, #32
 800adc6:	dc49      	bgt.n	800ae5c <UART_SetConfig+0x9d4>
 800adc8:	2b00      	cmp	r3, #0
 800adca:	db7c      	blt.n	800aec6 <UART_SetConfig+0xa3e>
 800adcc:	2b20      	cmp	r3, #32
 800adce:	d87a      	bhi.n	800aec6 <UART_SetConfig+0xa3e>
 800add0:	a201      	add	r2, pc, #4	; (adr r2, 800add8 <UART_SetConfig+0x950>)
 800add2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add6:	bf00      	nop
 800add8:	0800ae63 	.word	0x0800ae63
 800addc:	0800ae6b 	.word	0x0800ae6b
 800ade0:	0800aec7 	.word	0x0800aec7
 800ade4:	0800aec7 	.word	0x0800aec7
 800ade8:	0800ae73 	.word	0x0800ae73
 800adec:	0800aec7 	.word	0x0800aec7
 800adf0:	0800aec7 	.word	0x0800aec7
 800adf4:	0800aec7 	.word	0x0800aec7
 800adf8:	0800ae83 	.word	0x0800ae83
 800adfc:	0800aec7 	.word	0x0800aec7
 800ae00:	0800aec7 	.word	0x0800aec7
 800ae04:	0800aec7 	.word	0x0800aec7
 800ae08:	0800aec7 	.word	0x0800aec7
 800ae0c:	0800aec7 	.word	0x0800aec7
 800ae10:	0800aec7 	.word	0x0800aec7
 800ae14:	0800aec7 	.word	0x0800aec7
 800ae18:	0800ae93 	.word	0x0800ae93
 800ae1c:	0800aec7 	.word	0x0800aec7
 800ae20:	0800aec7 	.word	0x0800aec7
 800ae24:	0800aec7 	.word	0x0800aec7
 800ae28:	0800aec7 	.word	0x0800aec7
 800ae2c:	0800aec7 	.word	0x0800aec7
 800ae30:	0800aec7 	.word	0x0800aec7
 800ae34:	0800aec7 	.word	0x0800aec7
 800ae38:	0800aec7 	.word	0x0800aec7
 800ae3c:	0800aec7 	.word	0x0800aec7
 800ae40:	0800aec7 	.word	0x0800aec7
 800ae44:	0800aec7 	.word	0x0800aec7
 800ae48:	0800aec7 	.word	0x0800aec7
 800ae4c:	0800aec7 	.word	0x0800aec7
 800ae50:	0800aec7 	.word	0x0800aec7
 800ae54:	0800aec7 	.word	0x0800aec7
 800ae58:	0800aeb9 	.word	0x0800aeb9
 800ae5c:	2b40      	cmp	r3, #64	; 0x40
 800ae5e:	d02e      	beq.n	800aebe <UART_SetConfig+0xa36>
 800ae60:	e031      	b.n	800aec6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae62:	f7fa f94b 	bl	80050fc <HAL_RCC_GetPCLK1Freq>
 800ae66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ae68:	e033      	b.n	800aed2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae6a:	f7fa f95d 	bl	8005128 <HAL_RCC_GetPCLK2Freq>
 800ae6e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ae70:	e02f      	b.n	800aed2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae76:	4618      	mov	r0, r3
 800ae78:	f7fc f90c 	bl	8007094 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ae7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae80:	e027      	b.n	800aed2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae82:	f107 0318 	add.w	r3, r7, #24
 800ae86:	4618      	mov	r0, r3
 800ae88:	f7fc fa58 	bl	800733c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ae8c:	69fb      	ldr	r3, [r7, #28]
 800ae8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae90:	e01f      	b.n	800aed2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae92:	4b2d      	ldr	r3, [pc, #180]	; (800af48 <UART_SetConfig+0xac0>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f003 0320 	and.w	r3, r3, #32
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d009      	beq.n	800aeb2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ae9e:	4b2a      	ldr	r3, [pc, #168]	; (800af48 <UART_SetConfig+0xac0>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	08db      	lsrs	r3, r3, #3
 800aea4:	f003 0303 	and.w	r3, r3, #3
 800aea8:	4a28      	ldr	r2, [pc, #160]	; (800af4c <UART_SetConfig+0xac4>)
 800aeaa:	fa22 f303 	lsr.w	r3, r2, r3
 800aeae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aeb0:	e00f      	b.n	800aed2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800aeb2:	4b26      	ldr	r3, [pc, #152]	; (800af4c <UART_SetConfig+0xac4>)
 800aeb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aeb6:	e00c      	b.n	800aed2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aeb8:	4b25      	ldr	r3, [pc, #148]	; (800af50 <UART_SetConfig+0xac8>)
 800aeba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aebc:	e009      	b.n	800aed2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aec4:	e005      	b.n	800aed2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800aec6:	2300      	movs	r3, #0
 800aec8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800aeca:	2301      	movs	r3, #1
 800aecc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800aed0:	bf00      	nop
    }

    if (pclk != 0U)
 800aed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d021      	beq.n	800af1c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aedc:	4a1d      	ldr	r2, [pc, #116]	; (800af54 <UART_SetConfig+0xacc>)
 800aede:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aee2:	461a      	mov	r2, r3
 800aee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aee6:	fbb3 f2f2 	udiv	r2, r3, r2
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	685b      	ldr	r3, [r3, #4]
 800aeee:	085b      	lsrs	r3, r3, #1
 800aef0:	441a      	add	r2, r3
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	685b      	ldr	r3, [r3, #4]
 800aef6:	fbb2 f3f3 	udiv	r3, r2, r3
 800aefa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aefc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aefe:	2b0f      	cmp	r3, #15
 800af00:	d909      	bls.n	800af16 <UART_SetConfig+0xa8e>
 800af02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af08:	d205      	bcs.n	800af16 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800af0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af0c:	b29a      	uxth	r2, r3
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	60da      	str	r2, [r3, #12]
 800af14:	e002      	b.n	800af1c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800af16:	2301      	movs	r3, #1
 800af18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	2201      	movs	r2, #1
 800af20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	2201      	movs	r2, #1
 800af28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	2200      	movs	r2, #0
 800af30:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	2200      	movs	r2, #0
 800af36:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800af38:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3748      	adds	r7, #72	; 0x48
 800af40:	46bd      	mov	sp, r7
 800af42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800af46:	bf00      	nop
 800af48:	58024400 	.word	0x58024400
 800af4c:	03d09000 	.word	0x03d09000
 800af50:	003d0900 	.word	0x003d0900
 800af54:	0800c604 	.word	0x0800c604

0800af58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800af58:	b480      	push	{r7}
 800af5a:	b083      	sub	sp, #12
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af64:	f003 0301 	and.w	r3, r3, #1
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d00a      	beq.n	800af82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	685b      	ldr	r3, [r3, #4]
 800af72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	430a      	orrs	r2, r1
 800af80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af86:	f003 0302 	and.w	r3, r3, #2
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d00a      	beq.n	800afa4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	430a      	orrs	r2, r1
 800afa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afa8:	f003 0304 	and.w	r3, r3, #4
 800afac:	2b00      	cmp	r3, #0
 800afae:	d00a      	beq.n	800afc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	685b      	ldr	r3, [r3, #4]
 800afb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	430a      	orrs	r2, r1
 800afc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afca:	f003 0308 	and.w	r3, r3, #8
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d00a      	beq.n	800afe8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	685b      	ldr	r3, [r3, #4]
 800afd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	430a      	orrs	r2, r1
 800afe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afec:	f003 0310 	and.w	r3, r3, #16
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d00a      	beq.n	800b00a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	689b      	ldr	r3, [r3, #8]
 800affa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	430a      	orrs	r2, r1
 800b008:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b00e:	f003 0320 	and.w	r3, r3, #32
 800b012:	2b00      	cmp	r3, #0
 800b014:	d00a      	beq.n	800b02c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	689b      	ldr	r3, [r3, #8]
 800b01c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	430a      	orrs	r2, r1
 800b02a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b034:	2b00      	cmp	r3, #0
 800b036:	d01a      	beq.n	800b06e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	430a      	orrs	r2, r1
 800b04c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b052:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b056:	d10a      	bne.n	800b06e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	430a      	orrs	r2, r1
 800b06c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b076:	2b00      	cmp	r3, #0
 800b078:	d00a      	beq.n	800b090 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	430a      	orrs	r2, r1
 800b08e:	605a      	str	r2, [r3, #4]
  }
}
 800b090:	bf00      	nop
 800b092:	370c      	adds	r7, #12
 800b094:	46bd      	mov	sp, r7
 800b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09a:	4770      	bx	lr

0800b09c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b098      	sub	sp, #96	; 0x60
 800b0a0:	af02      	add	r7, sp, #8
 800b0a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b0ac:	f7f7 f95c 	bl	8002368 <HAL_GetTick>
 800b0b0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f003 0308 	and.w	r3, r3, #8
 800b0bc:	2b08      	cmp	r3, #8
 800b0be:	d12f      	bne.n	800b120 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b0c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b0c4:	9300      	str	r3, [sp, #0]
 800b0c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 f88e 	bl	800b1f0 <UART_WaitOnFlagUntilTimeout>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d022      	beq.n	800b120 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e2:	e853 3f00 	ldrex	r3, [r3]
 800b0e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b0e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0ee:	653b      	str	r3, [r7, #80]	; 0x50
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	461a      	mov	r2, r3
 800b0f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0f8:	647b      	str	r3, [r7, #68]	; 0x44
 800b0fa:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b0fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b100:	e841 2300 	strex	r3, r2, [r1]
 800b104:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d1e6      	bne.n	800b0da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2220      	movs	r2, #32
 800b110:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2200      	movs	r2, #0
 800b118:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b11c:	2303      	movs	r3, #3
 800b11e:	e063      	b.n	800b1e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f003 0304 	and.w	r3, r3, #4
 800b12a:	2b04      	cmp	r3, #4
 800b12c:	d149      	bne.n	800b1c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b12e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b132:	9300      	str	r3, [sp, #0]
 800b134:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b136:	2200      	movs	r2, #0
 800b138:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f000 f857 	bl	800b1f0 <UART_WaitOnFlagUntilTimeout>
 800b142:	4603      	mov	r3, r0
 800b144:	2b00      	cmp	r3, #0
 800b146:	d03c      	beq.n	800b1c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b150:	e853 3f00 	ldrex	r3, [r3]
 800b154:	623b      	str	r3, [r7, #32]
   return(result);
 800b156:	6a3b      	ldr	r3, [r7, #32]
 800b158:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b15c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	461a      	mov	r2, r3
 800b164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b166:	633b      	str	r3, [r7, #48]	; 0x30
 800b168:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b16a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b16c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b16e:	e841 2300 	strex	r3, r2, [r1]
 800b172:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b176:	2b00      	cmp	r3, #0
 800b178:	d1e6      	bne.n	800b148 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	3308      	adds	r3, #8
 800b180:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	e853 3f00 	ldrex	r3, [r3]
 800b188:	60fb      	str	r3, [r7, #12]
   return(result);
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	f023 0301 	bic.w	r3, r3, #1
 800b190:	64bb      	str	r3, [r7, #72]	; 0x48
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	3308      	adds	r3, #8
 800b198:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b19a:	61fa      	str	r2, [r7, #28]
 800b19c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b19e:	69b9      	ldr	r1, [r7, #24]
 800b1a0:	69fa      	ldr	r2, [r7, #28]
 800b1a2:	e841 2300 	strex	r3, r2, [r1]
 800b1a6:	617b      	str	r3, [r7, #20]
   return(result);
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d1e5      	bne.n	800b17a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2220      	movs	r2, #32
 800b1b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b1be:	2303      	movs	r3, #3
 800b1c0:	e012      	b.n	800b1e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2220      	movs	r2, #32
 800b1c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2220      	movs	r2, #32
 800b1ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b1e6:	2300      	movs	r3, #0
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3758      	adds	r7, #88	; 0x58
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	60f8      	str	r0, [r7, #12]
 800b1f8:	60b9      	str	r1, [r7, #8]
 800b1fa:	603b      	str	r3, [r7, #0]
 800b1fc:	4613      	mov	r3, r2
 800b1fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b200:	e049      	b.n	800b296 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b202:	69bb      	ldr	r3, [r7, #24]
 800b204:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b208:	d045      	beq.n	800b296 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b20a:	f7f7 f8ad 	bl	8002368 <HAL_GetTick>
 800b20e:	4602      	mov	r2, r0
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	1ad3      	subs	r3, r2, r3
 800b214:	69ba      	ldr	r2, [r7, #24]
 800b216:	429a      	cmp	r2, r3
 800b218:	d302      	bcc.n	800b220 <UART_WaitOnFlagUntilTimeout+0x30>
 800b21a:	69bb      	ldr	r3, [r7, #24]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d101      	bne.n	800b224 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b220:	2303      	movs	r3, #3
 800b222:	e048      	b.n	800b2b6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f003 0304 	and.w	r3, r3, #4
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d031      	beq.n	800b296 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	69db      	ldr	r3, [r3, #28]
 800b238:	f003 0308 	and.w	r3, r3, #8
 800b23c:	2b08      	cmp	r3, #8
 800b23e:	d110      	bne.n	800b262 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	2208      	movs	r2, #8
 800b246:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800b248:	68f8      	ldr	r0, [r7, #12]
 800b24a:	f000 f839 	bl	800b2c0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2208      	movs	r2, #8
 800b252:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	2200      	movs	r2, #0
 800b25a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800b25e:	2301      	movs	r3, #1
 800b260:	e029      	b.n	800b2b6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	69db      	ldr	r3, [r3, #28]
 800b268:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b26c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b270:	d111      	bne.n	800b296 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b27a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b27c:	68f8      	ldr	r0, [r7, #12]
 800b27e:	f000 f81f 	bl	800b2c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	2220      	movs	r2, #32
 800b286:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	2200      	movs	r2, #0
 800b28e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b292:	2303      	movs	r3, #3
 800b294:	e00f      	b.n	800b2b6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	69da      	ldr	r2, [r3, #28]
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	4013      	ands	r3, r2
 800b2a0:	68ba      	ldr	r2, [r7, #8]
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	bf0c      	ite	eq
 800b2a6:	2301      	moveq	r3, #1
 800b2a8:	2300      	movne	r3, #0
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	461a      	mov	r2, r3
 800b2ae:	79fb      	ldrb	r3, [r7, #7]
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d0a6      	beq.n	800b202 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b2b4:	2300      	movs	r3, #0
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3710      	adds	r7, #16
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
	...

0800b2c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b095      	sub	sp, #84	; 0x54
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2d0:	e853 3f00 	ldrex	r3, [r3]
 800b2d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b2dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	461a      	mov	r2, r3
 800b2e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2e6:	643b      	str	r3, [r7, #64]	; 0x40
 800b2e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b2ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b2ee:	e841 2300 	strex	r3, r2, [r1]
 800b2f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d1e6      	bne.n	800b2c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	3308      	adds	r3, #8
 800b300:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b302:	6a3b      	ldr	r3, [r7, #32]
 800b304:	e853 3f00 	ldrex	r3, [r3]
 800b308:	61fb      	str	r3, [r7, #28]
   return(result);
 800b30a:	69fa      	ldr	r2, [r7, #28]
 800b30c:	4b1e      	ldr	r3, [pc, #120]	; (800b388 <UART_EndRxTransfer+0xc8>)
 800b30e:	4013      	ands	r3, r2
 800b310:	64bb      	str	r3, [r7, #72]	; 0x48
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	3308      	adds	r3, #8
 800b318:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b31a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b31c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b31e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b320:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b322:	e841 2300 	strex	r3, r2, [r1]
 800b326:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d1e5      	bne.n	800b2fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b332:	2b01      	cmp	r3, #1
 800b334:	d118      	bne.n	800b368 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	e853 3f00 	ldrex	r3, [r3]
 800b342:	60bb      	str	r3, [r7, #8]
   return(result);
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	f023 0310 	bic.w	r3, r3, #16
 800b34a:	647b      	str	r3, [r7, #68]	; 0x44
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	461a      	mov	r2, r3
 800b352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b354:	61bb      	str	r3, [r7, #24]
 800b356:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b358:	6979      	ldr	r1, [r7, #20]
 800b35a:	69ba      	ldr	r2, [r7, #24]
 800b35c:	e841 2300 	strex	r3, r2, [r1]
 800b360:	613b      	str	r3, [r7, #16]
   return(result);
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d1e6      	bne.n	800b336 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2220      	movs	r2, #32
 800b36c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2200      	movs	r2, #0
 800b374:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2200      	movs	r2, #0
 800b37a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b37c:	bf00      	nop
 800b37e:	3754      	adds	r7, #84	; 0x54
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr
 800b388:	effffffe 	.word	0xeffffffe

0800b38c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b085      	sub	sp, #20
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b39a:	2b01      	cmp	r3, #1
 800b39c:	d101      	bne.n	800b3a2 <HAL_UARTEx_DisableFifoMode+0x16>
 800b39e:	2302      	movs	r3, #2
 800b3a0:	e027      	b.n	800b3f2 <HAL_UARTEx_DisableFifoMode+0x66>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2201      	movs	r2, #1
 800b3a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2224      	movs	r2, #36	; 0x24
 800b3ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	681a      	ldr	r2, [r3, #0]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f022 0201 	bic.w	r2, r2, #1
 800b3c8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b3d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	68fa      	ldr	r2, [r7, #12]
 800b3de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2220      	movs	r2, #32
 800b3e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b3f0:	2300      	movs	r3, #0
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3714      	adds	r7, #20
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fc:	4770      	bx	lr

0800b3fe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b3fe:	b580      	push	{r7, lr}
 800b400:	b084      	sub	sp, #16
 800b402:	af00      	add	r7, sp, #0
 800b404:	6078      	str	r0, [r7, #4]
 800b406:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b40e:	2b01      	cmp	r3, #1
 800b410:	d101      	bne.n	800b416 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b412:	2302      	movs	r3, #2
 800b414:	e02d      	b.n	800b472 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2201      	movs	r2, #1
 800b41a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2224      	movs	r2, #36	; 0x24
 800b422:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	681a      	ldr	r2, [r3, #0]
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f022 0201 	bic.w	r2, r2, #1
 800b43c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	689b      	ldr	r3, [r3, #8]
 800b444:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	683a      	ldr	r2, [r7, #0]
 800b44e:	430a      	orrs	r2, r1
 800b450:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f000 f850 	bl	800b4f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	68fa      	ldr	r2, [r7, #12]
 800b45e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2220      	movs	r2, #32
 800b464:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2200      	movs	r2, #0
 800b46c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b470:	2300      	movs	r3, #0
}
 800b472:	4618      	mov	r0, r3
 800b474:	3710      	adds	r7, #16
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}

0800b47a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b47a:	b580      	push	{r7, lr}
 800b47c:	b084      	sub	sp, #16
 800b47e:	af00      	add	r7, sp, #0
 800b480:	6078      	str	r0, [r7, #4]
 800b482:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b48a:	2b01      	cmp	r3, #1
 800b48c:	d101      	bne.n	800b492 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b48e:	2302      	movs	r3, #2
 800b490:	e02d      	b.n	800b4ee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2201      	movs	r2, #1
 800b496:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2224      	movs	r2, #36	; 0x24
 800b49e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	681a      	ldr	r2, [r3, #0]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f022 0201 	bic.w	r2, r2, #1
 800b4b8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	689b      	ldr	r3, [r3, #8]
 800b4c0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	683a      	ldr	r2, [r7, #0]
 800b4ca:	430a      	orrs	r2, r1
 800b4cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f000 f812 	bl	800b4f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	68fa      	ldr	r2, [r7, #12]
 800b4da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2220      	movs	r2, #32
 800b4e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b4ec:	2300      	movs	r3, #0
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3710      	adds	r7, #16
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
	...

0800b4f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b085      	sub	sp, #20
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b504:	2b00      	cmp	r3, #0
 800b506:	d108      	bne.n	800b51a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2201      	movs	r2, #1
 800b50c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2201      	movs	r2, #1
 800b514:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b518:	e031      	b.n	800b57e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b51a:	2310      	movs	r3, #16
 800b51c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b51e:	2310      	movs	r3, #16
 800b520:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	689b      	ldr	r3, [r3, #8]
 800b528:	0e5b      	lsrs	r3, r3, #25
 800b52a:	b2db      	uxtb	r3, r3
 800b52c:	f003 0307 	and.w	r3, r3, #7
 800b530:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	689b      	ldr	r3, [r3, #8]
 800b538:	0f5b      	lsrs	r3, r3, #29
 800b53a:	b2db      	uxtb	r3, r3
 800b53c:	f003 0307 	and.w	r3, r3, #7
 800b540:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b542:	7bbb      	ldrb	r3, [r7, #14]
 800b544:	7b3a      	ldrb	r2, [r7, #12]
 800b546:	4911      	ldr	r1, [pc, #68]	; (800b58c <UARTEx_SetNbDataToProcess+0x94>)
 800b548:	5c8a      	ldrb	r2, [r1, r2]
 800b54a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b54e:	7b3a      	ldrb	r2, [r7, #12]
 800b550:	490f      	ldr	r1, [pc, #60]	; (800b590 <UARTEx_SetNbDataToProcess+0x98>)
 800b552:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b554:	fb93 f3f2 	sdiv	r3, r3, r2
 800b558:	b29a      	uxth	r2, r3
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b560:	7bfb      	ldrb	r3, [r7, #15]
 800b562:	7b7a      	ldrb	r2, [r7, #13]
 800b564:	4909      	ldr	r1, [pc, #36]	; (800b58c <UARTEx_SetNbDataToProcess+0x94>)
 800b566:	5c8a      	ldrb	r2, [r1, r2]
 800b568:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b56c:	7b7a      	ldrb	r2, [r7, #13]
 800b56e:	4908      	ldr	r1, [pc, #32]	; (800b590 <UARTEx_SetNbDataToProcess+0x98>)
 800b570:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b572:	fb93 f3f2 	sdiv	r3, r3, r2
 800b576:	b29a      	uxth	r2, r3
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b57e:	bf00      	nop
 800b580:	3714      	adds	r7, #20
 800b582:	46bd      	mov	sp, r7
 800b584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b588:	4770      	bx	lr
 800b58a:	bf00      	nop
 800b58c:	0800c61c 	.word	0x0800c61c
 800b590:	0800c624 	.word	0x0800c624

0800b594 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b594:	b084      	sub	sp, #16
 800b596:	b480      	push	{r7}
 800b598:	b085      	sub	sp, #20
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	6078      	str	r0, [r7, #4]
 800b59e:	f107 001c 	add.w	r0, r7, #28
 800b5a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800b5aa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800b5ac:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800b5ae:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800b5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800b5b2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800b5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800b5b6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800b5ba:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800b5bc:	68fa      	ldr	r2, [r7, #12]
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	685a      	ldr	r2, [r3, #4]
 800b5c6:	4b07      	ldr	r3, [pc, #28]	; (800b5e4 <SDMMC_Init+0x50>)
 800b5c8:	4013      	ands	r3, r2
 800b5ca:	68fa      	ldr	r2, [r7, #12]
 800b5cc:	431a      	orrs	r2, r3
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b5d2:	2300      	movs	r3, #0
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3714      	adds	r7, #20
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	b004      	add	sp, #16
 800b5e0:	4770      	bx	lr
 800b5e2:	bf00      	nop
 800b5e4:	ffc02c00 	.word	0xffc02c00

0800b5e8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b083      	sub	sp, #12
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	370c      	adds	r7, #12
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b600:	4770      	bx	lr

0800b602 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b602:	b480      	push	{r7}
 800b604:	b083      	sub	sp, #12
 800b606:	af00      	add	r7, sp, #0
 800b608:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f043 0203 	orr.w	r2, r3, #3
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b616:	2300      	movs	r3, #0
}
 800b618:	4618      	mov	r0, r3
 800b61a:	370c      	adds	r7, #12
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr

0800b624 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b624:	b480      	push	{r7}
 800b626:	b083      	sub	sp, #12
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f003 0303 	and.w	r3, r3, #3
}
 800b634:	4618      	mov	r0, r3
 800b636:	370c      	adds	r7, #12
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr

0800b640 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b640:	b480      	push	{r7}
 800b642:	b085      	sub	sp, #20
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
 800b648:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b64a:	2300      	movs	r3, #0
 800b64c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	681a      	ldr	r2, [r3, #0]
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b65e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800b664:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800b66a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b66c:	68fa      	ldr	r2, [r7, #12]
 800b66e:	4313      	orrs	r3, r2
 800b670:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	68da      	ldr	r2, [r3, #12]
 800b676:	4b06      	ldr	r3, [pc, #24]	; (800b690 <SDMMC_SendCommand+0x50>)
 800b678:	4013      	ands	r3, r2
 800b67a:	68fa      	ldr	r2, [r7, #12]
 800b67c:	431a      	orrs	r2, r3
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b682:	2300      	movs	r3, #0
}
 800b684:	4618      	mov	r0, r3
 800b686:	3714      	adds	r7, #20
 800b688:	46bd      	mov	sp, r7
 800b68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68e:	4770      	bx	lr
 800b690:	fffee0c0 	.word	0xfffee0c0

0800b694 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b694:	b480      	push	{r7}
 800b696:	b083      	sub	sp, #12
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	691b      	ldr	r3, [r3, #16]
 800b6a0:	b2db      	uxtb	r3, r3
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	370c      	adds	r7, #12
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ac:	4770      	bx	lr

0800b6ae <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b6ae:	b480      	push	{r7}
 800b6b0:	b085      	sub	sp, #20
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	6078      	str	r0, [r7, #4]
 800b6b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	3314      	adds	r3, #20
 800b6bc:	461a      	mov	r2, r3
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	4413      	add	r3, r2
 800b6c2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	681b      	ldr	r3, [r3, #0]
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3714      	adds	r7, #20
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d2:	4770      	bx	lr

0800b6d4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b085      	sub	sp, #20
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	681a      	ldr	r2, [r3, #0]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	685a      	ldr	r2, [r3, #4]
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b6fa:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800b700:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800b706:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b708:	68fa      	ldr	r2, [r7, #12]
 800b70a:	4313      	orrs	r3, r2
 800b70c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b712:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	431a      	orrs	r2, r3
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b71e:	2300      	movs	r3, #0

}
 800b720:	4618      	mov	r0, r3
 800b722:	3714      	adds	r7, #20
 800b724:	46bd      	mov	sp, r7
 800b726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72a:	4770      	bx	lr

0800b72c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b088      	sub	sp, #32
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
 800b734:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b73a:	2310      	movs	r3, #16
 800b73c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b73e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b742:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b744:	2300      	movs	r3, #0
 800b746:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b74c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b74e:	f107 0308 	add.w	r3, r7, #8
 800b752:	4619      	mov	r1, r3
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f7ff ff73 	bl	800b640 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b75a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b75e:	2110      	movs	r1, #16
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f000 f995 	bl	800ba90 <SDMMC_GetCmdResp1>
 800b766:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b768:	69fb      	ldr	r3, [r7, #28]
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	3720      	adds	r7, #32
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}

0800b772 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800b772:	b580      	push	{r7, lr}
 800b774:	b088      	sub	sp, #32
 800b776:	af00      	add	r7, sp, #0
 800b778:	6078      	str	r0, [r7, #4]
 800b77a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b780:	2307      	movs	r3, #7
 800b782:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b784:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b788:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b78a:	2300      	movs	r3, #0
 800b78c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b78e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b792:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b794:	f107 0308 	add.w	r3, r7, #8
 800b798:	4619      	mov	r1, r3
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f7ff ff50 	bl	800b640 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b7a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7a4:	2107      	movs	r1, #7
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f000 f972 	bl	800ba90 <SDMMC_GetCmdResp1>
 800b7ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7ae:	69fb      	ldr	r3, [r7, #28]
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	3720      	adds	r7, #32
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}

0800b7b8 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b088      	sub	sp, #32
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7d6:	f107 0308 	add.w	r3, r7, #8
 800b7da:	4619      	mov	r1, r3
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f7ff ff2f 	bl	800b640 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f000 fb96 	bl	800bf14 <SDMMC_GetCmdError>
 800b7e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7ea:	69fb      	ldr	r3, [r7, #28]
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3720      	adds	r7, #32
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}

0800b7f4 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b088      	sub	sp, #32
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b7fc:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b800:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b802:	2308      	movs	r3, #8
 800b804:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b806:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b80a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b80c:	2300      	movs	r3, #0
 800b80e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b814:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b816:	f107 0308 	add.w	r3, r7, #8
 800b81a:	4619      	mov	r1, r3
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f7ff ff0f 	bl	800b640 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f000 fb28 	bl	800be78 <SDMMC_GetCmdResp7>
 800b828:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b82a:	69fb      	ldr	r3, [r7, #28]
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3720      	adds	r7, #32
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}

0800b834 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b088      	sub	sp, #32
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
 800b83c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b842:	2337      	movs	r3, #55	; 0x37
 800b844:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b846:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b84a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b84c:	2300      	movs	r3, #0
 800b84e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b854:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b856:	f107 0308 	add.w	r3, r7, #8
 800b85a:	4619      	mov	r1, r3
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f7ff feef 	bl	800b640 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b862:	f241 3288 	movw	r2, #5000	; 0x1388
 800b866:	2137      	movs	r1, #55	; 0x37
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f000 f911 	bl	800ba90 <SDMMC_GetCmdResp1>
 800b86e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b870:	69fb      	ldr	r3, [r7, #28]
}
 800b872:	4618      	mov	r0, r3
 800b874:	3720      	adds	r7, #32
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}

0800b87a <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b87a:	b580      	push	{r7, lr}
 800b87c:	b088      	sub	sp, #32
 800b87e:	af00      	add	r7, sp, #0
 800b880:	6078      	str	r0, [r7, #4]
 800b882:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b888:	2329      	movs	r3, #41	; 0x29
 800b88a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b88c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b890:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b892:	2300      	movs	r3, #0
 800b894:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b896:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b89a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b89c:	f107 0308 	add.w	r3, r7, #8
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f7ff fecc 	bl	800b640 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f000 fa2d 	bl	800bd08 <SDMMC_GetCmdResp3>
 800b8ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8b0:	69fb      	ldr	r3, [r7, #28]
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3720      	adds	r7, #32
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}

0800b8ba <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b8ba:	b580      	push	{r7, lr}
 800b8bc:	b088      	sub	sp, #32
 800b8be:	af00      	add	r7, sp, #0
 800b8c0:	6078      	str	r0, [r7, #4]
 800b8c2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b8c8:	2306      	movs	r3, #6
 800b8ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8dc:	f107 0308 	add.w	r3, r7, #8
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f7ff feac 	bl	800b640 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b8e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8ec:	2106      	movs	r1, #6
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f000 f8ce 	bl	800ba90 <SDMMC_GetCmdResp1>
 800b8f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8f6:	69fb      	ldr	r3, [r7, #28]
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3720      	adds	r7, #32
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}

0800b900 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b088      	sub	sp, #32
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b908:	2300      	movs	r3, #0
 800b90a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b90c:	2333      	movs	r3, #51	; 0x33
 800b90e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b910:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b914:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b916:	2300      	movs	r3, #0
 800b918:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b91a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b91e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b920:	f107 0308 	add.w	r3, r7, #8
 800b924:	4619      	mov	r1, r3
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f7ff fe8a 	bl	800b640 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b92c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b930:	2133      	movs	r1, #51	; 0x33
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f000 f8ac 	bl	800ba90 <SDMMC_GetCmdResp1>
 800b938:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b93a:	69fb      	ldr	r3, [r7, #28]
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	3720      	adds	r7, #32
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}

0800b944 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b088      	sub	sp, #32
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b94c:	2300      	movs	r3, #0
 800b94e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b950:	2302      	movs	r3, #2
 800b952:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b954:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b958:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b95a:	2300      	movs	r3, #0
 800b95c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b95e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b962:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b964:	f107 0308 	add.w	r3, r7, #8
 800b968:	4619      	mov	r1, r3
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f7ff fe68 	bl	800b640 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f000 f97f 	bl	800bc74 <SDMMC_GetCmdResp2>
 800b976:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b978:	69fb      	ldr	r3, [r7, #28]
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3720      	adds	r7, #32
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}

0800b982 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b982:	b580      	push	{r7, lr}
 800b984:	b088      	sub	sp, #32
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]
 800b98a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b990:	2309      	movs	r3, #9
 800b992:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b994:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b998:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b99a:	2300      	movs	r3, #0
 800b99c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b99e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b9a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9a4:	f107 0308 	add.w	r3, r7, #8
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f7ff fe48 	bl	800b640 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f000 f95f 	bl	800bc74 <SDMMC_GetCmdResp2>
 800b9b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9b8:	69fb      	ldr	r3, [r7, #28]
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3720      	adds	r7, #32
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}

0800b9c2 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b9c2:	b580      	push	{r7, lr}
 800b9c4:	b088      	sub	sp, #32
 800b9c6:	af00      	add	r7, sp, #0
 800b9c8:	6078      	str	r0, [r7, #4]
 800b9ca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b9d0:	2303      	movs	r3, #3
 800b9d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b9d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b9d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b9de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b9e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9e4:	f107 0308 	add.w	r3, r7, #8
 800b9e8:	4619      	mov	r1, r3
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f7ff fe28 	bl	800b640 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b9f0:	683a      	ldr	r2, [r7, #0]
 800b9f2:	2103      	movs	r1, #3
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f000 f9c7 	bl	800bd88 <SDMMC_GetCmdResp6>
 800b9fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9fc:	69fb      	ldr	r3, [r7, #28]
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	3720      	adds	r7, #32
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}

0800ba06 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ba06:	b580      	push	{r7, lr}
 800ba08:	b088      	sub	sp, #32
 800ba0a:	af00      	add	r7, sp, #0
 800ba0c:	6078      	str	r0, [r7, #4]
 800ba0e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ba14:	230d      	movs	r3, #13
 800ba16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba18:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba28:	f107 0308 	add.w	r3, r7, #8
 800ba2c:	4619      	mov	r1, r3
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f7ff fe06 	bl	800b640 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ba34:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba38:	210d      	movs	r1, #13
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f000 f828 	bl	800ba90 <SDMMC_GetCmdResp1>
 800ba40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba42:	69fb      	ldr	r3, [r7, #28]
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3720      	adds	r7, #32
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}

0800ba4c <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b088      	sub	sp, #32
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ba54:	2300      	movs	r3, #0
 800ba56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800ba58:	230d      	movs	r3, #13
 800ba5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba62:	2300      	movs	r3, #0
 800ba64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba6c:	f107 0308 	add.w	r3, r7, #8
 800ba70:	4619      	mov	r1, r3
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f7ff fde4 	bl	800b640 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800ba78:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba7c:	210d      	movs	r1, #13
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f000 f806 	bl	800ba90 <SDMMC_GetCmdResp1>
 800ba84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba86:	69fb      	ldr	r3, [r7, #28]
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3720      	adds	r7, #32
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b088      	sub	sp, #32
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	60f8      	str	r0, [r7, #12]
 800ba98:	460b      	mov	r3, r1
 800ba9a:	607a      	str	r2, [r7, #4]
 800ba9c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ba9e:	4b70      	ldr	r3, [pc, #448]	; (800bc60 <SDMMC_GetCmdResp1+0x1d0>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	4a70      	ldr	r2, [pc, #448]	; (800bc64 <SDMMC_GetCmdResp1+0x1d4>)
 800baa4:	fba2 2303 	umull	r2, r3, r2, r3
 800baa8:	0a5a      	lsrs	r2, r3, #9
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	fb02 f303 	mul.w	r3, r2, r3
 800bab0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800bab2:	69fb      	ldr	r3, [r7, #28]
 800bab4:	1e5a      	subs	r2, r3, #1
 800bab6:	61fa      	str	r2, [r7, #28]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d102      	bne.n	800bac2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800babc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bac0:	e0c9      	b.n	800bc56 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bac6:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800bac8:	69ba      	ldr	r2, [r7, #24]
 800baca:	4b67      	ldr	r3, [pc, #412]	; (800bc68 <SDMMC_GetCmdResp1+0x1d8>)
 800bacc:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d0ef      	beq.n	800bab2 <SDMMC_GetCmdResp1+0x22>
 800bad2:	69bb      	ldr	r3, [r7, #24]
 800bad4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d1ea      	bne.n	800bab2 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bae0:	f003 0304 	and.w	r3, r3, #4
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d004      	beq.n	800baf2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2204      	movs	r2, #4
 800baec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800baee:	2304      	movs	r3, #4
 800baf0:	e0b1      	b.n	800bc56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baf6:	f003 0301 	and.w	r3, r3, #1
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d004      	beq.n	800bb08 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	2201      	movs	r2, #1
 800bb02:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb04:	2301      	movs	r3, #1
 800bb06:	e0a6      	b.n	800bc56 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	4a58      	ldr	r2, [pc, #352]	; (800bc6c <SDMMC_GetCmdResp1+0x1dc>)
 800bb0c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bb0e:	68f8      	ldr	r0, [r7, #12]
 800bb10:	f7ff fdc0 	bl	800b694 <SDMMC_GetCommandResponse>
 800bb14:	4603      	mov	r3, r0
 800bb16:	461a      	mov	r2, r3
 800bb18:	7afb      	ldrb	r3, [r7, #11]
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d001      	beq.n	800bb22 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb1e:	2301      	movs	r3, #1
 800bb20:	e099      	b.n	800bc56 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bb22:	2100      	movs	r1, #0
 800bb24:	68f8      	ldr	r0, [r7, #12]
 800bb26:	f7ff fdc2 	bl	800b6ae <SDMMC_GetResponse>
 800bb2a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bb2c:	697a      	ldr	r2, [r7, #20]
 800bb2e:	4b50      	ldr	r3, [pc, #320]	; (800bc70 <SDMMC_GetCmdResp1+0x1e0>)
 800bb30:	4013      	ands	r3, r2
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d101      	bne.n	800bb3a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800bb36:	2300      	movs	r3, #0
 800bb38:	e08d      	b.n	800bc56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	da02      	bge.n	800bb46 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bb40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bb44:	e087      	b.n	800bc56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d001      	beq.n	800bb54 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bb50:	2340      	movs	r3, #64	; 0x40
 800bb52:	e080      	b.n	800bc56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d001      	beq.n	800bb62 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bb5e:	2380      	movs	r3, #128	; 0x80
 800bb60:	e079      	b.n	800bc56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d002      	beq.n	800bb72 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bb6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb70:	e071      	b.n	800bc56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d002      	beq.n	800bb82 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bb7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb80:	e069      	b.n	800bc56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d002      	beq.n	800bb92 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bb8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb90:	e061      	b.n	800bc56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d002      	beq.n	800bba2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bb9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bba0:	e059      	b.n	800bc56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d002      	beq.n	800bbb2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bbac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bbb0:	e051      	b.n	800bc56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d002      	beq.n	800bbc2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bbbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bbc0:	e049      	b.n	800bc56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d002      	beq.n	800bbd2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bbcc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bbd0:	e041      	b.n	800bc56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d002      	beq.n	800bbe2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800bbdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bbe0:	e039      	b.n	800bc56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d002      	beq.n	800bbf2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bbec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bbf0:	e031      	b.n	800bc56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bbf2:	697b      	ldr	r3, [r7, #20]
 800bbf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d002      	beq.n	800bc02 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bbfc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bc00:	e029      	b.n	800bc56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d002      	beq.n	800bc12 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bc0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bc10:	e021      	b.n	800bc56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d002      	beq.n	800bc22 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bc1c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bc20:	e019      	b.n	800bc56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d002      	beq.n	800bc32 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bc2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bc30:	e011      	b.n	800bc56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d002      	beq.n	800bc42 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bc3c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bc40:	e009      	b.n	800bc56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	f003 0308 	and.w	r3, r3, #8
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d002      	beq.n	800bc52 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bc4c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800bc50:	e001      	b.n	800bc56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bc52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3720      	adds	r7, #32
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}
 800bc5e:	bf00      	nop
 800bc60:	24000000 	.word	0x24000000
 800bc64:	10624dd3 	.word	0x10624dd3
 800bc68:	00200045 	.word	0x00200045
 800bc6c:	002000c5 	.word	0x002000c5
 800bc70:	fdffe008 	.word	0xfdffe008

0800bc74 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800bc74:	b480      	push	{r7}
 800bc76:	b085      	sub	sp, #20
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bc7c:	4b1f      	ldr	r3, [pc, #124]	; (800bcfc <SDMMC_GetCmdResp2+0x88>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	4a1f      	ldr	r2, [pc, #124]	; (800bd00 <SDMMC_GetCmdResp2+0x8c>)
 800bc82:	fba2 2303 	umull	r2, r3, r2, r3
 800bc86:	0a5b      	lsrs	r3, r3, #9
 800bc88:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc8c:	fb02 f303 	mul.w	r3, r2, r3
 800bc90:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	1e5a      	subs	r2, r3, #1
 800bc96:	60fa      	str	r2, [r7, #12]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d102      	bne.n	800bca2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bca0:	e026      	b.n	800bcf0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bca6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d0ef      	beq.n	800bc92 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d1ea      	bne.n	800bc92 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcc0:	f003 0304 	and.w	r3, r3, #4
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d004      	beq.n	800bcd2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2204      	movs	r2, #4
 800bccc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bcce:	2304      	movs	r3, #4
 800bcd0:	e00e      	b.n	800bcf0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcd6:	f003 0301 	and.w	r3, r3, #1
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d004      	beq.n	800bce8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2201      	movs	r2, #1
 800bce2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bce4:	2301      	movs	r3, #1
 800bce6:	e003      	b.n	800bcf0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	4a06      	ldr	r2, [pc, #24]	; (800bd04 <SDMMC_GetCmdResp2+0x90>)
 800bcec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bcee:	2300      	movs	r3, #0
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3714      	adds	r7, #20
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfa:	4770      	bx	lr
 800bcfc:	24000000 	.word	0x24000000
 800bd00:	10624dd3 	.word	0x10624dd3
 800bd04:	002000c5 	.word	0x002000c5

0800bd08 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b085      	sub	sp, #20
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bd10:	4b1a      	ldr	r3, [pc, #104]	; (800bd7c <SDMMC_GetCmdResp3+0x74>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	4a1a      	ldr	r2, [pc, #104]	; (800bd80 <SDMMC_GetCmdResp3+0x78>)
 800bd16:	fba2 2303 	umull	r2, r3, r2, r3
 800bd1a:	0a5b      	lsrs	r3, r3, #9
 800bd1c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd20:	fb02 f303 	mul.w	r3, r2, r3
 800bd24:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	1e5a      	subs	r2, r3, #1
 800bd2a:	60fa      	str	r2, [r7, #12]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d102      	bne.n	800bd36 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd34:	e01b      	b.n	800bd6e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd3a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d0ef      	beq.n	800bd26 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d1ea      	bne.n	800bd26 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd54:	f003 0304 	and.w	r3, r3, #4
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d004      	beq.n	800bd66 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2204      	movs	r2, #4
 800bd60:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd62:	2304      	movs	r3, #4
 800bd64:	e003      	b.n	800bd6e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	4a06      	ldr	r2, [pc, #24]	; (800bd84 <SDMMC_GetCmdResp3+0x7c>)
 800bd6a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bd6c:	2300      	movs	r3, #0
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3714      	adds	r7, #20
 800bd72:	46bd      	mov	sp, r7
 800bd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd78:	4770      	bx	lr
 800bd7a:	bf00      	nop
 800bd7c:	24000000 	.word	0x24000000
 800bd80:	10624dd3 	.word	0x10624dd3
 800bd84:	002000c5 	.word	0x002000c5

0800bd88 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b088      	sub	sp, #32
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	60f8      	str	r0, [r7, #12]
 800bd90:	460b      	mov	r3, r1
 800bd92:	607a      	str	r2, [r7, #4]
 800bd94:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bd96:	4b35      	ldr	r3, [pc, #212]	; (800be6c <SDMMC_GetCmdResp6+0xe4>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	4a35      	ldr	r2, [pc, #212]	; (800be70 <SDMMC_GetCmdResp6+0xe8>)
 800bd9c:	fba2 2303 	umull	r2, r3, r2, r3
 800bda0:	0a5b      	lsrs	r3, r3, #9
 800bda2:	f241 3288 	movw	r2, #5000	; 0x1388
 800bda6:	fb02 f303 	mul.w	r3, r2, r3
 800bdaa:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800bdac:	69fb      	ldr	r3, [r7, #28]
 800bdae:	1e5a      	subs	r2, r3, #1
 800bdb0:	61fa      	str	r2, [r7, #28]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d102      	bne.n	800bdbc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bdb6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bdba:	e052      	b.n	800be62 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdc0:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bdc2:	69bb      	ldr	r3, [r7, #24]
 800bdc4:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d0ef      	beq.n	800bdac <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bdcc:	69bb      	ldr	r3, [r7, #24]
 800bdce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d1ea      	bne.n	800bdac <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdda:	f003 0304 	and.w	r3, r3, #4
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d004      	beq.n	800bdec <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	2204      	movs	r2, #4
 800bde6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bde8:	2304      	movs	r3, #4
 800bdea:	e03a      	b.n	800be62 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdf0:	f003 0301 	and.w	r3, r3, #1
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d004      	beq.n	800be02 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bdfe:	2301      	movs	r3, #1
 800be00:	e02f      	b.n	800be62 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800be02:	68f8      	ldr	r0, [r7, #12]
 800be04:	f7ff fc46 	bl	800b694 <SDMMC_GetCommandResponse>
 800be08:	4603      	mov	r3, r0
 800be0a:	461a      	mov	r2, r3
 800be0c:	7afb      	ldrb	r3, [r7, #11]
 800be0e:	4293      	cmp	r3, r2
 800be10:	d001      	beq.n	800be16 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800be12:	2301      	movs	r3, #1
 800be14:	e025      	b.n	800be62 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	4a16      	ldr	r2, [pc, #88]	; (800be74 <SDMMC_GetCmdResp6+0xec>)
 800be1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800be1c:	2100      	movs	r1, #0
 800be1e:	68f8      	ldr	r0, [r7, #12]
 800be20:	f7ff fc45 	bl	800b6ae <SDMMC_GetResponse>
 800be24:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d106      	bne.n	800be3e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	0c1b      	lsrs	r3, r3, #16
 800be34:	b29a      	uxth	r2, r3
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800be3a:	2300      	movs	r3, #0
 800be3c:	e011      	b.n	800be62 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800be3e:	697b      	ldr	r3, [r7, #20]
 800be40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be44:	2b00      	cmp	r3, #0
 800be46:	d002      	beq.n	800be4e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800be48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800be4c:	e009      	b.n	800be62 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be54:	2b00      	cmp	r3, #0
 800be56:	d002      	beq.n	800be5e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800be58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be5c:	e001      	b.n	800be62 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800be5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800be62:	4618      	mov	r0, r3
 800be64:	3720      	adds	r7, #32
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}
 800be6a:	bf00      	nop
 800be6c:	24000000 	.word	0x24000000
 800be70:	10624dd3 	.word	0x10624dd3
 800be74:	002000c5 	.word	0x002000c5

0800be78 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800be78:	b480      	push	{r7}
 800be7a:	b085      	sub	sp, #20
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800be80:	4b22      	ldr	r3, [pc, #136]	; (800bf0c <SDMMC_GetCmdResp7+0x94>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	4a22      	ldr	r2, [pc, #136]	; (800bf10 <SDMMC_GetCmdResp7+0x98>)
 800be86:	fba2 2303 	umull	r2, r3, r2, r3
 800be8a:	0a5b      	lsrs	r3, r3, #9
 800be8c:	f241 3288 	movw	r2, #5000	; 0x1388
 800be90:	fb02 f303 	mul.w	r3, r2, r3
 800be94:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	1e5a      	subs	r2, r3, #1
 800be9a:	60fa      	str	r2, [r7, #12]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d102      	bne.n	800bea6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bea0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bea4:	e02c      	b.n	800bf00 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beaa:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d0ef      	beq.n	800be96 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d1ea      	bne.n	800be96 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bec4:	f003 0304 	and.w	r3, r3, #4
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d004      	beq.n	800bed6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2204      	movs	r2, #4
 800bed0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bed2:	2304      	movs	r3, #4
 800bed4:	e014      	b.n	800bf00 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beda:	f003 0301 	and.w	r3, r3, #1
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d004      	beq.n	800beec <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2201      	movs	r2, #1
 800bee6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bee8:	2301      	movs	r3, #1
 800beea:	e009      	b.n	800bf00 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d002      	beq.n	800befe <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2240      	movs	r2, #64	; 0x40
 800befc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800befe:	2300      	movs	r3, #0

}
 800bf00:	4618      	mov	r0, r3
 800bf02:	3714      	adds	r7, #20
 800bf04:	46bd      	mov	sp, r7
 800bf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0a:	4770      	bx	lr
 800bf0c:	24000000 	.word	0x24000000
 800bf10:	10624dd3 	.word	0x10624dd3

0800bf14 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b085      	sub	sp, #20
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bf1c:	4b11      	ldr	r3, [pc, #68]	; (800bf64 <SDMMC_GetCmdError+0x50>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	4a11      	ldr	r2, [pc, #68]	; (800bf68 <SDMMC_GetCmdError+0x54>)
 800bf22:	fba2 2303 	umull	r2, r3, r2, r3
 800bf26:	0a5b      	lsrs	r3, r3, #9
 800bf28:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf2c:	fb02 f303 	mul.w	r3, r2, r3
 800bf30:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	1e5a      	subs	r2, r3, #1
 800bf36:	60fa      	str	r2, [r7, #12]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d102      	bne.n	800bf42 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bf3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bf40:	e009      	b.n	800bf56 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d0f1      	beq.n	800bf32 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	4a06      	ldr	r2, [pc, #24]	; (800bf6c <SDMMC_GetCmdError+0x58>)
 800bf52:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800bf54:	2300      	movs	r3, #0
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	3714      	adds	r7, #20
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf60:	4770      	bx	lr
 800bf62:	bf00      	nop
 800bf64:	24000000 	.word	0x24000000
 800bf68:	10624dd3 	.word	0x10624dd3
 800bf6c:	002000c5 	.word	0x002000c5

0800bf70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bf70:	b084      	sub	sp, #16
 800bf72:	b580      	push	{r7, lr}
 800bf74:	b084      	sub	sp, #16
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	6078      	str	r0, [r7, #4]
 800bf7a:	f107 001c 	add.w	r0, r7, #28
 800bf7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bf82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf84:	2b01      	cmp	r3, #1
 800bf86:	d120      	bne.n	800bfca <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	68da      	ldr	r2, [r3, #12]
 800bf98:	4b2a      	ldr	r3, [pc, #168]	; (800c044 <USB_CoreInit+0xd4>)
 800bf9a:	4013      	ands	r3, r2
 800bf9c:	687a      	ldr	r2, [r7, #4]
 800bf9e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	68db      	ldr	r3, [r3, #12]
 800bfa4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bfac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfae:	2b01      	cmp	r3, #1
 800bfb0:	d105      	bne.n	800bfbe <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	68db      	ldr	r3, [r3, #12]
 800bfb6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f000 faac 	bl	800c51c <USB_CoreReset>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	73fb      	strb	r3, [r7, #15]
 800bfc8:	e01a      	b.n	800c000 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	68db      	ldr	r3, [r3, #12]
 800bfce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f000 faa0 	bl	800c51c <USB_CoreReset>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bfe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d106      	bne.n	800bff4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	639a      	str	r2, [r3, #56]	; 0x38
 800bff2:	e005      	b.n	800c000 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bff8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c002:	2b01      	cmp	r3, #1
 800c004:	d116      	bne.n	800c034 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c00a:	b29a      	uxth	r2, r3
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c014:	4b0c      	ldr	r3, [pc, #48]	; (800c048 <USB_CoreInit+0xd8>)
 800c016:	4313      	orrs	r3, r2
 800c018:	687a      	ldr	r2, [r7, #4]
 800c01a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	689b      	ldr	r3, [r3, #8]
 800c020:	f043 0206 	orr.w	r2, r3, #6
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	689b      	ldr	r3, [r3, #8]
 800c02c:	f043 0220 	orr.w	r2, r3, #32
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c034:	7bfb      	ldrb	r3, [r7, #15]
}
 800c036:	4618      	mov	r0, r3
 800c038:	3710      	adds	r7, #16
 800c03a:	46bd      	mov	sp, r7
 800c03c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c040:	b004      	add	sp, #16
 800c042:	4770      	bx	lr
 800c044:	ffbdffbf 	.word	0xffbdffbf
 800c048:	03ee0000 	.word	0x03ee0000

0800c04c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b083      	sub	sp, #12
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	689b      	ldr	r3, [r3, #8]
 800c058:	f023 0201 	bic.w	r2, r3, #1
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c060:	2300      	movs	r3, #0
}
 800c062:	4618      	mov	r0, r3
 800c064:	370c      	adds	r7, #12
 800c066:	46bd      	mov	sp, r7
 800c068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06c:	4770      	bx	lr

0800c06e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c06e:	b580      	push	{r7, lr}
 800c070:	b084      	sub	sp, #16
 800c072:	af00      	add	r7, sp, #0
 800c074:	6078      	str	r0, [r7, #4]
 800c076:	460b      	mov	r3, r1
 800c078:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c07a:	2300      	movs	r3, #0
 800c07c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	68db      	ldr	r3, [r3, #12]
 800c082:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c08a:	78fb      	ldrb	r3, [r7, #3]
 800c08c:	2b01      	cmp	r3, #1
 800c08e:	d115      	bne.n	800c0bc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	68db      	ldr	r3, [r3, #12]
 800c094:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c09c:	2001      	movs	r0, #1
 800c09e:	f7f6 f96f 	bl	8002380 <HAL_Delay>
      ms++;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	3301      	adds	r3, #1
 800c0a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f000 fa29 	bl	800c500 <USB_GetMode>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	2b01      	cmp	r3, #1
 800c0b2:	d01e      	beq.n	800c0f2 <USB_SetCurrentMode+0x84>
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	2b31      	cmp	r3, #49	; 0x31
 800c0b8:	d9f0      	bls.n	800c09c <USB_SetCurrentMode+0x2e>
 800c0ba:	e01a      	b.n	800c0f2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c0bc:	78fb      	ldrb	r3, [r7, #3]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d115      	bne.n	800c0ee <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	68db      	ldr	r3, [r3, #12]
 800c0c6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c0ce:	2001      	movs	r0, #1
 800c0d0:	f7f6 f956 	bl	8002380 <HAL_Delay>
      ms++;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	3301      	adds	r3, #1
 800c0d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f000 fa10 	bl	800c500 <USB_GetMode>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d005      	beq.n	800c0f2 <USB_SetCurrentMode+0x84>
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	2b31      	cmp	r3, #49	; 0x31
 800c0ea:	d9f0      	bls.n	800c0ce <USB_SetCurrentMode+0x60>
 800c0ec:	e001      	b.n	800c0f2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	e005      	b.n	800c0fe <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	2b32      	cmp	r3, #50	; 0x32
 800c0f6:	d101      	bne.n	800c0fc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	e000      	b.n	800c0fe <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c0fc:	2300      	movs	r3, #0
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3710      	adds	r7, #16
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}
	...

0800c108 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c108:	b084      	sub	sp, #16
 800c10a:	b580      	push	{r7, lr}
 800c10c:	b086      	sub	sp, #24
 800c10e:	af00      	add	r7, sp, #0
 800c110:	6078      	str	r0, [r7, #4]
 800c112:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c116:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c11a:	2300      	movs	r3, #0
 800c11c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c122:	2300      	movs	r3, #0
 800c124:	613b      	str	r3, [r7, #16]
 800c126:	e009      	b.n	800c13c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c128:	687a      	ldr	r2, [r7, #4]
 800c12a:	693b      	ldr	r3, [r7, #16]
 800c12c:	3340      	adds	r3, #64	; 0x40
 800c12e:	009b      	lsls	r3, r3, #2
 800c130:	4413      	add	r3, r2
 800c132:	2200      	movs	r2, #0
 800c134:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	3301      	adds	r3, #1
 800c13a:	613b      	str	r3, [r7, #16]
 800c13c:	693b      	ldr	r3, [r7, #16]
 800c13e:	2b0e      	cmp	r3, #14
 800c140:	d9f2      	bls.n	800c128 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c144:	2b00      	cmp	r3, #0
 800c146:	d11c      	bne.n	800c182 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c14e:	685b      	ldr	r3, [r3, #4]
 800c150:	68fa      	ldr	r2, [r7, #12]
 800c152:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c156:	f043 0302 	orr.w	r3, r3, #2
 800c15a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c160:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	601a      	str	r2, [r3, #0]
 800c180:	e005      	b.n	800c18e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c186:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c194:	461a      	mov	r2, r3
 800c196:	2300      	movs	r3, #0
 800c198:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1a0:	4619      	mov	r1, r3
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1a8:	461a      	mov	r2, r3
 800c1aa:	680b      	ldr	r3, [r1, #0]
 800c1ac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b0:	2b01      	cmp	r3, #1
 800c1b2:	d10c      	bne.n	800c1ce <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d104      	bne.n	800c1c4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c1ba:	2100      	movs	r1, #0
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f000 f965 	bl	800c48c <USB_SetDevSpeed>
 800c1c2:	e008      	b.n	800c1d6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c1c4:	2101      	movs	r1, #1
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f000 f960 	bl	800c48c <USB_SetDevSpeed>
 800c1cc:	e003      	b.n	800c1d6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c1ce:	2103      	movs	r1, #3
 800c1d0:	6878      	ldr	r0, [r7, #4]
 800c1d2:	f000 f95b 	bl	800c48c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c1d6:	2110      	movs	r1, #16
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f000 f8f3 	bl	800c3c4 <USB_FlushTxFifo>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d001      	beq.n	800c1e8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f000 f91f 	bl	800c42c <USB_FlushRxFifo>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d001      	beq.n	800c1f8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1fe:	461a      	mov	r2, r3
 800c200:	2300      	movs	r3, #0
 800c202:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c20a:	461a      	mov	r2, r3
 800c20c:	2300      	movs	r3, #0
 800c20e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c216:	461a      	mov	r2, r3
 800c218:	2300      	movs	r3, #0
 800c21a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c21c:	2300      	movs	r3, #0
 800c21e:	613b      	str	r3, [r7, #16]
 800c220:	e043      	b.n	800c2aa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	015a      	lsls	r2, r3, #5
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	4413      	add	r3, r2
 800c22a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c234:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c238:	d118      	bne.n	800c26c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d10a      	bne.n	800c256 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c240:	693b      	ldr	r3, [r7, #16]
 800c242:	015a      	lsls	r2, r3, #5
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	4413      	add	r3, r2
 800c248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c24c:	461a      	mov	r2, r3
 800c24e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c252:	6013      	str	r3, [r2, #0]
 800c254:	e013      	b.n	800c27e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	015a      	lsls	r2, r3, #5
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	4413      	add	r3, r2
 800c25e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c262:	461a      	mov	r2, r3
 800c264:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c268:	6013      	str	r3, [r2, #0]
 800c26a:	e008      	b.n	800c27e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	015a      	lsls	r2, r3, #5
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	4413      	add	r3, r2
 800c274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c278:	461a      	mov	r2, r3
 800c27a:	2300      	movs	r3, #0
 800c27c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	015a      	lsls	r2, r3, #5
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	4413      	add	r3, r2
 800c286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c28a:	461a      	mov	r2, r3
 800c28c:	2300      	movs	r3, #0
 800c28e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	015a      	lsls	r2, r3, #5
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	4413      	add	r3, r2
 800c298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c29c:	461a      	mov	r2, r3
 800c29e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c2a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	613b      	str	r3, [r7, #16]
 800c2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ac:	693a      	ldr	r2, [r7, #16]
 800c2ae:	429a      	cmp	r2, r3
 800c2b0:	d3b7      	bcc.n	800c222 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	613b      	str	r3, [r7, #16]
 800c2b6:	e043      	b.n	800c340 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c2b8:	693b      	ldr	r3, [r7, #16]
 800c2ba:	015a      	lsls	r2, r3, #5
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	4413      	add	r3, r2
 800c2c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c2ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c2ce:	d118      	bne.n	800c302 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d10a      	bne.n	800c2ec <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	015a      	lsls	r2, r3, #5
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	4413      	add	r3, r2
 800c2de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c2e8:	6013      	str	r3, [r2, #0]
 800c2ea:	e013      	b.n	800c314 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	015a      	lsls	r2, r3, #5
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	4413      	add	r3, r2
 800c2f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2f8:	461a      	mov	r2, r3
 800c2fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c2fe:	6013      	str	r3, [r2, #0]
 800c300:	e008      	b.n	800c314 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c302:	693b      	ldr	r3, [r7, #16]
 800c304:	015a      	lsls	r2, r3, #5
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	4413      	add	r3, r2
 800c30a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c30e:	461a      	mov	r2, r3
 800c310:	2300      	movs	r3, #0
 800c312:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	015a      	lsls	r2, r3, #5
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	4413      	add	r3, r2
 800c31c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c320:	461a      	mov	r2, r3
 800c322:	2300      	movs	r3, #0
 800c324:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c326:	693b      	ldr	r3, [r7, #16]
 800c328:	015a      	lsls	r2, r3, #5
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	4413      	add	r3, r2
 800c32e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c332:	461a      	mov	r2, r3
 800c334:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c338:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	3301      	adds	r3, #1
 800c33e:	613b      	str	r3, [r7, #16]
 800c340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c342:	693a      	ldr	r2, [r7, #16]
 800c344:	429a      	cmp	r2, r3
 800c346:	d3b7      	bcc.n	800c2b8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c34e:	691b      	ldr	r3, [r3, #16]
 800c350:	68fa      	ldr	r2, [r7, #12]
 800c352:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c356:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c35a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2200      	movs	r2, #0
 800c360:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c368:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d105      	bne.n	800c37c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	699b      	ldr	r3, [r3, #24]
 800c374:	f043 0210 	orr.w	r2, r3, #16
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	699a      	ldr	r2, [r3, #24]
 800c380:	4b0e      	ldr	r3, [pc, #56]	; (800c3bc <USB_DevInit+0x2b4>)
 800c382:	4313      	orrs	r3, r2
 800c384:	687a      	ldr	r2, [r7, #4]
 800c386:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d005      	beq.n	800c39a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	699b      	ldr	r3, [r3, #24]
 800c392:	f043 0208 	orr.w	r2, r3, #8
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c39a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c39c:	2b01      	cmp	r3, #1
 800c39e:	d105      	bne.n	800c3ac <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	699a      	ldr	r2, [r3, #24]
 800c3a4:	4b06      	ldr	r3, [pc, #24]	; (800c3c0 <USB_DevInit+0x2b8>)
 800c3a6:	4313      	orrs	r3, r2
 800c3a8:	687a      	ldr	r2, [r7, #4]
 800c3aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c3ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3718      	adds	r7, #24
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c3b8:	b004      	add	sp, #16
 800c3ba:	4770      	bx	lr
 800c3bc:	803c3800 	.word	0x803c3800
 800c3c0:	40000004 	.word	0x40000004

0800c3c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b085      	sub	sp, #20
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
 800c3cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	3301      	adds	r3, #1
 800c3d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	4a13      	ldr	r2, [pc, #76]	; (800c428 <USB_FlushTxFifo+0x64>)
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	d901      	bls.n	800c3e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c3e0:	2303      	movs	r3, #3
 800c3e2:	e01b      	b.n	800c41c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	691b      	ldr	r3, [r3, #16]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	daf2      	bge.n	800c3d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	019b      	lsls	r3, r3, #6
 800c3f4:	f043 0220 	orr.w	r2, r3, #32
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	3301      	adds	r3, #1
 800c400:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	4a08      	ldr	r2, [pc, #32]	; (800c428 <USB_FlushTxFifo+0x64>)
 800c406:	4293      	cmp	r3, r2
 800c408:	d901      	bls.n	800c40e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c40a:	2303      	movs	r3, #3
 800c40c:	e006      	b.n	800c41c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	691b      	ldr	r3, [r3, #16]
 800c412:	f003 0320 	and.w	r3, r3, #32
 800c416:	2b20      	cmp	r3, #32
 800c418:	d0f0      	beq.n	800c3fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c41a:	2300      	movs	r3, #0
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3714      	adds	r7, #20
 800c420:	46bd      	mov	sp, r7
 800c422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c426:	4770      	bx	lr
 800c428:	00030d40 	.word	0x00030d40

0800c42c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c42c:	b480      	push	{r7}
 800c42e:	b085      	sub	sp, #20
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c434:	2300      	movs	r3, #0
 800c436:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	3301      	adds	r3, #1
 800c43c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	4a11      	ldr	r2, [pc, #68]	; (800c488 <USB_FlushRxFifo+0x5c>)
 800c442:	4293      	cmp	r3, r2
 800c444:	d901      	bls.n	800c44a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c446:	2303      	movs	r3, #3
 800c448:	e018      	b.n	800c47c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	691b      	ldr	r3, [r3, #16]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	daf2      	bge.n	800c438 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c452:	2300      	movs	r3, #0
 800c454:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2210      	movs	r2, #16
 800c45a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	3301      	adds	r3, #1
 800c460:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	4a08      	ldr	r2, [pc, #32]	; (800c488 <USB_FlushRxFifo+0x5c>)
 800c466:	4293      	cmp	r3, r2
 800c468:	d901      	bls.n	800c46e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c46a:	2303      	movs	r3, #3
 800c46c:	e006      	b.n	800c47c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	691b      	ldr	r3, [r3, #16]
 800c472:	f003 0310 	and.w	r3, r3, #16
 800c476:	2b10      	cmp	r3, #16
 800c478:	d0f0      	beq.n	800c45c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c47a:	2300      	movs	r3, #0
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	3714      	adds	r7, #20
 800c480:	46bd      	mov	sp, r7
 800c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c486:	4770      	bx	lr
 800c488:	00030d40 	.word	0x00030d40

0800c48c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b085      	sub	sp, #20
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	460b      	mov	r3, r1
 800c496:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4a2:	681a      	ldr	r2, [r3, #0]
 800c4a4:	78fb      	ldrb	r3, [r7, #3]
 800c4a6:	68f9      	ldr	r1, [r7, #12]
 800c4a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c4ac:	4313      	orrs	r3, r2
 800c4ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c4b0:	2300      	movs	r3, #0
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3714      	adds	r7, #20
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4bc:	4770      	bx	lr

0800c4be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c4be:	b480      	push	{r7}
 800c4c0:	b085      	sub	sp, #20
 800c4c2:	af00      	add	r7, sp, #0
 800c4c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	68fa      	ldr	r2, [r7, #12]
 800c4d4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c4d8:	f023 0303 	bic.w	r3, r3, #3
 800c4dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4e4:	685b      	ldr	r3, [r3, #4]
 800c4e6:	68fa      	ldr	r2, [r7, #12]
 800c4e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c4ec:	f043 0302 	orr.w	r3, r3, #2
 800c4f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c4f2:	2300      	movs	r3, #0
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	3714      	adds	r7, #20
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fe:	4770      	bx	lr

0800c500 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c500:	b480      	push	{r7}
 800c502:	b083      	sub	sp, #12
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	695b      	ldr	r3, [r3, #20]
 800c50c:	f003 0301 	and.w	r3, r3, #1
}
 800c510:	4618      	mov	r0, r3
 800c512:	370c      	adds	r7, #12
 800c514:	46bd      	mov	sp, r7
 800c516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51a:	4770      	bx	lr

0800c51c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c51c:	b480      	push	{r7}
 800c51e:	b085      	sub	sp, #20
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c524:	2300      	movs	r3, #0
 800c526:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	3301      	adds	r3, #1
 800c52c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	4a13      	ldr	r2, [pc, #76]	; (800c580 <USB_CoreReset+0x64>)
 800c532:	4293      	cmp	r3, r2
 800c534:	d901      	bls.n	800c53a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c536:	2303      	movs	r3, #3
 800c538:	e01b      	b.n	800c572 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	691b      	ldr	r3, [r3, #16]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	daf2      	bge.n	800c528 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c542:	2300      	movs	r3, #0
 800c544:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	691b      	ldr	r3, [r3, #16]
 800c54a:	f043 0201 	orr.w	r2, r3, #1
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	3301      	adds	r3, #1
 800c556:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	4a09      	ldr	r2, [pc, #36]	; (800c580 <USB_CoreReset+0x64>)
 800c55c:	4293      	cmp	r3, r2
 800c55e:	d901      	bls.n	800c564 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c560:	2303      	movs	r3, #3
 800c562:	e006      	b.n	800c572 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	691b      	ldr	r3, [r3, #16]
 800c568:	f003 0301 	and.w	r3, r3, #1
 800c56c:	2b01      	cmp	r3, #1
 800c56e:	d0f0      	beq.n	800c552 <USB_CoreReset+0x36>

  return HAL_OK;
 800c570:	2300      	movs	r3, #0
}
 800c572:	4618      	mov	r0, r3
 800c574:	3714      	adds	r7, #20
 800c576:	46bd      	mov	sp, r7
 800c578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57c:	4770      	bx	lr
 800c57e:	bf00      	nop
 800c580:	00030d40 	.word	0x00030d40

0800c584 <memset>:
 800c584:	4402      	add	r2, r0
 800c586:	4603      	mov	r3, r0
 800c588:	4293      	cmp	r3, r2
 800c58a:	d100      	bne.n	800c58e <memset+0xa>
 800c58c:	4770      	bx	lr
 800c58e:	f803 1b01 	strb.w	r1, [r3], #1
 800c592:	e7f9      	b.n	800c588 <memset+0x4>

0800c594 <__libc_init_array>:
 800c594:	b570      	push	{r4, r5, r6, lr}
 800c596:	4d0d      	ldr	r5, [pc, #52]	; (800c5cc <__libc_init_array+0x38>)
 800c598:	4c0d      	ldr	r4, [pc, #52]	; (800c5d0 <__libc_init_array+0x3c>)
 800c59a:	1b64      	subs	r4, r4, r5
 800c59c:	10a4      	asrs	r4, r4, #2
 800c59e:	2600      	movs	r6, #0
 800c5a0:	42a6      	cmp	r6, r4
 800c5a2:	d109      	bne.n	800c5b8 <__libc_init_array+0x24>
 800c5a4:	4d0b      	ldr	r5, [pc, #44]	; (800c5d4 <__libc_init_array+0x40>)
 800c5a6:	4c0c      	ldr	r4, [pc, #48]	; (800c5d8 <__libc_init_array+0x44>)
 800c5a8:	f000 f818 	bl	800c5dc <_init>
 800c5ac:	1b64      	subs	r4, r4, r5
 800c5ae:	10a4      	asrs	r4, r4, #2
 800c5b0:	2600      	movs	r6, #0
 800c5b2:	42a6      	cmp	r6, r4
 800c5b4:	d105      	bne.n	800c5c2 <__libc_init_array+0x2e>
 800c5b6:	bd70      	pop	{r4, r5, r6, pc}
 800c5b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5bc:	4798      	blx	r3
 800c5be:	3601      	adds	r6, #1
 800c5c0:	e7ee      	b.n	800c5a0 <__libc_init_array+0xc>
 800c5c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5c6:	4798      	blx	r3
 800c5c8:	3601      	adds	r6, #1
 800c5ca:	e7f2      	b.n	800c5b2 <__libc_init_array+0x1e>
 800c5cc:	0800c634 	.word	0x0800c634
 800c5d0:	0800c634 	.word	0x0800c634
 800c5d4:	0800c634 	.word	0x0800c634
 800c5d8:	0800c638 	.word	0x0800c638

0800c5dc <_init>:
 800c5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5de:	bf00      	nop
 800c5e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5e2:	bc08      	pop	{r3}
 800c5e4:	469e      	mov	lr, r3
 800c5e6:	4770      	bx	lr

0800c5e8 <_fini>:
 800c5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ea:	bf00      	nop
 800c5ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5ee:	bc08      	pop	{r3}
 800c5f0:	469e      	mov	lr, r3
 800c5f2:	4770      	bx	lr
