
racecar_h750vb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bec0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800c158  0800c158  0001c158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c190  0800c190  0001c190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c198  0800c198  0001c198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c19c  0800c19c  0001c19c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800c1a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000aa8  24000010  0800c1b0  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000ab8  0800c1b0  00020ab8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   000273c4  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003de5  00000000  00000000  00047445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002088  00000000  00000000  0004b230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001986  00000000  00000000  0004d2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003ce74  00000000  00000000  0004ec3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000297b8  00000000  00000000  0008bab2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00187dc2  00000000  00000000  000b526a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00009004  00000000  00000000  0023d02c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006d  00000000  00000000  00246030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800c140 	.word	0x0800c140

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800c140 	.word	0x0800c140

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f001 fd1e 	bl	8002018 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005dc:	f000 f820 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e0:	f000 fcf8 	bl	8000fd4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005e4:	f000 f896 	bl	8000714 <MX_ADC1_Init>
  MX_QUADSPI_Init();
 80005e8:	f000 fa32 	bl	8000a50 <MX_QUADSPI_Init>
  MX_SDMMC1_SD_Init();
 80005ec:	f000 fa5c 	bl	8000aa8 <MX_SDMMC1_SD_Init>
  MX_SPI4_Init();
 80005f0:	f000 fad4 	bl	8000b9c <MX_SPI4_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f4:	f000 fcbc 	bl	8000f70 <MX_USB_OTG_FS_PCD_Init>
  MX_LPUART1_UART_Init();
 80005f8:	f000 f944 	bl	8000884 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 80005fc:	f000 fb24 	bl	8000c48 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000600:	f000 fb76 	bl	8000cf0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000604:	f000 fbee 	bl	8000de4 <MX_TIM3_Init>
  MX_I2C1_Init();
 8000608:	f000 f8fc 	bl	8000804 <MX_I2C1_Init>
  MX_UART4_Init();
 800060c:	f000 f988 	bl	8000920 <MX_UART4_Init>
  MX_UART7_Init();
 8000610:	f000 f9d2 	bl	80009b8 <MX_UART7_Init>
  MX_SPI1_Init();
 8000614:	f000 fa6c 	bl	8000af0 <MX_SPI1_Init>
  MX_TIM4_Init();
 8000618:	f000 fc4a 	bl	8000eb0 <MX_TIM4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800061c:	e7fe      	b.n	800061c <main+0x48>
	...

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b09c      	sub	sp, #112	; 0x70
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800062a:	224c      	movs	r2, #76	; 0x4c
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f00b fd5a 	bl	800c0e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	2220      	movs	r2, #32
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f00b fd54 	bl	800c0e8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000640:	2002      	movs	r0, #2
 8000642:	f003 fb7b 	bl	8003d3c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000646:	2300      	movs	r3, #0
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	4b30      	ldr	r3, [pc, #192]	; (800070c <SystemClock_Config+0xec>)
 800064c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800064e:	4a2f      	ldr	r2, [pc, #188]	; (800070c <SystemClock_Config+0xec>)
 8000650:	f023 0301 	bic.w	r3, r3, #1
 8000654:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000656:	4b2d      	ldr	r3, [pc, #180]	; (800070c <SystemClock_Config+0xec>)
 8000658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	4b2b      	ldr	r3, [pc, #172]	; (8000710 <SystemClock_Config+0xf0>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4a2a      	ldr	r2, [pc, #168]	; (8000710 <SystemClock_Config+0xf0>)
 8000666:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800066a:	6193      	str	r3, [r2, #24]
 800066c:	4b28      	ldr	r3, [pc, #160]	; (8000710 <SystemClock_Config+0xf0>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000674:	603b      	str	r3, [r7, #0]
 8000676:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000678:	bf00      	nop
 800067a:	4b25      	ldr	r3, [pc, #148]	; (8000710 <SystemClock_Config+0xf0>)
 800067c:	699b      	ldr	r3, [r3, #24]
 800067e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000686:	d1f8      	bne.n	800067a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000688:	2301      	movs	r3, #1
 800068a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800068c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000690:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000692:	2302      	movs	r3, #2
 8000694:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000696:	2302      	movs	r3, #2
 8000698:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800069a:	2305      	movs	r3, #5
 800069c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 800069e:	23a0      	movs	r3, #160	; 0xa0
 80006a0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 20;
 80006a6:	2314      	movs	r3, #20
 80006a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80006ae:	2308      	movs	r3, #8
 80006b0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006b2:	2300      	movs	r3, #0
 80006b4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006be:	4618      	mov	r0, r3
 80006c0:	f003 fc40 	bl	8003f44 <HAL_RCC_OscConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006ca:	f000 fd9f 	bl	800120c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ce:	233f      	movs	r3, #63	; 0x3f
 80006d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d2:	2303      	movs	r3, #3
 80006d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80006da:	2308      	movs	r3, #8
 80006dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006de:	2340      	movs	r3, #64	; 0x40
 80006e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006e2:	2340      	movs	r3, #64	; 0x40
 80006e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006ec:	2340      	movs	r3, #64	; 0x40
 80006ee:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2102      	movs	r1, #2
 80006f4:	4618      	mov	r0, r3
 80006f6:	f004 f87f 	bl	80047f8 <HAL_RCC_ClockConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000700:	f000 fd84 	bl	800120c <Error_Handler>
  }
}
 8000704:	bf00      	nop
 8000706:	3770      	adds	r7, #112	; 0x70
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	58000400 	.word	0x58000400
 8000710:	58024800 	.word	0x58024800

08000714 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	; 0x28
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800071a:	f107 031c 	add.w	r3, r7, #28
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000726:	463b      	mov	r3, r7
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]
 8000734:	615a      	str	r2, [r3, #20]
 8000736:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000738:	4b2f      	ldr	r3, [pc, #188]	; (80007f8 <MX_ADC1_Init+0xe4>)
 800073a:	4a30      	ldr	r2, [pc, #192]	; (80007fc <MX_ADC1_Init+0xe8>)
 800073c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800073e:	4b2e      	ldr	r3, [pc, #184]	; (80007f8 <MX_ADC1_Init+0xe4>)
 8000740:	2200      	movs	r2, #0
 8000742:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000744:	4b2c      	ldr	r3, [pc, #176]	; (80007f8 <MX_ADC1_Init+0xe4>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800074a:	4b2b      	ldr	r3, [pc, #172]	; (80007f8 <MX_ADC1_Init+0xe4>)
 800074c:	2200      	movs	r2, #0
 800074e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000750:	4b29      	ldr	r3, [pc, #164]	; (80007f8 <MX_ADC1_Init+0xe4>)
 8000752:	2204      	movs	r2, #4
 8000754:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000756:	4b28      	ldr	r3, [pc, #160]	; (80007f8 <MX_ADC1_Init+0xe4>)
 8000758:	2200      	movs	r2, #0
 800075a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800075c:	4b26      	ldr	r3, [pc, #152]	; (80007f8 <MX_ADC1_Init+0xe4>)
 800075e:	2200      	movs	r2, #0
 8000760:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000762:	4b25      	ldr	r3, [pc, #148]	; (80007f8 <MX_ADC1_Init+0xe4>)
 8000764:	2201      	movs	r2, #1
 8000766:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000768:	4b23      	ldr	r3, [pc, #140]	; (80007f8 <MX_ADC1_Init+0xe4>)
 800076a:	2200      	movs	r2, #0
 800076c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800076e:	4b22      	ldr	r3, [pc, #136]	; (80007f8 <MX_ADC1_Init+0xe4>)
 8000770:	2200      	movs	r2, #0
 8000772:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000774:	4b20      	ldr	r3, [pc, #128]	; (80007f8 <MX_ADC1_Init+0xe4>)
 8000776:	2200      	movs	r2, #0
 8000778:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800077a:	4b1f      	ldr	r3, [pc, #124]	; (80007f8 <MX_ADC1_Init+0xe4>)
 800077c:	2200      	movs	r2, #0
 800077e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000780:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <MX_ADC1_Init+0xe4>)
 8000782:	2200      	movs	r2, #0
 8000784:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000786:	4b1c      	ldr	r3, [pc, #112]	; (80007f8 <MX_ADC1_Init+0xe4>)
 8000788:	2200      	movs	r2, #0
 800078a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800078c:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <MX_ADC1_Init+0xe4>)
 800078e:	2200      	movs	r2, #0
 8000790:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000794:	4818      	ldr	r0, [pc, #96]	; (80007f8 <MX_ADC1_Init+0xe4>)
 8000796:	f001 feb1 	bl	80024fc <HAL_ADC_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007a0:	f000 fd34 	bl	800120c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007a8:	f107 031c 	add.w	r3, r7, #28
 80007ac:	4619      	mov	r1, r3
 80007ae:	4812      	ldr	r0, [pc, #72]	; (80007f8 <MX_ADC1_Init+0xe4>)
 80007b0:	f002 fcc8 	bl	8003144 <HAL_ADCEx_MultiModeConfigChannel>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80007ba:	f000 fd27 	bl	800120c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <MX_ADC1_Init+0xec>)
 80007c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007c2:	2306      	movs	r3, #6
 80007c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007ca:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80007ce:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007d0:	2304      	movs	r3, #4
 80007d2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80007d8:	2300      	movs	r3, #0
 80007da:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007dc:	463b      	mov	r3, r7
 80007de:	4619      	mov	r1, r3
 80007e0:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_ADC1_Init+0xe4>)
 80007e2:	f002 f82d 	bl	8002840 <HAL_ADC_ConfigChannel>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80007ec:	f000 fd0e 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007f0:	bf00      	nop
 80007f2:	3728      	adds	r7, #40	; 0x28
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	2400002c 	.word	0x2400002c
 80007fc:	40022000 	.word	0x40022000
 8000800:	0c900008 	.word	0x0c900008

08000804 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000808:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <MX_I2C1_Init+0x74>)
 800080a:	4a1c      	ldr	r2, [pc, #112]	; (800087c <MX_I2C1_Init+0x78>)
 800080c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0ECFF;
 800080e:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <MX_I2C1_Init+0x74>)
 8000810:	4a1b      	ldr	r2, [pc, #108]	; (8000880 <MX_I2C1_Init+0x7c>)
 8000812:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000814:	4b18      	ldr	r3, [pc, #96]	; (8000878 <MX_I2C1_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800081a:	4b17      	ldr	r3, [pc, #92]	; (8000878 <MX_I2C1_Init+0x74>)
 800081c:	2201      	movs	r2, #1
 800081e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000820:	4b15      	ldr	r3, [pc, #84]	; (8000878 <MX_I2C1_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000826:	4b14      	ldr	r3, [pc, #80]	; (8000878 <MX_I2C1_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <MX_I2C1_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_I2C1_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_I2C1_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800083e:	480e      	ldr	r0, [pc, #56]	; (8000878 <MX_I2C1_Init+0x74>)
 8000840:	f003 f80c 	bl	800385c <HAL_I2C_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800084a:	f000 fcdf 	bl	800120c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800084e:	2100      	movs	r1, #0
 8000850:	4809      	ldr	r0, [pc, #36]	; (8000878 <MX_I2C1_Init+0x74>)
 8000852:	f003 f893 	bl	800397c <HAL_I2CEx_ConfigAnalogFilter>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800085c:	f000 fcd6 	bl	800120c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000860:	2100      	movs	r1, #0
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_I2C1_Init+0x74>)
 8000864:	f003 f8d5 	bl	8003a12 <HAL_I2CEx_ConfigDigitalFilter>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800086e:	f000 fccd 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	24000090 	.word	0x24000090
 800087c:	40005400 	.word	0x40005400
 8000880:	10c0ecff 	.word	0x10c0ecff

08000884 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000888:	4b22      	ldr	r3, [pc, #136]	; (8000914 <MX_LPUART1_UART_Init+0x90>)
 800088a:	4a23      	ldr	r2, [pc, #140]	; (8000918 <MX_LPUART1_UART_Init+0x94>)
 800088c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800088e:	4b21      	ldr	r3, [pc, #132]	; (8000914 <MX_LPUART1_UART_Init+0x90>)
 8000890:	4a22      	ldr	r2, [pc, #136]	; (800091c <MX_LPUART1_UART_Init+0x98>)
 8000892:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000894:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <MX_LPUART1_UART_Init+0x90>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800089a:	4b1e      	ldr	r3, [pc, #120]	; (8000914 <MX_LPUART1_UART_Init+0x90>)
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008a0:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <MX_LPUART1_UART_Init+0x90>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008a6:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <MX_LPUART1_UART_Init+0x90>)
 80008a8:	220c      	movs	r2, #12
 80008aa:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ac:	4b19      	ldr	r3, [pc, #100]	; (8000914 <MX_LPUART1_UART_Init+0x90>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b2:	4b18      	ldr	r3, [pc, #96]	; (8000914 <MX_LPUART1_UART_Init+0x90>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008b8:	4b16      	ldr	r3, [pc, #88]	; (8000914 <MX_LPUART1_UART_Init+0x90>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <MX_LPUART1_UART_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80008c4:	4b13      	ldr	r3, [pc, #76]	; (8000914 <MX_LPUART1_UART_Init+0x90>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008ca:	4812      	ldr	r0, [pc, #72]	; (8000914 <MX_LPUART1_UART_Init+0x90>)
 80008cc:	f009 fb3e 	bl	8009f4c <HAL_UART_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 80008d6:	f000 fc99 	bl	800120c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008da:	2100      	movs	r1, #0
 80008dc:	480d      	ldr	r0, [pc, #52]	; (8000914 <MX_LPUART1_UART_Init+0x90>)
 80008de:	f00a fb40 	bl	800af62 <HAL_UARTEx_SetTxFifoThreshold>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 80008e8:	f000 fc90 	bl	800120c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ec:	2100      	movs	r1, #0
 80008ee:	4809      	ldr	r0, [pc, #36]	; (8000914 <MX_LPUART1_UART_Init+0x90>)
 80008f0:	f00a fb75 	bl	800afde <HAL_UARTEx_SetRxFifoThreshold>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 80008fa:	f000 fc87 	bl	800120c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_LPUART1_UART_Init+0x90>)
 8000900:	f00a faf6 	bl	800aef0 <HAL_UARTEx_DisableFifoMode>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 800090a:	f000 fc7f 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	240000e4 	.word	0x240000e4
 8000918:	58000c00 	.word	0x58000c00
 800091c:	00033324 	.word	0x00033324

08000920 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000924:	4b22      	ldr	r3, [pc, #136]	; (80009b0 <MX_UART4_Init+0x90>)
 8000926:	4a23      	ldr	r2, [pc, #140]	; (80009b4 <MX_UART4_Init+0x94>)
 8000928:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800092a:	4b21      	ldr	r3, [pc, #132]	; (80009b0 <MX_UART4_Init+0x90>)
 800092c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000930:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000932:	4b1f      	ldr	r3, [pc, #124]	; (80009b0 <MX_UART4_Init+0x90>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000938:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <MX_UART4_Init+0x90>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800093e:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <MX_UART4_Init+0x90>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000944:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <MX_UART4_Init+0x90>)
 8000946:	220c      	movs	r2, #12
 8000948:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094a:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <MX_UART4_Init+0x90>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000950:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <MX_UART4_Init+0x90>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000956:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <MX_UART4_Init+0x90>)
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800095c:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <MX_UART4_Init+0x90>)
 800095e:	2200      	movs	r2, #0
 8000960:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000962:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <MX_UART4_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000968:	4811      	ldr	r0, [pc, #68]	; (80009b0 <MX_UART4_Init+0x90>)
 800096a:	f009 faef 	bl	8009f4c <HAL_UART_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000974:	f000 fc4a 	bl	800120c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000978:	2100      	movs	r1, #0
 800097a:	480d      	ldr	r0, [pc, #52]	; (80009b0 <MX_UART4_Init+0x90>)
 800097c:	f00a faf1 	bl	800af62 <HAL_UARTEx_SetTxFifoThreshold>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000986:	f000 fc41 	bl	800120c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800098a:	2100      	movs	r1, #0
 800098c:	4808      	ldr	r0, [pc, #32]	; (80009b0 <MX_UART4_Init+0x90>)
 800098e:	f00a fb26 	bl	800afde <HAL_UARTEx_SetRxFifoThreshold>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000998:	f000 fc38 	bl	800120c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800099c:	4804      	ldr	r0, [pc, #16]	; (80009b0 <MX_UART4_Init+0x90>)
 800099e:	f00a faa7 	bl	800aef0 <HAL_UARTEx_DisableFifoMode>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80009a8:	f000 fc30 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	24000178 	.word	0x24000178
 80009b4:	40004c00 	.word	0x40004c00

080009b8 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80009bc:	4b22      	ldr	r3, [pc, #136]	; (8000a48 <MX_UART7_Init+0x90>)
 80009be:	4a23      	ldr	r2, [pc, #140]	; (8000a4c <MX_UART7_Init+0x94>)
 80009c0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80009c2:	4b21      	ldr	r3, [pc, #132]	; (8000a48 <MX_UART7_Init+0x90>)
 80009c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80009ca:	4b1f      	ldr	r3, [pc, #124]	; (8000a48 <MX_UART7_Init+0x90>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80009d0:	4b1d      	ldr	r3, [pc, #116]	; (8000a48 <MX_UART7_Init+0x90>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80009d6:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <MX_UART7_Init+0x90>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80009dc:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <MX_UART7_Init+0x90>)
 80009de:	220c      	movs	r2, #12
 80009e0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e2:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <MX_UART7_Init+0x90>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e8:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <MX_UART7_Init+0x90>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ee:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <MX_UART7_Init+0x90>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <MX_UART7_Init+0x90>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009fa:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <MX_UART7_Init+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000a00:	4811      	ldr	r0, [pc, #68]	; (8000a48 <MX_UART7_Init+0x90>)
 8000a02:	f009 faa3 	bl	8009f4c <HAL_UART_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8000a0c:	f000 fbfe 	bl	800120c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a10:	2100      	movs	r1, #0
 8000a12:	480d      	ldr	r0, [pc, #52]	; (8000a48 <MX_UART7_Init+0x90>)
 8000a14:	f00a faa5 	bl	800af62 <HAL_UARTEx_SetTxFifoThreshold>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8000a1e:	f000 fbf5 	bl	800120c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a22:	2100      	movs	r1, #0
 8000a24:	4808      	ldr	r0, [pc, #32]	; (8000a48 <MX_UART7_Init+0x90>)
 8000a26:	f00a fada 	bl	800afde <HAL_UARTEx_SetRxFifoThreshold>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000a30:	f000 fbec 	bl	800120c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000a34:	4804      	ldr	r0, [pc, #16]	; (8000a48 <MX_UART7_Init+0x90>)
 8000a36:	f00a fa5b 	bl	800aef0 <HAL_UARTEx_DisableFifoMode>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000a40:	f000 fbe4 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	2400020c 	.word	0x2400020c
 8000a4c:	40007800 	.word	0x40007800

08000a50 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <MX_QUADSPI_Init+0x50>)
 8000a56:	4a13      	ldr	r2, [pc, #76]	; (8000aa4 <MX_QUADSPI_Init+0x54>)
 8000a58:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <MX_QUADSPI_Init+0x50>)
 8000a5c:	22ff      	movs	r2, #255	; 0xff
 8000a5e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <MX_QUADSPI_Init+0x50>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <MX_QUADSPI_Init+0x50>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <MX_QUADSPI_Init+0x50>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000a72:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <MX_QUADSPI_Init+0x50>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000a78:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <MX_QUADSPI_Init+0x50>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000a7e:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <MX_QUADSPI_Init+0x50>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <MX_QUADSPI_Init+0x50>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000a8a:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <MX_QUADSPI_Init+0x50>)
 8000a8c:	f003 f9a0 	bl	8003dd0 <HAL_QSPI_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000a96:	f000 fbb9 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	240002a0 	.word	0x240002a0
 8000aa4:	52005000 	.word	0x52005000

08000aa8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000aac:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <MX_SDMMC1_SD_Init+0x40>)
 8000aae:	4a0f      	ldr	r2, [pc, #60]	; (8000aec <MX_SDMMC1_SD_Init+0x44>)
 8000ab0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	; (8000ae8 <MX_SDMMC1_SD_Init+0x40>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000ab8:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <MX_SDMMC1_SD_Init+0x40>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000abe:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <MX_SDMMC1_SD_Init+0x40>)
 8000ac0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ac4:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <MX_SDMMC1_SD_Init+0x40>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <MX_SDMMC1_SD_Init+0x40>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <MX_SDMMC1_SD_Init+0x40>)
 8000ad4:	f006 ff1a 	bl	800790c <HAL_SD_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8000ade:	f000 fb95 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	240002ec 	.word	0x240002ec
 8000aec:	52007000 	.word	0x52007000

08000af0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000af4:	4b27      	ldr	r3, [pc, #156]	; (8000b94 <MX_SPI1_Init+0xa4>)
 8000af6:	4a28      	ldr	r2, [pc, #160]	; (8000b98 <MX_SPI1_Init+0xa8>)
 8000af8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000afa:	4b26      	ldr	r3, [pc, #152]	; (8000b94 <MX_SPI1_Init+0xa4>)
 8000afc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000b00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b02:	4b24      	ldr	r3, [pc, #144]	; (8000b94 <MX_SPI1_Init+0xa4>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b08:	4b22      	ldr	r3, [pc, #136]	; (8000b94 <MX_SPI1_Init+0xa4>)
 8000b0a:	2203      	movs	r2, #3
 8000b0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b0e:	4b21      	ldr	r3, [pc, #132]	; (8000b94 <MX_SPI1_Init+0xa4>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b14:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <MX_SPI1_Init+0xa4>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b1a:	4b1e      	ldr	r3, [pc, #120]	; (8000b94 <MX_SPI1_Init+0xa4>)
 8000b1c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000b20:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b22:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <MX_SPI1_Init+0xa4>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b28:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <MX_SPI1_Init+0xa4>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b2e:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <MX_SPI1_Init+0xa4>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b34:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <MX_SPI1_Init+0xa4>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000b3a:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <MX_SPI1_Init+0xa4>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b40:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <MX_SPI1_Init+0xa4>)
 8000b42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b46:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <MX_SPI1_Init+0xa4>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_SPI1_Init+0xa4>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <MX_SPI1_Init+0xa4>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <MX_SPI1_Init+0xa4>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <MX_SPI1_Init+0xa4>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <MX_SPI1_Init+0xa4>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b6c:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <MX_SPI1_Init+0xa4>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <MX_SPI1_Init+0xa4>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <MX_SPI1_Init+0xa4>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b7e:	4805      	ldr	r0, [pc, #20]	; (8000b94 <MX_SPI1_Init+0xa4>)
 8000b80:	f007 ff32 	bl	80089e8 <HAL_SPI_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000b8a:	f000 fb3f 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	24000368 	.word	0x24000368
 8000b98:	40013000 	.word	0x40013000

08000b9c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000ba0:	4b27      	ldr	r3, [pc, #156]	; (8000c40 <MX_SPI4_Init+0xa4>)
 8000ba2:	4a28      	ldr	r2, [pc, #160]	; (8000c44 <MX_SPI4_Init+0xa8>)
 8000ba4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000ba6:	4b26      	ldr	r3, [pc, #152]	; (8000c40 <MX_SPI4_Init+0xa4>)
 8000ba8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000bac:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000bae:	4b24      	ldr	r3, [pc, #144]	; (8000c40 <MX_SPI4_Init+0xa4>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000bb4:	4b22      	ldr	r3, [pc, #136]	; (8000c40 <MX_SPI4_Init+0xa4>)
 8000bb6:	2203      	movs	r2, #3
 8000bb8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bba:	4b21      	ldr	r3, [pc, #132]	; (8000c40 <MX_SPI4_Init+0xa4>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bc0:	4b1f      	ldr	r3, [pc, #124]	; (8000c40 <MX_SPI4_Init+0xa4>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000bc6:	4b1e      	ldr	r3, [pc, #120]	; (8000c40 <MX_SPI4_Init+0xa4>)
 8000bc8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000bcc:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bce:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <MX_SPI4_Init+0xa4>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bd4:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <MX_SPI4_Init+0xa4>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bda:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <MX_SPI4_Init+0xa4>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000be0:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <MX_SPI4_Init+0xa4>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000be6:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <MX_SPI4_Init+0xa4>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <MX_SPI4_Init+0xa4>)
 8000bee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bf2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <MX_SPI4_Init+0xa4>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000bfa:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <MX_SPI4_Init+0xa4>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <MX_SPI4_Init+0xa4>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <MX_SPI4_Init+0xa4>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <MX_SPI4_Init+0xa4>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <MX_SPI4_Init+0xa4>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <MX_SPI4_Init+0xa4>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <MX_SPI4_Init+0xa4>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <MX_SPI4_Init+0xa4>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000c2a:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_SPI4_Init+0xa4>)
 8000c2c:	f007 fedc 	bl	80089e8 <HAL_SPI_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000c36:	f000 fae9 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	240003f0 	.word	0x240003f0
 8000c44:	40013400 	.word	0x40013400

08000c48 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b088      	sub	sp, #32
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c4e:	f107 0310 	add.w	r3, r7, #16
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c66:	4b20      	ldr	r3, [pc, #128]	; (8000ce8 <MX_TIM1_Init+0xa0>)
 8000c68:	4a20      	ldr	r2, [pc, #128]	; (8000cec <MX_TIM1_Init+0xa4>)
 8000c6a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ce8 <MX_TIM1_Init+0xa0>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c72:	4b1d      	ldr	r3, [pc, #116]	; (8000ce8 <MX_TIM1_Init+0xa0>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c78:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <MX_TIM1_Init+0xa0>)
 8000c7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c7e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c80:	4b19      	ldr	r3, [pc, #100]	; (8000ce8 <MX_TIM1_Init+0xa0>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c86:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <MX_TIM1_Init+0xa0>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c8c:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <MX_TIM1_Init+0xa0>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c92:	4815      	ldr	r0, [pc, #84]	; (8000ce8 <MX_TIM1_Init+0xa0>)
 8000c94:	f007 ffe7 	bl	8008c66 <HAL_TIM_Base_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000c9e:	f000 fab5 	bl	800120c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ca8:	f107 0310 	add.w	r3, r7, #16
 8000cac:	4619      	mov	r1, r3
 8000cae:	480e      	ldr	r0, [pc, #56]	; (8000ce8 <MX_TIM1_Init+0xa0>)
 8000cb0:	f008 fa8e 	bl	80091d0 <HAL_TIM_ConfigClockSource>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000cba:	f000 faa7 	bl	800120c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cca:	1d3b      	adds	r3, r7, #4
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4806      	ldr	r0, [pc, #24]	; (8000ce8 <MX_TIM1_Init+0xa0>)
 8000cd0:	f009 f8ae 	bl	8009e30 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000cda:	f000 fa97 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	3720      	adds	r7, #32
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	24000478 	.word	0x24000478
 8000cec:	40010000 	.word	0x40010000

08000cf0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	; 0x28
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf6:	f107 031c 	add.w	r3, r7, #28
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d02:	463b      	mov	r3, r7
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
 8000d10:	615a      	str	r2, [r3, #20]
 8000d12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d14:	4b32      	ldr	r3, [pc, #200]	; (8000de0 <MX_TIM2_Init+0xf0>)
 8000d16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d1c:	4b30      	ldr	r3, [pc, #192]	; (8000de0 <MX_TIM2_Init+0xf0>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d22:	4b2f      	ldr	r3, [pc, #188]	; (8000de0 <MX_TIM2_Init+0xf0>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d28:	4b2d      	ldr	r3, [pc, #180]	; (8000de0 <MX_TIM2_Init+0xf0>)
 8000d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8000d2e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d30:	4b2b      	ldr	r3, [pc, #172]	; (8000de0 <MX_TIM2_Init+0xf0>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d36:	4b2a      	ldr	r3, [pc, #168]	; (8000de0 <MX_TIM2_Init+0xf0>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d3c:	4828      	ldr	r0, [pc, #160]	; (8000de0 <MX_TIM2_Init+0xf0>)
 8000d3e:	f007 ffe9 	bl	8008d14 <HAL_TIM_PWM_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000d48:	f000 fa60 	bl	800120c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d50:	2300      	movs	r3, #0
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d54:	f107 031c 	add.w	r3, r7, #28
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4821      	ldr	r0, [pc, #132]	; (8000de0 <MX_TIM2_Init+0xf0>)
 8000d5c:	f009 f868 	bl	8009e30 <HAL_TIMEx_MasterConfigSynchronization>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000d66:	f000 fa51 	bl	800120c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d6a:	2360      	movs	r3, #96	; 0x60
 8000d6c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d72:	2300      	movs	r3, #0
 8000d74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4817      	ldr	r0, [pc, #92]	; (8000de0 <MX_TIM2_Init+0xf0>)
 8000d82:	f008 f911 	bl	8008fa8 <HAL_TIM_PWM_ConfigChannel>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000d8c:	f000 fa3e 	bl	800120c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d90:	463b      	mov	r3, r7
 8000d92:	2204      	movs	r2, #4
 8000d94:	4619      	mov	r1, r3
 8000d96:	4812      	ldr	r0, [pc, #72]	; (8000de0 <MX_TIM2_Init+0xf0>)
 8000d98:	f008 f906 	bl	8008fa8 <HAL_TIM_PWM_ConfigChannel>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000da2:	f000 fa33 	bl	800120c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000da6:	463b      	mov	r3, r7
 8000da8:	2208      	movs	r2, #8
 8000daa:	4619      	mov	r1, r3
 8000dac:	480c      	ldr	r0, [pc, #48]	; (8000de0 <MX_TIM2_Init+0xf0>)
 8000dae:	f008 f8fb 	bl	8008fa8 <HAL_TIM_PWM_ConfigChannel>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000db8:	f000 fa28 	bl	800120c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000dbc:	463b      	mov	r3, r7
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4807      	ldr	r0, [pc, #28]	; (8000de0 <MX_TIM2_Init+0xf0>)
 8000dc4:	f008 f8f0 	bl	8008fa8 <HAL_TIM_PWM_ConfigChannel>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8000dce:	f000 fa1d 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000dd2:	4803      	ldr	r0, [pc, #12]	; (8000de0 <MX_TIM2_Init+0xf0>)
 8000dd4:	f000 ff76 	bl	8001cc4 <HAL_TIM_MspPostInit>

}
 8000dd8:	bf00      	nop
 8000dda:	3728      	adds	r7, #40	; 0x28
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	240004c4 	.word	0x240004c4

08000de4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08a      	sub	sp, #40	; 0x28
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dea:	f107 031c 	add.w	r3, r7, #28
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000df6:	463b      	mov	r3, r7
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
 8000e04:	615a      	str	r2, [r3, #20]
 8000e06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e08:	4b27      	ldr	r3, [pc, #156]	; (8000ea8 <MX_TIM3_Init+0xc4>)
 8000e0a:	4a28      	ldr	r2, [pc, #160]	; (8000eac <MX_TIM3_Init+0xc8>)
 8000e0c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e0e:	4b26      	ldr	r3, [pc, #152]	; (8000ea8 <MX_TIM3_Init+0xc4>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e14:	4b24      	ldr	r3, [pc, #144]	; (8000ea8 <MX_TIM3_Init+0xc4>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e1a:	4b23      	ldr	r3, [pc, #140]	; (8000ea8 <MX_TIM3_Init+0xc4>)
 8000e1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e20:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e22:	4b21      	ldr	r3, [pc, #132]	; (8000ea8 <MX_TIM3_Init+0xc4>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e28:	4b1f      	ldr	r3, [pc, #124]	; (8000ea8 <MX_TIM3_Init+0xc4>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e2e:	481e      	ldr	r0, [pc, #120]	; (8000ea8 <MX_TIM3_Init+0xc4>)
 8000e30:	f007 ff70 	bl	8008d14 <HAL_TIM_PWM_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000e3a:	f000 f9e7 	bl	800120c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e42:	2300      	movs	r3, #0
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e46:	f107 031c 	add.w	r3, r7, #28
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4816      	ldr	r0, [pc, #88]	; (8000ea8 <MX_TIM3_Init+0xc4>)
 8000e4e:	f008 ffef 	bl	8009e30 <HAL_TIMEx_MasterConfigSynchronization>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000e58:	f000 f9d8 	bl	800120c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e5c:	2360      	movs	r3, #96	; 0x60
 8000e5e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e6c:	463b      	mov	r3, r7
 8000e6e:	2200      	movs	r2, #0
 8000e70:	4619      	mov	r1, r3
 8000e72:	480d      	ldr	r0, [pc, #52]	; (8000ea8 <MX_TIM3_Init+0xc4>)
 8000e74:	f008 f898 	bl	8008fa8 <HAL_TIM_PWM_ConfigChannel>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000e7e:	f000 f9c5 	bl	800120c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e82:	463b      	mov	r3, r7
 8000e84:	2204      	movs	r2, #4
 8000e86:	4619      	mov	r1, r3
 8000e88:	4807      	ldr	r0, [pc, #28]	; (8000ea8 <MX_TIM3_Init+0xc4>)
 8000e8a:	f008 f88d 	bl	8008fa8 <HAL_TIM_PWM_ConfigChannel>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000e94:	f000 f9ba 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e98:	4803      	ldr	r0, [pc, #12]	; (8000ea8 <MX_TIM3_Init+0xc4>)
 8000e9a:	f000 ff13 	bl	8001cc4 <HAL_TIM_MspPostInit>

}
 8000e9e:	bf00      	nop
 8000ea0:	3728      	adds	r7, #40	; 0x28
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	24000510 	.word	0x24000510
 8000eac:	40000400 	.word	0x40000400

08000eb0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b088      	sub	sp, #32
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ece:	4b26      	ldr	r3, [pc, #152]	; (8000f68 <MX_TIM4_Init+0xb8>)
 8000ed0:	4a26      	ldr	r2, [pc, #152]	; (8000f6c <MX_TIM4_Init+0xbc>)
 8000ed2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ed4:	4b24      	ldr	r3, [pc, #144]	; (8000f68 <MX_TIM4_Init+0xb8>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eda:	4b23      	ldr	r3, [pc, #140]	; (8000f68 <MX_TIM4_Init+0xb8>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ee0:	4b21      	ldr	r3, [pc, #132]	; (8000f68 <MX_TIM4_Init+0xb8>)
 8000ee2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ee6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee8:	4b1f      	ldr	r3, [pc, #124]	; (8000f68 <MX_TIM4_Init+0xb8>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eee:	4b1e      	ldr	r3, [pc, #120]	; (8000f68 <MX_TIM4_Init+0xb8>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000ef4:	481c      	ldr	r0, [pc, #112]	; (8000f68 <MX_TIM4_Init+0xb8>)
 8000ef6:	f007 ff64 	bl	8008dc2 <HAL_TIM_IC_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000f00:	f000 f984 	bl	800120c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	4619      	mov	r1, r3
 8000f12:	4815      	ldr	r0, [pc, #84]	; (8000f68 <MX_TIM4_Init+0xb8>)
 8000f14:	f008 ff8c 	bl	8009e30 <HAL_TIMEx_MasterConfigSynchronization>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000f1e:	f000 f975 	bl	800120c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f22:	2300      	movs	r3, #0
 8000f24:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f26:	2301      	movs	r3, #1
 8000f28:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	2208      	movs	r2, #8
 8000f36:	4619      	mov	r1, r3
 8000f38:	480b      	ldr	r0, [pc, #44]	; (8000f68 <MX_TIM4_Init+0xb8>)
 8000f3a:	f007 ff99 	bl	8008e70 <HAL_TIM_IC_ConfigChannel>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000f44:	f000 f962 	bl	800120c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	220c      	movs	r2, #12
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4806      	ldr	r0, [pc, #24]	; (8000f68 <MX_TIM4_Init+0xb8>)
 8000f50:	f007 ff8e 	bl	8008e70 <HAL_TIM_IC_ConfigChannel>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000f5a:	f000 f957 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f5e:	bf00      	nop
 8000f60:	3720      	adds	r7, #32
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	2400055c 	.word	0x2400055c
 8000f6c:	40000800 	.word	0x40000800

08000f70 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f74:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f76:	4a16      	ldr	r2, [pc, #88]	; (8000fd0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000f78:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000f7a:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f7c:	2209      	movs	r2, #9
 8000f7e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f82:	2202      	movs	r2, #2
 8000f84:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000f86:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f8e:	2202      	movs	r2, #2
 8000f90:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000fa4:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000faa:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000fb6:	4805      	ldr	r0, [pc, #20]	; (8000fcc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fb8:	f002 fd77 	bl	8003aaa <HAL_PCD_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000fc2:	f000 f923 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	240005a8 	.word	0x240005a8
 8000fd0:	40080000 	.word	0x40080000

08000fd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08c      	sub	sp, #48	; 0x30
 8000fd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fda:	f107 031c 	add.w	r3, r7, #28
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
 8000fe8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fea:	4b82      	ldr	r3, [pc, #520]	; (80011f4 <MX_GPIO_Init+0x220>)
 8000fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff0:	4a80      	ldr	r2, [pc, #512]	; (80011f4 <MX_GPIO_Init+0x220>)
 8000ff2:	f043 0310 	orr.w	r3, r3, #16
 8000ff6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ffa:	4b7e      	ldr	r3, [pc, #504]	; (80011f4 <MX_GPIO_Init+0x220>)
 8000ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001000:	f003 0310 	and.w	r3, r3, #16
 8001004:	61bb      	str	r3, [r7, #24]
 8001006:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001008:	4b7a      	ldr	r3, [pc, #488]	; (80011f4 <MX_GPIO_Init+0x220>)
 800100a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100e:	4a79      	ldr	r2, [pc, #484]	; (80011f4 <MX_GPIO_Init+0x220>)
 8001010:	f043 0304 	orr.w	r3, r3, #4
 8001014:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001018:	4b76      	ldr	r3, [pc, #472]	; (80011f4 <MX_GPIO_Init+0x220>)
 800101a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101e:	f003 0304 	and.w	r3, r3, #4
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001026:	4b73      	ldr	r3, [pc, #460]	; (80011f4 <MX_GPIO_Init+0x220>)
 8001028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800102c:	4a71      	ldr	r2, [pc, #452]	; (80011f4 <MX_GPIO_Init+0x220>)
 800102e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001032:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001036:	4b6f      	ldr	r3, [pc, #444]	; (80011f4 <MX_GPIO_Init+0x220>)
 8001038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001044:	4b6b      	ldr	r3, [pc, #428]	; (80011f4 <MX_GPIO_Init+0x220>)
 8001046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104a:	4a6a      	ldr	r2, [pc, #424]	; (80011f4 <MX_GPIO_Init+0x220>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001054:	4b67      	ldr	r3, [pc, #412]	; (80011f4 <MX_GPIO_Init+0x220>)
 8001056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001062:	4b64      	ldr	r3, [pc, #400]	; (80011f4 <MX_GPIO_Init+0x220>)
 8001064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001068:	4a62      	ldr	r2, [pc, #392]	; (80011f4 <MX_GPIO_Init+0x220>)
 800106a:	f043 0302 	orr.w	r3, r3, #2
 800106e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001072:	4b60      	ldr	r3, [pc, #384]	; (80011f4 <MX_GPIO_Init+0x220>)
 8001074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001078:	f003 0302 	and.w	r3, r3, #2
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001080:	4b5c      	ldr	r3, [pc, #368]	; (80011f4 <MX_GPIO_Init+0x220>)
 8001082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001086:	4a5b      	ldr	r2, [pc, #364]	; (80011f4 <MX_GPIO_Init+0x220>)
 8001088:	f043 0308 	orr.w	r3, r3, #8
 800108c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001090:	4b58      	ldr	r3, [pc, #352]	; (80011f4 <MX_GPIO_Init+0x220>)
 8001092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001096:	f003 0308 	and.w	r3, r3, #8
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ONBOARD_LED_Pin|LCD_LED_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	f640 4108 	movw	r1, #3080	; 0xc08
 80010a4:	4854      	ldr	r0, [pc, #336]	; (80011f8 <MX_GPIO_Init+0x224>)
 80010a6:	f002 fbbf 	bl	8003828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, PCA9685_OE_Pin|LED_BLUE_Pin|LED_RED_Pin|LED_YELLOW_Pin
 80010aa:	2200      	movs	r2, #0
 80010ac:	f44f 618f 	mov.w	r1, #1144	; 0x478
 80010b0:	4852      	ldr	r0, [pc, #328]	; (80011fc <MX_GPIO_Init+0x228>)
 80010b2:	f002 fbb9 	bl	8003828 <HAL_GPIO_WritePin>
                          |SPI1_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Manual_Output_GPIO_Port, Manual_Output_Pin, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2120      	movs	r1, #32
 80010ba:	4851      	ldr	r0, [pc, #324]	; (8001200 <MX_GPIO_Init+0x22c>)
 80010bc:	f002 fbb4 	bl	8003828 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ONBOARD_LED_Pin LCD_LED_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = ONBOARD_LED_Pin|LCD_LED_Pin|LCD_CS_Pin;
 80010c0:	f640 4308 	movw	r3, #3080	; 0xc08
 80010c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c6:	2301      	movs	r3, #1
 80010c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	4619      	mov	r1, r3
 80010d8:	4847      	ldr	r0, [pc, #284]	; (80011f8 <MX_GPIO_Init+0x224>)
 80010da:	f002 f9f5 	bl	80034c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : S06_Pin S07_Pin S00_Pin S01_Pin */
  GPIO_InitStruct.Pin = S06_Pin|S07_Pin|S00_Pin|S01_Pin;
 80010de:	23c3      	movs	r3, #195	; 0xc3
 80010e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010ec:	f107 031c 	add.w	r3, r7, #28
 80010f0:	4619      	mov	r1, r3
 80010f2:	4841      	ldr	r0, [pc, #260]	; (80011f8 <MX_GPIO_Init+0x224>)
 80010f4:	f002 f9e8 	bl	80034c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ONBOARD_KEY1_Pin */
  GPIO_InitStruct.Pin = ONBOARD_KEY1_Pin;
 80010f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fe:	2300      	movs	r3, #0
 8001100:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ONBOARD_KEY1_GPIO_Port, &GPIO_InitStruct);
 8001106:	f107 031c 	add.w	r3, r7, #28
 800110a:	4619      	mov	r1, r3
 800110c:	483d      	ldr	r0, [pc, #244]	; (8001204 <MX_GPIO_Init+0x230>)
 800110e:	f002 f9db 	bl	80034c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : S02_Pin S03_Pin */
  GPIO_InitStruct.Pin = S02_Pin|S03_Pin;
 8001112:	230c      	movs	r3, #12
 8001114:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001116:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800111a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001120:	f107 031c 	add.w	r3, r7, #28
 8001124:	4619      	mov	r1, r3
 8001126:	4837      	ldr	r0, [pc, #220]	; (8001204 <MX_GPIO_Init+0x230>)
 8001128:	f002 f9ce 	bl	80034c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : S04_Pin S05_Pin */
  GPIO_InitStruct.Pin = S04_Pin|S05_Pin;
 800112c:	2330      	movs	r3, #48	; 0x30
 800112e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001130:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001134:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113a:	f107 031c 	add.w	r3, r7, #28
 800113e:	4619      	mov	r1, r3
 8001140:	4831      	ldr	r0, [pc, #196]	; (8001208 <MX_GPIO_Init+0x234>)
 8001142:	f002 f9c1 	bl	80034c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_SWITCH_Pin */
  GPIO_InitStruct.Pin = LCD_SWITCH_Pin;
 8001146:	f44f 7300 	mov.w	r3, #512	; 0x200
 800114a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800114c:	2300      	movs	r3, #0
 800114e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LCD_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8001154:	f107 031c 	add.w	r3, r7, #28
 8001158:	4619      	mov	r1, r3
 800115a:	4827      	ldr	r0, [pc, #156]	; (80011f8 <MX_GPIO_Init+0x224>)
 800115c:	f002 f9b4 	bl	80034c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : S10_Pin S11_Pin S12_Pin S13_Pin
                           S14_Pin S15_Pin */
  GPIO_InitStruct.Pin = S10_Pin|S11_Pin|S12_Pin|S13_Pin
 8001160:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001164:	61fb      	str	r3, [r7, #28]
                          |S14_Pin|S15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001166:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800116a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001170:	f107 031c 	add.w	r3, r7, #28
 8001174:	4619      	mov	r1, r3
 8001176:	4822      	ldr	r0, [pc, #136]	; (8001200 <MX_GPIO_Init+0x22c>)
 8001178:	f002 f9a6 	bl	80034c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : S08_Pin S09_Pin */
  GPIO_InitStruct.Pin = S08_Pin|S09_Pin;
 800117c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001180:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001182:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001186:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800118c:	f107 031c 	add.w	r3, r7, #28
 8001190:	4619      	mov	r1, r3
 8001192:	481a      	ldr	r0, [pc, #104]	; (80011fc <MX_GPIO_Init+0x228>)
 8001194:	f002 f998 	bl	80034c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCA9685_OE_Pin LED_BLUE_Pin LED_RED_Pin LED_YELLOW_Pin
                           SPI1_CS_Pin */
  GPIO_InitStruct.Pin = PCA9685_OE_Pin|LED_BLUE_Pin|LED_RED_Pin|LED_YELLOW_Pin
 8001198:	f44f 638f 	mov.w	r3, #1144	; 0x478
 800119c:	61fb      	str	r3, [r7, #28]
                          |SPI1_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119e:	2301      	movs	r3, #1
 80011a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2300      	movs	r3, #0
 80011a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011aa:	f107 031c 	add.w	r3, r7, #28
 80011ae:	4619      	mov	r1, r3
 80011b0:	4812      	ldr	r0, [pc, #72]	; (80011fc <MX_GPIO_Init+0x228>)
 80011b2:	f002 f989 	bl	80034c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Manual_Output_Pin */
  GPIO_InitStruct.Pin = Manual_Output_Pin;
 80011b6:	2320      	movs	r3, #32
 80011b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ba:	2301      	movs	r3, #1
 80011bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Manual_Output_GPIO_Port, &GPIO_InitStruct);
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	4619      	mov	r1, r3
 80011cc:	480c      	ldr	r0, [pc, #48]	; (8001200 <MX_GPIO_Init+0x22c>)
 80011ce:	f002 f97b 	bl	80034c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Manual_Input_Pin */
  GPIO_InitStruct.Pin = Manual_Input_Pin;
 80011d2:	2380      	movs	r3, #128	; 0x80
 80011d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d6:	2300      	movs	r3, #0
 80011d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Manual_Input_GPIO_Port, &GPIO_InitStruct);
 80011de:	f107 031c 	add.w	r3, r7, #28
 80011e2:	4619      	mov	r1, r3
 80011e4:	4806      	ldr	r0, [pc, #24]	; (8001200 <MX_GPIO_Init+0x22c>)
 80011e6:	f002 f96f 	bl	80034c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011ea:	bf00      	nop
 80011ec:	3730      	adds	r7, #48	; 0x30
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	58024400 	.word	0x58024400
 80011f8:	58021000 	.word	0x58021000
 80011fc:	58020c00 	.word	0x58020c00
 8001200:	58020400 	.word	0x58020400
 8001204:	58020800 	.word	0x58020800
 8001208:	58020000 	.word	0x58020000

0800120c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001210:	b672      	cpsid	i
}
 8001212:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001214:	e7fe      	b.n	8001214 <Error_Handler+0x8>
	...

08001218 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121e:	4b13      	ldr	r3, [pc, #76]	; (800126c <HAL_MspInit+0x54>)
 8001220:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001224:	4a11      	ldr	r2, [pc, #68]	; (800126c <HAL_MspInit+0x54>)
 8001226:	f043 0302 	orr.w	r3, r3, #2
 800122a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <HAL_MspInit+0x54>)
 8001230:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <HAL_MspInit+0x54>)
 800123e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001242:	4a0a      	ldr	r2, [pc, #40]	; (800126c <HAL_MspInit+0x54>)
 8001244:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001248:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800124c:	4b07      	ldr	r3, [pc, #28]	; (800126c <HAL_MspInit+0x54>)
 800124e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001252:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	683b      	ldr	r3, [r7, #0]

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 800125a:	f000 ffb3 	bl	80021c4 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 800125e:	2002      	movs	r0, #2
 8001260:	f000 ff9c 	bl	800219c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	58024400 	.word	0x58024400

08001270 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b0bc      	sub	sp, #240	; 0xf0
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001288:	f107 0318 	add.w	r3, r7, #24
 800128c:	22c0      	movs	r2, #192	; 0xc0
 800128e:	2100      	movs	r1, #0
 8001290:	4618      	mov	r0, r3
 8001292:	f00a ff29 	bl	800c0e8 <memset>
  if(hadc->Instance==ADC1)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a4a      	ldr	r2, [pc, #296]	; (80013c4 <HAL_ADC_MspInit+0x154>)
 800129c:	4293      	cmp	r3, r2
 800129e:	f040 808c 	bne.w	80013ba <HAL_ADC_MspInit+0x14a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012a2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80012a6:	f04f 0300 	mov.w	r3, #0
 80012aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 10;
 80012ae:	230a      	movs	r3, #10
 80012b0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 60;
 80012b2:	233c      	movs	r3, #60	; 0x3c
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80012b6:	2302      	movs	r3, #2
 80012b8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80012ba:	2302      	movs	r3, #2
 80012bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80012be:	2302      	movs	r3, #2
 80012c0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 80012c2:	2340      	movs	r3, #64	; 0x40
 80012c4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80012c6:	2320      	movs	r3, #32
 80012c8:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80012ce:	2300      	movs	r3, #0
 80012d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012d4:	f107 0318 	add.w	r3, r7, #24
 80012d8:	4618      	mov	r0, r3
 80012da:	f003 fe19 	bl	8004f10 <HAL_RCCEx_PeriphCLKConfig>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 80012e4:	f7ff ff92 	bl	800120c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80012e8:	4b37      	ldr	r3, [pc, #220]	; (80013c8 <HAL_ADC_MspInit+0x158>)
 80012ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012ee:	4a36      	ldr	r2, [pc, #216]	; (80013c8 <HAL_ADC_MspInit+0x158>)
 80012f0:	f043 0320 	orr.w	r3, r3, #32
 80012f4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012f8:	4b33      	ldr	r3, [pc, #204]	; (80013c8 <HAL_ADC_MspInit+0x158>)
 80012fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012fe:	f003 0320 	and.w	r3, r3, #32
 8001302:	617b      	str	r3, [r7, #20]
 8001304:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001306:	4b30      	ldr	r3, [pc, #192]	; (80013c8 <HAL_ADC_MspInit+0x158>)
 8001308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800130c:	4a2e      	ldr	r2, [pc, #184]	; (80013c8 <HAL_ADC_MspInit+0x158>)
 800130e:	f043 0304 	orr.w	r3, r3, #4
 8001312:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001316:	4b2c      	ldr	r3, [pc, #176]	; (80013c8 <HAL_ADC_MspInit+0x158>)
 8001318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800131c:	f003 0304 	and.w	r3, r3, #4
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001324:	4b28      	ldr	r3, [pc, #160]	; (80013c8 <HAL_ADC_MspInit+0x158>)
 8001326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800132a:	4a27      	ldr	r2, [pc, #156]	; (80013c8 <HAL_ADC_MspInit+0x158>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001334:	4b24      	ldr	r3, [pc, #144]	; (80013c8 <HAL_ADC_MspInit+0x158>)
 8001336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	4b21      	ldr	r3, [pc, #132]	; (80013c8 <HAL_ADC_MspInit+0x158>)
 8001344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001348:	4a1f      	ldr	r2, [pc, #124]	; (80013c8 <HAL_ADC_MspInit+0x158>)
 800134a:	f043 0302 	orr.w	r3, r3, #2
 800134e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001352:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <HAL_ADC_MspInit+0x158>)
 8001354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001358:	f003 0302 	and.w	r3, r3, #2
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = F06_Pin|F07_Pin|F01_Pin|F04_Pin;
 8001360:	2333      	movs	r3, #51	; 0x33
 8001362:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001366:	2303      	movs	r3, #3
 8001368:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001372:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001376:	4619      	mov	r1, r3
 8001378:	4814      	ldr	r0, [pc, #80]	; (80013cc <HAL_ADC_MspInit+0x15c>)
 800137a:	f002 f8a5 	bl	80034c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = F00_Pin|F03_Pin;
 800137e:	23c0      	movs	r3, #192	; 0xc0
 8001380:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001384:	2303      	movs	r3, #3
 8001386:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001390:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001394:	4619      	mov	r1, r3
 8001396:	480e      	ldr	r0, [pc, #56]	; (80013d0 <HAL_ADC_MspInit+0x160>)
 8001398:	f002 f896 	bl	80034c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = F05_Pin|F02_Pin;
 800139c:	2303      	movs	r3, #3
 800139e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a2:	2303      	movs	r3, #3
 80013a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ae:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013b2:	4619      	mov	r1, r3
 80013b4:	4807      	ldr	r0, [pc, #28]	; (80013d4 <HAL_ADC_MspInit+0x164>)
 80013b6:	f002 f887 	bl	80034c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013ba:	bf00      	nop
 80013bc:	37f0      	adds	r7, #240	; 0xf0
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40022000 	.word	0x40022000
 80013c8:	58024400 	.word	0x58024400
 80013cc:	58020800 	.word	0x58020800
 80013d0:	58020000 	.word	0x58020000
 80013d4:	58020400 	.word	0x58020400

080013d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b0ba      	sub	sp, #232	; 0xe8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	22c0      	movs	r2, #192	; 0xc0
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f00a fe75 	bl	800c0e8 <memset>
  if(hi2c->Instance==I2C1)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a27      	ldr	r2, [pc, #156]	; (80014a0 <HAL_I2C_MspInit+0xc8>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d146      	bne.n	8001496 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001408:	f04f 0208 	mov.w	r2, #8
 800140c:	f04f 0300 	mov.w	r3, #0
 8001410:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800141a:	f107 0310 	add.w	r3, r7, #16
 800141e:	4618      	mov	r0, r3
 8001420:	f003 fd76 	bl	8004f10 <HAL_RCCEx_PeriphCLKConfig>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800142a:	f7ff feef 	bl	800120c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800142e:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <HAL_I2C_MspInit+0xcc>)
 8001430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001434:	4a1b      	ldr	r2, [pc, #108]	; (80014a4 <HAL_I2C_MspInit+0xcc>)
 8001436:	f043 0302 	orr.w	r3, r3, #2
 800143a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800143e:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <HAL_I2C_MspInit+0xcc>)
 8001440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800144c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001450:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001454:	2312      	movs	r3, #18
 8001456:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2300      	movs	r3, #0
 8001462:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001466:	2304      	movs	r3, #4
 8001468:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001470:	4619      	mov	r1, r3
 8001472:	480d      	ldr	r0, [pc, #52]	; (80014a8 <HAL_I2C_MspInit+0xd0>)
 8001474:	f002 f828 	bl	80034c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001478:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <HAL_I2C_MspInit+0xcc>)
 800147a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800147e:	4a09      	ldr	r2, [pc, #36]	; (80014a4 <HAL_I2C_MspInit+0xcc>)
 8001480:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001484:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <HAL_I2C_MspInit+0xcc>)
 800148a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800148e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001496:	bf00      	nop
 8001498:	37e8      	adds	r7, #232	; 0xe8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40005400 	.word	0x40005400
 80014a4:	58024400 	.word	0x58024400
 80014a8:	58020400 	.word	0x58020400

080014ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b0c0      	sub	sp, #256	; 0x100
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014c8:	22c0      	movs	r2, #192	; 0xc0
 80014ca:	2100      	movs	r1, #0
 80014cc:	4618      	mov	r0, r3
 80014ce:	f00a fe0b 	bl	800c0e8 <memset>
  if(huart->Instance==LPUART1)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a86      	ldr	r2, [pc, #536]	; (80016f0 <HAL_UART_MspInit+0x244>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d147      	bne.n	800156c <HAL_UART_MspInit+0xc0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80014dc:	f04f 0204 	mov.w	r2, #4
 80014e0:	f04f 0300 	mov.w	r3, #0
 80014e4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 80014e8:	2300      	movs	r3, #0
 80014ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014f2:	4618      	mov	r0, r3
 80014f4:	f003 fd0c 	bl	8004f10 <HAL_RCCEx_PeriphCLKConfig>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80014fe:	f7ff fe85 	bl	800120c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001502:	4b7c      	ldr	r3, [pc, #496]	; (80016f4 <HAL_UART_MspInit+0x248>)
 8001504:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001508:	4a7a      	ldr	r2, [pc, #488]	; (80016f4 <HAL_UART_MspInit+0x248>)
 800150a:	f043 0308 	orr.w	r3, r3, #8
 800150e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001512:	4b78      	ldr	r3, [pc, #480]	; (80016f4 <HAL_UART_MspInit+0x248>)
 8001514:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001518:	f003 0308 	and.w	r3, r3, #8
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
 800151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001520:	4b74      	ldr	r3, [pc, #464]	; (80016f4 <HAL_UART_MspInit+0x248>)
 8001522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001526:	4a73      	ldr	r2, [pc, #460]	; (80016f4 <HAL_UART_MspInit+0x248>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001530:	4b70      	ldr	r3, [pc, #448]	; (80016f4 <HAL_UART_MspInit+0x248>)
 8001532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	623b      	str	r3, [r7, #32]
 800153c:	6a3b      	ldr	r3, [r7, #32]
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800153e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001542:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001552:	2300      	movs	r3, #0
 8001554:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 8001558:	2303      	movs	r3, #3
 800155a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001562:	4619      	mov	r1, r3
 8001564:	4864      	ldr	r0, [pc, #400]	; (80016f8 <HAL_UART_MspInit+0x24c>)
 8001566:	f001 ffaf 	bl	80034c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 800156a:	e0bc      	b.n	80016e6 <HAL_UART_MspInit+0x23a>
  else if(huart->Instance==UART4)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a62      	ldr	r2, [pc, #392]	; (80016fc <HAL_UART_MspInit+0x250>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d146      	bne.n	8001604 <HAL_UART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001576:	f04f 0202 	mov.w	r2, #2
 800157a:	f04f 0300 	mov.w	r3, #0
 800157e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001582:	2300      	movs	r3, #0
 8001584:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001588:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800158c:	4618      	mov	r0, r3
 800158e:	f003 fcbf 	bl	8004f10 <HAL_RCCEx_PeriphCLKConfig>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8001598:	f7ff fe38 	bl	800120c <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 800159c:	4b55      	ldr	r3, [pc, #340]	; (80016f4 <HAL_UART_MspInit+0x248>)
 800159e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015a2:	4a54      	ldr	r2, [pc, #336]	; (80016f4 <HAL_UART_MspInit+0x248>)
 80015a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015a8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015ac:	4b51      	ldr	r3, [pc, #324]	; (80016f4 <HAL_UART_MspInit+0x248>)
 80015ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015b6:	61fb      	str	r3, [r7, #28]
 80015b8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ba:	4b4e      	ldr	r3, [pc, #312]	; (80016f4 <HAL_UART_MspInit+0x248>)
 80015bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c0:	4a4c      	ldr	r2, [pc, #304]	; (80016f4 <HAL_UART_MspInit+0x248>)
 80015c2:	f043 0308 	orr.w	r3, r3, #8
 80015c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015ca:	4b4a      	ldr	r3, [pc, #296]	; (80016f4 <HAL_UART_MspInit+0x248>)
 80015cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d0:	f003 0308 	and.w	r3, r3, #8
 80015d4:	61bb      	str	r3, [r7, #24]
 80015d6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015d8:	2303      	movs	r3, #3
 80015da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015de:	2302      	movs	r3, #2
 80015e0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2300      	movs	r3, #0
 80015ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80015f0:	2308      	movs	r3, #8
 80015f2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015f6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80015fa:	4619      	mov	r1, r3
 80015fc:	4840      	ldr	r0, [pc, #256]	; (8001700 <HAL_UART_MspInit+0x254>)
 80015fe:	f001 ff63 	bl	80034c8 <HAL_GPIO_Init>
}
 8001602:	e070      	b.n	80016e6 <HAL_UART_MspInit+0x23a>
  else if(huart->Instance==UART7)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a3e      	ldr	r2, [pc, #248]	; (8001704 <HAL_UART_MspInit+0x258>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d16b      	bne.n	80016e6 <HAL_UART_MspInit+0x23a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800160e:	f04f 0202 	mov.w	r2, #2
 8001612:	f04f 0300 	mov.w	r3, #0
 8001616:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800161a:	2300      	movs	r3, #0
 800161c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001620:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001624:	4618      	mov	r0, r3
 8001626:	f003 fc73 	bl	8004f10 <HAL_RCCEx_PeriphCLKConfig>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <HAL_UART_MspInit+0x188>
      Error_Handler();
 8001630:	f7ff fdec 	bl	800120c <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8001634:	4b2f      	ldr	r3, [pc, #188]	; (80016f4 <HAL_UART_MspInit+0x248>)
 8001636:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800163a:	4a2e      	ldr	r2, [pc, #184]	; (80016f4 <HAL_UART_MspInit+0x248>)
 800163c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001640:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001644:	4b2b      	ldr	r3, [pc, #172]	; (80016f4 <HAL_UART_MspInit+0x248>)
 8001646:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800164a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001652:	4b28      	ldr	r3, [pc, #160]	; (80016f4 <HAL_UART_MspInit+0x248>)
 8001654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001658:	4a26      	ldr	r2, [pc, #152]	; (80016f4 <HAL_UART_MspInit+0x248>)
 800165a:	f043 0310 	orr.w	r3, r3, #16
 800165e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001662:	4b24      	ldr	r3, [pc, #144]	; (80016f4 <HAL_UART_MspInit+0x248>)
 8001664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001668:	f003 0310 	and.w	r3, r3, #16
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001670:	4b20      	ldr	r3, [pc, #128]	; (80016f4 <HAL_UART_MspInit+0x248>)
 8001672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001676:	4a1f      	ldr	r2, [pc, #124]	; (80016f4 <HAL_UART_MspInit+0x248>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001680:	4b1c      	ldr	r3, [pc, #112]	; (80016f4 <HAL_UART_MspInit+0x248>)
 8001682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800168e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001692:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a2:	2300      	movs	r3, #0
 80016a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80016a8:	2307      	movs	r3, #7
 80016aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ae:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80016b2:	4619      	mov	r1, r3
 80016b4:	4814      	ldr	r0, [pc, #80]	; (8001708 <HAL_UART_MspInit+0x25c>)
 80016b6:	f001 ff07 	bl	80034c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c2:	2302      	movs	r3, #2
 80016c4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ce:	2300      	movs	r3, #0
 80016d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
 80016d4:	230b      	movs	r3, #11
 80016d6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016da:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80016de:	4619      	mov	r1, r3
 80016e0:	4805      	ldr	r0, [pc, #20]	; (80016f8 <HAL_UART_MspInit+0x24c>)
 80016e2:	f001 fef1 	bl	80034c8 <HAL_GPIO_Init>
}
 80016e6:	bf00      	nop
 80016e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	58000c00 	.word	0x58000c00
 80016f4:	58024400 	.word	0x58024400
 80016f8:	58020000 	.word	0x58020000
 80016fc:	40004c00 	.word	0x40004c00
 8001700:	58020c00 	.word	0x58020c00
 8001704:	40007800 	.word	0x40007800
 8001708:	58021000 	.word	0x58021000

0800170c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b0bc      	sub	sp, #240	; 0xf0
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001724:	f107 0318 	add.w	r3, r7, #24
 8001728:	22c0      	movs	r2, #192	; 0xc0
 800172a:	2100      	movs	r1, #0
 800172c:	4618      	mov	r0, r3
 800172e:	f00a fcdb 	bl	800c0e8 <memset>
  if(hqspi->Instance==QUADSPI)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a55      	ldr	r2, [pc, #340]	; (800188c <HAL_QSPI_MspInit+0x180>)
 8001738:	4293      	cmp	r3, r2
 800173a:	f040 80a3 	bne.w	8001884 <HAL_QSPI_MspInit+0x178>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800173e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001742:	f04f 0300 	mov.w	r3, #0
 8001746:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 800174a:	2300      	movs	r3, #0
 800174c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800174e:	f107 0318 	add.w	r3, r7, #24
 8001752:	4618      	mov	r0, r3
 8001754:	f003 fbdc 	bl	8004f10 <HAL_RCCEx_PeriphCLKConfig>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 800175e:	f7ff fd55 	bl	800120c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001762:	4b4b      	ldr	r3, [pc, #300]	; (8001890 <HAL_QSPI_MspInit+0x184>)
 8001764:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001768:	4a49      	ldr	r2, [pc, #292]	; (8001890 <HAL_QSPI_MspInit+0x184>)
 800176a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800176e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001772:	4b47      	ldr	r3, [pc, #284]	; (8001890 <HAL_QSPI_MspInit+0x184>)
 8001774:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001778:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800177c:	617b      	str	r3, [r7, #20]
 800177e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001780:	4b43      	ldr	r3, [pc, #268]	; (8001890 <HAL_QSPI_MspInit+0x184>)
 8001782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001786:	4a42      	ldr	r2, [pc, #264]	; (8001890 <HAL_QSPI_MspInit+0x184>)
 8001788:	f043 0310 	orr.w	r3, r3, #16
 800178c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001790:	4b3f      	ldr	r3, [pc, #252]	; (8001890 <HAL_QSPI_MspInit+0x184>)
 8001792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001796:	f003 0310 	and.w	r3, r3, #16
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800179e:	4b3c      	ldr	r3, [pc, #240]	; (8001890 <HAL_QSPI_MspInit+0x184>)
 80017a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017a4:	4a3a      	ldr	r2, [pc, #232]	; (8001890 <HAL_QSPI_MspInit+0x184>)
 80017a6:	f043 0302 	orr.w	r3, r3, #2
 80017aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017ae:	4b38      	ldr	r3, [pc, #224]	; (8001890 <HAL_QSPI_MspInit+0x184>)
 80017b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017bc:	4b34      	ldr	r3, [pc, #208]	; (8001890 <HAL_QSPI_MspInit+0x184>)
 80017be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017c2:	4a33      	ldr	r2, [pc, #204]	; (8001890 <HAL_QSPI_MspInit+0x184>)
 80017c4:	f043 0308 	orr.w	r3, r3, #8
 80017c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017cc:	4b30      	ldr	r3, [pc, #192]	; (8001890 <HAL_QSPI_MspInit+0x184>)
 80017ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	68bb      	ldr	r3, [r7, #8]
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017da:	2304      	movs	r3, #4
 80017dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e0:	2302      	movs	r3, #2
 80017e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ec:	2300      	movs	r3, #0
 80017ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80017f2:	2309      	movs	r3, #9
 80017f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017fc:	4619      	mov	r1, r3
 80017fe:	4825      	ldr	r0, [pc, #148]	; (8001894 <HAL_QSPI_MspInit+0x188>)
 8001800:	f001 fe62 	bl	80034c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001804:	2304      	movs	r3, #4
 8001806:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180a:	2302      	movs	r3, #2
 800180c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001816:	2300      	movs	r3, #0
 8001818:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800181c:	2309      	movs	r3, #9
 800181e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001822:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001826:	4619      	mov	r1, r3
 8001828:	481b      	ldr	r0, [pc, #108]	; (8001898 <HAL_QSPI_MspInit+0x18c>)
 800182a:	f001 fe4d 	bl	80034c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800182e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001832:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001836:	2302      	movs	r3, #2
 8001838:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001842:	2300      	movs	r3, #0
 8001844:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001848:	2309      	movs	r3, #9
 800184a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800184e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001852:	4619      	mov	r1, r3
 8001854:	4811      	ldr	r0, [pc, #68]	; (800189c <HAL_QSPI_MspInit+0x190>)
 8001856:	f001 fe37 	bl	80034c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800185a:	2340      	movs	r3, #64	; 0x40
 800185c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
 8001862:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186c:	2300      	movs	r3, #0
 800186e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001872:	230a      	movs	r3, #10
 8001874:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001878:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800187c:	4619      	mov	r1, r3
 800187e:	4806      	ldr	r0, [pc, #24]	; (8001898 <HAL_QSPI_MspInit+0x18c>)
 8001880:	f001 fe22 	bl	80034c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001884:	bf00      	nop
 8001886:	37f0      	adds	r7, #240	; 0xf0
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	52005000 	.word	0x52005000
 8001890:	58024400 	.word	0x58024400
 8001894:	58021000 	.word	0x58021000
 8001898:	58020400 	.word	0x58020400
 800189c:	58020c00 	.word	0x58020c00

080018a0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b0bc      	sub	sp, #240	; 0xf0
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018b8:	f107 0318 	add.w	r3, r7, #24
 80018bc:	22c0      	movs	r2, #192	; 0xc0
 80018be:	2100      	movs	r1, #0
 80018c0:	4618      	mov	r0, r3
 80018c2:	f00a fc11 	bl	800c0e8 <memset>
  if(hsd->Instance==SDMMC1)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a38      	ldr	r2, [pc, #224]	; (80019ac <HAL_SD_MspInit+0x10c>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d169      	bne.n	80019a4 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80018d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018d4:	f04f 0300 	mov.w	r3, #0
 80018d8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80018dc:	2300      	movs	r3, #0
 80018de:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018e0:	f107 0318 	add.w	r3, r7, #24
 80018e4:	4618      	mov	r0, r3
 80018e6:	f003 fb13 	bl	8004f10 <HAL_RCCEx_PeriphCLKConfig>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80018f0:	f7ff fc8c 	bl	800120c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80018f4:	4b2e      	ldr	r3, [pc, #184]	; (80019b0 <HAL_SD_MspInit+0x110>)
 80018f6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80018fa:	4a2d      	ldr	r2, [pc, #180]	; (80019b0 <HAL_SD_MspInit+0x110>)
 80018fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001900:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001904:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <HAL_SD_MspInit+0x110>)
 8001906:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800190a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001912:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <HAL_SD_MspInit+0x110>)
 8001914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001918:	4a25      	ldr	r2, [pc, #148]	; (80019b0 <HAL_SD_MspInit+0x110>)
 800191a:	f043 0304 	orr.w	r3, r3, #4
 800191e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001922:	4b23      	ldr	r3, [pc, #140]	; (80019b0 <HAL_SD_MspInit+0x110>)
 8001924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001930:	4b1f      	ldr	r3, [pc, #124]	; (80019b0 <HAL_SD_MspInit+0x110>)
 8001932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001936:	4a1e      	ldr	r2, [pc, #120]	; (80019b0 <HAL_SD_MspInit+0x110>)
 8001938:	f043 0308 	orr.w	r3, r3, #8
 800193c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001940:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <HAL_SD_MspInit+0x110>)
 8001942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001946:	f003 0308 	and.w	r3, r3, #8
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800194e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001952:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	2302      	movs	r3, #2
 8001958:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001962:	2303      	movs	r3, #3
 8001964:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001968:	230c      	movs	r3, #12
 800196a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800196e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001972:	4619      	mov	r1, r3
 8001974:	480f      	ldr	r0, [pc, #60]	; (80019b4 <HAL_SD_MspInit+0x114>)
 8001976:	f001 fda7 	bl	80034c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800197a:	2304      	movs	r3, #4
 800197c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198c:	2303      	movs	r3, #3
 800198e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001992:	230c      	movs	r3, #12
 8001994:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001998:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800199c:	4619      	mov	r1, r3
 800199e:	4806      	ldr	r0, [pc, #24]	; (80019b8 <HAL_SD_MspInit+0x118>)
 80019a0:	f001 fd92 	bl	80034c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80019a4:	bf00      	nop
 80019a6:	37f0      	adds	r7, #240	; 0xf0
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	52007000 	.word	0x52007000
 80019b0:	58024400 	.word	0x58024400
 80019b4:	58020800 	.word	0x58020800
 80019b8:	58020c00 	.word	0x58020c00

080019bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b0be      	sub	sp, #248	; 0xf8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019d4:	f107 0320 	add.w	r3, r7, #32
 80019d8:	22c0      	movs	r2, #192	; 0xc0
 80019da:	2100      	movs	r1, #0
 80019dc:	4618      	mov	r0, r3
 80019de:	f00a fb83 	bl	800c0e8 <memset>
  if(hspi->Instance==SPI1)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a5f      	ldr	r2, [pc, #380]	; (8001b64 <HAL_SPI_MspInit+0x1a8>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d16a      	bne.n	8001ac2 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80019ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019f0:	f04f 0300 	mov.w	r3, #0
 80019f4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019fe:	f107 0320 	add.w	r3, r7, #32
 8001a02:	4618      	mov	r0, r3
 8001a04:	f003 fa84 	bl	8004f10 <HAL_RCCEx_PeriphCLKConfig>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001a0e:	f7ff fbfd 	bl	800120c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a12:	4b55      	ldr	r3, [pc, #340]	; (8001b68 <HAL_SPI_MspInit+0x1ac>)
 8001a14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a18:	4a53      	ldr	r2, [pc, #332]	; (8001b68 <HAL_SPI_MspInit+0x1ac>)
 8001a1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a1e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a22:	4b51      	ldr	r3, [pc, #324]	; (8001b68 <HAL_SPI_MspInit+0x1ac>)
 8001a24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a2c:	61fb      	str	r3, [r7, #28]
 8001a2e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a30:	4b4d      	ldr	r3, [pc, #308]	; (8001b68 <HAL_SPI_MspInit+0x1ac>)
 8001a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a36:	4a4c      	ldr	r2, [pc, #304]	; (8001b68 <HAL_SPI_MspInit+0x1ac>)
 8001a38:	f043 0308 	orr.w	r3, r3, #8
 8001a3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a40:	4b49      	ldr	r3, [pc, #292]	; (8001b68 <HAL_SPI_MspInit+0x1ac>)
 8001a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a46:	f003 0308 	and.w	r3, r3, #8
 8001a4a:	61bb      	str	r3, [r7, #24]
 8001a4c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4e:	4b46      	ldr	r3, [pc, #280]	; (8001b68 <HAL_SPI_MspInit+0x1ac>)
 8001a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a54:	4a44      	ldr	r2, [pc, #272]	; (8001b68 <HAL_SPI_MspInit+0x1ac>)
 8001a56:	f043 0302 	orr.w	r3, r3, #2
 8001a5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a5e:	4b42      	ldr	r3, [pc, #264]	; (8001b68 <HAL_SPI_MspInit+0x1ac>)
 8001a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a6c:	2380      	movs	r3, #128	; 0x80
 8001a6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a72:	2302      	movs	r3, #2
 8001a74:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a84:	2305      	movs	r3, #5
 8001a86:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a8a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4836      	ldr	r0, [pc, #216]	; (8001b6c <HAL_SPI_MspInit+0x1b0>)
 8001a92:	f001 fd19 	bl	80034c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001a96:	2318      	movs	r3, #24
 8001a98:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001aae:	2305      	movs	r3, #5
 8001ab0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ab8:	4619      	mov	r1, r3
 8001aba:	482d      	ldr	r0, [pc, #180]	; (8001b70 <HAL_SPI_MspInit+0x1b4>)
 8001abc:	f001 fd04 	bl	80034c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001ac0:	e04b      	b.n	8001b5a <HAL_SPI_MspInit+0x19e>
  else if(hspi->Instance==SPI4)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a2b      	ldr	r2, [pc, #172]	; (8001b74 <HAL_SPI_MspInit+0x1b8>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d146      	bne.n	8001b5a <HAL_SPI_MspInit+0x19e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001acc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ad0:	f04f 0300 	mov.w	r3, #0
 8001ad4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ade:	f107 0320 	add.w	r3, r7, #32
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f003 fa14 	bl	8004f10 <HAL_RCCEx_PeriphCLKConfig>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <HAL_SPI_MspInit+0x136>
      Error_Handler();
 8001aee:	f7ff fb8d 	bl	800120c <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001af2:	4b1d      	ldr	r3, [pc, #116]	; (8001b68 <HAL_SPI_MspInit+0x1ac>)
 8001af4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001af8:	4a1b      	ldr	r2, [pc, #108]	; (8001b68 <HAL_SPI_MspInit+0x1ac>)
 8001afa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001afe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b02:	4b19      	ldr	r3, [pc, #100]	; (8001b68 <HAL_SPI_MspInit+0x1ac>)
 8001b04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b10:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <HAL_SPI_MspInit+0x1ac>)
 8001b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b16:	4a14      	ldr	r2, [pc, #80]	; (8001b68 <HAL_SPI_MspInit+0x1ac>)
 8001b18:	f043 0310 	orr.w	r3, r3, #16
 8001b1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b20:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <HAL_SPI_MspInit+0x1ac>)
 8001b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b26:	f003 0310 	and.w	r3, r3, #16
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_WR_RS_Pin|LCD_SDA_Pin;
 8001b2e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001b32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b36:	2302      	movs	r3, #2
 8001b38:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b42:	2300      	movs	r3, #0
 8001b44:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001b48:	2305      	movs	r3, #5
 8001b4a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b4e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001b52:	4619      	mov	r1, r3
 8001b54:	4808      	ldr	r0, [pc, #32]	; (8001b78 <HAL_SPI_MspInit+0x1bc>)
 8001b56:	f001 fcb7 	bl	80034c8 <HAL_GPIO_Init>
}
 8001b5a:	bf00      	nop
 8001b5c:	37f8      	adds	r7, #248	; 0xf8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40013000 	.word	0x40013000
 8001b68:	58024400 	.word	0x58024400
 8001b6c:	58020c00 	.word	0x58020c00
 8001b70:	58020400 	.word	0x58020400
 8001b74:	40013400 	.word	0x40013400
 8001b78:	58021000 	.word	0x58021000

08001b7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a0b      	ldr	r2, [pc, #44]	; (8001bb8 <HAL_TIM_Base_MspInit+0x3c>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d10e      	bne.n	8001bac <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <HAL_TIM_Base_MspInit+0x40>)
 8001b90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b94:	4a09      	ldr	r2, [pc, #36]	; (8001bbc <HAL_TIM_Base_MspInit+0x40>)
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b9e:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <HAL_TIM_Base_MspInit+0x40>)
 8001ba0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001bac:	bf00      	nop
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	40010000 	.word	0x40010000
 8001bbc:	58024400 	.word	0x58024400

08001bc0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bd0:	d10f      	bne.n	8001bf2 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bd2:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <HAL_TIM_PWM_MspInit+0x68>)
 8001bd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bd8:	4a13      	ldr	r2, [pc, #76]	; (8001c28 <HAL_TIM_PWM_MspInit+0x68>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001be2:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <HAL_TIM_PWM_MspInit+0x68>)
 8001be4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001bf0:	e013      	b.n	8001c1a <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM3)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a0d      	ldr	r2, [pc, #52]	; (8001c2c <HAL_TIM_PWM_MspInit+0x6c>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d10e      	bne.n	8001c1a <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bfc:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <HAL_TIM_PWM_MspInit+0x68>)
 8001bfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c02:	4a09      	ldr	r2, [pc, #36]	; (8001c28 <HAL_TIM_PWM_MspInit+0x68>)
 8001c04:	f043 0302 	orr.w	r3, r3, #2
 8001c08:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <HAL_TIM_PWM_MspInit+0x68>)
 8001c0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	60bb      	str	r3, [r7, #8]
 8001c18:	68bb      	ldr	r3, [r7, #8]
}
 8001c1a:	bf00      	nop
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	58024400 	.word	0x58024400
 8001c2c:	40000400 	.word	0x40000400

08001c30 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08a      	sub	sp, #40	; 0x28
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a1a      	ldr	r2, [pc, #104]	; (8001cb8 <HAL_TIM_IC_MspInit+0x88>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d12e      	bne.n	8001cb0 <HAL_TIM_IC_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c52:	4b1a      	ldr	r3, [pc, #104]	; (8001cbc <HAL_TIM_IC_MspInit+0x8c>)
 8001c54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c58:	4a18      	ldr	r2, [pc, #96]	; (8001cbc <HAL_TIM_IC_MspInit+0x8c>)
 8001c5a:	f043 0304 	orr.w	r3, r3, #4
 8001c5e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c62:	4b16      	ldr	r3, [pc, #88]	; (8001cbc <HAL_TIM_IC_MspInit+0x8c>)
 8001c64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <HAL_TIM_IC_MspInit+0x8c>)
 8001c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c76:	4a11      	ldr	r2, [pc, #68]	; (8001cbc <HAL_TIM_IC_MspInit+0x8c>)
 8001c78:	f043 0308 	orr.w	r3, r3, #8
 8001c7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c80:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <HAL_TIM_IC_MspInit+0x8c>)
 8001c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c86:	f003 0308 	and.w	r3, r3, #8
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = Servo_Input_Pin|ESC_Input_Pin;
 8001c8e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c94:	2302      	movs	r3, #2
 8001c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4805      	ldr	r0, [pc, #20]	; (8001cc0 <HAL_TIM_IC_MspInit+0x90>)
 8001cac:	f001 fc0c 	bl	80034c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001cb0:	bf00      	nop
 8001cb2:	3728      	adds	r7, #40	; 0x28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40000800 	.word	0x40000800
 8001cbc:	58024400 	.word	0x58024400
 8001cc0:	58020c00 	.word	0x58020c00

08001cc4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08a      	sub	sp, #40	; 0x28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce4:	d11f      	bne.n	8001d26 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce6:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <HAL_TIM_MspPostInit+0xb4>)
 8001ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cec:	4a22      	ldr	r2, [pc, #136]	; (8001d78 <HAL_TIM_MspPostInit+0xb4>)
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cf6:	4b20      	ldr	r3, [pc, #128]	; (8001d78 <HAL_TIM_MspPostInit+0xb4>)
 8001cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	693b      	ldr	r3, [r7, #16]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM0_Pin|PWM1_Pin|PWM2_Pin|PWM3_Pin;
 8001d04:	230f      	movs	r3, #15
 8001d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d10:	2300      	movs	r3, #0
 8001d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d14:	2301      	movs	r3, #1
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d18:	f107 0314 	add.w	r3, r7, #20
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4817      	ldr	r0, [pc, #92]	; (8001d7c <HAL_TIM_MspPostInit+0xb8>)
 8001d20:	f001 fbd2 	bl	80034c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d24:	e023      	b.n	8001d6e <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM3)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a15      	ldr	r2, [pc, #84]	; (8001d80 <HAL_TIM_MspPostInit+0xbc>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d11e      	bne.n	8001d6e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d30:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <HAL_TIM_MspPostInit+0xb4>)
 8001d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d36:	4a10      	ldr	r2, [pc, #64]	; (8001d78 <HAL_TIM_MspPostInit+0xb4>)
 8001d38:	f043 0304 	orr.w	r3, r3, #4
 8001d3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d40:	4b0d      	ldr	r3, [pc, #52]	; (8001d78 <HAL_TIM_MspPostInit+0xb4>)
 8001d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d46:	f003 0304 	and.w	r3, r3, #4
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo_Output_Pin|ESC_Output_Pin;
 8001d4e:	23c0      	movs	r3, #192	; 0xc0
 8001d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d52:	2302      	movs	r3, #2
 8001d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d62:	f107 0314 	add.w	r3, r7, #20
 8001d66:	4619      	mov	r1, r3
 8001d68:	4806      	ldr	r0, [pc, #24]	; (8001d84 <HAL_TIM_MspPostInit+0xc0>)
 8001d6a:	f001 fbad 	bl	80034c8 <HAL_GPIO_Init>
}
 8001d6e:	bf00      	nop
 8001d70:	3728      	adds	r7, #40	; 0x28
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	58024400 	.word	0x58024400
 8001d7c:	58020000 	.word	0x58020000
 8001d80:	40000400 	.word	0x40000400
 8001d84:	58020800 	.word	0x58020800

08001d88 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b0ba      	sub	sp, #232	; 0xe8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001da0:	f107 0310 	add.w	r3, r7, #16
 8001da4:	22c0      	movs	r2, #192	; 0xc0
 8001da6:	2100      	movs	r1, #0
 8001da8:	4618      	mov	r0, r3
 8001daa:	f00a f99d 	bl	800c0e8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a28      	ldr	r2, [pc, #160]	; (8001e54 <HAL_PCD_MspInit+0xcc>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d149      	bne.n	8001e4c <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001db8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001dbc:	f04f 0300 	mov.w	r3, #0
 8001dc0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001dc4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001dc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dcc:	f107 0310 	add.w	r3, r7, #16
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f003 f89d 	bl	8004f10 <HAL_RCCEx_PeriphCLKConfig>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001ddc:	f7ff fa16 	bl	800120c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001de0:	f001 ffe6 	bl	8003db0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de4:	4b1c      	ldr	r3, [pc, #112]	; (8001e58 <HAL_PCD_MspInit+0xd0>)
 8001de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dea:	4a1b      	ldr	r2, [pc, #108]	; (8001e58 <HAL_PCD_MspInit+0xd0>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001df4:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <HAL_PCD_MspInit+0xd0>)
 8001df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001e02:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e16:	2300      	movs	r3, #0
 8001e18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001e1c:	230a      	movs	r3, #10
 8001e1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e22:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e26:	4619      	mov	r1, r3
 8001e28:	480c      	ldr	r0, [pc, #48]	; (8001e5c <HAL_PCD_MspInit+0xd4>)
 8001e2a:	f001 fb4d 	bl	80034c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001e2e:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <HAL_PCD_MspInit+0xd0>)
 8001e30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e34:	4a08      	ldr	r2, [pc, #32]	; (8001e58 <HAL_PCD_MspInit+0xd0>)
 8001e36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e3a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001e3e:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <HAL_PCD_MspInit+0xd0>)
 8001e40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001e4c:	bf00      	nop
 8001e4e:	37e8      	adds	r7, #232	; 0xe8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40080000 	.word	0x40080000
 8001e58:	58024400 	.word	0x58024400
 8001e5c:	58020000 	.word	0x58020000

08001e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e64:	e7fe      	b.n	8001e64 <NMI_Handler+0x4>

08001e66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e6a:	e7fe      	b.n	8001e6a <HardFault_Handler+0x4>

08001e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e70:	e7fe      	b.n	8001e70 <MemManage_Handler+0x4>

08001e72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e76:	e7fe      	b.n	8001e76 <BusFault_Handler+0x4>

08001e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e7c:	e7fe      	b.n	8001e7c <UsageFault_Handler+0x4>

08001e7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eac:	f000 f926 	bl	80020fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eb0:	bf00      	nop
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001eb8:	4b37      	ldr	r3, [pc, #220]	; (8001f98 <SystemInit+0xe4>)
 8001eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ebe:	4a36      	ldr	r2, [pc, #216]	; (8001f98 <SystemInit+0xe4>)
 8001ec0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ec4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ec8:	4b34      	ldr	r3, [pc, #208]	; (8001f9c <SystemInit+0xe8>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 030f 	and.w	r3, r3, #15
 8001ed0:	2b06      	cmp	r3, #6
 8001ed2:	d807      	bhi.n	8001ee4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ed4:	4b31      	ldr	r3, [pc, #196]	; (8001f9c <SystemInit+0xe8>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f023 030f 	bic.w	r3, r3, #15
 8001edc:	4a2f      	ldr	r2, [pc, #188]	; (8001f9c <SystemInit+0xe8>)
 8001ede:	f043 0307 	orr.w	r3, r3, #7
 8001ee2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001ee4:	4b2e      	ldr	r3, [pc, #184]	; (8001fa0 <SystemInit+0xec>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a2d      	ldr	r2, [pc, #180]	; (8001fa0 <SystemInit+0xec>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ef0:	4b2b      	ldr	r3, [pc, #172]	; (8001fa0 <SystemInit+0xec>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001ef6:	4b2a      	ldr	r3, [pc, #168]	; (8001fa0 <SystemInit+0xec>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	4929      	ldr	r1, [pc, #164]	; (8001fa0 <SystemInit+0xec>)
 8001efc:	4b29      	ldr	r3, [pc, #164]	; (8001fa4 <SystemInit+0xf0>)
 8001efe:	4013      	ands	r3, r2
 8001f00:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001f02:	4b26      	ldr	r3, [pc, #152]	; (8001f9c <SystemInit+0xe8>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d007      	beq.n	8001f1e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001f0e:	4b23      	ldr	r3, [pc, #140]	; (8001f9c <SystemInit+0xe8>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f023 030f 	bic.w	r3, r3, #15
 8001f16:	4a21      	ldr	r2, [pc, #132]	; (8001f9c <SystemInit+0xe8>)
 8001f18:	f043 0307 	orr.w	r3, r3, #7
 8001f1c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001f1e:	4b20      	ldr	r3, [pc, #128]	; (8001fa0 <SystemInit+0xec>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001f24:	4b1e      	ldr	r3, [pc, #120]	; (8001fa0 <SystemInit+0xec>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001f2a:	4b1d      	ldr	r3, [pc, #116]	; (8001fa0 <SystemInit+0xec>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001f30:	4b1b      	ldr	r3, [pc, #108]	; (8001fa0 <SystemInit+0xec>)
 8001f32:	4a1d      	ldr	r2, [pc, #116]	; (8001fa8 <SystemInit+0xf4>)
 8001f34:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001f36:	4b1a      	ldr	r3, [pc, #104]	; (8001fa0 <SystemInit+0xec>)
 8001f38:	4a1c      	ldr	r2, [pc, #112]	; (8001fac <SystemInit+0xf8>)
 8001f3a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001f3c:	4b18      	ldr	r3, [pc, #96]	; (8001fa0 <SystemInit+0xec>)
 8001f3e:	4a1c      	ldr	r2, [pc, #112]	; (8001fb0 <SystemInit+0xfc>)
 8001f40:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001f42:	4b17      	ldr	r3, [pc, #92]	; (8001fa0 <SystemInit+0xec>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001f48:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <SystemInit+0xec>)
 8001f4a:	4a19      	ldr	r2, [pc, #100]	; (8001fb0 <SystemInit+0xfc>)
 8001f4c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001f4e:	4b14      	ldr	r3, [pc, #80]	; (8001fa0 <SystemInit+0xec>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001f54:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <SystemInit+0xec>)
 8001f56:	4a16      	ldr	r2, [pc, #88]	; (8001fb0 <SystemInit+0xfc>)
 8001f58:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001f5a:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <SystemInit+0xec>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f60:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <SystemInit+0xec>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0e      	ldr	r2, [pc, #56]	; (8001fa0 <SystemInit+0xec>)
 8001f66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f6a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <SystemInit+0xec>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001f72:	4b10      	ldr	r3, [pc, #64]	; (8001fb4 <SystemInit+0x100>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <SystemInit+0x104>)
 8001f78:	4013      	ands	r3, r2
 8001f7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f7e:	d202      	bcs.n	8001f86 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001f80:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <SystemInit+0x108>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001f86:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <SystemInit+0x10c>)
 8001f88:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001f8c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001f8e:	bf00      	nop
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	e000ed00 	.word	0xe000ed00
 8001f9c:	52002000 	.word	0x52002000
 8001fa0:	58024400 	.word	0x58024400
 8001fa4:	eaf6ed7f 	.word	0xeaf6ed7f
 8001fa8:	02020200 	.word	0x02020200
 8001fac:	01ff0000 	.word	0x01ff0000
 8001fb0:	01010280 	.word	0x01010280
 8001fb4:	5c001000 	.word	0x5c001000
 8001fb8:	ffff0000 	.word	0xffff0000
 8001fbc:	51008108 	.word	0x51008108
 8001fc0:	52004000 	.word	0x52004000

08001fc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001fc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ffc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fc8:	f7ff ff74 	bl	8001eb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fcc:	480c      	ldr	r0, [pc, #48]	; (8002000 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fce:	490d      	ldr	r1, [pc, #52]	; (8002004 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fd0:	4a0d      	ldr	r2, [pc, #52]	; (8002008 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd4:	e002      	b.n	8001fdc <LoopCopyDataInit>

08001fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fda:	3304      	adds	r3, #4

08001fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe0:	d3f9      	bcc.n	8001fd6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fe2:	4a0a      	ldr	r2, [pc, #40]	; (800200c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fe4:	4c0a      	ldr	r4, [pc, #40]	; (8002010 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fe8:	e001      	b.n	8001fee <LoopFillZerobss>

08001fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fec:	3204      	adds	r2, #4

08001fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff0:	d3fb      	bcc.n	8001fea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ff2:	f00a f881 	bl	800c0f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ff6:	f7fe faed 	bl	80005d4 <main>
  bx  lr
 8001ffa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ffc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002000:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002004:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8002008:	0800c1a0 	.word	0x0800c1a0
  ldr r2, =_sbss
 800200c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8002010:	24000ab8 	.word	0x24000ab8

08002014 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002014:	e7fe      	b.n	8002014 <ADC3_IRQHandler>
	...

08002018 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800201e:	2003      	movs	r0, #3
 8002020:	f001 fa20 	bl	8003464 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002024:	f002 fd9e 	bl	8004b64 <HAL_RCC_GetSysClockFreq>
 8002028:	4602      	mov	r2, r0
 800202a:	4b15      	ldr	r3, [pc, #84]	; (8002080 <HAL_Init+0x68>)
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	0a1b      	lsrs	r3, r3, #8
 8002030:	f003 030f 	and.w	r3, r3, #15
 8002034:	4913      	ldr	r1, [pc, #76]	; (8002084 <HAL_Init+0x6c>)
 8002036:	5ccb      	ldrb	r3, [r1, r3]
 8002038:	f003 031f 	and.w	r3, r3, #31
 800203c:	fa22 f303 	lsr.w	r3, r2, r3
 8002040:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002042:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <HAL_Init+0x68>)
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	4a0e      	ldr	r2, [pc, #56]	; (8002084 <HAL_Init+0x6c>)
 800204c:	5cd3      	ldrb	r3, [r2, r3]
 800204e:	f003 031f 	and.w	r3, r3, #31
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	fa22 f303 	lsr.w	r3, r2, r3
 8002058:	4a0b      	ldr	r2, [pc, #44]	; (8002088 <HAL_Init+0x70>)
 800205a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800205c:	4a0b      	ldr	r2, [pc, #44]	; (800208c <HAL_Init+0x74>)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002062:	200f      	movs	r0, #15
 8002064:	f000 f814 	bl	8002090 <HAL_InitTick>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e002      	b.n	8002078 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002072:	f7ff f8d1 	bl	8001218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	58024400 	.word	0x58024400
 8002084:	0800c158 	.word	0x0800c158
 8002088:	24000004 	.word	0x24000004
 800208c:	24000000 	.word	0x24000000

08002090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002098:	4b15      	ldr	r3, [pc, #84]	; (80020f0 <HAL_InitTick+0x60>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e021      	b.n	80020e8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80020a4:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <HAL_InitTick+0x64>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <HAL_InitTick+0x60>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	4619      	mov	r1, r3
 80020ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ba:	4618      	mov	r0, r3
 80020bc:	f001 f9f7 	bl	80034ae <HAL_SYSTICK_Config>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e00e      	b.n	80020e8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b0f      	cmp	r3, #15
 80020ce:	d80a      	bhi.n	80020e6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020d0:	2200      	movs	r2, #0
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	f04f 30ff 	mov.w	r0, #4294967295
 80020d8:	f001 f9cf 	bl	800347a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020dc:	4a06      	ldr	r2, [pc, #24]	; (80020f8 <HAL_InitTick+0x68>)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
 80020e4:	e000      	b.n	80020e8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	2400000c 	.word	0x2400000c
 80020f4:	24000000 	.word	0x24000000
 80020f8:	24000008 	.word	0x24000008

080020fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002100:	4b06      	ldr	r3, [pc, #24]	; (800211c <HAL_IncTick+0x20>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	461a      	mov	r2, r3
 8002106:	4b06      	ldr	r3, [pc, #24]	; (8002120 <HAL_IncTick+0x24>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4413      	add	r3, r2
 800210c:	4a04      	ldr	r2, [pc, #16]	; (8002120 <HAL_IncTick+0x24>)
 800210e:	6013      	str	r3, [r2, #0]
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	2400000c 	.word	0x2400000c
 8002120:	24000ab4 	.word	0x24000ab4

08002124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return uwTick;
 8002128:	4b03      	ldr	r3, [pc, #12]	; (8002138 <HAL_GetTick+0x14>)
 800212a:	681b      	ldr	r3, [r3, #0]
}
 800212c:	4618      	mov	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	24000ab4 	.word	0x24000ab4

0800213c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002144:	f7ff ffee 	bl	8002124 <HAL_GetTick>
 8002148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002154:	d005      	beq.n	8002162 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002156:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <HAL_Delay+0x44>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	461a      	mov	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4413      	add	r3, r2
 8002160:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002162:	bf00      	nop
 8002164:	f7ff ffde 	bl	8002124 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	429a      	cmp	r2, r3
 8002172:	d8f7      	bhi.n	8002164 <HAL_Delay+0x28>
  {
  }
}
 8002174:	bf00      	nop
 8002176:	bf00      	nop
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	2400000c 	.word	0x2400000c

08002184 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002188:	4b03      	ldr	r3, [pc, #12]	; (8002198 <HAL_GetREVID+0x14>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	0c1b      	lsrs	r3, r3, #16
}
 800218e:	4618      	mov	r0, r3
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	5c001000 	.word	0x5c001000

0800219c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80021a4:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f023 0202 	bic.w	r2, r3, #2
 80021ac:	4904      	ldr	r1, [pc, #16]	; (80021c0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	600b      	str	r3, [r1, #0]
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	58003c00 	.word	0x58003c00

080021c4 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80021c8:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a04      	ldr	r2, [pc, #16]	; (80021e0 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80021ce:	f023 0301 	bic.w	r3, r3, #1
 80021d2:	6013      	str	r3, [r2, #0]
}
 80021d4:	bf00      	nop
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	58003c00 	.word	0x58003c00

080021e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	431a      	orrs	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	609a      	str	r2, [r3, #8]
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	609a      	str	r2, [r3, #8]
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002240:	4618      	mov	r0, r3
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800224c:	b480      	push	{r7}
 800224e:	b087      	sub	sp, #28
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
 8002258:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	3360      	adds	r3, #96	; 0x60
 800225e:	461a      	mov	r2, r3
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	430b      	orrs	r3, r1
 800227a:	431a      	orrs	r2, r3
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002280:	bf00      	nop
 8002282:	371c      	adds	r7, #28
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	f003 031f 	and.w	r3, r3, #31
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	fa01 f303 	lsl.w	r3, r1, r3
 80022ac:	431a      	orrs	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	611a      	str	r2, [r3, #16]
}
 80022b2:	bf00      	nop
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80022be:	b480      	push	{r7}
 80022c0:	b087      	sub	sp, #28
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	60f8      	str	r0, [r7, #12]
 80022c6:	60b9      	str	r1, [r7, #8]
 80022c8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	3360      	adds	r3, #96	; 0x60
 80022ce:	461a      	mov	r2, r3
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4413      	add	r3, r2
 80022d6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	431a      	orrs	r2, r3
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	601a      	str	r2, [r3, #0]
  }
}
 80022e8:	bf00      	nop
 80022ea:	371c      	adds	r7, #28
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b087      	sub	sp, #28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	3330      	adds	r3, #48	; 0x30
 8002304:	461a      	mov	r2, r3
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	0a1b      	lsrs	r3, r3, #8
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	f003 030c 	and.w	r3, r3, #12
 8002310:	4413      	add	r3, r2
 8002312:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	f003 031f 	and.w	r3, r3, #31
 800231e:	211f      	movs	r1, #31
 8002320:	fa01 f303 	lsl.w	r3, r1, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	401a      	ands	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	0e9b      	lsrs	r3, r3, #26
 800232c:	f003 011f 	and.w	r1, r3, #31
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	f003 031f 	and.w	r3, r3, #31
 8002336:	fa01 f303 	lsl.w	r3, r1, r3
 800233a:	431a      	orrs	r2, r3
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002340:	bf00      	nop
 8002342:	371c      	adds	r7, #28
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800234c:	b480      	push	{r7}
 800234e:	b087      	sub	sp, #28
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	3314      	adds	r3, #20
 800235c:	461a      	mov	r2, r3
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	0e5b      	lsrs	r3, r3, #25
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	4413      	add	r3, r2
 800236a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	0d1b      	lsrs	r3, r3, #20
 8002374:	f003 031f 	and.w	r3, r3, #31
 8002378:	2107      	movs	r1, #7
 800237a:	fa01 f303 	lsl.w	r3, r1, r3
 800237e:	43db      	mvns	r3, r3
 8002380:	401a      	ands	r2, r3
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	0d1b      	lsrs	r3, r3, #20
 8002386:	f003 031f 	and.w	r3, r3, #31
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	fa01 f303 	lsl.w	r3, r1, r3
 8002390:	431a      	orrs	r2, r3
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002396:	bf00      	nop
 8002398:	371c      	adds	r7, #28
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
	...

080023a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023bc:	43db      	mvns	r3, r3
 80023be:	401a      	ands	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f003 0318 	and.w	r3, r3, #24
 80023c6:	4908      	ldr	r1, [pc, #32]	; (80023e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80023c8:	40d9      	lsrs	r1, r3
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	400b      	ands	r3, r1
 80023ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023d2:	431a      	orrs	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80023da:	bf00      	nop
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	000fffff 	.word	0x000fffff

080023ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	4b04      	ldr	r3, [pc, #16]	; (800240c <LL_ADC_DisableDeepPowerDown+0x20>)
 80023fa:	4013      	ands	r3, r2
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6093      	str	r3, [r2, #8]
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	5fffffc0 	.word	0x5fffffc0

08002410 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002420:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002424:	d101      	bne.n	800242a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	4b05      	ldr	r3, [pc, #20]	; (800245c <LL_ADC_EnableInternalRegulator+0x24>)
 8002446:	4013      	ands	r3, r2
 8002448:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	6fffffc0 	.word	0x6fffffc0

08002460 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002470:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002474:	d101      	bne.n	800247a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002476:	2301      	movs	r3, #1
 8002478:	e000      	b.n	800247c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b01      	cmp	r3, #1
 800249a:	d101      	bne.n	80024a0 <LL_ADC_IsEnabled+0x18>
 800249c:	2301      	movs	r3, #1
 800249e:	e000      	b.n	80024a2 <LL_ADC_IsEnabled+0x1a>
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 0304 	and.w	r3, r3, #4
 80024be:	2b04      	cmp	r3, #4
 80024c0:	d101      	bne.n	80024c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80024c2:	2301      	movs	r3, #1
 80024c4:	e000      	b.n	80024c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f003 0308 	and.w	r3, r3, #8
 80024e4:	2b08      	cmp	r3, #8
 80024e6:	d101      	bne.n	80024ec <LL_ADC_INJ_IsConversionOngoing+0x18>
 80024e8:	2301      	movs	r3, #1
 80024ea:	e000      	b.n	80024ee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
	...

080024fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024fc:	b590      	push	{r4, r7, lr}
 80024fe:	b089      	sub	sp, #36	; 0x24
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002504:	2300      	movs	r3, #0
 8002506:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002508:	2300      	movs	r3, #0
 800250a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e18f      	b.n	8002836 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002520:	2b00      	cmp	r3, #0
 8002522:	d109      	bne.n	8002538 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7fe fea3 	bl	8001270 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff ff67 	bl	8002410 <LL_ADC_IsDeepPowerDownEnabled>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d004      	beq.n	8002552 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff ff4d 	bl	80023ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff ff82 	bl	8002460 <LL_ADC_IsInternalRegulatorEnabled>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d114      	bne.n	800258c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff ff66 	bl	8002438 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800256c:	4b87      	ldr	r3, [pc, #540]	; (800278c <HAL_ADC_Init+0x290>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	099b      	lsrs	r3, r3, #6
 8002572:	4a87      	ldr	r2, [pc, #540]	; (8002790 <HAL_ADC_Init+0x294>)
 8002574:	fba2 2303 	umull	r2, r3, r2, r3
 8002578:	099b      	lsrs	r3, r3, #6
 800257a:	3301      	adds	r3, #1
 800257c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800257e:	e002      	b.n	8002586 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	3b01      	subs	r3, #1
 8002584:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1f9      	bne.n	8002580 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff ff65 	bl	8002460 <LL_ADC_IsInternalRegulatorEnabled>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10d      	bne.n	80025b8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a0:	f043 0210 	orr.w	r2, r3, #16
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ac:	f043 0201 	orr.w	r2, r3, #1
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff ff76 	bl	80024ae <LL_ADC_REG_IsConversionOngoing>
 80025c2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c8:	f003 0310 	and.w	r3, r3, #16
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f040 8129 	bne.w	8002824 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f040 8125 	bne.w	8002824 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025de:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80025e2:	f043 0202 	orr.w	r2, r3, #2
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff ff4a 	bl	8002488 <LL_ADC_IsEnabled>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d136      	bne.n	8002668 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a65      	ldr	r2, [pc, #404]	; (8002794 <HAL_ADC_Init+0x298>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d004      	beq.n	800260e <HAL_ADC_Init+0x112>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a63      	ldr	r2, [pc, #396]	; (8002798 <HAL_ADC_Init+0x29c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d10e      	bne.n	800262c <HAL_ADC_Init+0x130>
 800260e:	4861      	ldr	r0, [pc, #388]	; (8002794 <HAL_ADC_Init+0x298>)
 8002610:	f7ff ff3a 	bl	8002488 <LL_ADC_IsEnabled>
 8002614:	4604      	mov	r4, r0
 8002616:	4860      	ldr	r0, [pc, #384]	; (8002798 <HAL_ADC_Init+0x29c>)
 8002618:	f7ff ff36 	bl	8002488 <LL_ADC_IsEnabled>
 800261c:	4603      	mov	r3, r0
 800261e:	4323      	orrs	r3, r4
 8002620:	2b00      	cmp	r3, #0
 8002622:	bf0c      	ite	eq
 8002624:	2301      	moveq	r3, #1
 8002626:	2300      	movne	r3, #0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	e008      	b.n	800263e <HAL_ADC_Init+0x142>
 800262c:	485b      	ldr	r0, [pc, #364]	; (800279c <HAL_ADC_Init+0x2a0>)
 800262e:	f7ff ff2b 	bl	8002488 <LL_ADC_IsEnabled>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	bf0c      	ite	eq
 8002638:	2301      	moveq	r3, #1
 800263a:	2300      	movne	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d012      	beq.n	8002668 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a53      	ldr	r2, [pc, #332]	; (8002794 <HAL_ADC_Init+0x298>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d004      	beq.n	8002656 <HAL_ADC_Init+0x15a>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a51      	ldr	r2, [pc, #324]	; (8002798 <HAL_ADC_Init+0x29c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d101      	bne.n	800265a <HAL_ADC_Init+0x15e>
 8002656:	4a52      	ldr	r2, [pc, #328]	; (80027a0 <HAL_ADC_Init+0x2a4>)
 8002658:	e000      	b.n	800265c <HAL_ADC_Init+0x160>
 800265a:	4a52      	ldr	r2, [pc, #328]	; (80027a4 <HAL_ADC_Init+0x2a8>)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	4619      	mov	r1, r3
 8002662:	4610      	mov	r0, r2
 8002664:	f7ff fdbe 	bl	80021e4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002668:	f7ff fd8c 	bl	8002184 <HAL_GetREVID>
 800266c:	4603      	mov	r3, r0
 800266e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002672:	4293      	cmp	r3, r2
 8002674:	d914      	bls.n	80026a0 <HAL_ADC_Init+0x1a4>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2b10      	cmp	r3, #16
 800267c:	d110      	bne.n	80026a0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	7d5b      	ldrb	r3, [r3, #21]
 8002682:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002688:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800268e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	7f1b      	ldrb	r3, [r3, #28]
 8002694:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002696:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002698:	f043 030c 	orr.w	r3, r3, #12
 800269c:	61bb      	str	r3, [r7, #24]
 800269e:	e00d      	b.n	80026bc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	7d5b      	ldrb	r3, [r3, #21]
 80026a4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80026aa:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80026b0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	7f1b      	ldrb	r3, [r3, #28]
 80026b6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80026b8:	4313      	orrs	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	7f1b      	ldrb	r3, [r3, #28]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d106      	bne.n	80026d2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	3b01      	subs	r3, #1
 80026ca:	045b      	lsls	r3, r3, #17
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d009      	beq.n	80026ee <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026de:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	4b2c      	ldr	r3, [pc, #176]	; (80027a8 <HAL_ADC_Init+0x2ac>)
 80026f6:	4013      	ands	r3, r2
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6812      	ldr	r2, [r2, #0]
 80026fc:	69b9      	ldr	r1, [r7, #24]
 80026fe:	430b      	orrs	r3, r1
 8002700:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff fed1 	bl	80024ae <LL_ADC_REG_IsConversionOngoing>
 800270c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff fede 	bl	80024d4 <LL_ADC_INJ_IsConversionOngoing>
 8002718:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d15f      	bne.n	80027e0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d15c      	bne.n	80027e0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	7d1b      	ldrb	r3, [r3, #20]
 800272a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002730:	4313      	orrs	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	4b1c      	ldr	r3, [pc, #112]	; (80027ac <HAL_ADC_Init+0x2b0>)
 800273c:	4013      	ands	r3, r2
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	6812      	ldr	r2, [r2, #0]
 8002742:	69b9      	ldr	r1, [r7, #24]
 8002744:	430b      	orrs	r3, r1
 8002746:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800274e:	2b01      	cmp	r3, #1
 8002750:	d130      	bne.n	80027b4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002756:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	691a      	ldr	r2, [r3, #16]
 800275e:	4b14      	ldr	r3, [pc, #80]	; (80027b0 <HAL_ADC_Init+0x2b4>)
 8002760:	4013      	ands	r3, r2
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002766:	3a01      	subs	r2, #1
 8002768:	0411      	lsls	r1, r2, #16
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800276e:	4311      	orrs	r1, r2
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002774:	4311      	orrs	r1, r2
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800277a:	430a      	orrs	r2, r1
 800277c:	431a      	orrs	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0201 	orr.w	r2, r2, #1
 8002786:	611a      	str	r2, [r3, #16]
 8002788:	e01c      	b.n	80027c4 <HAL_ADC_Init+0x2c8>
 800278a:	bf00      	nop
 800278c:	24000000 	.word	0x24000000
 8002790:	053e2d63 	.word	0x053e2d63
 8002794:	40022000 	.word	0x40022000
 8002798:	40022100 	.word	0x40022100
 800279c:	58026000 	.word	0x58026000
 80027a0:	40022300 	.word	0x40022300
 80027a4:	58026300 	.word	0x58026300
 80027a8:	fff0c003 	.word	0xfff0c003
 80027ac:	ffffbffc 	.word	0xffffbffc
 80027b0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	691a      	ldr	r2, [r3, #16]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 0201 	bic.w	r2, r2, #1
 80027c2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 fb80 	bl	8002ee0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d10c      	bne.n	8002802 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	f023 010f 	bic.w	r1, r3, #15
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	1e5a      	subs	r2, r3, #1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	430a      	orrs	r2, r1
 80027fe:	631a      	str	r2, [r3, #48]	; 0x30
 8002800:	e007      	b.n	8002812 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 020f 	bic.w	r2, r2, #15
 8002810:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002816:	f023 0303 	bic.w	r3, r3, #3
 800281a:	f043 0201 	orr.w	r2, r3, #1
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	655a      	str	r2, [r3, #84]	; 0x54
 8002822:	e007      	b.n	8002834 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002828:	f043 0210 	orr.w	r2, r3, #16
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002834:	7ffb      	ldrb	r3, [r7, #31]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3724      	adds	r7, #36	; 0x24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd90      	pop	{r4, r7, pc}
 800283e:	bf00      	nop

08002840 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002840:	b590      	push	{r4, r7, lr}
 8002842:	b0a1      	sub	sp, #132	; 0x84
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800284a:	2300      	movs	r3, #0
 800284c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002850:	2300      	movs	r3, #0
 8002852:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	4a9d      	ldr	r2, [pc, #628]	; (8002ad0 <HAL_ADC_ConfigChannel+0x290>)
 800285a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_ADC_ConfigChannel+0x2a>
 8002866:	2302      	movs	r3, #2
 8002868:	e321      	b.n	8002eae <HAL_ADC_ConfigChannel+0x66e>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff fe19 	bl	80024ae <LL_ADC_REG_IsConversionOngoing>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	f040 8306 	bne.w	8002e90 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800288c:	2b00      	cmp	r3, #0
 800288e:	d108      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x62>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	0e9b      	lsrs	r3, r3, #26
 8002896:	f003 031f 	and.w	r3, r3, #31
 800289a:	2201      	movs	r2, #1
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	e016      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x90>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028aa:	fa93 f3a3 	rbit	r3, r3
 80028ae:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028b2:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80028b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80028ba:	2320      	movs	r3, #32
 80028bc:	e003      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80028be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028c0:	fab3 f383 	clz	r3, r3
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	f003 031f 	and.w	r3, r3, #31
 80028ca:	2201      	movs	r2, #1
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6812      	ldr	r2, [r2, #0]
 80028d4:	69d1      	ldr	r1, [r2, #28]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6812      	ldr	r2, [r2, #0]
 80028da:	430b      	orrs	r3, r1
 80028dc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6818      	ldr	r0, [r3, #0]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	6859      	ldr	r1, [r3, #4]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	461a      	mov	r2, r3
 80028ec:	f7ff fd02 	bl	80022f4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff fdda 	bl	80024ae <LL_ADC_REG_IsConversionOngoing>
 80028fa:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff fde7 	bl	80024d4 <LL_ADC_INJ_IsConversionOngoing>
 8002906:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002908:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800290a:	2b00      	cmp	r3, #0
 800290c:	f040 80b3 	bne.w	8002a76 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002910:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002912:	2b00      	cmp	r3, #0
 8002914:	f040 80af 	bne.w	8002a76 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6818      	ldr	r0, [r3, #0]
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	6819      	ldr	r1, [r3, #0]
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	461a      	mov	r2, r3
 8002926:	f7ff fd11 	bl	800234c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800292a:	4b6a      	ldr	r3, [pc, #424]	; (8002ad4 <HAL_ADC_ConfigChannel+0x294>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002932:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002936:	d10b      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x110>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	695a      	ldr	r2, [r3, #20]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	089b      	lsrs	r3, r3, #2
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	e01d      	b.n	800298c <HAL_ADC_ConfigChannel+0x14c>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	f003 0310 	and.w	r3, r3, #16
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10b      	bne.n	8002976 <HAL_ADC_ConfigChannel+0x136>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	695a      	ldr	r2, [r3, #20]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	089b      	lsrs	r3, r3, #2
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	e00a      	b.n	800298c <HAL_ADC_ConfigChannel+0x14c>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	695a      	ldr	r2, [r3, #20]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	089b      	lsrs	r3, r3, #2
 8002982:	f003 0304 	and.w	r3, r3, #4
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	2b04      	cmp	r3, #4
 8002994:	d027      	beq.n	80029e6 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	6919      	ldr	r1, [r3, #16]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029a4:	f7ff fc52 	bl	800224c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6818      	ldr	r0, [r3, #0]
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	6919      	ldr	r1, [r3, #16]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	7e5b      	ldrb	r3, [r3, #25]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d102      	bne.n	80029be <HAL_ADC_ConfigChannel+0x17e>
 80029b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80029bc:	e000      	b.n	80029c0 <HAL_ADC_ConfigChannel+0x180>
 80029be:	2300      	movs	r3, #0
 80029c0:	461a      	mov	r2, r3
 80029c2:	f7ff fc7c 	bl	80022be <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6818      	ldr	r0, [r3, #0]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	6919      	ldr	r1, [r3, #16]
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	7e1b      	ldrb	r3, [r3, #24]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d102      	bne.n	80029dc <HAL_ADC_ConfigChannel+0x19c>
 80029d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029da:	e000      	b.n	80029de <HAL_ADC_ConfigChannel+0x19e>
 80029dc:	2300      	movs	r3, #0
 80029de:	461a      	mov	r2, r3
 80029e0:	f7ff fc54 	bl	800228c <LL_ADC_SetDataRightShift>
 80029e4:	e047      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	069b      	lsls	r3, r3, #26
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d107      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a08:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	069b      	lsls	r3, r3, #26
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d107      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a2c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	069b      	lsls	r3, r3, #26
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d107      	bne.n	8002a52 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a50:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	069b      	lsls	r3, r3, #26
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d107      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a74:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff fd04 	bl	8002488 <LL_ADC_IsEnabled>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f040 820d 	bne.w	8002ea2 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6818      	ldr	r0, [r3, #0]
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	6819      	ldr	r1, [r3, #0]
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	461a      	mov	r2, r3
 8002a96:	f7ff fc85 	bl	80023a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	4a0c      	ldr	r2, [pc, #48]	; (8002ad0 <HAL_ADC_ConfigChannel+0x290>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	f040 8133 	bne.w	8002d0c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d110      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x298>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	0e9b      	lsrs	r3, r3, #26
 8002abc:	3301      	adds	r3, #1
 8002abe:	f003 031f 	and.w	r3, r3, #31
 8002ac2:	2b09      	cmp	r3, #9
 8002ac4:	bf94      	ite	ls
 8002ac6:	2301      	movls	r3, #1
 8002ac8:	2300      	movhi	r3, #0
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	e01e      	b.n	8002b0c <HAL_ADC_ConfigChannel+0x2cc>
 8002ace:	bf00      	nop
 8002ad0:	47ff0000 	.word	0x47ff0000
 8002ad4:	5c001000 	.word	0x5c001000
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ade:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ae0:	fa93 f3a3 	rbit	r3, r3
 8002ae4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002ae6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ae8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002aea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002af0:	2320      	movs	r3, #32
 8002af2:	e003      	b.n	8002afc <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002af4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002af6:	fab3 f383 	clz	r3, r3
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	3301      	adds	r3, #1
 8002afe:	f003 031f 	and.w	r3, r3, #31
 8002b02:	2b09      	cmp	r3, #9
 8002b04:	bf94      	ite	ls
 8002b06:	2301      	movls	r3, #1
 8002b08:	2300      	movhi	r3, #0
 8002b0a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d079      	beq.n	8002c04 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d107      	bne.n	8002b2c <HAL_ADC_ConfigChannel+0x2ec>
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	0e9b      	lsrs	r3, r3, #26
 8002b22:	3301      	adds	r3, #1
 8002b24:	069b      	lsls	r3, r3, #26
 8002b26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b2a:	e015      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x318>
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b34:	fa93 f3a3 	rbit	r3, r3
 8002b38:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002b3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b3c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002b44:	2320      	movs	r3, #32
 8002b46:	e003      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002b48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b4a:	fab3 f383 	clz	r3, r3
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	3301      	adds	r3, #1
 8002b52:	069b      	lsls	r3, r3, #26
 8002b54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d109      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x338>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	0e9b      	lsrs	r3, r3, #26
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	f003 031f 	and.w	r3, r3, #31
 8002b70:	2101      	movs	r1, #1
 8002b72:	fa01 f303 	lsl.w	r3, r1, r3
 8002b76:	e017      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x368>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b80:	fa93 f3a3 	rbit	r3, r3
 8002b84:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b88:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002b8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002b90:	2320      	movs	r3, #32
 8002b92:	e003      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002b94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b96:	fab3 f383 	clz	r3, r3
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	f003 031f 	and.w	r3, r3, #31
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba8:	ea42 0103 	orr.w	r1, r2, r3
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10a      	bne.n	8002bce <HAL_ADC_ConfigChannel+0x38e>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	0e9b      	lsrs	r3, r3, #26
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	f003 021f 	and.w	r2, r3, #31
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	4413      	add	r3, r2
 8002bca:	051b      	lsls	r3, r3, #20
 8002bcc:	e018      	b.n	8002c00 <HAL_ADC_ConfigChannel+0x3c0>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd6:	fa93 f3a3 	rbit	r3, r3
 8002bda:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bde:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002be6:	2320      	movs	r3, #32
 8002be8:	e003      	b.n	8002bf2 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bec:	fab3 f383 	clz	r3, r3
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	f003 021f 	and.w	r2, r3, #31
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	4413      	add	r3, r2
 8002bfe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c00:	430b      	orrs	r3, r1
 8002c02:	e07e      	b.n	8002d02 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d107      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x3e0>
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	0e9b      	lsrs	r3, r3, #26
 8002c16:	3301      	adds	r3, #1
 8002c18:	069b      	lsls	r3, r3, #26
 8002c1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c1e:	e015      	b.n	8002c4c <HAL_ADC_ConfigChannel+0x40c>
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c28:	fa93 f3a3 	rbit	r3, r3
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d101      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002c38:	2320      	movs	r3, #32
 8002c3a:	e003      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3e:	fab3 f383 	clz	r3, r3
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	3301      	adds	r3, #1
 8002c46:	069b      	lsls	r3, r3, #26
 8002c48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d109      	bne.n	8002c6c <HAL_ADC_ConfigChannel+0x42c>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	0e9b      	lsrs	r3, r3, #26
 8002c5e:	3301      	adds	r3, #1
 8002c60:	f003 031f 	and.w	r3, r3, #31
 8002c64:	2101      	movs	r1, #1
 8002c66:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6a:	e017      	b.n	8002c9c <HAL_ADC_ConfigChannel+0x45c>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	fa93 f3a3 	rbit	r3, r3
 8002c78:	61bb      	str	r3, [r7, #24]
  return result;
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002c84:	2320      	movs	r3, #32
 8002c86:	e003      	b.n	8002c90 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	fab3 f383 	clz	r3, r3
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	3301      	adds	r3, #1
 8002c92:	f003 031f 	and.w	r3, r3, #31
 8002c96:	2101      	movs	r1, #1
 8002c98:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9c:	ea42 0103 	orr.w	r1, r2, r3
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10d      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0x488>
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	0e9b      	lsrs	r3, r3, #26
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	f003 021f 	and.w	r2, r3, #31
 8002cb8:	4613      	mov	r3, r2
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	4413      	add	r3, r2
 8002cbe:	3b1e      	subs	r3, #30
 8002cc0:	051b      	lsls	r3, r3, #20
 8002cc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cc6:	e01b      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x4c0>
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	fa93 f3a3 	rbit	r3, r3
 8002cd4:	60fb      	str	r3, [r7, #12]
  return result;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002ce0:	2320      	movs	r3, #32
 8002ce2:	e003      	b.n	8002cec <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	fab3 f383 	clz	r3, r3
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	3301      	adds	r3, #1
 8002cee:	f003 021f 	and.w	r2, r3, #31
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3b1e      	subs	r3, #30
 8002cfa:	051b      	lsls	r3, r3, #20
 8002cfc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d00:	430b      	orrs	r3, r1
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	6892      	ldr	r2, [r2, #8]
 8002d06:	4619      	mov	r1, r3
 8002d08:	f7ff fb20 	bl	800234c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f280 80c6 	bge.w	8002ea2 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a67      	ldr	r2, [pc, #412]	; (8002eb8 <HAL_ADC_ConfigChannel+0x678>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d004      	beq.n	8002d2a <HAL_ADC_ConfigChannel+0x4ea>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a65      	ldr	r2, [pc, #404]	; (8002ebc <HAL_ADC_ConfigChannel+0x67c>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d101      	bne.n	8002d2e <HAL_ADC_ConfigChannel+0x4ee>
 8002d2a:	4b65      	ldr	r3, [pc, #404]	; (8002ec0 <HAL_ADC_ConfigChannel+0x680>)
 8002d2c:	e000      	b.n	8002d30 <HAL_ADC_ConfigChannel+0x4f0>
 8002d2e:	4b65      	ldr	r3, [pc, #404]	; (8002ec4 <HAL_ADC_ConfigChannel+0x684>)
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff fa7d 	bl	8002230 <LL_ADC_GetCommonPathInternalCh>
 8002d36:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a5e      	ldr	r2, [pc, #376]	; (8002eb8 <HAL_ADC_ConfigChannel+0x678>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d004      	beq.n	8002d4c <HAL_ADC_ConfigChannel+0x50c>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a5d      	ldr	r2, [pc, #372]	; (8002ebc <HAL_ADC_ConfigChannel+0x67c>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d10e      	bne.n	8002d6a <HAL_ADC_ConfigChannel+0x52a>
 8002d4c:	485a      	ldr	r0, [pc, #360]	; (8002eb8 <HAL_ADC_ConfigChannel+0x678>)
 8002d4e:	f7ff fb9b 	bl	8002488 <LL_ADC_IsEnabled>
 8002d52:	4604      	mov	r4, r0
 8002d54:	4859      	ldr	r0, [pc, #356]	; (8002ebc <HAL_ADC_ConfigChannel+0x67c>)
 8002d56:	f7ff fb97 	bl	8002488 <LL_ADC_IsEnabled>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	4323      	orrs	r3, r4
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	bf0c      	ite	eq
 8002d62:	2301      	moveq	r3, #1
 8002d64:	2300      	movne	r3, #0
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	e008      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x53c>
 8002d6a:	4857      	ldr	r0, [pc, #348]	; (8002ec8 <HAL_ADC_ConfigChannel+0x688>)
 8002d6c:	f7ff fb8c 	bl	8002488 <LL_ADC_IsEnabled>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	bf0c      	ite	eq
 8002d76:	2301      	moveq	r3, #1
 8002d78:	2300      	movne	r3, #0
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d07d      	beq.n	8002e7c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a51      	ldr	r2, [pc, #324]	; (8002ecc <HAL_ADC_ConfigChannel+0x68c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d130      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x5ac>
 8002d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d12b      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a4b      	ldr	r2, [pc, #300]	; (8002ec8 <HAL_ADC_ConfigChannel+0x688>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	f040 8081 	bne.w	8002ea2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a44      	ldr	r2, [pc, #272]	; (8002eb8 <HAL_ADC_ConfigChannel+0x678>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d004      	beq.n	8002db4 <HAL_ADC_ConfigChannel+0x574>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a43      	ldr	r2, [pc, #268]	; (8002ebc <HAL_ADC_ConfigChannel+0x67c>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d101      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x578>
 8002db4:	4a42      	ldr	r2, [pc, #264]	; (8002ec0 <HAL_ADC_ConfigChannel+0x680>)
 8002db6:	e000      	b.n	8002dba <HAL_ADC_ConfigChannel+0x57a>
 8002db8:	4a42      	ldr	r2, [pc, #264]	; (8002ec4 <HAL_ADC_ConfigChannel+0x684>)
 8002dba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dbc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4610      	mov	r0, r2
 8002dc4:	f7ff fa21 	bl	800220a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dc8:	4b41      	ldr	r3, [pc, #260]	; (8002ed0 <HAL_ADC_ConfigChannel+0x690>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	099b      	lsrs	r3, r3, #6
 8002dce:	4a41      	ldr	r2, [pc, #260]	; (8002ed4 <HAL_ADC_ConfigChannel+0x694>)
 8002dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd4:	099b      	lsrs	r3, r3, #6
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002ddc:	e002      	b.n	8002de4 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	3b01      	subs	r3, #1
 8002de2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1f9      	bne.n	8002dde <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dea:	e05a      	b.n	8002ea2 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a39      	ldr	r2, [pc, #228]	; (8002ed8 <HAL_ADC_ConfigChannel+0x698>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d11e      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x5f4>
 8002df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d119      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a30      	ldr	r2, [pc, #192]	; (8002ec8 <HAL_ADC_ConfigChannel+0x688>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d14b      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a2a      	ldr	r2, [pc, #168]	; (8002eb8 <HAL_ADC_ConfigChannel+0x678>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d004      	beq.n	8002e1e <HAL_ADC_ConfigChannel+0x5de>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a28      	ldr	r2, [pc, #160]	; (8002ebc <HAL_ADC_ConfigChannel+0x67c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d101      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0x5e2>
 8002e1e:	4a28      	ldr	r2, [pc, #160]	; (8002ec0 <HAL_ADC_ConfigChannel+0x680>)
 8002e20:	e000      	b.n	8002e24 <HAL_ADC_ConfigChannel+0x5e4>
 8002e22:	4a28      	ldr	r2, [pc, #160]	; (8002ec4 <HAL_ADC_ConfigChannel+0x684>)
 8002e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	4610      	mov	r0, r2
 8002e2e:	f7ff f9ec 	bl	800220a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e32:	e036      	b.n	8002ea2 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a28      	ldr	r2, [pc, #160]	; (8002edc <HAL_ADC_ConfigChannel+0x69c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d131      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x662>
 8002e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d12c      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a1e      	ldr	r2, [pc, #120]	; (8002ec8 <HAL_ADC_ConfigChannel+0x688>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d127      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a18      	ldr	r2, [pc, #96]	; (8002eb8 <HAL_ADC_ConfigChannel+0x678>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d004      	beq.n	8002e66 <HAL_ADC_ConfigChannel+0x626>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a16      	ldr	r2, [pc, #88]	; (8002ebc <HAL_ADC_ConfigChannel+0x67c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d101      	bne.n	8002e6a <HAL_ADC_ConfigChannel+0x62a>
 8002e66:	4a16      	ldr	r2, [pc, #88]	; (8002ec0 <HAL_ADC_ConfigChannel+0x680>)
 8002e68:	e000      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x62c>
 8002e6a:	4a16      	ldr	r2, [pc, #88]	; (8002ec4 <HAL_ADC_ConfigChannel+0x684>)
 8002e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e72:	4619      	mov	r1, r3
 8002e74:	4610      	mov	r0, r2
 8002e76:	f7ff f9c8 	bl	800220a <LL_ADC_SetCommonPathInternalCh>
 8002e7a:	e012      	b.n	8002ea2 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e80:	f043 0220 	orr.w	r2, r3, #32
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002e8e:	e008      	b.n	8002ea2 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e94:	f043 0220 	orr.w	r2, r3, #32
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002eaa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3784      	adds	r7, #132	; 0x84
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd90      	pop	{r4, r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40022000 	.word	0x40022000
 8002ebc:	40022100 	.word	0x40022100
 8002ec0:	40022300 	.word	0x40022300
 8002ec4:	58026300 	.word	0x58026300
 8002ec8:	58026000 	.word	0x58026000
 8002ecc:	cb840000 	.word	0xcb840000
 8002ed0:	24000000 	.word	0x24000000
 8002ed4:	053e2d63 	.word	0x053e2d63
 8002ed8:	c7520000 	.word	0xc7520000
 8002edc:	cfb80000 	.word	0xcfb80000

08002ee0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a7a      	ldr	r2, [pc, #488]	; (80030d8 <ADC_ConfigureBoostMode+0x1f8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d004      	beq.n	8002efc <ADC_ConfigureBoostMode+0x1c>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a79      	ldr	r2, [pc, #484]	; (80030dc <ADC_ConfigureBoostMode+0x1fc>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d109      	bne.n	8002f10 <ADC_ConfigureBoostMode+0x30>
 8002efc:	4b78      	ldr	r3, [pc, #480]	; (80030e0 <ADC_ConfigureBoostMode+0x200>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	bf14      	ite	ne
 8002f08:	2301      	movne	r3, #1
 8002f0a:	2300      	moveq	r3, #0
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	e008      	b.n	8002f22 <ADC_ConfigureBoostMode+0x42>
 8002f10:	4b74      	ldr	r3, [pc, #464]	; (80030e4 <ADC_ConfigureBoostMode+0x204>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	bf14      	ite	ne
 8002f1c:	2301      	movne	r3, #1
 8002f1e:	2300      	moveq	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d01c      	beq.n	8002f60 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002f26:	f001 ff97 	bl	8004e58 <HAL_RCC_GetHCLKFreq>
 8002f2a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f34:	d010      	beq.n	8002f58 <ADC_ConfigureBoostMode+0x78>
 8002f36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f3a:	d873      	bhi.n	8003024 <ADC_ConfigureBoostMode+0x144>
 8002f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f40:	d002      	beq.n	8002f48 <ADC_ConfigureBoostMode+0x68>
 8002f42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f46:	d16d      	bne.n	8003024 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	0c1b      	lsrs	r3, r3, #16
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f54:	60fb      	str	r3, [r7, #12]
        break;
 8002f56:	e068      	b.n	800302a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	089b      	lsrs	r3, r3, #2
 8002f5c:	60fb      	str	r3, [r7, #12]
        break;
 8002f5e:	e064      	b.n	800302a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002f60:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002f64:	f04f 0100 	mov.w	r1, #0
 8002f68:	f003 f9dc 	bl	8006324 <HAL_RCCEx_GetPeriphCLKFreq>
 8002f6c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002f76:	d051      	beq.n	800301c <ADC_ConfigureBoostMode+0x13c>
 8002f78:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002f7c:	d854      	bhi.n	8003028 <ADC_ConfigureBoostMode+0x148>
 8002f7e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002f82:	d047      	beq.n	8003014 <ADC_ConfigureBoostMode+0x134>
 8002f84:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002f88:	d84e      	bhi.n	8003028 <ADC_ConfigureBoostMode+0x148>
 8002f8a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002f8e:	d03d      	beq.n	800300c <ADC_ConfigureBoostMode+0x12c>
 8002f90:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002f94:	d848      	bhi.n	8003028 <ADC_ConfigureBoostMode+0x148>
 8002f96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f9a:	d033      	beq.n	8003004 <ADC_ConfigureBoostMode+0x124>
 8002f9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fa0:	d842      	bhi.n	8003028 <ADC_ConfigureBoostMode+0x148>
 8002fa2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002fa6:	d029      	beq.n	8002ffc <ADC_ConfigureBoostMode+0x11c>
 8002fa8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002fac:	d83c      	bhi.n	8003028 <ADC_ConfigureBoostMode+0x148>
 8002fae:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002fb2:	d01a      	beq.n	8002fea <ADC_ConfigureBoostMode+0x10a>
 8002fb4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002fb8:	d836      	bhi.n	8003028 <ADC_ConfigureBoostMode+0x148>
 8002fba:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002fbe:	d014      	beq.n	8002fea <ADC_ConfigureBoostMode+0x10a>
 8002fc0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002fc4:	d830      	bhi.n	8003028 <ADC_ConfigureBoostMode+0x148>
 8002fc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fca:	d00e      	beq.n	8002fea <ADC_ConfigureBoostMode+0x10a>
 8002fcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fd0:	d82a      	bhi.n	8003028 <ADC_ConfigureBoostMode+0x148>
 8002fd2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002fd6:	d008      	beq.n	8002fea <ADC_ConfigureBoostMode+0x10a>
 8002fd8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002fdc:	d824      	bhi.n	8003028 <ADC_ConfigureBoostMode+0x148>
 8002fde:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fe2:	d002      	beq.n	8002fea <ADC_ConfigureBoostMode+0x10a>
 8002fe4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002fe8:	d11e      	bne.n	8003028 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	0c9b      	lsrs	r3, r3, #18
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff8:	60fb      	str	r3, [r7, #12]
        break;
 8002ffa:	e016      	b.n	800302a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	091b      	lsrs	r3, r3, #4
 8003000:	60fb      	str	r3, [r7, #12]
        break;
 8003002:	e012      	b.n	800302a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	60fb      	str	r3, [r7, #12]
        break;
 800300a:	e00e      	b.n	800302a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	099b      	lsrs	r3, r3, #6
 8003010:	60fb      	str	r3, [r7, #12]
        break;
 8003012:	e00a      	b.n	800302a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	09db      	lsrs	r3, r3, #7
 8003018:	60fb      	str	r3, [r7, #12]
        break;
 800301a:	e006      	b.n	800302a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	0a1b      	lsrs	r3, r3, #8
 8003020:	60fb      	str	r3, [r7, #12]
        break;
 8003022:	e002      	b.n	800302a <ADC_ConfigureBoostMode+0x14a>
        break;
 8003024:	bf00      	nop
 8003026:	e000      	b.n	800302a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003028:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800302a:	f7ff f8ab 	bl	8002184 <HAL_GetREVID>
 800302e:	4603      	mov	r3, r0
 8003030:	f241 0203 	movw	r2, #4099	; 0x1003
 8003034:	4293      	cmp	r3, r2
 8003036:	d815      	bhi.n	8003064 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4a2b      	ldr	r2, [pc, #172]	; (80030e8 <ADC_ConfigureBoostMode+0x208>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d908      	bls.n	8003052 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800304e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003050:	e03e      	b.n	80030d0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003060:	609a      	str	r2, [r3, #8]
}
 8003062:	e035      	b.n	80030d0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	085b      	lsrs	r3, r3, #1
 8003068:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	4a1f      	ldr	r2, [pc, #124]	; (80030ec <ADC_ConfigureBoostMode+0x20c>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d808      	bhi.n	8003084 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003080:	609a      	str	r2, [r3, #8]
}
 8003082:	e025      	b.n	80030d0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	4a1a      	ldr	r2, [pc, #104]	; (80030f0 <ADC_ConfigureBoostMode+0x210>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d80a      	bhi.n	80030a2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800309e:	609a      	str	r2, [r3, #8]
}
 80030a0:	e016      	b.n	80030d0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	4a13      	ldr	r2, [pc, #76]	; (80030f4 <ADC_ConfigureBoostMode+0x214>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d80a      	bhi.n	80030c0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030bc:	609a      	str	r2, [r3, #8]
}
 80030be:	e007      	b.n	80030d0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80030ce:	609a      	str	r2, [r3, #8]
}
 80030d0:	bf00      	nop
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40022000 	.word	0x40022000
 80030dc:	40022100 	.word	0x40022100
 80030e0:	40022300 	.word	0x40022300
 80030e4:	58026300 	.word	0x58026300
 80030e8:	01312d00 	.word	0x01312d00
 80030ec:	005f5e10 	.word	0x005f5e10
 80030f0:	00bebc20 	.word	0x00bebc20
 80030f4:	017d7840 	.word	0x017d7840

080030f8 <LL_ADC_IsEnabled>:
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <LL_ADC_IsEnabled+0x18>
 800310c:	2301      	movs	r3, #1
 800310e:	e000      	b.n	8003112 <LL_ADC_IsEnabled+0x1a>
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr

0800311e <LL_ADC_REG_IsConversionOngoing>:
{
 800311e:	b480      	push	{r7}
 8003120:	b083      	sub	sp, #12
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 0304 	and.w	r3, r3, #4
 800312e:	2b04      	cmp	r3, #4
 8003130:	d101      	bne.n	8003136 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003132:	2301      	movs	r3, #1
 8003134:	e000      	b.n	8003138 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003144:	b590      	push	{r4, r7, lr}
 8003146:	b09f      	sub	sp, #124	; 0x7c
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800314e:	2300      	movs	r3, #0
 8003150:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800315a:	2b01      	cmp	r3, #1
 800315c:	d101      	bne.n	8003162 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800315e:	2302      	movs	r3, #2
 8003160:	e0be      	b.n	80032e0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800316a:	2300      	movs	r3, #0
 800316c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800316e:	2300      	movs	r3, #0
 8003170:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a5c      	ldr	r2, [pc, #368]	; (80032e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d102      	bne.n	8003182 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800317c:	4b5b      	ldr	r3, [pc, #364]	; (80032ec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800317e:	60bb      	str	r3, [r7, #8]
 8003180:	e001      	b.n	8003186 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003182:	2300      	movs	r3, #0
 8003184:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10b      	bne.n	80031a4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003190:	f043 0220 	orr.w	r2, r3, #32
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e09d      	b.n	80032e0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff ffb9 	bl	800311e <LL_ADC_REG_IsConversionOngoing>
 80031ac:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff ffb3 	bl	800311e <LL_ADC_REG_IsConversionOngoing>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d17f      	bne.n	80032be <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80031be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d17c      	bne.n	80032be <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a47      	ldr	r2, [pc, #284]	; (80032e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d004      	beq.n	80031d8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a46      	ldr	r2, [pc, #280]	; (80032ec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d101      	bne.n	80031dc <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80031d8:	4b45      	ldr	r3, [pc, #276]	; (80032f0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80031da:	e000      	b.n	80031de <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80031dc:	4b45      	ldr	r3, [pc, #276]	; (80032f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80031de:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d039      	beq.n	800325c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80031e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	431a      	orrs	r2, r3
 80031f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031f8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a3a      	ldr	r2, [pc, #232]	; (80032e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d004      	beq.n	800320e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a38      	ldr	r2, [pc, #224]	; (80032ec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d10e      	bne.n	800322c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800320e:	4836      	ldr	r0, [pc, #216]	; (80032e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003210:	f7ff ff72 	bl	80030f8 <LL_ADC_IsEnabled>
 8003214:	4604      	mov	r4, r0
 8003216:	4835      	ldr	r0, [pc, #212]	; (80032ec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003218:	f7ff ff6e 	bl	80030f8 <LL_ADC_IsEnabled>
 800321c:	4603      	mov	r3, r0
 800321e:	4323      	orrs	r3, r4
 8003220:	2b00      	cmp	r3, #0
 8003222:	bf0c      	ite	eq
 8003224:	2301      	moveq	r3, #1
 8003226:	2300      	movne	r3, #0
 8003228:	b2db      	uxtb	r3, r3
 800322a:	e008      	b.n	800323e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800322c:	4832      	ldr	r0, [pc, #200]	; (80032f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800322e:	f7ff ff63 	bl	80030f8 <LL_ADC_IsEnabled>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	bf0c      	ite	eq
 8003238:	2301      	moveq	r3, #1
 800323a:	2300      	movne	r3, #0
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d047      	beq.n	80032d2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003244:	689a      	ldr	r2, [r3, #8]
 8003246:	4b2d      	ldr	r3, [pc, #180]	; (80032fc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003248:	4013      	ands	r3, r2
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	6811      	ldr	r1, [r2, #0]
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	6892      	ldr	r2, [r2, #8]
 8003252:	430a      	orrs	r2, r1
 8003254:	431a      	orrs	r2, r3
 8003256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003258:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800325a:	e03a      	b.n	80032d2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800325c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003266:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a1e      	ldr	r2, [pc, #120]	; (80032e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d004      	beq.n	800327c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a1d      	ldr	r2, [pc, #116]	; (80032ec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d10e      	bne.n	800329a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800327c:	481a      	ldr	r0, [pc, #104]	; (80032e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800327e:	f7ff ff3b 	bl	80030f8 <LL_ADC_IsEnabled>
 8003282:	4604      	mov	r4, r0
 8003284:	4819      	ldr	r0, [pc, #100]	; (80032ec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003286:	f7ff ff37 	bl	80030f8 <LL_ADC_IsEnabled>
 800328a:	4603      	mov	r3, r0
 800328c:	4323      	orrs	r3, r4
 800328e:	2b00      	cmp	r3, #0
 8003290:	bf0c      	ite	eq
 8003292:	2301      	moveq	r3, #1
 8003294:	2300      	movne	r3, #0
 8003296:	b2db      	uxtb	r3, r3
 8003298:	e008      	b.n	80032ac <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800329a:	4817      	ldr	r0, [pc, #92]	; (80032f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800329c:	f7ff ff2c 	bl	80030f8 <LL_ADC_IsEnabled>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	bf0c      	ite	eq
 80032a6:	2301      	moveq	r3, #1
 80032a8:	2300      	movne	r3, #0
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d010      	beq.n	80032d2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80032b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	4b11      	ldr	r3, [pc, #68]	; (80032fc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80032b6:	4013      	ands	r3, r2
 80032b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032ba:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032bc:	e009      	b.n	80032d2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c2:	f043 0220 	orr.w	r2, r3, #32
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80032d0:	e000      	b.n	80032d4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032d2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80032dc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	377c      	adds	r7, #124	; 0x7c
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd90      	pop	{r4, r7, pc}
 80032e8:	40022000 	.word	0x40022000
 80032ec:	40022100 	.word	0x40022100
 80032f0:	40022300 	.word	0x40022300
 80032f4:	58026300 	.word	0x58026300
 80032f8:	58026000 	.word	0x58026000
 80032fc:	fffff0e0 	.word	0xfffff0e0

08003300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003310:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <__NVIC_SetPriorityGrouping+0x40>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800331c:	4013      	ands	r3, r2
 800331e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003328:	4b06      	ldr	r3, [pc, #24]	; (8003344 <__NVIC_SetPriorityGrouping+0x44>)
 800332a:	4313      	orrs	r3, r2
 800332c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800332e:	4a04      	ldr	r2, [pc, #16]	; (8003340 <__NVIC_SetPriorityGrouping+0x40>)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	60d3      	str	r3, [r2, #12]
}
 8003334:	bf00      	nop
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	e000ed00 	.word	0xe000ed00
 8003344:	05fa0000 	.word	0x05fa0000

08003348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800334c:	4b04      	ldr	r3, [pc, #16]	; (8003360 <__NVIC_GetPriorityGrouping+0x18>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	0a1b      	lsrs	r3, r3, #8
 8003352:	f003 0307 	and.w	r3, r3, #7
}
 8003356:	4618      	mov	r0, r3
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	e000ed00 	.word	0xe000ed00

08003364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	6039      	str	r1, [r7, #0]
 800336e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003370:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003374:	2b00      	cmp	r3, #0
 8003376:	db0a      	blt.n	800338e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	b2da      	uxtb	r2, r3
 800337c:	490c      	ldr	r1, [pc, #48]	; (80033b0 <__NVIC_SetPriority+0x4c>)
 800337e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003382:	0112      	lsls	r2, r2, #4
 8003384:	b2d2      	uxtb	r2, r2
 8003386:	440b      	add	r3, r1
 8003388:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800338c:	e00a      	b.n	80033a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	b2da      	uxtb	r2, r3
 8003392:	4908      	ldr	r1, [pc, #32]	; (80033b4 <__NVIC_SetPriority+0x50>)
 8003394:	88fb      	ldrh	r3, [r7, #6]
 8003396:	f003 030f 	and.w	r3, r3, #15
 800339a:	3b04      	subs	r3, #4
 800339c:	0112      	lsls	r2, r2, #4
 800339e:	b2d2      	uxtb	r2, r2
 80033a0:	440b      	add	r3, r1
 80033a2:	761a      	strb	r2, [r3, #24]
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	e000e100 	.word	0xe000e100
 80033b4:	e000ed00 	.word	0xe000ed00

080033b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b089      	sub	sp, #36	; 0x24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	f1c3 0307 	rsb	r3, r3, #7
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	bf28      	it	cs
 80033d6:	2304      	movcs	r3, #4
 80033d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	3304      	adds	r3, #4
 80033de:	2b06      	cmp	r3, #6
 80033e0:	d902      	bls.n	80033e8 <NVIC_EncodePriority+0x30>
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	3b03      	subs	r3, #3
 80033e6:	e000      	b.n	80033ea <NVIC_EncodePriority+0x32>
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033ec:	f04f 32ff 	mov.w	r2, #4294967295
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	43da      	mvns	r2, r3
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	401a      	ands	r2, r3
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003400:	f04f 31ff 	mov.w	r1, #4294967295
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	fa01 f303 	lsl.w	r3, r1, r3
 800340a:	43d9      	mvns	r1, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003410:	4313      	orrs	r3, r2
         );
}
 8003412:	4618      	mov	r0, r3
 8003414:	3724      	adds	r7, #36	; 0x24
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
	...

08003420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	3b01      	subs	r3, #1
 800342c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003430:	d301      	bcc.n	8003436 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003432:	2301      	movs	r3, #1
 8003434:	e00f      	b.n	8003456 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003436:	4a0a      	ldr	r2, [pc, #40]	; (8003460 <SysTick_Config+0x40>)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3b01      	subs	r3, #1
 800343c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800343e:	210f      	movs	r1, #15
 8003440:	f04f 30ff 	mov.w	r0, #4294967295
 8003444:	f7ff ff8e 	bl	8003364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003448:	4b05      	ldr	r3, [pc, #20]	; (8003460 <SysTick_Config+0x40>)
 800344a:	2200      	movs	r2, #0
 800344c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800344e:	4b04      	ldr	r3, [pc, #16]	; (8003460 <SysTick_Config+0x40>)
 8003450:	2207      	movs	r2, #7
 8003452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	e000e010 	.word	0xe000e010

08003464 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f7ff ff47 	bl	8003300 <__NVIC_SetPriorityGrouping>
}
 8003472:	bf00      	nop
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b086      	sub	sp, #24
 800347e:	af00      	add	r7, sp, #0
 8003480:	4603      	mov	r3, r0
 8003482:	60b9      	str	r1, [r7, #8]
 8003484:	607a      	str	r2, [r7, #4]
 8003486:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003488:	f7ff ff5e 	bl	8003348 <__NVIC_GetPriorityGrouping>
 800348c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	68b9      	ldr	r1, [r7, #8]
 8003492:	6978      	ldr	r0, [r7, #20]
 8003494:	f7ff ff90 	bl	80033b8 <NVIC_EncodePriority>
 8003498:	4602      	mov	r2, r0
 800349a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800349e:	4611      	mov	r1, r2
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff ff5f 	bl	8003364 <__NVIC_SetPriority>
}
 80034a6:	bf00      	nop
 80034a8:	3718      	adds	r7, #24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7ff ffb2 	bl	8003420 <SysTick_Config>
 80034bc:	4603      	mov	r3, r0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
	...

080034c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b089      	sub	sp, #36	; 0x24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80034d6:	4b89      	ldr	r3, [pc, #548]	; (80036fc <HAL_GPIO_Init+0x234>)
 80034d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80034da:	e194      	b.n	8003806 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	2101      	movs	r1, #1
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	fa01 f303 	lsl.w	r3, r1, r3
 80034e8:	4013      	ands	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 8186 	beq.w	8003800 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 0303 	and.w	r3, r3, #3
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d005      	beq.n	800350c <HAL_GPIO_Init+0x44>
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f003 0303 	and.w	r3, r3, #3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d130      	bne.n	800356e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	2203      	movs	r2, #3
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	43db      	mvns	r3, r3
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4013      	ands	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	68da      	ldr	r2, [r3, #12]
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	4313      	orrs	r3, r2
 8003534:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003542:	2201      	movs	r2, #1
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	43db      	mvns	r3, r3
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	4013      	ands	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	091b      	lsrs	r3, r3, #4
 8003558:	f003 0201 	and.w	r2, r3, #1
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	fa02 f303 	lsl.w	r3, r2, r3
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	4313      	orrs	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	2b03      	cmp	r3, #3
 8003578:	d017      	beq.n	80035aa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	2203      	movs	r2, #3
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	43db      	mvns	r3, r3
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	4013      	ands	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	fa02 f303 	lsl.w	r3, r2, r3
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d123      	bne.n	80035fe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	08da      	lsrs	r2, r3, #3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	3208      	adds	r2, #8
 80035be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	f003 0307 	and.w	r3, r3, #7
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	220f      	movs	r2, #15
 80035ce:	fa02 f303 	lsl.w	r3, r2, r3
 80035d2:	43db      	mvns	r3, r3
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	4013      	ands	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	691a      	ldr	r2, [r3, #16]
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	08da      	lsrs	r2, r3, #3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3208      	adds	r2, #8
 80035f8:	69b9      	ldr	r1, [r7, #24]
 80035fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	2203      	movs	r2, #3
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	43db      	mvns	r3, r3
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4013      	ands	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f003 0203 	and.w	r2, r3, #3
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	fa02 f303 	lsl.w	r3, r2, r3
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	4313      	orrs	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800363a:	2b00      	cmp	r3, #0
 800363c:	f000 80e0 	beq.w	8003800 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003640:	4b2f      	ldr	r3, [pc, #188]	; (8003700 <HAL_GPIO_Init+0x238>)
 8003642:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003646:	4a2e      	ldr	r2, [pc, #184]	; (8003700 <HAL_GPIO_Init+0x238>)
 8003648:	f043 0302 	orr.w	r3, r3, #2
 800364c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003650:	4b2b      	ldr	r3, [pc, #172]	; (8003700 <HAL_GPIO_Init+0x238>)
 8003652:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800365e:	4a29      	ldr	r2, [pc, #164]	; (8003704 <HAL_GPIO_Init+0x23c>)
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	089b      	lsrs	r3, r3, #2
 8003664:	3302      	adds	r3, #2
 8003666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800366a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	220f      	movs	r2, #15
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	43db      	mvns	r3, r3
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	4013      	ands	r3, r2
 8003680:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a20      	ldr	r2, [pc, #128]	; (8003708 <HAL_GPIO_Init+0x240>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d052      	beq.n	8003730 <HAL_GPIO_Init+0x268>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a1f      	ldr	r2, [pc, #124]	; (800370c <HAL_GPIO_Init+0x244>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d031      	beq.n	80036f6 <HAL_GPIO_Init+0x22e>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a1e      	ldr	r2, [pc, #120]	; (8003710 <HAL_GPIO_Init+0x248>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d02b      	beq.n	80036f2 <HAL_GPIO_Init+0x22a>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a1d      	ldr	r2, [pc, #116]	; (8003714 <HAL_GPIO_Init+0x24c>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d025      	beq.n	80036ee <HAL_GPIO_Init+0x226>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a1c      	ldr	r2, [pc, #112]	; (8003718 <HAL_GPIO_Init+0x250>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d01f      	beq.n	80036ea <HAL_GPIO_Init+0x222>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a1b      	ldr	r2, [pc, #108]	; (800371c <HAL_GPIO_Init+0x254>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d019      	beq.n	80036e6 <HAL_GPIO_Init+0x21e>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a1a      	ldr	r2, [pc, #104]	; (8003720 <HAL_GPIO_Init+0x258>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d013      	beq.n	80036e2 <HAL_GPIO_Init+0x21a>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a19      	ldr	r2, [pc, #100]	; (8003724 <HAL_GPIO_Init+0x25c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d00d      	beq.n	80036de <HAL_GPIO_Init+0x216>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a18      	ldr	r2, [pc, #96]	; (8003728 <HAL_GPIO_Init+0x260>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d007      	beq.n	80036da <HAL_GPIO_Init+0x212>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a17      	ldr	r2, [pc, #92]	; (800372c <HAL_GPIO_Init+0x264>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d101      	bne.n	80036d6 <HAL_GPIO_Init+0x20e>
 80036d2:	2309      	movs	r3, #9
 80036d4:	e02d      	b.n	8003732 <HAL_GPIO_Init+0x26a>
 80036d6:	230a      	movs	r3, #10
 80036d8:	e02b      	b.n	8003732 <HAL_GPIO_Init+0x26a>
 80036da:	2308      	movs	r3, #8
 80036dc:	e029      	b.n	8003732 <HAL_GPIO_Init+0x26a>
 80036de:	2307      	movs	r3, #7
 80036e0:	e027      	b.n	8003732 <HAL_GPIO_Init+0x26a>
 80036e2:	2306      	movs	r3, #6
 80036e4:	e025      	b.n	8003732 <HAL_GPIO_Init+0x26a>
 80036e6:	2305      	movs	r3, #5
 80036e8:	e023      	b.n	8003732 <HAL_GPIO_Init+0x26a>
 80036ea:	2304      	movs	r3, #4
 80036ec:	e021      	b.n	8003732 <HAL_GPIO_Init+0x26a>
 80036ee:	2303      	movs	r3, #3
 80036f0:	e01f      	b.n	8003732 <HAL_GPIO_Init+0x26a>
 80036f2:	2302      	movs	r3, #2
 80036f4:	e01d      	b.n	8003732 <HAL_GPIO_Init+0x26a>
 80036f6:	2301      	movs	r3, #1
 80036f8:	e01b      	b.n	8003732 <HAL_GPIO_Init+0x26a>
 80036fa:	bf00      	nop
 80036fc:	58000080 	.word	0x58000080
 8003700:	58024400 	.word	0x58024400
 8003704:	58000400 	.word	0x58000400
 8003708:	58020000 	.word	0x58020000
 800370c:	58020400 	.word	0x58020400
 8003710:	58020800 	.word	0x58020800
 8003714:	58020c00 	.word	0x58020c00
 8003718:	58021000 	.word	0x58021000
 800371c:	58021400 	.word	0x58021400
 8003720:	58021800 	.word	0x58021800
 8003724:	58021c00 	.word	0x58021c00
 8003728:	58022000 	.word	0x58022000
 800372c:	58022400 	.word	0x58022400
 8003730:	2300      	movs	r3, #0
 8003732:	69fa      	ldr	r2, [r7, #28]
 8003734:	f002 0203 	and.w	r2, r2, #3
 8003738:	0092      	lsls	r2, r2, #2
 800373a:	4093      	lsls	r3, r2
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	4313      	orrs	r3, r2
 8003740:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003742:	4938      	ldr	r1, [pc, #224]	; (8003824 <HAL_GPIO_Init+0x35c>)
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	089b      	lsrs	r3, r3, #2
 8003748:	3302      	adds	r3, #2
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	43db      	mvns	r3, r3
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	4013      	ands	r3, r2
 8003760:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	4313      	orrs	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003776:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800377e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	43db      	mvns	r3, r3
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	4013      	ands	r3, r2
 800378e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d003      	beq.n	80037a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80037a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	43db      	mvns	r3, r3
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	4013      	ands	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	43db      	mvns	r3, r3
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	4013      	ands	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	3301      	adds	r3, #1
 8003804:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	fa22 f303 	lsr.w	r3, r2, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	f47f ae63 	bne.w	80034dc <HAL_GPIO_Init+0x14>
  }
}
 8003816:	bf00      	nop
 8003818:	bf00      	nop
 800381a:	3724      	adds	r7, #36	; 0x24
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	58000400 	.word	0x58000400

08003828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	460b      	mov	r3, r1
 8003832:	807b      	strh	r3, [r7, #2]
 8003834:	4613      	mov	r3, r2
 8003836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003838:	787b      	ldrb	r3, [r7, #1]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800383e:	887a      	ldrh	r2, [r7, #2]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003844:	e003      	b.n	800384e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003846:	887b      	ldrh	r3, [r7, #2]
 8003848:	041a      	lsls	r2, r3, #16
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	619a      	str	r2, [r3, #24]
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
	...

0800385c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e07f      	b.n	800396e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d106      	bne.n	8003888 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7fd fda8 	bl	80013d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2224      	movs	r2, #36	; 0x24
 800388c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 0201 	bic.w	r2, r2, #1
 800389e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d107      	bne.n	80038d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	689a      	ldr	r2, [r3, #8]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038d2:	609a      	str	r2, [r3, #8]
 80038d4:	e006      	b.n	80038e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	689a      	ldr	r2, [r3, #8]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80038e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d104      	bne.n	80038f6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6859      	ldr	r1, [r3, #4]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	4b1d      	ldr	r3, [pc, #116]	; (8003978 <HAL_I2C_Init+0x11c>)
 8003902:	430b      	orrs	r3, r1
 8003904:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68da      	ldr	r2, [r3, #12]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003914:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	691a      	ldr	r2, [r3, #16]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	69d9      	ldr	r1, [r3, #28]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a1a      	ldr	r2, [r3, #32]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f042 0201 	orr.w	r2, r2, #1
 800394e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2220      	movs	r2, #32
 800395a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	02008000 	.word	0x02008000

0800397c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b20      	cmp	r3, #32
 8003990:	d138      	bne.n	8003a04 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003998:	2b01      	cmp	r3, #1
 800399a:	d101      	bne.n	80039a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800399c:	2302      	movs	r3, #2
 800399e:	e032      	b.n	8003a06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2224      	movs	r2, #36	; 0x24
 80039ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 0201 	bic.w	r2, r2, #1
 80039be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80039ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6819      	ldr	r1, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f042 0201 	orr.w	r2, r2, #1
 80039ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2220      	movs	r2, #32
 80039f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a00:	2300      	movs	r3, #0
 8003a02:	e000      	b.n	8003a06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a04:	2302      	movs	r3, #2
  }
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b085      	sub	sp, #20
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
 8003a1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b20      	cmp	r3, #32
 8003a26:	d139      	bne.n	8003a9c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d101      	bne.n	8003a36 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a32:	2302      	movs	r3, #2
 8003a34:	e033      	b.n	8003a9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2224      	movs	r2, #36	; 0x24
 8003a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0201 	bic.w	r2, r2, #1
 8003a54:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003a64:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	021b      	lsls	r3, r3, #8
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0201 	orr.w	r2, r2, #1
 8003a86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	e000      	b.n	8003a9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a9c:	2302      	movs	r3, #2
  }
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003aaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aac:	b08f      	sub	sp, #60	; 0x3c
 8003aae:	af0a      	add	r7, sp, #40	; 0x28
 8003ab0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e116      	b.n	8003cea <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d106      	bne.n	8003adc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7fe f956 	bl	8001d88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2203      	movs	r2, #3
 8003ae0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d102      	bne.n	8003af6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f008 f858 	bl	800bbb0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	603b      	str	r3, [r7, #0]
 8003b06:	687e      	ldr	r6, [r7, #4]
 8003b08:	466d      	mov	r5, sp
 8003b0a:	f106 0410 	add.w	r4, r6, #16
 8003b0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b1e:	1d33      	adds	r3, r6, #4
 8003b20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b22:	6838      	ldr	r0, [r7, #0]
 8003b24:	f007 ffd6 	bl	800bad4 <USB_CoreInit>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d005      	beq.n	8003b3a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2202      	movs	r2, #2
 8003b32:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e0d7      	b.n	8003cea <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2100      	movs	r1, #0
 8003b40:	4618      	mov	r0, r3
 8003b42:	f008 f846 	bl	800bbd2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b46:	2300      	movs	r3, #0
 8003b48:	73fb      	strb	r3, [r7, #15]
 8003b4a:	e04a      	b.n	8003be2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b4c:	7bfa      	ldrb	r2, [r7, #15]
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	4613      	mov	r3, r2
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	4413      	add	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	333d      	adds	r3, #61	; 0x3d
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b60:	7bfa      	ldrb	r2, [r7, #15]
 8003b62:	6879      	ldr	r1, [r7, #4]
 8003b64:	4613      	mov	r3, r2
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	4413      	add	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	333c      	adds	r3, #60	; 0x3c
 8003b70:	7bfa      	ldrb	r2, [r7, #15]
 8003b72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003b74:	7bfa      	ldrb	r2, [r7, #15]
 8003b76:	7bfb      	ldrb	r3, [r7, #15]
 8003b78:	b298      	uxth	r0, r3
 8003b7a:	6879      	ldr	r1, [r7, #4]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	4413      	add	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	440b      	add	r3, r1
 8003b86:	3356      	adds	r3, #86	; 0x56
 8003b88:	4602      	mov	r2, r0
 8003b8a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b8c:	7bfa      	ldrb	r2, [r7, #15]
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	4613      	mov	r3, r2
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	4413      	add	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	3340      	adds	r3, #64	; 0x40
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ba0:	7bfa      	ldrb	r2, [r7, #15]
 8003ba2:	6879      	ldr	r1, [r7, #4]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	4413      	add	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	440b      	add	r3, r1
 8003bae:	3344      	adds	r3, #68	; 0x44
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003bb4:	7bfa      	ldrb	r2, [r7, #15]
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	4413      	add	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	3348      	adds	r3, #72	; 0x48
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003bc8:	7bfa      	ldrb	r2, [r7, #15]
 8003bca:	6879      	ldr	r1, [r7, #4]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	4413      	add	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	334c      	adds	r3, #76	; 0x4c
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bdc:	7bfb      	ldrb	r3, [r7, #15]
 8003bde:	3301      	adds	r3, #1
 8003be0:	73fb      	strb	r3, [r7, #15]
 8003be2:	7bfa      	ldrb	r2, [r7, #15]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d3af      	bcc.n	8003b4c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bec:	2300      	movs	r3, #0
 8003bee:	73fb      	strb	r3, [r7, #15]
 8003bf0:	e044      	b.n	8003c7c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003bf2:	7bfa      	ldrb	r2, [r7, #15]
 8003bf4:	6879      	ldr	r1, [r7, #4]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	4413      	add	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	440b      	add	r3, r1
 8003c00:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003c04:	2200      	movs	r2, #0
 8003c06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c08:	7bfa      	ldrb	r2, [r7, #15]
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	4413      	add	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	440b      	add	r3, r1
 8003c16:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003c1a:	7bfa      	ldrb	r2, [r7, #15]
 8003c1c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c1e:	7bfa      	ldrb	r2, [r7, #15]
 8003c20:	6879      	ldr	r1, [r7, #4]
 8003c22:	4613      	mov	r3, r2
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	4413      	add	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	440b      	add	r3, r1
 8003c2c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003c30:	2200      	movs	r2, #0
 8003c32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c34:	7bfa      	ldrb	r2, [r7, #15]
 8003c36:	6879      	ldr	r1, [r7, #4]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	4413      	add	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	440b      	add	r3, r1
 8003c42:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003c46:	2200      	movs	r2, #0
 8003c48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c4a:	7bfa      	ldrb	r2, [r7, #15]
 8003c4c:	6879      	ldr	r1, [r7, #4]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	00db      	lsls	r3, r3, #3
 8003c52:	4413      	add	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	440b      	add	r3, r1
 8003c58:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c60:	7bfa      	ldrb	r2, [r7, #15]
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	4613      	mov	r3, r2
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	4413      	add	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003c72:	2200      	movs	r2, #0
 8003c74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c76:	7bfb      	ldrb	r3, [r7, #15]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	73fb      	strb	r3, [r7, #15]
 8003c7c:	7bfa      	ldrb	r2, [r7, #15]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d3b5      	bcc.n	8003bf2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	603b      	str	r3, [r7, #0]
 8003c8c:	687e      	ldr	r6, [r7, #4]
 8003c8e:	466d      	mov	r5, sp
 8003c90:	f106 0410 	add.w	r4, r6, #16
 8003c94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c9c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ca0:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ca4:	1d33      	adds	r3, r6, #4
 8003ca6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ca8:	6838      	ldr	r0, [r7, #0]
 8003caa:	f007 ffdf 	bl	800bc6c <USB_DevInit>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d005      	beq.n	8003cc0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e014      	b.n	8003cea <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d102      	bne.n	8003cde <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f80b 	bl	8003cf4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f008 f99d 	bl	800c022 <USB_DevDisconnect>

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003cf4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d22:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <HAL_PCDEx_ActivateLPM+0x44>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3714      	adds	r7, #20
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	10000003 	.word	0x10000003

08003d3c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003d44:	4b19      	ldr	r3, [pc, #100]	; (8003dac <HAL_PWREx_ConfigSupply+0x70>)
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b04      	cmp	r3, #4
 8003d4e:	d00a      	beq.n	8003d66 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003d50:	4b16      	ldr	r3, [pc, #88]	; (8003dac <HAL_PWREx_ConfigSupply+0x70>)
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d001      	beq.n	8003d62 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e01f      	b.n	8003da2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003d62:	2300      	movs	r3, #0
 8003d64:	e01d      	b.n	8003da2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003d66:	4b11      	ldr	r3, [pc, #68]	; (8003dac <HAL_PWREx_ConfigSupply+0x70>)
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	f023 0207 	bic.w	r2, r3, #7
 8003d6e:	490f      	ldr	r1, [pc, #60]	; (8003dac <HAL_PWREx_ConfigSupply+0x70>)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003d76:	f7fe f9d5 	bl	8002124 <HAL_GetTick>
 8003d7a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d7c:	e009      	b.n	8003d92 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003d7e:	f7fe f9d1 	bl	8002124 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d8c:	d901      	bls.n	8003d92 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e007      	b.n	8003da2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d92:	4b06      	ldr	r3, [pc, #24]	; (8003dac <HAL_PWREx_ConfigSupply+0x70>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d9e:	d1ee      	bne.n	8003d7e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	58024800 	.word	0x58024800

08003db0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003db4:	4b05      	ldr	r3, [pc, #20]	; (8003dcc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	4a04      	ldr	r2, [pc, #16]	; (8003dcc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003dba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dbe:	60d3      	str	r3, [r2, #12]
}
 8003dc0:	bf00      	nop
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	58024800 	.word	0x58024800

08003dd0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af02      	add	r7, sp, #8
 8003dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003dd8:	f7fe f9a4 	bl	8002124 <HAL_GetTick>
 8003ddc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e05f      	b.n	8003ea8 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d107      	bne.n	8003e04 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7fd fc89 	bl	800170c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003dfa:	f241 3188 	movw	r1, #5000	; 0x1388
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f85a 	bl	8003eb8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	3b01      	subs	r3, #1
 8003e14:	021a      	lsls	r2, r3, #8
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	2120      	movs	r1, #32
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f852 	bl	8003ed4 <QSPI_WaitFlagStateUntilTimeout>
 8003e30:	4603      	mov	r3, r0
 8003e32:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003e34:	7afb      	ldrb	r3, [r7, #11]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d135      	bne.n	8003ea6 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	4b1b      	ldr	r3, [pc, #108]	; (8003eb0 <HAL_QSPI_Init+0xe0>)
 8003e42:	4013      	ands	r3, r2
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	6852      	ldr	r2, [r2, #4]
 8003e48:	0611      	lsls	r1, r2, #24
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	68d2      	ldr	r2, [r2, #12]
 8003e4e:	4311      	orrs	r1, r2
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	69d2      	ldr	r2, [r2, #28]
 8003e54:	4311      	orrs	r1, r2
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6a12      	ldr	r2, [r2, #32]
 8003e5a:	4311      	orrs	r1, r2
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	6812      	ldr	r2, [r2, #0]
 8003e60:	430b      	orrs	r3, r1
 8003e62:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	4b12      	ldr	r3, [pc, #72]	; (8003eb4 <HAL_QSPI_Init+0xe4>)
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6912      	ldr	r2, [r2, #16]
 8003e72:	0411      	lsls	r1, r2, #16
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	6952      	ldr	r2, [r2, #20]
 8003e78:	4311      	orrs	r1, r2
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6992      	ldr	r2, [r2, #24]
 8003e7e:	4311      	orrs	r1, r2
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6812      	ldr	r2, [r2, #0]
 8003e84:	430b      	orrs	r3, r1
 8003e86:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0201 	orr.w	r2, r2, #1
 8003e96:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8003ea6:	7afb      	ldrb	r3, [r7, #11]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	00ffff2f 	.word	0x00ffff2f
 8003eb4:	ffe0f8fe 	.word	0xffe0f8fe

08003eb8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	649a      	str	r2, [r3, #72]	; 0x48
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	603b      	str	r3, [r7, #0]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003ee4:	e01a      	b.n	8003f1c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eec:	d016      	beq.n	8003f1c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eee:	f7fe f919 	bl	8002124 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d302      	bcc.n	8003f04 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10b      	bne.n	8003f1c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2204      	movs	r2, #4
 8003f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f10:	f043 0201 	orr.w	r2, r3, #1
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e00e      	b.n	8003f3a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689a      	ldr	r2, [r3, #8]
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	4013      	ands	r3, r2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	bf14      	ite	ne
 8003f2a:	2301      	movne	r3, #1
 8003f2c:	2300      	moveq	r3, #0
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	461a      	mov	r2, r3
 8003f32:	79fb      	ldrb	r3, [r7, #7]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d1d6      	bne.n	8003ee6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
	...

08003f44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b08c      	sub	sp, #48	; 0x30
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d102      	bne.n	8003f58 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	f000 bc48 	b.w	80047e8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 8088 	beq.w	8004076 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f66:	4b99      	ldr	r3, [pc, #612]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f70:	4b96      	ldr	r3, [pc, #600]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8003f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f74:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f78:	2b10      	cmp	r3, #16
 8003f7a:	d007      	beq.n	8003f8c <HAL_RCC_OscConfig+0x48>
 8003f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f7e:	2b18      	cmp	r3, #24
 8003f80:	d111      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x62>
 8003f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f84:	f003 0303 	and.w	r3, r3, #3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d10c      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f8c:	4b8f      	ldr	r3, [pc, #572]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d06d      	beq.n	8004074 <HAL_RCC_OscConfig+0x130>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d169      	bne.n	8004074 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	f000 bc21 	b.w	80047e8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fae:	d106      	bne.n	8003fbe <HAL_RCC_OscConfig+0x7a>
 8003fb0:	4b86      	ldr	r3, [pc, #536]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a85      	ldr	r2, [pc, #532]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8003fb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fba:	6013      	str	r3, [r2, #0]
 8003fbc:	e02e      	b.n	800401c <HAL_RCC_OscConfig+0xd8>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10c      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x9c>
 8003fc6:	4b81      	ldr	r3, [pc, #516]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a80      	ldr	r2, [pc, #512]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8003fcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fd0:	6013      	str	r3, [r2, #0]
 8003fd2:	4b7e      	ldr	r3, [pc, #504]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a7d      	ldr	r2, [pc, #500]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8003fd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	e01d      	b.n	800401c <HAL_RCC_OscConfig+0xd8>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fe8:	d10c      	bne.n	8004004 <HAL_RCC_OscConfig+0xc0>
 8003fea:	4b78      	ldr	r3, [pc, #480]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a77      	ldr	r2, [pc, #476]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8003ff0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ff4:	6013      	str	r3, [r2, #0]
 8003ff6:	4b75      	ldr	r3, [pc, #468]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a74      	ldr	r2, [pc, #464]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8003ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004000:	6013      	str	r3, [r2, #0]
 8004002:	e00b      	b.n	800401c <HAL_RCC_OscConfig+0xd8>
 8004004:	4b71      	ldr	r3, [pc, #452]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a70      	ldr	r2, [pc, #448]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 800400a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800400e:	6013      	str	r3, [r2, #0]
 8004010:	4b6e      	ldr	r3, [pc, #440]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a6d      	ldr	r2, [pc, #436]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8004016:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800401a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d013      	beq.n	800404c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004024:	f7fe f87e 	bl	8002124 <HAL_GetTick>
 8004028:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800402c:	f7fe f87a 	bl	8002124 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b64      	cmp	r3, #100	; 0x64
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e3d4      	b.n	80047e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800403e:	4b63      	ldr	r3, [pc, #396]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0f0      	beq.n	800402c <HAL_RCC_OscConfig+0xe8>
 800404a:	e014      	b.n	8004076 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404c:	f7fe f86a 	bl	8002124 <HAL_GetTick>
 8004050:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004054:	f7fe f866 	bl	8002124 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b64      	cmp	r3, #100	; 0x64
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e3c0      	b.n	80047e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004066:	4b59      	ldr	r3, [pc, #356]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1f0      	bne.n	8004054 <HAL_RCC_OscConfig+0x110>
 8004072:	e000      	b.n	8004076 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 80ca 	beq.w	8004218 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004084:	4b51      	ldr	r3, [pc, #324]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800408c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800408e:	4b4f      	ldr	r3, [pc, #316]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8004090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004092:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004094:	6a3b      	ldr	r3, [r7, #32]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d007      	beq.n	80040aa <HAL_RCC_OscConfig+0x166>
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	2b18      	cmp	r3, #24
 800409e:	d156      	bne.n	800414e <HAL_RCC_OscConfig+0x20a>
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	f003 0303 	and.w	r3, r3, #3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d151      	bne.n	800414e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040aa:	4b48      	ldr	r3, [pc, #288]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0304 	and.w	r3, r3, #4
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d005      	beq.n	80040c2 <HAL_RCC_OscConfig+0x17e>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e392      	b.n	80047e8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80040c2:	4b42      	ldr	r3, [pc, #264]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f023 0219 	bic.w	r2, r3, #25
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	493f      	ldr	r1, [pc, #252]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d4:	f7fe f826 	bl	8002124 <HAL_GetTick>
 80040d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040dc:	f7fe f822 	bl	8002124 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e37c      	b.n	80047e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040ee:	4b37      	ldr	r3, [pc, #220]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0304 	and.w	r3, r3, #4
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d0f0      	beq.n	80040dc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040fa:	f7fe f843 	bl	8002184 <HAL_GetREVID>
 80040fe:	4603      	mov	r3, r0
 8004100:	f241 0203 	movw	r2, #4099	; 0x1003
 8004104:	4293      	cmp	r3, r2
 8004106:	d817      	bhi.n	8004138 <HAL_RCC_OscConfig+0x1f4>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	2b40      	cmp	r3, #64	; 0x40
 800410e:	d108      	bne.n	8004122 <HAL_RCC_OscConfig+0x1de>
 8004110:	4b2e      	ldr	r3, [pc, #184]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004118:	4a2c      	ldr	r2, [pc, #176]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 800411a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800411e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004120:	e07a      	b.n	8004218 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004122:	4b2a      	ldr	r3, [pc, #168]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	031b      	lsls	r3, r3, #12
 8004130:	4926      	ldr	r1, [pc, #152]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8004132:	4313      	orrs	r3, r2
 8004134:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004136:	e06f      	b.n	8004218 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004138:	4b24      	ldr	r3, [pc, #144]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	061b      	lsls	r3, r3, #24
 8004146:	4921      	ldr	r1, [pc, #132]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8004148:	4313      	orrs	r3, r2
 800414a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800414c:	e064      	b.n	8004218 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d047      	beq.n	80041e6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004156:	4b1d      	ldr	r3, [pc, #116]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f023 0219 	bic.w	r2, r3, #25
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	491a      	ldr	r1, [pc, #104]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8004164:	4313      	orrs	r3, r2
 8004166:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004168:	f7fd ffdc 	bl	8002124 <HAL_GetTick>
 800416c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004170:	f7fd ffd8 	bl	8002124 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e332      	b.n	80047e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004182:	4b12      	ldr	r3, [pc, #72]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0304 	and.w	r3, r3, #4
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0f0      	beq.n	8004170 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800418e:	f7fd fff9 	bl	8002184 <HAL_GetREVID>
 8004192:	4603      	mov	r3, r0
 8004194:	f241 0203 	movw	r2, #4099	; 0x1003
 8004198:	4293      	cmp	r3, r2
 800419a:	d819      	bhi.n	80041d0 <HAL_RCC_OscConfig+0x28c>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	2b40      	cmp	r3, #64	; 0x40
 80041a2:	d108      	bne.n	80041b6 <HAL_RCC_OscConfig+0x272>
 80041a4:	4b09      	ldr	r3, [pc, #36]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80041ac:	4a07      	ldr	r2, [pc, #28]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 80041ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041b2:	6053      	str	r3, [r2, #4]
 80041b4:	e030      	b.n	8004218 <HAL_RCC_OscConfig+0x2d4>
 80041b6:	4b05      	ldr	r3, [pc, #20]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	031b      	lsls	r3, r3, #12
 80041c4:	4901      	ldr	r1, [pc, #4]	; (80041cc <HAL_RCC_OscConfig+0x288>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	604b      	str	r3, [r1, #4]
 80041ca:	e025      	b.n	8004218 <HAL_RCC_OscConfig+0x2d4>
 80041cc:	58024400 	.word	0x58024400
 80041d0:	4b9a      	ldr	r3, [pc, #616]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	061b      	lsls	r3, r3, #24
 80041de:	4997      	ldr	r1, [pc, #604]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	604b      	str	r3, [r1, #4]
 80041e4:	e018      	b.n	8004218 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041e6:	4b95      	ldr	r3, [pc, #596]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a94      	ldr	r2, [pc, #592]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 80041ec:	f023 0301 	bic.w	r3, r3, #1
 80041f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f2:	f7fd ff97 	bl	8002124 <HAL_GetTick>
 80041f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80041f8:	e008      	b.n	800420c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041fa:	f7fd ff93 	bl	8002124 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e2ed      	b.n	80047e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800420c:	4b8b      	ldr	r3, [pc, #556]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1f0      	bne.n	80041fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0310 	and.w	r3, r3, #16
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 80a9 	beq.w	8004378 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004226:	4b85      	ldr	r3, [pc, #532]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800422e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004230:	4b82      	ldr	r3, [pc, #520]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 8004232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004234:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	2b08      	cmp	r3, #8
 800423a:	d007      	beq.n	800424c <HAL_RCC_OscConfig+0x308>
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	2b18      	cmp	r3, #24
 8004240:	d13a      	bne.n	80042b8 <HAL_RCC_OscConfig+0x374>
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	f003 0303 	and.w	r3, r3, #3
 8004248:	2b01      	cmp	r3, #1
 800424a:	d135      	bne.n	80042b8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800424c:	4b7b      	ldr	r3, [pc, #492]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004254:	2b00      	cmp	r3, #0
 8004256:	d005      	beq.n	8004264 <HAL_RCC_OscConfig+0x320>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	69db      	ldr	r3, [r3, #28]
 800425c:	2b80      	cmp	r3, #128	; 0x80
 800425e:	d001      	beq.n	8004264 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e2c1      	b.n	80047e8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004264:	f7fd ff8e 	bl	8002184 <HAL_GetREVID>
 8004268:	4603      	mov	r3, r0
 800426a:	f241 0203 	movw	r2, #4099	; 0x1003
 800426e:	4293      	cmp	r3, r2
 8004270:	d817      	bhi.n	80042a2 <HAL_RCC_OscConfig+0x35e>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	2b20      	cmp	r3, #32
 8004278:	d108      	bne.n	800428c <HAL_RCC_OscConfig+0x348>
 800427a:	4b70      	ldr	r3, [pc, #448]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004282:	4a6e      	ldr	r2, [pc, #440]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 8004284:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004288:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800428a:	e075      	b.n	8004378 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800428c:	4b6b      	ldr	r3, [pc, #428]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	069b      	lsls	r3, r3, #26
 800429a:	4968      	ldr	r1, [pc, #416]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 800429c:	4313      	orrs	r3, r2
 800429e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80042a0:	e06a      	b.n	8004378 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80042a2:	4b66      	ldr	r3, [pc, #408]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	061b      	lsls	r3, r3, #24
 80042b0:	4962      	ldr	r1, [pc, #392]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80042b6:	e05f      	b.n	8004378 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	69db      	ldr	r3, [r3, #28]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d042      	beq.n	8004346 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80042c0:	4b5e      	ldr	r3, [pc, #376]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a5d      	ldr	r2, [pc, #372]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 80042c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042cc:	f7fd ff2a 	bl	8002124 <HAL_GetTick>
 80042d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80042d4:	f7fd ff26 	bl	8002124 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e280      	b.n	80047e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80042e6:	4b55      	ldr	r3, [pc, #340]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d0f0      	beq.n	80042d4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80042f2:	f7fd ff47 	bl	8002184 <HAL_GetREVID>
 80042f6:	4603      	mov	r3, r0
 80042f8:	f241 0203 	movw	r2, #4099	; 0x1003
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d817      	bhi.n	8004330 <HAL_RCC_OscConfig+0x3ec>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	2b20      	cmp	r3, #32
 8004306:	d108      	bne.n	800431a <HAL_RCC_OscConfig+0x3d6>
 8004308:	4b4c      	ldr	r3, [pc, #304]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004310:	4a4a      	ldr	r2, [pc, #296]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 8004312:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004316:	6053      	str	r3, [r2, #4]
 8004318:	e02e      	b.n	8004378 <HAL_RCC_OscConfig+0x434>
 800431a:	4b48      	ldr	r3, [pc, #288]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	069b      	lsls	r3, r3, #26
 8004328:	4944      	ldr	r1, [pc, #272]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 800432a:	4313      	orrs	r3, r2
 800432c:	604b      	str	r3, [r1, #4]
 800432e:	e023      	b.n	8004378 <HAL_RCC_OscConfig+0x434>
 8004330:	4b42      	ldr	r3, [pc, #264]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	061b      	lsls	r3, r3, #24
 800433e:	493f      	ldr	r1, [pc, #252]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 8004340:	4313      	orrs	r3, r2
 8004342:	60cb      	str	r3, [r1, #12]
 8004344:	e018      	b.n	8004378 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004346:	4b3d      	ldr	r3, [pc, #244]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a3c      	ldr	r2, [pc, #240]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 800434c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004350:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004352:	f7fd fee7 	bl	8002124 <HAL_GetTick>
 8004356:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004358:	e008      	b.n	800436c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800435a:	f7fd fee3 	bl	8002124 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d901      	bls.n	800436c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e23d      	b.n	80047e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800436c:	4b33      	ldr	r3, [pc, #204]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1f0      	bne.n	800435a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0308 	and.w	r3, r3, #8
 8004380:	2b00      	cmp	r3, #0
 8004382:	d036      	beq.n	80043f2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d019      	beq.n	80043c0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800438c:	4b2b      	ldr	r3, [pc, #172]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 800438e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004390:	4a2a      	ldr	r2, [pc, #168]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 8004392:	f043 0301 	orr.w	r3, r3, #1
 8004396:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004398:	f7fd fec4 	bl	8002124 <HAL_GetTick>
 800439c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043a0:	f7fd fec0 	bl	8002124 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e21a      	b.n	80047e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80043b2:	4b22      	ldr	r3, [pc, #136]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 80043b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0f0      	beq.n	80043a0 <HAL_RCC_OscConfig+0x45c>
 80043be:	e018      	b.n	80043f2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043c0:	4b1e      	ldr	r3, [pc, #120]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 80043c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043c4:	4a1d      	ldr	r2, [pc, #116]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 80043c6:	f023 0301 	bic.w	r3, r3, #1
 80043ca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043cc:	f7fd feaa 	bl	8002124 <HAL_GetTick>
 80043d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043d4:	f7fd fea6 	bl	8002124 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e200      	b.n	80047e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80043e6:	4b15      	ldr	r3, [pc, #84]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 80043e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1f0      	bne.n	80043d4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0320 	and.w	r3, r3, #32
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d039      	beq.n	8004472 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d01c      	beq.n	8004440 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004406:	4b0d      	ldr	r3, [pc, #52]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a0c      	ldr	r2, [pc, #48]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 800440c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004410:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004412:	f7fd fe87 	bl	8002124 <HAL_GetTick>
 8004416:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004418:	e008      	b.n	800442c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800441a:	f7fd fe83 	bl	8002124 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d901      	bls.n	800442c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e1dd      	b.n	80047e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800442c:	4b03      	ldr	r3, [pc, #12]	; (800443c <HAL_RCC_OscConfig+0x4f8>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0f0      	beq.n	800441a <HAL_RCC_OscConfig+0x4d6>
 8004438:	e01b      	b.n	8004472 <HAL_RCC_OscConfig+0x52e>
 800443a:	bf00      	nop
 800443c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004440:	4b9b      	ldr	r3, [pc, #620]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a9a      	ldr	r2, [pc, #616]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 8004446:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800444a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800444c:	f7fd fe6a 	bl	8002124 <HAL_GetTick>
 8004450:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004454:	f7fd fe66 	bl	8002124 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e1c0      	b.n	80047e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004466:	4b92      	ldr	r3, [pc, #584]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1f0      	bne.n	8004454 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0304 	and.w	r3, r3, #4
 800447a:	2b00      	cmp	r3, #0
 800447c:	f000 8081 	beq.w	8004582 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004480:	4b8c      	ldr	r3, [pc, #560]	; (80046b4 <HAL_RCC_OscConfig+0x770>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a8b      	ldr	r2, [pc, #556]	; (80046b4 <HAL_RCC_OscConfig+0x770>)
 8004486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800448a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800448c:	f7fd fe4a 	bl	8002124 <HAL_GetTick>
 8004490:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004492:	e008      	b.n	80044a6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004494:	f7fd fe46 	bl	8002124 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b64      	cmp	r3, #100	; 0x64
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e1a0      	b.n	80047e8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044a6:	4b83      	ldr	r3, [pc, #524]	; (80046b4 <HAL_RCC_OscConfig+0x770>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d0f0      	beq.n	8004494 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d106      	bne.n	80044c8 <HAL_RCC_OscConfig+0x584>
 80044ba:	4b7d      	ldr	r3, [pc, #500]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 80044bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044be:	4a7c      	ldr	r2, [pc, #496]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 80044c0:	f043 0301 	orr.w	r3, r3, #1
 80044c4:	6713      	str	r3, [r2, #112]	; 0x70
 80044c6:	e02d      	b.n	8004524 <HAL_RCC_OscConfig+0x5e0>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10c      	bne.n	80044ea <HAL_RCC_OscConfig+0x5a6>
 80044d0:	4b77      	ldr	r3, [pc, #476]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 80044d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d4:	4a76      	ldr	r2, [pc, #472]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 80044d6:	f023 0301 	bic.w	r3, r3, #1
 80044da:	6713      	str	r3, [r2, #112]	; 0x70
 80044dc:	4b74      	ldr	r3, [pc, #464]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 80044de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e0:	4a73      	ldr	r2, [pc, #460]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 80044e2:	f023 0304 	bic.w	r3, r3, #4
 80044e6:	6713      	str	r3, [r2, #112]	; 0x70
 80044e8:	e01c      	b.n	8004524 <HAL_RCC_OscConfig+0x5e0>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	2b05      	cmp	r3, #5
 80044f0:	d10c      	bne.n	800450c <HAL_RCC_OscConfig+0x5c8>
 80044f2:	4b6f      	ldr	r3, [pc, #444]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 80044f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f6:	4a6e      	ldr	r2, [pc, #440]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 80044f8:	f043 0304 	orr.w	r3, r3, #4
 80044fc:	6713      	str	r3, [r2, #112]	; 0x70
 80044fe:	4b6c      	ldr	r3, [pc, #432]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 8004500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004502:	4a6b      	ldr	r2, [pc, #428]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 8004504:	f043 0301 	orr.w	r3, r3, #1
 8004508:	6713      	str	r3, [r2, #112]	; 0x70
 800450a:	e00b      	b.n	8004524 <HAL_RCC_OscConfig+0x5e0>
 800450c:	4b68      	ldr	r3, [pc, #416]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 800450e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004510:	4a67      	ldr	r2, [pc, #412]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 8004512:	f023 0301 	bic.w	r3, r3, #1
 8004516:	6713      	str	r3, [r2, #112]	; 0x70
 8004518:	4b65      	ldr	r3, [pc, #404]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 800451a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451c:	4a64      	ldr	r2, [pc, #400]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 800451e:	f023 0304 	bic.w	r3, r3, #4
 8004522:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d015      	beq.n	8004558 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800452c:	f7fd fdfa 	bl	8002124 <HAL_GetTick>
 8004530:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004532:	e00a      	b.n	800454a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004534:	f7fd fdf6 	bl	8002124 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004542:	4293      	cmp	r3, r2
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e14e      	b.n	80047e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800454a:	4b59      	ldr	r3, [pc, #356]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 800454c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d0ee      	beq.n	8004534 <HAL_RCC_OscConfig+0x5f0>
 8004556:	e014      	b.n	8004582 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004558:	f7fd fde4 	bl	8002124 <HAL_GetTick>
 800455c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800455e:	e00a      	b.n	8004576 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004560:	f7fd fde0 	bl	8002124 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	f241 3288 	movw	r2, #5000	; 0x1388
 800456e:	4293      	cmp	r3, r2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e138      	b.n	80047e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004576:	4b4e      	ldr	r3, [pc, #312]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 8004578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1ee      	bne.n	8004560 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	2b00      	cmp	r3, #0
 8004588:	f000 812d 	beq.w	80047e6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800458c:	4b48      	ldr	r3, [pc, #288]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004594:	2b18      	cmp	r3, #24
 8004596:	f000 80bd 	beq.w	8004714 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459e:	2b02      	cmp	r3, #2
 80045a0:	f040 809e 	bne.w	80046e0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045a4:	4b42      	ldr	r3, [pc, #264]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a41      	ldr	r2, [pc, #260]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 80045aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b0:	f7fd fdb8 	bl	8002124 <HAL_GetTick>
 80045b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045b8:	f7fd fdb4 	bl	8002124 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e10e      	b.n	80047e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045ca:	4b39      	ldr	r3, [pc, #228]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1f0      	bne.n	80045b8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045d6:	4b36      	ldr	r3, [pc, #216]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 80045d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045da:	4b37      	ldr	r3, [pc, #220]	; (80046b8 <HAL_RCC_OscConfig+0x774>)
 80045dc:	4013      	ands	r3, r2
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80045e6:	0112      	lsls	r2, r2, #4
 80045e8:	430a      	orrs	r2, r1
 80045ea:	4931      	ldr	r1, [pc, #196]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	628b      	str	r3, [r1, #40]	; 0x28
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f4:	3b01      	subs	r3, #1
 80045f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045fe:	3b01      	subs	r3, #1
 8004600:	025b      	lsls	r3, r3, #9
 8004602:	b29b      	uxth	r3, r3
 8004604:	431a      	orrs	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460a:	3b01      	subs	r3, #1
 800460c:	041b      	lsls	r3, r3, #16
 800460e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004618:	3b01      	subs	r3, #1
 800461a:	061b      	lsls	r3, r3, #24
 800461c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004620:	4923      	ldr	r1, [pc, #140]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 8004622:	4313      	orrs	r3, r2
 8004624:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004626:	4b22      	ldr	r3, [pc, #136]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 8004628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462a:	4a21      	ldr	r2, [pc, #132]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 800462c:	f023 0301 	bic.w	r3, r3, #1
 8004630:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004632:	4b1f      	ldr	r3, [pc, #124]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 8004634:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004636:	4b21      	ldr	r3, [pc, #132]	; (80046bc <HAL_RCC_OscConfig+0x778>)
 8004638:	4013      	ands	r3, r2
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800463e:	00d2      	lsls	r2, r2, #3
 8004640:	491b      	ldr	r1, [pc, #108]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 8004642:	4313      	orrs	r3, r2
 8004644:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004646:	4b1a      	ldr	r3, [pc, #104]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 8004648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464a:	f023 020c 	bic.w	r2, r3, #12
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	4917      	ldr	r1, [pc, #92]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 8004654:	4313      	orrs	r3, r2
 8004656:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004658:	4b15      	ldr	r3, [pc, #84]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 800465a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465c:	f023 0202 	bic.w	r2, r3, #2
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004664:	4912      	ldr	r1, [pc, #72]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 8004666:	4313      	orrs	r3, r2
 8004668:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800466a:	4b11      	ldr	r3, [pc, #68]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 800466c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466e:	4a10      	ldr	r2, [pc, #64]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 8004670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004674:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004676:	4b0e      	ldr	r3, [pc, #56]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 8004678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467a:	4a0d      	ldr	r2, [pc, #52]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 800467c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004680:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004682:	4b0b      	ldr	r3, [pc, #44]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 8004684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004686:	4a0a      	ldr	r2, [pc, #40]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 8004688:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800468c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800468e:	4b08      	ldr	r3, [pc, #32]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 8004690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004692:	4a07      	ldr	r2, [pc, #28]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 8004694:	f043 0301 	orr.w	r3, r3, #1
 8004698:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800469a:	4b05      	ldr	r3, [pc, #20]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a04      	ldr	r2, [pc, #16]	; (80046b0 <HAL_RCC_OscConfig+0x76c>)
 80046a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a6:	f7fd fd3d 	bl	8002124 <HAL_GetTick>
 80046aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80046ac:	e011      	b.n	80046d2 <HAL_RCC_OscConfig+0x78e>
 80046ae:	bf00      	nop
 80046b0:	58024400 	.word	0x58024400
 80046b4:	58024800 	.word	0x58024800
 80046b8:	fffffc0c 	.word	0xfffffc0c
 80046bc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c0:	f7fd fd30 	bl	8002124 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e08a      	b.n	80047e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80046d2:	4b47      	ldr	r3, [pc, #284]	; (80047f0 <HAL_RCC_OscConfig+0x8ac>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d0f0      	beq.n	80046c0 <HAL_RCC_OscConfig+0x77c>
 80046de:	e082      	b.n	80047e6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046e0:	4b43      	ldr	r3, [pc, #268]	; (80047f0 <HAL_RCC_OscConfig+0x8ac>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a42      	ldr	r2, [pc, #264]	; (80047f0 <HAL_RCC_OscConfig+0x8ac>)
 80046e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ec:	f7fd fd1a 	bl	8002124 <HAL_GetTick>
 80046f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046f4:	f7fd fd16 	bl	8002124 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e070      	b.n	80047e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004706:	4b3a      	ldr	r3, [pc, #232]	; (80047f0 <HAL_RCC_OscConfig+0x8ac>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1f0      	bne.n	80046f4 <HAL_RCC_OscConfig+0x7b0>
 8004712:	e068      	b.n	80047e6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004714:	4b36      	ldr	r3, [pc, #216]	; (80047f0 <HAL_RCC_OscConfig+0x8ac>)
 8004716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004718:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800471a:	4b35      	ldr	r3, [pc, #212]	; (80047f0 <HAL_RCC_OscConfig+0x8ac>)
 800471c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	2b01      	cmp	r3, #1
 8004726:	d031      	beq.n	800478c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	f003 0203 	and.w	r2, r3, #3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004732:	429a      	cmp	r2, r3
 8004734:	d12a      	bne.n	800478c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	091b      	lsrs	r3, r3, #4
 800473a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004742:	429a      	cmp	r2, r3
 8004744:	d122      	bne.n	800478c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004750:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004752:	429a      	cmp	r2, r3
 8004754:	d11a      	bne.n	800478c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	0a5b      	lsrs	r3, r3, #9
 800475a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004762:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004764:	429a      	cmp	r2, r3
 8004766:	d111      	bne.n	800478c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	0c1b      	lsrs	r3, r3, #16
 800476c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004774:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004776:	429a      	cmp	r2, r3
 8004778:	d108      	bne.n	800478c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	0e1b      	lsrs	r3, r3, #24
 800477e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004786:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004788:	429a      	cmp	r2, r3
 800478a:	d001      	beq.n	8004790 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e02b      	b.n	80047e8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004790:	4b17      	ldr	r3, [pc, #92]	; (80047f0 <HAL_RCC_OscConfig+0x8ac>)
 8004792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004794:	08db      	lsrs	r3, r3, #3
 8004796:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800479a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d01f      	beq.n	80047e6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80047a6:	4b12      	ldr	r3, [pc, #72]	; (80047f0 <HAL_RCC_OscConfig+0x8ac>)
 80047a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047aa:	4a11      	ldr	r2, [pc, #68]	; (80047f0 <HAL_RCC_OscConfig+0x8ac>)
 80047ac:	f023 0301 	bic.w	r3, r3, #1
 80047b0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047b2:	f7fd fcb7 	bl	8002124 <HAL_GetTick>
 80047b6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80047b8:	bf00      	nop
 80047ba:	f7fd fcb3 	bl	8002124 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d0f9      	beq.n	80047ba <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80047c6:	4b0a      	ldr	r3, [pc, #40]	; (80047f0 <HAL_RCC_OscConfig+0x8ac>)
 80047c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047ca:	4b0a      	ldr	r3, [pc, #40]	; (80047f4 <HAL_RCC_OscConfig+0x8b0>)
 80047cc:	4013      	ands	r3, r2
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80047d2:	00d2      	lsls	r2, r2, #3
 80047d4:	4906      	ldr	r1, [pc, #24]	; (80047f0 <HAL_RCC_OscConfig+0x8ac>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80047da:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <HAL_RCC_OscConfig+0x8ac>)
 80047dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047de:	4a04      	ldr	r2, [pc, #16]	; (80047f0 <HAL_RCC_OscConfig+0x8ac>)
 80047e0:	f043 0301 	orr.w	r3, r3, #1
 80047e4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3730      	adds	r7, #48	; 0x30
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	58024400 	.word	0x58024400
 80047f4:	ffff0007 	.word	0xffff0007

080047f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e19c      	b.n	8004b46 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800480c:	4b8a      	ldr	r3, [pc, #552]	; (8004a38 <HAL_RCC_ClockConfig+0x240>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 030f 	and.w	r3, r3, #15
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	429a      	cmp	r2, r3
 8004818:	d910      	bls.n	800483c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800481a:	4b87      	ldr	r3, [pc, #540]	; (8004a38 <HAL_RCC_ClockConfig+0x240>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f023 020f 	bic.w	r2, r3, #15
 8004822:	4985      	ldr	r1, [pc, #532]	; (8004a38 <HAL_RCC_ClockConfig+0x240>)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	4313      	orrs	r3, r2
 8004828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800482a:	4b83      	ldr	r3, [pc, #524]	; (8004a38 <HAL_RCC_ClockConfig+0x240>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 030f 	and.w	r3, r3, #15
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	429a      	cmp	r2, r3
 8004836:	d001      	beq.n	800483c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e184      	b.n	8004b46 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0304 	and.w	r3, r3, #4
 8004844:	2b00      	cmp	r3, #0
 8004846:	d010      	beq.n	800486a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	691a      	ldr	r2, [r3, #16]
 800484c:	4b7b      	ldr	r3, [pc, #492]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004854:	429a      	cmp	r2, r3
 8004856:	d908      	bls.n	800486a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004858:	4b78      	ldr	r3, [pc, #480]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	4975      	ldr	r1, [pc, #468]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 8004866:	4313      	orrs	r3, r2
 8004868:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0308 	and.w	r3, r3, #8
 8004872:	2b00      	cmp	r3, #0
 8004874:	d010      	beq.n	8004898 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	695a      	ldr	r2, [r3, #20]
 800487a:	4b70      	ldr	r3, [pc, #448]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004882:	429a      	cmp	r2, r3
 8004884:	d908      	bls.n	8004898 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004886:	4b6d      	ldr	r3, [pc, #436]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 8004888:	69db      	ldr	r3, [r3, #28]
 800488a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	496a      	ldr	r1, [pc, #424]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 8004894:	4313      	orrs	r3, r2
 8004896:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0310 	and.w	r3, r3, #16
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d010      	beq.n	80048c6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	699a      	ldr	r2, [r3, #24]
 80048a8:	4b64      	ldr	r3, [pc, #400]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 80048aa:	69db      	ldr	r3, [r3, #28]
 80048ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d908      	bls.n	80048c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80048b4:	4b61      	ldr	r3, [pc, #388]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	495e      	ldr	r1, [pc, #376]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0320 	and.w	r3, r3, #32
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d010      	beq.n	80048f4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	69da      	ldr	r2, [r3, #28]
 80048d6:	4b59      	ldr	r3, [pc, #356]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048de:	429a      	cmp	r2, r3
 80048e0:	d908      	bls.n	80048f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80048e2:	4b56      	ldr	r3, [pc, #344]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	4953      	ldr	r1, [pc, #332]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0302 	and.w	r3, r3, #2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d010      	beq.n	8004922 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	68da      	ldr	r2, [r3, #12]
 8004904:	4b4d      	ldr	r3, [pc, #308]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	f003 030f 	and.w	r3, r3, #15
 800490c:	429a      	cmp	r2, r3
 800490e:	d908      	bls.n	8004922 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004910:	4b4a      	ldr	r3, [pc, #296]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	f023 020f 	bic.w	r2, r3, #15
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	4947      	ldr	r1, [pc, #284]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 800491e:	4313      	orrs	r3, r2
 8004920:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d055      	beq.n	80049da <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800492e:	4b43      	ldr	r3, [pc, #268]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	4940      	ldr	r1, [pc, #256]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 800493c:	4313      	orrs	r3, r2
 800493e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	2b02      	cmp	r3, #2
 8004946:	d107      	bne.n	8004958 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004948:	4b3c      	ldr	r3, [pc, #240]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d121      	bne.n	8004998 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e0f6      	b.n	8004b46 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	2b03      	cmp	r3, #3
 800495e:	d107      	bne.n	8004970 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004960:	4b36      	ldr	r3, [pc, #216]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d115      	bne.n	8004998 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e0ea      	b.n	8004b46 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d107      	bne.n	8004988 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004978:	4b30      	ldr	r3, [pc, #192]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004980:	2b00      	cmp	r3, #0
 8004982:	d109      	bne.n	8004998 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e0de      	b.n	8004b46 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004988:	4b2c      	ldr	r3, [pc, #176]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	2b00      	cmp	r3, #0
 8004992:	d101      	bne.n	8004998 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e0d6      	b.n	8004b46 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004998:	4b28      	ldr	r3, [pc, #160]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	f023 0207 	bic.w	r2, r3, #7
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	4925      	ldr	r1, [pc, #148]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049aa:	f7fd fbbb 	bl	8002124 <HAL_GetTick>
 80049ae:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049b0:	e00a      	b.n	80049c8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049b2:	f7fd fbb7 	bl	8002124 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e0be      	b.n	8004b46 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049c8:	4b1c      	ldr	r3, [pc, #112]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	00db      	lsls	r3, r3, #3
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d1eb      	bne.n	80049b2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d010      	beq.n	8004a08 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	4b14      	ldr	r3, [pc, #80]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	f003 030f 	and.w	r3, r3, #15
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d208      	bcs.n	8004a08 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049f6:	4b11      	ldr	r3, [pc, #68]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	f023 020f 	bic.w	r2, r3, #15
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	490e      	ldr	r1, [pc, #56]	; (8004a3c <HAL_RCC_ClockConfig+0x244>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a08:	4b0b      	ldr	r3, [pc, #44]	; (8004a38 <HAL_RCC_ClockConfig+0x240>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 030f 	and.w	r3, r3, #15
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d214      	bcs.n	8004a40 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a16:	4b08      	ldr	r3, [pc, #32]	; (8004a38 <HAL_RCC_ClockConfig+0x240>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f023 020f 	bic.w	r2, r3, #15
 8004a1e:	4906      	ldr	r1, [pc, #24]	; (8004a38 <HAL_RCC_ClockConfig+0x240>)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a26:	4b04      	ldr	r3, [pc, #16]	; (8004a38 <HAL_RCC_ClockConfig+0x240>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d005      	beq.n	8004a40 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e086      	b.n	8004b46 <HAL_RCC_ClockConfig+0x34e>
 8004a38:	52002000 	.word	0x52002000
 8004a3c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0304 	and.w	r3, r3, #4
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d010      	beq.n	8004a6e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	691a      	ldr	r2, [r3, #16]
 8004a50:	4b3f      	ldr	r3, [pc, #252]	; (8004b50 <HAL_RCC_ClockConfig+0x358>)
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d208      	bcs.n	8004a6e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004a5c:	4b3c      	ldr	r3, [pc, #240]	; (8004b50 <HAL_RCC_ClockConfig+0x358>)
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	4939      	ldr	r1, [pc, #228]	; (8004b50 <HAL_RCC_ClockConfig+0x358>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0308 	and.w	r3, r3, #8
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d010      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	695a      	ldr	r2, [r3, #20]
 8004a7e:	4b34      	ldr	r3, [pc, #208]	; (8004b50 <HAL_RCC_ClockConfig+0x358>)
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d208      	bcs.n	8004a9c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004a8a:	4b31      	ldr	r3, [pc, #196]	; (8004b50 <HAL_RCC_ClockConfig+0x358>)
 8004a8c:	69db      	ldr	r3, [r3, #28]
 8004a8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	492e      	ldr	r1, [pc, #184]	; (8004b50 <HAL_RCC_ClockConfig+0x358>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0310 	and.w	r3, r3, #16
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d010      	beq.n	8004aca <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	699a      	ldr	r2, [r3, #24]
 8004aac:	4b28      	ldr	r3, [pc, #160]	; (8004b50 <HAL_RCC_ClockConfig+0x358>)
 8004aae:	69db      	ldr	r3, [r3, #28]
 8004ab0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d208      	bcs.n	8004aca <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ab8:	4b25      	ldr	r3, [pc, #148]	; (8004b50 <HAL_RCC_ClockConfig+0x358>)
 8004aba:	69db      	ldr	r3, [r3, #28]
 8004abc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	4922      	ldr	r1, [pc, #136]	; (8004b50 <HAL_RCC_ClockConfig+0x358>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0320 	and.w	r3, r3, #32
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d010      	beq.n	8004af8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	69da      	ldr	r2, [r3, #28]
 8004ada:	4b1d      	ldr	r3, [pc, #116]	; (8004b50 <HAL_RCC_ClockConfig+0x358>)
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d208      	bcs.n	8004af8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004ae6:	4b1a      	ldr	r3, [pc, #104]	; (8004b50 <HAL_RCC_ClockConfig+0x358>)
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	4917      	ldr	r1, [pc, #92]	; (8004b50 <HAL_RCC_ClockConfig+0x358>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004af8:	f000 f834 	bl	8004b64 <HAL_RCC_GetSysClockFreq>
 8004afc:	4602      	mov	r2, r0
 8004afe:	4b14      	ldr	r3, [pc, #80]	; (8004b50 <HAL_RCC_ClockConfig+0x358>)
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	0a1b      	lsrs	r3, r3, #8
 8004b04:	f003 030f 	and.w	r3, r3, #15
 8004b08:	4912      	ldr	r1, [pc, #72]	; (8004b54 <HAL_RCC_ClockConfig+0x35c>)
 8004b0a:	5ccb      	ldrb	r3, [r1, r3]
 8004b0c:	f003 031f 	and.w	r3, r3, #31
 8004b10:	fa22 f303 	lsr.w	r3, r2, r3
 8004b14:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b16:	4b0e      	ldr	r3, [pc, #56]	; (8004b50 <HAL_RCC_ClockConfig+0x358>)
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	f003 030f 	and.w	r3, r3, #15
 8004b1e:	4a0d      	ldr	r2, [pc, #52]	; (8004b54 <HAL_RCC_ClockConfig+0x35c>)
 8004b20:	5cd3      	ldrb	r3, [r2, r3]
 8004b22:	f003 031f 	and.w	r3, r3, #31
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	fa22 f303 	lsr.w	r3, r2, r3
 8004b2c:	4a0a      	ldr	r2, [pc, #40]	; (8004b58 <HAL_RCC_ClockConfig+0x360>)
 8004b2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004b30:	4a0a      	ldr	r2, [pc, #40]	; (8004b5c <HAL_RCC_ClockConfig+0x364>)
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004b36:	4b0a      	ldr	r3, [pc, #40]	; (8004b60 <HAL_RCC_ClockConfig+0x368>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fd faa8 	bl	8002090 <HAL_InitTick>
 8004b40:	4603      	mov	r3, r0
 8004b42:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3718      	adds	r7, #24
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	58024400 	.word	0x58024400
 8004b54:	0800c158 	.word	0x0800c158
 8004b58:	24000004 	.word	0x24000004
 8004b5c:	24000000 	.word	0x24000000
 8004b60:	24000008 	.word	0x24000008

08004b64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b089      	sub	sp, #36	; 0x24
 8004b68:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b6a:	4bb3      	ldr	r3, [pc, #716]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b72:	2b18      	cmp	r3, #24
 8004b74:	f200 8155 	bhi.w	8004e22 <HAL_RCC_GetSysClockFreq+0x2be>
 8004b78:	a201      	add	r2, pc, #4	; (adr r2, 8004b80 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7e:	bf00      	nop
 8004b80:	08004be5 	.word	0x08004be5
 8004b84:	08004e23 	.word	0x08004e23
 8004b88:	08004e23 	.word	0x08004e23
 8004b8c:	08004e23 	.word	0x08004e23
 8004b90:	08004e23 	.word	0x08004e23
 8004b94:	08004e23 	.word	0x08004e23
 8004b98:	08004e23 	.word	0x08004e23
 8004b9c:	08004e23 	.word	0x08004e23
 8004ba0:	08004c0b 	.word	0x08004c0b
 8004ba4:	08004e23 	.word	0x08004e23
 8004ba8:	08004e23 	.word	0x08004e23
 8004bac:	08004e23 	.word	0x08004e23
 8004bb0:	08004e23 	.word	0x08004e23
 8004bb4:	08004e23 	.word	0x08004e23
 8004bb8:	08004e23 	.word	0x08004e23
 8004bbc:	08004e23 	.word	0x08004e23
 8004bc0:	08004c11 	.word	0x08004c11
 8004bc4:	08004e23 	.word	0x08004e23
 8004bc8:	08004e23 	.word	0x08004e23
 8004bcc:	08004e23 	.word	0x08004e23
 8004bd0:	08004e23 	.word	0x08004e23
 8004bd4:	08004e23 	.word	0x08004e23
 8004bd8:	08004e23 	.word	0x08004e23
 8004bdc:	08004e23 	.word	0x08004e23
 8004be0:	08004c17 	.word	0x08004c17
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004be4:	4b94      	ldr	r3, [pc, #592]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0320 	and.w	r3, r3, #32
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d009      	beq.n	8004c04 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004bf0:	4b91      	ldr	r3, [pc, #580]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	08db      	lsrs	r3, r3, #3
 8004bf6:	f003 0303 	and.w	r3, r3, #3
 8004bfa:	4a90      	ldr	r2, [pc, #576]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8004c00:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004c02:	e111      	b.n	8004e28 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004c04:	4b8d      	ldr	r3, [pc, #564]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004c06:	61bb      	str	r3, [r7, #24]
      break;
 8004c08:	e10e      	b.n	8004e28 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004c0a:	4b8d      	ldr	r3, [pc, #564]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004c0c:	61bb      	str	r3, [r7, #24]
      break;
 8004c0e:	e10b      	b.n	8004e28 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004c10:	4b8c      	ldr	r3, [pc, #560]	; (8004e44 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004c12:	61bb      	str	r3, [r7, #24]
      break;
 8004c14:	e108      	b.n	8004e28 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c16:	4b88      	ldr	r3, [pc, #544]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1a:	f003 0303 	and.w	r3, r3, #3
 8004c1e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004c20:	4b85      	ldr	r3, [pc, #532]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c24:	091b      	lsrs	r3, r3, #4
 8004c26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c2a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004c2c:	4b82      	ldr	r3, [pc, #520]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004c36:	4b80      	ldr	r3, [pc, #512]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c3a:	08db      	lsrs	r3, r3, #3
 8004c3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	fb02 f303 	mul.w	r3, r2, r3
 8004c46:	ee07 3a90 	vmov	s15, r3
 8004c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c4e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 80e1 	beq.w	8004e1c <HAL_RCC_GetSysClockFreq+0x2b8>
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	f000 8083 	beq.w	8004d68 <HAL_RCC_GetSysClockFreq+0x204>
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	f200 80a1 	bhi.w	8004dac <HAL_RCC_GetSysClockFreq+0x248>
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d003      	beq.n	8004c78 <HAL_RCC_GetSysClockFreq+0x114>
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d056      	beq.n	8004d24 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004c76:	e099      	b.n	8004dac <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c78:	4b6f      	ldr	r3, [pc, #444]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0320 	and.w	r3, r3, #32
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d02d      	beq.n	8004ce0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c84:	4b6c      	ldr	r3, [pc, #432]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	08db      	lsrs	r3, r3, #3
 8004c8a:	f003 0303 	and.w	r3, r3, #3
 8004c8e:	4a6b      	ldr	r2, [pc, #428]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004c90:	fa22 f303 	lsr.w	r3, r2, r3
 8004c94:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	ee07 3a90 	vmov	s15, r3
 8004c9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	ee07 3a90 	vmov	s15, r3
 8004ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cae:	4b62      	ldr	r3, [pc, #392]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cb6:	ee07 3a90 	vmov	s15, r3
 8004cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cc2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004e48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cda:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004cde:	e087      	b.n	8004df0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	ee07 3a90 	vmov	s15, r3
 8004ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cea:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004e4c <HAL_RCC_GetSysClockFreq+0x2e8>
 8004cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cf2:	4b51      	ldr	r3, [pc, #324]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cfa:	ee07 3a90 	vmov	s15, r3
 8004cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d02:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d06:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004e48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004d22:	e065      	b.n	8004df0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	ee07 3a90 	vmov	s15, r3
 8004d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d2e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004e50 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d36:	4b40      	ldr	r3, [pc, #256]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d3e:	ee07 3a90 	vmov	s15, r3
 8004d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d46:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d4a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004e48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004d66:	e043      	b.n	8004df0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	ee07 3a90 	vmov	s15, r3
 8004d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d72:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004e54 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d7a:	4b2f      	ldr	r3, [pc, #188]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d82:	ee07 3a90 	vmov	s15, r3
 8004d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d8e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004e48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004da6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004daa:	e021      	b.n	8004df0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	ee07 3a90 	vmov	s15, r3
 8004db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004db6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004e50 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dbe:	4b1e      	ldr	r3, [pc, #120]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dc6:	ee07 3a90 	vmov	s15, r3
 8004dca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dce:	ed97 6a02 	vldr	s12, [r7, #8]
 8004dd2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004e48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004dd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004dee:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004df0:	4b11      	ldr	r3, [pc, #68]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df4:	0a5b      	lsrs	r3, r3, #9
 8004df6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	ee07 3a90 	vmov	s15, r3
 8004e04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004e08:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e14:	ee17 3a90 	vmov	r3, s15
 8004e18:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004e1a:	e005      	b.n	8004e28 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	61bb      	str	r3, [r7, #24]
      break;
 8004e20:	e002      	b.n	8004e28 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004e22:	4b07      	ldr	r3, [pc, #28]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004e24:	61bb      	str	r3, [r7, #24]
      break;
 8004e26:	bf00      	nop
  }

  return sysclockfreq;
 8004e28:	69bb      	ldr	r3, [r7, #24]
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3724      	adds	r7, #36	; 0x24
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	58024400 	.word	0x58024400
 8004e3c:	03d09000 	.word	0x03d09000
 8004e40:	003d0900 	.word	0x003d0900
 8004e44:	017d7840 	.word	0x017d7840
 8004e48:	46000000 	.word	0x46000000
 8004e4c:	4c742400 	.word	0x4c742400
 8004e50:	4a742400 	.word	0x4a742400
 8004e54:	4bbebc20 	.word	0x4bbebc20

08004e58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004e5e:	f7ff fe81 	bl	8004b64 <HAL_RCC_GetSysClockFreq>
 8004e62:	4602      	mov	r2, r0
 8004e64:	4b10      	ldr	r3, [pc, #64]	; (8004ea8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	0a1b      	lsrs	r3, r3, #8
 8004e6a:	f003 030f 	and.w	r3, r3, #15
 8004e6e:	490f      	ldr	r1, [pc, #60]	; (8004eac <HAL_RCC_GetHCLKFreq+0x54>)
 8004e70:	5ccb      	ldrb	r3, [r1, r3]
 8004e72:	f003 031f 	and.w	r3, r3, #31
 8004e76:	fa22 f303 	lsr.w	r3, r2, r3
 8004e7a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e7c:	4b0a      	ldr	r3, [pc, #40]	; (8004ea8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	f003 030f 	and.w	r3, r3, #15
 8004e84:	4a09      	ldr	r2, [pc, #36]	; (8004eac <HAL_RCC_GetHCLKFreq+0x54>)
 8004e86:	5cd3      	ldrb	r3, [r2, r3]
 8004e88:	f003 031f 	and.w	r3, r3, #31
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e92:	4a07      	ldr	r2, [pc, #28]	; (8004eb0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004e94:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004e96:	4a07      	ldr	r2, [pc, #28]	; (8004eb4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004e9c:	4b04      	ldr	r3, [pc, #16]	; (8004eb0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3708      	adds	r7, #8
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	58024400 	.word	0x58024400
 8004eac:	0800c158 	.word	0x0800c158
 8004eb0:	24000004 	.word	0x24000004
 8004eb4:	24000000 	.word	0x24000000

08004eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004ebc:	f7ff ffcc 	bl	8004e58 <HAL_RCC_GetHCLKFreq>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	4b06      	ldr	r3, [pc, #24]	; (8004edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	091b      	lsrs	r3, r3, #4
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	4904      	ldr	r1, [pc, #16]	; (8004ee0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ece:	5ccb      	ldrb	r3, [r1, r3]
 8004ed0:	f003 031f 	and.w	r3, r3, #31
 8004ed4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	58024400 	.word	0x58024400
 8004ee0:	0800c158 	.word	0x0800c158

08004ee4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004ee8:	f7ff ffb6 	bl	8004e58 <HAL_RCC_GetHCLKFreq>
 8004eec:	4602      	mov	r2, r0
 8004eee:	4b06      	ldr	r3, [pc, #24]	; (8004f08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	0a1b      	lsrs	r3, r3, #8
 8004ef4:	f003 0307 	and.w	r3, r3, #7
 8004ef8:	4904      	ldr	r1, [pc, #16]	; (8004f0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004efa:	5ccb      	ldrb	r3, [r1, r3]
 8004efc:	f003 031f 	and.w	r3, r3, #31
 8004f00:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	58024400 	.word	0x58024400
 8004f0c:	0800c158 	.word	0x0800c158

08004f10 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f14:	b0ca      	sub	sp, #296	; 0x128
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f22:	2300      	movs	r3, #0
 8004f24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f30:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004f34:	2500      	movs	r5, #0
 8004f36:	ea54 0305 	orrs.w	r3, r4, r5
 8004f3a:	d049      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f42:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f46:	d02f      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004f48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f4c:	d828      	bhi.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004f4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f52:	d01a      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004f54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f58:	d822      	bhi.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d003      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004f5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f62:	d007      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004f64:	e01c      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f66:	4bb8      	ldr	r3, [pc, #736]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6a:	4ab7      	ldr	r2, [pc, #732]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004f72:	e01a      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f78:	3308      	adds	r3, #8
 8004f7a:	2102      	movs	r1, #2
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f002 fb61 	bl	8007644 <RCCEx_PLL2_Config>
 8004f82:	4603      	mov	r3, r0
 8004f84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004f88:	e00f      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f8e:	3328      	adds	r3, #40	; 0x28
 8004f90:	2102      	movs	r1, #2
 8004f92:	4618      	mov	r0, r3
 8004f94:	f002 fc08 	bl	80077a8 <RCCEx_PLL3_Config>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004f9e:	e004      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004fa6:	e000      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004fa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004faa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10a      	bne.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004fb2:	4ba5      	ldr	r3, [pc, #660]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fb6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fc0:	4aa1      	ldr	r2, [pc, #644]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fc2:	430b      	orrs	r3, r1
 8004fc4:	6513      	str	r3, [r2, #80]	; 0x50
 8004fc6:	e003      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004fcc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004fdc:	f04f 0900 	mov.w	r9, #0
 8004fe0:	ea58 0309 	orrs.w	r3, r8, r9
 8004fe4:	d047      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fec:	2b04      	cmp	r3, #4
 8004fee:	d82a      	bhi.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004ff0:	a201      	add	r2, pc, #4	; (adr r2, 8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff6:	bf00      	nop
 8004ff8:	0800500d 	.word	0x0800500d
 8004ffc:	0800501b 	.word	0x0800501b
 8005000:	08005031 	.word	0x08005031
 8005004:	0800504f 	.word	0x0800504f
 8005008:	0800504f 	.word	0x0800504f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800500c:	4b8e      	ldr	r3, [pc, #568]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800500e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005010:	4a8d      	ldr	r2, [pc, #564]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005016:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005018:	e01a      	b.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800501a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800501e:	3308      	adds	r3, #8
 8005020:	2100      	movs	r1, #0
 8005022:	4618      	mov	r0, r3
 8005024:	f002 fb0e 	bl	8007644 <RCCEx_PLL2_Config>
 8005028:	4603      	mov	r3, r0
 800502a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800502e:	e00f      	b.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005030:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005034:	3328      	adds	r3, #40	; 0x28
 8005036:	2100      	movs	r1, #0
 8005038:	4618      	mov	r0, r3
 800503a:	f002 fbb5 	bl	80077a8 <RCCEx_PLL3_Config>
 800503e:	4603      	mov	r3, r0
 8005040:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005044:	e004      	b.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800504c:	e000      	b.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800504e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005050:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005054:	2b00      	cmp	r3, #0
 8005056:	d10a      	bne.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005058:	4b7b      	ldr	r3, [pc, #492]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800505a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800505c:	f023 0107 	bic.w	r1, r3, #7
 8005060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005066:	4a78      	ldr	r2, [pc, #480]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005068:	430b      	orrs	r3, r1
 800506a:	6513      	str	r3, [r2, #80]	; 0x50
 800506c:	e003      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800506e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005072:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005076:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800507a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005082:	f04f 0b00 	mov.w	fp, #0
 8005086:	ea5a 030b 	orrs.w	r3, sl, fp
 800508a:	d04c      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800508c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005096:	d030      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005098:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800509c:	d829      	bhi.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800509e:	2bc0      	cmp	r3, #192	; 0xc0
 80050a0:	d02d      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80050a2:	2bc0      	cmp	r3, #192	; 0xc0
 80050a4:	d825      	bhi.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80050a6:	2b80      	cmp	r3, #128	; 0x80
 80050a8:	d018      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80050aa:	2b80      	cmp	r3, #128	; 0x80
 80050ac:	d821      	bhi.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d002      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80050b2:	2b40      	cmp	r3, #64	; 0x40
 80050b4:	d007      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80050b6:	e01c      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050b8:	4b63      	ldr	r3, [pc, #396]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050bc:	4a62      	ldr	r2, [pc, #392]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80050c4:	e01c      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050ca:	3308      	adds	r3, #8
 80050cc:	2100      	movs	r1, #0
 80050ce:	4618      	mov	r0, r3
 80050d0:	f002 fab8 	bl	8007644 <RCCEx_PLL2_Config>
 80050d4:	4603      	mov	r3, r0
 80050d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80050da:	e011      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050e0:	3328      	adds	r3, #40	; 0x28
 80050e2:	2100      	movs	r1, #0
 80050e4:	4618      	mov	r0, r3
 80050e6:	f002 fb5f 	bl	80077a8 <RCCEx_PLL3_Config>
 80050ea:	4603      	mov	r3, r0
 80050ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80050f0:	e006      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80050f8:	e002      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80050fa:	bf00      	nop
 80050fc:	e000      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80050fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005100:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10a      	bne.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005108:	4b4f      	ldr	r3, [pc, #316]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800510a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800510c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005110:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005116:	4a4c      	ldr	r2, [pc, #304]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005118:	430b      	orrs	r3, r1
 800511a:	6513      	str	r3, [r2, #80]	; 0x50
 800511c:	e003      	b.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800511e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005122:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005126:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800512a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005132:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005136:	2300      	movs	r3, #0
 8005138:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800513c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8005140:	460b      	mov	r3, r1
 8005142:	4313      	orrs	r3, r2
 8005144:	d053      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800514a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800514e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005152:	d035      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005154:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005158:	d82e      	bhi.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800515a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800515e:	d031      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005160:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005164:	d828      	bhi.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005166:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800516a:	d01a      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800516c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005170:	d822      	bhi.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005176:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800517a:	d007      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800517c:	e01c      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800517e:	4b32      	ldr	r3, [pc, #200]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005182:	4a31      	ldr	r2, [pc, #196]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005188:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800518a:	e01c      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800518c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005190:	3308      	adds	r3, #8
 8005192:	2100      	movs	r1, #0
 8005194:	4618      	mov	r0, r3
 8005196:	f002 fa55 	bl	8007644 <RCCEx_PLL2_Config>
 800519a:	4603      	mov	r3, r0
 800519c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80051a0:	e011      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80051a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051a6:	3328      	adds	r3, #40	; 0x28
 80051a8:	2100      	movs	r1, #0
 80051aa:	4618      	mov	r0, r3
 80051ac:	f002 fafc 	bl	80077a8 <RCCEx_PLL3_Config>
 80051b0:	4603      	mov	r3, r0
 80051b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80051b6:	e006      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80051be:	e002      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80051c0:	bf00      	nop
 80051c2:	e000      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80051c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d10b      	bne.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80051ce:	4b1e      	ldr	r3, [pc, #120]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80051d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80051de:	4a1a      	ldr	r2, [pc, #104]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051e0:	430b      	orrs	r3, r1
 80051e2:	6593      	str	r3, [r2, #88]	; 0x58
 80051e4:	e003      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80051ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80051fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80051fe:	2300      	movs	r3, #0
 8005200:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005204:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005208:	460b      	mov	r3, r1
 800520a:	4313      	orrs	r3, r2
 800520c:	d056      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800520e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005212:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005216:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800521a:	d038      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800521c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005220:	d831      	bhi.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005222:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005226:	d034      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005228:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800522c:	d82b      	bhi.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800522e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005232:	d01d      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005234:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005238:	d825      	bhi.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800523a:	2b00      	cmp	r3, #0
 800523c:	d006      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800523e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005242:	d00a      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005244:	e01f      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005246:	bf00      	nop
 8005248:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800524c:	4ba2      	ldr	r3, [pc, #648]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800524e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005250:	4aa1      	ldr	r2, [pc, #644]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005252:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005256:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005258:	e01c      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800525a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800525e:	3308      	adds	r3, #8
 8005260:	2100      	movs	r1, #0
 8005262:	4618      	mov	r0, r3
 8005264:	f002 f9ee 	bl	8007644 <RCCEx_PLL2_Config>
 8005268:	4603      	mov	r3, r0
 800526a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800526e:	e011      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005270:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005274:	3328      	adds	r3, #40	; 0x28
 8005276:	2100      	movs	r1, #0
 8005278:	4618      	mov	r0, r3
 800527a:	f002 fa95 	bl	80077a8 <RCCEx_PLL3_Config>
 800527e:	4603      	mov	r3, r0
 8005280:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005284:	e006      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800528c:	e002      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800528e:	bf00      	nop
 8005290:	e000      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005292:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005294:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005298:	2b00      	cmp	r3, #0
 800529a:	d10b      	bne.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800529c:	4b8e      	ldr	r3, [pc, #568]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800529e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80052a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80052ac:	4a8a      	ldr	r2, [pc, #552]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052ae:	430b      	orrs	r3, r1
 80052b0:	6593      	str	r3, [r2, #88]	; 0x58
 80052b2:	e003      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80052bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80052c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80052cc:	2300      	movs	r3, #0
 80052ce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80052d2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80052d6:	460b      	mov	r3, r1
 80052d8:	4313      	orrs	r3, r2
 80052da:	d03a      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80052dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052e2:	2b30      	cmp	r3, #48	; 0x30
 80052e4:	d01f      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80052e6:	2b30      	cmp	r3, #48	; 0x30
 80052e8:	d819      	bhi.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80052ea:	2b20      	cmp	r3, #32
 80052ec:	d00c      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80052ee:	2b20      	cmp	r3, #32
 80052f0:	d815      	bhi.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d019      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80052f6:	2b10      	cmp	r3, #16
 80052f8:	d111      	bne.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052fa:	4b77      	ldr	r3, [pc, #476]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fe:	4a76      	ldr	r2, [pc, #472]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005304:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005306:	e011      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005308:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800530c:	3308      	adds	r3, #8
 800530e:	2102      	movs	r1, #2
 8005310:	4618      	mov	r0, r3
 8005312:	f002 f997 	bl	8007644 <RCCEx_PLL2_Config>
 8005316:	4603      	mov	r3, r0
 8005318:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800531c:	e006      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005324:	e002      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005326:	bf00      	nop
 8005328:	e000      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800532a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800532c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005330:	2b00      	cmp	r3, #0
 8005332:	d10a      	bne.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005334:	4b68      	ldr	r3, [pc, #416]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005338:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800533c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005342:	4a65      	ldr	r2, [pc, #404]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005344:	430b      	orrs	r3, r1
 8005346:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005348:	e003      	b.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800534a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800534e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800535e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005362:	2300      	movs	r3, #0
 8005364:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005368:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800536c:	460b      	mov	r3, r1
 800536e:	4313      	orrs	r3, r2
 8005370:	d051      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005372:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005378:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800537c:	d035      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800537e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005382:	d82e      	bhi.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005384:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005388:	d031      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800538a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800538e:	d828      	bhi.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005394:	d01a      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800539a:	d822      	bhi.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800539c:	2b00      	cmp	r3, #0
 800539e:	d003      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80053a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053a4:	d007      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80053a6:	e01c      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053a8:	4b4b      	ldr	r3, [pc, #300]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ac:	4a4a      	ldr	r2, [pc, #296]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80053b4:	e01c      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053ba:	3308      	adds	r3, #8
 80053bc:	2100      	movs	r1, #0
 80053be:	4618      	mov	r0, r3
 80053c0:	f002 f940 	bl	8007644 <RCCEx_PLL2_Config>
 80053c4:	4603      	mov	r3, r0
 80053c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80053ca:	e011      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053d0:	3328      	adds	r3, #40	; 0x28
 80053d2:	2100      	movs	r1, #0
 80053d4:	4618      	mov	r0, r3
 80053d6:	f002 f9e7 	bl	80077a8 <RCCEx_PLL3_Config>
 80053da:	4603      	mov	r3, r0
 80053dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80053e0:	e006      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80053e8:	e002      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80053ea:	bf00      	nop
 80053ec:	e000      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80053ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d10a      	bne.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80053f8:	4b37      	ldr	r3, [pc, #220]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053fc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005400:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005406:	4a34      	ldr	r2, [pc, #208]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005408:	430b      	orrs	r3, r1
 800540a:	6513      	str	r3, [r2, #80]	; 0x50
 800540c:	e003      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800540e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005412:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800541a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005422:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005426:	2300      	movs	r3, #0
 8005428:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800542c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005430:	460b      	mov	r3, r1
 8005432:	4313      	orrs	r3, r2
 8005434:	d056      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005436:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800543a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800543c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005440:	d033      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005442:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005446:	d82c      	bhi.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005448:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800544c:	d02f      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800544e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005452:	d826      	bhi.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005454:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005458:	d02b      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800545a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800545e:	d820      	bhi.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005460:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005464:	d012      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005466:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800546a:	d81a      	bhi.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800546c:	2b00      	cmp	r3, #0
 800546e:	d022      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005474:	d115      	bne.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800547a:	3308      	adds	r3, #8
 800547c:	2101      	movs	r1, #1
 800547e:	4618      	mov	r0, r3
 8005480:	f002 f8e0 	bl	8007644 <RCCEx_PLL2_Config>
 8005484:	4603      	mov	r3, r0
 8005486:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800548a:	e015      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800548c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005490:	3328      	adds	r3, #40	; 0x28
 8005492:	2101      	movs	r1, #1
 8005494:	4618      	mov	r0, r3
 8005496:	f002 f987 	bl	80077a8 <RCCEx_PLL3_Config>
 800549a:	4603      	mov	r3, r0
 800549c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80054a0:	e00a      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80054a8:	e006      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80054aa:	bf00      	nop
 80054ac:	e004      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80054ae:	bf00      	nop
 80054b0:	e002      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80054b2:	bf00      	nop
 80054b4:	e000      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80054b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10d      	bne.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80054c0:	4b05      	ldr	r3, [pc, #20]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054c4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80054c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054ce:	4a02      	ldr	r2, [pc, #8]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054d0:	430b      	orrs	r3, r1
 80054d2:	6513      	str	r3, [r2, #80]	; 0x50
 80054d4:	e006      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80054d6:	bf00      	nop
 80054d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80054e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ec:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80054f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80054f4:	2300      	movs	r3, #0
 80054f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80054fa:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80054fe:	460b      	mov	r3, r1
 8005500:	4313      	orrs	r3, r2
 8005502:	d055      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005508:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800550c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005510:	d033      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005512:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005516:	d82c      	bhi.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800551c:	d02f      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800551e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005522:	d826      	bhi.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005524:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005528:	d02b      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800552a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800552e:	d820      	bhi.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005530:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005534:	d012      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005536:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800553a:	d81a      	bhi.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800553c:	2b00      	cmp	r3, #0
 800553e:	d022      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005540:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005544:	d115      	bne.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005546:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800554a:	3308      	adds	r3, #8
 800554c:	2101      	movs	r1, #1
 800554e:	4618      	mov	r0, r3
 8005550:	f002 f878 	bl	8007644 <RCCEx_PLL2_Config>
 8005554:	4603      	mov	r3, r0
 8005556:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800555a:	e015      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800555c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005560:	3328      	adds	r3, #40	; 0x28
 8005562:	2101      	movs	r1, #1
 8005564:	4618      	mov	r0, r3
 8005566:	f002 f91f 	bl	80077a8 <RCCEx_PLL3_Config>
 800556a:	4603      	mov	r3, r0
 800556c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005570:	e00a      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005578:	e006      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800557a:	bf00      	nop
 800557c:	e004      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800557e:	bf00      	nop
 8005580:	e002      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005582:	bf00      	nop
 8005584:	e000      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005586:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005588:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10b      	bne.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005590:	4ba3      	ldr	r3, [pc, #652]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005594:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800559c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055a0:	4a9f      	ldr	r2, [pc, #636]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055a2:	430b      	orrs	r3, r1
 80055a4:	6593      	str	r3, [r2, #88]	; 0x58
 80055a6:	e003      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80055b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80055bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80055c0:	2300      	movs	r3, #0
 80055c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80055c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80055ca:	460b      	mov	r3, r1
 80055cc:	4313      	orrs	r3, r2
 80055ce:	d037      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80055d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055da:	d00e      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80055dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055e0:	d816      	bhi.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d018      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80055e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055ea:	d111      	bne.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055ec:	4b8c      	ldr	r3, [pc, #560]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f0:	4a8b      	ldr	r2, [pc, #556]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80055f8:	e00f      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80055fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055fe:	3308      	adds	r3, #8
 8005600:	2101      	movs	r1, #1
 8005602:	4618      	mov	r0, r3
 8005604:	f002 f81e 	bl	8007644 <RCCEx_PLL2_Config>
 8005608:	4603      	mov	r3, r0
 800560a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800560e:	e004      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005616:	e000      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005618:	bf00      	nop
    }

    if (ret == HAL_OK)
 800561a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800561e:	2b00      	cmp	r3, #0
 8005620:	d10a      	bne.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005622:	4b7f      	ldr	r3, [pc, #508]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005626:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800562a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800562e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005630:	4a7b      	ldr	r2, [pc, #492]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005632:	430b      	orrs	r3, r1
 8005634:	6513      	str	r3, [r2, #80]	; 0x50
 8005636:	e003      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005638:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800563c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005640:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005648:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800564c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005650:	2300      	movs	r3, #0
 8005652:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005656:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800565a:	460b      	mov	r3, r1
 800565c:	4313      	orrs	r3, r2
 800565e:	d039      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005660:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005666:	2b03      	cmp	r3, #3
 8005668:	d81c      	bhi.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800566a:	a201      	add	r2, pc, #4	; (adr r2, 8005670 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800566c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005670:	080056ad 	.word	0x080056ad
 8005674:	08005681 	.word	0x08005681
 8005678:	0800568f 	.word	0x0800568f
 800567c:	080056ad 	.word	0x080056ad
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005680:	4b67      	ldr	r3, [pc, #412]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005684:	4a66      	ldr	r2, [pc, #408]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005686:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800568a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800568c:	e00f      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800568e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005692:	3308      	adds	r3, #8
 8005694:	2102      	movs	r1, #2
 8005696:	4618      	mov	r0, r3
 8005698:	f001 ffd4 	bl	8007644 <RCCEx_PLL2_Config>
 800569c:	4603      	mov	r3, r0
 800569e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80056a2:	e004      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80056aa:	e000      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80056ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10a      	bne.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80056b6:	4b5a      	ldr	r3, [pc, #360]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056ba:	f023 0103 	bic.w	r1, r3, #3
 80056be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056c4:	4a56      	ldr	r2, [pc, #344]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056c6:	430b      	orrs	r3, r1
 80056c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80056ca:	e003      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056dc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80056e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056e4:	2300      	movs	r3, #0
 80056e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80056ea:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80056ee:	460b      	mov	r3, r1
 80056f0:	4313      	orrs	r3, r2
 80056f2:	f000 809f 	beq.w	8005834 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056f6:	4b4b      	ldr	r3, [pc, #300]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a4a      	ldr	r2, [pc, #296]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80056fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005700:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005702:	f7fc fd0f 	bl	8002124 <HAL_GetTick>
 8005706:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800570a:	e00b      	b.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800570c:	f7fc fd0a 	bl	8002124 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	2b64      	cmp	r3, #100	; 0x64
 800571a:	d903      	bls.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005722:	e005      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005724:	4b3f      	ldr	r3, [pc, #252]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572c:	2b00      	cmp	r3, #0
 800572e:	d0ed      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005730:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005734:	2b00      	cmp	r3, #0
 8005736:	d179      	bne.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005738:	4b39      	ldr	r3, [pc, #228]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800573a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800573c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005740:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005744:	4053      	eors	r3, r2
 8005746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800574a:	2b00      	cmp	r3, #0
 800574c:	d015      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800574e:	4b34      	ldr	r3, [pc, #208]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005756:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800575a:	4b31      	ldr	r3, [pc, #196]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800575c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575e:	4a30      	ldr	r2, [pc, #192]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005764:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005766:	4b2e      	ldr	r3, [pc, #184]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576a:	4a2d      	ldr	r2, [pc, #180]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800576c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005770:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005772:	4a2b      	ldr	r2, [pc, #172]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005774:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005778:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800577a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800577e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005786:	d118      	bne.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005788:	f7fc fccc 	bl	8002124 <HAL_GetTick>
 800578c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005790:	e00d      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005792:	f7fc fcc7 	bl	8002124 <HAL_GetTick>
 8005796:	4602      	mov	r2, r0
 8005798:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800579c:	1ad2      	subs	r2, r2, r3
 800579e:	f241 3388 	movw	r3, #5000	; 0x1388
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d903      	bls.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80057ac:	e005      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057ae:	4b1c      	ldr	r3, [pc, #112]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b2:	f003 0302 	and.w	r3, r3, #2
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d0eb      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80057ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d129      	bne.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80057ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057d2:	d10e      	bne.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80057d4:	4b12      	ldr	r3, [pc, #72]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80057dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80057e4:	091a      	lsrs	r2, r3, #4
 80057e6:	4b10      	ldr	r3, [pc, #64]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80057e8:	4013      	ands	r3, r2
 80057ea:	4a0d      	ldr	r2, [pc, #52]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057ec:	430b      	orrs	r3, r1
 80057ee:	6113      	str	r3, [r2, #16]
 80057f0:	e005      	b.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80057f2:	4b0b      	ldr	r3, [pc, #44]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	4a0a      	ldr	r2, [pc, #40]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057f8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80057fc:	6113      	str	r3, [r2, #16]
 80057fe:	4b08      	ldr	r3, [pc, #32]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005800:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005806:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800580a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800580e:	4a04      	ldr	r2, [pc, #16]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005810:	430b      	orrs	r3, r1
 8005812:	6713      	str	r3, [r2, #112]	; 0x70
 8005814:	e00e      	b.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005816:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800581a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800581e:	e009      	b.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005820:	58024400 	.word	0x58024400
 8005824:	58024800 	.word	0x58024800
 8005828:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800582c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005830:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005834:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583c:	f002 0301 	and.w	r3, r2, #1
 8005840:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005844:	2300      	movs	r3, #0
 8005846:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800584a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800584e:	460b      	mov	r3, r1
 8005850:	4313      	orrs	r3, r2
 8005852:	f000 8089 	beq.w	8005968 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800585a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800585c:	2b28      	cmp	r3, #40	; 0x28
 800585e:	d86b      	bhi.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005860:	a201      	add	r2, pc, #4	; (adr r2, 8005868 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005866:	bf00      	nop
 8005868:	08005941 	.word	0x08005941
 800586c:	08005939 	.word	0x08005939
 8005870:	08005939 	.word	0x08005939
 8005874:	08005939 	.word	0x08005939
 8005878:	08005939 	.word	0x08005939
 800587c:	08005939 	.word	0x08005939
 8005880:	08005939 	.word	0x08005939
 8005884:	08005939 	.word	0x08005939
 8005888:	0800590d 	.word	0x0800590d
 800588c:	08005939 	.word	0x08005939
 8005890:	08005939 	.word	0x08005939
 8005894:	08005939 	.word	0x08005939
 8005898:	08005939 	.word	0x08005939
 800589c:	08005939 	.word	0x08005939
 80058a0:	08005939 	.word	0x08005939
 80058a4:	08005939 	.word	0x08005939
 80058a8:	08005923 	.word	0x08005923
 80058ac:	08005939 	.word	0x08005939
 80058b0:	08005939 	.word	0x08005939
 80058b4:	08005939 	.word	0x08005939
 80058b8:	08005939 	.word	0x08005939
 80058bc:	08005939 	.word	0x08005939
 80058c0:	08005939 	.word	0x08005939
 80058c4:	08005939 	.word	0x08005939
 80058c8:	08005941 	.word	0x08005941
 80058cc:	08005939 	.word	0x08005939
 80058d0:	08005939 	.word	0x08005939
 80058d4:	08005939 	.word	0x08005939
 80058d8:	08005939 	.word	0x08005939
 80058dc:	08005939 	.word	0x08005939
 80058e0:	08005939 	.word	0x08005939
 80058e4:	08005939 	.word	0x08005939
 80058e8:	08005941 	.word	0x08005941
 80058ec:	08005939 	.word	0x08005939
 80058f0:	08005939 	.word	0x08005939
 80058f4:	08005939 	.word	0x08005939
 80058f8:	08005939 	.word	0x08005939
 80058fc:	08005939 	.word	0x08005939
 8005900:	08005939 	.word	0x08005939
 8005904:	08005939 	.word	0x08005939
 8005908:	08005941 	.word	0x08005941
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800590c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005910:	3308      	adds	r3, #8
 8005912:	2101      	movs	r1, #1
 8005914:	4618      	mov	r0, r3
 8005916:	f001 fe95 	bl	8007644 <RCCEx_PLL2_Config>
 800591a:	4603      	mov	r3, r0
 800591c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005920:	e00f      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005926:	3328      	adds	r3, #40	; 0x28
 8005928:	2101      	movs	r1, #1
 800592a:	4618      	mov	r0, r3
 800592c:	f001 ff3c 	bl	80077a8 <RCCEx_PLL3_Config>
 8005930:	4603      	mov	r3, r0
 8005932:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005936:	e004      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800593e:	e000      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005940:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005942:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10a      	bne.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800594a:	4bbf      	ldr	r3, [pc, #764]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800594c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800594e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005952:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005956:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005958:	4abb      	ldr	r2, [pc, #748]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800595a:	430b      	orrs	r3, r1
 800595c:	6553      	str	r3, [r2, #84]	; 0x54
 800595e:	e003      	b.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005960:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005964:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005968:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800596c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005970:	f002 0302 	and.w	r3, r2, #2
 8005974:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005978:	2300      	movs	r3, #0
 800597a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800597e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005982:	460b      	mov	r3, r1
 8005984:	4313      	orrs	r3, r2
 8005986:	d041      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005988:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800598c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800598e:	2b05      	cmp	r3, #5
 8005990:	d824      	bhi.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005992:	a201      	add	r2, pc, #4	; (adr r2, 8005998 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005998:	080059e5 	.word	0x080059e5
 800599c:	080059b1 	.word	0x080059b1
 80059a0:	080059c7 	.word	0x080059c7
 80059a4:	080059e5 	.word	0x080059e5
 80059a8:	080059e5 	.word	0x080059e5
 80059ac:	080059e5 	.word	0x080059e5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059b4:	3308      	adds	r3, #8
 80059b6:	2101      	movs	r1, #1
 80059b8:	4618      	mov	r0, r3
 80059ba:	f001 fe43 	bl	8007644 <RCCEx_PLL2_Config>
 80059be:	4603      	mov	r3, r0
 80059c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80059c4:	e00f      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059ca:	3328      	adds	r3, #40	; 0x28
 80059cc:	2101      	movs	r1, #1
 80059ce:	4618      	mov	r0, r3
 80059d0:	f001 feea 	bl	80077a8 <RCCEx_PLL3_Config>
 80059d4:	4603      	mov	r3, r0
 80059d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80059da:	e004      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80059e2:	e000      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80059e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10a      	bne.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80059ee:	4b96      	ldr	r3, [pc, #600]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80059f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059f2:	f023 0107 	bic.w	r1, r3, #7
 80059f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059fc:	4a92      	ldr	r2, [pc, #584]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80059fe:	430b      	orrs	r3, r1
 8005a00:	6553      	str	r3, [r2, #84]	; 0x54
 8005a02:	e003      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a14:	f002 0304 	and.w	r3, r2, #4
 8005a18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a22:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005a26:	460b      	mov	r3, r1
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	d044      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a34:	2b05      	cmp	r3, #5
 8005a36:	d825      	bhi.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005a38:	a201      	add	r2, pc, #4	; (adr r2, 8005a40 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a3e:	bf00      	nop
 8005a40:	08005a8d 	.word	0x08005a8d
 8005a44:	08005a59 	.word	0x08005a59
 8005a48:	08005a6f 	.word	0x08005a6f
 8005a4c:	08005a8d 	.word	0x08005a8d
 8005a50:	08005a8d 	.word	0x08005a8d
 8005a54:	08005a8d 	.word	0x08005a8d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a5c:	3308      	adds	r3, #8
 8005a5e:	2101      	movs	r1, #1
 8005a60:	4618      	mov	r0, r3
 8005a62:	f001 fdef 	bl	8007644 <RCCEx_PLL2_Config>
 8005a66:	4603      	mov	r3, r0
 8005a68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005a6c:	e00f      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a72:	3328      	adds	r3, #40	; 0x28
 8005a74:	2101      	movs	r1, #1
 8005a76:	4618      	mov	r0, r3
 8005a78:	f001 fe96 	bl	80077a8 <RCCEx_PLL3_Config>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005a82:	e004      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a8a:	e000      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005a8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10b      	bne.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a96:	4b6c      	ldr	r3, [pc, #432]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a9a:	f023 0107 	bic.w	r1, r3, #7
 8005a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005aa6:	4a68      	ldr	r2, [pc, #416]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005aa8:	430b      	orrs	r3, r1
 8005aaa:	6593      	str	r3, [r2, #88]	; 0x58
 8005aac:	e003      	b.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ab2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005abe:	f002 0320 	and.w	r3, r2, #32
 8005ac2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005acc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	d055      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ade:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ae2:	d033      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005ae4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ae8:	d82c      	bhi.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aee:	d02f      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005af4:	d826      	bhi.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005af6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005afa:	d02b      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005afc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b00:	d820      	bhi.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005b02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b06:	d012      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005b08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b0c:	d81a      	bhi.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d022      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005b12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b16:	d115      	bne.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b1c:	3308      	adds	r3, #8
 8005b1e:	2100      	movs	r1, #0
 8005b20:	4618      	mov	r0, r3
 8005b22:	f001 fd8f 	bl	8007644 <RCCEx_PLL2_Config>
 8005b26:	4603      	mov	r3, r0
 8005b28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005b2c:	e015      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b32:	3328      	adds	r3, #40	; 0x28
 8005b34:	2102      	movs	r1, #2
 8005b36:	4618      	mov	r0, r3
 8005b38:	f001 fe36 	bl	80077a8 <RCCEx_PLL3_Config>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005b42:	e00a      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b4a:	e006      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005b4c:	bf00      	nop
 8005b4e:	e004      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005b50:	bf00      	nop
 8005b52:	e002      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005b54:	bf00      	nop
 8005b56:	e000      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005b58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10b      	bne.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b62:	4b39      	ldr	r3, [pc, #228]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b66:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b72:	4a35      	ldr	r2, [pc, #212]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b74:	430b      	orrs	r3, r1
 8005b76:	6553      	str	r3, [r2, #84]	; 0x54
 8005b78:	e003      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005b8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b92:	2300      	movs	r3, #0
 8005b94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005b98:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	d058      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ba6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005baa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005bae:	d033      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005bb0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005bb4:	d82c      	bhi.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bba:	d02f      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bc0:	d826      	bhi.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005bc2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bc6:	d02b      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005bc8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bcc:	d820      	bhi.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005bce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bd2:	d012      	beq.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005bd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bd8:	d81a      	bhi.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d022      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005be2:	d115      	bne.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005be8:	3308      	adds	r3, #8
 8005bea:	2100      	movs	r1, #0
 8005bec:	4618      	mov	r0, r3
 8005bee:	f001 fd29 	bl	8007644 <RCCEx_PLL2_Config>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005bf8:	e015      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bfe:	3328      	adds	r3, #40	; 0x28
 8005c00:	2102      	movs	r1, #2
 8005c02:	4618      	mov	r0, r3
 8005c04:	f001 fdd0 	bl	80077a8 <RCCEx_PLL3_Config>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005c0e:	e00a      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c16:	e006      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005c18:	bf00      	nop
 8005c1a:	e004      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005c1c:	bf00      	nop
 8005c1e:	e002      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005c20:	bf00      	nop
 8005c22:	e000      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005c24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10e      	bne.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005c2e:	4b06      	ldr	r3, [pc, #24]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c32:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c3e:	4a02      	ldr	r2, [pc, #8]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c40:	430b      	orrs	r3, r1
 8005c42:	6593      	str	r3, [r2, #88]	; 0x58
 8005c44:	e006      	b.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005c46:	bf00      	nop
 8005c48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005c60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005c64:	2300      	movs	r3, #0
 8005c66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005c6a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005c6e:	460b      	mov	r3, r1
 8005c70:	4313      	orrs	r3, r2
 8005c72:	d055      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005c7c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005c80:	d033      	beq.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005c82:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005c86:	d82c      	bhi.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005c88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c8c:	d02f      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005c8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c92:	d826      	bhi.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005c94:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005c98:	d02b      	beq.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005c9a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005c9e:	d820      	bhi.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005ca0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ca4:	d012      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005ca6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005caa:	d81a      	bhi.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d022      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005cb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cb4:	d115      	bne.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cba:	3308      	adds	r3, #8
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f001 fcc0 	bl	8007644 <RCCEx_PLL2_Config>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005cca:	e015      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cd0:	3328      	adds	r3, #40	; 0x28
 8005cd2:	2102      	movs	r1, #2
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f001 fd67 	bl	80077a8 <RCCEx_PLL3_Config>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005ce0:	e00a      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005ce8:	e006      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005cea:	bf00      	nop
 8005cec:	e004      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005cee:	bf00      	nop
 8005cf0:	e002      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005cf2:	bf00      	nop
 8005cf4:	e000      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005cf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cf8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d10b      	bne.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005d00:	4ba1      	ldr	r3, [pc, #644]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d04:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005d10:	4a9d      	ldr	r2, [pc, #628]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d12:	430b      	orrs	r3, r1
 8005d14:	6593      	str	r3, [r2, #88]	; 0x58
 8005d16:	e003      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d1c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d28:	f002 0308 	and.w	r3, r2, #8
 8005d2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d30:	2300      	movs	r3, #0
 8005d32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005d36:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	d01e      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d4c:	d10c      	bne.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d52:	3328      	adds	r3, #40	; 0x28
 8005d54:	2102      	movs	r1, #2
 8005d56:	4618      	mov	r0, r3
 8005d58:	f001 fd26 	bl	80077a8 <RCCEx_PLL3_Config>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d002      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005d68:	4b87      	ldr	r3, [pc, #540]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d6c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d78:	4a83      	ldr	r2, [pc, #524]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d7a:	430b      	orrs	r3, r1
 8005d7c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d86:	f002 0310 	and.w	r3, r2, #16
 8005d8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d8e:	2300      	movs	r3, #0
 8005d90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005d94:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005d98:	460b      	mov	r3, r1
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	d01e      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005da2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005da6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005daa:	d10c      	bne.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005db0:	3328      	adds	r3, #40	; 0x28
 8005db2:	2102      	movs	r1, #2
 8005db4:	4618      	mov	r0, r3
 8005db6:	f001 fcf7 	bl	80077a8 <RCCEx_PLL3_Config>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d002      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005dc6:	4b70      	ldr	r3, [pc, #448]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005dd6:	4a6c      	ldr	r2, [pc, #432]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005dd8:	430b      	orrs	r3, r1
 8005dda:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005de8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005dec:	2300      	movs	r3, #0
 8005dee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005df2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005df6:	460b      	mov	r3, r1
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	d03e      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005e04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e08:	d022      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005e0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e0e:	d81b      	bhi.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d003      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e18:	d00b      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005e1a:	e015      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e20:	3308      	adds	r3, #8
 8005e22:	2100      	movs	r1, #0
 8005e24:	4618      	mov	r0, r3
 8005e26:	f001 fc0d 	bl	8007644 <RCCEx_PLL2_Config>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005e30:	e00f      	b.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e36:	3328      	adds	r3, #40	; 0x28
 8005e38:	2102      	movs	r1, #2
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f001 fcb4 	bl	80077a8 <RCCEx_PLL3_Config>
 8005e40:	4603      	mov	r3, r0
 8005e42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005e46:	e004      	b.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005e4e:	e000      	b.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005e50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d10b      	bne.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e5a:	4b4b      	ldr	r3, [pc, #300]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e5e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e66:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005e6a:	4a47      	ldr	r2, [pc, #284]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e6c:	430b      	orrs	r3, r1
 8005e6e:	6593      	str	r3, [r2, #88]	; 0x58
 8005e70:	e003      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e82:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005e86:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e88:	2300      	movs	r3, #0
 8005e8a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005e8c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005e90:	460b      	mov	r3, r1
 8005e92:	4313      	orrs	r3, r2
 8005e94:	d03b      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e9e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ea2:	d01f      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005ea4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ea8:	d818      	bhi.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005eaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eae:	d003      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005eb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005eb4:	d007      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005eb6:	e011      	b.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005eb8:	4b33      	ldr	r3, [pc, #204]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ebc:	4a32      	ldr	r2, [pc, #200]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ec2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005ec4:	e00f      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eca:	3328      	adds	r3, #40	; 0x28
 8005ecc:	2101      	movs	r1, #1
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f001 fc6a 	bl	80077a8 <RCCEx_PLL3_Config>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005eda:	e004      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005ee2:	e000      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005ee4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ee6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10b      	bne.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005eee:	4b26      	ldr	r3, [pc, #152]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ef2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005efe:	4a22      	ldr	r2, [pc, #136]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f00:	430b      	orrs	r3, r1
 8005f02:	6553      	str	r3, [r2, #84]	; 0x54
 8005f04:	e003      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f16:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005f1a:	673b      	str	r3, [r7, #112]	; 0x70
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	677b      	str	r3, [r7, #116]	; 0x74
 8005f20:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005f24:	460b      	mov	r3, r1
 8005f26:	4313      	orrs	r3, r2
 8005f28:	d034      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d003      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f38:	d007      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005f3a:	e011      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f3c:	4b12      	ldr	r3, [pc, #72]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f40:	4a11      	ldr	r2, [pc, #68]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005f48:	e00e      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f4e:	3308      	adds	r3, #8
 8005f50:	2102      	movs	r1, #2
 8005f52:	4618      	mov	r0, r3
 8005f54:	f001 fb76 	bl	8007644 <RCCEx_PLL2_Config>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005f5e:	e003      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10d      	bne.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005f70:	4b05      	ldr	r3, [pc, #20]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f7e:	4a02      	ldr	r2, [pc, #8]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f80:	430b      	orrs	r3, r1
 8005f82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f84:	e006      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005f86:	bf00      	nop
 8005f88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005fa0:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fa6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005faa:	460b      	mov	r3, r1
 8005fac:	4313      	orrs	r3, r2
 8005fae:	d00c      	beq.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fb4:	3328      	adds	r3, #40	; 0x28
 8005fb6:	2102      	movs	r1, #2
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f001 fbf5 	bl	80077a8 <RCCEx_PLL3_Config>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d002      	beq.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005fd6:	663b      	str	r3, [r7, #96]	; 0x60
 8005fd8:	2300      	movs	r3, #0
 8005fda:	667b      	str	r3, [r7, #100]	; 0x64
 8005fdc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	d038      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ff2:	d018      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005ff4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ff8:	d811      	bhi.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005ffa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ffe:	d014      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006004:	d80b      	bhi.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006006:	2b00      	cmp	r3, #0
 8006008:	d011      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800600a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800600e:	d106      	bne.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006010:	4bc3      	ldr	r3, [pc, #780]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006014:	4ac2      	ldr	r2, [pc, #776]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006016:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800601a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800601c:	e008      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006024:	e004      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006026:	bf00      	nop
 8006028:	e002      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800602a:	bf00      	nop
 800602c:	e000      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800602e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006030:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10b      	bne.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006038:	4bb9      	ldr	r3, [pc, #740]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800603a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800603c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006040:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006044:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006048:	4ab5      	ldr	r2, [pc, #724]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800604a:	430b      	orrs	r3, r1
 800604c:	6553      	str	r3, [r2, #84]	; 0x54
 800604e:	e003      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006050:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006054:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006058:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800605c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006060:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006064:	65bb      	str	r3, [r7, #88]	; 0x58
 8006066:	2300      	movs	r3, #0
 8006068:	65fb      	str	r3, [r7, #92]	; 0x5c
 800606a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800606e:	460b      	mov	r3, r1
 8006070:	4313      	orrs	r3, r2
 8006072:	d009      	beq.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006074:	4baa      	ldr	r3, [pc, #680]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006078:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800607c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006082:	4aa7      	ldr	r2, [pc, #668]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006084:	430b      	orrs	r3, r1
 8006086:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006088:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800608c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006090:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006094:	653b      	str	r3, [r7, #80]	; 0x50
 8006096:	2300      	movs	r3, #0
 8006098:	657b      	str	r3, [r7, #84]	; 0x54
 800609a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800609e:	460b      	mov	r3, r1
 80060a0:	4313      	orrs	r3, r2
 80060a2:	d00a      	beq.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80060a4:	4b9e      	ldr	r3, [pc, #632]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80060ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060b0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80060b4:	4a9a      	ldr	r2, [pc, #616]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060b6:	430b      	orrs	r3, r1
 80060b8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80060ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80060c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80060c8:	2300      	movs	r3, #0
 80060ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060cc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80060d0:	460b      	mov	r3, r1
 80060d2:	4313      	orrs	r3, r2
 80060d4:	d009      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80060d6:	4b92      	ldr	r3, [pc, #584]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060da:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80060de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060e4:	4a8e      	ldr	r2, [pc, #568]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060e6:	430b      	orrs	r3, r1
 80060e8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80060ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80060f6:	643b      	str	r3, [r7, #64]	; 0x40
 80060f8:	2300      	movs	r3, #0
 80060fa:	647b      	str	r3, [r7, #68]	; 0x44
 80060fc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006100:	460b      	mov	r3, r1
 8006102:	4313      	orrs	r3, r2
 8006104:	d00e      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006106:	4b86      	ldr	r3, [pc, #536]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	4a85      	ldr	r2, [pc, #532]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800610c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006110:	6113      	str	r3, [r2, #16]
 8006112:	4b83      	ldr	r3, [pc, #524]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006114:	6919      	ldr	r1, [r3, #16]
 8006116:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800611a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800611e:	4a80      	ldr	r2, [pc, #512]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006120:	430b      	orrs	r3, r1
 8006122:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006124:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006130:	63bb      	str	r3, [r7, #56]	; 0x38
 8006132:	2300      	movs	r3, #0
 8006134:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006136:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800613a:	460b      	mov	r3, r1
 800613c:	4313      	orrs	r3, r2
 800613e:	d009      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006140:	4b77      	ldr	r3, [pc, #476]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006144:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006148:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800614c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800614e:	4a74      	ldr	r2, [pc, #464]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006150:	430b      	orrs	r3, r1
 8006152:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006154:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006160:	633b      	str	r3, [r7, #48]	; 0x30
 8006162:	2300      	movs	r3, #0
 8006164:	637b      	str	r3, [r7, #52]	; 0x34
 8006166:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800616a:	460b      	mov	r3, r1
 800616c:	4313      	orrs	r3, r2
 800616e:	d00a      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006170:	4b6b      	ldr	r3, [pc, #428]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006174:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006178:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800617c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006180:	4a67      	ldr	r2, [pc, #412]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006182:	430b      	orrs	r3, r1
 8006184:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006186:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800618a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618e:	2100      	movs	r1, #0
 8006190:	62b9      	str	r1, [r7, #40]	; 0x28
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006198:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800619c:	460b      	mov	r3, r1
 800619e:	4313      	orrs	r3, r2
 80061a0:	d011      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061a6:	3308      	adds	r3, #8
 80061a8:	2100      	movs	r1, #0
 80061aa:	4618      	mov	r0, r3
 80061ac:	f001 fa4a 	bl	8007644 <RCCEx_PLL2_Config>
 80061b0:	4603      	mov	r3, r0
 80061b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80061b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d003      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80061c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ce:	2100      	movs	r1, #0
 80061d0:	6239      	str	r1, [r7, #32]
 80061d2:	f003 0302 	and.w	r3, r3, #2
 80061d6:	627b      	str	r3, [r7, #36]	; 0x24
 80061d8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80061dc:	460b      	mov	r3, r1
 80061de:	4313      	orrs	r3, r2
 80061e0:	d011      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80061e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061e6:	3308      	adds	r3, #8
 80061e8:	2101      	movs	r1, #1
 80061ea:	4618      	mov	r0, r3
 80061ec:	f001 fa2a 	bl	8007644 <RCCEx_PLL2_Config>
 80061f0:	4603      	mov	r3, r0
 80061f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80061f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d003      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006202:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800620a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620e:	2100      	movs	r1, #0
 8006210:	61b9      	str	r1, [r7, #24]
 8006212:	f003 0304 	and.w	r3, r3, #4
 8006216:	61fb      	str	r3, [r7, #28]
 8006218:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800621c:	460b      	mov	r3, r1
 800621e:	4313      	orrs	r3, r2
 8006220:	d011      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006226:	3308      	adds	r3, #8
 8006228:	2102      	movs	r1, #2
 800622a:	4618      	mov	r0, r3
 800622c:	f001 fa0a 	bl	8007644 <RCCEx_PLL2_Config>
 8006230:	4603      	mov	r3, r0
 8006232:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006236:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800623e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006242:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800624a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624e:	2100      	movs	r1, #0
 8006250:	6139      	str	r1, [r7, #16]
 8006252:	f003 0308 	and.w	r3, r3, #8
 8006256:	617b      	str	r3, [r7, #20]
 8006258:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800625c:	460b      	mov	r3, r1
 800625e:	4313      	orrs	r3, r2
 8006260:	d011      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006266:	3328      	adds	r3, #40	; 0x28
 8006268:	2100      	movs	r1, #0
 800626a:	4618      	mov	r0, r3
 800626c:	f001 fa9c 	bl	80077a8 <RCCEx_PLL3_Config>
 8006270:	4603      	mov	r3, r0
 8006272:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8006276:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800627a:	2b00      	cmp	r3, #0
 800627c:	d003      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800627e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006282:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800628a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628e:	2100      	movs	r1, #0
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	f003 0310 	and.w	r3, r3, #16
 8006296:	60fb      	str	r3, [r7, #12]
 8006298:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800629c:	460b      	mov	r3, r1
 800629e:	4313      	orrs	r3, r2
 80062a0:	d011      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062a6:	3328      	adds	r3, #40	; 0x28
 80062a8:	2101      	movs	r1, #1
 80062aa:	4618      	mov	r0, r3
 80062ac:	f001 fa7c 	bl	80077a8 <RCCEx_PLL3_Config>
 80062b0:	4603      	mov	r3, r0
 80062b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80062b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d003      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80062c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ce:	2100      	movs	r1, #0
 80062d0:	6039      	str	r1, [r7, #0]
 80062d2:	f003 0320 	and.w	r3, r3, #32
 80062d6:	607b      	str	r3, [r7, #4]
 80062d8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80062dc:	460b      	mov	r3, r1
 80062de:	4313      	orrs	r3, r2
 80062e0:	d011      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80062e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062e6:	3328      	adds	r3, #40	; 0x28
 80062e8:	2102      	movs	r1, #2
 80062ea:	4618      	mov	r0, r3
 80062ec:	f001 fa5c 	bl	80077a8 <RCCEx_PLL3_Config>
 80062f0:	4603      	mov	r3, r0
 80062f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80062f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d003      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006302:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8006306:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800630a:	2b00      	cmp	r3, #0
 800630c:	d101      	bne.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800630e:	2300      	movs	r3, #0
 8006310:	e000      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
}
 8006314:	4618      	mov	r0, r3
 8006316:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800631a:	46bd      	mov	sp, r7
 800631c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006320:	58024400 	.word	0x58024400

08006324 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b090      	sub	sp, #64	; 0x40
 8006328:	af00      	add	r7, sp, #0
 800632a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800632e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006332:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006336:	430b      	orrs	r3, r1
 8006338:	f040 8094 	bne.w	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800633c:	4b9e      	ldr	r3, [pc, #632]	; (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800633e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006340:	f003 0307 	and.w	r3, r3, #7
 8006344:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006348:	2b04      	cmp	r3, #4
 800634a:	f200 8087 	bhi.w	800645c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800634e:	a201      	add	r2, pc, #4	; (adr r2, 8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006354:	08006369 	.word	0x08006369
 8006358:	08006391 	.word	0x08006391
 800635c:	080063b9 	.word	0x080063b9
 8006360:	08006455 	.word	0x08006455
 8006364:	080063e1 	.word	0x080063e1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006368:	4b93      	ldr	r3, [pc, #588]	; (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006370:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006374:	d108      	bne.n	8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800637a:	4618      	mov	r0, r3
 800637c:	f001 f810 	bl	80073a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006382:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006384:	f000 bd45 	b.w	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006388:	2300      	movs	r3, #0
 800638a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800638c:	f000 bd41 	b.w	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006390:	4b89      	ldr	r3, [pc, #548]	; (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006398:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800639c:	d108      	bne.n	80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800639e:	f107 0318 	add.w	r3, r7, #24
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 fd54 	bl	8006e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063ac:	f000 bd31 	b.w	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80063b0:	2300      	movs	r3, #0
 80063b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063b4:	f000 bd2d 	b.w	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80063b8:	4b7f      	ldr	r3, [pc, #508]	; (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063c4:	d108      	bne.n	80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063c6:	f107 030c 	add.w	r3, r7, #12
 80063ca:	4618      	mov	r0, r3
 80063cc:	f000 fe94 	bl	80070f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063d4:	f000 bd1d 	b.w	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80063d8:	2300      	movs	r3, #0
 80063da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063dc:	f000 bd19 	b.w	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80063e0:	4b75      	ldr	r3, [pc, #468]	; (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80063e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80063e8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80063ea:	4b73      	ldr	r3, [pc, #460]	; (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 0304 	and.w	r3, r3, #4
 80063f2:	2b04      	cmp	r3, #4
 80063f4:	d10c      	bne.n	8006410 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80063f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d109      	bne.n	8006410 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063fc:	4b6e      	ldr	r3, [pc, #440]	; (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	08db      	lsrs	r3, r3, #3
 8006402:	f003 0303 	and.w	r3, r3, #3
 8006406:	4a6d      	ldr	r2, [pc, #436]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006408:	fa22 f303 	lsr.w	r3, r2, r3
 800640c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800640e:	e01f      	b.n	8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006410:	4b69      	ldr	r3, [pc, #420]	; (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006418:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800641c:	d106      	bne.n	800642c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800641e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006420:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006424:	d102      	bne.n	800642c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006426:	4b66      	ldr	r3, [pc, #408]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006428:	63fb      	str	r3, [r7, #60]	; 0x3c
 800642a:	e011      	b.n	8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800642c:	4b62      	ldr	r3, [pc, #392]	; (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006434:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006438:	d106      	bne.n	8006448 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800643a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800643c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006440:	d102      	bne.n	8006448 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006442:	4b60      	ldr	r3, [pc, #384]	; (80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006444:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006446:	e003      	b.n	8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006448:	2300      	movs	r3, #0
 800644a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800644c:	f000 bce1 	b.w	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006450:	f000 bcdf 	b.w	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006454:	4b5c      	ldr	r3, [pc, #368]	; (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006456:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006458:	f000 bcdb 	b.w	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800645c:	2300      	movs	r3, #0
 800645e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006460:	f000 bcd7 	b.w	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006464:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006468:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800646c:	430b      	orrs	r3, r1
 800646e:	f040 80ad 	bne.w	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006472:	4b51      	ldr	r3, [pc, #324]	; (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006476:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800647a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800647c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006482:	d056      	beq.n	8006532 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800648a:	f200 8090 	bhi.w	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800648e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006490:	2bc0      	cmp	r3, #192	; 0xc0
 8006492:	f000 8088 	beq.w	80065a6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006498:	2bc0      	cmp	r3, #192	; 0xc0
 800649a:	f200 8088 	bhi.w	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800649e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a0:	2b80      	cmp	r3, #128	; 0x80
 80064a2:	d032      	beq.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80064a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a6:	2b80      	cmp	r3, #128	; 0x80
 80064a8:	f200 8081 	bhi.w	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80064ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d003      	beq.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80064b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b4:	2b40      	cmp	r3, #64	; 0x40
 80064b6:	d014      	beq.n	80064e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80064b8:	e079      	b.n	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80064ba:	4b3f      	ldr	r3, [pc, #252]	; (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064c6:	d108      	bne.n	80064da <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064cc:	4618      	mov	r0, r3
 80064ce:	f000 ff67 	bl	80073a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80064d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064d6:	f000 bc9c 	b.w	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80064da:	2300      	movs	r3, #0
 80064dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064de:	f000 bc98 	b.w	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80064e2:	4b35      	ldr	r3, [pc, #212]	; (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064ee:	d108      	bne.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064f0:	f107 0318 	add.w	r3, r7, #24
 80064f4:	4618      	mov	r0, r3
 80064f6:	f000 fcab 	bl	8006e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064fe:	f000 bc88 	b.w	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006502:	2300      	movs	r3, #0
 8006504:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006506:	f000 bc84 	b.w	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800650a:	4b2b      	ldr	r3, [pc, #172]	; (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006512:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006516:	d108      	bne.n	800652a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006518:	f107 030c 	add.w	r3, r7, #12
 800651c:	4618      	mov	r0, r3
 800651e:	f000 fdeb 	bl	80070f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006526:	f000 bc74 	b.w	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800652a:	2300      	movs	r3, #0
 800652c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800652e:	f000 bc70 	b.w	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006532:	4b21      	ldr	r3, [pc, #132]	; (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006536:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800653a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800653c:	4b1e      	ldr	r3, [pc, #120]	; (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 0304 	and.w	r3, r3, #4
 8006544:	2b04      	cmp	r3, #4
 8006546:	d10c      	bne.n	8006562 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800654a:	2b00      	cmp	r3, #0
 800654c:	d109      	bne.n	8006562 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800654e:	4b1a      	ldr	r3, [pc, #104]	; (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	08db      	lsrs	r3, r3, #3
 8006554:	f003 0303 	and.w	r3, r3, #3
 8006558:	4a18      	ldr	r2, [pc, #96]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800655a:	fa22 f303 	lsr.w	r3, r2, r3
 800655e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006560:	e01f      	b.n	80065a2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006562:	4b15      	ldr	r3, [pc, #84]	; (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800656a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800656e:	d106      	bne.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006572:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006576:	d102      	bne.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006578:	4b11      	ldr	r3, [pc, #68]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800657a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800657c:	e011      	b.n	80065a2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800657e:	4b0e      	ldr	r3, [pc, #56]	; (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006586:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800658a:	d106      	bne.n	800659a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800658c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800658e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006592:	d102      	bne.n	800659a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006594:	4b0b      	ldr	r3, [pc, #44]	; (80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006596:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006598:	e003      	b.n	80065a2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800659a:	2300      	movs	r3, #0
 800659c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800659e:	f000 bc38 	b.w	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80065a2:	f000 bc36 	b.w	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80065a6:	4b08      	ldr	r3, [pc, #32]	; (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80065a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065aa:	f000 bc32 	b.w	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80065ae:	2300      	movs	r3, #0
 80065b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065b2:	f000 bc2e 	b.w	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80065b6:	bf00      	nop
 80065b8:	58024400 	.word	0x58024400
 80065bc:	03d09000 	.word	0x03d09000
 80065c0:	003d0900 	.word	0x003d0900
 80065c4:	017d7840 	.word	0x017d7840
 80065c8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80065cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065d0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80065d4:	430b      	orrs	r3, r1
 80065d6:	f040 809c 	bne.w	8006712 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80065da:	4b9e      	ldr	r3, [pc, #632]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80065dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065de:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80065e2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80065e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80065ea:	d054      	beq.n	8006696 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80065ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80065f2:	f200 808b 	bhi.w	800670c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80065f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80065fc:	f000 8083 	beq.w	8006706 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006602:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006606:	f200 8081 	bhi.w	800670c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800660a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006610:	d02f      	beq.n	8006672 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006614:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006618:	d878      	bhi.n	800670c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800661a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661c:	2b00      	cmp	r3, #0
 800661e:	d004      	beq.n	800662a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006622:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006626:	d012      	beq.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006628:	e070      	b.n	800670c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800662a:	4b8a      	ldr	r3, [pc, #552]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006632:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006636:	d107      	bne.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006638:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800663c:	4618      	mov	r0, r3
 800663e:	f000 feaf 	bl	80073a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006644:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006646:	e3e4      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006648:	2300      	movs	r3, #0
 800664a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800664c:	e3e1      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800664e:	4b81      	ldr	r3, [pc, #516]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006656:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800665a:	d107      	bne.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800665c:	f107 0318 	add.w	r3, r7, #24
 8006660:	4618      	mov	r0, r3
 8006662:	f000 fbf5 	bl	8006e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800666a:	e3d2      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800666c:	2300      	movs	r3, #0
 800666e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006670:	e3cf      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006672:	4b78      	ldr	r3, [pc, #480]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800667a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800667e:	d107      	bne.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006680:	f107 030c 	add.w	r3, r7, #12
 8006684:	4618      	mov	r0, r3
 8006686:	f000 fd37 	bl	80070f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800668e:	e3c0      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006690:	2300      	movs	r3, #0
 8006692:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006694:	e3bd      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006696:	4b6f      	ldr	r3, [pc, #444]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800669a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800669e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80066a0:	4b6c      	ldr	r3, [pc, #432]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0304 	and.w	r3, r3, #4
 80066a8:	2b04      	cmp	r3, #4
 80066aa:	d10c      	bne.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80066ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d109      	bne.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066b2:	4b68      	ldr	r3, [pc, #416]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	08db      	lsrs	r3, r3, #3
 80066b8:	f003 0303 	and.w	r3, r3, #3
 80066bc:	4a66      	ldr	r2, [pc, #408]	; (8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80066be:	fa22 f303 	lsr.w	r3, r2, r3
 80066c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066c4:	e01e      	b.n	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80066c6:	4b63      	ldr	r3, [pc, #396]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066d2:	d106      	bne.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80066d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066da:	d102      	bne.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80066dc:	4b5f      	ldr	r3, [pc, #380]	; (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80066de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066e0:	e010      	b.n	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80066e2:	4b5c      	ldr	r3, [pc, #368]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066ee:	d106      	bne.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80066f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066f6:	d102      	bne.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80066f8:	4b59      	ldr	r3, [pc, #356]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80066fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066fc:	e002      	b.n	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80066fe:	2300      	movs	r3, #0
 8006700:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006702:	e386      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006704:	e385      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006706:	4b57      	ldr	r3, [pc, #348]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006708:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800670a:	e382      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800670c:	2300      	movs	r3, #0
 800670e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006710:	e37f      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006712:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006716:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800671a:	430b      	orrs	r3, r1
 800671c:	f040 80a7 	bne.w	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006720:	4b4c      	ldr	r3, [pc, #304]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006724:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006728:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800672a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006730:	d055      	beq.n	80067de <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006734:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006738:	f200 8096 	bhi.w	8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800673c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006742:	f000 8084 	beq.w	800684e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006748:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800674c:	f200 808c 	bhi.w	8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006752:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006756:	d030      	beq.n	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800675e:	f200 8083 	bhi.w	8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006764:	2b00      	cmp	r3, #0
 8006766:	d004      	beq.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800676e:	d012      	beq.n	8006796 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006770:	e07a      	b.n	8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006772:	4b38      	ldr	r3, [pc, #224]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800677a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800677e:	d107      	bne.n	8006790 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006784:	4618      	mov	r0, r3
 8006786:	f000 fe0b 	bl	80073a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800678a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800678e:	e340      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006790:	2300      	movs	r3, #0
 8006792:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006794:	e33d      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006796:	4b2f      	ldr	r3, [pc, #188]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800679e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067a2:	d107      	bne.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067a4:	f107 0318 	add.w	r3, r7, #24
 80067a8:	4618      	mov	r0, r3
 80067aa:	f000 fb51 	bl	8006e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067b2:	e32e      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067b4:	2300      	movs	r3, #0
 80067b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067b8:	e32b      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80067ba:	4b26      	ldr	r3, [pc, #152]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067c6:	d107      	bne.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067c8:	f107 030c 	add.w	r3, r7, #12
 80067cc:	4618      	mov	r0, r3
 80067ce:	f000 fc93 	bl	80070f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067d6:	e31c      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067d8:	2300      	movs	r3, #0
 80067da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067dc:	e319      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80067de:	4b1d      	ldr	r3, [pc, #116]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80067e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80067e6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80067e8:	4b1a      	ldr	r3, [pc, #104]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 0304 	and.w	r3, r3, #4
 80067f0:	2b04      	cmp	r3, #4
 80067f2:	d10c      	bne.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80067f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d109      	bne.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067fa:	4b16      	ldr	r3, [pc, #88]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	08db      	lsrs	r3, r3, #3
 8006800:	f003 0303 	and.w	r3, r3, #3
 8006804:	4a14      	ldr	r2, [pc, #80]	; (8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006806:	fa22 f303 	lsr.w	r3, r2, r3
 800680a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800680c:	e01e      	b.n	800684c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800680e:	4b11      	ldr	r3, [pc, #68]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800681a:	d106      	bne.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800681c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800681e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006822:	d102      	bne.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006824:	4b0d      	ldr	r3, [pc, #52]	; (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006826:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006828:	e010      	b.n	800684c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800682a:	4b0a      	ldr	r3, [pc, #40]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006832:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006836:	d106      	bne.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800683a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800683e:	d102      	bne.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006840:	4b07      	ldr	r3, [pc, #28]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006842:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006844:	e002      	b.n	800684c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006846:	2300      	movs	r3, #0
 8006848:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800684a:	e2e2      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800684c:	e2e1      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800684e:	4b05      	ldr	r3, [pc, #20]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006850:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006852:	e2de      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006854:	58024400 	.word	0x58024400
 8006858:	03d09000 	.word	0x03d09000
 800685c:	003d0900 	.word	0x003d0900
 8006860:	017d7840 	.word	0x017d7840
 8006864:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006868:	2300      	movs	r3, #0
 800686a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800686c:	e2d1      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800686e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006872:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006876:	430b      	orrs	r3, r1
 8006878:	f040 809c 	bne.w	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800687c:	4b93      	ldr	r3, [pc, #588]	; (8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800687e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006880:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006884:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006888:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800688c:	d054      	beq.n	8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800688e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006890:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006894:	f200 808b 	bhi.w	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800689e:	f000 8083 	beq.w	80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80068a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80068a8:	f200 8081 	bhi.w	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80068ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068b2:	d02f      	beq.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80068b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068ba:	d878      	bhi.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80068bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d004      	beq.n	80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80068c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068c8:	d012      	beq.n	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80068ca:	e070      	b.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80068cc:	4b7f      	ldr	r3, [pc, #508]	; (8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068d8:	d107      	bne.n	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068de:	4618      	mov	r0, r3
 80068e0:	f000 fd5e 	bl	80073a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80068e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068e8:	e293      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068ea:	2300      	movs	r3, #0
 80068ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068ee:	e290      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80068f0:	4b76      	ldr	r3, [pc, #472]	; (8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068fc:	d107      	bne.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068fe:	f107 0318 	add.w	r3, r7, #24
 8006902:	4618      	mov	r0, r3
 8006904:	f000 faa4 	bl	8006e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800690c:	e281      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800690e:	2300      	movs	r3, #0
 8006910:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006912:	e27e      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006914:	4b6d      	ldr	r3, [pc, #436]	; (8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800691c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006920:	d107      	bne.n	8006932 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006922:	f107 030c 	add.w	r3, r7, #12
 8006926:	4618      	mov	r0, r3
 8006928:	f000 fbe6 	bl	80070f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006930:	e26f      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006932:	2300      	movs	r3, #0
 8006934:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006936:	e26c      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006938:	4b64      	ldr	r3, [pc, #400]	; (8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800693a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800693c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006940:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006942:	4b62      	ldr	r3, [pc, #392]	; (8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0304 	and.w	r3, r3, #4
 800694a:	2b04      	cmp	r3, #4
 800694c:	d10c      	bne.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800694e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006950:	2b00      	cmp	r3, #0
 8006952:	d109      	bne.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006954:	4b5d      	ldr	r3, [pc, #372]	; (8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	08db      	lsrs	r3, r3, #3
 800695a:	f003 0303 	and.w	r3, r3, #3
 800695e:	4a5c      	ldr	r2, [pc, #368]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006960:	fa22 f303 	lsr.w	r3, r2, r3
 8006964:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006966:	e01e      	b.n	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006968:	4b58      	ldr	r3, [pc, #352]	; (8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006970:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006974:	d106      	bne.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006978:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800697c:	d102      	bne.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800697e:	4b55      	ldr	r3, [pc, #340]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006980:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006982:	e010      	b.n	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006984:	4b51      	ldr	r3, [pc, #324]	; (8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800698c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006990:	d106      	bne.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006994:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006998:	d102      	bne.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800699a:	4b4f      	ldr	r3, [pc, #316]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800699c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800699e:	e002      	b.n	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80069a0:	2300      	movs	r3, #0
 80069a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80069a4:	e235      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80069a6:	e234      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80069a8:	4b4c      	ldr	r3, [pc, #304]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80069aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069ac:	e231      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80069ae:	2300      	movs	r3, #0
 80069b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069b2:	e22e      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80069b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069b8:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80069bc:	430b      	orrs	r3, r1
 80069be:	f040 808f 	bne.w	8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80069c2:	4b42      	ldr	r3, [pc, #264]	; (8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80069c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069c6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80069ca:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80069cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069d2:	d06b      	beq.n	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80069d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069da:	d874      	bhi.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80069dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069e2:	d056      	beq.n	8006a92 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80069e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069ea:	d86c      	bhi.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80069ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80069f2:	d03b      	beq.n	8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80069f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80069fa:	d864      	bhi.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80069fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a02:	d021      	beq.n	8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a0a:	d85c      	bhi.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d004      	beq.n	8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a18:	d004      	beq.n	8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006a1a:	e054      	b.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006a1c:	f7fe fa4c 	bl	8004eb8 <HAL_RCC_GetPCLK1Freq>
 8006a20:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006a22:	e1f6      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a24:	4b29      	ldr	r3, [pc, #164]	; (8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a30:	d107      	bne.n	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a32:	f107 0318 	add.w	r3, r7, #24
 8006a36:	4618      	mov	r0, r3
 8006a38:	f000 fa0a 	bl	8006e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a40:	e1e7      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a42:	2300      	movs	r3, #0
 8006a44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a46:	e1e4      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a48:	4b20      	ldr	r3, [pc, #128]	; (8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a54:	d107      	bne.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a56:	f107 030c 	add.w	r3, r7, #12
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f000 fb4c 	bl	80070f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a64:	e1d5      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a66:	2300      	movs	r3, #0
 8006a68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a6a:	e1d2      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a6c:	4b17      	ldr	r3, [pc, #92]	; (8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 0304 	and.w	r3, r3, #4
 8006a74:	2b04      	cmp	r3, #4
 8006a76:	d109      	bne.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a78:	4b14      	ldr	r3, [pc, #80]	; (8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	08db      	lsrs	r3, r3, #3
 8006a7e:	f003 0303 	and.w	r3, r3, #3
 8006a82:	4a13      	ldr	r2, [pc, #76]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006a84:	fa22 f303 	lsr.w	r3, r2, r3
 8006a88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a8a:	e1c2      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a90:	e1bf      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006a92:	4b0e      	ldr	r3, [pc, #56]	; (8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a9e:	d102      	bne.n	8006aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006aa0:	4b0c      	ldr	r3, [pc, #48]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006aa4:	e1b5      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006aaa:	e1b2      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006aac:	4b07      	ldr	r3, [pc, #28]	; (8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ab4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ab8:	d102      	bne.n	8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006aba:	4b07      	ldr	r3, [pc, #28]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006abc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006abe:	e1a8      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ac4:	e1a5      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006aca:	e1a2      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006acc:	58024400 	.word	0x58024400
 8006ad0:	03d09000 	.word	0x03d09000
 8006ad4:	003d0900 	.word	0x003d0900
 8006ad8:	017d7840 	.word	0x017d7840
 8006adc:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006ae0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ae4:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8006ae8:	430b      	orrs	r3, r1
 8006aea:	d173      	bne.n	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006aec:	4b9c      	ldr	r3, [pc, #624]	; (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006af0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006af4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006afc:	d02f      	beq.n	8006b5e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b04:	d863      	bhi.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d004      	beq.n	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b12:	d012      	beq.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006b14:	e05b      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b16:	4b92      	ldr	r3, [pc, #584]	; (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b22:	d107      	bne.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b24:	f107 0318 	add.w	r3, r7, #24
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f000 f991 	bl	8006e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b32:	e16e      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b34:	2300      	movs	r3, #0
 8006b36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b38:	e16b      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b3a:	4b89      	ldr	r3, [pc, #548]	; (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b46:	d107      	bne.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b48:	f107 030c 	add.w	r3, r7, #12
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f000 fad3 	bl	80070f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b56:	e15c      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b5c:	e159      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006b5e:	4b80      	ldr	r3, [pc, #512]	; (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b62:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b66:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b68:	4b7d      	ldr	r3, [pc, #500]	; (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 0304 	and.w	r3, r3, #4
 8006b70:	2b04      	cmp	r3, #4
 8006b72:	d10c      	bne.n	8006b8e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d109      	bne.n	8006b8e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b7a:	4b79      	ldr	r3, [pc, #484]	; (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	08db      	lsrs	r3, r3, #3
 8006b80:	f003 0303 	and.w	r3, r3, #3
 8006b84:	4a77      	ldr	r2, [pc, #476]	; (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006b86:	fa22 f303 	lsr.w	r3, r2, r3
 8006b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b8c:	e01e      	b.n	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b8e:	4b74      	ldr	r3, [pc, #464]	; (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b9a:	d106      	bne.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ba2:	d102      	bne.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006ba4:	4b70      	ldr	r3, [pc, #448]	; (8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ba8:	e010      	b.n	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006baa:	4b6d      	ldr	r3, [pc, #436]	; (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bb6:	d106      	bne.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bbe:	d102      	bne.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006bc0:	4b6a      	ldr	r3, [pc, #424]	; (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bc4:	e002      	b.n	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006bca:	e122      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006bcc:	e121      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bd2:	e11e      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006bd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bd8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006bdc:	430b      	orrs	r3, r1
 8006bde:	d133      	bne.n	8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006be0:	4b5f      	ldr	r3, [pc, #380]	; (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006be8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d004      	beq.n	8006bfa <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bf6:	d012      	beq.n	8006c1e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006bf8:	e023      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006bfa:	4b59      	ldr	r3, [pc, #356]	; (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c06:	d107      	bne.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f000 fbc7 	bl	80073a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c16:	e0fc      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c1c:	e0f9      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c1e:	4b50      	ldr	r3, [pc, #320]	; (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c2a:	d107      	bne.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c2c:	f107 0318 	add.w	r3, r7, #24
 8006c30:	4618      	mov	r0, r3
 8006c32:	f000 f90d 	bl	8006e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006c36:	6a3b      	ldr	r3, [r7, #32]
 8006c38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c3a:	e0ea      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c40:	e0e7      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006c42:	2300      	movs	r3, #0
 8006c44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c46:	e0e4      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006c48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c4c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006c50:	430b      	orrs	r3, r1
 8006c52:	f040 808d 	bne.w	8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006c56:	4b42      	ldr	r3, [pc, #264]	; (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c5a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006c5e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c66:	d06b      	beq.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c6e:	d874      	bhi.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c76:	d056      	beq.n	8006d26 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c7e:	d86c      	bhi.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c82:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c86:	d03b      	beq.n	8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8006c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c8e:	d864      	bhi.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c96:	d021      	beq.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c9e:	d85c      	bhi.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d004      	beq.n	8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8006ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cac:	d004      	beq.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8006cae:	e054      	b.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006cb0:	f000 f8b8 	bl	8006e24 <HAL_RCCEx_GetD3PCLK1Freq>
 8006cb4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006cb6:	e0ac      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006cb8:	4b29      	ldr	r3, [pc, #164]	; (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cc4:	d107      	bne.n	8006cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cc6:	f107 0318 	add.w	r3, r7, #24
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f000 f8c0 	bl	8006e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cd4:	e09d      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cda:	e09a      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006cdc:	4b20      	ldr	r3, [pc, #128]	; (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ce4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ce8:	d107      	bne.n	8006cfa <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cea:	f107 030c 	add.w	r3, r7, #12
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f000 fa02 	bl	80070f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cf8:	e08b      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cfe:	e088      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d00:	4b17      	ldr	r3, [pc, #92]	; (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0304 	and.w	r3, r3, #4
 8006d08:	2b04      	cmp	r3, #4
 8006d0a:	d109      	bne.n	8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d0c:	4b14      	ldr	r3, [pc, #80]	; (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	08db      	lsrs	r3, r3, #3
 8006d12:	f003 0303 	and.w	r3, r3, #3
 8006d16:	4a13      	ldr	r2, [pc, #76]	; (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006d18:	fa22 f303 	lsr.w	r3, r2, r3
 8006d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d1e:	e078      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d20:	2300      	movs	r3, #0
 8006d22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d24:	e075      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006d26:	4b0e      	ldr	r3, [pc, #56]	; (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d32:	d102      	bne.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006d34:	4b0c      	ldr	r3, [pc, #48]	; (8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006d36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d38:	e06b      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d3e:	e068      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006d40:	4b07      	ldr	r3, [pc, #28]	; (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d4c:	d102      	bne.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8006d4e:	4b07      	ldr	r3, [pc, #28]	; (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006d50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d52:	e05e      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d54:	2300      	movs	r3, #0
 8006d56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d58:	e05b      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d5e:	e058      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d60:	58024400 	.word	0x58024400
 8006d64:	03d09000 	.word	0x03d09000
 8006d68:	003d0900 	.word	0x003d0900
 8006d6c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006d70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d74:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8006d78:	430b      	orrs	r3, r1
 8006d7a:	d148      	bne.n	8006e0e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006d7c:	4b27      	ldr	r3, [pc, #156]	; (8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006d7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d84:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d8c:	d02a      	beq.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8006d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d94:	d838      	bhi.n	8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d004      	beq.n	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006da2:	d00d      	beq.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8006da4:	e030      	b.n	8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006da6:	4b1d      	ldr	r3, [pc, #116]	; (8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006db2:	d102      	bne.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8006db4:	4b1a      	ldr	r3, [pc, #104]	; (8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006db6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006db8:	e02b      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dbe:	e028      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006dc0:	4b16      	ldr	r3, [pc, #88]	; (8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006dcc:	d107      	bne.n	8006dde <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f000 fae4 	bl	80073a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ddc:	e019      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006dde:	2300      	movs	r3, #0
 8006de0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006de2:	e016      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006de4:	4b0d      	ldr	r3, [pc, #52]	; (8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006df0:	d107      	bne.n	8006e02 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006df2:	f107 0318 	add.w	r3, r7, #24
 8006df6:	4618      	mov	r0, r3
 8006df8:	f000 f82a 	bl	8006e50 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e00:	e007      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e02:	2300      	movs	r3, #0
 8006e04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e06:	e004      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e0c:	e001      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8006e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3740      	adds	r7, #64	; 0x40
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	58024400 	.word	0x58024400
 8006e20:	017d7840 	.word	0x017d7840

08006e24 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006e28:	f7fe f816 	bl	8004e58 <HAL_RCC_GetHCLKFreq>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	4b06      	ldr	r3, [pc, #24]	; (8006e48 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006e30:	6a1b      	ldr	r3, [r3, #32]
 8006e32:	091b      	lsrs	r3, r3, #4
 8006e34:	f003 0307 	and.w	r3, r3, #7
 8006e38:	4904      	ldr	r1, [pc, #16]	; (8006e4c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006e3a:	5ccb      	ldrb	r3, [r1, r3]
 8006e3c:	f003 031f 	and.w	r3, r3, #31
 8006e40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	58024400 	.word	0x58024400
 8006e4c:	0800c158 	.word	0x0800c158

08006e50 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b089      	sub	sp, #36	; 0x24
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e58:	4ba1      	ldr	r3, [pc, #644]	; (80070e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e5c:	f003 0303 	and.w	r3, r3, #3
 8006e60:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006e62:	4b9f      	ldr	r3, [pc, #636]	; (80070e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e66:	0b1b      	lsrs	r3, r3, #12
 8006e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e6c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006e6e:	4b9c      	ldr	r3, [pc, #624]	; (80070e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e72:	091b      	lsrs	r3, r3, #4
 8006e74:	f003 0301 	and.w	r3, r3, #1
 8006e78:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006e7a:	4b99      	ldr	r3, [pc, #612]	; (80070e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e7e:	08db      	lsrs	r3, r3, #3
 8006e80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e84:	693a      	ldr	r2, [r7, #16]
 8006e86:	fb02 f303 	mul.w	r3, r2, r3
 8006e8a:	ee07 3a90 	vmov	s15, r3
 8006e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f000 8111 	beq.w	80070c0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	f000 8083 	beq.w	8006fac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	f200 80a1 	bhi.w	8006ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d003      	beq.n	8006ebc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d056      	beq.n	8006f68 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006eba:	e099      	b.n	8006ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ebc:	4b88      	ldr	r3, [pc, #544]	; (80070e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 0320 	and.w	r3, r3, #32
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d02d      	beq.n	8006f24 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ec8:	4b85      	ldr	r3, [pc, #532]	; (80070e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	08db      	lsrs	r3, r3, #3
 8006ece:	f003 0303 	and.w	r3, r3, #3
 8006ed2:	4a84      	ldr	r2, [pc, #528]	; (80070e4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ed8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	ee07 3a90 	vmov	s15, r3
 8006ee0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	ee07 3a90 	vmov	s15, r3
 8006eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ef2:	4b7b      	ldr	r3, [pc, #492]	; (80070e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006efa:	ee07 3a90 	vmov	s15, r3
 8006efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f02:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f06:	eddf 5a78 	vldr	s11, [pc, #480]	; 80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006f22:	e087      	b.n	8007034 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	ee07 3a90 	vmov	s15, r3
 8006f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f2e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80070ec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f36:	4b6a      	ldr	r3, [pc, #424]	; (80070e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f3e:	ee07 3a90 	vmov	s15, r3
 8006f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f46:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f4a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f66:	e065      	b.n	8007034 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	ee07 3a90 	vmov	s15, r3
 8006f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f72:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f7a:	4b59      	ldr	r3, [pc, #356]	; (80070e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f82:	ee07 3a90 	vmov	s15, r3
 8006f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f8e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006faa:	e043      	b.n	8007034 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	ee07 3a90 	vmov	s15, r3
 8006fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fb6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80070f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fbe:	4b48      	ldr	r3, [pc, #288]	; (80070e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fc6:	ee07 3a90 	vmov	s15, r3
 8006fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fce:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fd2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fee:	e021      	b.n	8007034 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	ee07 3a90 	vmov	s15, r3
 8006ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ffa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007002:	4b37      	ldr	r3, [pc, #220]	; (80070e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800700a:	ee07 3a90 	vmov	s15, r3
 800700e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007012:	ed97 6a03 	vldr	s12, [r7, #12]
 8007016:	eddf 5a34 	vldr	s11, [pc, #208]	; 80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800701a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800701e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007022:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800702a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800702e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007032:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007034:	4b2a      	ldr	r3, [pc, #168]	; (80070e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007038:	0a5b      	lsrs	r3, r3, #9
 800703a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800703e:	ee07 3a90 	vmov	s15, r3
 8007042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007046:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800704a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800704e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007052:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007056:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800705a:	ee17 2a90 	vmov	r2, s15
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007062:	4b1f      	ldr	r3, [pc, #124]	; (80070e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007066:	0c1b      	lsrs	r3, r3, #16
 8007068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800706c:	ee07 3a90 	vmov	s15, r3
 8007070:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007074:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007078:	ee37 7a87 	vadd.f32	s14, s15, s14
 800707c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007080:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007084:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007088:	ee17 2a90 	vmov	r2, s15
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007090:	4b13      	ldr	r3, [pc, #76]	; (80070e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007094:	0e1b      	lsrs	r3, r3, #24
 8007096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800709a:	ee07 3a90 	vmov	s15, r3
 800709e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80070ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070b6:	ee17 2a90 	vmov	r2, s15
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80070be:	e008      	b.n	80070d2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	609a      	str	r2, [r3, #8]
}
 80070d2:	bf00      	nop
 80070d4:	3724      	adds	r7, #36	; 0x24
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	58024400 	.word	0x58024400
 80070e4:	03d09000 	.word	0x03d09000
 80070e8:	46000000 	.word	0x46000000
 80070ec:	4c742400 	.word	0x4c742400
 80070f0:	4a742400 	.word	0x4a742400
 80070f4:	4bbebc20 	.word	0x4bbebc20

080070f8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b089      	sub	sp, #36	; 0x24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007100:	4ba1      	ldr	r3, [pc, #644]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007104:	f003 0303 	and.w	r3, r3, #3
 8007108:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800710a:	4b9f      	ldr	r3, [pc, #636]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800710c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800710e:	0d1b      	lsrs	r3, r3, #20
 8007110:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007114:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007116:	4b9c      	ldr	r3, [pc, #624]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711a:	0a1b      	lsrs	r3, r3, #8
 800711c:	f003 0301 	and.w	r3, r3, #1
 8007120:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007122:	4b99      	ldr	r3, [pc, #612]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007126:	08db      	lsrs	r3, r3, #3
 8007128:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800712c:	693a      	ldr	r2, [r7, #16]
 800712e:	fb02 f303 	mul.w	r3, r2, r3
 8007132:	ee07 3a90 	vmov	s15, r3
 8007136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800713a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	2b00      	cmp	r3, #0
 8007142:	f000 8111 	beq.w	8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	2b02      	cmp	r3, #2
 800714a:	f000 8083 	beq.w	8007254 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	2b02      	cmp	r3, #2
 8007152:	f200 80a1 	bhi.w	8007298 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d003      	beq.n	8007164 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	2b01      	cmp	r3, #1
 8007160:	d056      	beq.n	8007210 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007162:	e099      	b.n	8007298 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007164:	4b88      	ldr	r3, [pc, #544]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0320 	and.w	r3, r3, #32
 800716c:	2b00      	cmp	r3, #0
 800716e:	d02d      	beq.n	80071cc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007170:	4b85      	ldr	r3, [pc, #532]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	08db      	lsrs	r3, r3, #3
 8007176:	f003 0303 	and.w	r3, r3, #3
 800717a:	4a84      	ldr	r2, [pc, #528]	; (800738c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800717c:	fa22 f303 	lsr.w	r3, r2, r3
 8007180:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	ee07 3a90 	vmov	s15, r3
 8007188:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	ee07 3a90 	vmov	s15, r3
 8007192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800719a:	4b7b      	ldr	r3, [pc, #492]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800719c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071a2:	ee07 3a90 	vmov	s15, r3
 80071a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80071ae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071c6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80071ca:	e087      	b.n	80072dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	ee07 3a90 	vmov	s15, r3
 80071d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071d6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007394 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80071da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071de:	4b6a      	ldr	r3, [pc, #424]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071e6:	ee07 3a90 	vmov	s15, r3
 80071ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80071f2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800720a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800720e:	e065      	b.n	80072dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	ee07 3a90 	vmov	s15, r3
 8007216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800721a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007398 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800721e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007222:	4b59      	ldr	r3, [pc, #356]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800722a:	ee07 3a90 	vmov	s15, r3
 800722e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007232:	ed97 6a03 	vldr	s12, [r7, #12]
 8007236:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800723a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800723e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007242:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800724a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800724e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007252:	e043      	b.n	80072dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	ee07 3a90 	vmov	s15, r3
 800725a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800725e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800739c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007266:	4b48      	ldr	r3, [pc, #288]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800726e:	ee07 3a90 	vmov	s15, r3
 8007272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007276:	ed97 6a03 	vldr	s12, [r7, #12]
 800727a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800727e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007286:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800728a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800728e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007292:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007296:	e021      	b.n	80072dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	ee07 3a90 	vmov	s15, r3
 800729e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007398 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80072a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072aa:	4b37      	ldr	r3, [pc, #220]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072b2:	ee07 3a90 	vmov	s15, r3
 80072b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80072be:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072da:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80072dc:	4b2a      	ldr	r3, [pc, #168]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e0:	0a5b      	lsrs	r3, r3, #9
 80072e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072e6:	ee07 3a90 	vmov	s15, r3
 80072ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80072fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007302:	ee17 2a90 	vmov	r2, s15
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800730a:	4b1f      	ldr	r3, [pc, #124]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800730c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730e:	0c1b      	lsrs	r3, r3, #16
 8007310:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007314:	ee07 3a90 	vmov	s15, r3
 8007318:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800731c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007320:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007324:	edd7 6a07 	vldr	s13, [r7, #28]
 8007328:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800732c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007330:	ee17 2a90 	vmov	r2, s15
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007338:	4b13      	ldr	r3, [pc, #76]	; (8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800733a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733c:	0e1b      	lsrs	r3, r3, #24
 800733e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007342:	ee07 3a90 	vmov	s15, r3
 8007346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800734a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800734e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007352:	edd7 6a07 	vldr	s13, [r7, #28]
 8007356:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800735a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800735e:	ee17 2a90 	vmov	r2, s15
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007366:	e008      	b.n	800737a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	609a      	str	r2, [r3, #8]
}
 800737a:	bf00      	nop
 800737c:	3724      	adds	r7, #36	; 0x24
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop
 8007388:	58024400 	.word	0x58024400
 800738c:	03d09000 	.word	0x03d09000
 8007390:	46000000 	.word	0x46000000
 8007394:	4c742400 	.word	0x4c742400
 8007398:	4a742400 	.word	0x4a742400
 800739c:	4bbebc20 	.word	0x4bbebc20

080073a0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b089      	sub	sp, #36	; 0x24
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073a8:	4ba0      	ldr	r3, [pc, #640]	; (800762c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ac:	f003 0303 	and.w	r3, r3, #3
 80073b0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80073b2:	4b9e      	ldr	r3, [pc, #632]	; (800762c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b6:	091b      	lsrs	r3, r3, #4
 80073b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073bc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80073be:	4b9b      	ldr	r3, [pc, #620]	; (800762c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c2:	f003 0301 	and.w	r3, r3, #1
 80073c6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80073c8:	4b98      	ldr	r3, [pc, #608]	; (800762c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073cc:	08db      	lsrs	r3, r3, #3
 80073ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073d2:	693a      	ldr	r2, [r7, #16]
 80073d4:	fb02 f303 	mul.w	r3, r2, r3
 80073d8:	ee07 3a90 	vmov	s15, r3
 80073dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073e0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f000 8111 	beq.w	800760e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	2b02      	cmp	r3, #2
 80073f0:	f000 8083 	beq.w	80074fa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	f200 80a1 	bhi.w	800753e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d003      	beq.n	800740a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	2b01      	cmp	r3, #1
 8007406:	d056      	beq.n	80074b6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007408:	e099      	b.n	800753e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800740a:	4b88      	ldr	r3, [pc, #544]	; (800762c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f003 0320 	and.w	r3, r3, #32
 8007412:	2b00      	cmp	r3, #0
 8007414:	d02d      	beq.n	8007472 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007416:	4b85      	ldr	r3, [pc, #532]	; (800762c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	08db      	lsrs	r3, r3, #3
 800741c:	f003 0303 	and.w	r3, r3, #3
 8007420:	4a83      	ldr	r2, [pc, #524]	; (8007630 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007422:	fa22 f303 	lsr.w	r3, r2, r3
 8007426:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	ee07 3a90 	vmov	s15, r3
 800742e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	ee07 3a90 	vmov	s15, r3
 8007438:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800743c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007440:	4b7a      	ldr	r3, [pc, #488]	; (800762c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007448:	ee07 3a90 	vmov	s15, r3
 800744c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007450:	ed97 6a03 	vldr	s12, [r7, #12]
 8007454:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007634 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007458:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800745c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007460:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007464:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800746c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007470:	e087      	b.n	8007582 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	ee07 3a90 	vmov	s15, r3
 8007478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800747c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007638 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007480:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007484:	4b69      	ldr	r3, [pc, #420]	; (800762c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800748c:	ee07 3a90 	vmov	s15, r3
 8007490:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007494:	ed97 6a03 	vldr	s12, [r7, #12]
 8007498:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007634 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800749c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074b4:	e065      	b.n	8007582 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	ee07 3a90 	vmov	s15, r3
 80074bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074c0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800763c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80074c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074c8:	4b58      	ldr	r3, [pc, #352]	; (800762c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074d0:	ee07 3a90 	vmov	s15, r3
 80074d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80074dc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007634 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80074e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074f8:	e043      	b.n	8007582 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	ee07 3a90 	vmov	s15, r3
 8007500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007504:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007640 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007508:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800750c:	4b47      	ldr	r3, [pc, #284]	; (800762c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800750e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007514:	ee07 3a90 	vmov	s15, r3
 8007518:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800751c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007520:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007634 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007524:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007528:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800752c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007530:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007534:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007538:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800753c:	e021      	b.n	8007582 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	ee07 3a90 	vmov	s15, r3
 8007544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007548:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007638 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800754c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007550:	4b36      	ldr	r3, [pc, #216]	; (800762c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007558:	ee07 3a90 	vmov	s15, r3
 800755c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007560:	ed97 6a03 	vldr	s12, [r7, #12]
 8007564:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007634 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007568:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800756c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007570:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007574:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800757c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007580:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007582:	4b2a      	ldr	r3, [pc, #168]	; (800762c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007586:	0a5b      	lsrs	r3, r3, #9
 8007588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800758c:	ee07 3a90 	vmov	s15, r3
 8007590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007594:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007598:	ee37 7a87 	vadd.f32	s14, s15, s14
 800759c:	edd7 6a07 	vldr	s13, [r7, #28]
 80075a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075a8:	ee17 2a90 	vmov	r2, s15
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80075b0:	4b1e      	ldr	r3, [pc, #120]	; (800762c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b4:	0c1b      	lsrs	r3, r3, #16
 80075b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075ba:	ee07 3a90 	vmov	s15, r3
 80075be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80075ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075d6:	ee17 2a90 	vmov	r2, s15
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80075de:	4b13      	ldr	r3, [pc, #76]	; (800762c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e2:	0e1b      	lsrs	r3, r3, #24
 80075e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075e8:	ee07 3a90 	vmov	s15, r3
 80075ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80075fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007600:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007604:	ee17 2a90 	vmov	r2, s15
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800760c:	e008      	b.n	8007620 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	609a      	str	r2, [r3, #8]
}
 8007620:	bf00      	nop
 8007622:	3724      	adds	r7, #36	; 0x24
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr
 800762c:	58024400 	.word	0x58024400
 8007630:	03d09000 	.word	0x03d09000
 8007634:	46000000 	.word	0x46000000
 8007638:	4c742400 	.word	0x4c742400
 800763c:	4a742400 	.word	0x4a742400
 8007640:	4bbebc20 	.word	0x4bbebc20

08007644 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800764e:	2300      	movs	r3, #0
 8007650:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007652:	4b53      	ldr	r3, [pc, #332]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 8007654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007656:	f003 0303 	and.w	r3, r3, #3
 800765a:	2b03      	cmp	r3, #3
 800765c:	d101      	bne.n	8007662 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e099      	b.n	8007796 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007662:	4b4f      	ldr	r3, [pc, #316]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a4e      	ldr	r2, [pc, #312]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 8007668:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800766c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800766e:	f7fa fd59 	bl	8002124 <HAL_GetTick>
 8007672:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007674:	e008      	b.n	8007688 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007676:	f7fa fd55 	bl	8002124 <HAL_GetTick>
 800767a:	4602      	mov	r2, r0
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	1ad3      	subs	r3, r2, r3
 8007680:	2b02      	cmp	r3, #2
 8007682:	d901      	bls.n	8007688 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007684:	2303      	movs	r3, #3
 8007686:	e086      	b.n	8007796 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007688:	4b45      	ldr	r3, [pc, #276]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d1f0      	bne.n	8007676 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007694:	4b42      	ldr	r3, [pc, #264]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 8007696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007698:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	031b      	lsls	r3, r3, #12
 80076a2:	493f      	ldr	r1, [pc, #252]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 80076a4:	4313      	orrs	r3, r2
 80076a6:	628b      	str	r3, [r1, #40]	; 0x28
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	3b01      	subs	r3, #1
 80076ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	3b01      	subs	r3, #1
 80076b8:	025b      	lsls	r3, r3, #9
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	431a      	orrs	r2, r3
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	3b01      	subs	r3, #1
 80076c4:	041b      	lsls	r3, r3, #16
 80076c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80076ca:	431a      	orrs	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	691b      	ldr	r3, [r3, #16]
 80076d0:	3b01      	subs	r3, #1
 80076d2:	061b      	lsls	r3, r3, #24
 80076d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80076d8:	4931      	ldr	r1, [pc, #196]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 80076da:	4313      	orrs	r3, r2
 80076dc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80076de:	4b30      	ldr	r3, [pc, #192]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 80076e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	695b      	ldr	r3, [r3, #20]
 80076ea:	492d      	ldr	r1, [pc, #180]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 80076ec:	4313      	orrs	r3, r2
 80076ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80076f0:	4b2b      	ldr	r3, [pc, #172]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 80076f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f4:	f023 0220 	bic.w	r2, r3, #32
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	699b      	ldr	r3, [r3, #24]
 80076fc:	4928      	ldr	r1, [pc, #160]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 80076fe:	4313      	orrs	r3, r2
 8007700:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007702:	4b27      	ldr	r3, [pc, #156]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 8007704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007706:	4a26      	ldr	r2, [pc, #152]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 8007708:	f023 0310 	bic.w	r3, r3, #16
 800770c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800770e:	4b24      	ldr	r3, [pc, #144]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 8007710:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007712:	4b24      	ldr	r3, [pc, #144]	; (80077a4 <RCCEx_PLL2_Config+0x160>)
 8007714:	4013      	ands	r3, r2
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	69d2      	ldr	r2, [r2, #28]
 800771a:	00d2      	lsls	r2, r2, #3
 800771c:	4920      	ldr	r1, [pc, #128]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 800771e:	4313      	orrs	r3, r2
 8007720:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007722:	4b1f      	ldr	r3, [pc, #124]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 8007724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007726:	4a1e      	ldr	r2, [pc, #120]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 8007728:	f043 0310 	orr.w	r3, r3, #16
 800772c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d106      	bne.n	8007742 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007734:	4b1a      	ldr	r3, [pc, #104]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 8007736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007738:	4a19      	ldr	r2, [pc, #100]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 800773a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800773e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007740:	e00f      	b.n	8007762 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	2b01      	cmp	r3, #1
 8007746:	d106      	bne.n	8007756 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007748:	4b15      	ldr	r3, [pc, #84]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 800774a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774c:	4a14      	ldr	r2, [pc, #80]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 800774e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007752:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007754:	e005      	b.n	8007762 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007756:	4b12      	ldr	r3, [pc, #72]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 8007758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800775a:	4a11      	ldr	r2, [pc, #68]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 800775c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007760:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007762:	4b0f      	ldr	r3, [pc, #60]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a0e      	ldr	r2, [pc, #56]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 8007768:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800776c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800776e:	f7fa fcd9 	bl	8002124 <HAL_GetTick>
 8007772:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007774:	e008      	b.n	8007788 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007776:	f7fa fcd5 	bl	8002124 <HAL_GetTick>
 800777a:	4602      	mov	r2, r0
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	1ad3      	subs	r3, r2, r3
 8007780:	2b02      	cmp	r3, #2
 8007782:	d901      	bls.n	8007788 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007784:	2303      	movs	r3, #3
 8007786:	e006      	b.n	8007796 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007788:	4b05      	ldr	r3, [pc, #20]	; (80077a0 <RCCEx_PLL2_Config+0x15c>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d0f0      	beq.n	8007776 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007794:	7bfb      	ldrb	r3, [r7, #15]
}
 8007796:	4618      	mov	r0, r3
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	58024400 	.word	0x58024400
 80077a4:	ffff0007 	.word	0xffff0007

080077a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077b2:	2300      	movs	r3, #0
 80077b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077b6:	4b53      	ldr	r3, [pc, #332]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 80077b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ba:	f003 0303 	and.w	r3, r3, #3
 80077be:	2b03      	cmp	r3, #3
 80077c0:	d101      	bne.n	80077c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e099      	b.n	80078fa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80077c6:	4b4f      	ldr	r3, [pc, #316]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a4e      	ldr	r2, [pc, #312]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 80077cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077d2:	f7fa fca7 	bl	8002124 <HAL_GetTick>
 80077d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80077d8:	e008      	b.n	80077ec <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80077da:	f7fa fca3 	bl	8002124 <HAL_GetTick>
 80077de:	4602      	mov	r2, r0
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	1ad3      	subs	r3, r2, r3
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d901      	bls.n	80077ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80077e8:	2303      	movs	r3, #3
 80077ea:	e086      	b.n	80078fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80077ec:	4b45      	ldr	r3, [pc, #276]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d1f0      	bne.n	80077da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80077f8:	4b42      	ldr	r3, [pc, #264]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 80077fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077fc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	051b      	lsls	r3, r3, #20
 8007806:	493f      	ldr	r1, [pc, #252]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 8007808:	4313      	orrs	r3, r2
 800780a:	628b      	str	r3, [r1, #40]	; 0x28
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	3b01      	subs	r3, #1
 8007812:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	3b01      	subs	r3, #1
 800781c:	025b      	lsls	r3, r3, #9
 800781e:	b29b      	uxth	r3, r3
 8007820:	431a      	orrs	r2, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	3b01      	subs	r3, #1
 8007828:	041b      	lsls	r3, r3, #16
 800782a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800782e:	431a      	orrs	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	3b01      	subs	r3, #1
 8007836:	061b      	lsls	r3, r3, #24
 8007838:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800783c:	4931      	ldr	r1, [pc, #196]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 800783e:	4313      	orrs	r3, r2
 8007840:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007842:	4b30      	ldr	r3, [pc, #192]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 8007844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007846:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	695b      	ldr	r3, [r3, #20]
 800784e:	492d      	ldr	r1, [pc, #180]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 8007850:	4313      	orrs	r3, r2
 8007852:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007854:	4b2b      	ldr	r3, [pc, #172]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 8007856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007858:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	699b      	ldr	r3, [r3, #24]
 8007860:	4928      	ldr	r1, [pc, #160]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 8007862:	4313      	orrs	r3, r2
 8007864:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007866:	4b27      	ldr	r3, [pc, #156]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 8007868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800786a:	4a26      	ldr	r2, [pc, #152]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 800786c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007870:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007872:	4b24      	ldr	r3, [pc, #144]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 8007874:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007876:	4b24      	ldr	r3, [pc, #144]	; (8007908 <RCCEx_PLL3_Config+0x160>)
 8007878:	4013      	ands	r3, r2
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	69d2      	ldr	r2, [r2, #28]
 800787e:	00d2      	lsls	r2, r2, #3
 8007880:	4920      	ldr	r1, [pc, #128]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 8007882:	4313      	orrs	r3, r2
 8007884:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007886:	4b1f      	ldr	r3, [pc, #124]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 8007888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800788a:	4a1e      	ldr	r2, [pc, #120]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 800788c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007890:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d106      	bne.n	80078a6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007898:	4b1a      	ldr	r3, [pc, #104]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 800789a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789c:	4a19      	ldr	r2, [pc, #100]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 800789e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80078a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078a4:	e00f      	b.n	80078c6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d106      	bne.n	80078ba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80078ac:	4b15      	ldr	r3, [pc, #84]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 80078ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b0:	4a14      	ldr	r2, [pc, #80]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 80078b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80078b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078b8:	e005      	b.n	80078c6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80078ba:	4b12      	ldr	r3, [pc, #72]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 80078bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078be:	4a11      	ldr	r2, [pc, #68]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 80078c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80078c6:	4b0f      	ldr	r3, [pc, #60]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a0e      	ldr	r2, [pc, #56]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 80078cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078d2:	f7fa fc27 	bl	8002124 <HAL_GetTick>
 80078d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80078d8:	e008      	b.n	80078ec <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80078da:	f7fa fc23 	bl	8002124 <HAL_GetTick>
 80078de:	4602      	mov	r2, r0
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	1ad3      	subs	r3, r2, r3
 80078e4:	2b02      	cmp	r3, #2
 80078e6:	d901      	bls.n	80078ec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	e006      	b.n	80078fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80078ec:	4b05      	ldr	r3, [pc, #20]	; (8007904 <RCCEx_PLL3_Config+0x15c>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d0f0      	beq.n	80078da <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80078f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	58024400 	.word	0x58024400
 8007908:	ffff0007 	.word	0xffff0007

0800790c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b08a      	sub	sp, #40	; 0x28
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d101      	bne.n	800791e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e075      	b.n	8007a0a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007924:	b2db      	uxtb	r3, r3
 8007926:	2b00      	cmp	r3, #0
 8007928:	d105      	bne.n	8007936 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f7f9 ffb5 	bl	80018a0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2204      	movs	r2, #4
 800793a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f868 	bl	8007a14 <HAL_SD_InitCard>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d001      	beq.n	800794e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e05d      	b.n	8007a0a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800794e:	f107 0308 	add.w	r3, r7, #8
 8007952:	4619      	mov	r1, r3
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 fa9d 	bl	8007e94 <HAL_SD_GetCardStatus>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d001      	beq.n	8007964 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	e052      	b.n	8007a0a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8007964:	7e3b      	ldrb	r3, [r7, #24]
 8007966:	b2db      	uxtb	r3, r3
 8007968:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800796a:	7e7b      	ldrb	r3, [r7, #25]
 800796c:	b2db      	uxtb	r3, r3
 800796e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007974:	2b01      	cmp	r3, #1
 8007976:	d10a      	bne.n	800798e <HAL_SD_Init+0x82>
 8007978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797a:	2b00      	cmp	r3, #0
 800797c:	d102      	bne.n	8007984 <HAL_SD_Init+0x78>
 800797e:	6a3b      	ldr	r3, [r7, #32]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d004      	beq.n	800798e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800798a:	659a      	str	r2, [r3, #88]	; 0x58
 800798c:	e00b      	b.n	80079a6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007992:	2b01      	cmp	r3, #1
 8007994:	d104      	bne.n	80079a0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f44f 7280 	mov.w	r2, #256	; 0x100
 800799c:	659a      	str	r2, [r3, #88]	; 0x58
 800799e:	e002      	b.n	80079a6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	4619      	mov	r1, r3
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 fb2f 	bl	8008010 <HAL_SD_ConfigWideBusOperation>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d001      	beq.n	80079bc <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
 80079ba:	e026      	b.n	8007a0a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80079bc:	f7fa fbb2 	bl	8002124 <HAL_GetTick>
 80079c0:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80079c2:	e011      	b.n	80079e8 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80079c4:	f7fa fbae 	bl	8002124 <HAL_GetTick>
 80079c8:	4602      	mov	r2, r0
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	1ad3      	subs	r3, r2, r3
 80079ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d2:	d109      	bne.n	80079e8 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80079da:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80079e4:	2303      	movs	r3, #3
 80079e6:	e010      	b.n	8007a0a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fc23 	bl	8008234 <HAL_SD_GetCardState>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b04      	cmp	r3, #4
 80079f2:	d1e7      	bne.n	80079c4 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3728      	adds	r7, #40	; 0x28
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
	...

08007a14 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007a14:	b590      	push	{r4, r7, lr}
 8007a16:	b08d      	sub	sp, #52	; 0x34
 8007a18:	af02      	add	r7, sp, #8
 8007a1a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007a20:	2300      	movs	r3, #0
 8007a22:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007a24:	2300      	movs	r3, #0
 8007a26:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007a2c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007a30:	f04f 0100 	mov.w	r1, #0
 8007a34:	f7fe fc76 	bl	8006324 <HAL_RCCEx_GetPeriphCLKFreq>
 8007a38:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d109      	bne.n	8007a54 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007a4e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	e070      	b.n	8007b36 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8007a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a56:	0a1b      	lsrs	r3, r3, #8
 8007a58:	4a39      	ldr	r2, [pc, #228]	; (8007b40 <HAL_SD_InitCard+0x12c>)
 8007a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a5e:	091b      	lsrs	r3, r3, #4
 8007a60:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681c      	ldr	r4, [r3, #0]
 8007a66:	466a      	mov	r2, sp
 8007a68:	f107 0318 	add.w	r3, r7, #24
 8007a6c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007a70:	e882 0003 	stmia.w	r2, {r0, r1}
 8007a74:	f107 030c 	add.w	r3, r7, #12
 8007a78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	f003 fb3c 	bl	800b0f8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4618      	mov	r0, r3
 8007a86:	f003 fb6e 	bl	800b166 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d005      	beq.n	8007a9c <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	005b      	lsls	r3, r3, #1
 8007a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a9a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8007a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d007      	beq.n	8007ab2 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8007aa2:	4a28      	ldr	r2, [pc, #160]	; (8007b44 <HAL_SD_InitCard+0x130>)
 8007aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aaa:	3301      	adds	r3, #1
 8007aac:	4618      	mov	r0, r3
 8007aae:	f7fa fb45 	bl	800213c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 fcac 	bl	8008410 <SD_PowerON>
 8007ab8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007aba:	6a3b      	ldr	r3, [r7, #32]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00b      	beq.n	8007ad8 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007acc:	6a3b      	ldr	r3, [r7, #32]
 8007ace:	431a      	orrs	r2, r3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e02e      	b.n	8007b36 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 fbcb 	bl	8008274 <SD_InitCard>
 8007ade:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007ae0:	6a3b      	ldr	r3, [r7, #32]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d00b      	beq.n	8007afe <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007af2:	6a3b      	ldr	r3, [r7, #32]
 8007af4:	431a      	orrs	r2, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e01b      	b.n	8007b36 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007b06:	4618      	mov	r0, r3
 8007b08:	f003 fbc2 	bl	800b290 <SDMMC_CmdBlockLength>
 8007b0c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007b0e:	6a3b      	ldr	r3, [r7, #32]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d00f      	beq.n	8007b34 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a0b      	ldr	r2, [pc, #44]	; (8007b48 <HAL_SD_InitCard+0x134>)
 8007b1a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b20:	6a3b      	ldr	r3, [r7, #32]
 8007b22:	431a      	orrs	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	e000      	b.n	8007b36 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	372c      	adds	r7, #44	; 0x2c
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd90      	pop	{r4, r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	014f8b59 	.word	0x014f8b59
 8007b44:	00012110 	.word	0x00012110
 8007b48:	1fe00fff 	.word	0x1fe00fff

08007b4c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b5a:	0f9b      	lsrs	r3, r3, #30
 8007b5c:	b2da      	uxtb	r2, r3
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b66:	0e9b      	lsrs	r3, r3, #26
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	f003 030f 	and.w	r3, r3, #15
 8007b6e:	b2da      	uxtb	r2, r3
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b78:	0e1b      	lsrs	r3, r3, #24
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	f003 0303 	and.w	r3, r3, #3
 8007b80:	b2da      	uxtb	r2, r3
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b8a:	0c1b      	lsrs	r3, r3, #16
 8007b8c:	b2da      	uxtb	r2, r3
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b96:	0a1b      	lsrs	r3, r3, #8
 8007b98:	b2da      	uxtb	r2, r3
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ba2:	b2da      	uxtb	r2, r3
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bac:	0d1b      	lsrs	r3, r3, #20
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bb8:	0c1b      	lsrs	r3, r3, #16
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	f003 030f 	and.w	r3, r3, #15
 8007bc0:	b2da      	uxtb	r2, r3
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bca:	0bdb      	lsrs	r3, r3, #15
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	f003 0301 	and.w	r3, r3, #1
 8007bd2:	b2da      	uxtb	r2, r3
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bdc:	0b9b      	lsrs	r3, r3, #14
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	f003 0301 	and.w	r3, r3, #1
 8007be4:	b2da      	uxtb	r2, r3
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bee:	0b5b      	lsrs	r3, r3, #13
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	f003 0301 	and.w	r3, r3, #1
 8007bf6:	b2da      	uxtb	r2, r3
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c00:	0b1b      	lsrs	r3, r3, #12
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	f003 0301 	and.w	r3, r3, #1
 8007c08:	b2da      	uxtb	r2, r3
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	2200      	movs	r2, #0
 8007c12:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d163      	bne.n	8007ce4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c20:	009a      	lsls	r2, r3, #2
 8007c22:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007c26:	4013      	ands	r3, r2
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8007c2c:	0f92      	lsrs	r2, r2, #30
 8007c2e:	431a      	orrs	r2, r3
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c38:	0edb      	lsrs	r3, r3, #27
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	f003 0307 	and.w	r3, r3, #7
 8007c40:	b2da      	uxtb	r2, r3
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c4a:	0e1b      	lsrs	r3, r3, #24
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	f003 0307 	and.w	r3, r3, #7
 8007c52:	b2da      	uxtb	r2, r3
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c5c:	0d5b      	lsrs	r3, r3, #21
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	f003 0307 	and.w	r3, r3, #7
 8007c64:	b2da      	uxtb	r2, r3
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c6e:	0c9b      	lsrs	r3, r3, #18
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	f003 0307 	and.w	r3, r3, #7
 8007c76:	b2da      	uxtb	r2, r3
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c80:	0bdb      	lsrs	r3, r3, #15
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	f003 0307 	and.w	r3, r3, #7
 8007c88:	b2da      	uxtb	r2, r3
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	1c5a      	adds	r2, r3, #1
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	7e1b      	ldrb	r3, [r3, #24]
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	f003 0307 	and.w	r3, r3, #7
 8007ca2:	3302      	adds	r3, #2
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007cae:	fb03 f202 	mul.w	r2, r3, r2
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	7a1b      	ldrb	r3, [r3, #8]
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	f003 030f 	and.w	r3, r3, #15
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	409a      	lsls	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007cd0:	0a52      	lsrs	r2, r2, #9
 8007cd2:	fb03 f202 	mul.w	r2, r3, r2
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ce0:	655a      	str	r2, [r3, #84]	; 0x54
 8007ce2:	e031      	b.n	8007d48 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d11d      	bne.n	8007d28 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cf0:	041b      	lsls	r3, r3, #16
 8007cf2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cfa:	0c1b      	lsrs	r3, r3, #16
 8007cfc:	431a      	orrs	r2, r3
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	3301      	adds	r3, #1
 8007d08:	029a      	lsls	r2, r3, #10
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d1c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	655a      	str	r2, [r3, #84]	; 0x54
 8007d26:	e00f      	b.n	8007d48 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a58      	ldr	r2, [pc, #352]	; (8007e90 <HAL_SD_GetCardCSD+0x344>)
 8007d2e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d34:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8007d44:	2301      	movs	r3, #1
 8007d46:	e09d      	b.n	8007e84 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d4c:	0b9b      	lsrs	r3, r3, #14
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	f003 0301 	and.w	r3, r3, #1
 8007d54:	b2da      	uxtb	r2, r3
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d5e:	09db      	lsrs	r3, r3, #7
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d66:	b2da      	uxtb	r2, r3
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d76:	b2da      	uxtb	r2, r3
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d80:	0fdb      	lsrs	r3, r3, #31
 8007d82:	b2da      	uxtb	r2, r3
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d8c:	0f5b      	lsrs	r3, r3, #29
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	f003 0303 	and.w	r3, r3, #3
 8007d94:	b2da      	uxtb	r2, r3
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d9e:	0e9b      	lsrs	r3, r3, #26
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	f003 0307 	and.w	r3, r3, #7
 8007da6:	b2da      	uxtb	r2, r3
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007db0:	0d9b      	lsrs	r3, r3, #22
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	f003 030f 	and.w	r3, r3, #15
 8007db8:	b2da      	uxtb	r2, r3
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dc2:	0d5b      	lsrs	r3, r3, #21
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	f003 0301 	and.w	r3, r3, #1
 8007dca:	b2da      	uxtb	r2, r3
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dde:	0c1b      	lsrs	r3, r3, #16
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	f003 0301 	and.w	r3, r3, #1
 8007de6:	b2da      	uxtb	r2, r3
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007df2:	0bdb      	lsrs	r3, r3, #15
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	f003 0301 	and.w	r3, r3, #1
 8007dfa:	b2da      	uxtb	r2, r3
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e06:	0b9b      	lsrs	r3, r3, #14
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	f003 0301 	and.w	r3, r3, #1
 8007e0e:	b2da      	uxtb	r2, r3
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e1a:	0b5b      	lsrs	r3, r3, #13
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	f003 0301 	and.w	r3, r3, #1
 8007e22:	b2da      	uxtb	r2, r3
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e2e:	0b1b      	lsrs	r3, r3, #12
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	f003 0301 	and.w	r3, r3, #1
 8007e36:	b2da      	uxtb	r2, r3
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e42:	0a9b      	lsrs	r3, r3, #10
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	f003 0303 	and.w	r3, r3, #3
 8007e4a:	b2da      	uxtb	r2, r3
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e56:	0a1b      	lsrs	r3, r3, #8
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	f003 0303 	and.w	r3, r3, #3
 8007e5e:	b2da      	uxtb	r2, r3
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e6a:	085b      	lsrs	r3, r3, #1
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e72:	b2da      	uxtb	r2, r3
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007e82:	2300      	movs	r3, #0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr
 8007e90:	1fe00fff 	.word	0x1fe00fff

08007e94 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b094      	sub	sp, #80	; 0x50
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	2b03      	cmp	r3, #3
 8007eae:	d101      	bne.n	8007eb4 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e0a7      	b.n	8008004 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8007eb4:	f107 0308 	add.w	r3, r7, #8
 8007eb8:	4619      	mov	r1, r3
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 fb36 	bl	800852c <SD_SendSDStatus>
 8007ec0:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8007ec2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d011      	beq.n	8007eec <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a4f      	ldr	r2, [pc, #316]	; (800800c <HAL_SD_GetCardStatus+0x178>)
 8007ece:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ed6:	431a      	orrs	r2, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8007eea:	e070      	b.n	8007fce <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	099b      	lsrs	r3, r3, #6
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	f003 0303 	and.w	r3, r3, #3
 8007ef6:	b2da      	uxtb	r2, r3
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	095b      	lsrs	r3, r3, #5
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	f003 0301 	and.w	r3, r3, #1
 8007f06:	b2da      	uxtb	r2, r3
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	0a1b      	lsrs	r3, r3, #8
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007f16:	b29a      	uxth	r2, r3
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	0e1b      	lsrs	r3, r3, #24
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	b29a      	uxth	r2, r3
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	061a      	lsls	r2, r3, #24
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	021b      	lsls	r3, r3, #8
 8007f2e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007f32:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	0a1b      	lsrs	r3, r3, #8
 8007f38:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007f3c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	0e1b      	lsrs	r3, r3, #24
 8007f42:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	b2da      	uxtb	r2, r3
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	0a1b      	lsrs	r3, r3, #8
 8007f54:	b2da      	uxtb	r2, r3
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	0d1b      	lsrs	r3, r3, #20
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	f003 030f 	and.w	r3, r3, #15
 8007f64:	b2da      	uxtb	r2, r3
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	0c1b      	lsrs	r3, r3, #16
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007f74:	b29a      	uxth	r2, r3
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	b29a      	uxth	r2, r3
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	0a9b      	lsrs	r3, r3, #10
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f90:	b2da      	uxtb	r2, r3
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	0a1b      	lsrs	r3, r3, #8
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	f003 0303 	and.w	r3, r3, #3
 8007fa0:	b2da      	uxtb	r2, r3
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	091b      	lsrs	r3, r3, #4
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	f003 030f 	and.w	r3, r3, #15
 8007fb0:	b2da      	uxtb	r2, r3
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	f003 030f 	and.w	r3, r3, #15
 8007fbe:	b2da      	uxtb	r2, r3
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	0e1b      	lsrs	r3, r3, #24
 8007fc8:	b2da      	uxtb	r2, r3
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f003 f95a 	bl	800b290 <SDMMC_CmdBlockLength>
 8007fdc:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8007fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d00d      	beq.n	8008000 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a08      	ldr	r2, [pc, #32]	; (800800c <HAL_SD_GetCardStatus+0x178>)
 8007fea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ff0:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8008000:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8008004:	4618      	mov	r0, r3
 8008006:	3750      	adds	r7, #80	; 0x50
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	1fe00fff 	.word	0x1fe00fff

08008010 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008010:	b590      	push	{r4, r7, lr}
 8008012:	b08d      	sub	sp, #52	; 0x34
 8008014:	af02      	add	r7, sp, #8
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800801a:	2300      	movs	r3, #0
 800801c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2203      	movs	r2, #3
 8008024:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800802c:	2b03      	cmp	r3, #3
 800802e:	d02e      	beq.n	800808e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008036:	d106      	bne.n	8008046 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800803c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	635a      	str	r2, [r3, #52]	; 0x34
 8008044:	e029      	b.n	800809a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800804c:	d10a      	bne.n	8008064 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 fb64 	bl	800871c <SD_WideBus_Enable>
 8008054:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800805a:	6a3b      	ldr	r3, [r7, #32]
 800805c:	431a      	orrs	r2, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	635a      	str	r2, [r3, #52]	; 0x34
 8008062:	e01a      	b.n	800809a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d10a      	bne.n	8008080 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 fba1 	bl	80087b2 <SD_WideBus_Disable>
 8008070:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008076:	6a3b      	ldr	r3, [r7, #32]
 8008078:	431a      	orrs	r2, r3
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	635a      	str	r2, [r3, #52]	; 0x34
 800807e:	e00c      	b.n	800809a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008084:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	635a      	str	r2, [r3, #52]	; 0x34
 800808c:	e005      	b.n	800809a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008092:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d007      	beq.n	80080b2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a5f      	ldr	r2, [pc, #380]	; (8008224 <HAL_SD_ConfigWideBusOperation+0x214>)
 80080a8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80080b0:	e096      	b.n	80081e0 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80080b2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80080b6:	f04f 0100 	mov.w	r1, #0
 80080ba:	f7fe f933 	bl	8006324 <HAL_RCCEx_GetPeriphCLKFreq>
 80080be:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	f000 8083 	beq.w	80081ce <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	691b      	ldr	r3, [r3, #16]
 80080dc:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	695a      	ldr	r2, [r3, #20]
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	4950      	ldr	r1, [pc, #320]	; (8008228 <HAL_SD_ConfigWideBusOperation+0x218>)
 80080e6:	fba1 1303 	umull	r1, r3, r1, r3
 80080ea:	0e1b      	lsrs	r3, r3, #24
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d303      	bcc.n	80080f8 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	695b      	ldr	r3, [r3, #20]
 80080f4:	61bb      	str	r3, [r7, #24]
 80080f6:	e05a      	b.n	80081ae <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008100:	d103      	bne.n	800810a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	695b      	ldr	r3, [r3, #20]
 8008106:	61bb      	str	r3, [r7, #24]
 8008108:	e051      	b.n	80081ae <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800810e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008112:	d126      	bne.n	8008162 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	695b      	ldr	r3, [r3, #20]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d10e      	bne.n	800813a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	4a43      	ldr	r2, [pc, #268]	; (800822c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d906      	bls.n	8008132 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	4a40      	ldr	r2, [pc, #256]	; (8008228 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008128:	fba2 2303 	umull	r2, r3, r2, r3
 800812c:	0e5b      	lsrs	r3, r3, #25
 800812e:	61bb      	str	r3, [r7, #24]
 8008130:	e03d      	b.n	80081ae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	695b      	ldr	r3, [r3, #20]
 8008136:	61bb      	str	r3, [r7, #24]
 8008138:	e039      	b.n	80081ae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	695b      	ldr	r3, [r3, #20]
 800813e:	005b      	lsls	r3, r3, #1
 8008140:	69fa      	ldr	r2, [r7, #28]
 8008142:	fbb2 f3f3 	udiv	r3, r2, r3
 8008146:	4a39      	ldr	r2, [pc, #228]	; (800822c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d906      	bls.n	800815a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	4a36      	ldr	r2, [pc, #216]	; (8008228 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008150:	fba2 2303 	umull	r2, r3, r2, r3
 8008154:	0e5b      	lsrs	r3, r3, #25
 8008156:	61bb      	str	r3, [r7, #24]
 8008158:	e029      	b.n	80081ae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	695b      	ldr	r3, [r3, #20]
 800815e:	61bb      	str	r3, [r7, #24]
 8008160:	e025      	b.n	80081ae <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	695b      	ldr	r3, [r3, #20]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d10e      	bne.n	8008188 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800816a:	69fb      	ldr	r3, [r7, #28]
 800816c:	4a30      	ldr	r2, [pc, #192]	; (8008230 <HAL_SD_ConfigWideBusOperation+0x220>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d906      	bls.n	8008180 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	4a2c      	ldr	r2, [pc, #176]	; (8008228 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008176:	fba2 2303 	umull	r2, r3, r2, r3
 800817a:	0e1b      	lsrs	r3, r3, #24
 800817c:	61bb      	str	r3, [r7, #24]
 800817e:	e016      	b.n	80081ae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	695b      	ldr	r3, [r3, #20]
 8008184:	61bb      	str	r3, [r7, #24]
 8008186:	e012      	b.n	80081ae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	695b      	ldr	r3, [r3, #20]
 800818c:	005b      	lsls	r3, r3, #1
 800818e:	69fa      	ldr	r2, [r7, #28]
 8008190:	fbb2 f3f3 	udiv	r3, r2, r3
 8008194:	4a26      	ldr	r2, [pc, #152]	; (8008230 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d906      	bls.n	80081a8 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	4a22      	ldr	r2, [pc, #136]	; (8008228 <HAL_SD_ConfigWideBusOperation+0x218>)
 800819e:	fba2 2303 	umull	r2, r3, r2, r3
 80081a2:	0e1b      	lsrs	r3, r3, #24
 80081a4:	61bb      	str	r3, [r7, #24]
 80081a6:	e002      	b.n	80081ae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	695b      	ldr	r3, [r3, #20]
 80081ac:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681c      	ldr	r4, [r3, #0]
 80081b2:	466a      	mov	r2, sp
 80081b4:	f107 0314 	add.w	r3, r7, #20
 80081b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80081bc:	e882 0003 	stmia.w	r2, {r0, r1}
 80081c0:	f107 0308 	add.w	r3, r7, #8
 80081c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80081c6:	4620      	mov	r0, r4
 80081c8:	f002 ff96 	bl	800b0f8 <SDMMC_Init>
 80081cc:	e008      	b.n	80081e0 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081d2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80081e8:	4618      	mov	r0, r3
 80081ea:	f003 f851 	bl	800b290 <SDMMC_CmdBlockLength>
 80081ee:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80081f0:	6a3b      	ldr	r3, [r7, #32]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00c      	beq.n	8008210 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a0a      	ldr	r2, [pc, #40]	; (8008224 <HAL_SD_ConfigWideBusOperation+0x214>)
 80081fc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008202:	6a3b      	ldr	r3, [r7, #32]
 8008204:	431a      	orrs	r2, r3
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8008218:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800821c:	4618      	mov	r0, r3
 800821e:	372c      	adds	r7, #44	; 0x2c
 8008220:	46bd      	mov	sp, r7
 8008222:	bd90      	pop	{r4, r7, pc}
 8008224:	1fe00fff 	.word	0x1fe00fff
 8008228:	55e63b89 	.word	0x55e63b89
 800822c:	02faf080 	.word	0x02faf080
 8008230:	017d7840 	.word	0x017d7840

08008234 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b086      	sub	sp, #24
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800823c:	2300      	movs	r3, #0
 800823e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008240:	f107 030c 	add.w	r3, r7, #12
 8008244:	4619      	mov	r1, r3
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 fa40 	bl	80086cc <SD_SendStatus>
 800824c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d005      	beq.n	8008260 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	431a      	orrs	r2, r3
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	0a5b      	lsrs	r3, r3, #9
 8008264:	f003 030f 	and.w	r3, r3, #15
 8008268:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800826a:	693b      	ldr	r3, [r7, #16]
}
 800826c:	4618      	mov	r0, r3
 800826e:	3718      	adds	r7, #24
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b090      	sub	sp, #64	; 0x40
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800827c:	2300      	movs	r3, #0
 800827e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8008280:	f7f9 ff50 	bl	8002124 <HAL_GetTick>
 8008284:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4618      	mov	r0, r3
 800828c:	f002 ff7c 	bl	800b188 <SDMMC_GetPowerState>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d102      	bne.n	800829c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008296:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800829a:	e0b5      	b.n	8008408 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a0:	2b03      	cmp	r3, #3
 80082a2:	d02e      	beq.n	8008302 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4618      	mov	r0, r3
 80082aa:	f003 f8fd 	bl	800b4a8 <SDMMC_CmdSendCID>
 80082ae:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80082b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d001      	beq.n	80082ba <SD_InitCard+0x46>
    {
      return errorstate;
 80082b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b8:	e0a6      	b.n	8008408 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2100      	movs	r1, #0
 80082c0:	4618      	mov	r0, r3
 80082c2:	f002 ffa6 	bl	800b212 <SDMMC_GetResponse>
 80082c6:	4602      	mov	r2, r0
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2104      	movs	r1, #4
 80082d2:	4618      	mov	r0, r3
 80082d4:	f002 ff9d 	bl	800b212 <SDMMC_GetResponse>
 80082d8:	4602      	mov	r2, r0
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	2108      	movs	r1, #8
 80082e4:	4618      	mov	r0, r3
 80082e6:	f002 ff94 	bl	800b212 <SDMMC_GetResponse>
 80082ea:	4602      	mov	r2, r0
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	210c      	movs	r1, #12
 80082f6:	4618      	mov	r0, r3
 80082f8:	f002 ff8b 	bl	800b212 <SDMMC_GetResponse>
 80082fc:	4602      	mov	r2, r0
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008306:	2b03      	cmp	r3, #3
 8008308:	d01d      	beq.n	8008346 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800830a:	e019      	b.n	8008340 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f107 020a 	add.w	r2, r7, #10
 8008314:	4611      	mov	r1, r2
 8008316:	4618      	mov	r0, r3
 8008318:	f003 f905 	bl	800b526 <SDMMC_CmdSetRelAdd>
 800831c:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800831e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008320:	2b00      	cmp	r3, #0
 8008322:	d001      	beq.n	8008328 <SD_InitCard+0xb4>
      {
        return errorstate;
 8008324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008326:	e06f      	b.n	8008408 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8008328:	f7f9 fefc 	bl	8002124 <HAL_GetTick>
 800832c:	4602      	mov	r2, r0
 800832e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008330:	1ad3      	subs	r3, r2, r3
 8008332:	f241 3287 	movw	r2, #4999	; 0x1387
 8008336:	4293      	cmp	r3, r2
 8008338:	d902      	bls.n	8008340 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800833a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800833e:	e063      	b.n	8008408 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8008340:	897b      	ldrh	r3, [r7, #10]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d0e2      	beq.n	800830c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800834a:	2b03      	cmp	r3, #3
 800834c:	d036      	beq.n	80083bc <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800834e:	897b      	ldrh	r3, [r7, #10]
 8008350:	461a      	mov	r2, r3
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800835e:	041b      	lsls	r3, r3, #16
 8008360:	4619      	mov	r1, r3
 8008362:	4610      	mov	r0, r2
 8008364:	f003 f8bf 	bl	800b4e6 <SDMMC_CmdSendCSD>
 8008368:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800836a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836c:	2b00      	cmp	r3, #0
 800836e:	d001      	beq.n	8008374 <SD_InitCard+0x100>
    {
      return errorstate;
 8008370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008372:	e049      	b.n	8008408 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	2100      	movs	r1, #0
 800837a:	4618      	mov	r0, r3
 800837c:	f002 ff49 	bl	800b212 <SDMMC_GetResponse>
 8008380:	4602      	mov	r2, r0
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2104      	movs	r1, #4
 800838c:	4618      	mov	r0, r3
 800838e:	f002 ff40 	bl	800b212 <SDMMC_GetResponse>
 8008392:	4602      	mov	r2, r0
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2108      	movs	r1, #8
 800839e:	4618      	mov	r0, r3
 80083a0:	f002 ff37 	bl	800b212 <SDMMC_GetResponse>
 80083a4:	4602      	mov	r2, r0
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	210c      	movs	r1, #12
 80083b0:	4618      	mov	r0, r3
 80083b2:	f002 ff2e 	bl	800b212 <SDMMC_GetResponse>
 80083b6:	4602      	mov	r2, r0
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2104      	movs	r1, #4
 80083c2:	4618      	mov	r0, r3
 80083c4:	f002 ff25 	bl	800b212 <SDMMC_GetResponse>
 80083c8:	4603      	mov	r3, r0
 80083ca:	0d1a      	lsrs	r2, r3, #20
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80083d0:	f107 030c 	add.w	r3, r7, #12
 80083d4:	4619      	mov	r1, r3
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f7ff fbb8 	bl	8007b4c <HAL_SD_GetCardCSD>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d002      	beq.n	80083e8 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80083e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80083e6:	e00f      	b.n	8008408 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083f0:	041b      	lsls	r3, r3, #16
 80083f2:	4619      	mov	r1, r3
 80083f4:	4610      	mov	r0, r2
 80083f6:	f002 ff6e 	bl	800b2d6 <SDMMC_CmdSelDesel>
 80083fa:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80083fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d001      	beq.n	8008406 <SD_InitCard+0x192>
  {
    return errorstate;
 8008402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008404:	e000      	b.n	8008408 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008406:	2300      	movs	r3, #0
}
 8008408:	4618      	mov	r0, r3
 800840a:	3740      	adds	r7, #64	; 0x40
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b086      	sub	sp, #24
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008418:	2300      	movs	r3, #0
 800841a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800841c:	2300      	movs	r3, #0
 800841e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8008420:	2300      	movs	r3, #0
 8008422:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4618      	mov	r0, r3
 800842a:	f002 ff77 	bl	800b31c <SDMMC_CmdGoIdleState>
 800842e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d001      	beq.n	800843a <SD_PowerON+0x2a>
  {
    return errorstate;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	e072      	b.n	8008520 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4618      	mov	r0, r3
 8008440:	f002 ff8a 	bl	800b358 <SDMMC_CmdOperCond>
 8008444:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800844c:	d10d      	bne.n	800846a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4618      	mov	r0, r3
 800845a:	f002 ff5f 	bl	800b31c <SDMMC_CmdGoIdleState>
 800845e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d004      	beq.n	8008470 <SD_PowerON+0x60>
    {
      return errorstate;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	e05a      	b.n	8008520 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2201      	movs	r2, #1
 800846e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008474:	2b01      	cmp	r3, #1
 8008476:	d137      	bne.n	80084e8 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2100      	movs	r1, #0
 800847e:	4618      	mov	r0, r3
 8008480:	f002 ff8a 	bl	800b398 <SDMMC_CmdAppCommand>
 8008484:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d02d      	beq.n	80084e8 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800848c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008490:	e046      	b.n	8008520 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	2100      	movs	r1, #0
 8008498:	4618      	mov	r0, r3
 800849a:	f002 ff7d 	bl	800b398 <SDMMC_CmdAppCommand>
 800849e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d001      	beq.n	80084aa <SD_PowerON+0x9a>
    {
      return errorstate;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	e03a      	b.n	8008520 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	491e      	ldr	r1, [pc, #120]	; (8008528 <SD_PowerON+0x118>)
 80084b0:	4618      	mov	r0, r3
 80084b2:	f002 ff94 	bl	800b3de <SDMMC_CmdAppOperCommand>
 80084b6:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d002      	beq.n	80084c4 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80084be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80084c2:	e02d      	b.n	8008520 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2100      	movs	r1, #0
 80084ca:	4618      	mov	r0, r3
 80084cc:	f002 fea1 	bl	800b212 <SDMMC_GetResponse>
 80084d0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	0fdb      	lsrs	r3, r3, #31
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d101      	bne.n	80084de <SD_PowerON+0xce>
 80084da:	2301      	movs	r3, #1
 80084dc:	e000      	b.n	80084e0 <SD_PowerON+0xd0>
 80084de:	2300      	movs	r3, #0
 80084e0:	613b      	str	r3, [r7, #16]

    count++;
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	3301      	adds	r3, #1
 80084e6:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d802      	bhi.n	80084f8 <SD_PowerON+0xe8>
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d0cc      	beq.n	8008492 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80084fe:	4293      	cmp	r3, r2
 8008500:	d902      	bls.n	8008508 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008502:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008506:	e00b      	b.n	8008520 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008514:	2b00      	cmp	r3, #0
 8008516:	d002      	beq.n	800851e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800851e:	2300      	movs	r3, #0
}
 8008520:	4618      	mov	r0, r3
 8008522:	3718      	adds	r7, #24
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}
 8008528:	c1100000 	.word	0xc1100000

0800852c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b08c      	sub	sp, #48	; 0x30
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008536:	f7f9 fdf5 	bl	8002124 <HAL_GetTick>
 800853a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2100      	movs	r1, #0
 8008546:	4618      	mov	r0, r3
 8008548:	f002 fe63 	bl	800b212 <SDMMC_GetResponse>
 800854c:	4603      	mov	r3, r0
 800854e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008552:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008556:	d102      	bne.n	800855e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008558:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800855c:	e0b0      	b.n	80086c0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2140      	movs	r1, #64	; 0x40
 8008564:	4618      	mov	r0, r3
 8008566:	f002 fe93 	bl	800b290 <SDMMC_CmdBlockLength>
 800856a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800856c:	6a3b      	ldr	r3, [r7, #32]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d005      	beq.n	800857e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800857a:	6a3b      	ldr	r3, [r7, #32]
 800857c:	e0a0      	b.n	80086c0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008586:	041b      	lsls	r3, r3, #16
 8008588:	4619      	mov	r1, r3
 800858a:	4610      	mov	r0, r2
 800858c:	f002 ff04 	bl	800b398 <SDMMC_CmdAppCommand>
 8008590:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008592:	6a3b      	ldr	r3, [r7, #32]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d005      	beq.n	80085a4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80085a0:	6a3b      	ldr	r3, [r7, #32]
 80085a2:	e08d      	b.n	80086c0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80085a4:	f04f 33ff 	mov.w	r3, #4294967295
 80085a8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80085aa:	2340      	movs	r3, #64	; 0x40
 80085ac:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80085ae:	2360      	movs	r3, #96	; 0x60
 80085b0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80085b2:	2302      	movs	r3, #2
 80085b4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80085b6:	2300      	movs	r3, #0
 80085b8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80085ba:	2301      	movs	r3, #1
 80085bc:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f107 0208 	add.w	r2, r7, #8
 80085c6:	4611      	mov	r1, r2
 80085c8:	4618      	mov	r0, r3
 80085ca:	f002 fe35 	bl	800b238 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4618      	mov	r0, r3
 80085d4:	f002 ffec 	bl	800b5b0 <SDMMC_CmdStatusRegister>
 80085d8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80085da:	6a3b      	ldr	r3, [r7, #32]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d02b      	beq.n	8008638 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80085e8:	6a3b      	ldr	r3, [r7, #32]
 80085ea:	e069      	b.n	80086c0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d013      	beq.n	8008622 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80085fa:	2300      	movs	r3, #0
 80085fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085fe:	e00d      	b.n	800861c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4618      	mov	r0, r3
 8008606:	f002 fda1 	bl	800b14c <SDMMC_ReadFIFO>
 800860a:	4602      	mov	r2, r0
 800860c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800860e:	601a      	str	r2, [r3, #0]
        pData++;
 8008610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008612:	3304      	adds	r3, #4
 8008614:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8008616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008618:	3301      	adds	r3, #1
 800861a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800861c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800861e:	2b07      	cmp	r3, #7
 8008620:	d9ee      	bls.n	8008600 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008622:	f7f9 fd7f 	bl	8002124 <HAL_GetTick>
 8008626:	4602      	mov	r2, r0
 8008628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862a:	1ad3      	subs	r3, r2, r3
 800862c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008630:	d102      	bne.n	8008638 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008632:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008636:	e043      	b.n	80086c0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800863e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008642:	2b00      	cmp	r3, #0
 8008644:	d0d2      	beq.n	80085ec <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800864c:	f003 0308 	and.w	r3, r3, #8
 8008650:	2b00      	cmp	r3, #0
 8008652:	d001      	beq.n	8008658 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008654:	2308      	movs	r3, #8
 8008656:	e033      	b.n	80086c0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800865e:	f003 0302 	and.w	r3, r3, #2
 8008662:	2b00      	cmp	r3, #0
 8008664:	d001      	beq.n	800866a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008666:	2302      	movs	r3, #2
 8008668:	e02a      	b.n	80086c0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008670:	f003 0320 	and.w	r3, r3, #32
 8008674:	2b00      	cmp	r3, #0
 8008676:	d017      	beq.n	80086a8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008678:	2320      	movs	r3, #32
 800867a:	e021      	b.n	80086c0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4618      	mov	r0, r3
 8008682:	f002 fd63 	bl	800b14c <SDMMC_ReadFIFO>
 8008686:	4602      	mov	r2, r0
 8008688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868a:	601a      	str	r2, [r3, #0]
    pData++;
 800868c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868e:	3304      	adds	r3, #4
 8008690:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008692:	f7f9 fd47 	bl	8002124 <HAL_GetTick>
 8008696:	4602      	mov	r2, r0
 8008698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869a:	1ad3      	subs	r3, r2, r3
 800869c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a0:	d102      	bne.n	80086a8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80086a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80086a6:	e00b      	b.n	80086c0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d1e2      	bne.n	800867c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a03      	ldr	r2, [pc, #12]	; (80086c8 <SD_SendSDStatus+0x19c>)
 80086bc:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 80086be:	2300      	movs	r3, #0
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3730      	adds	r7, #48	; 0x30
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	18000f3a 	.word	0x18000f3a

080086cc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d102      	bne.n	80086e2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80086dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80086e0:	e018      	b.n	8008714 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086ea:	041b      	lsls	r3, r3, #16
 80086ec:	4619      	mov	r1, r3
 80086ee:	4610      	mov	r0, r2
 80086f0:	f002 ff3b 	bl	800b56a <SDMMC_CmdSendStatus>
 80086f4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d001      	beq.n	8008700 <SD_SendStatus+0x34>
  {
    return errorstate;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	e009      	b.n	8008714 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2100      	movs	r1, #0
 8008706:	4618      	mov	r0, r3
 8008708:	f002 fd83 	bl	800b212 <SDMMC_GetResponse>
 800870c:	4602      	mov	r2, r0
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008712:	2300      	movs	r3, #0
}
 8008714:	4618      	mov	r0, r3
 8008716:	3710      	adds	r7, #16
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b086      	sub	sp, #24
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008724:	2300      	movs	r3, #0
 8008726:	60fb      	str	r3, [r7, #12]
 8008728:	2300      	movs	r3, #0
 800872a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2100      	movs	r1, #0
 8008732:	4618      	mov	r0, r3
 8008734:	f002 fd6d 	bl	800b212 <SDMMC_GetResponse>
 8008738:	4603      	mov	r3, r0
 800873a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800873e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008742:	d102      	bne.n	800874a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008744:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008748:	e02f      	b.n	80087aa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800874a:	f107 030c 	add.w	r3, r7, #12
 800874e:	4619      	mov	r1, r3
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 f879 	bl	8008848 <SD_FindSCR>
 8008756:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d001      	beq.n	8008762 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	e023      	b.n	80087aa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008768:	2b00      	cmp	r3, #0
 800876a:	d01c      	beq.n	80087a6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008774:	041b      	lsls	r3, r3, #16
 8008776:	4619      	mov	r1, r3
 8008778:	4610      	mov	r0, r2
 800877a:	f002 fe0d 	bl	800b398 <SDMMC_CmdAppCommand>
 800877e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d001      	beq.n	800878a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	e00f      	b.n	80087aa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	2102      	movs	r1, #2
 8008790:	4618      	mov	r0, r3
 8008792:	f002 fe44 	bl	800b41e <SDMMC_CmdBusWidth>
 8008796:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d001      	beq.n	80087a2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	e003      	b.n	80087aa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80087a2:	2300      	movs	r3, #0
 80087a4:	e001      	b.n	80087aa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80087a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3718      	adds	r7, #24
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b086      	sub	sp, #24
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80087ba:	2300      	movs	r3, #0
 80087bc:	60fb      	str	r3, [r7, #12]
 80087be:	2300      	movs	r3, #0
 80087c0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2100      	movs	r1, #0
 80087c8:	4618      	mov	r0, r3
 80087ca:	f002 fd22 	bl	800b212 <SDMMC_GetResponse>
 80087ce:	4603      	mov	r3, r0
 80087d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80087d8:	d102      	bne.n	80087e0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80087da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80087de:	e02f      	b.n	8008840 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80087e0:	f107 030c 	add.w	r3, r7, #12
 80087e4:	4619      	mov	r1, r3
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 f82e 	bl	8008848 <SD_FindSCR>
 80087ec:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d001      	beq.n	80087f8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	e023      	b.n	8008840 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d01c      	beq.n	800883c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800880a:	041b      	lsls	r3, r3, #16
 800880c:	4619      	mov	r1, r3
 800880e:	4610      	mov	r0, r2
 8008810:	f002 fdc2 	bl	800b398 <SDMMC_CmdAppCommand>
 8008814:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d001      	beq.n	8008820 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	e00f      	b.n	8008840 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2100      	movs	r1, #0
 8008826:	4618      	mov	r0, r3
 8008828:	f002 fdf9 	bl	800b41e <SDMMC_CmdBusWidth>
 800882c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d001      	beq.n	8008838 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	e003      	b.n	8008840 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008838:	2300      	movs	r3, #0
 800883a:	e001      	b.n	8008840 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800883c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008840:	4618      	mov	r0, r3
 8008842:	3718      	adds	r7, #24
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b08e      	sub	sp, #56	; 0x38
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008852:	f7f9 fc67 	bl	8002124 <HAL_GetTick>
 8008856:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008858:	2300      	movs	r3, #0
 800885a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800885c:	2300      	movs	r3, #0
 800885e:	60bb      	str	r3, [r7, #8]
 8008860:	2300      	movs	r3, #0
 8008862:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	2108      	movs	r1, #8
 800886e:	4618      	mov	r0, r3
 8008870:	f002 fd0e 	bl	800b290 <SDMMC_CmdBlockLength>
 8008874:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008878:	2b00      	cmp	r3, #0
 800887a:	d001      	beq.n	8008880 <SD_FindSCR+0x38>
  {
    return errorstate;
 800887c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887e:	e0ad      	b.n	80089dc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008888:	041b      	lsls	r3, r3, #16
 800888a:	4619      	mov	r1, r3
 800888c:	4610      	mov	r0, r2
 800888e:	f002 fd83 	bl	800b398 <SDMMC_CmdAppCommand>
 8008892:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008896:	2b00      	cmp	r3, #0
 8008898:	d001      	beq.n	800889e <SD_FindSCR+0x56>
  {
    return errorstate;
 800889a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889c:	e09e      	b.n	80089dc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800889e:	f04f 33ff 	mov.w	r3, #4294967295
 80088a2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80088a4:	2308      	movs	r3, #8
 80088a6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80088a8:	2330      	movs	r3, #48	; 0x30
 80088aa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80088ac:	2302      	movs	r3, #2
 80088ae:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80088b0:	2300      	movs	r3, #0
 80088b2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80088b4:	2301      	movs	r3, #1
 80088b6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f107 0210 	add.w	r2, r7, #16
 80088c0:	4611      	mov	r1, r2
 80088c2:	4618      	mov	r0, r3
 80088c4:	f002 fcb8 	bl	800b238 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4618      	mov	r0, r3
 80088ce:	f002 fdc9 	bl	800b464 <SDMMC_CmdSendSCR>
 80088d2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80088d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d027      	beq.n	800892a <SD_FindSCR+0xe2>
  {
    return errorstate;
 80088da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088dc:	e07e      	b.n	80089dc <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d113      	bne.n	8008914 <SD_FindSCR+0xcc>
 80088ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d110      	bne.n	8008914 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4618      	mov	r0, r3
 80088f8:	f002 fc28 	bl	800b14c <SDMMC_ReadFIFO>
 80088fc:	4603      	mov	r3, r0
 80088fe:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4618      	mov	r0, r3
 8008906:	f002 fc21 	bl	800b14c <SDMMC_ReadFIFO>
 800890a:	4603      	mov	r3, r0
 800890c:	60fb      	str	r3, [r7, #12]
      index++;
 800890e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008910:	3301      	adds	r3, #1
 8008912:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008914:	f7f9 fc06 	bl	8002124 <HAL_GetTick>
 8008918:	4602      	mov	r2, r0
 800891a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891c:	1ad3      	subs	r3, r2, r3
 800891e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008922:	d102      	bne.n	800892a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008924:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008928:	e058      	b.n	80089dc <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008930:	f240 532a 	movw	r3, #1322	; 0x52a
 8008934:	4013      	ands	r3, r2
 8008936:	2b00      	cmp	r3, #0
 8008938:	d0d1      	beq.n	80088de <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008940:	f003 0308 	and.w	r3, r3, #8
 8008944:	2b00      	cmp	r3, #0
 8008946:	d005      	beq.n	8008954 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2208      	movs	r2, #8
 800894e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008950:	2308      	movs	r3, #8
 8008952:	e043      	b.n	80089dc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800895a:	f003 0302 	and.w	r3, r3, #2
 800895e:	2b00      	cmp	r3, #0
 8008960:	d005      	beq.n	800896e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2202      	movs	r2, #2
 8008968:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800896a:	2302      	movs	r3, #2
 800896c:	e036      	b.n	80089dc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008974:	f003 0320 	and.w	r3, r3, #32
 8008978:	2b00      	cmp	r3, #0
 800897a:	d005      	beq.n	8008988 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2220      	movs	r2, #32
 8008982:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008984:	2320      	movs	r3, #32
 8008986:	e029      	b.n	80089dc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a15      	ldr	r2, [pc, #84]	; (80089e4 <SD_FindSCR+0x19c>)
 800898e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	061a      	lsls	r2, r3, #24
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	021b      	lsls	r3, r3, #8
 8008998:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800899c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	0a1b      	lsrs	r3, r3, #8
 80089a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80089a6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	0e1b      	lsrs	r3, r3, #24
 80089ac:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80089ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b0:	601a      	str	r2, [r3, #0]
    scr++;
 80089b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b4:	3304      	adds	r3, #4
 80089b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	061a      	lsls	r2, r3, #24
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	021b      	lsls	r3, r3, #8
 80089c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80089c4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	0a1b      	lsrs	r3, r3, #8
 80089ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80089ce:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	0e1b      	lsrs	r3, r3, #24
 80089d4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80089d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3738      	adds	r7, #56	; 0x38
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	18000f3a 	.word	0x18000f3a

080089e8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d101      	bne.n	80089fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80089f6:	2301      	movs	r3, #1
 80089f8:	e10f      	b.n	8008c1a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a87      	ldr	r2, [pc, #540]	; (8008c24 <HAL_SPI_Init+0x23c>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d00f      	beq.n	8008a2a <HAL_SPI_Init+0x42>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a86      	ldr	r2, [pc, #536]	; (8008c28 <HAL_SPI_Init+0x240>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d00a      	beq.n	8008a2a <HAL_SPI_Init+0x42>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a84      	ldr	r2, [pc, #528]	; (8008c2c <HAL_SPI_Init+0x244>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d005      	beq.n	8008a2a <HAL_SPI_Init+0x42>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	68db      	ldr	r3, [r3, #12]
 8008a22:	2b0f      	cmp	r3, #15
 8008a24:	d901      	bls.n	8008a2a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008a26:	2301      	movs	r3, #1
 8008a28:	e0f7      	b.n	8008c1a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 f900 	bl	8008c30 <SPI_GetPacketSize>
 8008a30:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a7b      	ldr	r2, [pc, #492]	; (8008c24 <HAL_SPI_Init+0x23c>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d00c      	beq.n	8008a56 <HAL_SPI_Init+0x6e>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a79      	ldr	r2, [pc, #484]	; (8008c28 <HAL_SPI_Init+0x240>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d007      	beq.n	8008a56 <HAL_SPI_Init+0x6e>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a78      	ldr	r2, [pc, #480]	; (8008c2c <HAL_SPI_Init+0x244>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d002      	beq.n	8008a56 <HAL_SPI_Init+0x6e>
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2b08      	cmp	r3, #8
 8008a54:	d811      	bhi.n	8008a7a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008a5a:	4a72      	ldr	r2, [pc, #456]	; (8008c24 <HAL_SPI_Init+0x23c>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d009      	beq.n	8008a74 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a70      	ldr	r2, [pc, #448]	; (8008c28 <HAL_SPI_Init+0x240>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d004      	beq.n	8008a74 <HAL_SPI_Init+0x8c>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a6f      	ldr	r2, [pc, #444]	; (8008c2c <HAL_SPI_Init+0x244>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d104      	bne.n	8008a7e <HAL_SPI_Init+0x96>
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2b10      	cmp	r3, #16
 8008a78:	d901      	bls.n	8008a7e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	e0cd      	b.n	8008c1a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d106      	bne.n	8008a98 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f7f8 ff92 	bl	80019bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2202      	movs	r2, #2
 8008a9c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f022 0201 	bic.w	r2, r2, #1
 8008aae:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008aba:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	699b      	ldr	r3, [r3, #24]
 8008ac0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ac4:	d119      	bne.n	8008afa <HAL_SPI_Init+0x112>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ace:	d103      	bne.n	8008ad8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d008      	beq.n	8008aea <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d10c      	bne.n	8008afa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008ae4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ae8:	d107      	bne.n	8008afa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008af8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d00f      	beq.n	8008b26 <HAL_SPI_Init+0x13e>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	2b06      	cmp	r3, #6
 8008b0c:	d90b      	bls.n	8008b26 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	430a      	orrs	r2, r1
 8008b22:	601a      	str	r2, [r3, #0]
 8008b24:	e007      	b.n	8008b36 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b34:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	69da      	ldr	r2, [r3, #28]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b3e:	431a      	orrs	r2, r3
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	431a      	orrs	r2, r3
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b48:	ea42 0103 	orr.w	r1, r2, r3
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	68da      	ldr	r2, [r3, #12]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	430a      	orrs	r2, r1
 8008b56:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b60:	431a      	orrs	r2, r3
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b66:	431a      	orrs	r2, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	699b      	ldr	r3, [r3, #24]
 8008b6c:	431a      	orrs	r2, r3
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	691b      	ldr	r3, [r3, #16]
 8008b72:	431a      	orrs	r2, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	695b      	ldr	r3, [r3, #20]
 8008b78:	431a      	orrs	r2, r3
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6a1b      	ldr	r3, [r3, #32]
 8008b7e:	431a      	orrs	r2, r3
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	431a      	orrs	r2, r3
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b8a:	431a      	orrs	r2, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	431a      	orrs	r2, r3
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b96:	ea42 0103 	orr.w	r1, r2, r3
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	430a      	orrs	r2, r1
 8008ba4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d113      	bne.n	8008bd6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008bc0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008bd4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f022 0201 	bic.w	r2, r2, #1
 8008be4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d00a      	beq.n	8008c08 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	430a      	orrs	r2, r1
 8008c06:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3710      	adds	r7, #16
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	40013000 	.word	0x40013000
 8008c28:	40003800 	.word	0x40003800
 8008c2c:	40003c00 	.word	0x40003c00

08008c30 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b085      	sub	sp, #20
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c3c:	095b      	lsrs	r3, r3, #5
 8008c3e:	3301      	adds	r3, #1
 8008c40:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	68db      	ldr	r3, [r3, #12]
 8008c46:	3301      	adds	r3, #1
 8008c48:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	3307      	adds	r3, #7
 8008c4e:	08db      	lsrs	r3, r3, #3
 8008c50:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	68fa      	ldr	r2, [r7, #12]
 8008c56:	fb02 f303 	mul.w	r3, r2, r3
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3714      	adds	r7, #20
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr

08008c66 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b082      	sub	sp, #8
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d101      	bne.n	8008c78 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c74:	2301      	movs	r3, #1
 8008c76:	e049      	b.n	8008d0c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d106      	bne.n	8008c92 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f7f8 ff75 	bl	8001b7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2202      	movs	r2, #2
 8008c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	3304      	adds	r3, #4
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	4610      	mov	r0, r2
 8008ca6:	f000 fb8b 	bl	80093c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2201      	movs	r2, #1
 8008cae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2201      	movs	r2, #1
 8008cde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2201      	movs	r2, #1
 8008cee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2201      	movs	r2, #1
 8008d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d0a:	2300      	movs	r3, #0
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3708      	adds	r7, #8
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d101      	bne.n	8008d26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008d22:	2301      	movs	r3, #1
 8008d24:	e049      	b.n	8008dba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d2c:	b2db      	uxtb	r3, r3
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d106      	bne.n	8008d40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f7f8 ff40 	bl	8001bc0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2202      	movs	r2, #2
 8008d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	3304      	adds	r3, #4
 8008d50:	4619      	mov	r1, r3
 8008d52:	4610      	mov	r0, r2
 8008d54:	f000 fb34 	bl	80093c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2201      	movs	r2, #1
 8008d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2201      	movs	r2, #1
 8008d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2201      	movs	r2, #1
 8008da4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3708      	adds	r7, #8
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}

08008dc2 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b082      	sub	sp, #8
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d101      	bne.n	8008dd4 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e049      	b.n	8008e68 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d106      	bne.n	8008dee <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2200      	movs	r2, #0
 8008de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f7f8 ff21 	bl	8001c30 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2202      	movs	r2, #2
 8008df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	3304      	adds	r3, #4
 8008dfe:	4619      	mov	r1, r3
 8008e00:	4610      	mov	r0, r2
 8008e02:	f000 fadd 	bl	80093c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2201      	movs	r2, #1
 8008e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2201      	movs	r2, #1
 8008e1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2201      	movs	r2, #1
 8008e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2201      	movs	r2, #1
 8008e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2201      	movs	r2, #1
 8008e32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2201      	movs	r2, #1
 8008e42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2201      	movs	r2, #1
 8008e4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2201      	movs	r2, #1
 8008e52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2201      	movs	r2, #1
 8008e5a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2201      	movs	r2, #1
 8008e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e66:	2300      	movs	r3, #0
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3708      	adds	r7, #8
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b086      	sub	sp, #24
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d101      	bne.n	8008e8e <HAL_TIM_IC_ConfigChannel+0x1e>
 8008e8a:	2302      	movs	r3, #2
 8008e8c:	e088      	b.n	8008fa0 <HAL_TIM_IC_ConfigChannel+0x130>
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2201      	movs	r2, #1
 8008e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d11b      	bne.n	8008ed4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008eac:	f000 fdf8 	bl	8009aa0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	699a      	ldr	r2, [r3, #24]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f022 020c 	bic.w	r2, r2, #12
 8008ebe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	6999      	ldr	r1, [r3, #24]
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	689a      	ldr	r2, [r3, #8]
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	430a      	orrs	r2, r1
 8008ed0:	619a      	str	r2, [r3, #24]
 8008ed2:	e060      	b.n	8008f96 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2b04      	cmp	r3, #4
 8008ed8:	d11c      	bne.n	8008f14 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8008eea:	f000 fe7c 	bl	8009be6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	699a      	ldr	r2, [r3, #24]
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008efc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	6999      	ldr	r1, [r3, #24]
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	021a      	lsls	r2, r3, #8
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	430a      	orrs	r2, r1
 8008f10:	619a      	str	r2, [r3, #24]
 8008f12:	e040      	b.n	8008f96 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2b08      	cmp	r3, #8
 8008f18:	d11b      	bne.n	8008f52 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8008f2a:	f000 fec9 	bl	8009cc0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	69da      	ldr	r2, [r3, #28]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f022 020c 	bic.w	r2, r2, #12
 8008f3c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	69d9      	ldr	r1, [r3, #28]
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	689a      	ldr	r2, [r3, #8]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	430a      	orrs	r2, r1
 8008f4e:	61da      	str	r2, [r3, #28]
 8008f50:	e021      	b.n	8008f96 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2b0c      	cmp	r3, #12
 8008f56:	d11c      	bne.n	8008f92 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008f68:	f000 fee6 	bl	8009d38 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	69da      	ldr	r2, [r3, #28]
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008f7a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	69d9      	ldr	r1, [r3, #28]
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	689b      	ldr	r3, [r3, #8]
 8008f86:	021a      	lsls	r2, r3, #8
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	430a      	orrs	r2, r1
 8008f8e:	61da      	str	r2, [r3, #28]
 8008f90:	e001      	b.n	8008f96 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008f9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3718      	adds	r7, #24
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b086      	sub	sp, #24
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	60f8      	str	r0, [r7, #12]
 8008fb0:	60b9      	str	r1, [r7, #8]
 8008fb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d101      	bne.n	8008fc6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008fc2:	2302      	movs	r3, #2
 8008fc4:	e0ff      	b.n	80091c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2201      	movs	r2, #1
 8008fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2b14      	cmp	r3, #20
 8008fd2:	f200 80f0 	bhi.w	80091b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008fd6:	a201      	add	r2, pc, #4	; (adr r2, 8008fdc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fdc:	08009031 	.word	0x08009031
 8008fe0:	080091b7 	.word	0x080091b7
 8008fe4:	080091b7 	.word	0x080091b7
 8008fe8:	080091b7 	.word	0x080091b7
 8008fec:	08009071 	.word	0x08009071
 8008ff0:	080091b7 	.word	0x080091b7
 8008ff4:	080091b7 	.word	0x080091b7
 8008ff8:	080091b7 	.word	0x080091b7
 8008ffc:	080090b3 	.word	0x080090b3
 8009000:	080091b7 	.word	0x080091b7
 8009004:	080091b7 	.word	0x080091b7
 8009008:	080091b7 	.word	0x080091b7
 800900c:	080090f3 	.word	0x080090f3
 8009010:	080091b7 	.word	0x080091b7
 8009014:	080091b7 	.word	0x080091b7
 8009018:	080091b7 	.word	0x080091b7
 800901c:	08009135 	.word	0x08009135
 8009020:	080091b7 	.word	0x080091b7
 8009024:	080091b7 	.word	0x080091b7
 8009028:	080091b7 	.word	0x080091b7
 800902c:	08009175 	.word	0x08009175
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	68b9      	ldr	r1, [r7, #8]
 8009036:	4618      	mov	r0, r3
 8009038:	f000 fa5c 	bl	80094f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	699a      	ldr	r2, [r3, #24]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f042 0208 	orr.w	r2, r2, #8
 800904a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	699a      	ldr	r2, [r3, #24]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f022 0204 	bic.w	r2, r2, #4
 800905a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	6999      	ldr	r1, [r3, #24]
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	691a      	ldr	r2, [r3, #16]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	430a      	orrs	r2, r1
 800906c:	619a      	str	r2, [r3, #24]
      break;
 800906e:	e0a5      	b.n	80091bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	68b9      	ldr	r1, [r7, #8]
 8009076:	4618      	mov	r0, r3
 8009078:	f000 facc 	bl	8009614 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	699a      	ldr	r2, [r3, #24]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800908a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	699a      	ldr	r2, [r3, #24]
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800909a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	6999      	ldr	r1, [r3, #24]
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	691b      	ldr	r3, [r3, #16]
 80090a6:	021a      	lsls	r2, r3, #8
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	430a      	orrs	r2, r1
 80090ae:	619a      	str	r2, [r3, #24]
      break;
 80090b0:	e084      	b.n	80091bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	68b9      	ldr	r1, [r7, #8]
 80090b8:	4618      	mov	r0, r3
 80090ba:	f000 fb35 	bl	8009728 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	69da      	ldr	r2, [r3, #28]
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f042 0208 	orr.w	r2, r2, #8
 80090cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	69da      	ldr	r2, [r3, #28]
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f022 0204 	bic.w	r2, r2, #4
 80090dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	69d9      	ldr	r1, [r3, #28]
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	691a      	ldr	r2, [r3, #16]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	430a      	orrs	r2, r1
 80090ee:	61da      	str	r2, [r3, #28]
      break;
 80090f0:	e064      	b.n	80091bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	68b9      	ldr	r1, [r7, #8]
 80090f8:	4618      	mov	r0, r3
 80090fa:	f000 fb9d 	bl	8009838 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	69da      	ldr	r2, [r3, #28]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800910c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	69da      	ldr	r2, [r3, #28]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800911c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	69d9      	ldr	r1, [r3, #28]
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	691b      	ldr	r3, [r3, #16]
 8009128:	021a      	lsls	r2, r3, #8
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	430a      	orrs	r2, r1
 8009130:	61da      	str	r2, [r3, #28]
      break;
 8009132:	e043      	b.n	80091bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	68b9      	ldr	r1, [r7, #8]
 800913a:	4618      	mov	r0, r3
 800913c:	f000 fbe6 	bl	800990c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f042 0208 	orr.w	r2, r2, #8
 800914e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f022 0204 	bic.w	r2, r2, #4
 800915e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	691a      	ldr	r2, [r3, #16]
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	430a      	orrs	r2, r1
 8009170:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009172:	e023      	b.n	80091bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	68b9      	ldr	r1, [r7, #8]
 800917a:	4618      	mov	r0, r3
 800917c:	f000 fc2a 	bl	80099d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800918e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800919e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	691b      	ldr	r3, [r3, #16]
 80091aa:	021a      	lsls	r2, r3, #8
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	430a      	orrs	r2, r1
 80091b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80091b4:	e002      	b.n	80091bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80091b6:	2301      	movs	r3, #1
 80091b8:	75fb      	strb	r3, [r7, #23]
      break;
 80091ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2200      	movs	r2, #0
 80091c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80091c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3718      	adds	r7, #24
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop

080091d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80091da:	2300      	movs	r3, #0
 80091dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d101      	bne.n	80091ec <HAL_TIM_ConfigClockSource+0x1c>
 80091e8:	2302      	movs	r3, #2
 80091ea:	e0dc      	b.n	80093a6 <HAL_TIM_ConfigClockSource+0x1d6>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2201      	movs	r2, #1
 80091f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2202      	movs	r2, #2
 80091f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009204:	68ba      	ldr	r2, [r7, #8]
 8009206:	4b6a      	ldr	r3, [pc, #424]	; (80093b0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009208:	4013      	ands	r3, r2
 800920a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009212:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	68ba      	ldr	r2, [r7, #8]
 800921a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a64      	ldr	r2, [pc, #400]	; (80093b4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009222:	4293      	cmp	r3, r2
 8009224:	f000 80a9 	beq.w	800937a <HAL_TIM_ConfigClockSource+0x1aa>
 8009228:	4a62      	ldr	r2, [pc, #392]	; (80093b4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800922a:	4293      	cmp	r3, r2
 800922c:	f200 80ae 	bhi.w	800938c <HAL_TIM_ConfigClockSource+0x1bc>
 8009230:	4a61      	ldr	r2, [pc, #388]	; (80093b8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009232:	4293      	cmp	r3, r2
 8009234:	f000 80a1 	beq.w	800937a <HAL_TIM_ConfigClockSource+0x1aa>
 8009238:	4a5f      	ldr	r2, [pc, #380]	; (80093b8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800923a:	4293      	cmp	r3, r2
 800923c:	f200 80a6 	bhi.w	800938c <HAL_TIM_ConfigClockSource+0x1bc>
 8009240:	4a5e      	ldr	r2, [pc, #376]	; (80093bc <HAL_TIM_ConfigClockSource+0x1ec>)
 8009242:	4293      	cmp	r3, r2
 8009244:	f000 8099 	beq.w	800937a <HAL_TIM_ConfigClockSource+0x1aa>
 8009248:	4a5c      	ldr	r2, [pc, #368]	; (80093bc <HAL_TIM_ConfigClockSource+0x1ec>)
 800924a:	4293      	cmp	r3, r2
 800924c:	f200 809e 	bhi.w	800938c <HAL_TIM_ConfigClockSource+0x1bc>
 8009250:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009254:	f000 8091 	beq.w	800937a <HAL_TIM_ConfigClockSource+0x1aa>
 8009258:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800925c:	f200 8096 	bhi.w	800938c <HAL_TIM_ConfigClockSource+0x1bc>
 8009260:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009264:	f000 8089 	beq.w	800937a <HAL_TIM_ConfigClockSource+0x1aa>
 8009268:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800926c:	f200 808e 	bhi.w	800938c <HAL_TIM_ConfigClockSource+0x1bc>
 8009270:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009274:	d03e      	beq.n	80092f4 <HAL_TIM_ConfigClockSource+0x124>
 8009276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800927a:	f200 8087 	bhi.w	800938c <HAL_TIM_ConfigClockSource+0x1bc>
 800927e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009282:	f000 8086 	beq.w	8009392 <HAL_TIM_ConfigClockSource+0x1c2>
 8009286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800928a:	d87f      	bhi.n	800938c <HAL_TIM_ConfigClockSource+0x1bc>
 800928c:	2b70      	cmp	r3, #112	; 0x70
 800928e:	d01a      	beq.n	80092c6 <HAL_TIM_ConfigClockSource+0xf6>
 8009290:	2b70      	cmp	r3, #112	; 0x70
 8009292:	d87b      	bhi.n	800938c <HAL_TIM_ConfigClockSource+0x1bc>
 8009294:	2b60      	cmp	r3, #96	; 0x60
 8009296:	d050      	beq.n	800933a <HAL_TIM_ConfigClockSource+0x16a>
 8009298:	2b60      	cmp	r3, #96	; 0x60
 800929a:	d877      	bhi.n	800938c <HAL_TIM_ConfigClockSource+0x1bc>
 800929c:	2b50      	cmp	r3, #80	; 0x50
 800929e:	d03c      	beq.n	800931a <HAL_TIM_ConfigClockSource+0x14a>
 80092a0:	2b50      	cmp	r3, #80	; 0x50
 80092a2:	d873      	bhi.n	800938c <HAL_TIM_ConfigClockSource+0x1bc>
 80092a4:	2b40      	cmp	r3, #64	; 0x40
 80092a6:	d058      	beq.n	800935a <HAL_TIM_ConfigClockSource+0x18a>
 80092a8:	2b40      	cmp	r3, #64	; 0x40
 80092aa:	d86f      	bhi.n	800938c <HAL_TIM_ConfigClockSource+0x1bc>
 80092ac:	2b30      	cmp	r3, #48	; 0x30
 80092ae:	d064      	beq.n	800937a <HAL_TIM_ConfigClockSource+0x1aa>
 80092b0:	2b30      	cmp	r3, #48	; 0x30
 80092b2:	d86b      	bhi.n	800938c <HAL_TIM_ConfigClockSource+0x1bc>
 80092b4:	2b20      	cmp	r3, #32
 80092b6:	d060      	beq.n	800937a <HAL_TIM_ConfigClockSource+0x1aa>
 80092b8:	2b20      	cmp	r3, #32
 80092ba:	d867      	bhi.n	800938c <HAL_TIM_ConfigClockSource+0x1bc>
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d05c      	beq.n	800937a <HAL_TIM_ConfigClockSource+0x1aa>
 80092c0:	2b10      	cmp	r3, #16
 80092c2:	d05a      	beq.n	800937a <HAL_TIM_ConfigClockSource+0x1aa>
 80092c4:	e062      	b.n	800938c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80092d6:	f000 fd8b 	bl	8009df0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	689b      	ldr	r3, [r3, #8]
 80092e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80092e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	68ba      	ldr	r2, [r7, #8]
 80092f0:	609a      	str	r2, [r3, #8]
      break;
 80092f2:	e04f      	b.n	8009394 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009304:	f000 fd74 	bl	8009df0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	689a      	ldr	r2, [r3, #8]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009316:	609a      	str	r2, [r3, #8]
      break;
 8009318:	e03c      	b.n	8009394 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009326:	461a      	mov	r2, r3
 8009328:	f000 fc2e 	bl	8009b88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	2150      	movs	r1, #80	; 0x50
 8009332:	4618      	mov	r0, r3
 8009334:	f000 fd3e 	bl	8009db4 <TIM_ITRx_SetConfig>
      break;
 8009338:	e02c      	b.n	8009394 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009346:	461a      	mov	r2, r3
 8009348:	f000 fc8a 	bl	8009c60 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	2160      	movs	r1, #96	; 0x60
 8009352:	4618      	mov	r0, r3
 8009354:	f000 fd2e 	bl	8009db4 <TIM_ITRx_SetConfig>
      break;
 8009358:	e01c      	b.n	8009394 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009366:	461a      	mov	r2, r3
 8009368:	f000 fc0e 	bl	8009b88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	2140      	movs	r1, #64	; 0x40
 8009372:	4618      	mov	r0, r3
 8009374:	f000 fd1e 	bl	8009db4 <TIM_ITRx_SetConfig>
      break;
 8009378:	e00c      	b.n	8009394 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	4619      	mov	r1, r3
 8009384:	4610      	mov	r0, r2
 8009386:	f000 fd15 	bl	8009db4 <TIM_ITRx_SetConfig>
      break;
 800938a:	e003      	b.n	8009394 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	73fb      	strb	r3, [r7, #15]
      break;
 8009390:	e000      	b.n	8009394 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009392:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2201      	movs	r2, #1
 8009398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2200      	movs	r2, #0
 80093a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80093a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3710      	adds	r7, #16
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	ffceff88 	.word	0xffceff88
 80093b4:	00100040 	.word	0x00100040
 80093b8:	00100030 	.word	0x00100030
 80093bc:	00100020 	.word	0x00100020

080093c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b085      	sub	sp, #20
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	4a40      	ldr	r2, [pc, #256]	; (80094d4 <TIM_Base_SetConfig+0x114>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d013      	beq.n	8009400 <TIM_Base_SetConfig+0x40>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093de:	d00f      	beq.n	8009400 <TIM_Base_SetConfig+0x40>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	4a3d      	ldr	r2, [pc, #244]	; (80094d8 <TIM_Base_SetConfig+0x118>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d00b      	beq.n	8009400 <TIM_Base_SetConfig+0x40>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	4a3c      	ldr	r2, [pc, #240]	; (80094dc <TIM_Base_SetConfig+0x11c>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d007      	beq.n	8009400 <TIM_Base_SetConfig+0x40>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	4a3b      	ldr	r2, [pc, #236]	; (80094e0 <TIM_Base_SetConfig+0x120>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d003      	beq.n	8009400 <TIM_Base_SetConfig+0x40>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	4a3a      	ldr	r2, [pc, #232]	; (80094e4 <TIM_Base_SetConfig+0x124>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d108      	bne.n	8009412 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009406:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	68fa      	ldr	r2, [r7, #12]
 800940e:	4313      	orrs	r3, r2
 8009410:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4a2f      	ldr	r2, [pc, #188]	; (80094d4 <TIM_Base_SetConfig+0x114>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d01f      	beq.n	800945a <TIM_Base_SetConfig+0x9a>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009420:	d01b      	beq.n	800945a <TIM_Base_SetConfig+0x9a>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4a2c      	ldr	r2, [pc, #176]	; (80094d8 <TIM_Base_SetConfig+0x118>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d017      	beq.n	800945a <TIM_Base_SetConfig+0x9a>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	4a2b      	ldr	r2, [pc, #172]	; (80094dc <TIM_Base_SetConfig+0x11c>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d013      	beq.n	800945a <TIM_Base_SetConfig+0x9a>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	4a2a      	ldr	r2, [pc, #168]	; (80094e0 <TIM_Base_SetConfig+0x120>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d00f      	beq.n	800945a <TIM_Base_SetConfig+0x9a>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4a29      	ldr	r2, [pc, #164]	; (80094e4 <TIM_Base_SetConfig+0x124>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d00b      	beq.n	800945a <TIM_Base_SetConfig+0x9a>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4a28      	ldr	r2, [pc, #160]	; (80094e8 <TIM_Base_SetConfig+0x128>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d007      	beq.n	800945a <TIM_Base_SetConfig+0x9a>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4a27      	ldr	r2, [pc, #156]	; (80094ec <TIM_Base_SetConfig+0x12c>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d003      	beq.n	800945a <TIM_Base_SetConfig+0x9a>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	4a26      	ldr	r2, [pc, #152]	; (80094f0 <TIM_Base_SetConfig+0x130>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d108      	bne.n	800946c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009460:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	68db      	ldr	r3, [r3, #12]
 8009466:	68fa      	ldr	r2, [r7, #12]
 8009468:	4313      	orrs	r3, r2
 800946a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	695b      	ldr	r3, [r3, #20]
 8009476:	4313      	orrs	r3, r2
 8009478:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	68fa      	ldr	r2, [r7, #12]
 800947e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	689a      	ldr	r2, [r3, #8]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	4a10      	ldr	r2, [pc, #64]	; (80094d4 <TIM_Base_SetConfig+0x114>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d00f      	beq.n	80094b8 <TIM_Base_SetConfig+0xf8>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	4a12      	ldr	r2, [pc, #72]	; (80094e4 <TIM_Base_SetConfig+0x124>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d00b      	beq.n	80094b8 <TIM_Base_SetConfig+0xf8>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	4a11      	ldr	r2, [pc, #68]	; (80094e8 <TIM_Base_SetConfig+0x128>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d007      	beq.n	80094b8 <TIM_Base_SetConfig+0xf8>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	4a10      	ldr	r2, [pc, #64]	; (80094ec <TIM_Base_SetConfig+0x12c>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d003      	beq.n	80094b8 <TIM_Base_SetConfig+0xf8>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	4a0f      	ldr	r2, [pc, #60]	; (80094f0 <TIM_Base_SetConfig+0x130>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d103      	bne.n	80094c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	691a      	ldr	r2, [r3, #16]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2201      	movs	r2, #1
 80094c4:	615a      	str	r2, [r3, #20]
}
 80094c6:	bf00      	nop
 80094c8:	3714      	adds	r7, #20
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr
 80094d2:	bf00      	nop
 80094d4:	40010000 	.word	0x40010000
 80094d8:	40000400 	.word	0x40000400
 80094dc:	40000800 	.word	0x40000800
 80094e0:	40000c00 	.word	0x40000c00
 80094e4:	40010400 	.word	0x40010400
 80094e8:	40014000 	.word	0x40014000
 80094ec:	40014400 	.word	0x40014400
 80094f0:	40014800 	.word	0x40014800

080094f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b087      	sub	sp, #28
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6a1b      	ldr	r3, [r3, #32]
 8009502:	f023 0201 	bic.w	r2, r3, #1
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6a1b      	ldr	r3, [r3, #32]
 800950e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	699b      	ldr	r3, [r3, #24]
 800951a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800951c:	68fa      	ldr	r2, [r7, #12]
 800951e:	4b37      	ldr	r3, [pc, #220]	; (80095fc <TIM_OC1_SetConfig+0x108>)
 8009520:	4013      	ands	r3, r2
 8009522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f023 0303 	bic.w	r3, r3, #3
 800952a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	68fa      	ldr	r2, [r7, #12]
 8009532:	4313      	orrs	r3, r2
 8009534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	f023 0302 	bic.w	r3, r3, #2
 800953c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	697a      	ldr	r2, [r7, #20]
 8009544:	4313      	orrs	r3, r2
 8009546:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	4a2d      	ldr	r2, [pc, #180]	; (8009600 <TIM_OC1_SetConfig+0x10c>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d00f      	beq.n	8009570 <TIM_OC1_SetConfig+0x7c>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	4a2c      	ldr	r2, [pc, #176]	; (8009604 <TIM_OC1_SetConfig+0x110>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d00b      	beq.n	8009570 <TIM_OC1_SetConfig+0x7c>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	4a2b      	ldr	r2, [pc, #172]	; (8009608 <TIM_OC1_SetConfig+0x114>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d007      	beq.n	8009570 <TIM_OC1_SetConfig+0x7c>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	4a2a      	ldr	r2, [pc, #168]	; (800960c <TIM_OC1_SetConfig+0x118>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d003      	beq.n	8009570 <TIM_OC1_SetConfig+0x7c>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	4a29      	ldr	r2, [pc, #164]	; (8009610 <TIM_OC1_SetConfig+0x11c>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d10c      	bne.n	800958a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	f023 0308 	bic.w	r3, r3, #8
 8009576:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	68db      	ldr	r3, [r3, #12]
 800957c:	697a      	ldr	r2, [r7, #20]
 800957e:	4313      	orrs	r3, r2
 8009580:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	f023 0304 	bic.w	r3, r3, #4
 8009588:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4a1c      	ldr	r2, [pc, #112]	; (8009600 <TIM_OC1_SetConfig+0x10c>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d00f      	beq.n	80095b2 <TIM_OC1_SetConfig+0xbe>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	4a1b      	ldr	r2, [pc, #108]	; (8009604 <TIM_OC1_SetConfig+0x110>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d00b      	beq.n	80095b2 <TIM_OC1_SetConfig+0xbe>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	4a1a      	ldr	r2, [pc, #104]	; (8009608 <TIM_OC1_SetConfig+0x114>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d007      	beq.n	80095b2 <TIM_OC1_SetConfig+0xbe>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4a19      	ldr	r2, [pc, #100]	; (800960c <TIM_OC1_SetConfig+0x118>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d003      	beq.n	80095b2 <TIM_OC1_SetConfig+0xbe>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4a18      	ldr	r2, [pc, #96]	; (8009610 <TIM_OC1_SetConfig+0x11c>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d111      	bne.n	80095d6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80095c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	695b      	ldr	r3, [r3, #20]
 80095c6:	693a      	ldr	r2, [r7, #16]
 80095c8:	4313      	orrs	r3, r2
 80095ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	699b      	ldr	r3, [r3, #24]
 80095d0:	693a      	ldr	r2, [r7, #16]
 80095d2:	4313      	orrs	r3, r2
 80095d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	693a      	ldr	r2, [r7, #16]
 80095da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	68fa      	ldr	r2, [r7, #12]
 80095e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	685a      	ldr	r2, [r3, #4]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	697a      	ldr	r2, [r7, #20]
 80095ee:	621a      	str	r2, [r3, #32]
}
 80095f0:	bf00      	nop
 80095f2:	371c      	adds	r7, #28
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr
 80095fc:	fffeff8f 	.word	0xfffeff8f
 8009600:	40010000 	.word	0x40010000
 8009604:	40010400 	.word	0x40010400
 8009608:	40014000 	.word	0x40014000
 800960c:	40014400 	.word	0x40014400
 8009610:	40014800 	.word	0x40014800

08009614 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009614:	b480      	push	{r7}
 8009616:	b087      	sub	sp, #28
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6a1b      	ldr	r3, [r3, #32]
 8009622:	f023 0210 	bic.w	r2, r3, #16
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6a1b      	ldr	r3, [r3, #32]
 800962e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	685b      	ldr	r3, [r3, #4]
 8009634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	699b      	ldr	r3, [r3, #24]
 800963a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800963c:	68fa      	ldr	r2, [r7, #12]
 800963e:	4b34      	ldr	r3, [pc, #208]	; (8009710 <TIM_OC2_SetConfig+0xfc>)
 8009640:	4013      	ands	r3, r2
 8009642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800964a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	021b      	lsls	r3, r3, #8
 8009652:	68fa      	ldr	r2, [r7, #12]
 8009654:	4313      	orrs	r3, r2
 8009656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	f023 0320 	bic.w	r3, r3, #32
 800965e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	011b      	lsls	r3, r3, #4
 8009666:	697a      	ldr	r2, [r7, #20]
 8009668:	4313      	orrs	r3, r2
 800966a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	4a29      	ldr	r2, [pc, #164]	; (8009714 <TIM_OC2_SetConfig+0x100>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d003      	beq.n	800967c <TIM_OC2_SetConfig+0x68>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	4a28      	ldr	r2, [pc, #160]	; (8009718 <TIM_OC2_SetConfig+0x104>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d10d      	bne.n	8009698 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009682:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	68db      	ldr	r3, [r3, #12]
 8009688:	011b      	lsls	r3, r3, #4
 800968a:	697a      	ldr	r2, [r7, #20]
 800968c:	4313      	orrs	r3, r2
 800968e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009696:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4a1e      	ldr	r2, [pc, #120]	; (8009714 <TIM_OC2_SetConfig+0x100>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d00f      	beq.n	80096c0 <TIM_OC2_SetConfig+0xac>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	4a1d      	ldr	r2, [pc, #116]	; (8009718 <TIM_OC2_SetConfig+0x104>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d00b      	beq.n	80096c0 <TIM_OC2_SetConfig+0xac>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	4a1c      	ldr	r2, [pc, #112]	; (800971c <TIM_OC2_SetConfig+0x108>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d007      	beq.n	80096c0 <TIM_OC2_SetConfig+0xac>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	4a1b      	ldr	r2, [pc, #108]	; (8009720 <TIM_OC2_SetConfig+0x10c>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d003      	beq.n	80096c0 <TIM_OC2_SetConfig+0xac>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	4a1a      	ldr	r2, [pc, #104]	; (8009724 <TIM_OC2_SetConfig+0x110>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d113      	bne.n	80096e8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80096c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80096ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	695b      	ldr	r3, [r3, #20]
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	693a      	ldr	r2, [r7, #16]
 80096d8:	4313      	orrs	r3, r2
 80096da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	699b      	ldr	r3, [r3, #24]
 80096e0:	009b      	lsls	r3, r3, #2
 80096e2:	693a      	ldr	r2, [r7, #16]
 80096e4:	4313      	orrs	r3, r2
 80096e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	693a      	ldr	r2, [r7, #16]
 80096ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	68fa      	ldr	r2, [r7, #12]
 80096f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	685a      	ldr	r2, [r3, #4]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	697a      	ldr	r2, [r7, #20]
 8009700:	621a      	str	r2, [r3, #32]
}
 8009702:	bf00      	nop
 8009704:	371c      	adds	r7, #28
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr
 800970e:	bf00      	nop
 8009710:	feff8fff 	.word	0xfeff8fff
 8009714:	40010000 	.word	0x40010000
 8009718:	40010400 	.word	0x40010400
 800971c:	40014000 	.word	0x40014000
 8009720:	40014400 	.word	0x40014400
 8009724:	40014800 	.word	0x40014800

08009728 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009728:	b480      	push	{r7}
 800972a:	b087      	sub	sp, #28
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6a1b      	ldr	r3, [r3, #32]
 8009736:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6a1b      	ldr	r3, [r3, #32]
 8009742:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	69db      	ldr	r3, [r3, #28]
 800974e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009750:	68fa      	ldr	r2, [r7, #12]
 8009752:	4b33      	ldr	r3, [pc, #204]	; (8009820 <TIM_OC3_SetConfig+0xf8>)
 8009754:	4013      	ands	r3, r2
 8009756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f023 0303 	bic.w	r3, r3, #3
 800975e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	68fa      	ldr	r2, [r7, #12]
 8009766:	4313      	orrs	r3, r2
 8009768:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009770:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	689b      	ldr	r3, [r3, #8]
 8009776:	021b      	lsls	r3, r3, #8
 8009778:	697a      	ldr	r2, [r7, #20]
 800977a:	4313      	orrs	r3, r2
 800977c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	4a28      	ldr	r2, [pc, #160]	; (8009824 <TIM_OC3_SetConfig+0xfc>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d003      	beq.n	800978e <TIM_OC3_SetConfig+0x66>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	4a27      	ldr	r2, [pc, #156]	; (8009828 <TIM_OC3_SetConfig+0x100>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d10d      	bne.n	80097aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009794:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	021b      	lsls	r3, r3, #8
 800979c:	697a      	ldr	r2, [r7, #20]
 800979e:	4313      	orrs	r3, r2
 80097a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80097a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	4a1d      	ldr	r2, [pc, #116]	; (8009824 <TIM_OC3_SetConfig+0xfc>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d00f      	beq.n	80097d2 <TIM_OC3_SetConfig+0xaa>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	4a1c      	ldr	r2, [pc, #112]	; (8009828 <TIM_OC3_SetConfig+0x100>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d00b      	beq.n	80097d2 <TIM_OC3_SetConfig+0xaa>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	4a1b      	ldr	r2, [pc, #108]	; (800982c <TIM_OC3_SetConfig+0x104>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d007      	beq.n	80097d2 <TIM_OC3_SetConfig+0xaa>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	4a1a      	ldr	r2, [pc, #104]	; (8009830 <TIM_OC3_SetConfig+0x108>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d003      	beq.n	80097d2 <TIM_OC3_SetConfig+0xaa>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4a19      	ldr	r2, [pc, #100]	; (8009834 <TIM_OC3_SetConfig+0x10c>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d113      	bne.n	80097fa <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80097d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80097e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	695b      	ldr	r3, [r3, #20]
 80097e6:	011b      	lsls	r3, r3, #4
 80097e8:	693a      	ldr	r2, [r7, #16]
 80097ea:	4313      	orrs	r3, r2
 80097ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	699b      	ldr	r3, [r3, #24]
 80097f2:	011b      	lsls	r3, r3, #4
 80097f4:	693a      	ldr	r2, [r7, #16]
 80097f6:	4313      	orrs	r3, r2
 80097f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	693a      	ldr	r2, [r7, #16]
 80097fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	68fa      	ldr	r2, [r7, #12]
 8009804:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	685a      	ldr	r2, [r3, #4]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	697a      	ldr	r2, [r7, #20]
 8009812:	621a      	str	r2, [r3, #32]
}
 8009814:	bf00      	nop
 8009816:	371c      	adds	r7, #28
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr
 8009820:	fffeff8f 	.word	0xfffeff8f
 8009824:	40010000 	.word	0x40010000
 8009828:	40010400 	.word	0x40010400
 800982c:	40014000 	.word	0x40014000
 8009830:	40014400 	.word	0x40014400
 8009834:	40014800 	.word	0x40014800

08009838 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009838:	b480      	push	{r7}
 800983a:	b087      	sub	sp, #28
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6a1b      	ldr	r3, [r3, #32]
 8009846:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6a1b      	ldr	r3, [r3, #32]
 8009852:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	69db      	ldr	r3, [r3, #28]
 800985e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009860:	68fa      	ldr	r2, [r7, #12]
 8009862:	4b24      	ldr	r3, [pc, #144]	; (80098f4 <TIM_OC4_SetConfig+0xbc>)
 8009864:	4013      	ands	r3, r2
 8009866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800986e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	021b      	lsls	r3, r3, #8
 8009876:	68fa      	ldr	r2, [r7, #12]
 8009878:	4313      	orrs	r3, r2
 800987a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009882:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	689b      	ldr	r3, [r3, #8]
 8009888:	031b      	lsls	r3, r3, #12
 800988a:	693a      	ldr	r2, [r7, #16]
 800988c:	4313      	orrs	r3, r2
 800988e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4a19      	ldr	r2, [pc, #100]	; (80098f8 <TIM_OC4_SetConfig+0xc0>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d00f      	beq.n	80098b8 <TIM_OC4_SetConfig+0x80>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4a18      	ldr	r2, [pc, #96]	; (80098fc <TIM_OC4_SetConfig+0xc4>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d00b      	beq.n	80098b8 <TIM_OC4_SetConfig+0x80>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4a17      	ldr	r2, [pc, #92]	; (8009900 <TIM_OC4_SetConfig+0xc8>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d007      	beq.n	80098b8 <TIM_OC4_SetConfig+0x80>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	4a16      	ldr	r2, [pc, #88]	; (8009904 <TIM_OC4_SetConfig+0xcc>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d003      	beq.n	80098b8 <TIM_OC4_SetConfig+0x80>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	4a15      	ldr	r2, [pc, #84]	; (8009908 <TIM_OC4_SetConfig+0xd0>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d109      	bne.n	80098cc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80098be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	695b      	ldr	r3, [r3, #20]
 80098c4:	019b      	lsls	r3, r3, #6
 80098c6:	697a      	ldr	r2, [r7, #20]
 80098c8:	4313      	orrs	r3, r2
 80098ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	697a      	ldr	r2, [r7, #20]
 80098d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	68fa      	ldr	r2, [r7, #12]
 80098d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	685a      	ldr	r2, [r3, #4]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	693a      	ldr	r2, [r7, #16]
 80098e4:	621a      	str	r2, [r3, #32]
}
 80098e6:	bf00      	nop
 80098e8:	371c      	adds	r7, #28
 80098ea:	46bd      	mov	sp, r7
 80098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f0:	4770      	bx	lr
 80098f2:	bf00      	nop
 80098f4:	feff8fff 	.word	0xfeff8fff
 80098f8:	40010000 	.word	0x40010000
 80098fc:	40010400 	.word	0x40010400
 8009900:	40014000 	.word	0x40014000
 8009904:	40014400 	.word	0x40014400
 8009908:	40014800 	.word	0x40014800

0800990c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800990c:	b480      	push	{r7}
 800990e:	b087      	sub	sp, #28
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6a1b      	ldr	r3, [r3, #32]
 800991a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6a1b      	ldr	r3, [r3, #32]
 8009926:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009934:	68fa      	ldr	r2, [r7, #12]
 8009936:	4b21      	ldr	r3, [pc, #132]	; (80099bc <TIM_OC5_SetConfig+0xb0>)
 8009938:	4013      	ands	r3, r2
 800993a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	68fa      	ldr	r2, [r7, #12]
 8009942:	4313      	orrs	r3, r2
 8009944:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800994c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	689b      	ldr	r3, [r3, #8]
 8009952:	041b      	lsls	r3, r3, #16
 8009954:	693a      	ldr	r2, [r7, #16]
 8009956:	4313      	orrs	r3, r2
 8009958:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	4a18      	ldr	r2, [pc, #96]	; (80099c0 <TIM_OC5_SetConfig+0xb4>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d00f      	beq.n	8009982 <TIM_OC5_SetConfig+0x76>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	4a17      	ldr	r2, [pc, #92]	; (80099c4 <TIM_OC5_SetConfig+0xb8>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d00b      	beq.n	8009982 <TIM_OC5_SetConfig+0x76>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	4a16      	ldr	r2, [pc, #88]	; (80099c8 <TIM_OC5_SetConfig+0xbc>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d007      	beq.n	8009982 <TIM_OC5_SetConfig+0x76>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	4a15      	ldr	r2, [pc, #84]	; (80099cc <TIM_OC5_SetConfig+0xc0>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d003      	beq.n	8009982 <TIM_OC5_SetConfig+0x76>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	4a14      	ldr	r2, [pc, #80]	; (80099d0 <TIM_OC5_SetConfig+0xc4>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d109      	bne.n	8009996 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009988:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	695b      	ldr	r3, [r3, #20]
 800998e:	021b      	lsls	r3, r3, #8
 8009990:	697a      	ldr	r2, [r7, #20]
 8009992:	4313      	orrs	r3, r2
 8009994:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	697a      	ldr	r2, [r7, #20]
 800999a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	68fa      	ldr	r2, [r7, #12]
 80099a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	685a      	ldr	r2, [r3, #4]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	693a      	ldr	r2, [r7, #16]
 80099ae:	621a      	str	r2, [r3, #32]
}
 80099b0:	bf00      	nop
 80099b2:	371c      	adds	r7, #28
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr
 80099bc:	fffeff8f 	.word	0xfffeff8f
 80099c0:	40010000 	.word	0x40010000
 80099c4:	40010400 	.word	0x40010400
 80099c8:	40014000 	.word	0x40014000
 80099cc:	40014400 	.word	0x40014400
 80099d0:	40014800 	.word	0x40014800

080099d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b087      	sub	sp, #28
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6a1b      	ldr	r3, [r3, #32]
 80099e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6a1b      	ldr	r3, [r3, #32]
 80099ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80099fc:	68fa      	ldr	r2, [r7, #12]
 80099fe:	4b22      	ldr	r3, [pc, #136]	; (8009a88 <TIM_OC6_SetConfig+0xb4>)
 8009a00:	4013      	ands	r3, r2
 8009a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	021b      	lsls	r3, r3, #8
 8009a0a:	68fa      	ldr	r2, [r7, #12]
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009a16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	051b      	lsls	r3, r3, #20
 8009a1e:	693a      	ldr	r2, [r7, #16]
 8009a20:	4313      	orrs	r3, r2
 8009a22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	4a19      	ldr	r2, [pc, #100]	; (8009a8c <TIM_OC6_SetConfig+0xb8>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d00f      	beq.n	8009a4c <TIM_OC6_SetConfig+0x78>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	4a18      	ldr	r2, [pc, #96]	; (8009a90 <TIM_OC6_SetConfig+0xbc>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d00b      	beq.n	8009a4c <TIM_OC6_SetConfig+0x78>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	4a17      	ldr	r2, [pc, #92]	; (8009a94 <TIM_OC6_SetConfig+0xc0>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d007      	beq.n	8009a4c <TIM_OC6_SetConfig+0x78>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	4a16      	ldr	r2, [pc, #88]	; (8009a98 <TIM_OC6_SetConfig+0xc4>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d003      	beq.n	8009a4c <TIM_OC6_SetConfig+0x78>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	4a15      	ldr	r2, [pc, #84]	; (8009a9c <TIM_OC6_SetConfig+0xc8>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d109      	bne.n	8009a60 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	695b      	ldr	r3, [r3, #20]
 8009a58:	029b      	lsls	r3, r3, #10
 8009a5a:	697a      	ldr	r2, [r7, #20]
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	697a      	ldr	r2, [r7, #20]
 8009a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	68fa      	ldr	r2, [r7, #12]
 8009a6a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	685a      	ldr	r2, [r3, #4]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	693a      	ldr	r2, [r7, #16]
 8009a78:	621a      	str	r2, [r3, #32]
}
 8009a7a:	bf00      	nop
 8009a7c:	371c      	adds	r7, #28
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr
 8009a86:	bf00      	nop
 8009a88:	feff8fff 	.word	0xfeff8fff
 8009a8c:	40010000 	.word	0x40010000
 8009a90:	40010400 	.word	0x40010400
 8009a94:	40014000 	.word	0x40014000
 8009a98:	40014400 	.word	0x40014400
 8009a9c:	40014800 	.word	0x40014800

08009aa0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b087      	sub	sp, #28
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	60f8      	str	r0, [r7, #12]
 8009aa8:	60b9      	str	r1, [r7, #8]
 8009aaa:	607a      	str	r2, [r7, #4]
 8009aac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	6a1b      	ldr	r3, [r3, #32]
 8009ab2:	f023 0201 	bic.w	r2, r3, #1
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	699b      	ldr	r3, [r3, #24]
 8009abe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	6a1b      	ldr	r3, [r3, #32]
 8009ac4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	4a28      	ldr	r2, [pc, #160]	; (8009b6c <TIM_TI1_SetConfig+0xcc>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d01b      	beq.n	8009b06 <TIM_TI1_SetConfig+0x66>
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ad4:	d017      	beq.n	8009b06 <TIM_TI1_SetConfig+0x66>
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	4a25      	ldr	r2, [pc, #148]	; (8009b70 <TIM_TI1_SetConfig+0xd0>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d013      	beq.n	8009b06 <TIM_TI1_SetConfig+0x66>
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	4a24      	ldr	r2, [pc, #144]	; (8009b74 <TIM_TI1_SetConfig+0xd4>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d00f      	beq.n	8009b06 <TIM_TI1_SetConfig+0x66>
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	4a23      	ldr	r2, [pc, #140]	; (8009b78 <TIM_TI1_SetConfig+0xd8>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d00b      	beq.n	8009b06 <TIM_TI1_SetConfig+0x66>
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	4a22      	ldr	r2, [pc, #136]	; (8009b7c <TIM_TI1_SetConfig+0xdc>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d007      	beq.n	8009b06 <TIM_TI1_SetConfig+0x66>
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	4a21      	ldr	r2, [pc, #132]	; (8009b80 <TIM_TI1_SetConfig+0xe0>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d003      	beq.n	8009b06 <TIM_TI1_SetConfig+0x66>
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	4a20      	ldr	r2, [pc, #128]	; (8009b84 <TIM_TI1_SetConfig+0xe4>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d101      	bne.n	8009b0a <TIM_TI1_SetConfig+0x6a>
 8009b06:	2301      	movs	r3, #1
 8009b08:	e000      	b.n	8009b0c <TIM_TI1_SetConfig+0x6c>
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d008      	beq.n	8009b22 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	f023 0303 	bic.w	r3, r3, #3
 8009b16:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009b18:	697a      	ldr	r2, [r7, #20]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	617b      	str	r3, [r7, #20]
 8009b20:	e003      	b.n	8009b2a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	f043 0301 	orr.w	r3, r3, #1
 8009b28:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	011b      	lsls	r3, r3, #4
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	697a      	ldr	r2, [r7, #20]
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	f023 030a 	bic.w	r3, r3, #10
 8009b44:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	f003 030a 	and.w	r3, r3, #10
 8009b4c:	693a      	ldr	r2, [r7, #16]
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	697a      	ldr	r2, [r7, #20]
 8009b56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	693a      	ldr	r2, [r7, #16]
 8009b5c:	621a      	str	r2, [r3, #32]
}
 8009b5e:	bf00      	nop
 8009b60:	371c      	adds	r7, #28
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr
 8009b6a:	bf00      	nop
 8009b6c:	40010000 	.word	0x40010000
 8009b70:	40000400 	.word	0x40000400
 8009b74:	40000800 	.word	0x40000800
 8009b78:	40000c00 	.word	0x40000c00
 8009b7c:	40010400 	.word	0x40010400
 8009b80:	40001800 	.word	0x40001800
 8009b84:	40014000 	.word	0x40014000

08009b88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b087      	sub	sp, #28
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	60f8      	str	r0, [r7, #12]
 8009b90:	60b9      	str	r1, [r7, #8]
 8009b92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	6a1b      	ldr	r3, [r3, #32]
 8009b98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	6a1b      	ldr	r3, [r3, #32]
 8009b9e:	f023 0201 	bic.w	r2, r3, #1
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	699b      	ldr	r3, [r3, #24]
 8009baa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009bb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	011b      	lsls	r3, r3, #4
 8009bb8:	693a      	ldr	r2, [r7, #16]
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	f023 030a 	bic.w	r3, r3, #10
 8009bc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009bc6:	697a      	ldr	r2, [r7, #20]
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	693a      	ldr	r2, [r7, #16]
 8009bd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	697a      	ldr	r2, [r7, #20]
 8009bd8:	621a      	str	r2, [r3, #32]
}
 8009bda:	bf00      	nop
 8009bdc:	371c      	adds	r7, #28
 8009bde:	46bd      	mov	sp, r7
 8009be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be4:	4770      	bx	lr

08009be6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009be6:	b480      	push	{r7}
 8009be8:	b087      	sub	sp, #28
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	60f8      	str	r0, [r7, #12]
 8009bee:	60b9      	str	r1, [r7, #8]
 8009bf0:	607a      	str	r2, [r7, #4]
 8009bf2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	6a1b      	ldr	r3, [r3, #32]
 8009bf8:	f023 0210 	bic.w	r2, r3, #16
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	699b      	ldr	r3, [r3, #24]
 8009c04:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6a1b      	ldr	r3, [r3, #32]
 8009c0a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c12:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	021b      	lsls	r3, r3, #8
 8009c18:	697a      	ldr	r2, [r7, #20]
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	031b      	lsls	r3, r3, #12
 8009c2a:	b29b      	uxth	r3, r3
 8009c2c:	697a      	ldr	r2, [r7, #20]
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009c38:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	011b      	lsls	r3, r3, #4
 8009c3e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009c42:	693a      	ldr	r2, [r7, #16]
 8009c44:	4313      	orrs	r3, r2
 8009c46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	697a      	ldr	r2, [r7, #20]
 8009c4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	693a      	ldr	r2, [r7, #16]
 8009c52:	621a      	str	r2, [r3, #32]
}
 8009c54:	bf00      	nop
 8009c56:	371c      	adds	r7, #28
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr

08009c60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b087      	sub	sp, #28
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	60b9      	str	r1, [r7, #8]
 8009c6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	6a1b      	ldr	r3, [r3, #32]
 8009c70:	f023 0210 	bic.w	r2, r3, #16
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	699b      	ldr	r3, [r3, #24]
 8009c7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	6a1b      	ldr	r3, [r3, #32]
 8009c82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c8a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	031b      	lsls	r3, r3, #12
 8009c90:	697a      	ldr	r2, [r7, #20]
 8009c92:	4313      	orrs	r3, r2
 8009c94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009c9c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	011b      	lsls	r3, r3, #4
 8009ca2:	693a      	ldr	r2, [r7, #16]
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	697a      	ldr	r2, [r7, #20]
 8009cac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	693a      	ldr	r2, [r7, #16]
 8009cb2:	621a      	str	r2, [r3, #32]
}
 8009cb4:	bf00      	nop
 8009cb6:	371c      	adds	r7, #28
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr

08009cc0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b087      	sub	sp, #28
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	60f8      	str	r0, [r7, #12]
 8009cc8:	60b9      	str	r1, [r7, #8]
 8009cca:	607a      	str	r2, [r7, #4]
 8009ccc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	6a1b      	ldr	r3, [r3, #32]
 8009cd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	69db      	ldr	r3, [r3, #28]
 8009cde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	6a1b      	ldr	r3, [r3, #32]
 8009ce4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	f023 0303 	bic.w	r3, r3, #3
 8009cec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009cee:	697a      	ldr	r2, [r7, #20]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009cfc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	011b      	lsls	r3, r3, #4
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	697a      	ldr	r2, [r7, #20]
 8009d06:	4313      	orrs	r3, r2
 8009d08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009d10:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	021b      	lsls	r3, r3, #8
 8009d16:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009d1a:	693a      	ldr	r2, [r7, #16]
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	697a      	ldr	r2, [r7, #20]
 8009d24:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	693a      	ldr	r2, [r7, #16]
 8009d2a:	621a      	str	r2, [r3, #32]
}
 8009d2c:	bf00      	nop
 8009d2e:	371c      	adds	r7, #28
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr

08009d38 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b087      	sub	sp, #28
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	60f8      	str	r0, [r7, #12]
 8009d40:	60b9      	str	r1, [r7, #8]
 8009d42:	607a      	str	r2, [r7, #4]
 8009d44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	6a1b      	ldr	r3, [r3, #32]
 8009d4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	69db      	ldr	r3, [r3, #28]
 8009d56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	6a1b      	ldr	r3, [r3, #32]
 8009d5c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d64:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	021b      	lsls	r3, r3, #8
 8009d6a:	697a      	ldr	r2, [r7, #20]
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d76:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	031b      	lsls	r3, r3, #12
 8009d7c:	b29b      	uxth	r3, r3
 8009d7e:	697a      	ldr	r2, [r7, #20]
 8009d80:	4313      	orrs	r3, r2
 8009d82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009d8a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	031b      	lsls	r3, r3, #12
 8009d90:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009d94:	693a      	ldr	r2, [r7, #16]
 8009d96:	4313      	orrs	r3, r2
 8009d98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	697a      	ldr	r2, [r7, #20]
 8009d9e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	693a      	ldr	r2, [r7, #16]
 8009da4:	621a      	str	r2, [r3, #32]
}
 8009da6:	bf00      	nop
 8009da8:	371c      	adds	r7, #28
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr
	...

08009db4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b085      	sub	sp, #20
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	689b      	ldr	r3, [r3, #8]
 8009dc2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	4b09      	ldr	r3, [pc, #36]	; (8009dec <TIM_ITRx_SetConfig+0x38>)
 8009dc8:	4013      	ands	r3, r2
 8009dca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009dcc:	683a      	ldr	r2, [r7, #0]
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	f043 0307 	orr.w	r3, r3, #7
 8009dd6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	68fa      	ldr	r2, [r7, #12]
 8009ddc:	609a      	str	r2, [r3, #8]
}
 8009dde:	bf00      	nop
 8009de0:	3714      	adds	r7, #20
 8009de2:	46bd      	mov	sp, r7
 8009de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de8:	4770      	bx	lr
 8009dea:	bf00      	nop
 8009dec:	ffcfff8f 	.word	0xffcfff8f

08009df0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b087      	sub	sp, #28
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	60f8      	str	r0, [r7, #12]
 8009df8:	60b9      	str	r1, [r7, #8]
 8009dfa:	607a      	str	r2, [r7, #4]
 8009dfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	689b      	ldr	r3, [r3, #8]
 8009e02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	021a      	lsls	r2, r3, #8
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	431a      	orrs	r2, r3
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	4313      	orrs	r3, r2
 8009e18:	697a      	ldr	r2, [r7, #20]
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	697a      	ldr	r2, [r7, #20]
 8009e22:	609a      	str	r2, [r3, #8]
}
 8009e24:	bf00      	nop
 8009e26:	371c      	adds	r7, #28
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr

08009e30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b085      	sub	sp, #20
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	d101      	bne.n	8009e48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e44:	2302      	movs	r3, #2
 8009e46:	e06d      	b.n	8009f24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2202      	movs	r2, #2
 8009e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	689b      	ldr	r3, [r3, #8]
 8009e66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a30      	ldr	r2, [pc, #192]	; (8009f30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d004      	beq.n	8009e7c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a2f      	ldr	r2, [pc, #188]	; (8009f34 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d108      	bne.n	8009e8e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009e82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	68fa      	ldr	r2, [r7, #12]
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e94:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	68fa      	ldr	r2, [r7, #12]
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	68fa      	ldr	r2, [r7, #12]
 8009ea6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4a20      	ldr	r2, [pc, #128]	; (8009f30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d022      	beq.n	8009ef8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009eba:	d01d      	beq.n	8009ef8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a1d      	ldr	r2, [pc, #116]	; (8009f38 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d018      	beq.n	8009ef8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a1c      	ldr	r2, [pc, #112]	; (8009f3c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d013      	beq.n	8009ef8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	4a1a      	ldr	r2, [pc, #104]	; (8009f40 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d00e      	beq.n	8009ef8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4a15      	ldr	r2, [pc, #84]	; (8009f34 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d009      	beq.n	8009ef8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a16      	ldr	r2, [pc, #88]	; (8009f44 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d004      	beq.n	8009ef8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4a15      	ldr	r2, [pc, #84]	; (8009f48 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d10c      	bne.n	8009f12 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009efe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	689b      	ldr	r3, [r3, #8]
 8009f04:	68ba      	ldr	r2, [r7, #8]
 8009f06:	4313      	orrs	r3, r2
 8009f08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	68ba      	ldr	r2, [r7, #8]
 8009f10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2201      	movs	r2, #1
 8009f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f22:	2300      	movs	r3, #0
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3714      	adds	r7, #20
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr
 8009f30:	40010000 	.word	0x40010000
 8009f34:	40010400 	.word	0x40010400
 8009f38:	40000400 	.word	0x40000400
 8009f3c:	40000800 	.word	0x40000800
 8009f40:	40000c00 	.word	0x40000c00
 8009f44:	40001800 	.word	0x40001800
 8009f48:	40014000 	.word	0x40014000

08009f4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d101      	bne.n	8009f5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	e042      	b.n	8009fe4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d106      	bne.n	8009f76 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f7f7 fa9b 	bl	80014ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2224      	movs	r2, #36	; 0x24
 8009f7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	681a      	ldr	r2, [r3, #0]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f022 0201 	bic.w	r2, r2, #1
 8009f8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 f82c 	bl	8009fec <UART_SetConfig>
 8009f94:	4603      	mov	r3, r0
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d101      	bne.n	8009f9e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	e022      	b.n	8009fe4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d002      	beq.n	8009fac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 fd88 	bl	800aabc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	685a      	ldr	r2, [r3, #4]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009fba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	689a      	ldr	r2, [r3, #8]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009fca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	681a      	ldr	r2, [r3, #0]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f042 0201 	orr.w	r2, r2, #1
 8009fda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f000 fe0f 	bl	800ac00 <UART_CheckIdleState>
 8009fe2:	4603      	mov	r3, r0
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3708      	adds	r7, #8
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009fec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ff0:	b092      	sub	sp, #72	; 0x48
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	689a      	ldr	r2, [r3, #8]
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	691b      	ldr	r3, [r3, #16]
 800a004:	431a      	orrs	r2, r3
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	695b      	ldr	r3, [r3, #20]
 800a00a:	431a      	orrs	r2, r3
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	69db      	ldr	r3, [r3, #28]
 800a010:	4313      	orrs	r3, r2
 800a012:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	681a      	ldr	r2, [r3, #0]
 800a01a:	4bbe      	ldr	r3, [pc, #760]	; (800a314 <UART_SetConfig+0x328>)
 800a01c:	4013      	ands	r3, r2
 800a01e:	697a      	ldr	r2, [r7, #20]
 800a020:	6812      	ldr	r2, [r2, #0]
 800a022:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a024:	430b      	orrs	r3, r1
 800a026:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	68da      	ldr	r2, [r3, #12]
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	430a      	orrs	r2, r1
 800a03c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	699b      	ldr	r3, [r3, #24]
 800a042:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4ab3      	ldr	r2, [pc, #716]	; (800a318 <UART_SetConfig+0x32c>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d004      	beq.n	800a058 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	6a1b      	ldr	r3, [r3, #32]
 800a052:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a054:	4313      	orrs	r3, r2
 800a056:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	689a      	ldr	r2, [r3, #8]
 800a05e:	4baf      	ldr	r3, [pc, #700]	; (800a31c <UART_SetConfig+0x330>)
 800a060:	4013      	ands	r3, r2
 800a062:	697a      	ldr	r2, [r7, #20]
 800a064:	6812      	ldr	r2, [r2, #0]
 800a066:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a068:	430b      	orrs	r3, r1
 800a06a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a072:	f023 010f 	bic.w	r1, r3, #15
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	430a      	orrs	r2, r1
 800a080:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4aa6      	ldr	r2, [pc, #664]	; (800a320 <UART_SetConfig+0x334>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d177      	bne.n	800a17c <UART_SetConfig+0x190>
 800a08c:	4ba5      	ldr	r3, [pc, #660]	; (800a324 <UART_SetConfig+0x338>)
 800a08e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a090:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a094:	2b28      	cmp	r3, #40	; 0x28
 800a096:	d86d      	bhi.n	800a174 <UART_SetConfig+0x188>
 800a098:	a201      	add	r2, pc, #4	; (adr r2, 800a0a0 <UART_SetConfig+0xb4>)
 800a09a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a09e:	bf00      	nop
 800a0a0:	0800a145 	.word	0x0800a145
 800a0a4:	0800a175 	.word	0x0800a175
 800a0a8:	0800a175 	.word	0x0800a175
 800a0ac:	0800a175 	.word	0x0800a175
 800a0b0:	0800a175 	.word	0x0800a175
 800a0b4:	0800a175 	.word	0x0800a175
 800a0b8:	0800a175 	.word	0x0800a175
 800a0bc:	0800a175 	.word	0x0800a175
 800a0c0:	0800a14d 	.word	0x0800a14d
 800a0c4:	0800a175 	.word	0x0800a175
 800a0c8:	0800a175 	.word	0x0800a175
 800a0cc:	0800a175 	.word	0x0800a175
 800a0d0:	0800a175 	.word	0x0800a175
 800a0d4:	0800a175 	.word	0x0800a175
 800a0d8:	0800a175 	.word	0x0800a175
 800a0dc:	0800a175 	.word	0x0800a175
 800a0e0:	0800a155 	.word	0x0800a155
 800a0e4:	0800a175 	.word	0x0800a175
 800a0e8:	0800a175 	.word	0x0800a175
 800a0ec:	0800a175 	.word	0x0800a175
 800a0f0:	0800a175 	.word	0x0800a175
 800a0f4:	0800a175 	.word	0x0800a175
 800a0f8:	0800a175 	.word	0x0800a175
 800a0fc:	0800a175 	.word	0x0800a175
 800a100:	0800a15d 	.word	0x0800a15d
 800a104:	0800a175 	.word	0x0800a175
 800a108:	0800a175 	.word	0x0800a175
 800a10c:	0800a175 	.word	0x0800a175
 800a110:	0800a175 	.word	0x0800a175
 800a114:	0800a175 	.word	0x0800a175
 800a118:	0800a175 	.word	0x0800a175
 800a11c:	0800a175 	.word	0x0800a175
 800a120:	0800a165 	.word	0x0800a165
 800a124:	0800a175 	.word	0x0800a175
 800a128:	0800a175 	.word	0x0800a175
 800a12c:	0800a175 	.word	0x0800a175
 800a130:	0800a175 	.word	0x0800a175
 800a134:	0800a175 	.word	0x0800a175
 800a138:	0800a175 	.word	0x0800a175
 800a13c:	0800a175 	.word	0x0800a175
 800a140:	0800a16d 	.word	0x0800a16d
 800a144:	2301      	movs	r3, #1
 800a146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a14a:	e222      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a14c:	2304      	movs	r3, #4
 800a14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a152:	e21e      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a154:	2308      	movs	r3, #8
 800a156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a15a:	e21a      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a15c:	2310      	movs	r3, #16
 800a15e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a162:	e216      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a164:	2320      	movs	r3, #32
 800a166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a16a:	e212      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a16c:	2340      	movs	r3, #64	; 0x40
 800a16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a172:	e20e      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a174:	2380      	movs	r3, #128	; 0x80
 800a176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a17a:	e20a      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a69      	ldr	r2, [pc, #420]	; (800a328 <UART_SetConfig+0x33c>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d130      	bne.n	800a1e8 <UART_SetConfig+0x1fc>
 800a186:	4b67      	ldr	r3, [pc, #412]	; (800a324 <UART_SetConfig+0x338>)
 800a188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a18a:	f003 0307 	and.w	r3, r3, #7
 800a18e:	2b05      	cmp	r3, #5
 800a190:	d826      	bhi.n	800a1e0 <UART_SetConfig+0x1f4>
 800a192:	a201      	add	r2, pc, #4	; (adr r2, 800a198 <UART_SetConfig+0x1ac>)
 800a194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a198:	0800a1b1 	.word	0x0800a1b1
 800a19c:	0800a1b9 	.word	0x0800a1b9
 800a1a0:	0800a1c1 	.word	0x0800a1c1
 800a1a4:	0800a1c9 	.word	0x0800a1c9
 800a1a8:	0800a1d1 	.word	0x0800a1d1
 800a1ac:	0800a1d9 	.word	0x0800a1d9
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1b6:	e1ec      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a1b8:	2304      	movs	r3, #4
 800a1ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1be:	e1e8      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a1c0:	2308      	movs	r3, #8
 800a1c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1c6:	e1e4      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a1c8:	2310      	movs	r3, #16
 800a1ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1ce:	e1e0      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a1d0:	2320      	movs	r3, #32
 800a1d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1d6:	e1dc      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a1d8:	2340      	movs	r3, #64	; 0x40
 800a1da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1de:	e1d8      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a1e0:	2380      	movs	r3, #128	; 0x80
 800a1e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1e6:	e1d4      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a4f      	ldr	r2, [pc, #316]	; (800a32c <UART_SetConfig+0x340>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d130      	bne.n	800a254 <UART_SetConfig+0x268>
 800a1f2:	4b4c      	ldr	r3, [pc, #304]	; (800a324 <UART_SetConfig+0x338>)
 800a1f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1f6:	f003 0307 	and.w	r3, r3, #7
 800a1fa:	2b05      	cmp	r3, #5
 800a1fc:	d826      	bhi.n	800a24c <UART_SetConfig+0x260>
 800a1fe:	a201      	add	r2, pc, #4	; (adr r2, 800a204 <UART_SetConfig+0x218>)
 800a200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a204:	0800a21d 	.word	0x0800a21d
 800a208:	0800a225 	.word	0x0800a225
 800a20c:	0800a22d 	.word	0x0800a22d
 800a210:	0800a235 	.word	0x0800a235
 800a214:	0800a23d 	.word	0x0800a23d
 800a218:	0800a245 	.word	0x0800a245
 800a21c:	2300      	movs	r3, #0
 800a21e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a222:	e1b6      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a224:	2304      	movs	r3, #4
 800a226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a22a:	e1b2      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a22c:	2308      	movs	r3, #8
 800a22e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a232:	e1ae      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a234:	2310      	movs	r3, #16
 800a236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a23a:	e1aa      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a23c:	2320      	movs	r3, #32
 800a23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a242:	e1a6      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a244:	2340      	movs	r3, #64	; 0x40
 800a246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a24a:	e1a2      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a24c:	2380      	movs	r3, #128	; 0x80
 800a24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a252:	e19e      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4a35      	ldr	r2, [pc, #212]	; (800a330 <UART_SetConfig+0x344>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d130      	bne.n	800a2c0 <UART_SetConfig+0x2d4>
 800a25e:	4b31      	ldr	r3, [pc, #196]	; (800a324 <UART_SetConfig+0x338>)
 800a260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a262:	f003 0307 	and.w	r3, r3, #7
 800a266:	2b05      	cmp	r3, #5
 800a268:	d826      	bhi.n	800a2b8 <UART_SetConfig+0x2cc>
 800a26a:	a201      	add	r2, pc, #4	; (adr r2, 800a270 <UART_SetConfig+0x284>)
 800a26c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a270:	0800a289 	.word	0x0800a289
 800a274:	0800a291 	.word	0x0800a291
 800a278:	0800a299 	.word	0x0800a299
 800a27c:	0800a2a1 	.word	0x0800a2a1
 800a280:	0800a2a9 	.word	0x0800a2a9
 800a284:	0800a2b1 	.word	0x0800a2b1
 800a288:	2300      	movs	r3, #0
 800a28a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a28e:	e180      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a290:	2304      	movs	r3, #4
 800a292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a296:	e17c      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a298:	2308      	movs	r3, #8
 800a29a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a29e:	e178      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a2a0:	2310      	movs	r3, #16
 800a2a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2a6:	e174      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a2a8:	2320      	movs	r3, #32
 800a2aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2ae:	e170      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a2b0:	2340      	movs	r3, #64	; 0x40
 800a2b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2b6:	e16c      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a2b8:	2380      	movs	r3, #128	; 0x80
 800a2ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2be:	e168      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4a1b      	ldr	r2, [pc, #108]	; (800a334 <UART_SetConfig+0x348>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d142      	bne.n	800a350 <UART_SetConfig+0x364>
 800a2ca:	4b16      	ldr	r3, [pc, #88]	; (800a324 <UART_SetConfig+0x338>)
 800a2cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2ce:	f003 0307 	and.w	r3, r3, #7
 800a2d2:	2b05      	cmp	r3, #5
 800a2d4:	d838      	bhi.n	800a348 <UART_SetConfig+0x35c>
 800a2d6:	a201      	add	r2, pc, #4	; (adr r2, 800a2dc <UART_SetConfig+0x2f0>)
 800a2d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2dc:	0800a2f5 	.word	0x0800a2f5
 800a2e0:	0800a2fd 	.word	0x0800a2fd
 800a2e4:	0800a305 	.word	0x0800a305
 800a2e8:	0800a30d 	.word	0x0800a30d
 800a2ec:	0800a339 	.word	0x0800a339
 800a2f0:	0800a341 	.word	0x0800a341
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2fa:	e14a      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a2fc:	2304      	movs	r3, #4
 800a2fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a302:	e146      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a304:	2308      	movs	r3, #8
 800a306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a30a:	e142      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a30c:	2310      	movs	r3, #16
 800a30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a312:	e13e      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a314:	cfff69f3 	.word	0xcfff69f3
 800a318:	58000c00 	.word	0x58000c00
 800a31c:	11fff4ff 	.word	0x11fff4ff
 800a320:	40011000 	.word	0x40011000
 800a324:	58024400 	.word	0x58024400
 800a328:	40004400 	.word	0x40004400
 800a32c:	40004800 	.word	0x40004800
 800a330:	40004c00 	.word	0x40004c00
 800a334:	40005000 	.word	0x40005000
 800a338:	2320      	movs	r3, #32
 800a33a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a33e:	e128      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a340:	2340      	movs	r3, #64	; 0x40
 800a342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a346:	e124      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a348:	2380      	movs	r3, #128	; 0x80
 800a34a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a34e:	e120      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4acb      	ldr	r2, [pc, #812]	; (800a684 <UART_SetConfig+0x698>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d176      	bne.n	800a448 <UART_SetConfig+0x45c>
 800a35a:	4bcb      	ldr	r3, [pc, #812]	; (800a688 <UART_SetConfig+0x69c>)
 800a35c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a35e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a362:	2b28      	cmp	r3, #40	; 0x28
 800a364:	d86c      	bhi.n	800a440 <UART_SetConfig+0x454>
 800a366:	a201      	add	r2, pc, #4	; (adr r2, 800a36c <UART_SetConfig+0x380>)
 800a368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a36c:	0800a411 	.word	0x0800a411
 800a370:	0800a441 	.word	0x0800a441
 800a374:	0800a441 	.word	0x0800a441
 800a378:	0800a441 	.word	0x0800a441
 800a37c:	0800a441 	.word	0x0800a441
 800a380:	0800a441 	.word	0x0800a441
 800a384:	0800a441 	.word	0x0800a441
 800a388:	0800a441 	.word	0x0800a441
 800a38c:	0800a419 	.word	0x0800a419
 800a390:	0800a441 	.word	0x0800a441
 800a394:	0800a441 	.word	0x0800a441
 800a398:	0800a441 	.word	0x0800a441
 800a39c:	0800a441 	.word	0x0800a441
 800a3a0:	0800a441 	.word	0x0800a441
 800a3a4:	0800a441 	.word	0x0800a441
 800a3a8:	0800a441 	.word	0x0800a441
 800a3ac:	0800a421 	.word	0x0800a421
 800a3b0:	0800a441 	.word	0x0800a441
 800a3b4:	0800a441 	.word	0x0800a441
 800a3b8:	0800a441 	.word	0x0800a441
 800a3bc:	0800a441 	.word	0x0800a441
 800a3c0:	0800a441 	.word	0x0800a441
 800a3c4:	0800a441 	.word	0x0800a441
 800a3c8:	0800a441 	.word	0x0800a441
 800a3cc:	0800a429 	.word	0x0800a429
 800a3d0:	0800a441 	.word	0x0800a441
 800a3d4:	0800a441 	.word	0x0800a441
 800a3d8:	0800a441 	.word	0x0800a441
 800a3dc:	0800a441 	.word	0x0800a441
 800a3e0:	0800a441 	.word	0x0800a441
 800a3e4:	0800a441 	.word	0x0800a441
 800a3e8:	0800a441 	.word	0x0800a441
 800a3ec:	0800a431 	.word	0x0800a431
 800a3f0:	0800a441 	.word	0x0800a441
 800a3f4:	0800a441 	.word	0x0800a441
 800a3f8:	0800a441 	.word	0x0800a441
 800a3fc:	0800a441 	.word	0x0800a441
 800a400:	0800a441 	.word	0x0800a441
 800a404:	0800a441 	.word	0x0800a441
 800a408:	0800a441 	.word	0x0800a441
 800a40c:	0800a439 	.word	0x0800a439
 800a410:	2301      	movs	r3, #1
 800a412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a416:	e0bc      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a418:	2304      	movs	r3, #4
 800a41a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a41e:	e0b8      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a420:	2308      	movs	r3, #8
 800a422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a426:	e0b4      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a428:	2310      	movs	r3, #16
 800a42a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a42e:	e0b0      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a430:	2320      	movs	r3, #32
 800a432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a436:	e0ac      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a438:	2340      	movs	r3, #64	; 0x40
 800a43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a43e:	e0a8      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a440:	2380      	movs	r3, #128	; 0x80
 800a442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a446:	e0a4      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4a8f      	ldr	r2, [pc, #572]	; (800a68c <UART_SetConfig+0x6a0>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d130      	bne.n	800a4b4 <UART_SetConfig+0x4c8>
 800a452:	4b8d      	ldr	r3, [pc, #564]	; (800a688 <UART_SetConfig+0x69c>)
 800a454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a456:	f003 0307 	and.w	r3, r3, #7
 800a45a:	2b05      	cmp	r3, #5
 800a45c:	d826      	bhi.n	800a4ac <UART_SetConfig+0x4c0>
 800a45e:	a201      	add	r2, pc, #4	; (adr r2, 800a464 <UART_SetConfig+0x478>)
 800a460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a464:	0800a47d 	.word	0x0800a47d
 800a468:	0800a485 	.word	0x0800a485
 800a46c:	0800a48d 	.word	0x0800a48d
 800a470:	0800a495 	.word	0x0800a495
 800a474:	0800a49d 	.word	0x0800a49d
 800a478:	0800a4a5 	.word	0x0800a4a5
 800a47c:	2300      	movs	r3, #0
 800a47e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a482:	e086      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a484:	2304      	movs	r3, #4
 800a486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a48a:	e082      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a48c:	2308      	movs	r3, #8
 800a48e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a492:	e07e      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a494:	2310      	movs	r3, #16
 800a496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a49a:	e07a      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a49c:	2320      	movs	r3, #32
 800a49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4a2:	e076      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a4a4:	2340      	movs	r3, #64	; 0x40
 800a4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4aa:	e072      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a4ac:	2380      	movs	r3, #128	; 0x80
 800a4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4b2:	e06e      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	4a75      	ldr	r2, [pc, #468]	; (800a690 <UART_SetConfig+0x6a4>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d130      	bne.n	800a520 <UART_SetConfig+0x534>
 800a4be:	4b72      	ldr	r3, [pc, #456]	; (800a688 <UART_SetConfig+0x69c>)
 800a4c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4c2:	f003 0307 	and.w	r3, r3, #7
 800a4c6:	2b05      	cmp	r3, #5
 800a4c8:	d826      	bhi.n	800a518 <UART_SetConfig+0x52c>
 800a4ca:	a201      	add	r2, pc, #4	; (adr r2, 800a4d0 <UART_SetConfig+0x4e4>)
 800a4cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4d0:	0800a4e9 	.word	0x0800a4e9
 800a4d4:	0800a4f1 	.word	0x0800a4f1
 800a4d8:	0800a4f9 	.word	0x0800a4f9
 800a4dc:	0800a501 	.word	0x0800a501
 800a4e0:	0800a509 	.word	0x0800a509
 800a4e4:	0800a511 	.word	0x0800a511
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4ee:	e050      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a4f0:	2304      	movs	r3, #4
 800a4f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4f6:	e04c      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a4f8:	2308      	movs	r3, #8
 800a4fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4fe:	e048      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a500:	2310      	movs	r3, #16
 800a502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a506:	e044      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a508:	2320      	movs	r3, #32
 800a50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a50e:	e040      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a510:	2340      	movs	r3, #64	; 0x40
 800a512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a516:	e03c      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a518:	2380      	movs	r3, #128	; 0x80
 800a51a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a51e:	e038      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4a5b      	ldr	r2, [pc, #364]	; (800a694 <UART_SetConfig+0x6a8>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d130      	bne.n	800a58c <UART_SetConfig+0x5a0>
 800a52a:	4b57      	ldr	r3, [pc, #348]	; (800a688 <UART_SetConfig+0x69c>)
 800a52c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a52e:	f003 0307 	and.w	r3, r3, #7
 800a532:	2b05      	cmp	r3, #5
 800a534:	d826      	bhi.n	800a584 <UART_SetConfig+0x598>
 800a536:	a201      	add	r2, pc, #4	; (adr r2, 800a53c <UART_SetConfig+0x550>)
 800a538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a53c:	0800a555 	.word	0x0800a555
 800a540:	0800a55d 	.word	0x0800a55d
 800a544:	0800a565 	.word	0x0800a565
 800a548:	0800a56d 	.word	0x0800a56d
 800a54c:	0800a575 	.word	0x0800a575
 800a550:	0800a57d 	.word	0x0800a57d
 800a554:	2302      	movs	r3, #2
 800a556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a55a:	e01a      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a55c:	2304      	movs	r3, #4
 800a55e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a562:	e016      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a564:	2308      	movs	r3, #8
 800a566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a56a:	e012      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a56c:	2310      	movs	r3, #16
 800a56e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a572:	e00e      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a574:	2320      	movs	r3, #32
 800a576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a57a:	e00a      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a57c:	2340      	movs	r3, #64	; 0x40
 800a57e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a582:	e006      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a584:	2380      	movs	r3, #128	; 0x80
 800a586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a58a:	e002      	b.n	800a592 <UART_SetConfig+0x5a6>
 800a58c:	2380      	movs	r3, #128	; 0x80
 800a58e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4a3f      	ldr	r2, [pc, #252]	; (800a694 <UART_SetConfig+0x6a8>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	f040 80f8 	bne.w	800a78e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a59e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a5a2:	2b20      	cmp	r3, #32
 800a5a4:	dc46      	bgt.n	800a634 <UART_SetConfig+0x648>
 800a5a6:	2b02      	cmp	r3, #2
 800a5a8:	f2c0 8082 	blt.w	800a6b0 <UART_SetConfig+0x6c4>
 800a5ac:	3b02      	subs	r3, #2
 800a5ae:	2b1e      	cmp	r3, #30
 800a5b0:	d87e      	bhi.n	800a6b0 <UART_SetConfig+0x6c4>
 800a5b2:	a201      	add	r2, pc, #4	; (adr r2, 800a5b8 <UART_SetConfig+0x5cc>)
 800a5b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b8:	0800a63b 	.word	0x0800a63b
 800a5bc:	0800a6b1 	.word	0x0800a6b1
 800a5c0:	0800a643 	.word	0x0800a643
 800a5c4:	0800a6b1 	.word	0x0800a6b1
 800a5c8:	0800a6b1 	.word	0x0800a6b1
 800a5cc:	0800a6b1 	.word	0x0800a6b1
 800a5d0:	0800a653 	.word	0x0800a653
 800a5d4:	0800a6b1 	.word	0x0800a6b1
 800a5d8:	0800a6b1 	.word	0x0800a6b1
 800a5dc:	0800a6b1 	.word	0x0800a6b1
 800a5e0:	0800a6b1 	.word	0x0800a6b1
 800a5e4:	0800a6b1 	.word	0x0800a6b1
 800a5e8:	0800a6b1 	.word	0x0800a6b1
 800a5ec:	0800a6b1 	.word	0x0800a6b1
 800a5f0:	0800a663 	.word	0x0800a663
 800a5f4:	0800a6b1 	.word	0x0800a6b1
 800a5f8:	0800a6b1 	.word	0x0800a6b1
 800a5fc:	0800a6b1 	.word	0x0800a6b1
 800a600:	0800a6b1 	.word	0x0800a6b1
 800a604:	0800a6b1 	.word	0x0800a6b1
 800a608:	0800a6b1 	.word	0x0800a6b1
 800a60c:	0800a6b1 	.word	0x0800a6b1
 800a610:	0800a6b1 	.word	0x0800a6b1
 800a614:	0800a6b1 	.word	0x0800a6b1
 800a618:	0800a6b1 	.word	0x0800a6b1
 800a61c:	0800a6b1 	.word	0x0800a6b1
 800a620:	0800a6b1 	.word	0x0800a6b1
 800a624:	0800a6b1 	.word	0x0800a6b1
 800a628:	0800a6b1 	.word	0x0800a6b1
 800a62c:	0800a6b1 	.word	0x0800a6b1
 800a630:	0800a6a3 	.word	0x0800a6a3
 800a634:	2b40      	cmp	r3, #64	; 0x40
 800a636:	d037      	beq.n	800a6a8 <UART_SetConfig+0x6bc>
 800a638:	e03a      	b.n	800a6b0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a63a:	f7fc fbf3 	bl	8006e24 <HAL_RCCEx_GetD3PCLK1Freq>
 800a63e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a640:	e03c      	b.n	800a6bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a646:	4618      	mov	r0, r3
 800a648:	f7fc fc02 	bl	8006e50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a64e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a650:	e034      	b.n	800a6bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a652:	f107 0318 	add.w	r3, r7, #24
 800a656:	4618      	mov	r0, r3
 800a658:	f7fc fd4e 	bl	80070f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a65c:	69fb      	ldr	r3, [r7, #28]
 800a65e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a660:	e02c      	b.n	800a6bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a662:	4b09      	ldr	r3, [pc, #36]	; (800a688 <UART_SetConfig+0x69c>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f003 0320 	and.w	r3, r3, #32
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d016      	beq.n	800a69c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a66e:	4b06      	ldr	r3, [pc, #24]	; (800a688 <UART_SetConfig+0x69c>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	08db      	lsrs	r3, r3, #3
 800a674:	f003 0303 	and.w	r3, r3, #3
 800a678:	4a07      	ldr	r2, [pc, #28]	; (800a698 <UART_SetConfig+0x6ac>)
 800a67a:	fa22 f303 	lsr.w	r3, r2, r3
 800a67e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a680:	e01c      	b.n	800a6bc <UART_SetConfig+0x6d0>
 800a682:	bf00      	nop
 800a684:	40011400 	.word	0x40011400
 800a688:	58024400 	.word	0x58024400
 800a68c:	40007800 	.word	0x40007800
 800a690:	40007c00 	.word	0x40007c00
 800a694:	58000c00 	.word	0x58000c00
 800a698:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a69c:	4b9d      	ldr	r3, [pc, #628]	; (800a914 <UART_SetConfig+0x928>)
 800a69e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6a0:	e00c      	b.n	800a6bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a6a2:	4b9d      	ldr	r3, [pc, #628]	; (800a918 <UART_SetConfig+0x92c>)
 800a6a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6a6:	e009      	b.n	800a6bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6ae:	e005      	b.n	800a6bc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a6ba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a6bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	f000 81de 	beq.w	800aa80 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c8:	4a94      	ldr	r2, [pc, #592]	; (800a91c <UART_SetConfig+0x930>)
 800a6ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6d2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6d6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	685a      	ldr	r2, [r3, #4]
 800a6dc:	4613      	mov	r3, r2
 800a6de:	005b      	lsls	r3, r3, #1
 800a6e0:	4413      	add	r3, r2
 800a6e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d305      	bcc.n	800a6f4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	685b      	ldr	r3, [r3, #4]
 800a6ec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a6ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d903      	bls.n	800a6fc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a6fa:	e1c1      	b.n	800aa80 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a6fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6fe:	2200      	movs	r2, #0
 800a700:	60bb      	str	r3, [r7, #8]
 800a702:	60fa      	str	r2, [r7, #12]
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a708:	4a84      	ldr	r2, [pc, #528]	; (800a91c <UART_SetConfig+0x930>)
 800a70a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a70e:	b29b      	uxth	r3, r3
 800a710:	2200      	movs	r2, #0
 800a712:	603b      	str	r3, [r7, #0]
 800a714:	607a      	str	r2, [r7, #4]
 800a716:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a71a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a71e:	f7f5 fddb 	bl	80002d8 <__aeabi_uldivmod>
 800a722:	4602      	mov	r2, r0
 800a724:	460b      	mov	r3, r1
 800a726:	4610      	mov	r0, r2
 800a728:	4619      	mov	r1, r3
 800a72a:	f04f 0200 	mov.w	r2, #0
 800a72e:	f04f 0300 	mov.w	r3, #0
 800a732:	020b      	lsls	r3, r1, #8
 800a734:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a738:	0202      	lsls	r2, r0, #8
 800a73a:	6979      	ldr	r1, [r7, #20]
 800a73c:	6849      	ldr	r1, [r1, #4]
 800a73e:	0849      	lsrs	r1, r1, #1
 800a740:	2000      	movs	r0, #0
 800a742:	460c      	mov	r4, r1
 800a744:	4605      	mov	r5, r0
 800a746:	eb12 0804 	adds.w	r8, r2, r4
 800a74a:	eb43 0905 	adc.w	r9, r3, r5
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	2200      	movs	r2, #0
 800a754:	469a      	mov	sl, r3
 800a756:	4693      	mov	fp, r2
 800a758:	4652      	mov	r2, sl
 800a75a:	465b      	mov	r3, fp
 800a75c:	4640      	mov	r0, r8
 800a75e:	4649      	mov	r1, r9
 800a760:	f7f5 fdba 	bl	80002d8 <__aeabi_uldivmod>
 800a764:	4602      	mov	r2, r0
 800a766:	460b      	mov	r3, r1
 800a768:	4613      	mov	r3, r2
 800a76a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a76c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a76e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a772:	d308      	bcc.n	800a786 <UART_SetConfig+0x79a>
 800a774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a776:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a77a:	d204      	bcs.n	800a786 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a782:	60da      	str	r2, [r3, #12]
 800a784:	e17c      	b.n	800aa80 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a786:	2301      	movs	r3, #1
 800a788:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a78c:	e178      	b.n	800aa80 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	69db      	ldr	r3, [r3, #28]
 800a792:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a796:	f040 80c5 	bne.w	800a924 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a79a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a79e:	2b20      	cmp	r3, #32
 800a7a0:	dc48      	bgt.n	800a834 <UART_SetConfig+0x848>
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	db7b      	blt.n	800a89e <UART_SetConfig+0x8b2>
 800a7a6:	2b20      	cmp	r3, #32
 800a7a8:	d879      	bhi.n	800a89e <UART_SetConfig+0x8b2>
 800a7aa:	a201      	add	r2, pc, #4	; (adr r2, 800a7b0 <UART_SetConfig+0x7c4>)
 800a7ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7b0:	0800a83b 	.word	0x0800a83b
 800a7b4:	0800a843 	.word	0x0800a843
 800a7b8:	0800a89f 	.word	0x0800a89f
 800a7bc:	0800a89f 	.word	0x0800a89f
 800a7c0:	0800a84b 	.word	0x0800a84b
 800a7c4:	0800a89f 	.word	0x0800a89f
 800a7c8:	0800a89f 	.word	0x0800a89f
 800a7cc:	0800a89f 	.word	0x0800a89f
 800a7d0:	0800a85b 	.word	0x0800a85b
 800a7d4:	0800a89f 	.word	0x0800a89f
 800a7d8:	0800a89f 	.word	0x0800a89f
 800a7dc:	0800a89f 	.word	0x0800a89f
 800a7e0:	0800a89f 	.word	0x0800a89f
 800a7e4:	0800a89f 	.word	0x0800a89f
 800a7e8:	0800a89f 	.word	0x0800a89f
 800a7ec:	0800a89f 	.word	0x0800a89f
 800a7f0:	0800a86b 	.word	0x0800a86b
 800a7f4:	0800a89f 	.word	0x0800a89f
 800a7f8:	0800a89f 	.word	0x0800a89f
 800a7fc:	0800a89f 	.word	0x0800a89f
 800a800:	0800a89f 	.word	0x0800a89f
 800a804:	0800a89f 	.word	0x0800a89f
 800a808:	0800a89f 	.word	0x0800a89f
 800a80c:	0800a89f 	.word	0x0800a89f
 800a810:	0800a89f 	.word	0x0800a89f
 800a814:	0800a89f 	.word	0x0800a89f
 800a818:	0800a89f 	.word	0x0800a89f
 800a81c:	0800a89f 	.word	0x0800a89f
 800a820:	0800a89f 	.word	0x0800a89f
 800a824:	0800a89f 	.word	0x0800a89f
 800a828:	0800a89f 	.word	0x0800a89f
 800a82c:	0800a89f 	.word	0x0800a89f
 800a830:	0800a891 	.word	0x0800a891
 800a834:	2b40      	cmp	r3, #64	; 0x40
 800a836:	d02e      	beq.n	800a896 <UART_SetConfig+0x8aa>
 800a838:	e031      	b.n	800a89e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a83a:	f7fa fb3d 	bl	8004eb8 <HAL_RCC_GetPCLK1Freq>
 800a83e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a840:	e033      	b.n	800a8aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a842:	f7fa fb4f 	bl	8004ee4 <HAL_RCC_GetPCLK2Freq>
 800a846:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a848:	e02f      	b.n	800a8aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a84a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a84e:	4618      	mov	r0, r3
 800a850:	f7fc fafe 	bl	8006e50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a856:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a858:	e027      	b.n	800a8aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a85a:	f107 0318 	add.w	r3, r7, #24
 800a85e:	4618      	mov	r0, r3
 800a860:	f7fc fc4a 	bl	80070f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a864:	69fb      	ldr	r3, [r7, #28]
 800a866:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a868:	e01f      	b.n	800a8aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a86a:	4b2d      	ldr	r3, [pc, #180]	; (800a920 <UART_SetConfig+0x934>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f003 0320 	and.w	r3, r3, #32
 800a872:	2b00      	cmp	r3, #0
 800a874:	d009      	beq.n	800a88a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a876:	4b2a      	ldr	r3, [pc, #168]	; (800a920 <UART_SetConfig+0x934>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	08db      	lsrs	r3, r3, #3
 800a87c:	f003 0303 	and.w	r3, r3, #3
 800a880:	4a24      	ldr	r2, [pc, #144]	; (800a914 <UART_SetConfig+0x928>)
 800a882:	fa22 f303 	lsr.w	r3, r2, r3
 800a886:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a888:	e00f      	b.n	800a8aa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a88a:	4b22      	ldr	r3, [pc, #136]	; (800a914 <UART_SetConfig+0x928>)
 800a88c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a88e:	e00c      	b.n	800a8aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a890:	4b21      	ldr	r3, [pc, #132]	; (800a918 <UART_SetConfig+0x92c>)
 800a892:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a894:	e009      	b.n	800a8aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a896:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a89a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a89c:	e005      	b.n	800a8aa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a8a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a8aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	f000 80e7 	beq.w	800aa80 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b6:	4a19      	ldr	r2, [pc, #100]	; (800a91c <UART_SetConfig+0x930>)
 800a8b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8bc:	461a      	mov	r2, r3
 800a8be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8c4:	005a      	lsls	r2, r3, #1
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	085b      	lsrs	r3, r3, #1
 800a8cc:	441a      	add	r2, r3
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8d6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8da:	2b0f      	cmp	r3, #15
 800a8dc:	d916      	bls.n	800a90c <UART_SetConfig+0x920>
 800a8de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8e4:	d212      	bcs.n	800a90c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a8e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e8:	b29b      	uxth	r3, r3
 800a8ea:	f023 030f 	bic.w	r3, r3, #15
 800a8ee:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f2:	085b      	lsrs	r3, r3, #1
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	f003 0307 	and.w	r3, r3, #7
 800a8fa:	b29a      	uxth	r2, r3
 800a8fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a8fe:	4313      	orrs	r3, r2
 800a900:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a908:	60da      	str	r2, [r3, #12]
 800a90a:	e0b9      	b.n	800aa80 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a90c:	2301      	movs	r3, #1
 800a90e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a912:	e0b5      	b.n	800aa80 <UART_SetConfig+0xa94>
 800a914:	03d09000 	.word	0x03d09000
 800a918:	003d0900 	.word	0x003d0900
 800a91c:	0800c168 	.word	0x0800c168
 800a920:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a924:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a928:	2b20      	cmp	r3, #32
 800a92a:	dc49      	bgt.n	800a9c0 <UART_SetConfig+0x9d4>
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	db7c      	blt.n	800aa2a <UART_SetConfig+0xa3e>
 800a930:	2b20      	cmp	r3, #32
 800a932:	d87a      	bhi.n	800aa2a <UART_SetConfig+0xa3e>
 800a934:	a201      	add	r2, pc, #4	; (adr r2, 800a93c <UART_SetConfig+0x950>)
 800a936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a93a:	bf00      	nop
 800a93c:	0800a9c7 	.word	0x0800a9c7
 800a940:	0800a9cf 	.word	0x0800a9cf
 800a944:	0800aa2b 	.word	0x0800aa2b
 800a948:	0800aa2b 	.word	0x0800aa2b
 800a94c:	0800a9d7 	.word	0x0800a9d7
 800a950:	0800aa2b 	.word	0x0800aa2b
 800a954:	0800aa2b 	.word	0x0800aa2b
 800a958:	0800aa2b 	.word	0x0800aa2b
 800a95c:	0800a9e7 	.word	0x0800a9e7
 800a960:	0800aa2b 	.word	0x0800aa2b
 800a964:	0800aa2b 	.word	0x0800aa2b
 800a968:	0800aa2b 	.word	0x0800aa2b
 800a96c:	0800aa2b 	.word	0x0800aa2b
 800a970:	0800aa2b 	.word	0x0800aa2b
 800a974:	0800aa2b 	.word	0x0800aa2b
 800a978:	0800aa2b 	.word	0x0800aa2b
 800a97c:	0800a9f7 	.word	0x0800a9f7
 800a980:	0800aa2b 	.word	0x0800aa2b
 800a984:	0800aa2b 	.word	0x0800aa2b
 800a988:	0800aa2b 	.word	0x0800aa2b
 800a98c:	0800aa2b 	.word	0x0800aa2b
 800a990:	0800aa2b 	.word	0x0800aa2b
 800a994:	0800aa2b 	.word	0x0800aa2b
 800a998:	0800aa2b 	.word	0x0800aa2b
 800a99c:	0800aa2b 	.word	0x0800aa2b
 800a9a0:	0800aa2b 	.word	0x0800aa2b
 800a9a4:	0800aa2b 	.word	0x0800aa2b
 800a9a8:	0800aa2b 	.word	0x0800aa2b
 800a9ac:	0800aa2b 	.word	0x0800aa2b
 800a9b0:	0800aa2b 	.word	0x0800aa2b
 800a9b4:	0800aa2b 	.word	0x0800aa2b
 800a9b8:	0800aa2b 	.word	0x0800aa2b
 800a9bc:	0800aa1d 	.word	0x0800aa1d
 800a9c0:	2b40      	cmp	r3, #64	; 0x40
 800a9c2:	d02e      	beq.n	800aa22 <UART_SetConfig+0xa36>
 800a9c4:	e031      	b.n	800aa2a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a9c6:	f7fa fa77 	bl	8004eb8 <HAL_RCC_GetPCLK1Freq>
 800a9ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a9cc:	e033      	b.n	800aa36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a9ce:	f7fa fa89 	bl	8004ee4 <HAL_RCC_GetPCLK2Freq>
 800a9d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a9d4:	e02f      	b.n	800aa36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7fc fa38 	bl	8006e50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9e4:	e027      	b.n	800aa36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9e6:	f107 0318 	add.w	r3, r7, #24
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7fc fb84 	bl	80070f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a9f0:	69fb      	ldr	r3, [r7, #28]
 800a9f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9f4:	e01f      	b.n	800aa36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9f6:	4b2d      	ldr	r3, [pc, #180]	; (800aaac <UART_SetConfig+0xac0>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f003 0320 	and.w	r3, r3, #32
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d009      	beq.n	800aa16 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aa02:	4b2a      	ldr	r3, [pc, #168]	; (800aaac <UART_SetConfig+0xac0>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	08db      	lsrs	r3, r3, #3
 800aa08:	f003 0303 	and.w	r3, r3, #3
 800aa0c:	4a28      	ldr	r2, [pc, #160]	; (800aab0 <UART_SetConfig+0xac4>)
 800aa0e:	fa22 f303 	lsr.w	r3, r2, r3
 800aa12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aa14:	e00f      	b.n	800aa36 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800aa16:	4b26      	ldr	r3, [pc, #152]	; (800aab0 <UART_SetConfig+0xac4>)
 800aa18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa1a:	e00c      	b.n	800aa36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aa1c:	4b25      	ldr	r3, [pc, #148]	; (800aab4 <UART_SetConfig+0xac8>)
 800aa1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa20:	e009      	b.n	800aa36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa28:	e005      	b.n	800aa36 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800aa2e:	2301      	movs	r3, #1
 800aa30:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800aa34:	bf00      	nop
    }

    if (pclk != 0U)
 800aa36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d021      	beq.n	800aa80 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa40:	4a1d      	ldr	r2, [pc, #116]	; (800aab8 <UART_SetConfig+0xacc>)
 800aa42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa46:	461a      	mov	r2, r3
 800aa48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa4a:	fbb3 f2f2 	udiv	r2, r3, r2
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	685b      	ldr	r3, [r3, #4]
 800aa52:	085b      	lsrs	r3, r3, #1
 800aa54:	441a      	add	r2, r3
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa5e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa62:	2b0f      	cmp	r3, #15
 800aa64:	d909      	bls.n	800aa7a <UART_SetConfig+0xa8e>
 800aa66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa6c:	d205      	bcs.n	800aa7a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aa6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa70:	b29a      	uxth	r2, r3
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	60da      	str	r2, [r3, #12]
 800aa78:	e002      	b.n	800aa80 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	2201      	movs	r2, #1
 800aa84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	2200      	movs	r2, #0
 800aa94:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800aa9c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3748      	adds	r7, #72	; 0x48
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aaaa:	bf00      	nop
 800aaac:	58024400 	.word	0x58024400
 800aab0:	03d09000 	.word	0x03d09000
 800aab4:	003d0900 	.word	0x003d0900
 800aab8:	0800c168 	.word	0x0800c168

0800aabc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b083      	sub	sp, #12
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aac8:	f003 0301 	and.w	r3, r3, #1
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d00a      	beq.n	800aae6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	685b      	ldr	r3, [r3, #4]
 800aad6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	430a      	orrs	r2, r1
 800aae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaea:	f003 0302 	and.w	r3, r3, #2
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d00a      	beq.n	800ab08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	685b      	ldr	r3, [r3, #4]
 800aaf8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	430a      	orrs	r2, r1
 800ab06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab0c:	f003 0304 	and.w	r3, r3, #4
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d00a      	beq.n	800ab2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	685b      	ldr	r3, [r3, #4]
 800ab1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	430a      	orrs	r2, r1
 800ab28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab2e:	f003 0308 	and.w	r3, r3, #8
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d00a      	beq.n	800ab4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	685b      	ldr	r3, [r3, #4]
 800ab3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	430a      	orrs	r2, r1
 800ab4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab50:	f003 0310 	and.w	r3, r3, #16
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d00a      	beq.n	800ab6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	689b      	ldr	r3, [r3, #8]
 800ab5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	430a      	orrs	r2, r1
 800ab6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab72:	f003 0320 	and.w	r3, r3, #32
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d00a      	beq.n	800ab90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	689b      	ldr	r3, [r3, #8]
 800ab80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	430a      	orrs	r2, r1
 800ab8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d01a      	beq.n	800abd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	430a      	orrs	r2, r1
 800abb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800abba:	d10a      	bne.n	800abd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	430a      	orrs	r2, r1
 800abd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d00a      	beq.n	800abf4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	430a      	orrs	r2, r1
 800abf2:	605a      	str	r2, [r3, #4]
  }
}
 800abf4:	bf00      	nop
 800abf6:	370c      	adds	r7, #12
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr

0800ac00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b098      	sub	sp, #96	; 0x60
 800ac04:	af02      	add	r7, sp, #8
 800ac06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ac10:	f7f7 fa88 	bl	8002124 <HAL_GetTick>
 800ac14:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f003 0308 	and.w	r3, r3, #8
 800ac20:	2b08      	cmp	r3, #8
 800ac22:	d12f      	bne.n	800ac84 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ac28:	9300      	str	r3, [sp, #0]
 800ac2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f000 f88e 	bl	800ad54 <UART_WaitOnFlagUntilTimeout>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d022      	beq.n	800ac84 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac46:	e853 3f00 	ldrex	r3, [r3]
 800ac4a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ac4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac52:	653b      	str	r3, [r7, #80]	; 0x50
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	461a      	mov	r2, r3
 800ac5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac5c:	647b      	str	r3, [r7, #68]	; 0x44
 800ac5e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ac62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac64:	e841 2300 	strex	r3, r2, [r1]
 800ac68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ac6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d1e6      	bne.n	800ac3e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2220      	movs	r2, #32
 800ac74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac80:	2303      	movs	r3, #3
 800ac82:	e063      	b.n	800ad4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f003 0304 	and.w	r3, r3, #4
 800ac8e:	2b04      	cmp	r3, #4
 800ac90:	d149      	bne.n	800ad26 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ac96:	9300      	str	r3, [sp, #0]
 800ac98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f000 f857 	bl	800ad54 <UART_WaitOnFlagUntilTimeout>
 800aca6:	4603      	mov	r3, r0
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d03c      	beq.n	800ad26 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb4:	e853 3f00 	ldrex	r3, [r3]
 800acb8:	623b      	str	r3, [r7, #32]
   return(result);
 800acba:	6a3b      	ldr	r3, [r7, #32]
 800acbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800acc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	461a      	mov	r2, r3
 800acc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acca:	633b      	str	r3, [r7, #48]	; 0x30
 800accc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800acd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acd2:	e841 2300 	strex	r3, r2, [r1]
 800acd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800acd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d1e6      	bne.n	800acac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	3308      	adds	r3, #8
 800ace4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	e853 3f00 	ldrex	r3, [r3]
 800acec:	60fb      	str	r3, [r7, #12]
   return(result);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	f023 0301 	bic.w	r3, r3, #1
 800acf4:	64bb      	str	r3, [r7, #72]	; 0x48
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	3308      	adds	r3, #8
 800acfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800acfe:	61fa      	str	r2, [r7, #28]
 800ad00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad02:	69b9      	ldr	r1, [r7, #24]
 800ad04:	69fa      	ldr	r2, [r7, #28]
 800ad06:	e841 2300 	strex	r3, r2, [r1]
 800ad0a:	617b      	str	r3, [r7, #20]
   return(result);
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d1e5      	bne.n	800acde <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2220      	movs	r2, #32
 800ad16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad22:	2303      	movs	r3, #3
 800ad24:	e012      	b.n	800ad4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2220      	movs	r2, #32
 800ad2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2220      	movs	r2, #32
 800ad32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2200      	movs	r2, #0
 800ad46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ad4a:	2300      	movs	r3, #0
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3758      	adds	r7, #88	; 0x58
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b084      	sub	sp, #16
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	60f8      	str	r0, [r7, #12]
 800ad5c:	60b9      	str	r1, [r7, #8]
 800ad5e:	603b      	str	r3, [r7, #0]
 800ad60:	4613      	mov	r3, r2
 800ad62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad64:	e049      	b.n	800adfa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad66:	69bb      	ldr	r3, [r7, #24]
 800ad68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad6c:	d045      	beq.n	800adfa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad6e:	f7f7 f9d9 	bl	8002124 <HAL_GetTick>
 800ad72:	4602      	mov	r2, r0
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	1ad3      	subs	r3, r2, r3
 800ad78:	69ba      	ldr	r2, [r7, #24]
 800ad7a:	429a      	cmp	r2, r3
 800ad7c:	d302      	bcc.n	800ad84 <UART_WaitOnFlagUntilTimeout+0x30>
 800ad7e:	69bb      	ldr	r3, [r7, #24]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d101      	bne.n	800ad88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ad84:	2303      	movs	r3, #3
 800ad86:	e048      	b.n	800ae1a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f003 0304 	and.w	r3, r3, #4
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d031      	beq.n	800adfa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	69db      	ldr	r3, [r3, #28]
 800ad9c:	f003 0308 	and.w	r3, r3, #8
 800ada0:	2b08      	cmp	r3, #8
 800ada2:	d110      	bne.n	800adc6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	2208      	movs	r2, #8
 800adaa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800adac:	68f8      	ldr	r0, [r7, #12]
 800adae:	f000 f839 	bl	800ae24 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2208      	movs	r2, #8
 800adb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2200      	movs	r2, #0
 800adbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800adc2:	2301      	movs	r3, #1
 800adc4:	e029      	b.n	800ae1a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	69db      	ldr	r3, [r3, #28]
 800adcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800add0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800add4:	d111      	bne.n	800adfa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800adde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ade0:	68f8      	ldr	r0, [r7, #12]
 800ade2:	f000 f81f 	bl	800ae24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2220      	movs	r2, #32
 800adea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	2200      	movs	r2, #0
 800adf2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800adf6:	2303      	movs	r3, #3
 800adf8:	e00f      	b.n	800ae1a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	69da      	ldr	r2, [r3, #28]
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	4013      	ands	r3, r2
 800ae04:	68ba      	ldr	r2, [r7, #8]
 800ae06:	429a      	cmp	r2, r3
 800ae08:	bf0c      	ite	eq
 800ae0a:	2301      	moveq	r3, #1
 800ae0c:	2300      	movne	r3, #0
 800ae0e:	b2db      	uxtb	r3, r3
 800ae10:	461a      	mov	r2, r3
 800ae12:	79fb      	ldrb	r3, [r7, #7]
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d0a6      	beq.n	800ad66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ae18:	2300      	movs	r3, #0
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3710      	adds	r7, #16
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
	...

0800ae24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b095      	sub	sp, #84	; 0x54
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae34:	e853 3f00 	ldrex	r3, [r3]
 800ae38:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ae3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ae40:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	461a      	mov	r2, r3
 800ae48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae4a:	643b      	str	r3, [r7, #64]	; 0x40
 800ae4c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ae50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ae52:	e841 2300 	strex	r3, r2, [r1]
 800ae56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ae58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d1e6      	bne.n	800ae2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	3308      	adds	r3, #8
 800ae64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae66:	6a3b      	ldr	r3, [r7, #32]
 800ae68:	e853 3f00 	ldrex	r3, [r3]
 800ae6c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae6e:	69fa      	ldr	r2, [r7, #28]
 800ae70:	4b1e      	ldr	r3, [pc, #120]	; (800aeec <UART_EndRxTransfer+0xc8>)
 800ae72:	4013      	ands	r3, r2
 800ae74:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	3308      	adds	r3, #8
 800ae7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ae80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae86:	e841 2300 	strex	r3, r2, [r1]
 800ae8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d1e5      	bne.n	800ae5e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d118      	bne.n	800aecc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	e853 3f00 	ldrex	r3, [r3]
 800aea6:	60bb      	str	r3, [r7, #8]
   return(result);
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	f023 0310 	bic.w	r3, r3, #16
 800aeae:	647b      	str	r3, [r7, #68]	; 0x44
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	461a      	mov	r2, r3
 800aeb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aeb8:	61bb      	str	r3, [r7, #24]
 800aeba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aebc:	6979      	ldr	r1, [r7, #20]
 800aebe:	69ba      	ldr	r2, [r7, #24]
 800aec0:	e841 2300 	strex	r3, r2, [r1]
 800aec4:	613b      	str	r3, [r7, #16]
   return(result);
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d1e6      	bne.n	800ae9a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2220      	movs	r2, #32
 800aed0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2200      	movs	r2, #0
 800aed8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2200      	movs	r2, #0
 800aede:	675a      	str	r2, [r3, #116]	; 0x74
}
 800aee0:	bf00      	nop
 800aee2:	3754      	adds	r7, #84	; 0x54
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr
 800aeec:	effffffe 	.word	0xeffffffe

0800aef0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b085      	sub	sp, #20
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aefe:	2b01      	cmp	r3, #1
 800af00:	d101      	bne.n	800af06 <HAL_UARTEx_DisableFifoMode+0x16>
 800af02:	2302      	movs	r3, #2
 800af04:	e027      	b.n	800af56 <HAL_UARTEx_DisableFifoMode+0x66>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2201      	movs	r2, #1
 800af0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2224      	movs	r2, #36	; 0x24
 800af12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	681a      	ldr	r2, [r3, #0]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f022 0201 	bic.w	r2, r2, #1
 800af2c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800af34:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2200      	movs	r2, #0
 800af3a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	68fa      	ldr	r2, [r7, #12]
 800af42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2220      	movs	r2, #32
 800af48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2200      	movs	r2, #0
 800af50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800af54:	2300      	movs	r3, #0
}
 800af56:	4618      	mov	r0, r3
 800af58:	3714      	adds	r7, #20
 800af5a:	46bd      	mov	sp, r7
 800af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af60:	4770      	bx	lr

0800af62 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af62:	b580      	push	{r7, lr}
 800af64:	b084      	sub	sp, #16
 800af66:	af00      	add	r7, sp, #0
 800af68:	6078      	str	r0, [r7, #4]
 800af6a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800af72:	2b01      	cmp	r3, #1
 800af74:	d101      	bne.n	800af7a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800af76:	2302      	movs	r3, #2
 800af78:	e02d      	b.n	800afd6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2201      	movs	r2, #1
 800af7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2224      	movs	r2, #36	; 0x24
 800af86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	681a      	ldr	r2, [r3, #0]
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f022 0201 	bic.w	r2, r2, #1
 800afa0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	689b      	ldr	r3, [r3, #8]
 800afa8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	683a      	ldr	r2, [r7, #0]
 800afb2:	430a      	orrs	r2, r1
 800afb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f000 f850 	bl	800b05c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	68fa      	ldr	r2, [r7, #12]
 800afc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2220      	movs	r2, #32
 800afc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2200      	movs	r2, #0
 800afd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800afd4:	2300      	movs	r3, #0
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3710      	adds	r7, #16
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}

0800afde <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800afde:	b580      	push	{r7, lr}
 800afe0:	b084      	sub	sp, #16
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	6078      	str	r0, [r7, #4]
 800afe6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800afee:	2b01      	cmp	r3, #1
 800aff0:	d101      	bne.n	800aff6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aff2:	2302      	movs	r3, #2
 800aff4:	e02d      	b.n	800b052 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2201      	movs	r2, #1
 800affa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2224      	movs	r2, #36	; 0x24
 800b002:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	681a      	ldr	r2, [r3, #0]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f022 0201 	bic.w	r2, r2, #1
 800b01c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	689b      	ldr	r3, [r3, #8]
 800b024:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	683a      	ldr	r2, [r7, #0]
 800b02e:	430a      	orrs	r2, r1
 800b030:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 f812 	bl	800b05c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	68fa      	ldr	r2, [r7, #12]
 800b03e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2220      	movs	r2, #32
 800b044:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2200      	movs	r2, #0
 800b04c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b050:	2300      	movs	r3, #0
}
 800b052:	4618      	mov	r0, r3
 800b054:	3710      	adds	r7, #16
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
	...

0800b05c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b085      	sub	sp, #20
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d108      	bne.n	800b07e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2201      	movs	r2, #1
 800b070:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2201      	movs	r2, #1
 800b078:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b07c:	e031      	b.n	800b0e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b07e:	2310      	movs	r3, #16
 800b080:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b082:	2310      	movs	r3, #16
 800b084:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	689b      	ldr	r3, [r3, #8]
 800b08c:	0e5b      	lsrs	r3, r3, #25
 800b08e:	b2db      	uxtb	r3, r3
 800b090:	f003 0307 	and.w	r3, r3, #7
 800b094:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	689b      	ldr	r3, [r3, #8]
 800b09c:	0f5b      	lsrs	r3, r3, #29
 800b09e:	b2db      	uxtb	r3, r3
 800b0a0:	f003 0307 	and.w	r3, r3, #7
 800b0a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b0a6:	7bbb      	ldrb	r3, [r7, #14]
 800b0a8:	7b3a      	ldrb	r2, [r7, #12]
 800b0aa:	4911      	ldr	r1, [pc, #68]	; (800b0f0 <UARTEx_SetNbDataToProcess+0x94>)
 800b0ac:	5c8a      	ldrb	r2, [r1, r2]
 800b0ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b0b2:	7b3a      	ldrb	r2, [r7, #12]
 800b0b4:	490f      	ldr	r1, [pc, #60]	; (800b0f4 <UARTEx_SetNbDataToProcess+0x98>)
 800b0b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b0b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0bc:	b29a      	uxth	r2, r3
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b0c4:	7bfb      	ldrb	r3, [r7, #15]
 800b0c6:	7b7a      	ldrb	r2, [r7, #13]
 800b0c8:	4909      	ldr	r1, [pc, #36]	; (800b0f0 <UARTEx_SetNbDataToProcess+0x94>)
 800b0ca:	5c8a      	ldrb	r2, [r1, r2]
 800b0cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b0d0:	7b7a      	ldrb	r2, [r7, #13]
 800b0d2:	4908      	ldr	r1, [pc, #32]	; (800b0f4 <UARTEx_SetNbDataToProcess+0x98>)
 800b0d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b0d6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0da:	b29a      	uxth	r2, r3
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b0e2:	bf00      	nop
 800b0e4:	3714      	adds	r7, #20
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ec:	4770      	bx	lr
 800b0ee:	bf00      	nop
 800b0f0:	0800c180 	.word	0x0800c180
 800b0f4:	0800c188 	.word	0x0800c188

0800b0f8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b0f8:	b084      	sub	sp, #16
 800b0fa:	b480      	push	{r7}
 800b0fc:	b085      	sub	sp, #20
 800b0fe:	af00      	add	r7, sp, #0
 800b100:	6078      	str	r0, [r7, #4]
 800b102:	f107 001c 	add.w	r0, r7, #28
 800b106:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b10a:	2300      	movs	r3, #0
 800b10c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800b10e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800b110:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800b112:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800b114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800b116:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800b118:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800b11a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800b11e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800b120:	68fa      	ldr	r2, [r7, #12]
 800b122:	4313      	orrs	r3, r2
 800b124:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	685a      	ldr	r2, [r3, #4]
 800b12a:	4b07      	ldr	r3, [pc, #28]	; (800b148 <SDMMC_Init+0x50>)
 800b12c:	4013      	ands	r3, r2
 800b12e:	68fa      	ldr	r2, [r7, #12]
 800b130:	431a      	orrs	r2, r3
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b136:	2300      	movs	r3, #0
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3714      	adds	r7, #20
 800b13c:	46bd      	mov	sp, r7
 800b13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b142:	b004      	add	sp, #16
 800b144:	4770      	bx	lr
 800b146:	bf00      	nop
 800b148:	ffc02c00 	.word	0xffc02c00

0800b14c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b083      	sub	sp, #12
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	370c      	adds	r7, #12
 800b15e:	46bd      	mov	sp, r7
 800b160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b164:	4770      	bx	lr

0800b166 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b166:	b480      	push	{r7}
 800b168:	b083      	sub	sp, #12
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f043 0203 	orr.w	r2, r3, #3
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b17a:	2300      	movs	r3, #0
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	370c      	adds	r7, #12
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr

0800b188 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b188:	b480      	push	{r7}
 800b18a:	b083      	sub	sp, #12
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f003 0303 	and.w	r3, r3, #3
}
 800b198:	4618      	mov	r0, r3
 800b19a:	370c      	adds	r7, #12
 800b19c:	46bd      	mov	sp, r7
 800b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a2:	4770      	bx	lr

0800b1a4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b085      	sub	sp, #20
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	681a      	ldr	r2, [r3, #0]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b1c2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800b1c8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800b1ce:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b1d0:	68fa      	ldr	r2, [r7, #12]
 800b1d2:	4313      	orrs	r3, r2
 800b1d4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	68da      	ldr	r2, [r3, #12]
 800b1da:	4b06      	ldr	r3, [pc, #24]	; (800b1f4 <SDMMC_SendCommand+0x50>)
 800b1dc:	4013      	ands	r3, r2
 800b1de:	68fa      	ldr	r2, [r7, #12]
 800b1e0:	431a      	orrs	r2, r3
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b1e6:	2300      	movs	r3, #0
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3714      	adds	r7, #20
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f2:	4770      	bx	lr
 800b1f4:	fffee0c0 	.word	0xfffee0c0

0800b1f8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b083      	sub	sp, #12
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	691b      	ldr	r3, [r3, #16]
 800b204:	b2db      	uxtb	r3, r3
}
 800b206:	4618      	mov	r0, r3
 800b208:	370c      	adds	r7, #12
 800b20a:	46bd      	mov	sp, r7
 800b20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b210:	4770      	bx	lr

0800b212 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b212:	b480      	push	{r7}
 800b214:	b085      	sub	sp, #20
 800b216:	af00      	add	r7, sp, #0
 800b218:	6078      	str	r0, [r7, #4]
 800b21a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	3314      	adds	r3, #20
 800b220:	461a      	mov	r2, r3
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	4413      	add	r3, r2
 800b226:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3714      	adds	r7, #20
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr

0800b238 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800b238:	b480      	push	{r7}
 800b23a:	b085      	sub	sp, #20
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b242:	2300      	movs	r3, #0
 800b244:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	681a      	ldr	r2, [r3, #0]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	685a      	ldr	r2, [r3, #4]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b25e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800b264:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800b26a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b26c:	68fa      	ldr	r2, [r7, #12]
 800b26e:	4313      	orrs	r3, r2
 800b270:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b276:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	431a      	orrs	r2, r3
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b282:	2300      	movs	r3, #0

}
 800b284:	4618      	mov	r0, r3
 800b286:	3714      	adds	r7, #20
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr

0800b290 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b088      	sub	sp, #32
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b29e:	2310      	movs	r3, #16
 800b2a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b2a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b2ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b2b2:	f107 0308 	add.w	r3, r7, #8
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f7ff ff73 	bl	800b1a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b2be:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2c2:	2110      	movs	r1, #16
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f000 f995 	bl	800b5f4 <SDMMC_GetCmdResp1>
 800b2ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2cc:	69fb      	ldr	r3, [r7, #28]
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3720      	adds	r7, #32
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}

0800b2d6 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800b2d6:	b580      	push	{r7, lr}
 800b2d8:	b088      	sub	sp, #32
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	6078      	str	r0, [r7, #4]
 800b2de:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b2e4:	2307      	movs	r3, #7
 800b2e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b2e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b2f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b2f8:	f107 0308 	add.w	r3, r7, #8
 800b2fc:	4619      	mov	r1, r3
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f7ff ff50 	bl	800b1a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b304:	f241 3288 	movw	r2, #5000	; 0x1388
 800b308:	2107      	movs	r1, #7
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 f972 	bl	800b5f4 <SDMMC_GetCmdResp1>
 800b310:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b312:	69fb      	ldr	r3, [r7, #28]
}
 800b314:	4618      	mov	r0, r3
 800b316:	3720      	adds	r7, #32
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}

0800b31c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b088      	sub	sp, #32
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b324:	2300      	movs	r3, #0
 800b326:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b328:	2300      	movs	r3, #0
 800b32a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b32c:	2300      	movs	r3, #0
 800b32e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b330:	2300      	movs	r3, #0
 800b332:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b338:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b33a:	f107 0308 	add.w	r3, r7, #8
 800b33e:	4619      	mov	r1, r3
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f7ff ff2f 	bl	800b1a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f000 fb96 	bl	800ba78 <SDMMC_GetCmdError>
 800b34c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b34e:	69fb      	ldr	r3, [r7, #28]
}
 800b350:	4618      	mov	r0, r3
 800b352:	3720      	adds	r7, #32
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}

0800b358 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b088      	sub	sp, #32
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b360:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b364:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b366:	2308      	movs	r3, #8
 800b368:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b36a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b36e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b370:	2300      	movs	r3, #0
 800b372:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b378:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b37a:	f107 0308 	add.w	r3, r7, #8
 800b37e:	4619      	mov	r1, r3
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f7ff ff0f 	bl	800b1a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f000 fb28 	bl	800b9dc <SDMMC_GetCmdResp7>
 800b38c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b38e:	69fb      	ldr	r3, [r7, #28]
}
 800b390:	4618      	mov	r0, r3
 800b392:	3720      	adds	r7, #32
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}

0800b398 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b088      	sub	sp, #32
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b3a6:	2337      	movs	r3, #55	; 0x37
 800b3a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b3b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3ba:	f107 0308 	add.w	r3, r7, #8
 800b3be:	4619      	mov	r1, r3
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f7ff feef 	bl	800b1a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b3c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3ca:	2137      	movs	r1, #55	; 0x37
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f000 f911 	bl	800b5f4 <SDMMC_GetCmdResp1>
 800b3d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3d4:	69fb      	ldr	r3, [r7, #28]
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3720      	adds	r7, #32
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}

0800b3de <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b3de:	b580      	push	{r7, lr}
 800b3e0:	b088      	sub	sp, #32
 800b3e2:	af00      	add	r7, sp, #0
 800b3e4:	6078      	str	r0, [r7, #4]
 800b3e6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b3ec:	2329      	movs	r3, #41	; 0x29
 800b3ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b3fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b400:	f107 0308 	add.w	r3, r7, #8
 800b404:	4619      	mov	r1, r3
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f7ff fecc 	bl	800b1a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f000 fa2d 	bl	800b86c <SDMMC_GetCmdResp3>
 800b412:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b414:	69fb      	ldr	r3, [r7, #28]
}
 800b416:	4618      	mov	r0, r3
 800b418:	3720      	adds	r7, #32
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}

0800b41e <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b41e:	b580      	push	{r7, lr}
 800b420:	b088      	sub	sp, #32
 800b422:	af00      	add	r7, sp, #0
 800b424:	6078      	str	r0, [r7, #4]
 800b426:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b42c:	2306      	movs	r3, #6
 800b42e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b430:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b434:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b436:	2300      	movs	r3, #0
 800b438:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b43a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b43e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b440:	f107 0308 	add.w	r3, r7, #8
 800b444:	4619      	mov	r1, r3
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f7ff feac 	bl	800b1a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b44c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b450:	2106      	movs	r1, #6
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f000 f8ce 	bl	800b5f4 <SDMMC_GetCmdResp1>
 800b458:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b45a:	69fb      	ldr	r3, [r7, #28]
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3720      	adds	r7, #32
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}

0800b464 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b088      	sub	sp, #32
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b46c:	2300      	movs	r3, #0
 800b46e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b470:	2333      	movs	r3, #51	; 0x33
 800b472:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b474:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b478:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b47a:	2300      	movs	r3, #0
 800b47c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b47e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b482:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b484:	f107 0308 	add.w	r3, r7, #8
 800b488:	4619      	mov	r1, r3
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f7ff fe8a 	bl	800b1a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b490:	f241 3288 	movw	r2, #5000	; 0x1388
 800b494:	2133      	movs	r1, #51	; 0x33
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f000 f8ac 	bl	800b5f4 <SDMMC_GetCmdResp1>
 800b49c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b49e:	69fb      	ldr	r3, [r7, #28]
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3720      	adds	r7, #32
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b088      	sub	sp, #32
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b4b4:	2302      	movs	r3, #2
 800b4b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b4b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b4bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4c8:	f107 0308 	add.w	r3, r7, #8
 800b4cc:	4619      	mov	r1, r3
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f7ff fe68 	bl	800b1a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f000 f97f 	bl	800b7d8 <SDMMC_GetCmdResp2>
 800b4da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4dc:	69fb      	ldr	r3, [r7, #28]
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3720      	adds	r7, #32
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}

0800b4e6 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b4e6:	b580      	push	{r7, lr}
 800b4e8:	b088      	sub	sp, #32
 800b4ea:	af00      	add	r7, sp, #0
 800b4ec:	6078      	str	r0, [r7, #4]
 800b4ee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b4f4:	2309      	movs	r3, #9
 800b4f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b4f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b4fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4fe:	2300      	movs	r3, #0
 800b500:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b502:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b506:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b508:	f107 0308 	add.w	r3, r7, #8
 800b50c:	4619      	mov	r1, r3
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f7ff fe48 	bl	800b1a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f000 f95f 	bl	800b7d8 <SDMMC_GetCmdResp2>
 800b51a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b51c:	69fb      	ldr	r3, [r7, #28]
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3720      	adds	r7, #32
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}

0800b526 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b526:	b580      	push	{r7, lr}
 800b528:	b088      	sub	sp, #32
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	6078      	str	r0, [r7, #4]
 800b52e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b530:	2300      	movs	r3, #0
 800b532:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b534:	2303      	movs	r3, #3
 800b536:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b538:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b53c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b53e:	2300      	movs	r3, #0
 800b540:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b542:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b546:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b548:	f107 0308 	add.w	r3, r7, #8
 800b54c:	4619      	mov	r1, r3
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f7ff fe28 	bl	800b1a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b554:	683a      	ldr	r2, [r7, #0]
 800b556:	2103      	movs	r1, #3
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f000 f9c7 	bl	800b8ec <SDMMC_GetCmdResp6>
 800b55e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b560:	69fb      	ldr	r3, [r7, #28]
}
 800b562:	4618      	mov	r0, r3
 800b564:	3720      	adds	r7, #32
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}

0800b56a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b56a:	b580      	push	{r7, lr}
 800b56c:	b088      	sub	sp, #32
 800b56e:	af00      	add	r7, sp, #0
 800b570:	6078      	str	r0, [r7, #4]
 800b572:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b578:	230d      	movs	r3, #13
 800b57a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b57c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b580:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b582:	2300      	movs	r3, #0
 800b584:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b586:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b58a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b58c:	f107 0308 	add.w	r3, r7, #8
 800b590:	4619      	mov	r1, r3
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f7ff fe06 	bl	800b1a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b598:	f241 3288 	movw	r2, #5000	; 0x1388
 800b59c:	210d      	movs	r1, #13
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f000 f828 	bl	800b5f4 <SDMMC_GetCmdResp1>
 800b5a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5a6:	69fb      	ldr	r3, [r7, #28]
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3720      	adds	r7, #32
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}

0800b5b0 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b088      	sub	sp, #32
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b5bc:	230d      	movs	r3, #13
 800b5be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5d0:	f107 0308 	add.w	r3, r7, #8
 800b5d4:	4619      	mov	r1, r3
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f7ff fde4 	bl	800b1a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b5dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5e0:	210d      	movs	r1, #13
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 f806 	bl	800b5f4 <SDMMC_GetCmdResp1>
 800b5e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5ea:	69fb      	ldr	r3, [r7, #28]
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3720      	adds	r7, #32
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b088      	sub	sp, #32
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	60f8      	str	r0, [r7, #12]
 800b5fc:	460b      	mov	r3, r1
 800b5fe:	607a      	str	r2, [r7, #4]
 800b600:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b602:	4b70      	ldr	r3, [pc, #448]	; (800b7c4 <SDMMC_GetCmdResp1+0x1d0>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	4a70      	ldr	r2, [pc, #448]	; (800b7c8 <SDMMC_GetCmdResp1+0x1d4>)
 800b608:	fba2 2303 	umull	r2, r3, r2, r3
 800b60c:	0a5a      	lsrs	r2, r3, #9
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	fb02 f303 	mul.w	r3, r2, r3
 800b614:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b616:	69fb      	ldr	r3, [r7, #28]
 800b618:	1e5a      	subs	r2, r3, #1
 800b61a:	61fa      	str	r2, [r7, #28]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d102      	bne.n	800b626 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b620:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b624:	e0c9      	b.n	800b7ba <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b62a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b62c:	69ba      	ldr	r2, [r7, #24]
 800b62e:	4b67      	ldr	r3, [pc, #412]	; (800b7cc <SDMMC_GetCmdResp1+0x1d8>)
 800b630:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b632:	2b00      	cmp	r3, #0
 800b634:	d0ef      	beq.n	800b616 <SDMMC_GetCmdResp1+0x22>
 800b636:	69bb      	ldr	r3, [r7, #24]
 800b638:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d1ea      	bne.n	800b616 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b644:	f003 0304 	and.w	r3, r3, #4
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d004      	beq.n	800b656 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	2204      	movs	r2, #4
 800b650:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b652:	2304      	movs	r3, #4
 800b654:	e0b1      	b.n	800b7ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b65a:	f003 0301 	and.w	r3, r3, #1
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d004      	beq.n	800b66c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	2201      	movs	r2, #1
 800b666:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b668:	2301      	movs	r3, #1
 800b66a:	e0a6      	b.n	800b7ba <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	4a58      	ldr	r2, [pc, #352]	; (800b7d0 <SDMMC_GetCmdResp1+0x1dc>)
 800b670:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b672:	68f8      	ldr	r0, [r7, #12]
 800b674:	f7ff fdc0 	bl	800b1f8 <SDMMC_GetCommandResponse>
 800b678:	4603      	mov	r3, r0
 800b67a:	461a      	mov	r2, r3
 800b67c:	7afb      	ldrb	r3, [r7, #11]
 800b67e:	4293      	cmp	r3, r2
 800b680:	d001      	beq.n	800b686 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b682:	2301      	movs	r3, #1
 800b684:	e099      	b.n	800b7ba <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b686:	2100      	movs	r1, #0
 800b688:	68f8      	ldr	r0, [r7, #12]
 800b68a:	f7ff fdc2 	bl	800b212 <SDMMC_GetResponse>
 800b68e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b690:	697a      	ldr	r2, [r7, #20]
 800b692:	4b50      	ldr	r3, [pc, #320]	; (800b7d4 <SDMMC_GetCmdResp1+0x1e0>)
 800b694:	4013      	ands	r3, r2
 800b696:	2b00      	cmp	r3, #0
 800b698:	d101      	bne.n	800b69e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b69a:	2300      	movs	r3, #0
 800b69c:	e08d      	b.n	800b7ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	da02      	bge.n	800b6aa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b6a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b6a8:	e087      	b.n	800b7ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d001      	beq.n	800b6b8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b6b4:	2340      	movs	r3, #64	; 0x40
 800b6b6:	e080      	b.n	800b7ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d001      	beq.n	800b6c6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b6c2:	2380      	movs	r3, #128	; 0x80
 800b6c4:	e079      	b.n	800b7ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d002      	beq.n	800b6d6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b6d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6d4:	e071      	b.n	800b7ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d002      	beq.n	800b6e6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b6e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6e4:	e069      	b.n	800b7ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d002      	beq.n	800b6f6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b6f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6f4:	e061      	b.n	800b7ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d002      	beq.n	800b706 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b700:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b704:	e059      	b.n	800b7ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d002      	beq.n	800b716 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b714:	e051      	b.n	800b7ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d002      	beq.n	800b726 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b720:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b724:	e049      	b.n	800b7ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d002      	beq.n	800b736 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b730:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b734:	e041      	b.n	800b7ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d002      	beq.n	800b746 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b740:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b744:	e039      	b.n	800b7ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d002      	beq.n	800b756 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b750:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b754:	e031      	b.n	800b7ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d002      	beq.n	800b766 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b760:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b764:	e029      	b.n	800b7ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d002      	beq.n	800b776 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b770:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b774:	e021      	b.n	800b7ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b776:	697b      	ldr	r3, [r7, #20]
 800b778:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d002      	beq.n	800b786 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b780:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b784:	e019      	b.n	800b7ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d002      	beq.n	800b796 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b790:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b794:	e011      	b.n	800b7ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d002      	beq.n	800b7a6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b7a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b7a4:	e009      	b.n	800b7ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	f003 0308 	and.w	r3, r3, #8
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d002      	beq.n	800b7b6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b7b0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b7b4:	e001      	b.n	800b7ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b7b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3720      	adds	r7, #32
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
 800b7c2:	bf00      	nop
 800b7c4:	24000000 	.word	0x24000000
 800b7c8:	10624dd3 	.word	0x10624dd3
 800b7cc:	00200045 	.word	0x00200045
 800b7d0:	002000c5 	.word	0x002000c5
 800b7d4:	fdffe008 	.word	0xfdffe008

0800b7d8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b085      	sub	sp, #20
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b7e0:	4b1f      	ldr	r3, [pc, #124]	; (800b860 <SDMMC_GetCmdResp2+0x88>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	4a1f      	ldr	r2, [pc, #124]	; (800b864 <SDMMC_GetCmdResp2+0x8c>)
 800b7e6:	fba2 2303 	umull	r2, r3, r2, r3
 800b7ea:	0a5b      	lsrs	r3, r3, #9
 800b7ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7f0:	fb02 f303 	mul.w	r3, r2, r3
 800b7f4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	1e5a      	subs	r2, r3, #1
 800b7fa:	60fa      	str	r2, [r7, #12]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d102      	bne.n	800b806 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b800:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b804:	e026      	b.n	800b854 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b80a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b812:	2b00      	cmp	r3, #0
 800b814:	d0ef      	beq.n	800b7f6 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d1ea      	bne.n	800b7f6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b824:	f003 0304 	and.w	r3, r3, #4
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d004      	beq.n	800b836 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2204      	movs	r2, #4
 800b830:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b832:	2304      	movs	r3, #4
 800b834:	e00e      	b.n	800b854 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b83a:	f003 0301 	and.w	r3, r3, #1
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d004      	beq.n	800b84c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2201      	movs	r2, #1
 800b846:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b848:	2301      	movs	r3, #1
 800b84a:	e003      	b.n	800b854 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	4a06      	ldr	r2, [pc, #24]	; (800b868 <SDMMC_GetCmdResp2+0x90>)
 800b850:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b852:	2300      	movs	r3, #0
}
 800b854:	4618      	mov	r0, r3
 800b856:	3714      	adds	r7, #20
 800b858:	46bd      	mov	sp, r7
 800b85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85e:	4770      	bx	lr
 800b860:	24000000 	.word	0x24000000
 800b864:	10624dd3 	.word	0x10624dd3
 800b868:	002000c5 	.word	0x002000c5

0800b86c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b86c:	b480      	push	{r7}
 800b86e:	b085      	sub	sp, #20
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b874:	4b1a      	ldr	r3, [pc, #104]	; (800b8e0 <SDMMC_GetCmdResp3+0x74>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	4a1a      	ldr	r2, [pc, #104]	; (800b8e4 <SDMMC_GetCmdResp3+0x78>)
 800b87a:	fba2 2303 	umull	r2, r3, r2, r3
 800b87e:	0a5b      	lsrs	r3, r3, #9
 800b880:	f241 3288 	movw	r2, #5000	; 0x1388
 800b884:	fb02 f303 	mul.w	r3, r2, r3
 800b888:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	1e5a      	subs	r2, r3, #1
 800b88e:	60fa      	str	r2, [r7, #12]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d102      	bne.n	800b89a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b894:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b898:	e01b      	b.n	800b8d2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b89e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d0ef      	beq.n	800b88a <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d1ea      	bne.n	800b88a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8b8:	f003 0304 	and.w	r3, r3, #4
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d004      	beq.n	800b8ca <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2204      	movs	r2, #4
 800b8c4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b8c6:	2304      	movs	r3, #4
 800b8c8:	e003      	b.n	800b8d2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	4a06      	ldr	r2, [pc, #24]	; (800b8e8 <SDMMC_GetCmdResp3+0x7c>)
 800b8ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b8d0:	2300      	movs	r3, #0
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3714      	adds	r7, #20
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8dc:	4770      	bx	lr
 800b8de:	bf00      	nop
 800b8e0:	24000000 	.word	0x24000000
 800b8e4:	10624dd3 	.word	0x10624dd3
 800b8e8:	002000c5 	.word	0x002000c5

0800b8ec <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b088      	sub	sp, #32
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	60f8      	str	r0, [r7, #12]
 800b8f4:	460b      	mov	r3, r1
 800b8f6:	607a      	str	r2, [r7, #4]
 800b8f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b8fa:	4b35      	ldr	r3, [pc, #212]	; (800b9d0 <SDMMC_GetCmdResp6+0xe4>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	4a35      	ldr	r2, [pc, #212]	; (800b9d4 <SDMMC_GetCmdResp6+0xe8>)
 800b900:	fba2 2303 	umull	r2, r3, r2, r3
 800b904:	0a5b      	lsrs	r3, r3, #9
 800b906:	f241 3288 	movw	r2, #5000	; 0x1388
 800b90a:	fb02 f303 	mul.w	r3, r2, r3
 800b90e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b910:	69fb      	ldr	r3, [r7, #28]
 800b912:	1e5a      	subs	r2, r3, #1
 800b914:	61fa      	str	r2, [r7, #28]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d102      	bne.n	800b920 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b91a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b91e:	e052      	b.n	800b9c6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b924:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b926:	69bb      	ldr	r3, [r7, #24]
 800b928:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d0ef      	beq.n	800b910 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b930:	69bb      	ldr	r3, [r7, #24]
 800b932:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b936:	2b00      	cmp	r3, #0
 800b938:	d1ea      	bne.n	800b910 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b93e:	f003 0304 	and.w	r3, r3, #4
 800b942:	2b00      	cmp	r3, #0
 800b944:	d004      	beq.n	800b950 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	2204      	movs	r2, #4
 800b94a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b94c:	2304      	movs	r3, #4
 800b94e:	e03a      	b.n	800b9c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b954:	f003 0301 	and.w	r3, r3, #1
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d004      	beq.n	800b966 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	2201      	movs	r2, #1
 800b960:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b962:	2301      	movs	r3, #1
 800b964:	e02f      	b.n	800b9c6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b966:	68f8      	ldr	r0, [r7, #12]
 800b968:	f7ff fc46 	bl	800b1f8 <SDMMC_GetCommandResponse>
 800b96c:	4603      	mov	r3, r0
 800b96e:	461a      	mov	r2, r3
 800b970:	7afb      	ldrb	r3, [r7, #11]
 800b972:	4293      	cmp	r3, r2
 800b974:	d001      	beq.n	800b97a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b976:	2301      	movs	r3, #1
 800b978:	e025      	b.n	800b9c6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	4a16      	ldr	r2, [pc, #88]	; (800b9d8 <SDMMC_GetCmdResp6+0xec>)
 800b97e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b980:	2100      	movs	r1, #0
 800b982:	68f8      	ldr	r0, [r7, #12]
 800b984:	f7ff fc45 	bl	800b212 <SDMMC_GetResponse>
 800b988:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b990:	2b00      	cmp	r3, #0
 800b992:	d106      	bne.n	800b9a2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	0c1b      	lsrs	r3, r3, #16
 800b998:	b29a      	uxth	r2, r3
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	e011      	b.n	800b9c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d002      	beq.n	800b9b2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b9ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b9b0:	e009      	b.n	800b9c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d002      	beq.n	800b9c2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b9bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b9c0:	e001      	b.n	800b9c6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b9c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	3720      	adds	r7, #32
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}
 800b9ce:	bf00      	nop
 800b9d0:	24000000 	.word	0x24000000
 800b9d4:	10624dd3 	.word	0x10624dd3
 800b9d8:	002000c5 	.word	0x002000c5

0800b9dc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b085      	sub	sp, #20
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b9e4:	4b22      	ldr	r3, [pc, #136]	; (800ba70 <SDMMC_GetCmdResp7+0x94>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	4a22      	ldr	r2, [pc, #136]	; (800ba74 <SDMMC_GetCmdResp7+0x98>)
 800b9ea:	fba2 2303 	umull	r2, r3, r2, r3
 800b9ee:	0a5b      	lsrs	r3, r3, #9
 800b9f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9f4:	fb02 f303 	mul.w	r3, r2, r3
 800b9f8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	1e5a      	subs	r2, r3, #1
 800b9fe:	60fa      	str	r2, [r7, #12]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d102      	bne.n	800ba0a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba08:	e02c      	b.n	800ba64 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba0e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d0ef      	beq.n	800b9fa <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d1ea      	bne.n	800b9fa <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba28:	f003 0304 	and.w	r3, r3, #4
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d004      	beq.n	800ba3a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2204      	movs	r2, #4
 800ba34:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba36:	2304      	movs	r3, #4
 800ba38:	e014      	b.n	800ba64 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba3e:	f003 0301 	and.w	r3, r3, #1
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d004      	beq.n	800ba50 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2201      	movs	r2, #1
 800ba4a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	e009      	b.n	800ba64 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d002      	beq.n	800ba62 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2240      	movs	r2, #64	; 0x40
 800ba60:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ba62:	2300      	movs	r3, #0

}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3714      	adds	r7, #20
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6e:	4770      	bx	lr
 800ba70:	24000000 	.word	0x24000000
 800ba74:	10624dd3 	.word	0x10624dd3

0800ba78 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b085      	sub	sp, #20
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ba80:	4b11      	ldr	r3, [pc, #68]	; (800bac8 <SDMMC_GetCmdError+0x50>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	4a11      	ldr	r2, [pc, #68]	; (800bacc <SDMMC_GetCmdError+0x54>)
 800ba86:	fba2 2303 	umull	r2, r3, r2, r3
 800ba8a:	0a5b      	lsrs	r3, r3, #9
 800ba8c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba90:	fb02 f303 	mul.w	r3, r2, r3
 800ba94:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	1e5a      	subs	r2, r3, #1
 800ba9a:	60fa      	str	r2, [r7, #12]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d102      	bne.n	800baa6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800baa0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800baa4:	e009      	b.n	800baba <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d0f1      	beq.n	800ba96 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	4a06      	ldr	r2, [pc, #24]	; (800bad0 <SDMMC_GetCmdError+0x58>)
 800bab6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800bab8:	2300      	movs	r3, #0
}
 800baba:	4618      	mov	r0, r3
 800babc:	3714      	adds	r7, #20
 800babe:	46bd      	mov	sp, r7
 800bac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac4:	4770      	bx	lr
 800bac6:	bf00      	nop
 800bac8:	24000000 	.word	0x24000000
 800bacc:	10624dd3 	.word	0x10624dd3
 800bad0:	002000c5 	.word	0x002000c5

0800bad4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bad4:	b084      	sub	sp, #16
 800bad6:	b580      	push	{r7, lr}
 800bad8:	b084      	sub	sp, #16
 800bada:	af00      	add	r7, sp, #0
 800badc:	6078      	str	r0, [r7, #4]
 800bade:	f107 001c 	add.w	r0, r7, #28
 800bae2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae8:	2b01      	cmp	r3, #1
 800baea:	d120      	bne.n	800bb2e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baf0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	68da      	ldr	r2, [r3, #12]
 800bafc:	4b2a      	ldr	r3, [pc, #168]	; (800bba8 <USB_CoreInit+0xd4>)
 800bafe:	4013      	ands	r3, r2
 800bb00:	687a      	ldr	r2, [r7, #4]
 800bb02:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	68db      	ldr	r3, [r3, #12]
 800bb08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bb10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb12:	2b01      	cmp	r3, #1
 800bb14:	d105      	bne.n	800bb22 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	68db      	ldr	r3, [r3, #12]
 800bb1a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f000 faac 	bl	800c080 <USB_CoreReset>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	73fb      	strb	r3, [r7, #15]
 800bb2c:	e01a      	b.n	800bb64 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	68db      	ldr	r3, [r3, #12]
 800bb32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f000 faa0 	bl	800c080 <USB_CoreReset>
 800bb40:	4603      	mov	r3, r0
 800bb42:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bb44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d106      	bne.n	800bb58 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb4e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	639a      	str	r2, [r3, #56]	; 0x38
 800bb56:	e005      	b.n	800bb64 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb66:	2b01      	cmp	r3, #1
 800bb68:	d116      	bne.n	800bb98 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb6e:	b29a      	uxth	r2, r3
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bb78:	4b0c      	ldr	r3, [pc, #48]	; (800bbac <USB_CoreInit+0xd8>)
 800bb7a:	4313      	orrs	r3, r2
 800bb7c:	687a      	ldr	r2, [r7, #4]
 800bb7e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	689b      	ldr	r3, [r3, #8]
 800bb84:	f043 0206 	orr.w	r2, r3, #6
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	689b      	ldr	r3, [r3, #8]
 800bb90:	f043 0220 	orr.w	r2, r3, #32
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bb98:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3710      	adds	r7, #16
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bba4:	b004      	add	sp, #16
 800bba6:	4770      	bx	lr
 800bba8:	ffbdffbf 	.word	0xffbdffbf
 800bbac:	03ee0000 	.word	0x03ee0000

0800bbb0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b083      	sub	sp, #12
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	689b      	ldr	r3, [r3, #8]
 800bbbc:	f023 0201 	bic.w	r2, r3, #1
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bbc4:	2300      	movs	r3, #0
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	370c      	adds	r7, #12
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd0:	4770      	bx	lr

0800bbd2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bbd2:	b580      	push	{r7, lr}
 800bbd4:	b084      	sub	sp, #16
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	6078      	str	r0, [r7, #4]
 800bbda:	460b      	mov	r3, r1
 800bbdc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	68db      	ldr	r3, [r3, #12]
 800bbe6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bbee:	78fb      	ldrb	r3, [r7, #3]
 800bbf0:	2b01      	cmp	r3, #1
 800bbf2:	d115      	bne.n	800bc20 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	68db      	ldr	r3, [r3, #12]
 800bbf8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bc00:	2001      	movs	r0, #1
 800bc02:	f7f6 fa9b 	bl	800213c <HAL_Delay>
      ms++;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	3301      	adds	r3, #1
 800bc0a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f000 fa29 	bl	800c064 <USB_GetMode>
 800bc12:	4603      	mov	r3, r0
 800bc14:	2b01      	cmp	r3, #1
 800bc16:	d01e      	beq.n	800bc56 <USB_SetCurrentMode+0x84>
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	2b31      	cmp	r3, #49	; 0x31
 800bc1c:	d9f0      	bls.n	800bc00 <USB_SetCurrentMode+0x2e>
 800bc1e:	e01a      	b.n	800bc56 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bc20:	78fb      	ldrb	r3, [r7, #3]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d115      	bne.n	800bc52 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	68db      	ldr	r3, [r3, #12]
 800bc2a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bc32:	2001      	movs	r0, #1
 800bc34:	f7f6 fa82 	bl	800213c <HAL_Delay>
      ms++;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	3301      	adds	r3, #1
 800bc3c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f000 fa10 	bl	800c064 <USB_GetMode>
 800bc44:	4603      	mov	r3, r0
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d005      	beq.n	800bc56 <USB_SetCurrentMode+0x84>
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	2b31      	cmp	r3, #49	; 0x31
 800bc4e:	d9f0      	bls.n	800bc32 <USB_SetCurrentMode+0x60>
 800bc50:	e001      	b.n	800bc56 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bc52:	2301      	movs	r3, #1
 800bc54:	e005      	b.n	800bc62 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	2b32      	cmp	r3, #50	; 0x32
 800bc5a:	d101      	bne.n	800bc60 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	e000      	b.n	800bc62 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bc60:	2300      	movs	r3, #0
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3710      	adds	r7, #16
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}
	...

0800bc6c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bc6c:	b084      	sub	sp, #16
 800bc6e:	b580      	push	{r7, lr}
 800bc70:	b086      	sub	sp, #24
 800bc72:	af00      	add	r7, sp, #0
 800bc74:	6078      	str	r0, [r7, #4]
 800bc76:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bc7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bc86:	2300      	movs	r3, #0
 800bc88:	613b      	str	r3, [r7, #16]
 800bc8a:	e009      	b.n	800bca0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bc8c:	687a      	ldr	r2, [r7, #4]
 800bc8e:	693b      	ldr	r3, [r7, #16]
 800bc90:	3340      	adds	r3, #64	; 0x40
 800bc92:	009b      	lsls	r3, r3, #2
 800bc94:	4413      	add	r3, r2
 800bc96:	2200      	movs	r2, #0
 800bc98:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	3301      	adds	r3, #1
 800bc9e:	613b      	str	r3, [r7, #16]
 800bca0:	693b      	ldr	r3, [r7, #16]
 800bca2:	2b0e      	cmp	r3, #14
 800bca4:	d9f2      	bls.n	800bc8c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d11c      	bne.n	800bce6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcb2:	685b      	ldr	r3, [r3, #4]
 800bcb4:	68fa      	ldr	r2, [r7, #12]
 800bcb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bcba:	f043 0302 	orr.w	r3, r3, #2
 800bcbe:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcc4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	601a      	str	r2, [r3, #0]
 800bce4:	e005      	b.n	800bcf2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bcf8:	461a      	mov	r2, r3
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd04:	4619      	mov	r1, r3
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	680b      	ldr	r3, [r1, #0]
 800bd10:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bd12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd14:	2b01      	cmp	r3, #1
 800bd16:	d10c      	bne.n	800bd32 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bd18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d104      	bne.n	800bd28 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bd1e:	2100      	movs	r1, #0
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f000 f965 	bl	800bff0 <USB_SetDevSpeed>
 800bd26:	e008      	b.n	800bd3a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bd28:	2101      	movs	r1, #1
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f000 f960 	bl	800bff0 <USB_SetDevSpeed>
 800bd30:	e003      	b.n	800bd3a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bd32:	2103      	movs	r1, #3
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f000 f95b 	bl	800bff0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bd3a:	2110      	movs	r1, #16
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f000 f8f3 	bl	800bf28 <USB_FlushTxFifo>
 800bd42:	4603      	mov	r3, r0
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d001      	beq.n	800bd4c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800bd48:	2301      	movs	r3, #1
 800bd4a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f000 f91f 	bl	800bf90 <USB_FlushRxFifo>
 800bd52:	4603      	mov	r3, r0
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d001      	beq.n	800bd5c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800bd58:	2301      	movs	r3, #1
 800bd5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd62:	461a      	mov	r2, r3
 800bd64:	2300      	movs	r3, #0
 800bd66:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd6e:	461a      	mov	r2, r3
 800bd70:	2300      	movs	r3, #0
 800bd72:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd7a:	461a      	mov	r2, r3
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bd80:	2300      	movs	r3, #0
 800bd82:	613b      	str	r3, [r7, #16]
 800bd84:	e043      	b.n	800be0e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	015a      	lsls	r2, r3, #5
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	4413      	add	r3, r2
 800bd8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bd98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd9c:	d118      	bne.n	800bdd0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800bd9e:	693b      	ldr	r3, [r7, #16]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d10a      	bne.n	800bdba <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	015a      	lsls	r2, r3, #5
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	4413      	add	r3, r2
 800bdac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdb0:	461a      	mov	r2, r3
 800bdb2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bdb6:	6013      	str	r3, [r2, #0]
 800bdb8:	e013      	b.n	800bde2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	015a      	lsls	r2, r3, #5
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	4413      	add	r3, r2
 800bdc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdc6:	461a      	mov	r2, r3
 800bdc8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bdcc:	6013      	str	r3, [r2, #0]
 800bdce:	e008      	b.n	800bde2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	015a      	lsls	r2, r3, #5
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	4413      	add	r3, r2
 800bdd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bddc:	461a      	mov	r2, r3
 800bdde:	2300      	movs	r3, #0
 800bde0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	015a      	lsls	r2, r3, #5
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	4413      	add	r3, r2
 800bdea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdee:	461a      	mov	r2, r3
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	015a      	lsls	r2, r3, #5
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	4413      	add	r3, r2
 800bdfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be00:	461a      	mov	r2, r3
 800be02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800be06:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	3301      	adds	r3, #1
 800be0c:	613b      	str	r3, [r7, #16]
 800be0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be10:	693a      	ldr	r2, [r7, #16]
 800be12:	429a      	cmp	r2, r3
 800be14:	d3b7      	bcc.n	800bd86 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800be16:	2300      	movs	r3, #0
 800be18:	613b      	str	r3, [r7, #16]
 800be1a:	e043      	b.n	800bea4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800be1c:	693b      	ldr	r3, [r7, #16]
 800be1e:	015a      	lsls	r2, r3, #5
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	4413      	add	r3, r2
 800be24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800be2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800be32:	d118      	bne.n	800be66 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800be34:	693b      	ldr	r3, [r7, #16]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d10a      	bne.n	800be50 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	015a      	lsls	r2, r3, #5
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	4413      	add	r3, r2
 800be42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be46:	461a      	mov	r2, r3
 800be48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800be4c:	6013      	str	r3, [r2, #0]
 800be4e:	e013      	b.n	800be78 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800be50:	693b      	ldr	r3, [r7, #16]
 800be52:	015a      	lsls	r2, r3, #5
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	4413      	add	r3, r2
 800be58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be5c:	461a      	mov	r2, r3
 800be5e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800be62:	6013      	str	r3, [r2, #0]
 800be64:	e008      	b.n	800be78 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	015a      	lsls	r2, r3, #5
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	4413      	add	r3, r2
 800be6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be72:	461a      	mov	r2, r3
 800be74:	2300      	movs	r3, #0
 800be76:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	015a      	lsls	r2, r3, #5
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	4413      	add	r3, r2
 800be80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be84:	461a      	mov	r2, r3
 800be86:	2300      	movs	r3, #0
 800be88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	015a      	lsls	r2, r3, #5
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	4413      	add	r3, r2
 800be92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be96:	461a      	mov	r2, r3
 800be98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800be9c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	3301      	adds	r3, #1
 800bea2:	613b      	str	r3, [r7, #16]
 800bea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea6:	693a      	ldr	r2, [r7, #16]
 800bea8:	429a      	cmp	r2, r3
 800beaa:	d3b7      	bcc.n	800be1c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800beb2:	691b      	ldr	r3, [r3, #16]
 800beb4:	68fa      	ldr	r2, [r7, #12]
 800beb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800beba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bebe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2200      	movs	r2, #0
 800bec4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800becc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d105      	bne.n	800bee0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	699b      	ldr	r3, [r3, #24]
 800bed8:	f043 0210 	orr.w	r2, r3, #16
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	699a      	ldr	r2, [r3, #24]
 800bee4:	4b0e      	ldr	r3, [pc, #56]	; (800bf20 <USB_DevInit+0x2b4>)
 800bee6:	4313      	orrs	r3, r2
 800bee8:	687a      	ldr	r2, [r7, #4]
 800beea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800beec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d005      	beq.n	800befe <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	699b      	ldr	r3, [r3, #24]
 800bef6:	f043 0208 	orr.w	r2, r3, #8
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800befe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf00:	2b01      	cmp	r3, #1
 800bf02:	d105      	bne.n	800bf10 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	699a      	ldr	r2, [r3, #24]
 800bf08:	4b06      	ldr	r3, [pc, #24]	; (800bf24 <USB_DevInit+0x2b8>)
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	687a      	ldr	r2, [r7, #4]
 800bf0e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bf10:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3718      	adds	r7, #24
 800bf16:	46bd      	mov	sp, r7
 800bf18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bf1c:	b004      	add	sp, #16
 800bf1e:	4770      	bx	lr
 800bf20:	803c3800 	.word	0x803c3800
 800bf24:	40000004 	.word	0x40000004

0800bf28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b085      	sub	sp, #20
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
 800bf30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bf32:	2300      	movs	r3, #0
 800bf34:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	3301      	adds	r3, #1
 800bf3a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	4a13      	ldr	r2, [pc, #76]	; (800bf8c <USB_FlushTxFifo+0x64>)
 800bf40:	4293      	cmp	r3, r2
 800bf42:	d901      	bls.n	800bf48 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bf44:	2303      	movs	r3, #3
 800bf46:	e01b      	b.n	800bf80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	691b      	ldr	r3, [r3, #16]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	daf2      	bge.n	800bf36 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bf50:	2300      	movs	r3, #0
 800bf52:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	019b      	lsls	r3, r3, #6
 800bf58:	f043 0220 	orr.w	r2, r3, #32
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	3301      	adds	r3, #1
 800bf64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	4a08      	ldr	r2, [pc, #32]	; (800bf8c <USB_FlushTxFifo+0x64>)
 800bf6a:	4293      	cmp	r3, r2
 800bf6c:	d901      	bls.n	800bf72 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bf6e:	2303      	movs	r3, #3
 800bf70:	e006      	b.n	800bf80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	691b      	ldr	r3, [r3, #16]
 800bf76:	f003 0320 	and.w	r3, r3, #32
 800bf7a:	2b20      	cmp	r3, #32
 800bf7c:	d0f0      	beq.n	800bf60 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bf7e:	2300      	movs	r3, #0
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	3714      	adds	r7, #20
 800bf84:	46bd      	mov	sp, r7
 800bf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8a:	4770      	bx	lr
 800bf8c:	00030d40 	.word	0x00030d40

0800bf90 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bf90:	b480      	push	{r7}
 800bf92:	b085      	sub	sp, #20
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	3301      	adds	r3, #1
 800bfa0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	4a11      	ldr	r2, [pc, #68]	; (800bfec <USB_FlushRxFifo+0x5c>)
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	d901      	bls.n	800bfae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bfaa:	2303      	movs	r3, #3
 800bfac:	e018      	b.n	800bfe0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	691b      	ldr	r3, [r3, #16]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	daf2      	bge.n	800bf9c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2210      	movs	r2, #16
 800bfbe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	3301      	adds	r3, #1
 800bfc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	4a08      	ldr	r2, [pc, #32]	; (800bfec <USB_FlushRxFifo+0x5c>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d901      	bls.n	800bfd2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bfce:	2303      	movs	r3, #3
 800bfd0:	e006      	b.n	800bfe0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	691b      	ldr	r3, [r3, #16]
 800bfd6:	f003 0310 	and.w	r3, r3, #16
 800bfda:	2b10      	cmp	r3, #16
 800bfdc:	d0f0      	beq.n	800bfc0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bfde:	2300      	movs	r3, #0
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3714      	adds	r7, #20
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfea:	4770      	bx	lr
 800bfec:	00030d40 	.word	0x00030d40

0800bff0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bff0:	b480      	push	{r7}
 800bff2:	b085      	sub	sp, #20
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
 800bff8:	460b      	mov	r3, r1
 800bffa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c006:	681a      	ldr	r2, [r3, #0]
 800c008:	78fb      	ldrb	r3, [r7, #3]
 800c00a:	68f9      	ldr	r1, [r7, #12]
 800c00c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c010:	4313      	orrs	r3, r2
 800c012:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c014:	2300      	movs	r3, #0
}
 800c016:	4618      	mov	r0, r3
 800c018:	3714      	adds	r7, #20
 800c01a:	46bd      	mov	sp, r7
 800c01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c020:	4770      	bx	lr

0800c022 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c022:	b480      	push	{r7}
 800c024:	b085      	sub	sp, #20
 800c026:	af00      	add	r7, sp, #0
 800c028:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	68fa      	ldr	r2, [r7, #12]
 800c038:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c03c:	f023 0303 	bic.w	r3, r3, #3
 800c040:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c048:	685b      	ldr	r3, [r3, #4]
 800c04a:	68fa      	ldr	r2, [r7, #12]
 800c04c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c050:	f043 0302 	orr.w	r3, r3, #2
 800c054:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c056:	2300      	movs	r3, #0
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3714      	adds	r7, #20
 800c05c:	46bd      	mov	sp, r7
 800c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c062:	4770      	bx	lr

0800c064 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c064:	b480      	push	{r7}
 800c066:	b083      	sub	sp, #12
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	695b      	ldr	r3, [r3, #20]
 800c070:	f003 0301 	and.w	r3, r3, #1
}
 800c074:	4618      	mov	r0, r3
 800c076:	370c      	adds	r7, #12
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr

0800c080 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c080:	b480      	push	{r7}
 800c082:	b085      	sub	sp, #20
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c088:	2300      	movs	r3, #0
 800c08a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	3301      	adds	r3, #1
 800c090:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	4a13      	ldr	r2, [pc, #76]	; (800c0e4 <USB_CoreReset+0x64>)
 800c096:	4293      	cmp	r3, r2
 800c098:	d901      	bls.n	800c09e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c09a:	2303      	movs	r3, #3
 800c09c:	e01b      	b.n	800c0d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	691b      	ldr	r3, [r3, #16]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	daf2      	bge.n	800c08c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	691b      	ldr	r3, [r3, #16]
 800c0ae:	f043 0201 	orr.w	r2, r3, #1
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	3301      	adds	r3, #1
 800c0ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	4a09      	ldr	r2, [pc, #36]	; (800c0e4 <USB_CoreReset+0x64>)
 800c0c0:	4293      	cmp	r3, r2
 800c0c2:	d901      	bls.n	800c0c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c0c4:	2303      	movs	r3, #3
 800c0c6:	e006      	b.n	800c0d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	691b      	ldr	r3, [r3, #16]
 800c0cc:	f003 0301 	and.w	r3, r3, #1
 800c0d0:	2b01      	cmp	r3, #1
 800c0d2:	d0f0      	beq.n	800c0b6 <USB_CoreReset+0x36>

  return HAL_OK;
 800c0d4:	2300      	movs	r3, #0
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3714      	adds	r7, #20
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e0:	4770      	bx	lr
 800c0e2:	bf00      	nop
 800c0e4:	00030d40 	.word	0x00030d40

0800c0e8 <memset>:
 800c0e8:	4402      	add	r2, r0
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	d100      	bne.n	800c0f2 <memset+0xa>
 800c0f0:	4770      	bx	lr
 800c0f2:	f803 1b01 	strb.w	r1, [r3], #1
 800c0f6:	e7f9      	b.n	800c0ec <memset+0x4>

0800c0f8 <__libc_init_array>:
 800c0f8:	b570      	push	{r4, r5, r6, lr}
 800c0fa:	4d0d      	ldr	r5, [pc, #52]	; (800c130 <__libc_init_array+0x38>)
 800c0fc:	4c0d      	ldr	r4, [pc, #52]	; (800c134 <__libc_init_array+0x3c>)
 800c0fe:	1b64      	subs	r4, r4, r5
 800c100:	10a4      	asrs	r4, r4, #2
 800c102:	2600      	movs	r6, #0
 800c104:	42a6      	cmp	r6, r4
 800c106:	d109      	bne.n	800c11c <__libc_init_array+0x24>
 800c108:	4d0b      	ldr	r5, [pc, #44]	; (800c138 <__libc_init_array+0x40>)
 800c10a:	4c0c      	ldr	r4, [pc, #48]	; (800c13c <__libc_init_array+0x44>)
 800c10c:	f000 f818 	bl	800c140 <_init>
 800c110:	1b64      	subs	r4, r4, r5
 800c112:	10a4      	asrs	r4, r4, #2
 800c114:	2600      	movs	r6, #0
 800c116:	42a6      	cmp	r6, r4
 800c118:	d105      	bne.n	800c126 <__libc_init_array+0x2e>
 800c11a:	bd70      	pop	{r4, r5, r6, pc}
 800c11c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c120:	4798      	blx	r3
 800c122:	3601      	adds	r6, #1
 800c124:	e7ee      	b.n	800c104 <__libc_init_array+0xc>
 800c126:	f855 3b04 	ldr.w	r3, [r5], #4
 800c12a:	4798      	blx	r3
 800c12c:	3601      	adds	r6, #1
 800c12e:	e7f2      	b.n	800c116 <__libc_init_array+0x1e>
 800c130:	0800c198 	.word	0x0800c198
 800c134:	0800c198 	.word	0x0800c198
 800c138:	0800c198 	.word	0x0800c198
 800c13c:	0800c19c 	.word	0x0800c19c

0800c140 <_init>:
 800c140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c142:	bf00      	nop
 800c144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c146:	bc08      	pop	{r3}
 800c148:	469e      	mov	lr, r3
 800c14a:	4770      	bx	lr

0800c14c <_fini>:
 800c14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c14e:	bf00      	nop
 800c150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c152:	bc08      	pop	{r3}
 800c154:	469e      	mov	lr, r3
 800c156:	4770      	bx	lr
