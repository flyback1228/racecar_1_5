
h750_brake_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e74  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800310c  0800310c  0001310c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800311c  0800311c  0001311c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003120  08003120  00013120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08003124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000006c  24000010  08003134  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400007c  08003134  0002007c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000c3f7  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001886  00000000  00000000  0002c478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000b80  00000000  00000000  0002dd00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000008df  00000000  00000000  0002e880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035d49  00000000  00000000  0002f15f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000c9b5  00000000  00000000  00064ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015b8cd  00000000  00000000  0007185d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00003004  00000000  00000000  001cd12c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000067  00000000  00000000  001d0130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080030f4 	.word	0x080030f4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080030f4 	.word	0x080030f4

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002dc:	f000 fafc 	bl	80008d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e0:	f000 f832 	bl	8000348 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e4:	f000 f940 	bl	8000568 <MX_GPIO_Init>
  MX_TIM2_Init();
 80002e8:	f000 f8a8 	bl	800043c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  TIM2->CCR1=20;
 80002ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002f0:	2214      	movs	r2, #20
 80002f2:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CCR2=40;
 80002f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002f8:	2228      	movs	r2, #40	; 0x28
 80002fa:	639a      	str	r2, [r3, #56]	; 0x38
  TIM2->CCR3=60;
 80002fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000300:	223c      	movs	r2, #60	; 0x3c
 8000302:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM2->CCR4=80;
 8000304:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000308:	2250      	movs	r2, #80	; 0x50
 800030a:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800030c:	2100      	movs	r1, #0
 800030e:	480c      	ldr	r0, [pc, #48]	; (8000340 <main+0x68>)
 8000310:	f001 fee8 	bl	80020e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000314:	2104      	movs	r1, #4
 8000316:	480a      	ldr	r0, [pc, #40]	; (8000340 <main+0x68>)
 8000318:	f001 fee4 	bl	80020e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800031c:	2108      	movs	r1, #8
 800031e:	4808      	ldr	r0, [pc, #32]	; (8000340 <main+0x68>)
 8000320:	f001 fee0 	bl	80020e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000324:	210c      	movs	r1, #12
 8000326:	4806      	ldr	r0, [pc, #24]	; (8000340 <main+0x68>)
 8000328:	f001 fedc 	bl	80020e4 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 800032c:	2108      	movs	r1, #8
 800032e:	4805      	ldr	r0, [pc, #20]	; (8000344 <main+0x6c>)
 8000330:	f000 fe41 	bl	8000fb6 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000334:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000338:	f000 fb60 	bl	80009fc <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 800033c:	e7f6      	b.n	800032c <main+0x54>
 800033e:	bf00      	nop
 8000340:	2400002c 	.word	0x2400002c
 8000344:	58020c00 	.word	0x58020c00

08000348 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b09c      	sub	sp, #112	; 0x70
 800034c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800034e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000352:	224c      	movs	r2, #76	; 0x4c
 8000354:	2100      	movs	r1, #0
 8000356:	4618      	mov	r0, r3
 8000358:	f002 fea0 	bl	800309c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	2220      	movs	r2, #32
 8000360:	2100      	movs	r1, #0
 8000362:	4618      	mov	r0, r3
 8000364:	f002 fe9a 	bl	800309c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000368:	2002      	movs	r0, #2
 800036a:	f000 fe3f 	bl	8000fec <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800036e:	2300      	movs	r3, #0
 8000370:	603b      	str	r3, [r7, #0]
 8000372:	4b30      	ldr	r3, [pc, #192]	; (8000434 <SystemClock_Config+0xec>)
 8000374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000376:	4a2f      	ldr	r2, [pc, #188]	; (8000434 <SystemClock_Config+0xec>)
 8000378:	f023 0301 	bic.w	r3, r3, #1
 800037c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800037e:	4b2d      	ldr	r3, [pc, #180]	; (8000434 <SystemClock_Config+0xec>)
 8000380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000382:	f003 0301 	and.w	r3, r3, #1
 8000386:	603b      	str	r3, [r7, #0]
 8000388:	4b2b      	ldr	r3, [pc, #172]	; (8000438 <SystemClock_Config+0xf0>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a2a      	ldr	r2, [pc, #168]	; (8000438 <SystemClock_Config+0xf0>)
 800038e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b28      	ldr	r3, [pc, #160]	; (8000438 <SystemClock_Config+0xf0>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800039c:	603b      	str	r3, [r7, #0]
 800039e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003a0:	bf00      	nop
 80003a2:	4b25      	ldr	r3, [pc, #148]	; (8000438 <SystemClock_Config+0xf0>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003ae:	d1f8      	bne.n	80003a2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003b0:	2301      	movs	r3, #1
 80003b2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ba:	2302      	movs	r3, #2
 80003bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003be:	2302      	movs	r3, #2
 80003c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80003c2:	2305      	movs	r3, #5
 80003c4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 80003c6:	23a0      	movs	r3, #160	; 0xa0
 80003c8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80003ca:	2302      	movs	r3, #2
 80003cc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80003ce:	2302      	movs	r3, #2
 80003d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80003d2:	2302      	movs	r3, #2
 80003d4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80003d6:	2308      	movs	r3, #8
 80003d8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80003da:	2300      	movs	r3, #0
 80003dc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80003de:	2300      	movs	r3, #0
 80003e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003e6:	4618      	mov	r0, r3
 80003e8:	f000 fe3a 	bl	8001060 <HAL_RCC_OscConfig>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80003f2:	f000 f91b 	bl	800062c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f6:	233f      	movs	r3, #63	; 0x3f
 80003f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003fa:	2303      	movs	r3, #3
 80003fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003fe:	2300      	movs	r3, #0
 8000400:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 8000402:	2309      	movs	r3, #9
 8000404:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000406:	2340      	movs	r3, #64	; 0x40
 8000408:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800040a:	2340      	movs	r3, #64	; 0x40
 800040c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800040e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000412:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000414:	2340      	movs	r3, #64	; 0x40
 8000416:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000418:	1d3b      	adds	r3, r7, #4
 800041a:	2101      	movs	r1, #1
 800041c:	4618      	mov	r0, r3
 800041e:	f001 fa79 	bl	8001914 <HAL_RCC_ClockConfig>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000428:	f000 f900 	bl	800062c <Error_Handler>
  }
}
 800042c:	bf00      	nop
 800042e:	3770      	adds	r7, #112	; 0x70
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	58000400 	.word	0x58000400
 8000438:	58024800 	.word	0x58024800

0800043c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b08e      	sub	sp, #56	; 0x38
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000442:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	605a      	str	r2, [r3, #4]
 800044c:	609a      	str	r2, [r3, #8]
 800044e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000450:	f107 031c 	add.w	r3, r7, #28
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
 8000458:	605a      	str	r2, [r3, #4]
 800045a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800045c:	463b      	mov	r3, r7
 800045e:	2200      	movs	r2, #0
 8000460:	601a      	str	r2, [r3, #0]
 8000462:	605a      	str	r2, [r3, #4]
 8000464:	609a      	str	r2, [r3, #8]
 8000466:	60da      	str	r2, [r3, #12]
 8000468:	611a      	str	r2, [r3, #16]
 800046a:	615a      	str	r2, [r3, #20]
 800046c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800046e:	4b3d      	ldr	r3, [pc, #244]	; (8000564 <MX_TIM2_Init+0x128>)
 8000470:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000474:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8000476:	4b3b      	ldr	r3, [pc, #236]	; (8000564 <MX_TIM2_Init+0x128>)
 8000478:	2263      	movs	r2, #99	; 0x63
 800047a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800047c:	4b39      	ldr	r3, [pc, #228]	; (8000564 <MX_TIM2_Init+0x128>)
 800047e:	2200      	movs	r2, #0
 8000480:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000482:	4b38      	ldr	r3, [pc, #224]	; (8000564 <MX_TIM2_Init+0x128>)
 8000484:	2263      	movs	r2, #99	; 0x63
 8000486:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000488:	4b36      	ldr	r3, [pc, #216]	; (8000564 <MX_TIM2_Init+0x128>)
 800048a:	2200      	movs	r2, #0
 800048c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800048e:	4b35      	ldr	r3, [pc, #212]	; (8000564 <MX_TIM2_Init+0x128>)
 8000490:	2280      	movs	r2, #128	; 0x80
 8000492:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000494:	4833      	ldr	r0, [pc, #204]	; (8000564 <MX_TIM2_Init+0x128>)
 8000496:	f001 fd6d 	bl	8001f74 <HAL_TIM_Base_Init>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80004a0:	f000 f8c4 	bl	800062c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004ae:	4619      	mov	r1, r3
 80004b0:	482c      	ldr	r0, [pc, #176]	; (8000564 <MX_TIM2_Init+0x128>)
 80004b2:	f002 f839 	bl	8002528 <HAL_TIM_ConfigClockSource>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80004bc:	f000 f8b6 	bl	800062c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80004c0:	4828      	ldr	r0, [pc, #160]	; (8000564 <MX_TIM2_Init+0x128>)
 80004c2:	f001 fdae 	bl	8002022 <HAL_TIM_PWM_Init>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80004cc:	f000 f8ae 	bl	800062c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004d0:	2300      	movs	r3, #0
 80004d2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004d4:	2300      	movs	r3, #0
 80004d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004d8:	f107 031c 	add.w	r3, r7, #28
 80004dc:	4619      	mov	r1, r3
 80004de:	4821      	ldr	r0, [pc, #132]	; (8000564 <MX_TIM2_Init+0x128>)
 80004e0:	f002 fd4e 	bl	8002f80 <HAL_TIMEx_MasterConfigSynchronization>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80004ea:	f000 f89f 	bl	800062c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004ee:	2360      	movs	r3, #96	; 0x60
 80004f0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004f6:	2300      	movs	r3, #0
 80004f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004fa:	2300      	movs	r3, #0
 80004fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004fe:	463b      	mov	r3, r7
 8000500:	2200      	movs	r2, #0
 8000502:	4619      	mov	r1, r3
 8000504:	4817      	ldr	r0, [pc, #92]	; (8000564 <MX_TIM2_Init+0x128>)
 8000506:	f001 fefb 	bl	8002300 <HAL_TIM_PWM_ConfigChannel>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000510:	f000 f88c 	bl	800062c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000514:	463b      	mov	r3, r7
 8000516:	2204      	movs	r2, #4
 8000518:	4619      	mov	r1, r3
 800051a:	4812      	ldr	r0, [pc, #72]	; (8000564 <MX_TIM2_Init+0x128>)
 800051c:	f001 fef0 	bl	8002300 <HAL_TIM_PWM_ConfigChannel>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000526:	f000 f881 	bl	800062c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800052a:	463b      	mov	r3, r7
 800052c:	2208      	movs	r2, #8
 800052e:	4619      	mov	r1, r3
 8000530:	480c      	ldr	r0, [pc, #48]	; (8000564 <MX_TIM2_Init+0x128>)
 8000532:	f001 fee5 	bl	8002300 <HAL_TIM_PWM_ConfigChannel>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 800053c:	f000 f876 	bl	800062c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000540:	463b      	mov	r3, r7
 8000542:	220c      	movs	r2, #12
 8000544:	4619      	mov	r1, r3
 8000546:	4807      	ldr	r0, [pc, #28]	; (8000564 <MX_TIM2_Init+0x128>)
 8000548:	f001 feda 	bl	8002300 <HAL_TIM_PWM_ConfigChannel>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8000552:	f000 f86b 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000556:	4803      	ldr	r0, [pc, #12]	; (8000564 <MX_TIM2_Init+0x128>)
 8000558:	f000 f8a8 	bl	80006ac <HAL_TIM_MspPostInit>

}
 800055c:	bf00      	nop
 800055e:	3738      	adds	r7, #56	; 0x38
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	2400002c 	.word	0x2400002c

08000568 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800057e:	4b29      	ldr	r3, [pc, #164]	; (8000624 <MX_GPIO_Init+0xbc>)
 8000580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000584:	4a27      	ldr	r2, [pc, #156]	; (8000624 <MX_GPIO_Init+0xbc>)
 8000586:	f043 0304 	orr.w	r3, r3, #4
 800058a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800058e:	4b25      	ldr	r3, [pc, #148]	; (8000624 <MX_GPIO_Init+0xbc>)
 8000590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000594:	f003 0304 	and.w	r3, r3, #4
 8000598:	613b      	str	r3, [r7, #16]
 800059a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059c:	4b21      	ldr	r3, [pc, #132]	; (8000624 <MX_GPIO_Init+0xbc>)
 800059e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005a2:	4a20      	ldr	r2, [pc, #128]	; (8000624 <MX_GPIO_Init+0xbc>)
 80005a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005ac:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <MX_GPIO_Init+0xbc>)
 80005ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <MX_GPIO_Init+0xbc>)
 80005bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005c0:	4a18      	ldr	r2, [pc, #96]	; (8000624 <MX_GPIO_Init+0xbc>)
 80005c2:	f043 0301 	orr.w	r3, r3, #1
 80005c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005ca:	4b16      	ldr	r3, [pc, #88]	; (8000624 <MX_GPIO_Init+0xbc>)
 80005cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005d0:	f003 0301 	and.w	r3, r3, #1
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005d8:	4b12      	ldr	r3, [pc, #72]	; (8000624 <MX_GPIO_Init+0xbc>)
 80005da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005de:	4a11      	ldr	r2, [pc, #68]	; (8000624 <MX_GPIO_Init+0xbc>)
 80005e0:	f043 0308 	orr.w	r3, r3, #8
 80005e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005e8:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <MX_GPIO_Init+0xbc>)
 80005ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005ee:	f003 0308 	and.w	r3, r3, #8
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2108      	movs	r1, #8
 80005fa:	480b      	ldr	r0, [pc, #44]	; (8000628 <MX_GPIO_Init+0xc0>)
 80005fc:	f000 fcc2 	bl	8000f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8000600:	2308      	movs	r3, #8
 8000602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000604:	2301      	movs	r3, #1
 8000606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060c:	2300      	movs	r3, #0
 800060e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000610:	f107 0314 	add.w	r3, r7, #20
 8000614:	4619      	mov	r1, r3
 8000616:	4804      	ldr	r0, [pc, #16]	; (8000628 <MX_GPIO_Init+0xc0>)
 8000618:	f000 fb04 	bl	8000c24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800061c:	bf00      	nop
 800061e:	3728      	adds	r7, #40	; 0x28
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	58024400 	.word	0x58024400
 8000628:	58020c00 	.word	0x58020c00

0800062c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000630:	b672      	cpsid	i
}
 8000632:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000634:	e7fe      	b.n	8000634 <Error_Handler+0x8>
	...

08000638 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800063e:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <HAL_MspInit+0x30>)
 8000640:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000644:	4a08      	ldr	r2, [pc, #32]	; (8000668 <HAL_MspInit+0x30>)
 8000646:	f043 0302 	orr.w	r3, r3, #2
 800064a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <HAL_MspInit+0x30>)
 8000650:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000654:	f003 0302 	and.w	r3, r3, #2
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800065c:	bf00      	nop
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	58024400 	.word	0x58024400

0800066c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800066c:	b480      	push	{r7}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800067c:	d10e      	bne.n	800069c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800067e:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <HAL_TIM_Base_MspInit+0x3c>)
 8000680:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000684:	4a08      	ldr	r2, [pc, #32]	; (80006a8 <HAL_TIM_Base_MspInit+0x3c>)
 8000686:	f043 0301 	orr.w	r3, r3, #1
 800068a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <HAL_TIM_Base_MspInit+0x3c>)
 8000690:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000694:	f003 0301 	and.w	r3, r3, #1
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800069c:	bf00      	nop
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	58024400 	.word	0x58024400

080006ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006cc:	d11f      	bne.n	800070e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	4b12      	ldr	r3, [pc, #72]	; (8000718 <HAL_TIM_MspPostInit+0x6c>)
 80006d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d4:	4a10      	ldr	r2, [pc, #64]	; (8000718 <HAL_TIM_MspPostInit+0x6c>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <HAL_TIM_MspPostInit+0x6c>)
 80006e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e4:	f003 0301 	and.w	r3, r3, #1
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 80006ec:	f248 030e 	movw	r3, #32782	; 0x800e
 80006f0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f2:	2302      	movs	r3, #2
 80006f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80006fe:	2301      	movs	r3, #1
 8000700:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	4619      	mov	r1, r3
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <HAL_TIM_MspPostInit+0x70>)
 800070a:	f000 fa8b 	bl	8000c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800070e:	bf00      	nop
 8000710:	3720      	adds	r7, #32
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	58024400 	.word	0x58024400
 800071c:	58020000 	.word	0x58020000

08000720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000724:	e7fe      	b.n	8000724 <NMI_Handler+0x4>

08000726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800072a:	e7fe      	b.n	800072a <HardFault_Handler+0x4>

0800072c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000730:	e7fe      	b.n	8000730 <MemManage_Handler+0x4>

08000732 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000736:	e7fe      	b.n	8000736 <BusFault_Handler+0x4>

08000738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800073c:	e7fe      	b.n	800073c <UsageFault_Handler+0x4>

0800073e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800076c:	f000 f926 	bl	80009bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}

08000774 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000778:	4b37      	ldr	r3, [pc, #220]	; (8000858 <SystemInit+0xe4>)
 800077a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800077e:	4a36      	ldr	r2, [pc, #216]	; (8000858 <SystemInit+0xe4>)
 8000780:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000784:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000788:	4b34      	ldr	r3, [pc, #208]	; (800085c <SystemInit+0xe8>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f003 030f 	and.w	r3, r3, #15
 8000790:	2b06      	cmp	r3, #6
 8000792:	d807      	bhi.n	80007a4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000794:	4b31      	ldr	r3, [pc, #196]	; (800085c <SystemInit+0xe8>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f023 030f 	bic.w	r3, r3, #15
 800079c:	4a2f      	ldr	r2, [pc, #188]	; (800085c <SystemInit+0xe8>)
 800079e:	f043 0307 	orr.w	r3, r3, #7
 80007a2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80007a4:	4b2e      	ldr	r3, [pc, #184]	; (8000860 <SystemInit+0xec>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a2d      	ldr	r2, [pc, #180]	; (8000860 <SystemInit+0xec>)
 80007aa:	f043 0301 	orr.w	r3, r3, #1
 80007ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007b0:	4b2b      	ldr	r3, [pc, #172]	; (8000860 <SystemInit+0xec>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80007b6:	4b2a      	ldr	r3, [pc, #168]	; (8000860 <SystemInit+0xec>)
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	4929      	ldr	r1, [pc, #164]	; (8000860 <SystemInit+0xec>)
 80007bc:	4b29      	ldr	r3, [pc, #164]	; (8000864 <SystemInit+0xf0>)
 80007be:	4013      	ands	r3, r2
 80007c0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007c2:	4b26      	ldr	r3, [pc, #152]	; (800085c <SystemInit+0xe8>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f003 0308 	and.w	r3, r3, #8
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d007      	beq.n	80007de <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007ce:	4b23      	ldr	r3, [pc, #140]	; (800085c <SystemInit+0xe8>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f023 030f 	bic.w	r3, r3, #15
 80007d6:	4a21      	ldr	r2, [pc, #132]	; (800085c <SystemInit+0xe8>)
 80007d8:	f043 0307 	orr.w	r3, r3, #7
 80007dc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80007de:	4b20      	ldr	r3, [pc, #128]	; (8000860 <SystemInit+0xec>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80007e4:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <SystemInit+0xec>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80007ea:	4b1d      	ldr	r3, [pc, #116]	; (8000860 <SystemInit+0xec>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80007f0:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <SystemInit+0xec>)
 80007f2:	4a1d      	ldr	r2, [pc, #116]	; (8000868 <SystemInit+0xf4>)
 80007f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80007f6:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <SystemInit+0xec>)
 80007f8:	4a1c      	ldr	r2, [pc, #112]	; (800086c <SystemInit+0xf8>)
 80007fa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80007fc:	4b18      	ldr	r3, [pc, #96]	; (8000860 <SystemInit+0xec>)
 80007fe:	4a1c      	ldr	r2, [pc, #112]	; (8000870 <SystemInit+0xfc>)
 8000800:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000802:	4b17      	ldr	r3, [pc, #92]	; (8000860 <SystemInit+0xec>)
 8000804:	2200      	movs	r2, #0
 8000806:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000808:	4b15      	ldr	r3, [pc, #84]	; (8000860 <SystemInit+0xec>)
 800080a:	4a19      	ldr	r2, [pc, #100]	; (8000870 <SystemInit+0xfc>)
 800080c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <SystemInit+0xec>)
 8000810:	2200      	movs	r2, #0
 8000812:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <SystemInit+0xec>)
 8000816:	4a16      	ldr	r2, [pc, #88]	; (8000870 <SystemInit+0xfc>)
 8000818:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <SystemInit+0xec>)
 800081c:	2200      	movs	r2, #0
 800081e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <SystemInit+0xec>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a0e      	ldr	r2, [pc, #56]	; (8000860 <SystemInit+0xec>)
 8000826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800082a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <SystemInit+0xec>)
 800082e:	2200      	movs	r2, #0
 8000830:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <SystemInit+0x100>)
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <SystemInit+0x104>)
 8000838:	4013      	ands	r3, r2
 800083a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800083e:	d202      	bcs.n	8000846 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000840:	4b0e      	ldr	r3, [pc, #56]	; (800087c <SystemInit+0x108>)
 8000842:	2201      	movs	r2, #1
 8000844:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <SystemInit+0x10c>)
 8000848:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800084c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800084e:	bf00      	nop
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	e000ed00 	.word	0xe000ed00
 800085c:	52002000 	.word	0x52002000
 8000860:	58024400 	.word	0x58024400
 8000864:	eaf6ed7f 	.word	0xeaf6ed7f
 8000868:	02020200 	.word	0x02020200
 800086c:	01ff0000 	.word	0x01ff0000
 8000870:	01010280 	.word	0x01010280
 8000874:	5c001000 	.word	0x5c001000
 8000878:	ffff0000 	.word	0xffff0000
 800087c:	51008108 	.word	0x51008108
 8000880:	52004000 	.word	0x52004000

08000884 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000884:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000888:	f7ff ff74 	bl	8000774 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800088c:	480c      	ldr	r0, [pc, #48]	; (80008c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800088e:	490d      	ldr	r1, [pc, #52]	; (80008c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000890:	4a0d      	ldr	r2, [pc, #52]	; (80008c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000892:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000894:	e002      	b.n	800089c <LoopCopyDataInit>

08000896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800089a:	3304      	adds	r3, #4

0800089c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800089c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800089e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a0:	d3f9      	bcc.n	8000896 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008a2:	4a0a      	ldr	r2, [pc, #40]	; (80008cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008a4:	4c0a      	ldr	r4, [pc, #40]	; (80008d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a8:	e001      	b.n	80008ae <LoopFillZerobss>

080008aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008ac:	3204      	adds	r2, #4

080008ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b0:	d3fb      	bcc.n	80008aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008b2:	f002 fbfb 	bl	80030ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008b6:	f7ff fd0f 	bl	80002d8 <main>
  bx  lr
 80008ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008bc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80008c0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80008c4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80008c8:	08003124 	.word	0x08003124
  ldr r2, =_sbss
 80008cc:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80008d0:	2400007c 	.word	0x2400007c

080008d4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008d4:	e7fe      	b.n	80008d4 <ADC3_IRQHandler>
	...

080008d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008de:	2003      	movs	r0, #3
 80008e0:	f000 f96e 	bl	8000bc0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80008e4:	f001 f9cc 	bl	8001c80 <HAL_RCC_GetSysClockFreq>
 80008e8:	4602      	mov	r2, r0
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <HAL_Init+0x68>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	0a1b      	lsrs	r3, r3, #8
 80008f0:	f003 030f 	and.w	r3, r3, #15
 80008f4:	4913      	ldr	r1, [pc, #76]	; (8000944 <HAL_Init+0x6c>)
 80008f6:	5ccb      	ldrb	r3, [r1, r3]
 80008f8:	f003 031f 	and.w	r3, r3, #31
 80008fc:	fa22 f303 	lsr.w	r3, r2, r3
 8000900:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000902:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <HAL_Init+0x68>)
 8000904:	699b      	ldr	r3, [r3, #24]
 8000906:	f003 030f 	and.w	r3, r3, #15
 800090a:	4a0e      	ldr	r2, [pc, #56]	; (8000944 <HAL_Init+0x6c>)
 800090c:	5cd3      	ldrb	r3, [r2, r3]
 800090e:	f003 031f 	and.w	r3, r3, #31
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	fa22 f303 	lsr.w	r3, r2, r3
 8000918:	4a0b      	ldr	r2, [pc, #44]	; (8000948 <HAL_Init+0x70>)
 800091a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800091c:	4a0b      	ldr	r2, [pc, #44]	; (800094c <HAL_Init+0x74>)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000922:	200f      	movs	r0, #15
 8000924:	f000 f814 	bl	8000950 <HAL_InitTick>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800092e:	2301      	movs	r3, #1
 8000930:	e002      	b.n	8000938 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000932:	f7ff fe81 	bl	8000638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000936:	2300      	movs	r3, #0
}
 8000938:	4618      	mov	r0, r3
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	58024400 	.word	0x58024400
 8000944:	0800310c 	.word	0x0800310c
 8000948:	24000004 	.word	0x24000004
 800094c:	24000000 	.word	0x24000000

08000950 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000958:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <HAL_InitTick+0x60>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d101      	bne.n	8000964 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000960:	2301      	movs	r3, #1
 8000962:	e021      	b.n	80009a8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <HAL_InitTick+0x64>)
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <HAL_InitTick+0x60>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	4619      	mov	r1, r3
 800096e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000972:	fbb3 f3f1 	udiv	r3, r3, r1
 8000976:	fbb2 f3f3 	udiv	r3, r2, r3
 800097a:	4618      	mov	r0, r3
 800097c:	f000 f945 	bl	8000c0a <HAL_SYSTICK_Config>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000986:	2301      	movs	r3, #1
 8000988:	e00e      	b.n	80009a8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2b0f      	cmp	r3, #15
 800098e:	d80a      	bhi.n	80009a6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000990:	2200      	movs	r2, #0
 8000992:	6879      	ldr	r1, [r7, #4]
 8000994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000998:	f000 f91d 	bl	8000bd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800099c:	4a06      	ldr	r2, [pc, #24]	; (80009b8 <HAL_InitTick+0x68>)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009a2:	2300      	movs	r3, #0
 80009a4:	e000      	b.n	80009a8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	2400000c 	.word	0x2400000c
 80009b4:	24000000 	.word	0x24000000
 80009b8:	24000008 	.word	0x24000008

080009bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_IncTick+0x20>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	461a      	mov	r2, r3
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <HAL_IncTick+0x24>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4413      	add	r3, r2
 80009cc:	4a04      	ldr	r2, [pc, #16]	; (80009e0 <HAL_IncTick+0x24>)
 80009ce:	6013      	str	r3, [r2, #0]
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	2400000c 	.word	0x2400000c
 80009e0:	24000078 	.word	0x24000078

080009e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  return uwTick;
 80009e8:	4b03      	ldr	r3, [pc, #12]	; (80009f8 <HAL_GetTick+0x14>)
 80009ea:	681b      	ldr	r3, [r3, #0]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	24000078 	.word	0x24000078

080009fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a04:	f7ff ffee 	bl	80009e4 <HAL_GetTick>
 8000a08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a14:	d005      	beq.n	8000a22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a16:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <HAL_Delay+0x44>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	4413      	add	r3, r2
 8000a20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a22:	bf00      	nop
 8000a24:	f7ff ffde 	bl	80009e4 <HAL_GetTick>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	68fa      	ldr	r2, [r7, #12]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d8f7      	bhi.n	8000a24 <HAL_Delay+0x28>
  {
  }
}
 8000a34:	bf00      	nop
 8000a36:	bf00      	nop
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	2400000c 	.word	0x2400000c

08000a44 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000a48:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <HAL_GetREVID+0x14>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	0c1b      	lsrs	r3, r3, #16
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	5c001000 	.word	0x5c001000

08000a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f003 0307 	and.w	r3, r3, #7
 8000a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a6c:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <__NVIC_SetPriorityGrouping+0x40>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a78:	4013      	ands	r3, r2
 8000a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a86:	4313      	orrs	r3, r2
 8000a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a8a:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <__NVIC_SetPriorityGrouping+0x40>)
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	60d3      	str	r3, [r2, #12]
}
 8000a90:	bf00      	nop
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	e000ed00 	.word	0xe000ed00
 8000aa0:	05fa0000 	.word	0x05fa0000

08000aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa8:	4b04      	ldr	r3, [pc, #16]	; (8000abc <__NVIC_GetPriorityGrouping+0x18>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	0a1b      	lsrs	r3, r3, #8
 8000aae:	f003 0307 	and.w	r3, r3, #7
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	6039      	str	r1, [r7, #0]
 8000aca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000acc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	db0a      	blt.n	8000aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	490c      	ldr	r1, [pc, #48]	; (8000b0c <__NVIC_SetPriority+0x4c>)
 8000ada:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ade:	0112      	lsls	r2, r2, #4
 8000ae0:	b2d2      	uxtb	r2, r2
 8000ae2:	440b      	add	r3, r1
 8000ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae8:	e00a      	b.n	8000b00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4908      	ldr	r1, [pc, #32]	; (8000b10 <__NVIC_SetPriority+0x50>)
 8000af0:	88fb      	ldrh	r3, [r7, #6]
 8000af2:	f003 030f 	and.w	r3, r3, #15
 8000af6:	3b04      	subs	r3, #4
 8000af8:	0112      	lsls	r2, r2, #4
 8000afa:	b2d2      	uxtb	r2, r2
 8000afc:	440b      	add	r3, r1
 8000afe:	761a      	strb	r2, [r3, #24]
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000e100 	.word	0xe000e100
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b089      	sub	sp, #36	; 0x24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	f1c3 0307 	rsb	r3, r3, #7
 8000b2e:	2b04      	cmp	r3, #4
 8000b30:	bf28      	it	cs
 8000b32:	2304      	movcs	r3, #4
 8000b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	3304      	adds	r3, #4
 8000b3a:	2b06      	cmp	r3, #6
 8000b3c:	d902      	bls.n	8000b44 <NVIC_EncodePriority+0x30>
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	3b03      	subs	r3, #3
 8000b42:	e000      	b.n	8000b46 <NVIC_EncodePriority+0x32>
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	43da      	mvns	r2, r3
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	401a      	ands	r2, r3
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	fa01 f303 	lsl.w	r3, r1, r3
 8000b66:	43d9      	mvns	r1, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6c:	4313      	orrs	r3, r2
         );
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3724      	adds	r7, #36	; 0x24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
	...

08000b7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b8c:	d301      	bcc.n	8000b92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e00f      	b.n	8000bb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b92:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <SysTick_Config+0x40>)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	3b01      	subs	r3, #1
 8000b98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b9a:	210f      	movs	r1, #15
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ba0:	f7ff ff8e 	bl	8000ac0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <SysTick_Config+0x40>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000baa:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <SysTick_Config+0x40>)
 8000bac:	2207      	movs	r2, #7
 8000bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	e000e010 	.word	0xe000e010

08000bc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f7ff ff47 	bl	8000a5c <__NVIC_SetPriorityGrouping>
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b086      	sub	sp, #24
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	4603      	mov	r3, r0
 8000bde:	60b9      	str	r1, [r7, #8]
 8000be0:	607a      	str	r2, [r7, #4]
 8000be2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000be4:	f7ff ff5e 	bl	8000aa4 <__NVIC_GetPriorityGrouping>
 8000be8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	68b9      	ldr	r1, [r7, #8]
 8000bee:	6978      	ldr	r0, [r7, #20]
 8000bf0:	f7ff ff90 	bl	8000b14 <NVIC_EncodePriority>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bfa:	4611      	mov	r1, r2
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff ff5f 	bl	8000ac0 <__NVIC_SetPriority>
}
 8000c02:	bf00      	nop
 8000c04:	3718      	adds	r7, #24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b082      	sub	sp, #8
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f7ff ffb2 	bl	8000b7c <SysTick_Config>
 8000c18:	4603      	mov	r3, r0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b089      	sub	sp, #36	; 0x24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000c32:	4b89      	ldr	r3, [pc, #548]	; (8000e58 <HAL_GPIO_Init+0x234>)
 8000c34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000c36:	e194      	b.n	8000f62 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	fa01 f303 	lsl.w	r3, r1, r3
 8000c44:	4013      	ands	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	f000 8186 	beq.w	8000f5c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f003 0303 	and.w	r3, r3, #3
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d005      	beq.n	8000c68 <HAL_GPIO_Init+0x44>
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f003 0303 	and.w	r3, r3, #3
 8000c64:	2b02      	cmp	r3, #2
 8000c66:	d130      	bne.n	8000cca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	2203      	movs	r2, #3
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	68da      	ldr	r2, [r3, #12]
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	4013      	ands	r3, r2
 8000cac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	091b      	lsrs	r3, r3, #4
 8000cb4:	f003 0201 	and.w	r2, r3, #1
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f003 0303 	and.w	r3, r3, #3
 8000cd2:	2b03      	cmp	r3, #3
 8000cd4:	d017      	beq.n	8000d06 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	68db      	ldr	r3, [r3, #12]
 8000cda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	4013      	ands	r3, r2
 8000cec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	689a      	ldr	r2, [r3, #8]
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f003 0303 	and.w	r3, r3, #3
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d123      	bne.n	8000d5a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	08da      	lsrs	r2, r3, #3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	3208      	adds	r2, #8
 8000d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	220f      	movs	r2, #15
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	4013      	ands	r3, r2
 8000d34:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	691a      	ldr	r2, [r3, #16]
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	f003 0307 	and.w	r3, r3, #7
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	08da      	lsrs	r2, r3, #3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3208      	adds	r2, #8
 8000d54:	69b9      	ldr	r1, [r7, #24]
 8000d56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	2203      	movs	r2, #3
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f003 0203 	and.w	r2, r3, #3
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f000 80e0 	beq.w	8000f5c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9c:	4b2f      	ldr	r3, [pc, #188]	; (8000e5c <HAL_GPIO_Init+0x238>)
 8000d9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000da2:	4a2e      	ldr	r2, [pc, #184]	; (8000e5c <HAL_GPIO_Init+0x238>)
 8000da4:	f043 0302 	orr.w	r3, r3, #2
 8000da8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000dac:	4b2b      	ldr	r3, [pc, #172]	; (8000e5c <HAL_GPIO_Init+0x238>)
 8000dae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dba:	4a29      	ldr	r2, [pc, #164]	; (8000e60 <HAL_GPIO_Init+0x23c>)
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	089b      	lsrs	r3, r3, #2
 8000dc0:	3302      	adds	r3, #2
 8000dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f003 0303 	and.w	r3, r3, #3
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	220f      	movs	r2, #15
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a20      	ldr	r2, [pc, #128]	; (8000e64 <HAL_GPIO_Init+0x240>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d052      	beq.n	8000e8c <HAL_GPIO_Init+0x268>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a1f      	ldr	r2, [pc, #124]	; (8000e68 <HAL_GPIO_Init+0x244>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d031      	beq.n	8000e52 <HAL_GPIO_Init+0x22e>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a1e      	ldr	r2, [pc, #120]	; (8000e6c <HAL_GPIO_Init+0x248>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d02b      	beq.n	8000e4e <HAL_GPIO_Init+0x22a>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a1d      	ldr	r2, [pc, #116]	; (8000e70 <HAL_GPIO_Init+0x24c>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d025      	beq.n	8000e4a <HAL_GPIO_Init+0x226>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a1c      	ldr	r2, [pc, #112]	; (8000e74 <HAL_GPIO_Init+0x250>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d01f      	beq.n	8000e46 <HAL_GPIO_Init+0x222>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a1b      	ldr	r2, [pc, #108]	; (8000e78 <HAL_GPIO_Init+0x254>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d019      	beq.n	8000e42 <HAL_GPIO_Init+0x21e>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a1a      	ldr	r2, [pc, #104]	; (8000e7c <HAL_GPIO_Init+0x258>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d013      	beq.n	8000e3e <HAL_GPIO_Init+0x21a>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a19      	ldr	r2, [pc, #100]	; (8000e80 <HAL_GPIO_Init+0x25c>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d00d      	beq.n	8000e3a <HAL_GPIO_Init+0x216>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a18      	ldr	r2, [pc, #96]	; (8000e84 <HAL_GPIO_Init+0x260>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d007      	beq.n	8000e36 <HAL_GPIO_Init+0x212>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a17      	ldr	r2, [pc, #92]	; (8000e88 <HAL_GPIO_Init+0x264>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d101      	bne.n	8000e32 <HAL_GPIO_Init+0x20e>
 8000e2e:	2309      	movs	r3, #9
 8000e30:	e02d      	b.n	8000e8e <HAL_GPIO_Init+0x26a>
 8000e32:	230a      	movs	r3, #10
 8000e34:	e02b      	b.n	8000e8e <HAL_GPIO_Init+0x26a>
 8000e36:	2308      	movs	r3, #8
 8000e38:	e029      	b.n	8000e8e <HAL_GPIO_Init+0x26a>
 8000e3a:	2307      	movs	r3, #7
 8000e3c:	e027      	b.n	8000e8e <HAL_GPIO_Init+0x26a>
 8000e3e:	2306      	movs	r3, #6
 8000e40:	e025      	b.n	8000e8e <HAL_GPIO_Init+0x26a>
 8000e42:	2305      	movs	r3, #5
 8000e44:	e023      	b.n	8000e8e <HAL_GPIO_Init+0x26a>
 8000e46:	2304      	movs	r3, #4
 8000e48:	e021      	b.n	8000e8e <HAL_GPIO_Init+0x26a>
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	e01f      	b.n	8000e8e <HAL_GPIO_Init+0x26a>
 8000e4e:	2302      	movs	r3, #2
 8000e50:	e01d      	b.n	8000e8e <HAL_GPIO_Init+0x26a>
 8000e52:	2301      	movs	r3, #1
 8000e54:	e01b      	b.n	8000e8e <HAL_GPIO_Init+0x26a>
 8000e56:	bf00      	nop
 8000e58:	58000080 	.word	0x58000080
 8000e5c:	58024400 	.word	0x58024400
 8000e60:	58000400 	.word	0x58000400
 8000e64:	58020000 	.word	0x58020000
 8000e68:	58020400 	.word	0x58020400
 8000e6c:	58020800 	.word	0x58020800
 8000e70:	58020c00 	.word	0x58020c00
 8000e74:	58021000 	.word	0x58021000
 8000e78:	58021400 	.word	0x58021400
 8000e7c:	58021800 	.word	0x58021800
 8000e80:	58021c00 	.word	0x58021c00
 8000e84:	58022000 	.word	0x58022000
 8000e88:	58022400 	.word	0x58022400
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	69fa      	ldr	r2, [r7, #28]
 8000e90:	f002 0203 	and.w	r2, r2, #3
 8000e94:	0092      	lsls	r2, r2, #2
 8000e96:	4093      	lsls	r3, r2
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e9e:	4938      	ldr	r1, [pc, #224]	; (8000f80 <HAL_GPIO_Init+0x35c>)
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	089b      	lsrs	r3, r3, #2
 8000ea4:	3302      	adds	r3, #2
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000ed2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d003      	beq.n	8000f00 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000f00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	43db      	mvns	r3, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4013      	ands	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d003      	beq.n	8000f2c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d003      	beq.n	8000f56 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	fa22 f303 	lsr.w	r3, r2, r3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	f47f ae63 	bne.w	8000c38 <HAL_GPIO_Init+0x14>
  }
}
 8000f72:	bf00      	nop
 8000f74:	bf00      	nop
 8000f76:	3724      	adds	r7, #36	; 0x24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	58000400 	.word	0x58000400

08000f84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	807b      	strh	r3, [r7, #2]
 8000f90:	4613      	mov	r3, r2
 8000f92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f94:	787b      	ldrb	r3, [r7, #1]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d003      	beq.n	8000fa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f9a:	887a      	ldrh	r2, [r7, #2]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000fa0:	e003      	b.n	8000faa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000fa2:	887b      	ldrh	r3, [r7, #2]
 8000fa4:	041a      	lsls	r2, r3, #16
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	619a      	str	r2, [r3, #24]
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b085      	sub	sp, #20
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fc8:	887a      	ldrh	r2, [r7, #2]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	041a      	lsls	r2, r3, #16
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	43d9      	mvns	r1, r3
 8000fd4:	887b      	ldrh	r3, [r7, #2]
 8000fd6:	400b      	ands	r3, r1
 8000fd8:	431a      	orrs	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	619a      	str	r2, [r3, #24]
}
 8000fde:	bf00      	nop
 8000fe0:	3714      	adds	r7, #20
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
	...

08000fec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000ff4:	4b19      	ldr	r3, [pc, #100]	; (800105c <HAL_PWREx_ConfigSupply+0x70>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	f003 0304 	and.w	r3, r3, #4
 8000ffc:	2b04      	cmp	r3, #4
 8000ffe:	d00a      	beq.n	8001016 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001000:	4b16      	ldr	r3, [pc, #88]	; (800105c <HAL_PWREx_ConfigSupply+0x70>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	f003 0307 	and.w	r3, r3, #7
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	429a      	cmp	r2, r3
 800100c:	d001      	beq.n	8001012 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e01f      	b.n	8001052 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001012:	2300      	movs	r3, #0
 8001014:	e01d      	b.n	8001052 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001016:	4b11      	ldr	r3, [pc, #68]	; (800105c <HAL_PWREx_ConfigSupply+0x70>)
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	f023 0207 	bic.w	r2, r3, #7
 800101e:	490f      	ldr	r1, [pc, #60]	; (800105c <HAL_PWREx_ConfigSupply+0x70>)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4313      	orrs	r3, r2
 8001024:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001026:	f7ff fcdd 	bl	80009e4 <HAL_GetTick>
 800102a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800102c:	e009      	b.n	8001042 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800102e:	f7ff fcd9 	bl	80009e4 <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800103c:	d901      	bls.n	8001042 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e007      	b.n	8001052 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_PWREx_ConfigSupply+0x70>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800104a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800104e:	d1ee      	bne.n	800102e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	58024800 	.word	0x58024800

08001060 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08c      	sub	sp, #48	; 0x30
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d102      	bne.n	8001074 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	f000 bc48 	b.w	8001904 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	2b00      	cmp	r3, #0
 800107e:	f000 8088 	beq.w	8001192 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001082:	4b99      	ldr	r3, [pc, #612]	; (80012e8 <HAL_RCC_OscConfig+0x288>)
 8001084:	691b      	ldr	r3, [r3, #16]
 8001086:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800108a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800108c:	4b96      	ldr	r3, [pc, #600]	; (80012e8 <HAL_RCC_OscConfig+0x288>)
 800108e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001090:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001094:	2b10      	cmp	r3, #16
 8001096:	d007      	beq.n	80010a8 <HAL_RCC_OscConfig+0x48>
 8001098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800109a:	2b18      	cmp	r3, #24
 800109c:	d111      	bne.n	80010c2 <HAL_RCC_OscConfig+0x62>
 800109e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010a0:	f003 0303 	and.w	r3, r3, #3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d10c      	bne.n	80010c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a8:	4b8f      	ldr	r3, [pc, #572]	; (80012e8 <HAL_RCC_OscConfig+0x288>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d06d      	beq.n	8001190 <HAL_RCC_OscConfig+0x130>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d169      	bne.n	8001190 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	f000 bc21 	b.w	8001904 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ca:	d106      	bne.n	80010da <HAL_RCC_OscConfig+0x7a>
 80010cc:	4b86      	ldr	r3, [pc, #536]	; (80012e8 <HAL_RCC_OscConfig+0x288>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a85      	ldr	r2, [pc, #532]	; (80012e8 <HAL_RCC_OscConfig+0x288>)
 80010d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	e02e      	b.n	8001138 <HAL_RCC_OscConfig+0xd8>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d10c      	bne.n	80010fc <HAL_RCC_OscConfig+0x9c>
 80010e2:	4b81      	ldr	r3, [pc, #516]	; (80012e8 <HAL_RCC_OscConfig+0x288>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a80      	ldr	r2, [pc, #512]	; (80012e8 <HAL_RCC_OscConfig+0x288>)
 80010e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ec:	6013      	str	r3, [r2, #0]
 80010ee:	4b7e      	ldr	r3, [pc, #504]	; (80012e8 <HAL_RCC_OscConfig+0x288>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a7d      	ldr	r2, [pc, #500]	; (80012e8 <HAL_RCC_OscConfig+0x288>)
 80010f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	e01d      	b.n	8001138 <HAL_RCC_OscConfig+0xd8>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001104:	d10c      	bne.n	8001120 <HAL_RCC_OscConfig+0xc0>
 8001106:	4b78      	ldr	r3, [pc, #480]	; (80012e8 <HAL_RCC_OscConfig+0x288>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a77      	ldr	r2, [pc, #476]	; (80012e8 <HAL_RCC_OscConfig+0x288>)
 800110c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	4b75      	ldr	r3, [pc, #468]	; (80012e8 <HAL_RCC_OscConfig+0x288>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a74      	ldr	r2, [pc, #464]	; (80012e8 <HAL_RCC_OscConfig+0x288>)
 8001118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800111c:	6013      	str	r3, [r2, #0]
 800111e:	e00b      	b.n	8001138 <HAL_RCC_OscConfig+0xd8>
 8001120:	4b71      	ldr	r3, [pc, #452]	; (80012e8 <HAL_RCC_OscConfig+0x288>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a70      	ldr	r2, [pc, #448]	; (80012e8 <HAL_RCC_OscConfig+0x288>)
 8001126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	4b6e      	ldr	r3, [pc, #440]	; (80012e8 <HAL_RCC_OscConfig+0x288>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a6d      	ldr	r2, [pc, #436]	; (80012e8 <HAL_RCC_OscConfig+0x288>)
 8001132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001136:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d013      	beq.n	8001168 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001140:	f7ff fc50 	bl	80009e4 <HAL_GetTick>
 8001144:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001148:	f7ff fc4c 	bl	80009e4 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b64      	cmp	r3, #100	; 0x64
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e3d4      	b.n	8001904 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800115a:	4b63      	ldr	r3, [pc, #396]	; (80012e8 <HAL_RCC_OscConfig+0x288>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d0f0      	beq.n	8001148 <HAL_RCC_OscConfig+0xe8>
 8001166:	e014      	b.n	8001192 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001168:	f7ff fc3c 	bl	80009e4 <HAL_GetTick>
 800116c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001170:	f7ff fc38 	bl	80009e4 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b64      	cmp	r3, #100	; 0x64
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e3c0      	b.n	8001904 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001182:	4b59      	ldr	r3, [pc, #356]	; (80012e8 <HAL_RCC_OscConfig+0x288>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1f0      	bne.n	8001170 <HAL_RCC_OscConfig+0x110>
 800118e:	e000      	b.n	8001192 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b00      	cmp	r3, #0
 800119c:	f000 80ca 	beq.w	8001334 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011a0:	4b51      	ldr	r3, [pc, #324]	; (80012e8 <HAL_RCC_OscConfig+0x288>)
 80011a2:	691b      	ldr	r3, [r3, #16]
 80011a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80011a8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80011aa:	4b4f      	ldr	r3, [pc, #316]	; (80012e8 <HAL_RCC_OscConfig+0x288>)
 80011ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ae:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80011b0:	6a3b      	ldr	r3, [r7, #32]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d007      	beq.n	80011c6 <HAL_RCC_OscConfig+0x166>
 80011b6:	6a3b      	ldr	r3, [r7, #32]
 80011b8:	2b18      	cmp	r3, #24
 80011ba:	d156      	bne.n	800126a <HAL_RCC_OscConfig+0x20a>
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f003 0303 	and.w	r3, r3, #3
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d151      	bne.n	800126a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011c6:	4b48      	ldr	r3, [pc, #288]	; (80012e8 <HAL_RCC_OscConfig+0x288>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0304 	and.w	r3, r3, #4
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d005      	beq.n	80011de <HAL_RCC_OscConfig+0x17e>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d101      	bne.n	80011de <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e392      	b.n	8001904 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80011de:	4b42      	ldr	r3, [pc, #264]	; (80012e8 <HAL_RCC_OscConfig+0x288>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f023 0219 	bic.w	r2, r3, #25
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	493f      	ldr	r1, [pc, #252]	; (80012e8 <HAL_RCC_OscConfig+0x288>)
 80011ec:	4313      	orrs	r3, r2
 80011ee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f0:	f7ff fbf8 	bl	80009e4 <HAL_GetTick>
 80011f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011f6:	e008      	b.n	800120a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011f8:	f7ff fbf4 	bl	80009e4 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e37c      	b.n	8001904 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800120a:	4b37      	ldr	r3, [pc, #220]	; (80012e8 <HAL_RCC_OscConfig+0x288>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0304 	and.w	r3, r3, #4
 8001212:	2b00      	cmp	r3, #0
 8001214:	d0f0      	beq.n	80011f8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001216:	f7ff fc15 	bl	8000a44 <HAL_GetREVID>
 800121a:	4603      	mov	r3, r0
 800121c:	f241 0203 	movw	r2, #4099	; 0x1003
 8001220:	4293      	cmp	r3, r2
 8001222:	d817      	bhi.n	8001254 <HAL_RCC_OscConfig+0x1f4>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	2b40      	cmp	r3, #64	; 0x40
 800122a:	d108      	bne.n	800123e <HAL_RCC_OscConfig+0x1de>
 800122c:	4b2e      	ldr	r3, [pc, #184]	; (80012e8 <HAL_RCC_OscConfig+0x288>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001234:	4a2c      	ldr	r2, [pc, #176]	; (80012e8 <HAL_RCC_OscConfig+0x288>)
 8001236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800123a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800123c:	e07a      	b.n	8001334 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800123e:	4b2a      	ldr	r3, [pc, #168]	; (80012e8 <HAL_RCC_OscConfig+0x288>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	031b      	lsls	r3, r3, #12
 800124c:	4926      	ldr	r1, [pc, #152]	; (80012e8 <HAL_RCC_OscConfig+0x288>)
 800124e:	4313      	orrs	r3, r2
 8001250:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001252:	e06f      	b.n	8001334 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001254:	4b24      	ldr	r3, [pc, #144]	; (80012e8 <HAL_RCC_OscConfig+0x288>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	691b      	ldr	r3, [r3, #16]
 8001260:	061b      	lsls	r3, r3, #24
 8001262:	4921      	ldr	r1, [pc, #132]	; (80012e8 <HAL_RCC_OscConfig+0x288>)
 8001264:	4313      	orrs	r3, r2
 8001266:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001268:	e064      	b.n	8001334 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d047      	beq.n	8001302 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001272:	4b1d      	ldr	r3, [pc, #116]	; (80012e8 <HAL_RCC_OscConfig+0x288>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f023 0219 	bic.w	r2, r3, #25
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	491a      	ldr	r1, [pc, #104]	; (80012e8 <HAL_RCC_OscConfig+0x288>)
 8001280:	4313      	orrs	r3, r2
 8001282:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001284:	f7ff fbae 	bl	80009e4 <HAL_GetTick>
 8001288:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800128c:	f7ff fbaa 	bl	80009e4 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b02      	cmp	r3, #2
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e332      	b.n	8001904 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800129e:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <HAL_RCC_OscConfig+0x288>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0304 	and.w	r3, r3, #4
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d0f0      	beq.n	800128c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012aa:	f7ff fbcb 	bl	8000a44 <HAL_GetREVID>
 80012ae:	4603      	mov	r3, r0
 80012b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d819      	bhi.n	80012ec <HAL_RCC_OscConfig+0x28c>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	691b      	ldr	r3, [r3, #16]
 80012bc:	2b40      	cmp	r3, #64	; 0x40
 80012be:	d108      	bne.n	80012d2 <HAL_RCC_OscConfig+0x272>
 80012c0:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <HAL_RCC_OscConfig+0x288>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80012c8:	4a07      	ldr	r2, [pc, #28]	; (80012e8 <HAL_RCC_OscConfig+0x288>)
 80012ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ce:	6053      	str	r3, [r2, #4]
 80012d0:	e030      	b.n	8001334 <HAL_RCC_OscConfig+0x2d4>
 80012d2:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <HAL_RCC_OscConfig+0x288>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	031b      	lsls	r3, r3, #12
 80012e0:	4901      	ldr	r1, [pc, #4]	; (80012e8 <HAL_RCC_OscConfig+0x288>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	604b      	str	r3, [r1, #4]
 80012e6:	e025      	b.n	8001334 <HAL_RCC_OscConfig+0x2d4>
 80012e8:	58024400 	.word	0x58024400
 80012ec:	4b9a      	ldr	r3, [pc, #616]	; (8001558 <HAL_RCC_OscConfig+0x4f8>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	691b      	ldr	r3, [r3, #16]
 80012f8:	061b      	lsls	r3, r3, #24
 80012fa:	4997      	ldr	r1, [pc, #604]	; (8001558 <HAL_RCC_OscConfig+0x4f8>)
 80012fc:	4313      	orrs	r3, r2
 80012fe:	604b      	str	r3, [r1, #4]
 8001300:	e018      	b.n	8001334 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001302:	4b95      	ldr	r3, [pc, #596]	; (8001558 <HAL_RCC_OscConfig+0x4f8>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a94      	ldr	r2, [pc, #592]	; (8001558 <HAL_RCC_OscConfig+0x4f8>)
 8001308:	f023 0301 	bic.w	r3, r3, #1
 800130c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800130e:	f7ff fb69 	bl	80009e4 <HAL_GetTick>
 8001312:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001314:	e008      	b.n	8001328 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001316:	f7ff fb65 	bl	80009e4 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e2ed      	b.n	8001904 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001328:	4b8b      	ldr	r3, [pc, #556]	; (8001558 <HAL_RCC_OscConfig+0x4f8>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	2b00      	cmp	r3, #0
 8001332:	d1f0      	bne.n	8001316 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0310 	and.w	r3, r3, #16
 800133c:	2b00      	cmp	r3, #0
 800133e:	f000 80a9 	beq.w	8001494 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001342:	4b85      	ldr	r3, [pc, #532]	; (8001558 <HAL_RCC_OscConfig+0x4f8>)
 8001344:	691b      	ldr	r3, [r3, #16]
 8001346:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800134a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800134c:	4b82      	ldr	r3, [pc, #520]	; (8001558 <HAL_RCC_OscConfig+0x4f8>)
 800134e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001350:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	2b08      	cmp	r3, #8
 8001356:	d007      	beq.n	8001368 <HAL_RCC_OscConfig+0x308>
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	2b18      	cmp	r3, #24
 800135c:	d13a      	bne.n	80013d4 <HAL_RCC_OscConfig+0x374>
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	f003 0303 	and.w	r3, r3, #3
 8001364:	2b01      	cmp	r3, #1
 8001366:	d135      	bne.n	80013d4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001368:	4b7b      	ldr	r3, [pc, #492]	; (8001558 <HAL_RCC_OscConfig+0x4f8>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001370:	2b00      	cmp	r3, #0
 8001372:	d005      	beq.n	8001380 <HAL_RCC_OscConfig+0x320>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69db      	ldr	r3, [r3, #28]
 8001378:	2b80      	cmp	r3, #128	; 0x80
 800137a:	d001      	beq.n	8001380 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e2c1      	b.n	8001904 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001380:	f7ff fb60 	bl	8000a44 <HAL_GetREVID>
 8001384:	4603      	mov	r3, r0
 8001386:	f241 0203 	movw	r2, #4099	; 0x1003
 800138a:	4293      	cmp	r3, r2
 800138c:	d817      	bhi.n	80013be <HAL_RCC_OscConfig+0x35e>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a1b      	ldr	r3, [r3, #32]
 8001392:	2b20      	cmp	r3, #32
 8001394:	d108      	bne.n	80013a8 <HAL_RCC_OscConfig+0x348>
 8001396:	4b70      	ldr	r3, [pc, #448]	; (8001558 <HAL_RCC_OscConfig+0x4f8>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800139e:	4a6e      	ldr	r2, [pc, #440]	; (8001558 <HAL_RCC_OscConfig+0x4f8>)
 80013a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80013a4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013a6:	e075      	b.n	8001494 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013a8:	4b6b      	ldr	r3, [pc, #428]	; (8001558 <HAL_RCC_OscConfig+0x4f8>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a1b      	ldr	r3, [r3, #32]
 80013b4:	069b      	lsls	r3, r3, #26
 80013b6:	4968      	ldr	r1, [pc, #416]	; (8001558 <HAL_RCC_OscConfig+0x4f8>)
 80013b8:	4313      	orrs	r3, r2
 80013ba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013bc:	e06a      	b.n	8001494 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013be:	4b66      	ldr	r3, [pc, #408]	; (8001558 <HAL_RCC_OscConfig+0x4f8>)
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a1b      	ldr	r3, [r3, #32]
 80013ca:	061b      	lsls	r3, r3, #24
 80013cc:	4962      	ldr	r1, [pc, #392]	; (8001558 <HAL_RCC_OscConfig+0x4f8>)
 80013ce:	4313      	orrs	r3, r2
 80013d0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013d2:	e05f      	b.n	8001494 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	69db      	ldr	r3, [r3, #28]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d042      	beq.n	8001462 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80013dc:	4b5e      	ldr	r3, [pc, #376]	; (8001558 <HAL_RCC_OscConfig+0x4f8>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a5d      	ldr	r2, [pc, #372]	; (8001558 <HAL_RCC_OscConfig+0x4f8>)
 80013e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e8:	f7ff fafc 	bl	80009e4 <HAL_GetTick>
 80013ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80013f0:	f7ff faf8 	bl	80009e4 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e280      	b.n	8001904 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001402:	4b55      	ldr	r3, [pc, #340]	; (8001558 <HAL_RCC_OscConfig+0x4f8>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0f0      	beq.n	80013f0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800140e:	f7ff fb19 	bl	8000a44 <HAL_GetREVID>
 8001412:	4603      	mov	r3, r0
 8001414:	f241 0203 	movw	r2, #4099	; 0x1003
 8001418:	4293      	cmp	r3, r2
 800141a:	d817      	bhi.n	800144c <HAL_RCC_OscConfig+0x3ec>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a1b      	ldr	r3, [r3, #32]
 8001420:	2b20      	cmp	r3, #32
 8001422:	d108      	bne.n	8001436 <HAL_RCC_OscConfig+0x3d6>
 8001424:	4b4c      	ldr	r3, [pc, #304]	; (8001558 <HAL_RCC_OscConfig+0x4f8>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800142c:	4a4a      	ldr	r2, [pc, #296]	; (8001558 <HAL_RCC_OscConfig+0x4f8>)
 800142e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001432:	6053      	str	r3, [r2, #4]
 8001434:	e02e      	b.n	8001494 <HAL_RCC_OscConfig+0x434>
 8001436:	4b48      	ldr	r3, [pc, #288]	; (8001558 <HAL_RCC_OscConfig+0x4f8>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a1b      	ldr	r3, [r3, #32]
 8001442:	069b      	lsls	r3, r3, #26
 8001444:	4944      	ldr	r1, [pc, #272]	; (8001558 <HAL_RCC_OscConfig+0x4f8>)
 8001446:	4313      	orrs	r3, r2
 8001448:	604b      	str	r3, [r1, #4]
 800144a:	e023      	b.n	8001494 <HAL_RCC_OscConfig+0x434>
 800144c:	4b42      	ldr	r3, [pc, #264]	; (8001558 <HAL_RCC_OscConfig+0x4f8>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	061b      	lsls	r3, r3, #24
 800145a:	493f      	ldr	r1, [pc, #252]	; (8001558 <HAL_RCC_OscConfig+0x4f8>)
 800145c:	4313      	orrs	r3, r2
 800145e:	60cb      	str	r3, [r1, #12]
 8001460:	e018      	b.n	8001494 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001462:	4b3d      	ldr	r3, [pc, #244]	; (8001558 <HAL_RCC_OscConfig+0x4f8>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a3c      	ldr	r2, [pc, #240]	; (8001558 <HAL_RCC_OscConfig+0x4f8>)
 8001468:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800146c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146e:	f7ff fab9 	bl	80009e4 <HAL_GetTick>
 8001472:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001476:	f7ff fab5 	bl	80009e4 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e23d      	b.n	8001904 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001488:	4b33      	ldr	r3, [pc, #204]	; (8001558 <HAL_RCC_OscConfig+0x4f8>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1f0      	bne.n	8001476 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0308 	and.w	r3, r3, #8
 800149c:	2b00      	cmp	r3, #0
 800149e:	d036      	beq.n	800150e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	695b      	ldr	r3, [r3, #20]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d019      	beq.n	80014dc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014a8:	4b2b      	ldr	r3, [pc, #172]	; (8001558 <HAL_RCC_OscConfig+0x4f8>)
 80014aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ac:	4a2a      	ldr	r2, [pc, #168]	; (8001558 <HAL_RCC_OscConfig+0x4f8>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b4:	f7ff fa96 	bl	80009e4 <HAL_GetTick>
 80014b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014bc:	f7ff fa92 	bl	80009e4 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e21a      	b.n	8001904 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014ce:	4b22      	ldr	r3, [pc, #136]	; (8001558 <HAL_RCC_OscConfig+0x4f8>)
 80014d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f0      	beq.n	80014bc <HAL_RCC_OscConfig+0x45c>
 80014da:	e018      	b.n	800150e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014dc:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <HAL_RCC_OscConfig+0x4f8>)
 80014de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014e0:	4a1d      	ldr	r2, [pc, #116]	; (8001558 <HAL_RCC_OscConfig+0x4f8>)
 80014e2:	f023 0301 	bic.w	r3, r3, #1
 80014e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e8:	f7ff fa7c 	bl	80009e4 <HAL_GetTick>
 80014ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014f0:	f7ff fa78 	bl	80009e4 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e200      	b.n	8001904 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001502:	4b15      	ldr	r3, [pc, #84]	; (8001558 <HAL_RCC_OscConfig+0x4f8>)
 8001504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f0      	bne.n	80014f0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0320 	and.w	r3, r3, #32
 8001516:	2b00      	cmp	r3, #0
 8001518:	d039      	beq.n	800158e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d01c      	beq.n	800155c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001522:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <HAL_RCC_OscConfig+0x4f8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a0c      	ldr	r2, [pc, #48]	; (8001558 <HAL_RCC_OscConfig+0x4f8>)
 8001528:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800152c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800152e:	f7ff fa59 	bl	80009e4 <HAL_GetTick>
 8001532:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001536:	f7ff fa55 	bl	80009e4 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e1dd      	b.n	8001904 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001548:	4b03      	ldr	r3, [pc, #12]	; (8001558 <HAL_RCC_OscConfig+0x4f8>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d0f0      	beq.n	8001536 <HAL_RCC_OscConfig+0x4d6>
 8001554:	e01b      	b.n	800158e <HAL_RCC_OscConfig+0x52e>
 8001556:	bf00      	nop
 8001558:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800155c:	4b9b      	ldr	r3, [pc, #620]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a9a      	ldr	r2, [pc, #616]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 8001562:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001566:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001568:	f7ff fa3c 	bl	80009e4 <HAL_GetTick>
 800156c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001570:	f7ff fa38 	bl	80009e4 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e1c0      	b.n	8001904 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001582:	4b92      	ldr	r3, [pc, #584]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1f0      	bne.n	8001570 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0304 	and.w	r3, r3, #4
 8001596:	2b00      	cmp	r3, #0
 8001598:	f000 8081 	beq.w	800169e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800159c:	4b8c      	ldr	r3, [pc, #560]	; (80017d0 <HAL_RCC_OscConfig+0x770>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a8b      	ldr	r2, [pc, #556]	; (80017d0 <HAL_RCC_OscConfig+0x770>)
 80015a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80015a8:	f7ff fa1c 	bl	80009e4 <HAL_GetTick>
 80015ac:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015b0:	f7ff fa18 	bl	80009e4 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b64      	cmp	r3, #100	; 0x64
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e1a0      	b.n	8001904 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80015c2:	4b83      	ldr	r3, [pc, #524]	; (80017d0 <HAL_RCC_OscConfig+0x770>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0f0      	beq.n	80015b0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d106      	bne.n	80015e4 <HAL_RCC_OscConfig+0x584>
 80015d6:	4b7d      	ldr	r3, [pc, #500]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 80015d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015da:	4a7c      	ldr	r2, [pc, #496]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6713      	str	r3, [r2, #112]	; 0x70
 80015e2:	e02d      	b.n	8001640 <HAL_RCC_OscConfig+0x5e0>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d10c      	bne.n	8001606 <HAL_RCC_OscConfig+0x5a6>
 80015ec:	4b77      	ldr	r3, [pc, #476]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 80015ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f0:	4a76      	ldr	r2, [pc, #472]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 80015f2:	f023 0301 	bic.w	r3, r3, #1
 80015f6:	6713      	str	r3, [r2, #112]	; 0x70
 80015f8:	4b74      	ldr	r3, [pc, #464]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 80015fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015fc:	4a73      	ldr	r2, [pc, #460]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 80015fe:	f023 0304 	bic.w	r3, r3, #4
 8001602:	6713      	str	r3, [r2, #112]	; 0x70
 8001604:	e01c      	b.n	8001640 <HAL_RCC_OscConfig+0x5e0>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	2b05      	cmp	r3, #5
 800160c:	d10c      	bne.n	8001628 <HAL_RCC_OscConfig+0x5c8>
 800160e:	4b6f      	ldr	r3, [pc, #444]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 8001610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001612:	4a6e      	ldr	r2, [pc, #440]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 8001614:	f043 0304 	orr.w	r3, r3, #4
 8001618:	6713      	str	r3, [r2, #112]	; 0x70
 800161a:	4b6c      	ldr	r3, [pc, #432]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 800161c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800161e:	4a6b      	ldr	r2, [pc, #428]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6713      	str	r3, [r2, #112]	; 0x70
 8001626:	e00b      	b.n	8001640 <HAL_RCC_OscConfig+0x5e0>
 8001628:	4b68      	ldr	r3, [pc, #416]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 800162a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800162c:	4a67      	ldr	r2, [pc, #412]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 800162e:	f023 0301 	bic.w	r3, r3, #1
 8001632:	6713      	str	r3, [r2, #112]	; 0x70
 8001634:	4b65      	ldr	r3, [pc, #404]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 8001636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001638:	4a64      	ldr	r2, [pc, #400]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 800163a:	f023 0304 	bic.w	r3, r3, #4
 800163e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d015      	beq.n	8001674 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001648:	f7ff f9cc 	bl	80009e4 <HAL_GetTick>
 800164c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800164e:	e00a      	b.n	8001666 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001650:	f7ff f9c8 	bl	80009e4 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	f241 3288 	movw	r2, #5000	; 0x1388
 800165e:	4293      	cmp	r3, r2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e14e      	b.n	8001904 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001666:	4b59      	ldr	r3, [pc, #356]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 8001668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0ee      	beq.n	8001650 <HAL_RCC_OscConfig+0x5f0>
 8001672:	e014      	b.n	800169e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001674:	f7ff f9b6 	bl	80009e4 <HAL_GetTick>
 8001678:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800167a:	e00a      	b.n	8001692 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800167c:	f7ff f9b2 	bl	80009e4 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	f241 3288 	movw	r2, #5000	; 0x1388
 800168a:	4293      	cmp	r3, r2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e138      	b.n	8001904 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001692:	4b4e      	ldr	r3, [pc, #312]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 8001694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1ee      	bne.n	800167c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f000 812d 	beq.w	8001902 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80016a8:	4b48      	ldr	r3, [pc, #288]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016b0:	2b18      	cmp	r3, #24
 80016b2:	f000 80bd 	beq.w	8001830 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	f040 809e 	bne.w	80017fc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016c0:	4b42      	ldr	r3, [pc, #264]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a41      	ldr	r2, [pc, #260]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 80016c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016cc:	f7ff f98a 	bl	80009e4 <HAL_GetTick>
 80016d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d4:	f7ff f986 	bl	80009e4 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e10e      	b.n	8001904 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016e6:	4b39      	ldr	r3, [pc, #228]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f0      	bne.n	80016d4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016f2:	4b36      	ldr	r3, [pc, #216]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 80016f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016f6:	4b37      	ldr	r3, [pc, #220]	; (80017d4 <HAL_RCC_OscConfig+0x774>)
 80016f8:	4013      	ands	r3, r2
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001702:	0112      	lsls	r2, r2, #4
 8001704:	430a      	orrs	r2, r1
 8001706:	4931      	ldr	r1, [pc, #196]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 8001708:	4313      	orrs	r3, r2
 800170a:	628b      	str	r3, [r1, #40]	; 0x28
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001710:	3b01      	subs	r3, #1
 8001712:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800171a:	3b01      	subs	r3, #1
 800171c:	025b      	lsls	r3, r3, #9
 800171e:	b29b      	uxth	r3, r3
 8001720:	431a      	orrs	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001726:	3b01      	subs	r3, #1
 8001728:	041b      	lsls	r3, r3, #16
 800172a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800172e:	431a      	orrs	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001734:	3b01      	subs	r3, #1
 8001736:	061b      	lsls	r3, r3, #24
 8001738:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800173c:	4923      	ldr	r1, [pc, #140]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 800173e:	4313      	orrs	r3, r2
 8001740:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001742:	4b22      	ldr	r3, [pc, #136]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 8001744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001746:	4a21      	ldr	r2, [pc, #132]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 8001748:	f023 0301 	bic.w	r3, r3, #1
 800174c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800174e:	4b1f      	ldr	r3, [pc, #124]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 8001750:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001752:	4b21      	ldr	r3, [pc, #132]	; (80017d8 <HAL_RCC_OscConfig+0x778>)
 8001754:	4013      	ands	r3, r2
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800175a:	00d2      	lsls	r2, r2, #3
 800175c:	491b      	ldr	r1, [pc, #108]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 800175e:	4313      	orrs	r3, r2
 8001760:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001762:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 8001764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001766:	f023 020c 	bic.w	r2, r3, #12
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	4917      	ldr	r1, [pc, #92]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 8001770:	4313      	orrs	r3, r2
 8001772:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001774:	4b15      	ldr	r3, [pc, #84]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 8001776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001778:	f023 0202 	bic.w	r2, r3, #2
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001780:	4912      	ldr	r1, [pc, #72]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 8001782:	4313      	orrs	r3, r2
 8001784:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001786:	4b11      	ldr	r3, [pc, #68]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 8001788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178a:	4a10      	ldr	r2, [pc, #64]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 800178c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001790:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 8001794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001796:	4a0d      	ldr	r2, [pc, #52]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 8001798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800179c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 80017a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a2:	4a0a      	ldr	r2, [pc, #40]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 80017a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 80017ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ae:	4a07      	ldr	r2, [pc, #28]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017b6:	4b05      	ldr	r3, [pc, #20]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a04      	ldr	r2, [pc, #16]	; (80017cc <HAL_RCC_OscConfig+0x76c>)
 80017bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c2:	f7ff f90f 	bl	80009e4 <HAL_GetTick>
 80017c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017c8:	e011      	b.n	80017ee <HAL_RCC_OscConfig+0x78e>
 80017ca:	bf00      	nop
 80017cc:	58024400 	.word	0x58024400
 80017d0:	58024800 	.word	0x58024800
 80017d4:	fffffc0c 	.word	0xfffffc0c
 80017d8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017dc:	f7ff f902 	bl	80009e4 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e08a      	b.n	8001904 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017ee:	4b47      	ldr	r3, [pc, #284]	; (800190c <HAL_RCC_OscConfig+0x8ac>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d0f0      	beq.n	80017dc <HAL_RCC_OscConfig+0x77c>
 80017fa:	e082      	b.n	8001902 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017fc:	4b43      	ldr	r3, [pc, #268]	; (800190c <HAL_RCC_OscConfig+0x8ac>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a42      	ldr	r2, [pc, #264]	; (800190c <HAL_RCC_OscConfig+0x8ac>)
 8001802:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001806:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001808:	f7ff f8ec 	bl	80009e4 <HAL_GetTick>
 800180c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001810:	f7ff f8e8 	bl	80009e4 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e070      	b.n	8001904 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001822:	4b3a      	ldr	r3, [pc, #232]	; (800190c <HAL_RCC_OscConfig+0x8ac>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f0      	bne.n	8001810 <HAL_RCC_OscConfig+0x7b0>
 800182e:	e068      	b.n	8001902 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001830:	4b36      	ldr	r3, [pc, #216]	; (800190c <HAL_RCC_OscConfig+0x8ac>)
 8001832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001834:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001836:	4b35      	ldr	r3, [pc, #212]	; (800190c <HAL_RCC_OscConfig+0x8ac>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001840:	2b01      	cmp	r3, #1
 8001842:	d031      	beq.n	80018a8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	f003 0203 	and.w	r2, r3, #3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800184e:	429a      	cmp	r2, r3
 8001850:	d12a      	bne.n	80018a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	091b      	lsrs	r3, r3, #4
 8001856:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800185e:	429a      	cmp	r2, r3
 8001860:	d122      	bne.n	80018a8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800186e:	429a      	cmp	r2, r3
 8001870:	d11a      	bne.n	80018a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	0a5b      	lsrs	r3, r3, #9
 8001876:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800187e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001880:	429a      	cmp	r2, r3
 8001882:	d111      	bne.n	80018a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	0c1b      	lsrs	r3, r3, #16
 8001888:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001890:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001892:	429a      	cmp	r2, r3
 8001894:	d108      	bne.n	80018a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	0e1b      	lsrs	r3, r3, #24
 800189a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018a2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d001      	beq.n	80018ac <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e02b      	b.n	8001904 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80018ac:	4b17      	ldr	r3, [pc, #92]	; (800190c <HAL_RCC_OscConfig+0x8ac>)
 80018ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b0:	08db      	lsrs	r3, r3, #3
 80018b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80018b6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d01f      	beq.n	8001902 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80018c2:	4b12      	ldr	r3, [pc, #72]	; (800190c <HAL_RCC_OscConfig+0x8ac>)
 80018c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c6:	4a11      	ldr	r2, [pc, #68]	; (800190c <HAL_RCC_OscConfig+0x8ac>)
 80018c8:	f023 0301 	bic.w	r3, r3, #1
 80018cc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018ce:	f7ff f889 	bl	80009e4 <HAL_GetTick>
 80018d2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80018d4:	bf00      	nop
 80018d6:	f7ff f885 	bl	80009e4 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018de:	4293      	cmp	r3, r2
 80018e0:	d0f9      	beq.n	80018d6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80018e2:	4b0a      	ldr	r3, [pc, #40]	; (800190c <HAL_RCC_OscConfig+0x8ac>)
 80018e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018e6:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <HAL_RCC_OscConfig+0x8b0>)
 80018e8:	4013      	ands	r3, r2
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80018ee:	00d2      	lsls	r2, r2, #3
 80018f0:	4906      	ldr	r1, [pc, #24]	; (800190c <HAL_RCC_OscConfig+0x8ac>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80018f6:	4b05      	ldr	r3, [pc, #20]	; (800190c <HAL_RCC_OscConfig+0x8ac>)
 80018f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fa:	4a04      	ldr	r2, [pc, #16]	; (800190c <HAL_RCC_OscConfig+0x8ac>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3730      	adds	r7, #48	; 0x30
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	58024400 	.word	0x58024400
 8001910:	ffff0007 	.word	0xffff0007

08001914 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d101      	bne.n	8001928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e19c      	b.n	8001c62 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001928:	4b8a      	ldr	r3, [pc, #552]	; (8001b54 <HAL_RCC_ClockConfig+0x240>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 030f 	and.w	r3, r3, #15
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	d910      	bls.n	8001958 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001936:	4b87      	ldr	r3, [pc, #540]	; (8001b54 <HAL_RCC_ClockConfig+0x240>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f023 020f 	bic.w	r2, r3, #15
 800193e:	4985      	ldr	r1, [pc, #532]	; (8001b54 <HAL_RCC_ClockConfig+0x240>)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	4313      	orrs	r3, r2
 8001944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001946:	4b83      	ldr	r3, [pc, #524]	; (8001b54 <HAL_RCC_ClockConfig+0x240>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 030f 	and.w	r3, r3, #15
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	429a      	cmp	r2, r3
 8001952:	d001      	beq.n	8001958 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e184      	b.n	8001c62 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	2b00      	cmp	r3, #0
 8001962:	d010      	beq.n	8001986 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	691a      	ldr	r2, [r3, #16]
 8001968:	4b7b      	ldr	r3, [pc, #492]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001970:	429a      	cmp	r2, r3
 8001972:	d908      	bls.n	8001986 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001974:	4b78      	ldr	r3, [pc, #480]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	4975      	ldr	r1, [pc, #468]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 8001982:	4313      	orrs	r3, r2
 8001984:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	2b00      	cmp	r3, #0
 8001990:	d010      	beq.n	80019b4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	695a      	ldr	r2, [r3, #20]
 8001996:	4b70      	ldr	r3, [pc, #448]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800199e:	429a      	cmp	r2, r3
 80019a0:	d908      	bls.n	80019b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80019a2:	4b6d      	ldr	r3, [pc, #436]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	496a      	ldr	r1, [pc, #424]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0310 	and.w	r3, r3, #16
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d010      	beq.n	80019e2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	699a      	ldr	r2, [r3, #24]
 80019c4:	4b64      	ldr	r3, [pc, #400]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 80019c6:	69db      	ldr	r3, [r3, #28]
 80019c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d908      	bls.n	80019e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80019d0:	4b61      	ldr	r3, [pc, #388]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 80019d2:	69db      	ldr	r3, [r3, #28]
 80019d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	495e      	ldr	r1, [pc, #376]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0320 	and.w	r3, r3, #32
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d010      	beq.n	8001a10 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69da      	ldr	r2, [r3, #28]
 80019f2:	4b59      	ldr	r3, [pc, #356]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d908      	bls.n	8001a10 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80019fe:	4b56      	ldr	r3, [pc, #344]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	4953      	ldr	r1, [pc, #332]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d010      	beq.n	8001a3e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68da      	ldr	r2, [r3, #12]
 8001a20:	4b4d      	ldr	r3, [pc, #308]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	f003 030f 	and.w	r3, r3, #15
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d908      	bls.n	8001a3e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a2c:	4b4a      	ldr	r3, [pc, #296]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	f023 020f 	bic.w	r2, r3, #15
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	4947      	ldr	r1, [pc, #284]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d055      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001a4a:	4b43      	ldr	r3, [pc, #268]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	4940      	ldr	r1, [pc, #256]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d107      	bne.n	8001a74 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a64:	4b3c      	ldr	r3, [pc, #240]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d121      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e0f6      	b.n	8001c62 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b03      	cmp	r3, #3
 8001a7a:	d107      	bne.n	8001a8c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a7c:	4b36      	ldr	r3, [pc, #216]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d115      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e0ea      	b.n	8001c62 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d107      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a94:	4b30      	ldr	r3, [pc, #192]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d109      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e0de      	b.n	8001c62 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001aa4:	4b2c      	ldr	r3, [pc, #176]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0d6      	b.n	8001c62 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ab4:	4b28      	ldr	r3, [pc, #160]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	f023 0207 	bic.w	r2, r3, #7
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	4925      	ldr	r1, [pc, #148]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ac6:	f7fe ff8d 	bl	80009e4 <HAL_GetTick>
 8001aca:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001acc:	e00a      	b.n	8001ae4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ace:	f7fe ff89 	bl	80009e4 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e0be      	b.n	8001c62 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae4:	4b1c      	ldr	r3, [pc, #112]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 8001ae6:	691b      	ldr	r3, [r3, #16]
 8001ae8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d1eb      	bne.n	8001ace <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d010      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68da      	ldr	r2, [r3, #12]
 8001b06:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	f003 030f 	and.w	r3, r3, #15
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d208      	bcs.n	8001b24 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b12:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	f023 020f 	bic.w	r2, r3, #15
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	490e      	ldr	r1, [pc, #56]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b24:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <HAL_RCC_ClockConfig+0x240>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 030f 	and.w	r3, r3, #15
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d214      	bcs.n	8001b5c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b32:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <HAL_RCC_ClockConfig+0x240>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f023 020f 	bic.w	r2, r3, #15
 8001b3a:	4906      	ldr	r1, [pc, #24]	; (8001b54 <HAL_RCC_ClockConfig+0x240>)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b42:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <HAL_RCC_ClockConfig+0x240>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d005      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e086      	b.n	8001c62 <HAL_RCC_ClockConfig+0x34e>
 8001b54:	52002000 	.word	0x52002000
 8001b58:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d010      	beq.n	8001b8a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	691a      	ldr	r2, [r3, #16]
 8001b6c:	4b3f      	ldr	r3, [pc, #252]	; (8001c6c <HAL_RCC_ClockConfig+0x358>)
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d208      	bcs.n	8001b8a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001b78:	4b3c      	ldr	r3, [pc, #240]	; (8001c6c <HAL_RCC_ClockConfig+0x358>)
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	4939      	ldr	r1, [pc, #228]	; (8001c6c <HAL_RCC_ClockConfig+0x358>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0308 	and.w	r3, r3, #8
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d010      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	695a      	ldr	r2, [r3, #20]
 8001b9a:	4b34      	ldr	r3, [pc, #208]	; (8001c6c <HAL_RCC_ClockConfig+0x358>)
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d208      	bcs.n	8001bb8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ba6:	4b31      	ldr	r3, [pc, #196]	; (8001c6c <HAL_RCC_ClockConfig+0x358>)
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	492e      	ldr	r1, [pc, #184]	; (8001c6c <HAL_RCC_ClockConfig+0x358>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0310 	and.w	r3, r3, #16
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d010      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	699a      	ldr	r2, [r3, #24]
 8001bc8:	4b28      	ldr	r3, [pc, #160]	; (8001c6c <HAL_RCC_ClockConfig+0x358>)
 8001bca:	69db      	ldr	r3, [r3, #28]
 8001bcc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d208      	bcs.n	8001be6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001bd4:	4b25      	ldr	r3, [pc, #148]	; (8001c6c <HAL_RCC_ClockConfig+0x358>)
 8001bd6:	69db      	ldr	r3, [r3, #28]
 8001bd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	4922      	ldr	r1, [pc, #136]	; (8001c6c <HAL_RCC_ClockConfig+0x358>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0320 	and.w	r3, r3, #32
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d010      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69da      	ldr	r2, [r3, #28]
 8001bf6:	4b1d      	ldr	r3, [pc, #116]	; (8001c6c <HAL_RCC_ClockConfig+0x358>)
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d208      	bcs.n	8001c14 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001c02:	4b1a      	ldr	r3, [pc, #104]	; (8001c6c <HAL_RCC_ClockConfig+0x358>)
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	4917      	ldr	r1, [pc, #92]	; (8001c6c <HAL_RCC_ClockConfig+0x358>)
 8001c10:	4313      	orrs	r3, r2
 8001c12:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c14:	f000 f834 	bl	8001c80 <HAL_RCC_GetSysClockFreq>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	4b14      	ldr	r3, [pc, #80]	; (8001c6c <HAL_RCC_ClockConfig+0x358>)
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	0a1b      	lsrs	r3, r3, #8
 8001c20:	f003 030f 	and.w	r3, r3, #15
 8001c24:	4912      	ldr	r1, [pc, #72]	; (8001c70 <HAL_RCC_ClockConfig+0x35c>)
 8001c26:	5ccb      	ldrb	r3, [r1, r3]
 8001c28:	f003 031f 	and.w	r3, r3, #31
 8001c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c30:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c32:	4b0e      	ldr	r3, [pc, #56]	; (8001c6c <HAL_RCC_ClockConfig+0x358>)
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	4a0d      	ldr	r2, [pc, #52]	; (8001c70 <HAL_RCC_ClockConfig+0x35c>)
 8001c3c:	5cd3      	ldrb	r3, [r2, r3]
 8001c3e:	f003 031f 	and.w	r3, r3, #31
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	fa22 f303 	lsr.w	r3, r2, r3
 8001c48:	4a0a      	ldr	r2, [pc, #40]	; (8001c74 <HAL_RCC_ClockConfig+0x360>)
 8001c4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c4c:	4a0a      	ldr	r2, [pc, #40]	; (8001c78 <HAL_RCC_ClockConfig+0x364>)
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001c52:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <HAL_RCC_ClockConfig+0x368>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7fe fe7a 	bl	8000950 <HAL_InitTick>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	58024400 	.word	0x58024400
 8001c70:	0800310c 	.word	0x0800310c
 8001c74:	24000004 	.word	0x24000004
 8001c78:	24000000 	.word	0x24000000
 8001c7c:	24000008 	.word	0x24000008

08001c80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b089      	sub	sp, #36	; 0x24
 8001c84:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c86:	4bb3      	ldr	r3, [pc, #716]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c8e:	2b18      	cmp	r3, #24
 8001c90:	f200 8155 	bhi.w	8001f3e <HAL_RCC_GetSysClockFreq+0x2be>
 8001c94:	a201      	add	r2, pc, #4	; (adr r2, 8001c9c <HAL_RCC_GetSysClockFreq+0x1c>)
 8001c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c9a:	bf00      	nop
 8001c9c:	08001d01 	.word	0x08001d01
 8001ca0:	08001f3f 	.word	0x08001f3f
 8001ca4:	08001f3f 	.word	0x08001f3f
 8001ca8:	08001f3f 	.word	0x08001f3f
 8001cac:	08001f3f 	.word	0x08001f3f
 8001cb0:	08001f3f 	.word	0x08001f3f
 8001cb4:	08001f3f 	.word	0x08001f3f
 8001cb8:	08001f3f 	.word	0x08001f3f
 8001cbc:	08001d27 	.word	0x08001d27
 8001cc0:	08001f3f 	.word	0x08001f3f
 8001cc4:	08001f3f 	.word	0x08001f3f
 8001cc8:	08001f3f 	.word	0x08001f3f
 8001ccc:	08001f3f 	.word	0x08001f3f
 8001cd0:	08001f3f 	.word	0x08001f3f
 8001cd4:	08001f3f 	.word	0x08001f3f
 8001cd8:	08001f3f 	.word	0x08001f3f
 8001cdc:	08001d2d 	.word	0x08001d2d
 8001ce0:	08001f3f 	.word	0x08001f3f
 8001ce4:	08001f3f 	.word	0x08001f3f
 8001ce8:	08001f3f 	.word	0x08001f3f
 8001cec:	08001f3f 	.word	0x08001f3f
 8001cf0:	08001f3f 	.word	0x08001f3f
 8001cf4:	08001f3f 	.word	0x08001f3f
 8001cf8:	08001f3f 	.word	0x08001f3f
 8001cfc:	08001d33 	.word	0x08001d33
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001d00:	4b94      	ldr	r3, [pc, #592]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0320 	and.w	r3, r3, #32
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d009      	beq.n	8001d20 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001d0c:	4b91      	ldr	r3, [pc, #580]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	08db      	lsrs	r3, r3, #3
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	4a90      	ldr	r2, [pc, #576]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d18:	fa22 f303 	lsr.w	r3, r2, r3
 8001d1c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001d1e:	e111      	b.n	8001f44 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001d20:	4b8d      	ldr	r3, [pc, #564]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d22:	61bb      	str	r3, [r7, #24]
      break;
 8001d24:	e10e      	b.n	8001f44 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001d26:	4b8d      	ldr	r3, [pc, #564]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001d28:	61bb      	str	r3, [r7, #24]
      break;
 8001d2a:	e10b      	b.n	8001f44 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001d2c:	4b8c      	ldr	r3, [pc, #560]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001d2e:	61bb      	str	r3, [r7, #24]
      break;
 8001d30:	e108      	b.n	8001f44 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001d32:	4b88      	ldr	r3, [pc, #544]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001d3c:	4b85      	ldr	r3, [pc, #532]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d40:	091b      	lsrs	r3, r3, #4
 8001d42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d46:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001d48:	4b82      	ldr	r3, [pc, #520]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001d52:	4b80      	ldr	r3, [pc, #512]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d56:	08db      	lsrs	r3, r3, #3
 8001d58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	fb02 f303 	mul.w	r3, r2, r3
 8001d62:	ee07 3a90 	vmov	s15, r3
 8001d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d6a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 80e1 	beq.w	8001f38 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	f000 8083 	beq.w	8001e84 <HAL_RCC_GetSysClockFreq+0x204>
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	f200 80a1 	bhi.w	8001ec8 <HAL_RCC_GetSysClockFreq+0x248>
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <HAL_RCC_GetSysClockFreq+0x114>
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d056      	beq.n	8001e40 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001d92:	e099      	b.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001d94:	4b6f      	ldr	r3, [pc, #444]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0320 	and.w	r3, r3, #32
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d02d      	beq.n	8001dfc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001da0:	4b6c      	ldr	r3, [pc, #432]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	08db      	lsrs	r3, r3, #3
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	4a6b      	ldr	r2, [pc, #428]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001dac:	fa22 f303 	lsr.w	r3, r2, r3
 8001db0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	ee07 3a90 	vmov	s15, r3
 8001db8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	ee07 3a90 	vmov	s15, r3
 8001dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dca:	4b62      	ldr	r3, [pc, #392]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dd2:	ee07 3a90 	vmov	s15, r3
 8001dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001dda:	ed97 6a02 	vldr	s12, [r7, #8]
 8001dde:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001f64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001dea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001df6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001dfa:	e087      	b.n	8001f0c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	ee07 3a90 	vmov	s15, r3
 8001e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e06:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001f68 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e0e:	4b51      	ldr	r3, [pc, #324]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e16:	ee07 3a90 	vmov	s15, r3
 8001e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e22:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001f64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001e3e:	e065      	b.n	8001f0c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	ee07 3a90 	vmov	s15, r3
 8001e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e4a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001f6c <HAL_RCC_GetSysClockFreq+0x2ec>
 8001e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e52:	4b40      	ldr	r3, [pc, #256]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e5a:	ee07 3a90 	vmov	s15, r3
 8001e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e62:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e66:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001f64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001e82:	e043      	b.n	8001f0c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	ee07 3a90 	vmov	s15, r3
 8001e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e8e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001f70 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e96:	4b2f      	ldr	r3, [pc, #188]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e9e:	ee07 3a90 	vmov	s15, r3
 8001ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ea6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001eaa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001f64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001eb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ec2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001ec6:	e021      	b.n	8001f0c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	ee07 3a90 	vmov	s15, r3
 8001ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ed2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001f6c <HAL_RCC_GetSysClockFreq+0x2ec>
 8001ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001eda:	4b1e      	ldr	r3, [pc, #120]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ee2:	ee07 3a90 	vmov	s15, r3
 8001ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001eea:	ed97 6a02 	vldr	s12, [r7, #8]
 8001eee:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001f64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001efa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f06:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f0a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001f0c:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f10:	0a5b      	lsrs	r3, r3, #9
 8001f12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f16:	3301      	adds	r3, #1
 8001f18:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	ee07 3a90 	vmov	s15, r3
 8001f20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f24:	edd7 6a07 	vldr	s13, [r7, #28]
 8001f28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f30:	ee17 3a90 	vmov	r3, s15
 8001f34:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001f36:	e005      	b.n	8001f44 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61bb      	str	r3, [r7, #24]
      break;
 8001f3c:	e002      	b.n	8001f44 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8001f3e:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001f40:	61bb      	str	r3, [r7, #24]
      break;
 8001f42:	bf00      	nop
  }

  return sysclockfreq;
 8001f44:	69bb      	ldr	r3, [r7, #24]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3724      	adds	r7, #36	; 0x24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	58024400 	.word	0x58024400
 8001f58:	03d09000 	.word	0x03d09000
 8001f5c:	003d0900 	.word	0x003d0900
 8001f60:	017d7840 	.word	0x017d7840
 8001f64:	46000000 	.word	0x46000000
 8001f68:	4c742400 	.word	0x4c742400
 8001f6c:	4a742400 	.word	0x4a742400
 8001f70:	4bbebc20 	.word	0x4bbebc20

08001f74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e049      	b.n	800201a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d106      	bne.n	8001fa0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7fe fb66 	bl	800066c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3304      	adds	r3, #4
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4610      	mov	r0, r2
 8001fb4:	f000 fbb0 	bl	8002718 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e049      	b.n	80020c8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2b00      	cmp	r3, #0
 800203e:	d106      	bne.n	800204e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 f841 	bl	80020d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2202      	movs	r2, #2
 8002052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3304      	adds	r3, #4
 800205e:	4619      	mov	r1, r3
 8002060:	4610      	mov	r0, r2
 8002062:	f000 fb59 	bl	8002718 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d109      	bne.n	8002108 <HAL_TIM_PWM_Start+0x24>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	bf14      	ite	ne
 8002100:	2301      	movne	r3, #1
 8002102:	2300      	moveq	r3, #0
 8002104:	b2db      	uxtb	r3, r3
 8002106:	e03c      	b.n	8002182 <HAL_TIM_PWM_Start+0x9e>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	2b04      	cmp	r3, #4
 800210c:	d109      	bne.n	8002122 <HAL_TIM_PWM_Start+0x3e>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b01      	cmp	r3, #1
 8002118:	bf14      	ite	ne
 800211a:	2301      	movne	r3, #1
 800211c:	2300      	moveq	r3, #0
 800211e:	b2db      	uxtb	r3, r3
 8002120:	e02f      	b.n	8002182 <HAL_TIM_PWM_Start+0x9e>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	2b08      	cmp	r3, #8
 8002126:	d109      	bne.n	800213c <HAL_TIM_PWM_Start+0x58>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b01      	cmp	r3, #1
 8002132:	bf14      	ite	ne
 8002134:	2301      	movne	r3, #1
 8002136:	2300      	moveq	r3, #0
 8002138:	b2db      	uxtb	r3, r3
 800213a:	e022      	b.n	8002182 <HAL_TIM_PWM_Start+0x9e>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	2b0c      	cmp	r3, #12
 8002140:	d109      	bne.n	8002156 <HAL_TIM_PWM_Start+0x72>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b01      	cmp	r3, #1
 800214c:	bf14      	ite	ne
 800214e:	2301      	movne	r3, #1
 8002150:	2300      	moveq	r3, #0
 8002152:	b2db      	uxtb	r3, r3
 8002154:	e015      	b.n	8002182 <HAL_TIM_PWM_Start+0x9e>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	2b10      	cmp	r3, #16
 800215a:	d109      	bne.n	8002170 <HAL_TIM_PWM_Start+0x8c>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b01      	cmp	r3, #1
 8002166:	bf14      	ite	ne
 8002168:	2301      	movne	r3, #1
 800216a:	2300      	moveq	r3, #0
 800216c:	b2db      	uxtb	r3, r3
 800216e:	e008      	b.n	8002182 <HAL_TIM_PWM_Start+0x9e>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b01      	cmp	r3, #1
 800217a:	bf14      	ite	ne
 800217c:	2301      	movne	r3, #1
 800217e:	2300      	moveq	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e0a1      	b.n	80022ce <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d104      	bne.n	800219a <HAL_TIM_PWM_Start+0xb6>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2202      	movs	r2, #2
 8002194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002198:	e023      	b.n	80021e2 <HAL_TIM_PWM_Start+0xfe>
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	2b04      	cmp	r3, #4
 800219e:	d104      	bne.n	80021aa <HAL_TIM_PWM_Start+0xc6>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2202      	movs	r2, #2
 80021a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021a8:	e01b      	b.n	80021e2 <HAL_TIM_PWM_Start+0xfe>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d104      	bne.n	80021ba <HAL_TIM_PWM_Start+0xd6>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2202      	movs	r2, #2
 80021b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021b8:	e013      	b.n	80021e2 <HAL_TIM_PWM_Start+0xfe>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	2b0c      	cmp	r3, #12
 80021be:	d104      	bne.n	80021ca <HAL_TIM_PWM_Start+0xe6>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2202      	movs	r2, #2
 80021c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80021c8:	e00b      	b.n	80021e2 <HAL_TIM_PWM_Start+0xfe>
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	2b10      	cmp	r3, #16
 80021ce:	d104      	bne.n	80021da <HAL_TIM_PWM_Start+0xf6>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2202      	movs	r2, #2
 80021d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021d8:	e003      	b.n	80021e2 <HAL_TIM_PWM_Start+0xfe>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2202      	movs	r2, #2
 80021de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2201      	movs	r2, #1
 80021e8:	6839      	ldr	r1, [r7, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f000 fea2 	bl	8002f34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a38      	ldr	r2, [pc, #224]	; (80022d8 <HAL_TIM_PWM_Start+0x1f4>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d013      	beq.n	8002222 <HAL_TIM_PWM_Start+0x13e>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a37      	ldr	r2, [pc, #220]	; (80022dc <HAL_TIM_PWM_Start+0x1f8>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d00e      	beq.n	8002222 <HAL_TIM_PWM_Start+0x13e>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a35      	ldr	r2, [pc, #212]	; (80022e0 <HAL_TIM_PWM_Start+0x1fc>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d009      	beq.n	8002222 <HAL_TIM_PWM_Start+0x13e>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a34      	ldr	r2, [pc, #208]	; (80022e4 <HAL_TIM_PWM_Start+0x200>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d004      	beq.n	8002222 <HAL_TIM_PWM_Start+0x13e>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a32      	ldr	r2, [pc, #200]	; (80022e8 <HAL_TIM_PWM_Start+0x204>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d101      	bne.n	8002226 <HAL_TIM_PWM_Start+0x142>
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <HAL_TIM_PWM_Start+0x144>
 8002226:	2300      	movs	r3, #0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d007      	beq.n	800223c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800223a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a25      	ldr	r2, [pc, #148]	; (80022d8 <HAL_TIM_PWM_Start+0x1f4>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d022      	beq.n	800228c <HAL_TIM_PWM_Start+0x1a8>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800224e:	d01d      	beq.n	800228c <HAL_TIM_PWM_Start+0x1a8>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a25      	ldr	r2, [pc, #148]	; (80022ec <HAL_TIM_PWM_Start+0x208>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d018      	beq.n	800228c <HAL_TIM_PWM_Start+0x1a8>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a24      	ldr	r2, [pc, #144]	; (80022f0 <HAL_TIM_PWM_Start+0x20c>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d013      	beq.n	800228c <HAL_TIM_PWM_Start+0x1a8>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a22      	ldr	r2, [pc, #136]	; (80022f4 <HAL_TIM_PWM_Start+0x210>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d00e      	beq.n	800228c <HAL_TIM_PWM_Start+0x1a8>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a1a      	ldr	r2, [pc, #104]	; (80022dc <HAL_TIM_PWM_Start+0x1f8>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d009      	beq.n	800228c <HAL_TIM_PWM_Start+0x1a8>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a1e      	ldr	r2, [pc, #120]	; (80022f8 <HAL_TIM_PWM_Start+0x214>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d004      	beq.n	800228c <HAL_TIM_PWM_Start+0x1a8>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a16      	ldr	r2, [pc, #88]	; (80022e0 <HAL_TIM_PWM_Start+0x1fc>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d115      	bne.n	80022b8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689a      	ldr	r2, [r3, #8]
 8002292:	4b1a      	ldr	r3, [pc, #104]	; (80022fc <HAL_TIM_PWM_Start+0x218>)
 8002294:	4013      	ands	r3, r2
 8002296:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2b06      	cmp	r3, #6
 800229c:	d015      	beq.n	80022ca <HAL_TIM_PWM_Start+0x1e6>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a4:	d011      	beq.n	80022ca <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f042 0201 	orr.w	r2, r2, #1
 80022b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022b6:	e008      	b.n	80022ca <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 0201 	orr.w	r2, r2, #1
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	e000      	b.n	80022cc <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40010000 	.word	0x40010000
 80022dc:	40010400 	.word	0x40010400
 80022e0:	40014000 	.word	0x40014000
 80022e4:	40014400 	.word	0x40014400
 80022e8:	40014800 	.word	0x40014800
 80022ec:	40000400 	.word	0x40000400
 80022f0:	40000800 	.word	0x40000800
 80022f4:	40000c00 	.word	0x40000c00
 80022f8:	40001800 	.word	0x40001800
 80022fc:	00010007 	.word	0x00010007

08002300 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800230c:	2300      	movs	r3, #0
 800230e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002316:	2b01      	cmp	r3, #1
 8002318:	d101      	bne.n	800231e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800231a:	2302      	movs	r3, #2
 800231c:	e0ff      	b.n	800251e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b14      	cmp	r3, #20
 800232a:	f200 80f0 	bhi.w	800250e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800232e:	a201      	add	r2, pc, #4	; (adr r2, 8002334 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002334:	08002389 	.word	0x08002389
 8002338:	0800250f 	.word	0x0800250f
 800233c:	0800250f 	.word	0x0800250f
 8002340:	0800250f 	.word	0x0800250f
 8002344:	080023c9 	.word	0x080023c9
 8002348:	0800250f 	.word	0x0800250f
 800234c:	0800250f 	.word	0x0800250f
 8002350:	0800250f 	.word	0x0800250f
 8002354:	0800240b 	.word	0x0800240b
 8002358:	0800250f 	.word	0x0800250f
 800235c:	0800250f 	.word	0x0800250f
 8002360:	0800250f 	.word	0x0800250f
 8002364:	0800244b 	.word	0x0800244b
 8002368:	0800250f 	.word	0x0800250f
 800236c:	0800250f 	.word	0x0800250f
 8002370:	0800250f 	.word	0x0800250f
 8002374:	0800248d 	.word	0x0800248d
 8002378:	0800250f 	.word	0x0800250f
 800237c:	0800250f 	.word	0x0800250f
 8002380:	0800250f 	.word	0x0800250f
 8002384:	080024cd 	.word	0x080024cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68b9      	ldr	r1, [r7, #8]
 800238e:	4618      	mov	r0, r3
 8002390:	f000 fa5c 	bl	800284c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	699a      	ldr	r2, [r3, #24]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 0208 	orr.w	r2, r2, #8
 80023a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	699a      	ldr	r2, [r3, #24]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0204 	bic.w	r2, r2, #4
 80023b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6999      	ldr	r1, [r3, #24]
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	691a      	ldr	r2, [r3, #16]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	619a      	str	r2, [r3, #24]
      break;
 80023c6:	e0a5      	b.n	8002514 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68b9      	ldr	r1, [r7, #8]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f000 facc 	bl	800296c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	699a      	ldr	r2, [r3, #24]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	699a      	ldr	r2, [r3, #24]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6999      	ldr	r1, [r3, #24]
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	021a      	lsls	r2, r3, #8
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	430a      	orrs	r2, r1
 8002406:	619a      	str	r2, [r3, #24]
      break;
 8002408:	e084      	b.n	8002514 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68b9      	ldr	r1, [r7, #8]
 8002410:	4618      	mov	r0, r3
 8002412:	f000 fb35 	bl	8002a80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	69da      	ldr	r2, [r3, #28]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f042 0208 	orr.w	r2, r2, #8
 8002424:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	69da      	ldr	r2, [r3, #28]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0204 	bic.w	r2, r2, #4
 8002434:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	69d9      	ldr	r1, [r3, #28]
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	691a      	ldr	r2, [r3, #16]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	430a      	orrs	r2, r1
 8002446:	61da      	str	r2, [r3, #28]
      break;
 8002448:	e064      	b.n	8002514 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68b9      	ldr	r1, [r7, #8]
 8002450:	4618      	mov	r0, r3
 8002452:	f000 fb9d 	bl	8002b90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	69da      	ldr	r2, [r3, #28]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002464:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	69da      	ldr	r2, [r3, #28]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002474:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	69d9      	ldr	r1, [r3, #28]
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	021a      	lsls	r2, r3, #8
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	430a      	orrs	r2, r1
 8002488:	61da      	str	r2, [r3, #28]
      break;
 800248a:	e043      	b.n	8002514 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68b9      	ldr	r1, [r7, #8]
 8002492:	4618      	mov	r0, r3
 8002494:	f000 fbe6 	bl	8002c64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0208 	orr.w	r2, r2, #8
 80024a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0204 	bic.w	r2, r2, #4
 80024b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	691a      	ldr	r2, [r3, #16]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80024ca:	e023      	b.n	8002514 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68b9      	ldr	r1, [r7, #8]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 fc2a 	bl	8002d2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	021a      	lsls	r2, r3, #8
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	430a      	orrs	r2, r1
 800250a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800250c:	e002      	b.n	8002514 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	75fb      	strb	r3, [r7, #23]
      break;
 8002512:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800251c:	7dfb      	ldrb	r3, [r7, #23]
}
 800251e:	4618      	mov	r0, r3
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop

08002528 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002532:	2300      	movs	r3, #0
 8002534:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800253c:	2b01      	cmp	r3, #1
 800253e:	d101      	bne.n	8002544 <HAL_TIM_ConfigClockSource+0x1c>
 8002540:	2302      	movs	r3, #2
 8002542:	e0dc      	b.n	80026fe <HAL_TIM_ConfigClockSource+0x1d6>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2202      	movs	r2, #2
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800255c:	68ba      	ldr	r2, [r7, #8]
 800255e:	4b6a      	ldr	r3, [pc, #424]	; (8002708 <HAL_TIM_ConfigClockSource+0x1e0>)
 8002560:	4013      	ands	r3, r2
 8002562:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800256a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68ba      	ldr	r2, [r7, #8]
 8002572:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a64      	ldr	r2, [pc, #400]	; (800270c <HAL_TIM_ConfigClockSource+0x1e4>)
 800257a:	4293      	cmp	r3, r2
 800257c:	f000 80a9 	beq.w	80026d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8002580:	4a62      	ldr	r2, [pc, #392]	; (800270c <HAL_TIM_ConfigClockSource+0x1e4>)
 8002582:	4293      	cmp	r3, r2
 8002584:	f200 80ae 	bhi.w	80026e4 <HAL_TIM_ConfigClockSource+0x1bc>
 8002588:	4a61      	ldr	r2, [pc, #388]	; (8002710 <HAL_TIM_ConfigClockSource+0x1e8>)
 800258a:	4293      	cmp	r3, r2
 800258c:	f000 80a1 	beq.w	80026d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8002590:	4a5f      	ldr	r2, [pc, #380]	; (8002710 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002592:	4293      	cmp	r3, r2
 8002594:	f200 80a6 	bhi.w	80026e4 <HAL_TIM_ConfigClockSource+0x1bc>
 8002598:	4a5e      	ldr	r2, [pc, #376]	; (8002714 <HAL_TIM_ConfigClockSource+0x1ec>)
 800259a:	4293      	cmp	r3, r2
 800259c:	f000 8099 	beq.w	80026d2 <HAL_TIM_ConfigClockSource+0x1aa>
 80025a0:	4a5c      	ldr	r2, [pc, #368]	; (8002714 <HAL_TIM_ConfigClockSource+0x1ec>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	f200 809e 	bhi.w	80026e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80025a8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80025ac:	f000 8091 	beq.w	80026d2 <HAL_TIM_ConfigClockSource+0x1aa>
 80025b0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80025b4:	f200 8096 	bhi.w	80026e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80025b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025bc:	f000 8089 	beq.w	80026d2 <HAL_TIM_ConfigClockSource+0x1aa>
 80025c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025c4:	f200 808e 	bhi.w	80026e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80025c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025cc:	d03e      	beq.n	800264c <HAL_TIM_ConfigClockSource+0x124>
 80025ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025d2:	f200 8087 	bhi.w	80026e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80025d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025da:	f000 8086 	beq.w	80026ea <HAL_TIM_ConfigClockSource+0x1c2>
 80025de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025e2:	d87f      	bhi.n	80026e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80025e4:	2b70      	cmp	r3, #112	; 0x70
 80025e6:	d01a      	beq.n	800261e <HAL_TIM_ConfigClockSource+0xf6>
 80025e8:	2b70      	cmp	r3, #112	; 0x70
 80025ea:	d87b      	bhi.n	80026e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80025ec:	2b60      	cmp	r3, #96	; 0x60
 80025ee:	d050      	beq.n	8002692 <HAL_TIM_ConfigClockSource+0x16a>
 80025f0:	2b60      	cmp	r3, #96	; 0x60
 80025f2:	d877      	bhi.n	80026e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80025f4:	2b50      	cmp	r3, #80	; 0x50
 80025f6:	d03c      	beq.n	8002672 <HAL_TIM_ConfigClockSource+0x14a>
 80025f8:	2b50      	cmp	r3, #80	; 0x50
 80025fa:	d873      	bhi.n	80026e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80025fc:	2b40      	cmp	r3, #64	; 0x40
 80025fe:	d058      	beq.n	80026b2 <HAL_TIM_ConfigClockSource+0x18a>
 8002600:	2b40      	cmp	r3, #64	; 0x40
 8002602:	d86f      	bhi.n	80026e4 <HAL_TIM_ConfigClockSource+0x1bc>
 8002604:	2b30      	cmp	r3, #48	; 0x30
 8002606:	d064      	beq.n	80026d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8002608:	2b30      	cmp	r3, #48	; 0x30
 800260a:	d86b      	bhi.n	80026e4 <HAL_TIM_ConfigClockSource+0x1bc>
 800260c:	2b20      	cmp	r3, #32
 800260e:	d060      	beq.n	80026d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8002610:	2b20      	cmp	r3, #32
 8002612:	d867      	bhi.n	80026e4 <HAL_TIM_ConfigClockSource+0x1bc>
 8002614:	2b00      	cmp	r3, #0
 8002616:	d05c      	beq.n	80026d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8002618:	2b10      	cmp	r3, #16
 800261a:	d05a      	beq.n	80026d2 <HAL_TIM_ConfigClockSource+0x1aa>
 800261c:	e062      	b.n	80026e4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800262e:	f000 fc61 	bl	8002ef4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002640:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	609a      	str	r2, [r3, #8]
      break;
 800264a:	e04f      	b.n	80026ec <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800265c:	f000 fc4a 	bl	8002ef4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689a      	ldr	r2, [r3, #8]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800266e:	609a      	str	r2, [r3, #8]
      break;
 8002670:	e03c      	b.n	80026ec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800267e:	461a      	mov	r2, r3
 8002680:	f000 fbba 	bl	8002df8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2150      	movs	r1, #80	; 0x50
 800268a:	4618      	mov	r0, r3
 800268c:	f000 fc14 	bl	8002eb8 <TIM_ITRx_SetConfig>
      break;
 8002690:	e02c      	b.n	80026ec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800269e:	461a      	mov	r2, r3
 80026a0:	f000 fbd9 	bl	8002e56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2160      	movs	r1, #96	; 0x60
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 fc04 	bl	8002eb8 <TIM_ITRx_SetConfig>
      break;
 80026b0:	e01c      	b.n	80026ec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026be:	461a      	mov	r2, r3
 80026c0:	f000 fb9a 	bl	8002df8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2140      	movs	r1, #64	; 0x40
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 fbf4 	bl	8002eb8 <TIM_ITRx_SetConfig>
      break;
 80026d0:	e00c      	b.n	80026ec <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4619      	mov	r1, r3
 80026dc:	4610      	mov	r0, r2
 80026de:	f000 fbeb 	bl	8002eb8 <TIM_ITRx_SetConfig>
      break;
 80026e2:	e003      	b.n	80026ec <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	73fb      	strb	r3, [r7, #15]
      break;
 80026e8:	e000      	b.n	80026ec <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80026ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	ffceff88 	.word	0xffceff88
 800270c:	00100040 	.word	0x00100040
 8002710:	00100030 	.word	0x00100030
 8002714:	00100020 	.word	0x00100020

08002718 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a40      	ldr	r2, [pc, #256]	; (800282c <TIM_Base_SetConfig+0x114>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d013      	beq.n	8002758 <TIM_Base_SetConfig+0x40>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002736:	d00f      	beq.n	8002758 <TIM_Base_SetConfig+0x40>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a3d      	ldr	r2, [pc, #244]	; (8002830 <TIM_Base_SetConfig+0x118>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d00b      	beq.n	8002758 <TIM_Base_SetConfig+0x40>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a3c      	ldr	r2, [pc, #240]	; (8002834 <TIM_Base_SetConfig+0x11c>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d007      	beq.n	8002758 <TIM_Base_SetConfig+0x40>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a3b      	ldr	r2, [pc, #236]	; (8002838 <TIM_Base_SetConfig+0x120>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d003      	beq.n	8002758 <TIM_Base_SetConfig+0x40>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a3a      	ldr	r2, [pc, #232]	; (800283c <TIM_Base_SetConfig+0x124>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d108      	bne.n	800276a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800275e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	4313      	orrs	r3, r2
 8002768:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a2f      	ldr	r2, [pc, #188]	; (800282c <TIM_Base_SetConfig+0x114>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d01f      	beq.n	80027b2 <TIM_Base_SetConfig+0x9a>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002778:	d01b      	beq.n	80027b2 <TIM_Base_SetConfig+0x9a>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a2c      	ldr	r2, [pc, #176]	; (8002830 <TIM_Base_SetConfig+0x118>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d017      	beq.n	80027b2 <TIM_Base_SetConfig+0x9a>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a2b      	ldr	r2, [pc, #172]	; (8002834 <TIM_Base_SetConfig+0x11c>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d013      	beq.n	80027b2 <TIM_Base_SetConfig+0x9a>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a2a      	ldr	r2, [pc, #168]	; (8002838 <TIM_Base_SetConfig+0x120>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d00f      	beq.n	80027b2 <TIM_Base_SetConfig+0x9a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a29      	ldr	r2, [pc, #164]	; (800283c <TIM_Base_SetConfig+0x124>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d00b      	beq.n	80027b2 <TIM_Base_SetConfig+0x9a>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a28      	ldr	r2, [pc, #160]	; (8002840 <TIM_Base_SetConfig+0x128>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d007      	beq.n	80027b2 <TIM_Base_SetConfig+0x9a>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a27      	ldr	r2, [pc, #156]	; (8002844 <TIM_Base_SetConfig+0x12c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d003      	beq.n	80027b2 <TIM_Base_SetConfig+0x9a>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a26      	ldr	r2, [pc, #152]	; (8002848 <TIM_Base_SetConfig+0x130>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d108      	bne.n	80027c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a10      	ldr	r2, [pc, #64]	; (800282c <TIM_Base_SetConfig+0x114>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d00f      	beq.n	8002810 <TIM_Base_SetConfig+0xf8>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a12      	ldr	r2, [pc, #72]	; (800283c <TIM_Base_SetConfig+0x124>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d00b      	beq.n	8002810 <TIM_Base_SetConfig+0xf8>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a11      	ldr	r2, [pc, #68]	; (8002840 <TIM_Base_SetConfig+0x128>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d007      	beq.n	8002810 <TIM_Base_SetConfig+0xf8>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a10      	ldr	r2, [pc, #64]	; (8002844 <TIM_Base_SetConfig+0x12c>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d003      	beq.n	8002810 <TIM_Base_SetConfig+0xf8>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a0f      	ldr	r2, [pc, #60]	; (8002848 <TIM_Base_SetConfig+0x130>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d103      	bne.n	8002818 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	691a      	ldr	r2, [r3, #16]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	615a      	str	r2, [r3, #20]
}
 800281e:	bf00      	nop
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40010000 	.word	0x40010000
 8002830:	40000400 	.word	0x40000400
 8002834:	40000800 	.word	0x40000800
 8002838:	40000c00 	.word	0x40000c00
 800283c:	40010400 	.word	0x40010400
 8002840:	40014000 	.word	0x40014000
 8002844:	40014400 	.word	0x40014400
 8002848:	40014800 	.word	0x40014800

0800284c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800284c:	b480      	push	{r7}
 800284e:	b087      	sub	sp, #28
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	f023 0201 	bic.w	r2, r3, #1
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	4b37      	ldr	r3, [pc, #220]	; (8002954 <TIM_OC1_SetConfig+0x108>)
 8002878:	4013      	ands	r3, r2
 800287a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f023 0303 	bic.w	r3, r3, #3
 8002882:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	4313      	orrs	r3, r2
 800288c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f023 0302 	bic.w	r3, r3, #2
 8002894:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	4313      	orrs	r3, r2
 800289e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a2d      	ldr	r2, [pc, #180]	; (8002958 <TIM_OC1_SetConfig+0x10c>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d00f      	beq.n	80028c8 <TIM_OC1_SetConfig+0x7c>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a2c      	ldr	r2, [pc, #176]	; (800295c <TIM_OC1_SetConfig+0x110>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d00b      	beq.n	80028c8 <TIM_OC1_SetConfig+0x7c>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a2b      	ldr	r2, [pc, #172]	; (8002960 <TIM_OC1_SetConfig+0x114>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d007      	beq.n	80028c8 <TIM_OC1_SetConfig+0x7c>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a2a      	ldr	r2, [pc, #168]	; (8002964 <TIM_OC1_SetConfig+0x118>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d003      	beq.n	80028c8 <TIM_OC1_SetConfig+0x7c>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a29      	ldr	r2, [pc, #164]	; (8002968 <TIM_OC1_SetConfig+0x11c>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d10c      	bne.n	80028e2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	f023 0308 	bic.w	r3, r3, #8
 80028ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f023 0304 	bic.w	r3, r3, #4
 80028e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a1c      	ldr	r2, [pc, #112]	; (8002958 <TIM_OC1_SetConfig+0x10c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d00f      	beq.n	800290a <TIM_OC1_SetConfig+0xbe>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a1b      	ldr	r2, [pc, #108]	; (800295c <TIM_OC1_SetConfig+0x110>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d00b      	beq.n	800290a <TIM_OC1_SetConfig+0xbe>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a1a      	ldr	r2, [pc, #104]	; (8002960 <TIM_OC1_SetConfig+0x114>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d007      	beq.n	800290a <TIM_OC1_SetConfig+0xbe>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a19      	ldr	r2, [pc, #100]	; (8002964 <TIM_OC1_SetConfig+0x118>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d003      	beq.n	800290a <TIM_OC1_SetConfig+0xbe>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a18      	ldr	r2, [pc, #96]	; (8002968 <TIM_OC1_SetConfig+0x11c>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d111      	bne.n	800292e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002910:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002918:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4313      	orrs	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	4313      	orrs	r3, r2
 800292c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	621a      	str	r2, [r3, #32]
}
 8002948:	bf00      	nop
 800294a:	371c      	adds	r7, #28
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	fffeff8f 	.word	0xfffeff8f
 8002958:	40010000 	.word	0x40010000
 800295c:	40010400 	.word	0x40010400
 8002960:	40014000 	.word	0x40014000
 8002964:	40014400 	.word	0x40014400
 8002968:	40014800 	.word	0x40014800

0800296c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800296c:	b480      	push	{r7}
 800296e:	b087      	sub	sp, #28
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	f023 0210 	bic.w	r2, r3, #16
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	4b34      	ldr	r3, [pc, #208]	; (8002a68 <TIM_OC2_SetConfig+0xfc>)
 8002998:	4013      	ands	r3, r2
 800299a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	021b      	lsls	r3, r3, #8
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	f023 0320 	bic.w	r3, r3, #32
 80029b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	011b      	lsls	r3, r3, #4
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a29      	ldr	r2, [pc, #164]	; (8002a6c <TIM_OC2_SetConfig+0x100>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d003      	beq.n	80029d4 <TIM_OC2_SetConfig+0x68>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a28      	ldr	r2, [pc, #160]	; (8002a70 <TIM_OC2_SetConfig+0x104>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d10d      	bne.n	80029f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a1e      	ldr	r2, [pc, #120]	; (8002a6c <TIM_OC2_SetConfig+0x100>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d00f      	beq.n	8002a18 <TIM_OC2_SetConfig+0xac>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a1d      	ldr	r2, [pc, #116]	; (8002a70 <TIM_OC2_SetConfig+0x104>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d00b      	beq.n	8002a18 <TIM_OC2_SetConfig+0xac>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a1c      	ldr	r2, [pc, #112]	; (8002a74 <TIM_OC2_SetConfig+0x108>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d007      	beq.n	8002a18 <TIM_OC2_SetConfig+0xac>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a1b      	ldr	r2, [pc, #108]	; (8002a78 <TIM_OC2_SetConfig+0x10c>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d003      	beq.n	8002a18 <TIM_OC2_SetConfig+0xac>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a1a      	ldr	r2, [pc, #104]	; (8002a7c <TIM_OC2_SetConfig+0x110>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d113      	bne.n	8002a40 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	621a      	str	r2, [r3, #32]
}
 8002a5a:	bf00      	nop
 8002a5c:	371c      	adds	r7, #28
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	feff8fff 	.word	0xfeff8fff
 8002a6c:	40010000 	.word	0x40010000
 8002a70:	40010400 	.word	0x40010400
 8002a74:	40014000 	.word	0x40014000
 8002a78:	40014400 	.word	0x40014400
 8002a7c:	40014800 	.word	0x40014800

08002a80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b087      	sub	sp, #28
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	4b33      	ldr	r3, [pc, #204]	; (8002b78 <TIM_OC3_SetConfig+0xf8>)
 8002aac:	4013      	ands	r3, r2
 8002aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f023 0303 	bic.w	r3, r3, #3
 8002ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ac8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	021b      	lsls	r3, r3, #8
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a28      	ldr	r2, [pc, #160]	; (8002b7c <TIM_OC3_SetConfig+0xfc>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d003      	beq.n	8002ae6 <TIM_OC3_SetConfig+0x66>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a27      	ldr	r2, [pc, #156]	; (8002b80 <TIM_OC3_SetConfig+0x100>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d10d      	bne.n	8002b02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002aec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	021b      	lsls	r3, r3, #8
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a1d      	ldr	r2, [pc, #116]	; (8002b7c <TIM_OC3_SetConfig+0xfc>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d00f      	beq.n	8002b2a <TIM_OC3_SetConfig+0xaa>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a1c      	ldr	r2, [pc, #112]	; (8002b80 <TIM_OC3_SetConfig+0x100>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d00b      	beq.n	8002b2a <TIM_OC3_SetConfig+0xaa>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a1b      	ldr	r2, [pc, #108]	; (8002b84 <TIM_OC3_SetConfig+0x104>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d007      	beq.n	8002b2a <TIM_OC3_SetConfig+0xaa>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a1a      	ldr	r2, [pc, #104]	; (8002b88 <TIM_OC3_SetConfig+0x108>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d003      	beq.n	8002b2a <TIM_OC3_SetConfig+0xaa>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a19      	ldr	r2, [pc, #100]	; (8002b8c <TIM_OC3_SetConfig+0x10c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d113      	bne.n	8002b52 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	011b      	lsls	r3, r3, #4
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	621a      	str	r2, [r3, #32]
}
 8002b6c:	bf00      	nop
 8002b6e:	371c      	adds	r7, #28
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	fffeff8f 	.word	0xfffeff8f
 8002b7c:	40010000 	.word	0x40010000
 8002b80:	40010400 	.word	0x40010400
 8002b84:	40014000 	.word	0x40014000
 8002b88:	40014400 	.word	0x40014400
 8002b8c:	40014800 	.word	0x40014800

08002b90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b087      	sub	sp, #28
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	4b24      	ldr	r3, [pc, #144]	; (8002c4c <TIM_OC4_SetConfig+0xbc>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	021b      	lsls	r3, r3, #8
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	031b      	lsls	r3, r3, #12
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a19      	ldr	r2, [pc, #100]	; (8002c50 <TIM_OC4_SetConfig+0xc0>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d00f      	beq.n	8002c10 <TIM_OC4_SetConfig+0x80>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a18      	ldr	r2, [pc, #96]	; (8002c54 <TIM_OC4_SetConfig+0xc4>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d00b      	beq.n	8002c10 <TIM_OC4_SetConfig+0x80>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a17      	ldr	r2, [pc, #92]	; (8002c58 <TIM_OC4_SetConfig+0xc8>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d007      	beq.n	8002c10 <TIM_OC4_SetConfig+0x80>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a16      	ldr	r2, [pc, #88]	; (8002c5c <TIM_OC4_SetConfig+0xcc>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d003      	beq.n	8002c10 <TIM_OC4_SetConfig+0x80>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a15      	ldr	r2, [pc, #84]	; (8002c60 <TIM_OC4_SetConfig+0xd0>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d109      	bne.n	8002c24 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	019b      	lsls	r3, r3, #6
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	621a      	str	r2, [r3, #32]
}
 8002c3e:	bf00      	nop
 8002c40:	371c      	adds	r7, #28
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	feff8fff 	.word	0xfeff8fff
 8002c50:	40010000 	.word	0x40010000
 8002c54:	40010400 	.word	0x40010400
 8002c58:	40014000 	.word	0x40014000
 8002c5c:	40014400 	.word	0x40014400
 8002c60:	40014800 	.word	0x40014800

08002c64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b087      	sub	sp, #28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	4b21      	ldr	r3, [pc, #132]	; (8002d14 <TIM_OC5_SetConfig+0xb0>)
 8002c90:	4013      	ands	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002ca4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	041b      	lsls	r3, r3, #16
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a18      	ldr	r2, [pc, #96]	; (8002d18 <TIM_OC5_SetConfig+0xb4>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d00f      	beq.n	8002cda <TIM_OC5_SetConfig+0x76>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a17      	ldr	r2, [pc, #92]	; (8002d1c <TIM_OC5_SetConfig+0xb8>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d00b      	beq.n	8002cda <TIM_OC5_SetConfig+0x76>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a16      	ldr	r2, [pc, #88]	; (8002d20 <TIM_OC5_SetConfig+0xbc>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d007      	beq.n	8002cda <TIM_OC5_SetConfig+0x76>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a15      	ldr	r2, [pc, #84]	; (8002d24 <TIM_OC5_SetConfig+0xc0>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d003      	beq.n	8002cda <TIM_OC5_SetConfig+0x76>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a14      	ldr	r2, [pc, #80]	; (8002d28 <TIM_OC5_SetConfig+0xc4>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d109      	bne.n	8002cee <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ce0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	021b      	lsls	r3, r3, #8
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	621a      	str	r2, [r3, #32]
}
 8002d08:	bf00      	nop
 8002d0a:	371c      	adds	r7, #28
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	fffeff8f 	.word	0xfffeff8f
 8002d18:	40010000 	.word	0x40010000
 8002d1c:	40010400 	.word	0x40010400
 8002d20:	40014000 	.word	0x40014000
 8002d24:	40014400 	.word	0x40014400
 8002d28:	40014800 	.word	0x40014800

08002d2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b087      	sub	sp, #28
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	4b22      	ldr	r3, [pc, #136]	; (8002de0 <TIM_OC6_SetConfig+0xb4>)
 8002d58:	4013      	ands	r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	021b      	lsls	r3, r3, #8
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	051b      	lsls	r3, r3, #20
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a19      	ldr	r2, [pc, #100]	; (8002de4 <TIM_OC6_SetConfig+0xb8>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d00f      	beq.n	8002da4 <TIM_OC6_SetConfig+0x78>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a18      	ldr	r2, [pc, #96]	; (8002de8 <TIM_OC6_SetConfig+0xbc>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d00b      	beq.n	8002da4 <TIM_OC6_SetConfig+0x78>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a17      	ldr	r2, [pc, #92]	; (8002dec <TIM_OC6_SetConfig+0xc0>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d007      	beq.n	8002da4 <TIM_OC6_SetConfig+0x78>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a16      	ldr	r2, [pc, #88]	; (8002df0 <TIM_OC6_SetConfig+0xc4>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d003      	beq.n	8002da4 <TIM_OC6_SetConfig+0x78>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a15      	ldr	r2, [pc, #84]	; (8002df4 <TIM_OC6_SetConfig+0xc8>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d109      	bne.n	8002db8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002daa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	029b      	lsls	r3, r3, #10
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	621a      	str	r2, [r3, #32]
}
 8002dd2:	bf00      	nop
 8002dd4:	371c      	adds	r7, #28
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	feff8fff 	.word	0xfeff8fff
 8002de4:	40010000 	.word	0x40010000
 8002de8:	40010400 	.word	0x40010400
 8002dec:	40014000 	.word	0x40014000
 8002df0:	40014400 	.word	0x40014400
 8002df4:	40014800 	.word	0x40014800

08002df8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b087      	sub	sp, #28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	f023 0201 	bic.w	r2, r3, #1
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	011b      	lsls	r3, r3, #4
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f023 030a 	bic.w	r3, r3, #10
 8002e34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	621a      	str	r2, [r3, #32]
}
 8002e4a:	bf00      	nop
 8002e4c:	371c      	adds	r7, #28
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b087      	sub	sp, #28
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	60f8      	str	r0, [r7, #12]
 8002e5e:	60b9      	str	r1, [r7, #8]
 8002e60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	f023 0210 	bic.w	r2, r3, #16
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	031b      	lsls	r3, r3, #12
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	011b      	lsls	r3, r3, #4
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	621a      	str	r2, [r3, #32]
}
 8002eaa:	bf00      	nop
 8002eac:	371c      	adds	r7, #28
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
	...

08002eb8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	4b09      	ldr	r3, [pc, #36]	; (8002ef0 <TIM_ITRx_SetConfig+0x38>)
 8002ecc:	4013      	ands	r3, r2
 8002ece:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	f043 0307 	orr.w	r3, r3, #7
 8002eda:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	609a      	str	r2, [r3, #8]
}
 8002ee2:	bf00      	nop
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	ffcfff8f 	.word	0xffcfff8f

08002ef4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b087      	sub	sp, #28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
 8002f00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	021a      	lsls	r2, r3, #8
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	431a      	orrs	r2, r3
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	609a      	str	r2, [r3, #8]
}
 8002f28:	bf00      	nop
 8002f2a:	371c      	adds	r7, #28
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b087      	sub	sp, #28
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f003 031f 	and.w	r3, r3, #31
 8002f46:	2201      	movs	r2, #1
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6a1a      	ldr	r2, [r3, #32]
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	43db      	mvns	r3, r3
 8002f56:	401a      	ands	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6a1a      	ldr	r2, [r3, #32]
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	f003 031f 	and.w	r3, r3, #31
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	621a      	str	r2, [r3, #32]
}
 8002f72:	bf00      	nop
 8002f74:	371c      	adds	r7, #28
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
	...

08002f80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d101      	bne.n	8002f98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f94:	2302      	movs	r3, #2
 8002f96:	e06d      	b.n	8003074 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a30      	ldr	r2, [pc, #192]	; (8003080 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d004      	beq.n	8002fcc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a2f      	ldr	r2, [pc, #188]	; (8003084 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d108      	bne.n	8002fde <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002fd2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a20      	ldr	r2, [pc, #128]	; (8003080 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d022      	beq.n	8003048 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800300a:	d01d      	beq.n	8003048 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a1d      	ldr	r2, [pc, #116]	; (8003088 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d018      	beq.n	8003048 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a1c      	ldr	r2, [pc, #112]	; (800308c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d013      	beq.n	8003048 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a1a      	ldr	r2, [pc, #104]	; (8003090 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d00e      	beq.n	8003048 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a15      	ldr	r2, [pc, #84]	; (8003084 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d009      	beq.n	8003048 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a16      	ldr	r2, [pc, #88]	; (8003094 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d004      	beq.n	8003048 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a15      	ldr	r2, [pc, #84]	; (8003098 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d10c      	bne.n	8003062 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800304e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	68ba      	ldr	r2, [r7, #8]
 8003056:	4313      	orrs	r3, r2
 8003058:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	40010000 	.word	0x40010000
 8003084:	40010400 	.word	0x40010400
 8003088:	40000400 	.word	0x40000400
 800308c:	40000800 	.word	0x40000800
 8003090:	40000c00 	.word	0x40000c00
 8003094:	40001800 	.word	0x40001800
 8003098:	40014000 	.word	0x40014000

0800309c <memset>:
 800309c:	4402      	add	r2, r0
 800309e:	4603      	mov	r3, r0
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d100      	bne.n	80030a6 <memset+0xa>
 80030a4:	4770      	bx	lr
 80030a6:	f803 1b01 	strb.w	r1, [r3], #1
 80030aa:	e7f9      	b.n	80030a0 <memset+0x4>

080030ac <__libc_init_array>:
 80030ac:	b570      	push	{r4, r5, r6, lr}
 80030ae:	4d0d      	ldr	r5, [pc, #52]	; (80030e4 <__libc_init_array+0x38>)
 80030b0:	4c0d      	ldr	r4, [pc, #52]	; (80030e8 <__libc_init_array+0x3c>)
 80030b2:	1b64      	subs	r4, r4, r5
 80030b4:	10a4      	asrs	r4, r4, #2
 80030b6:	2600      	movs	r6, #0
 80030b8:	42a6      	cmp	r6, r4
 80030ba:	d109      	bne.n	80030d0 <__libc_init_array+0x24>
 80030bc:	4d0b      	ldr	r5, [pc, #44]	; (80030ec <__libc_init_array+0x40>)
 80030be:	4c0c      	ldr	r4, [pc, #48]	; (80030f0 <__libc_init_array+0x44>)
 80030c0:	f000 f818 	bl	80030f4 <_init>
 80030c4:	1b64      	subs	r4, r4, r5
 80030c6:	10a4      	asrs	r4, r4, #2
 80030c8:	2600      	movs	r6, #0
 80030ca:	42a6      	cmp	r6, r4
 80030cc:	d105      	bne.n	80030da <__libc_init_array+0x2e>
 80030ce:	bd70      	pop	{r4, r5, r6, pc}
 80030d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80030d4:	4798      	blx	r3
 80030d6:	3601      	adds	r6, #1
 80030d8:	e7ee      	b.n	80030b8 <__libc_init_array+0xc>
 80030da:	f855 3b04 	ldr.w	r3, [r5], #4
 80030de:	4798      	blx	r3
 80030e0:	3601      	adds	r6, #1
 80030e2:	e7f2      	b.n	80030ca <__libc_init_array+0x1e>
 80030e4:	0800311c 	.word	0x0800311c
 80030e8:	0800311c 	.word	0x0800311c
 80030ec:	0800311c 	.word	0x0800311c
 80030f0:	08003120 	.word	0x08003120

080030f4 <_init>:
 80030f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030f6:	bf00      	nop
 80030f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030fa:	bc08      	pop	{r3}
 80030fc:	469e      	mov	lr, r3
 80030fe:	4770      	bx	lr

08003100 <_fini>:
 8003100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003102:	bf00      	nop
 8003104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003106:	bc08      	pop	{r3}
 8003108:	469e      	mov	lr, r3
 800310a:	4770      	bx	lr
