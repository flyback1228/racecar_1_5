
racecar_h750_jy901_setup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd14  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d4  0800bfb8  0800bfb8  0001bfb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c38c  0800c38c  0001c38c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  0800c394  0800c394  0001c394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c3a0  0800c3a0  0001c3a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f0  24000000  0800c3a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000430  240001f0  0800c594  000201f0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000620  0800c594  00020620  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002021e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00017ff7  00000000  00000000  00020261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002aca  00000000  00000000  00038258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000e48  00000000  00000000  0003ad28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000ae6  00000000  00000000  0003bb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003a984  00000000  00000000  0003c656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00012de4  00000000  00000000  00076fda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0015e325  00000000  00000000  00089dbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00004958  00000000  00000000  001e80e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000066  00000000  00000000  001eca3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f0 	.word	0x240001f0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bf9c 	.word	0x0800bf9c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f4 	.word	0x240001f4
 80002dc:	0800bf9c 	.word	0x0800bf9c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <_ZL6millisv>:

static inline uint32_t micros(void){
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
}

static inline uint32_t millis(void){
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000U);
 8000690:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <_ZL6millisv+0x24>)
 8000692:	685a      	ldr	r2, [r3, #4]
 8000694:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <_ZL6millisv+0x28>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4907      	ldr	r1, [pc, #28]	; (80006b8 <_ZL6millisv+0x2c>)
 800069a:	fba1 1303 	umull	r1, r3, r1, r3
 800069e:	099b      	lsrs	r3, r3, #6
 80006a0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	e0001000 	.word	0xe0001000
 80006b4:	24000018 	.word	0x24000018
 80006b8:	10624dd3 	.word	0x10624dd3

080006bc <_ZN6CJY901C1EP20__UART_HandleTypeDef>:
#include <jy901/JY901_Control.h>
#include <jy901/JY901_Serial.h>
#include <string.h>
#include "utility.h"

CJY901::CJY901(UART_HandleTypeDef* huart) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	6039      	str	r1, [r7, #0]
	_huart=huart;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	683a      	ldr	r2, [r7, #0]
 80006ca:	625a      	str	r2, [r3, #36]	; 0x24
  _lastTime = millis();
 80006cc:	f7ff ffde 	bl	800068c <_ZL6millisv>
 80006d0:	4602      	mov	r2, r0
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4618      	mov	r0, r3
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <_ZN6CJY9019parseDataEPh>:


bool CJY901::parseData(uint8_t* rxBuffer) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]

  // do sum check to confirm data is not corrupted
  uint8_t sum = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	73fb      	strb	r3, [r7, #15]
  for (uint8_t cnt = 0; cnt < 10; cnt++)
 80006ee:	2300      	movs	r3, #0
 80006f0:	73bb      	strb	r3, [r7, #14]
 80006f2:	e009      	b.n	8000708 <_ZN6CJY9019parseDataEPh+0x28>
    sum += rxBuffer[cnt];
 80006f4:	7bbb      	ldrb	r3, [r7, #14]
 80006f6:	683a      	ldr	r2, [r7, #0]
 80006f8:	4413      	add	r3, r2
 80006fa:	781a      	ldrb	r2, [r3, #0]
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	4413      	add	r3, r2
 8000700:	73fb      	strb	r3, [r7, #15]
  for (uint8_t cnt = 0; cnt < 10; cnt++)
 8000702:	7bbb      	ldrb	r3, [r7, #14]
 8000704:	3301      	adds	r3, #1
 8000706:	73bb      	strb	r3, [r7, #14]
 8000708:	7bbb      	ldrb	r3, [r7, #14]
 800070a:	2b09      	cmp	r3, #9
 800070c:	d9f2      	bls.n	80006f4 <_ZN6CJY9019parseDataEPh+0x14>
  if (sum != rxBuffer[10])
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	330a      	adds	r3, #10
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	7bfa      	ldrb	r2, [r7, #15]
 8000716:	429a      	cmp	r2, r3
 8000718:	d001      	beq.n	800071e <_ZN6CJY9019parseDataEPh+0x3e>
    return false;
 800071a:	2300      	movs	r3, #0
 800071c:	e0a5      	b.n	800086a <_ZN6CJY9019parseDataEPh+0x18a>

  switch (rxBuffer[1]) {  // these cases are based on Manual p26,27,28,29 and 30
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	3301      	adds	r3, #1
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	3b50      	subs	r3, #80	; 0x50
 8000726:	2b0a      	cmp	r3, #10
 8000728:	f200 8099 	bhi.w	800085e <_ZN6CJY9019parseDataEPh+0x17e>
 800072c:	a201      	add	r2, pc, #4	; (adr r2, 8000734 <_ZN6CJY9019parseDataEPh+0x54>)
 800072e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000732:	bf00      	nop
 8000734:	08000761 	.word	0x08000761
 8000738:	08000775 	.word	0x08000775
 800073c:	08000789 	.word	0x08000789
 8000740:	0800079d 	.word	0x0800079d
 8000744:	080007b1 	.word	0x080007b1
 8000748:	080007c5 	.word	0x080007c5
 800074c:	080007d9 	.word	0x080007d9
 8000750:	080007f3 	.word	0x080007f3
 8000754:	0800080d 	.word	0x0800080d
 8000758:	08000837 	.word	0x08000837
 800075c:	0800084b 	.word	0x0800084b
    case 0x50:
      memcpy(&JY901_data.time, &rxBuffer[2], 8);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	3302      	adds	r3, #2
 800076a:	2208      	movs	r2, #8
 800076c:	4619      	mov	r1, r3
 800076e:	f009 fdc8 	bl	800a302 <memcpy>
      break;  // time
 8000772:	e074      	b.n	800085e <_ZN6CJY9019parseDataEPh+0x17e>
    case 0x51:
      memcpy(&JY901_data.acc, &rxBuffer[2], 8);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	3302      	adds	r3, #2
 800077e:	2208      	movs	r2, #8
 8000780:	4619      	mov	r1, r3
 8000782:	f009 fdbe 	bl	800a302 <memcpy>
      break;  // acceleration
 8000786:	e06a      	b.n	800085e <_ZN6CJY9019parseDataEPh+0x17e>
    case 0x52:
      memcpy(&JY901_data.gyro, &rxBuffer[2], 8);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	3302      	adds	r3, #2
 8000792:	2208      	movs	r2, #8
 8000794:	4619      	mov	r1, r3
 8000796:	f009 fdb4 	bl	800a302 <memcpy>
      break;  // angular velocity
 800079a:	e060      	b.n	800085e <_ZN6CJY9019parseDataEPh+0x17e>
    case 0x53:
      memcpy(&JY901_data.angle, &rxBuffer[2], 8);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	3302      	adds	r3, #2
 80007a6:	2208      	movs	r2, #8
 80007a8:	4619      	mov	r1, r3
 80007aa:	f009 fdaa 	bl	800a302 <memcpy>
      break;  // angle
 80007ae:	e056      	b.n	800085e <_ZN6CJY9019parseDataEPh+0x17e>
    case 0x54:
      memcpy(&JY901_data.mag, &rxBuffer[2], 8);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f103 004c 	add.w	r0, r3, #76	; 0x4c
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	3302      	adds	r3, #2
 80007ba:	2208      	movs	r2, #8
 80007bc:	4619      	mov	r1, r3
 80007be:	f009 fda0 	bl	800a302 <memcpy>
      break;  // magnetic field and temperature
 80007c2:	e04c      	b.n	800085e <_ZN6CJY9019parseDataEPh+0x17e>
    case 0x55:
      memcpy(&JY901_data.dStatus, &rxBuffer[2], 8);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	f103 0054 	add.w	r0, r3, #84	; 0x54
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	3302      	adds	r3, #2
 80007ce:	2208      	movs	r2, #8
 80007d0:	4619      	mov	r1, r3
 80007d2:	f009 fd96 	bl	800a302 <memcpy>
      break;  // D port status
 80007d6:	e042      	b.n	800085e <_ZN6CJY9019parseDataEPh+0x17e>

    case 0x56:
      memcpy(&JY901_data.pressure, &rxBuffer[2], 4);  // pressure
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	335c      	adds	r3, #92	; 0x5c
 80007dc:	683a      	ldr	r2, [r7, #0]
 80007de:	3202      	adds	r2, #2
 80007e0:	6812      	ldr	r2, [r2, #0]
 80007e2:	601a      	str	r2, [r3, #0]
      memcpy(&JY901_data.altitude, &rxBuffer[6], 4);  // altitude
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	3360      	adds	r3, #96	; 0x60
 80007e8:	683a      	ldr	r2, [r7, #0]
 80007ea:	3206      	adds	r2, #6
 80007ec:	6812      	ldr	r2, [r2, #0]
 80007ee:	601a      	str	r2, [r3, #0]
      break;
 80007f0:	e035      	b.n	800085e <_ZN6CJY9019parseDataEPh+0x17e>

    case 0x57:
      memcpy(&JY901_data.lon, &rxBuffer[2], 4);  // longtitude
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	3364      	adds	r3, #100	; 0x64
 80007f6:	683a      	ldr	r2, [r7, #0]
 80007f8:	3202      	adds	r2, #2
 80007fa:	6812      	ldr	r2, [r2, #0]
 80007fc:	601a      	str	r2, [r3, #0]
      memcpy(&JY901_data.lat, &rxBuffer[6], 4);  // latitude
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	3368      	adds	r3, #104	; 0x68
 8000802:	683a      	ldr	r2, [r7, #0]
 8000804:	3206      	adds	r2, #6
 8000806:	6812      	ldr	r2, [r2, #0]
 8000808:	601a      	str	r2, [r3, #0]
      break;
 800080a:	e028      	b.n	800085e <_ZN6CJY9019parseDataEPh+0x17e>

    case 0x58:
      memcpy(&JY901_data.GPSHeight, &rxBuffer[2], 2);    //
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	336c      	adds	r3, #108	; 0x6c
 8000810:	683a      	ldr	r2, [r7, #0]
 8000812:	3202      	adds	r2, #2
 8000814:	8812      	ldrh	r2, [r2, #0]
 8000816:	b292      	uxth	r2, r2
 8000818:	801a      	strh	r2, [r3, #0]
      memcpy(&JY901_data.GPSYaw, &rxBuffer[4], 2);       // GPS data
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	336e      	adds	r3, #110	; 0x6e
 800081e:	683a      	ldr	r2, [r7, #0]
 8000820:	3204      	adds	r2, #4
 8000822:	8812      	ldrh	r2, [r2, #0]
 8000824:	b292      	uxth	r2, r2
 8000826:	801a      	strh	r2, [r3, #0]
      memcpy(&JY901_data.GPSVelocity, &rxBuffer[6], 4);  //
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3370      	adds	r3, #112	; 0x70
 800082c:	683a      	ldr	r2, [r7, #0]
 800082e:	3206      	adds	r2, #6
 8000830:	6812      	ldr	r2, [r2, #0]
 8000832:	601a      	str	r2, [r3, #0]
      break;
 8000834:	e013      	b.n	800085e <_ZN6CJY9019parseDataEPh+0x17e>

    case 0x59:
      memcpy(&JY901_data.quater, &rxBuffer[2], 8);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	f103 0074 	add.w	r0, r3, #116	; 0x74
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	3302      	adds	r3, #2
 8000840:	2208      	movs	r2, #8
 8000842:	4619      	mov	r1, r3
 8000844:	f009 fd5d 	bl	800a302 <memcpy>
      break;  // quaternion
 8000848:	e009      	b.n	800085e <_ZN6CJY9019parseDataEPh+0x17e>
    case 0x5A:
      memcpy(&JY901_data.GPS_DOP, &rxBuffer[2], 8);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	3302      	adds	r3, #2
 8000854:	2208      	movs	r2, #8
 8000856:	4619      	mov	r1, r3
 8000858:	f009 fd53 	bl	800a302 <memcpy>
      break;  // GPS DOP
 800085c:	bf00      	nop
  }
  _lastTime = millis();  // last receive time
 800085e:	f7ff ff15 	bl	800068c <_ZL6millisv>
 8000862:	4602      	mov	r2, r0
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	629a      	str	r2, [r3, #40]	; 0x28
  return true;
 8000868:	2301      	movs	r3, #1
}
 800086a:	4618      	mov	r0, r3
 800086c:	3710      	adds	r7, #16
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	0000      	movs	r0, r0
	...

08000878 <_ZN6CJY9017getAccXEv>:
double CJY901::getTemp() {
  return JY901_data.mag.temperature /
         100.0;  // are all the data(from mag acc gyro) same?
}  // may need further test

double CJY901::getAccX() {
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  return JY901_data.acc.x / (32768.0 / 16.0);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8000886:	ee07 3a90 	vmov	s15, r3
 800088a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800088e:	ed9f 6b06 	vldr	d6, [pc, #24]	; 80008a8 <_ZN6CJY9017getAccXEv+0x30>
 8000892:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8000896:	eeb0 7b45 	vmov.f64	d7, d5
}  // getAccX() unit: G(gravity)
 800089a:	eeb0 0b47 	vmov.f64	d0, d7
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	00000000 	.word	0x00000000
 80008ac:	40a00000 	.word	0x40a00000

080008b0 <_ZN6CJY9017getAccYEv>:

double CJY901::getAccY() {
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  return JY901_data.acc.y / (32768.0 / 16.0);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80008be:	ee07 3a90 	vmov	s15, r3
 80008c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80008c6:	ed9f 6b06 	vldr	d6, [pc, #24]	; 80008e0 <_ZN6CJY9017getAccYEv+0x30>
 80008ca:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80008ce:	eeb0 7b45 	vmov.f64	d7, d5
}  // getAccY() unit: G(gravity)
 80008d2:	eeb0 0b47 	vmov.f64	d0, d7
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	00000000 	.word	0x00000000
 80008e4:	40a00000 	.word	0x40a00000

080008e8 <_ZN6CJY9017getAccZEv>:

double CJY901::getAccZ() {
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  return JY901_data.acc.z / (32768.0 / 16.0);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 80008f6:	ee07 3a90 	vmov	s15, r3
 80008fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80008fe:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8000918 <_ZN6CJY9017getAccZEv+0x30>
 8000902:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8000906:	eeb0 7b45 	vmov.f64	d7, d5
}  // getAccZ() unit: G(gravity)
 800090a:	eeb0 0b47 	vmov.f64	d0, d7
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	00000000 	.word	0x00000000
 800091c:	40a00000 	.word	0x40a00000

08000920 <_ZN6CJY9018saveConfEi>:
  return JY901_data.mag.z;
}
/* ----------------- Raw data Functions end ----------------- */

/* ------------ (Host --> JY901) functions ------------ */
void CJY901::saveConf(int saveFlag) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
  JY901_SAVECONF[3] = saveFlag;
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	b2da      	uxtb	r2, r3
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <_ZN6CJY9018saveConfEi+0x30>)
 8000930:	70da      	strb	r2, [r3, #3]
  if(_huart!=NULL){
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000936:	2b00      	cmp	r3, #0
 8000938:	d006      	beq.n	8000948 <_ZN6CJY9018saveConfEi+0x28>
	  HAL_UART_Transmit(_huart, JY901_SAVECONF, 5, 10);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800093e:	230a      	movs	r3, #10
 8000940:	2205      	movs	r2, #5
 8000942:	4903      	ldr	r1, [pc, #12]	; (8000950 <_ZN6CJY9018saveConfEi+0x30>)
 8000944:	f006 fed0 	bl	80076e8 <HAL_UART_Transmit>
  }
  //Serial1.write(JY901_SAVECONF, 5);
}  // save configuration
 8000948:	bf00      	nop
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	24000000 	.word	0x24000000

08000954 <_ZN6CJY90113setReportRateEi>:
	  HAL_UART_Transmit(_huart, JY901_RPTCONF, 5, 10);
  }
  //Serial1.write(JY901_RPTCONF, 5);
}  // need to write conf to  JY901_ctrl.report.conf first

void CJY901::setReportRate(int rateFlag) {
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	6039      	str	r1, [r7, #0]
  JY901_RPTRT[3] = rateFlag;
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	b2da      	uxtb	r2, r3
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <_ZN6CJY90113setReportRateEi+0x30>)
 8000964:	70da      	strb	r2, [r3, #3]
  if(_huart!=NULL){
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800096a:	2b00      	cmp	r3, #0
 800096c:	d006      	beq.n	800097c <_ZN6CJY90113setReportRateEi+0x28>
	  HAL_UART_Transmit(_huart, JY901_RPTRT, 5, 10);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000972:	230a      	movs	r3, #10
 8000974:	2205      	movs	r2, #5
 8000976:	4903      	ldr	r1, [pc, #12]	; (8000984 <_ZN6CJY90113setReportRateEi+0x30>)
 8000978:	f006 feb6 	bl	80076e8 <HAL_UART_Transmit>
  }
  //Serial1.write(JY901_RPTRT, 5);
}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	24000008 	.word	0x24000008

08000988 <_ZN6CJY90111setBaudRateEi>:

void CJY901::setBaudRate(int baudFlag) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	6039      	str	r1, [r7, #0]
  JY901_BAUDRT[3] = baudFlag;
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	b2da      	uxtb	r2, r3
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <_ZN6CJY90111setBaudRateEi+0x30>)
 8000998:	70da      	strb	r2, [r3, #3]
  if(_huart!=NULL){
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d006      	beq.n	80009b0 <_ZN6CJY90111setBaudRateEi+0x28>
	  HAL_UART_Transmit(_huart, JY901_BAUDRT, 5, 10);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80009a6:	230a      	movs	r3, #10
 80009a8:	2205      	movs	r2, #5
 80009aa:	4903      	ldr	r1, [pc, #12]	; (80009b8 <_ZN6CJY90111setBaudRateEi+0x30>)
 80009ac:	f006 fe9c 	bl	80076e8 <HAL_UART_Transmit>
  }
  //Serial1.write(JY901_BAUDRT, 5);
}
 80009b0:	bf00      	nop
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	24000010 	.word	0x24000010

080009bc <_Z41__static_initialization_and_destruction_0ii>:
	  HAL_UART_Transmit(_huart, JY901_GPSBAUDRATE, 5, 10);
  }
  //Serial1.write(JY901_GPSBAUDRATE, 5);
}

CJY901 JY901;
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d108      	bne.n	80009de <_Z41__static_initialization_and_destruction_0ii+0x22>
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d103      	bne.n	80009de <_Z41__static_initialization_and_destruction_0ii+0x22>
 80009d6:	2100      	movs	r1, #0
 80009d8:	4803      	ldr	r0, [pc, #12]	; (80009e8 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80009da:	f7ff fe6f 	bl	80006bc <_ZN6CJY901C1EP20__UART_HandleTypeDef>
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	2400020c 	.word	0x2400020c

080009ec <_GLOBAL__sub_I_JY901_SAVECONF>:
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80009f4:	2001      	movs	r0, #1
 80009f6:	f7ff ffe1 	bl	80009bc <_Z41__static_initialization_and_destruction_0ii>
 80009fa:	bd80      	pop	{r7, pc}

080009fc <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart7, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000a04:	1d39      	adds	r1, r7, #4
 8000a06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	4803      	ldr	r0, [pc, #12]	; (8000a1c <__io_putchar+0x20>)
 8000a0e:	f006 fe6b 	bl	80076e8 <HAL_UART_Transmit>
  return ch;
 8000a12:	687b      	ldr	r3, [r7, #4]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	24000290 	.word	0x24000290

08000a20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a24:	f000 fdd2 	bl	80015cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a28:	f000 f80e 	bl	8000a48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a2c:	f000 f93e 	bl	8000cac <MX_GPIO_Init>
  MX_DMA_Init();
 8000a30:	f000 f91c 	bl	8000c6c <MX_DMA_Init>
  MX_UART7_Init();
 8000a34:	f000 f882 	bl	8000b3c <MX_UART7_Init>
  MX_UART8_Init();
 8000a38:	f000 f8cc 	bl	8000bd4 <MX_UART8_Init>
  /* USER CODE BEGIN 2 */

  setup();
 8000a3c:	f000 fa34 	bl	8000ea8 <setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  loop();
 8000a40:	f000 fa7e 	bl	8000f40 <loop>
 8000a44:	e7fc      	b.n	8000a40 <main+0x20>
	...

08000a48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b09c      	sub	sp, #112	; 0x70
 8000a4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a52:	224c      	movs	r2, #76	; 0x4c
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f009 fbd3 	bl	800a202 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	2220      	movs	r2, #32
 8000a60:	2100      	movs	r1, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f009 fbcd 	bl	800a202 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a68:	2002      	movs	r0, #2
 8000a6a:	f003 ffa1 	bl	80049b0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a6e:	2300      	movs	r3, #0
 8000a70:	603b      	str	r3, [r7, #0]
 8000a72:	4b30      	ldr	r3, [pc, #192]	; (8000b34 <SystemClock_Config+0xec>)
 8000a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a76:	4a2f      	ldr	r2, [pc, #188]	; (8000b34 <SystemClock_Config+0xec>)
 8000a78:	f023 0301 	bic.w	r3, r3, #1
 8000a7c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a7e:	4b2d      	ldr	r3, [pc, #180]	; (8000b34 <SystemClock_Config+0xec>)
 8000a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	603b      	str	r3, [r7, #0]
 8000a88:	4b2b      	ldr	r3, [pc, #172]	; (8000b38 <SystemClock_Config+0xf0>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	4a2a      	ldr	r2, [pc, #168]	; (8000b38 <SystemClock_Config+0xf0>)
 8000a8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a92:	6193      	str	r3, [r2, #24]
 8000a94:	4b28      	ldr	r3, [pc, #160]	; (8000b38 <SystemClock_Config+0xf0>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a9c:	603b      	str	r3, [r7, #0]
 8000a9e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000aa0:	bf00      	nop
 8000aa2:	4b25      	ldr	r3, [pc, #148]	; (8000b38 <SystemClock_Config+0xf0>)
 8000aa4:	699b      	ldr	r3, [r3, #24]
 8000aa6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000aaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000aae:	d1f8      	bne.n	8000aa2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ab4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aba:	2302      	movs	r3, #2
 8000abc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000ac2:	2305      	movs	r3, #5
 8000ac4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000ac6:	23a0      	movs	r3, #160	; 0xa0
 8000ac8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000aca:	2302      	movs	r3, #2
 8000acc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000ad6:	2308      	movs	r3, #8
 8000ad8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ada:	2300      	movs	r3, #0
 8000adc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f003 ff9c 	bl	8004a24 <HAL_RCC_OscConfig>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000af2:	f000 f94d 	bl	8000d90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af6:	233f      	movs	r3, #63	; 0x3f
 8000af8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000afa:	2303      	movs	r3, #3
 8000afc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b02:	2308      	movs	r3, #8
 8000b04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b06:	2340      	movs	r3, #64	; 0x40
 8000b08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b0a:	2340      	movs	r3, #64	; 0x40
 8000b0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b12:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b14:	2340      	movs	r3, #64	; 0x40
 8000b16:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	2102      	movs	r1, #2
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f004 fbdb 	bl	80052d8 <HAL_RCC_ClockConfig>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000b28:	f000 f932 	bl	8000d90 <Error_Handler>
  }
}
 8000b2c:	bf00      	nop
 8000b2e:	3770      	adds	r7, #112	; 0x70
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	58000400 	.word	0x58000400
 8000b38:	58024800 	.word	0x58024800

08000b3c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000b40:	4b22      	ldr	r3, [pc, #136]	; (8000bcc <MX_UART7_Init+0x90>)
 8000b42:	4a23      	ldr	r2, [pc, #140]	; (8000bd0 <MX_UART7_Init+0x94>)
 8000b44:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000b46:	4b21      	ldr	r3, [pc, #132]	; (8000bcc <MX_UART7_Init+0x90>)
 8000b48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b4c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4e:	4b1f      	ldr	r3, [pc, #124]	; (8000bcc <MX_UART7_Init+0x90>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000b54:	4b1d      	ldr	r3, [pc, #116]	; (8000bcc <MX_UART7_Init+0x90>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000b5a:	4b1c      	ldr	r3, [pc, #112]	; (8000bcc <MX_UART7_Init+0x90>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000b60:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <MX_UART7_Init+0x90>)
 8000b62:	220c      	movs	r2, #12
 8000b64:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b66:	4b19      	ldr	r3, [pc, #100]	; (8000bcc <MX_UART7_Init+0x90>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b6c:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <MX_UART7_Init+0x90>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b72:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <MX_UART7_Init+0x90>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b78:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <MX_UART7_Init+0x90>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b7e:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <MX_UART7_Init+0x90>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000b84:	4811      	ldr	r0, [pc, #68]	; (8000bcc <MX_UART7_Init+0x90>)
 8000b86:	f006 fd5f 	bl	8007648 <HAL_UART_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8000b90:	f000 f8fe 	bl	8000d90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b94:	2100      	movs	r1, #0
 8000b96:	480d      	ldr	r0, [pc, #52]	; (8000bcc <MX_UART7_Init+0x90>)
 8000b98:	f008 fd17 	bl	80095ca <HAL_UARTEx_SetTxFifoThreshold>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8000ba2:	f000 f8f5 	bl	8000d90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4808      	ldr	r0, [pc, #32]	; (8000bcc <MX_UART7_Init+0x90>)
 8000baa:	f008 fd4c 	bl	8009646 <HAL_UARTEx_SetRxFifoThreshold>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000bb4:	f000 f8ec 	bl	8000d90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000bb8:	4804      	ldr	r0, [pc, #16]	; (8000bcc <MX_UART7_Init+0x90>)
 8000bba:	f008 fccd 	bl	8009558 <HAL_UARTEx_DisableFifoMode>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000bc4:	f000 f8e4 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	24000290 	.word	0x24000290
 8000bd0:	40007800 	.word	0x40007800

08000bd4 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000bd8:	4b22      	ldr	r3, [pc, #136]	; (8000c64 <MX_UART8_Init+0x90>)
 8000bda:	4a23      	ldr	r2, [pc, #140]	; (8000c68 <MX_UART8_Init+0x94>)
 8000bdc:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 8000bde:	4b21      	ldr	r3, [pc, #132]	; (8000c64 <MX_UART8_Init+0x90>)
 8000be0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000be4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000be6:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <MX_UART8_Init+0x90>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000bec:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <MX_UART8_Init+0x90>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000bf2:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <MX_UART8_Init+0x90>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000bf8:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <MX_UART8_Init+0x90>)
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfe:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <MX_UART8_Init+0x90>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c04:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <MX_UART8_Init+0x90>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c0a:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <MX_UART8_Init+0x90>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c10:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <MX_UART8_Init+0x90>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c16:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <MX_UART8_Init+0x90>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000c1c:	4811      	ldr	r0, [pc, #68]	; (8000c64 <MX_UART8_Init+0x90>)
 8000c1e:	f006 fd13 	bl	8007648 <HAL_UART_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000c28:	f000 f8b2 	bl	8000d90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	480d      	ldr	r0, [pc, #52]	; (8000c64 <MX_UART8_Init+0x90>)
 8000c30:	f008 fccb 	bl	80095ca <HAL_UARTEx_SetTxFifoThreshold>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8000c3a:	f000 f8a9 	bl	8000d90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4808      	ldr	r0, [pc, #32]	; (8000c64 <MX_UART8_Init+0x90>)
 8000c42:	f008 fd00 	bl	8009646 <HAL_UARTEx_SetRxFifoThreshold>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000c4c:	f000 f8a0 	bl	8000d90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000c50:	4804      	ldr	r0, [pc, #16]	; (8000c64 <MX_UART8_Init+0x90>)
 8000c52:	f008 fc81 	bl	8009558 <HAL_UARTEx_DisableFifoMode>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000c5c:	f000 f898 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	24000324 	.word	0x24000324
 8000c68:	40007c00 	.word	0x40007c00

08000c6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c72:	4b0d      	ldr	r3, [pc, #52]	; (8000ca8 <MX_DMA_Init+0x3c>)
 8000c74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c78:	4a0b      	ldr	r2, [pc, #44]	; (8000ca8 <MX_DMA_Init+0x3c>)
 8000c7a:	f043 0301 	orr.w	r3, r3, #1
 8000c7e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c82:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <MX_DMA_Init+0x3c>)
 8000c84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c88:	f003 0301 	and.w	r3, r3, #1
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c90:	2200      	movs	r2, #0
 8000c92:	2100      	movs	r1, #0
 8000c94:	200b      	movs	r0, #11
 8000c96:	f000 fe36 	bl	8001906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c9a:	200b      	movs	r0, #11
 8000c9c:	f000 fe4d 	bl	800193a <HAL_NVIC_EnableIRQ>

}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	58024400 	.word	0x58024400

08000cac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	; 0x28
 8000cb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	60da      	str	r2, [r3, #12]
 8000cc0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc2:	4b31      	ldr	r3, [pc, #196]	; (8000d88 <MX_GPIO_Init+0xdc>)
 8000cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc8:	4a2f      	ldr	r2, [pc, #188]	; (8000d88 <MX_GPIO_Init+0xdc>)
 8000cca:	f043 0304 	orr.w	r3, r3, #4
 8000cce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cd2:	4b2d      	ldr	r3, [pc, #180]	; (8000d88 <MX_GPIO_Init+0xdc>)
 8000cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd8:	f003 0304 	and.w	r3, r3, #4
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ce0:	4b29      	ldr	r3, [pc, #164]	; (8000d88 <MX_GPIO_Init+0xdc>)
 8000ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce6:	4a28      	ldr	r2, [pc, #160]	; (8000d88 <MX_GPIO_Init+0xdc>)
 8000ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cf0:	4b25      	ldr	r3, [pc, #148]	; (8000d88 <MX_GPIO_Init+0xdc>)
 8000cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cfe:	4b22      	ldr	r3, [pc, #136]	; (8000d88 <MX_GPIO_Init+0xdc>)
 8000d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d04:	4a20      	ldr	r2, [pc, #128]	; (8000d88 <MX_GPIO_Init+0xdc>)
 8000d06:	f043 0310 	orr.w	r3, r3, #16
 8000d0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d0e:	4b1e      	ldr	r3, [pc, #120]	; (8000d88 <MX_GPIO_Init+0xdc>)
 8000d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d14:	f003 0310 	and.w	r3, r3, #16
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1c:	4b1a      	ldr	r3, [pc, #104]	; (8000d88 <MX_GPIO_Init+0xdc>)
 8000d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d22:	4a19      	ldr	r2, [pc, #100]	; (8000d88 <MX_GPIO_Init+0xdc>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d2c:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <MX_GPIO_Init+0xdc>)
 8000d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d3a:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <MX_GPIO_Init+0xdc>)
 8000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d40:	4a11      	ldr	r2, [pc, #68]	; (8000d88 <MX_GPIO_Init+0xdc>)
 8000d42:	f043 0308 	orr.w	r3, r3, #8
 8000d46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <MX_GPIO_Init+0xdc>)
 8000d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d50:	f003 0308 	and.w	r3, r3, #8
 8000d54:	603b      	str	r3, [r7, #0]
 8000d56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_BLUE_Pin|LED_YELLOW_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2168      	movs	r1, #104	; 0x68
 8000d5c:	480b      	ldr	r0, [pc, #44]	; (8000d8c <MX_GPIO_Init+0xe0>)
 8000d5e:	f003 fdf3 	bl	8004948 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_BLUE_Pin LED_YELLOW_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_YELLOW_Pin|LED_RED_Pin;
 8000d62:	2368      	movs	r3, #104	; 0x68
 8000d64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d66:	2301      	movs	r3, #1
 8000d68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d72:	f107 0314 	add.w	r3, r7, #20
 8000d76:	4619      	mov	r1, r3
 8000d78:	4804      	ldr	r0, [pc, #16]	; (8000d8c <MX_GPIO_Init+0xe0>)
 8000d7a:	f003 fc35 	bl	80045e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d7e:	bf00      	nop
 8000d80:	3728      	adds	r7, #40	; 0x28
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	58024400 	.word	0x58024400
 8000d8c:	58020c00 	.word	0x58020c00

08000d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d94:	b672      	cpsid	i
}
 8000d96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <Error_Handler+0x8>
	...

08000d9c <_ZL8DWT_Initv>:
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; //
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <_ZL8DWT_Initv+0x28>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	4a07      	ldr	r2, [pc, #28]	; (8000dc4 <_ZL8DWT_Initv+0x28>)
 8000da6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000daa:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   //
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <_ZL8DWT_Initv+0x2c>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a05      	ldr	r2, [pc, #20]	; (8000dc8 <_ZL8DWT_Initv+0x2c>)
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	6013      	str	r3, [r2, #0]
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000edf0 	.word	0xe000edf0
 8000dc8:	e0001000 	.word	0xe0001000

08000dcc <HAL_UART_RxCpltCallback>:

uint8_t jy901_data[22];

CJY901 jy901(&huart8);

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	if(huart->Instance==UART8){
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a23      	ldr	r2, [pc, #140]	; (8000e68 <HAL_UART_RxCpltCallback+0x9c>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d13f      	bne.n	8000e5e <HAL_UART_RxCpltCallback+0x92>
		if(jy901_data[0]==0x55){
 8000dde:	4b23      	ldr	r3, [pc, #140]	; (8000e6c <HAL_UART_RxCpltCallback+0xa0>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b55      	cmp	r3, #85	; 0x55
 8000de4:	d104      	bne.n	8000df0 <HAL_UART_RxCpltCallback+0x24>
			jy901.parseData(jy901_data);
 8000de6:	4921      	ldr	r1, [pc, #132]	; (8000e6c <HAL_UART_RxCpltCallback+0xa0>)
 8000de8:	4821      	ldr	r0, [pc, #132]	; (8000e70 <HAL_UART_RxCpltCallback+0xa4>)
 8000dea:	f7ff fc79 	bl	80006e0 <_ZN6CJY9019parseDataEPh>
			__HAL_UART_ENABLE_IT(&huart8, UART_IT_RXFF);
			HAL_UART_Receive_DMA(&huart8, jy901_data, 11);
		}

	}
}
 8000dee:	e036      	b.n	8000e5e <HAL_UART_RxCpltCallback+0x92>
			__HAL_UART_DISABLE_IT(&huart8, UART_IT_RXFF);
 8000df0:	4b20      	ldr	r3, [pc, #128]	; (8000e74 <HAL_UART_RxCpltCallback+0xa8>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <HAL_UART_RxCpltCallback+0xa8>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000dfe:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive(&huart8, &temp, 1, 10);
 8000e00:	f107 010e 	add.w	r1, r7, #14
 8000e04:	230a      	movs	r3, #10
 8000e06:	2201      	movs	r2, #1
 8000e08:	481a      	ldr	r0, [pc, #104]	; (8000e74 <HAL_UART_RxCpltCallback+0xa8>)
 8000e0a:	f006 fcfb 	bl	8007804 <HAL_UART_Receive>
			while(temp!=0x55){
 8000e0e:	e006      	b.n	8000e1e <HAL_UART_RxCpltCallback+0x52>
				HAL_UART_Receive(&huart8, &temp, 1, 10);
 8000e10:	f107 010e 	add.w	r1, r7, #14
 8000e14:	230a      	movs	r3, #10
 8000e16:	2201      	movs	r2, #1
 8000e18:	4816      	ldr	r0, [pc, #88]	; (8000e74 <HAL_UART_RxCpltCallback+0xa8>)
 8000e1a:	f006 fcf3 	bl	8007804 <HAL_UART_Receive>
			while(temp!=0x55){
 8000e1e:	7bbb      	ldrb	r3, [r7, #14]
 8000e20:	2b55      	cmp	r3, #85	; 0x55
 8000e22:	d1f5      	bne.n	8000e10 <HAL_UART_RxCpltCallback+0x44>
			for(uint8_t i=0;i<10;++i){
 8000e24:	2300      	movs	r3, #0
 8000e26:	73fb      	strb	r3, [r7, #15]
 8000e28:	e009      	b.n	8000e3e <HAL_UART_RxCpltCallback+0x72>
				HAL_UART_Receive(&huart8, &temp, 1, 10);
 8000e2a:	f107 010e 	add.w	r1, r7, #14
 8000e2e:	230a      	movs	r3, #10
 8000e30:	2201      	movs	r2, #1
 8000e32:	4810      	ldr	r0, [pc, #64]	; (8000e74 <HAL_UART_RxCpltCallback+0xa8>)
 8000e34:	f006 fce6 	bl	8007804 <HAL_UART_Receive>
			for(uint8_t i=0;i<10;++i){
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	73fb      	strb	r3, [r7, #15]
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
 8000e40:	2b09      	cmp	r3, #9
 8000e42:	d9f2      	bls.n	8000e2a <HAL_UART_RxCpltCallback+0x5e>
			__HAL_UART_ENABLE_IT(&huart8, UART_IT_RXFF);
 8000e44:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <HAL_UART_RxCpltCallback+0xa8>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <HAL_UART_RxCpltCallback+0xa8>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000e52:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart8, jy901_data, 11);
 8000e54:	220b      	movs	r2, #11
 8000e56:	4905      	ldr	r1, [pc, #20]	; (8000e6c <HAL_UART_RxCpltCallback+0xa0>)
 8000e58:	4806      	ldr	r0, [pc, #24]	; (8000e74 <HAL_UART_RxCpltCallback+0xa8>)
 8000e5a:	f006 fd9b 	bl	8007994 <HAL_UART_Receive_DMA>
}
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40007c00 	.word	0x40007c00
 8000e6c:	24000430 	.word	0x24000430
 8000e70:	24000448 	.word	0x24000448
 8000e74:	24000324 	.word	0x24000324

08000e78 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
    if(UartHandle->Instance==UART8) {
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a05      	ldr	r2, [pc, #20]	; (8000e9c <HAL_UART_ErrorCallback+0x24>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d104      	bne.n	8000e94 <HAL_UART_ErrorCallback+0x1c>
    	HAL_UART_Receive_DMA(&huart8, jy901_data, 11);
 8000e8a:	220b      	movs	r2, #11
 8000e8c:	4904      	ldr	r1, [pc, #16]	; (8000ea0 <HAL_UART_ErrorCallback+0x28>)
 8000e8e:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <HAL_UART_ErrorCallback+0x2c>)
 8000e90:	f006 fd80 	bl	8007994 <HAL_UART_Receive_DMA>
    }
}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40007c00 	.word	0x40007c00
 8000ea0:	24000430 	.word	0x24000430
 8000ea4:	24000324 	.word	0x24000324

08000ea8 <setup>:
		}
	}
}*/


void setup(){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
	DWT_Init();
 8000eae:	f7ff ff75 	bl	8000d9c <_ZL8DWT_Initv>

	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2120      	movs	r1, #32
 8000eb6:	481e      	ldr	r0, [pc, #120]	; (8000f30 <setup+0x88>)
 8000eb8:	f003 fd46 	bl	8004948 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2140      	movs	r1, #64	; 0x40
 8000ec0:	481b      	ldr	r0, [pc, #108]	; (8000f30 <setup+0x88>)
 8000ec2:	f003 fd41 	bl	8004948 <HAL_GPIO_WritePin>

	jy901.setBaudRate(0x06);
 8000ec6:	2106      	movs	r1, #6
 8000ec8:	481a      	ldr	r0, [pc, #104]	; (8000f34 <setup+0x8c>)
 8000eca:	f7ff fd5d 	bl	8000988 <_ZN6CJY90111setBaudRateEi>
	jy901.setReportRate(0x07);
 8000ece:	2107      	movs	r1, #7
 8000ed0:	4818      	ldr	r0, [pc, #96]	; (8000f34 <setup+0x8c>)
 8000ed2:	f7ff fd3f 	bl	8000954 <_ZN6CJY90113setReportRateEi>
	jy901.saveConf(1);
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	4816      	ldr	r0, [pc, #88]	; (8000f34 <setup+0x8c>)
 8000eda:	f7ff fd21 	bl	8000920 <_ZN6CJY9018saveConfEi>

	uint8_t temp;
	HAL_UART_Receive(&huart8, &temp, 1, 10);
 8000ede:	1db9      	adds	r1, r7, #6
 8000ee0:	230a      	movs	r3, #10
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	4814      	ldr	r0, [pc, #80]	; (8000f38 <setup+0x90>)
 8000ee6:	f006 fc8d 	bl	8007804 <HAL_UART_Receive>
	while(temp!=0x55){
 8000eea:	e005      	b.n	8000ef8 <setup+0x50>
		HAL_UART_Receive(&huart8, &temp, 1, 10);
 8000eec:	1db9      	adds	r1, r7, #6
 8000eee:	230a      	movs	r3, #10
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	4811      	ldr	r0, [pc, #68]	; (8000f38 <setup+0x90>)
 8000ef4:	f006 fc86 	bl	8007804 <HAL_UART_Receive>
	while(temp!=0x55){
 8000ef8:	79bb      	ldrb	r3, [r7, #6]
 8000efa:	2b55      	cmp	r3, #85	; 0x55
 8000efc:	d1f6      	bne.n	8000eec <setup+0x44>
	}
	for(uint8_t i=0;i<10;++i){
 8000efe:	2300      	movs	r3, #0
 8000f00:	71fb      	strb	r3, [r7, #7]
 8000f02:	e008      	b.n	8000f16 <setup+0x6e>
		HAL_UART_Receive(&huart8, &temp, 1, 10);
 8000f04:	1db9      	adds	r1, r7, #6
 8000f06:	230a      	movs	r3, #10
 8000f08:	2201      	movs	r2, #1
 8000f0a:	480b      	ldr	r0, [pc, #44]	; (8000f38 <setup+0x90>)
 8000f0c:	f006 fc7a 	bl	8007804 <HAL_UART_Receive>
	for(uint8_t i=0;i<10;++i){
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	3301      	adds	r3, #1
 8000f14:	71fb      	strb	r3, [r7, #7]
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	2b09      	cmp	r3, #9
 8000f1a:	d9f3      	bls.n	8000f04 <setup+0x5c>
	}

	HAL_UART_Receive_DMA(&huart8, jy901_data, 11);
 8000f1c:	220b      	movs	r2, #11
 8000f1e:	4907      	ldr	r1, [pc, #28]	; (8000f3c <setup+0x94>)
 8000f20:	4805      	ldr	r0, [pc, #20]	; (8000f38 <setup+0x90>)
 8000f22:	f006 fd37 	bl	8007994 <HAL_UART_Receive_DMA>


}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	58020c00 	.word	0x58020c00
 8000f34:	24000448 	.word	0x24000448
 8000f38:	24000324 	.word	0x24000324
 8000f3c:	24000430 	.word	0x24000430

08000f40 <loop>:




void loop(){
 8000f40:	b5b0      	push	{r4, r5, r7, lr}
 8000f42:	ed2d 8b02 	vpush	{d8}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af04      	add	r7, sp, #16

	HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8000f4a:	2108      	movs	r1, #8
 8000f4c:	4814      	ldr	r0, [pc, #80]	; (8000fa0 <loop+0x60>)
 8000f4e:	f003 fd14 	bl	800497a <HAL_GPIO_TogglePin>
	HAL_UART_Transmit(&huart7, (uint8_t*)"Acc\n", 4, 100);
 8000f52:	2364      	movs	r3, #100	; 0x64
 8000f54:	2204      	movs	r2, #4
 8000f56:	4913      	ldr	r1, [pc, #76]	; (8000fa4 <loop+0x64>)
 8000f58:	4813      	ldr	r0, [pc, #76]	; (8000fa8 <loop+0x68>)
 8000f5a:	f006 fbc5 	bl	80076e8 <HAL_UART_Transmit>
	printf("acc: %5.2f,%5.2f,%5.2f\n",jy901.getAccX(),jy901.getAccY(),jy901.getAccZ());
 8000f5e:	4813      	ldr	r0, [pc, #76]	; (8000fac <loop+0x6c>)
 8000f60:	f7ff fc8a 	bl	8000878 <_ZN6CJY9017getAccXEv>
 8000f64:	ec55 4b10 	vmov	r4, r5, d0
 8000f68:	4810      	ldr	r0, [pc, #64]	; (8000fac <loop+0x6c>)
 8000f6a:	f7ff fca1 	bl	80008b0 <_ZN6CJY9017getAccYEv>
 8000f6e:	eeb0 8b40 	vmov.f64	d8, d0
 8000f72:	480e      	ldr	r0, [pc, #56]	; (8000fac <loop+0x6c>)
 8000f74:	f7ff fcb8 	bl	80008e8 <_ZN6CJY9017getAccZEv>
 8000f78:	eeb0 7b40 	vmov.f64	d7, d0
 8000f7c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8000f80:	ed8d 8b00 	vstr	d8, [sp]
 8000f84:	4622      	mov	r2, r4
 8000f86:	462b      	mov	r3, r5
 8000f88:	4809      	ldr	r0, [pc, #36]	; (8000fb0 <loop+0x70>)
 8000f8a:	f009 f8e5 	bl	800a158 <iprintf>

	HAL_Delay(1000);
 8000f8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f92:	f000 fbad 	bl	80016f0 <HAL_Delay>


}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	ecbd 8b02 	vpop	{d8}
 8000f9e:	bdb0      	pop	{r4, r5, r7, pc}
 8000fa0:	58020c00 	.word	0x58020c00
 8000fa4:	0800bfb8 	.word	0x0800bfb8
 8000fa8:	24000290 	.word	0x24000290
 8000fac:	24000448 	.word	0x24000448
 8000fb0:	0800bfc0 	.word	0x0800bfc0

08000fb4 <_Z41__static_initialization_and_destruction_0ii>:
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d108      	bne.n	8000fd6 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d103      	bne.n	8000fd6 <_Z41__static_initialization_and_destruction_0ii+0x22>
CJY901 jy901(&huart8);
 8000fce:	4904      	ldr	r1, [pc, #16]	; (8000fe0 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8000fd0:	4804      	ldr	r0, [pc, #16]	; (8000fe4 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8000fd2:	f7ff fb73 	bl	80006bc <_ZN6CJY901C1EP20__UART_HandleTypeDef>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	24000324 	.word	0x24000324
 8000fe4:	24000448 	.word	0x24000448

08000fe8 <_GLOBAL__sub_I_jy901_data>:
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	f7ff ffdf 	bl	8000fb4 <_Z41__static_initialization_and_destruction_0ii>
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <HAL_MspInit+0x30>)
 8001000:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001004:	4a08      	ldr	r2, [pc, #32]	; (8001028 <HAL_MspInit+0x30>)
 8001006:	f043 0302 	orr.w	r3, r3, #2
 800100a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_MspInit+0x30>)
 8001010:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001014:	f003 0302 	and.w	r3, r3, #2
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	58024400 	.word	0x58024400

0800102c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b0be      	sub	sp, #248	; 0xf8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001044:	f107 0320 	add.w	r3, r7, #32
 8001048:	22c0      	movs	r2, #192	; 0xc0
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f009 f8d8 	bl	800a202 <memset>
  if(huart->Instance==UART7)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a7b      	ldr	r2, [pc, #492]	; (8001244 <HAL_UART_MspInit+0x218>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d16c      	bne.n	8001136 <HAL_UART_MspInit+0x10a>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800105c:	f04f 0202 	mov.w	r2, #2
 8001060:	f04f 0300 	mov.w	r3, #0
 8001064:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001068:	2300      	movs	r3, #0
 800106a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800106e:	f107 0320 	add.w	r3, r7, #32
 8001072:	4618      	mov	r0, r3
 8001074:	f004 fcbc 	bl	80059f0 <HAL_RCCEx_PeriphCLKConfig>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800107e:	f7ff fe87 	bl	8000d90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001082:	4b71      	ldr	r3, [pc, #452]	; (8001248 <HAL_UART_MspInit+0x21c>)
 8001084:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001088:	4a6f      	ldr	r2, [pc, #444]	; (8001248 <HAL_UART_MspInit+0x21c>)
 800108a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800108e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001092:	4b6d      	ldr	r3, [pc, #436]	; (8001248 <HAL_UART_MspInit+0x21c>)
 8001094:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001098:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800109c:	61fb      	str	r3, [r7, #28]
 800109e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010a0:	4b69      	ldr	r3, [pc, #420]	; (8001248 <HAL_UART_MspInit+0x21c>)
 80010a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a6:	4a68      	ldr	r2, [pc, #416]	; (8001248 <HAL_UART_MspInit+0x21c>)
 80010a8:	f043 0310 	orr.w	r3, r3, #16
 80010ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010b0:	4b65      	ldr	r3, [pc, #404]	; (8001248 <HAL_UART_MspInit+0x21c>)
 80010b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b6:	f003 0310 	and.w	r3, r3, #16
 80010ba:	61bb      	str	r3, [r7, #24]
 80010bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	4b62      	ldr	r3, [pc, #392]	; (8001248 <HAL_UART_MspInit+0x21c>)
 80010c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c4:	4a60      	ldr	r2, [pc, #384]	; (8001248 <HAL_UART_MspInit+0x21c>)
 80010c6:	f043 0301 	orr.w	r3, r3, #1
 80010ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ce:	4b5e      	ldr	r3, [pc, #376]	; (8001248 <HAL_UART_MspInit+0x21c>)
 80010d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	617b      	str	r3, [r7, #20]
 80010da:	697b      	ldr	r3, [r7, #20]
    /**UART7 GPIO Configuration
    PE8     ------> UART7_TX
    PA8     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80010f6:	2307      	movs	r3, #7
 80010f8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010fc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001100:	4619      	mov	r1, r3
 8001102:	4852      	ldr	r0, [pc, #328]	; (800124c <HAL_UART_MspInit+0x220>)
 8001104:	f003 fa70 	bl	80045e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001108:	f44f 7380 	mov.w	r3, #256	; 0x100
 800110c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001110:	2302      	movs	r3, #2
 8001112:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
 8001122:	230b      	movs	r3, #11
 8001124:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001128:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800112c:	4619      	mov	r1, r3
 800112e:	4848      	ldr	r0, [pc, #288]	; (8001250 <HAL_UART_MspInit+0x224>)
 8001130:	f003 fa5a 	bl	80045e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 8001134:	e081      	b.n	800123a <HAL_UART_MspInit+0x20e>
  else if(huart->Instance==UART8)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a46      	ldr	r2, [pc, #280]	; (8001254 <HAL_UART_MspInit+0x228>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d17c      	bne.n	800123a <HAL_UART_MspInit+0x20e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8001140:	f04f 0202 	mov.w	r2, #2
 8001144:	f04f 0300 	mov.w	r3, #0
 8001148:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800114c:	2300      	movs	r3, #0
 800114e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001152:	f107 0320 	add.w	r3, r7, #32
 8001156:	4618      	mov	r0, r3
 8001158:	f004 fc4a 	bl	80059f0 <HAL_RCCEx_PeriphCLKConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_UART_MspInit+0x13a>
      Error_Handler();
 8001162:	f7ff fe15 	bl	8000d90 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8001166:	4b38      	ldr	r3, [pc, #224]	; (8001248 <HAL_UART_MspInit+0x21c>)
 8001168:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800116c:	4a36      	ldr	r2, [pc, #216]	; (8001248 <HAL_UART_MspInit+0x21c>)
 800116e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001172:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001176:	4b34      	ldr	r3, [pc, #208]	; (8001248 <HAL_UART_MspInit+0x21c>)
 8001178:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800117c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001180:	613b      	str	r3, [r7, #16]
 8001182:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001184:	4b30      	ldr	r3, [pc, #192]	; (8001248 <HAL_UART_MspInit+0x21c>)
 8001186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800118a:	4a2f      	ldr	r2, [pc, #188]	; (8001248 <HAL_UART_MspInit+0x21c>)
 800118c:	f043 0310 	orr.w	r3, r3, #16
 8001190:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001194:	4b2c      	ldr	r3, [pc, #176]	; (8001248 <HAL_UART_MspInit+0x21c>)
 8001196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800119a:	f003 0310 	and.w	r3, r3, #16
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011a2:	2303      	movs	r3, #3
 80011a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a8:	2302      	movs	r3, #2
 80011aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2300      	movs	r3, #0
 80011b6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80011ba:	2308      	movs	r3, #8
 80011bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011c0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80011c4:	4619      	mov	r1, r3
 80011c6:	4821      	ldr	r0, [pc, #132]	; (800124c <HAL_UART_MspInit+0x220>)
 80011c8:	f003 fa0e 	bl	80045e8 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream0;
 80011cc:	4b22      	ldr	r3, [pc, #136]	; (8001258 <HAL_UART_MspInit+0x22c>)
 80011ce:	4a23      	ldr	r2, [pc, #140]	; (800125c <HAL_UART_MspInit+0x230>)
 80011d0:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 80011d2:	4b21      	ldr	r3, [pc, #132]	; (8001258 <HAL_UART_MspInit+0x22c>)
 80011d4:	2251      	movs	r2, #81	; 0x51
 80011d6:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011d8:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <HAL_UART_MspInit+0x22c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011de:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <HAL_UART_MspInit+0x22c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011e4:	4b1c      	ldr	r3, [pc, #112]	; (8001258 <HAL_UART_MspInit+0x22c>)
 80011e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011ea:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011ec:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <HAL_UART_MspInit+0x22c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011f2:	4b19      	ldr	r3, [pc, #100]	; (8001258 <HAL_UART_MspInit+0x22c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 80011f8:	4b17      	ldr	r3, [pc, #92]	; (8001258 <HAL_UART_MspInit+0x22c>)
 80011fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011fe:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001200:	4b15      	ldr	r3, [pc, #84]	; (8001258 <HAL_UART_MspInit+0x22c>)
 8001202:	2200      	movs	r2, #0
 8001204:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001206:	4b14      	ldr	r3, [pc, #80]	; (8001258 <HAL_UART_MspInit+0x22c>)
 8001208:	2200      	movs	r2, #0
 800120a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 800120c:	4812      	ldr	r0, [pc, #72]	; (8001258 <HAL_UART_MspInit+0x22c>)
 800120e:	f000 fbaf 	bl	8001970 <HAL_DMA_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <HAL_UART_MspInit+0x1f0>
      Error_Handler();
 8001218:	f7ff fdba 	bl	8000d90 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a0e      	ldr	r2, [pc, #56]	; (8001258 <HAL_UART_MspInit+0x22c>)
 8001220:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001224:	4a0c      	ldr	r2, [pc, #48]	; (8001258 <HAL_UART_MspInit+0x22c>)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	2100      	movs	r1, #0
 800122e:	2053      	movs	r0, #83	; 0x53
 8001230:	f000 fb69 	bl	8001906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8001234:	2053      	movs	r0, #83	; 0x53
 8001236:	f000 fb80 	bl	800193a <HAL_NVIC_EnableIRQ>
}
 800123a:	bf00      	nop
 800123c:	37f8      	adds	r7, #248	; 0xf8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40007800 	.word	0x40007800
 8001248:	58024400 	.word	0x58024400
 800124c:	58021000 	.word	0x58021000
 8001250:	58020000 	.word	0x58020000
 8001254:	40007c00 	.word	0x40007c00
 8001258:	240003b8 	.word	0x240003b8
 800125c:	40020010 	.word	0x40020010

08001260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <NMI_Handler+0x4>

08001266 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800126a:	e7fe      	b.n	800126a <HardFault_Handler+0x4>

0800126c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001270:	e7fe      	b.n	8001270 <MemManage_Handler+0x4>

08001272 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001276:	e7fe      	b.n	8001276 <BusFault_Handler+0x4>

08001278 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800127c:	e7fe      	b.n	800127c <UsageFault_Handler+0x4>

0800127e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ac:	f000 fa00 	bl	80016b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 80012b8:	4802      	ldr	r0, [pc, #8]	; (80012c4 <DMA1_Stream0_IRQHandler+0x10>)
 80012ba:	f001 fe83 	bl	8002fc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	240003b8 	.word	0x240003b8

080012c8 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80012cc:	4802      	ldr	r0, [pc, #8]	; (80012d8 <UART8_IRQHandler+0x10>)
 80012ce:	f006 fbad 	bl	8007a2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	24000324 	.word	0x24000324

080012dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return 1;
 80012e0:	2301      	movs	r3, #1
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <_kill>:

int _kill(int pid, int sig)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012f6:	f008 ffd7 	bl	800a2a8 <__errno>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2216      	movs	r2, #22
 80012fe:	601a      	str	r2, [r3, #0]
  return -1;
 8001300:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001304:	4618      	mov	r0, r3
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <_exit>:

void _exit (int status)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001314:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff ffe7 	bl	80012ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800131e:	e7fe      	b.n	800131e <_exit+0x12>

08001320 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	e00a      	b.n	8001348 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001332:	f3af 8000 	nop.w
 8001336:	4601      	mov	r1, r0
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	1c5a      	adds	r2, r3, #1
 800133c:	60ba      	str	r2, [r7, #8]
 800133e:	b2ca      	uxtb	r2, r1
 8001340:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	3301      	adds	r3, #1
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	697a      	ldr	r2, [r7, #20]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	429a      	cmp	r2, r3
 800134e:	dbf0      	blt.n	8001332 <_read+0x12>
  }

  return len;
 8001350:	687b      	ldr	r3, [r7, #4]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b086      	sub	sp, #24
 800135e:	af00      	add	r7, sp, #0
 8001360:	60f8      	str	r0, [r7, #12]
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
 800136a:	e009      	b.n	8001380 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	1c5a      	adds	r2, r3, #1
 8001370:	60ba      	str	r2, [r7, #8]
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fb41 	bl	80009fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	3301      	adds	r3, #1
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	429a      	cmp	r2, r3
 8001386:	dbf1      	blt.n	800136c <_write+0x12>
  }
  return len;
 8001388:	687b      	ldr	r3, [r7, #4]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <_close>:

int _close(int file)
{
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800139a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b083      	sub	sp, #12
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
 80013b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013ba:	605a      	str	r2, [r3, #4]
  return 0;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <_isatty>:

int _isatty(int file)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013d2:	2301      	movs	r3, #1
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001404:	4a14      	ldr	r2, [pc, #80]	; (8001458 <_sbrk+0x5c>)
 8001406:	4b15      	ldr	r3, [pc, #84]	; (800145c <_sbrk+0x60>)
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001410:	4b13      	ldr	r3, [pc, #76]	; (8001460 <_sbrk+0x64>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d102      	bne.n	800141e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001418:	4b11      	ldr	r3, [pc, #68]	; (8001460 <_sbrk+0x64>)
 800141a:	4a12      	ldr	r2, [pc, #72]	; (8001464 <_sbrk+0x68>)
 800141c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <_sbrk+0x64>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	429a      	cmp	r2, r3
 800142a:	d207      	bcs.n	800143c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800142c:	f008 ff3c 	bl	800a2a8 <__errno>
 8001430:	4603      	mov	r3, r0
 8001432:	220c      	movs	r2, #12
 8001434:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001436:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800143a:	e009      	b.n	8001450 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <_sbrk+0x64>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001442:	4b07      	ldr	r3, [pc, #28]	; (8001460 <_sbrk+0x64>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4413      	add	r3, r2
 800144a:	4a05      	ldr	r2, [pc, #20]	; (8001460 <_sbrk+0x64>)
 800144c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800144e:	68fb      	ldr	r3, [r7, #12]
}
 8001450:	4618      	mov	r0, r3
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	24080000 	.word	0x24080000
 800145c:	00000400 	.word	0x00000400
 8001460:	240004cc 	.word	0x240004cc
 8001464:	24000620 	.word	0x24000620

08001468 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800146c:	4b37      	ldr	r3, [pc, #220]	; (800154c <SystemInit+0xe4>)
 800146e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001472:	4a36      	ldr	r2, [pc, #216]	; (800154c <SystemInit+0xe4>)
 8001474:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001478:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800147c:	4b34      	ldr	r3, [pc, #208]	; (8001550 <SystemInit+0xe8>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 030f 	and.w	r3, r3, #15
 8001484:	2b06      	cmp	r3, #6
 8001486:	d807      	bhi.n	8001498 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001488:	4b31      	ldr	r3, [pc, #196]	; (8001550 <SystemInit+0xe8>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f023 030f 	bic.w	r3, r3, #15
 8001490:	4a2f      	ldr	r2, [pc, #188]	; (8001550 <SystemInit+0xe8>)
 8001492:	f043 0307 	orr.w	r3, r3, #7
 8001496:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001498:	4b2e      	ldr	r3, [pc, #184]	; (8001554 <SystemInit+0xec>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a2d      	ldr	r2, [pc, #180]	; (8001554 <SystemInit+0xec>)
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014a4:	4b2b      	ldr	r3, [pc, #172]	; (8001554 <SystemInit+0xec>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80014aa:	4b2a      	ldr	r3, [pc, #168]	; (8001554 <SystemInit+0xec>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	4929      	ldr	r1, [pc, #164]	; (8001554 <SystemInit+0xec>)
 80014b0:	4b29      	ldr	r3, [pc, #164]	; (8001558 <SystemInit+0xf0>)
 80014b2:	4013      	ands	r3, r2
 80014b4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014b6:	4b26      	ldr	r3, [pc, #152]	; (8001550 <SystemInit+0xe8>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0308 	and.w	r3, r3, #8
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d007      	beq.n	80014d2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014c2:	4b23      	ldr	r3, [pc, #140]	; (8001550 <SystemInit+0xe8>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f023 030f 	bic.w	r3, r3, #15
 80014ca:	4a21      	ldr	r2, [pc, #132]	; (8001550 <SystemInit+0xe8>)
 80014cc:	f043 0307 	orr.w	r3, r3, #7
 80014d0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80014d2:	4b20      	ldr	r3, [pc, #128]	; (8001554 <SystemInit+0xec>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80014d8:	4b1e      	ldr	r3, [pc, #120]	; (8001554 <SystemInit+0xec>)
 80014da:	2200      	movs	r2, #0
 80014dc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80014de:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <SystemInit+0xec>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80014e4:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <SystemInit+0xec>)
 80014e6:	4a1d      	ldr	r2, [pc, #116]	; (800155c <SystemInit+0xf4>)
 80014e8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80014ea:	4b1a      	ldr	r3, [pc, #104]	; (8001554 <SystemInit+0xec>)
 80014ec:	4a1c      	ldr	r2, [pc, #112]	; (8001560 <SystemInit+0xf8>)
 80014ee:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80014f0:	4b18      	ldr	r3, [pc, #96]	; (8001554 <SystemInit+0xec>)
 80014f2:	4a1c      	ldr	r2, [pc, #112]	; (8001564 <SystemInit+0xfc>)
 80014f4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80014f6:	4b17      	ldr	r3, [pc, #92]	; (8001554 <SystemInit+0xec>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80014fc:	4b15      	ldr	r3, [pc, #84]	; (8001554 <SystemInit+0xec>)
 80014fe:	4a19      	ldr	r2, [pc, #100]	; (8001564 <SystemInit+0xfc>)
 8001500:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001502:	4b14      	ldr	r3, [pc, #80]	; (8001554 <SystemInit+0xec>)
 8001504:	2200      	movs	r2, #0
 8001506:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <SystemInit+0xec>)
 800150a:	4a16      	ldr	r2, [pc, #88]	; (8001564 <SystemInit+0xfc>)
 800150c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800150e:	4b11      	ldr	r3, [pc, #68]	; (8001554 <SystemInit+0xec>)
 8001510:	2200      	movs	r2, #0
 8001512:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001514:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <SystemInit+0xec>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0e      	ldr	r2, [pc, #56]	; (8001554 <SystemInit+0xec>)
 800151a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800151e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001520:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <SystemInit+0xec>)
 8001522:	2200      	movs	r2, #0
 8001524:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <SystemInit+0x100>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	4b10      	ldr	r3, [pc, #64]	; (800156c <SystemInit+0x104>)
 800152c:	4013      	ands	r3, r2
 800152e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001532:	d202      	bcs.n	800153a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001534:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <SystemInit+0x108>)
 8001536:	2201      	movs	r2, #1
 8001538:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <SystemInit+0x10c>)
 800153c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001540:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001542:	bf00      	nop
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	e000ed00 	.word	0xe000ed00
 8001550:	52002000 	.word	0x52002000
 8001554:	58024400 	.word	0x58024400
 8001558:	eaf6ed7f 	.word	0xeaf6ed7f
 800155c:	02020200 	.word	0x02020200
 8001560:	01ff0000 	.word	0x01ff0000
 8001564:	01010280 	.word	0x01010280
 8001568:	5c001000 	.word	0x5c001000
 800156c:	ffff0000 	.word	0xffff0000
 8001570:	51008108 	.word	0x51008108
 8001574:	52004000 	.word	0x52004000

08001578 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001578:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800157c:	f7ff ff74 	bl	8001468 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001580:	480c      	ldr	r0, [pc, #48]	; (80015b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001582:	490d      	ldr	r1, [pc, #52]	; (80015b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001584:	4a0d      	ldr	r2, [pc, #52]	; (80015bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001586:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001588:	e002      	b.n	8001590 <LoopCopyDataInit>

0800158a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800158a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800158c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800158e:	3304      	adds	r3, #4

08001590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001594:	d3f9      	bcc.n	800158a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001596:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001598:	4c0a      	ldr	r4, [pc, #40]	; (80015c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800159a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800159c:	e001      	b.n	80015a2 <LoopFillZerobss>

0800159e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800159e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a0:	3204      	adds	r2, #4

080015a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a4:	d3fb      	bcc.n	800159e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015a6:	f008 fe85 	bl	800a2b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015aa:	f7ff fa39 	bl	8000a20 <main>
  bx  lr
 80015ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015b0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80015b4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015b8:	240001f0 	.word	0x240001f0
  ldr r2, =_sidata
 80015bc:	0800c3a4 	.word	0x0800c3a4
  ldr r2, =_sbss
 80015c0:	240001f0 	.word	0x240001f0
  ldr r4, =_ebss
 80015c4:	24000620 	.word	0x24000620

080015c8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015c8:	e7fe      	b.n	80015c8 <ADC3_IRQHandler>
	...

080015cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d2:	2003      	movs	r0, #3
 80015d4:	f000 f98c 	bl	80018f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80015d8:	f004 f834 	bl	8005644 <HAL_RCC_GetSysClockFreq>
 80015dc:	4602      	mov	r2, r0
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <HAL_Init+0x68>)
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	0a1b      	lsrs	r3, r3, #8
 80015e4:	f003 030f 	and.w	r3, r3, #15
 80015e8:	4913      	ldr	r1, [pc, #76]	; (8001638 <HAL_Init+0x6c>)
 80015ea:	5ccb      	ldrb	r3, [r1, r3]
 80015ec:	f003 031f 	and.w	r3, r3, #31
 80015f0:	fa22 f303 	lsr.w	r3, r2, r3
 80015f4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80015f6:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <HAL_Init+0x68>)
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	4a0e      	ldr	r2, [pc, #56]	; (8001638 <HAL_Init+0x6c>)
 8001600:	5cd3      	ldrb	r3, [r2, r3]
 8001602:	f003 031f 	and.w	r3, r3, #31
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	fa22 f303 	lsr.w	r3, r2, r3
 800160c:	4a0b      	ldr	r2, [pc, #44]	; (800163c <HAL_Init+0x70>)
 800160e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001610:	4a0b      	ldr	r2, [pc, #44]	; (8001640 <HAL_Init+0x74>)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001616:	200f      	movs	r0, #15
 8001618:	f000 f814 	bl	8001644 <HAL_InitTick>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e002      	b.n	800162c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001626:	f7ff fce7 	bl	8000ff8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	58024400 	.word	0x58024400
 8001638:	0800bfd8 	.word	0x0800bfd8
 800163c:	2400001c 	.word	0x2400001c
 8001640:	24000018 	.word	0x24000018

08001644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800164c:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <HAL_InitTick+0x60>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e021      	b.n	800169c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001658:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <HAL_InitTick+0x64>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <HAL_InitTick+0x60>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	4619      	mov	r1, r3
 8001662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001666:	fbb3 f3f1 	udiv	r3, r3, r1
 800166a:	fbb2 f3f3 	udiv	r3, r2, r3
 800166e:	4618      	mov	r0, r3
 8001670:	f000 f971 	bl	8001956 <HAL_SYSTICK_Config>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e00e      	b.n	800169c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b0f      	cmp	r3, #15
 8001682:	d80a      	bhi.n	800169a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001684:	2200      	movs	r2, #0
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800168c:	f000 f93b 	bl	8001906 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001690:	4a06      	ldr	r2, [pc, #24]	; (80016ac <HAL_InitTick+0x68>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001696:	2300      	movs	r3, #0
 8001698:	e000      	b.n	800169c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
}
 800169c:	4618      	mov	r0, r3
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	24000024 	.word	0x24000024
 80016a8:	24000018 	.word	0x24000018
 80016ac:	24000020 	.word	0x24000020

080016b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_IncTick+0x20>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	461a      	mov	r2, r3
 80016ba:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_IncTick+0x24>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4413      	add	r3, r2
 80016c0:	4a04      	ldr	r2, [pc, #16]	; (80016d4 <HAL_IncTick+0x24>)
 80016c2:	6013      	str	r3, [r2, #0]
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	24000024 	.word	0x24000024
 80016d4:	240004d0 	.word	0x240004d0

080016d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  return uwTick;
 80016dc:	4b03      	ldr	r3, [pc, #12]	; (80016ec <HAL_GetTick+0x14>)
 80016de:	681b      	ldr	r3, [r3, #0]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	240004d0 	.word	0x240004d0

080016f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016f8:	f7ff ffee 	bl	80016d8 <HAL_GetTick>
 80016fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001708:	d005      	beq.n	8001716 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800170a:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <HAL_Delay+0x44>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	461a      	mov	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4413      	add	r3, r2
 8001714:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001716:	bf00      	nop
 8001718:	f7ff ffde 	bl	80016d8 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	429a      	cmp	r2, r3
 8001726:	d8f7      	bhi.n	8001718 <HAL_Delay+0x28>
  {
  }
}
 8001728:	bf00      	nop
 800172a:	bf00      	nop
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	24000024 	.word	0x24000024

08001738 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800173c:	4b03      	ldr	r3, [pc, #12]	; (800174c <HAL_GetREVID+0x14>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	0c1b      	lsrs	r3, r3, #16
}
 8001742:	4618      	mov	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	5c001000 	.word	0x5c001000

08001750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001760:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <__NVIC_SetPriorityGrouping+0x40>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800176c:	4013      	ands	r3, r2
 800176e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <__NVIC_SetPriorityGrouping+0x44>)
 800177a:	4313      	orrs	r3, r2
 800177c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800177e:	4a04      	ldr	r2, [pc, #16]	; (8001790 <__NVIC_SetPriorityGrouping+0x40>)
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	60d3      	str	r3, [r2, #12]
}
 8001784:	bf00      	nop
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000ed00 	.word	0xe000ed00
 8001794:	05fa0000 	.word	0x05fa0000

08001798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800179c:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <__NVIC_GetPriorityGrouping+0x18>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	0a1b      	lsrs	r3, r3, #8
 80017a2:	f003 0307 	and.w	r3, r3, #7
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	db0b      	blt.n	80017de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017c6:	88fb      	ldrh	r3, [r7, #6]
 80017c8:	f003 021f 	and.w	r2, r3, #31
 80017cc:	4907      	ldr	r1, [pc, #28]	; (80017ec <__NVIC_EnableIRQ+0x38>)
 80017ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017d2:	095b      	lsrs	r3, r3, #5
 80017d4:	2001      	movs	r0, #1
 80017d6:	fa00 f202 	lsl.w	r2, r0, r2
 80017da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000e100 	.word	0xe000e100

080017f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	6039      	str	r1, [r7, #0]
 80017fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001800:	2b00      	cmp	r3, #0
 8001802:	db0a      	blt.n	800181a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	b2da      	uxtb	r2, r3
 8001808:	490c      	ldr	r1, [pc, #48]	; (800183c <__NVIC_SetPriority+0x4c>)
 800180a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800180e:	0112      	lsls	r2, r2, #4
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	440b      	add	r3, r1
 8001814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001818:	e00a      	b.n	8001830 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4908      	ldr	r1, [pc, #32]	; (8001840 <__NVIC_SetPriority+0x50>)
 8001820:	88fb      	ldrh	r3, [r7, #6]
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	3b04      	subs	r3, #4
 8001828:	0112      	lsls	r2, r2, #4
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	440b      	add	r3, r1
 800182e:	761a      	strb	r2, [r3, #24]
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000e100 	.word	0xe000e100
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001844:	b480      	push	{r7}
 8001846:	b089      	sub	sp, #36	; 0x24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f1c3 0307 	rsb	r3, r3, #7
 800185e:	2b04      	cmp	r3, #4
 8001860:	bf28      	it	cs
 8001862:	2304      	movcs	r3, #4
 8001864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3304      	adds	r3, #4
 800186a:	2b06      	cmp	r3, #6
 800186c:	d902      	bls.n	8001874 <NVIC_EncodePriority+0x30>
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3b03      	subs	r3, #3
 8001872:	e000      	b.n	8001876 <NVIC_EncodePriority+0x32>
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001878:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43da      	mvns	r2, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	401a      	ands	r2, r3
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800188c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	fa01 f303 	lsl.w	r3, r1, r3
 8001896:	43d9      	mvns	r1, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800189c:	4313      	orrs	r3, r2
         );
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3724      	adds	r7, #36	; 0x24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
	...

080018ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018bc:	d301      	bcc.n	80018c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018be:	2301      	movs	r3, #1
 80018c0:	e00f      	b.n	80018e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018c2:	4a0a      	ldr	r2, [pc, #40]	; (80018ec <SysTick_Config+0x40>)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ca:	210f      	movs	r1, #15
 80018cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018d0:	f7ff ff8e 	bl	80017f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d4:	4b05      	ldr	r3, [pc, #20]	; (80018ec <SysTick_Config+0x40>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018da:	4b04      	ldr	r3, [pc, #16]	; (80018ec <SysTick_Config+0x40>)
 80018dc:	2207      	movs	r2, #7
 80018de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	e000e010 	.word	0xe000e010

080018f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff ff29 	bl	8001750 <__NVIC_SetPriorityGrouping>
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b086      	sub	sp, #24
 800190a:	af00      	add	r7, sp, #0
 800190c:	4603      	mov	r3, r0
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	607a      	str	r2, [r7, #4]
 8001912:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001914:	f7ff ff40 	bl	8001798 <__NVIC_GetPriorityGrouping>
 8001918:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	68b9      	ldr	r1, [r7, #8]
 800191e:	6978      	ldr	r0, [r7, #20]
 8001920:	f7ff ff90 	bl	8001844 <NVIC_EncodePriority>
 8001924:	4602      	mov	r2, r0
 8001926:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800192a:	4611      	mov	r1, r2
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff5f 	bl	80017f0 <__NVIC_SetPriority>
}
 8001932:	bf00      	nop
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	4603      	mov	r3, r0
 8001942:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001944:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff33 	bl	80017b4 <__NVIC_EnableIRQ>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff ffa4 	bl	80018ac <SysTick_Config>
 8001964:	4603      	mov	r3, r0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001978:	f7ff feae 	bl	80016d8 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e316      	b.n	8001fb6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a66      	ldr	r2, [pc, #408]	; (8001b28 <HAL_DMA_Init+0x1b8>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d04a      	beq.n	8001a28 <HAL_DMA_Init+0xb8>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a65      	ldr	r2, [pc, #404]	; (8001b2c <HAL_DMA_Init+0x1bc>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d045      	beq.n	8001a28 <HAL_DMA_Init+0xb8>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a63      	ldr	r2, [pc, #396]	; (8001b30 <HAL_DMA_Init+0x1c0>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d040      	beq.n	8001a28 <HAL_DMA_Init+0xb8>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a62      	ldr	r2, [pc, #392]	; (8001b34 <HAL_DMA_Init+0x1c4>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d03b      	beq.n	8001a28 <HAL_DMA_Init+0xb8>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a60      	ldr	r2, [pc, #384]	; (8001b38 <HAL_DMA_Init+0x1c8>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d036      	beq.n	8001a28 <HAL_DMA_Init+0xb8>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a5f      	ldr	r2, [pc, #380]	; (8001b3c <HAL_DMA_Init+0x1cc>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d031      	beq.n	8001a28 <HAL_DMA_Init+0xb8>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a5d      	ldr	r2, [pc, #372]	; (8001b40 <HAL_DMA_Init+0x1d0>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d02c      	beq.n	8001a28 <HAL_DMA_Init+0xb8>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a5c      	ldr	r2, [pc, #368]	; (8001b44 <HAL_DMA_Init+0x1d4>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d027      	beq.n	8001a28 <HAL_DMA_Init+0xb8>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a5a      	ldr	r2, [pc, #360]	; (8001b48 <HAL_DMA_Init+0x1d8>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d022      	beq.n	8001a28 <HAL_DMA_Init+0xb8>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a59      	ldr	r2, [pc, #356]	; (8001b4c <HAL_DMA_Init+0x1dc>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d01d      	beq.n	8001a28 <HAL_DMA_Init+0xb8>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a57      	ldr	r2, [pc, #348]	; (8001b50 <HAL_DMA_Init+0x1e0>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d018      	beq.n	8001a28 <HAL_DMA_Init+0xb8>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a56      	ldr	r2, [pc, #344]	; (8001b54 <HAL_DMA_Init+0x1e4>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d013      	beq.n	8001a28 <HAL_DMA_Init+0xb8>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a54      	ldr	r2, [pc, #336]	; (8001b58 <HAL_DMA_Init+0x1e8>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d00e      	beq.n	8001a28 <HAL_DMA_Init+0xb8>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a53      	ldr	r2, [pc, #332]	; (8001b5c <HAL_DMA_Init+0x1ec>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d009      	beq.n	8001a28 <HAL_DMA_Init+0xb8>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a51      	ldr	r2, [pc, #324]	; (8001b60 <HAL_DMA_Init+0x1f0>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d004      	beq.n	8001a28 <HAL_DMA_Init+0xb8>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a50      	ldr	r2, [pc, #320]	; (8001b64 <HAL_DMA_Init+0x1f4>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d101      	bne.n	8001a2c <HAL_DMA_Init+0xbc>
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <HAL_DMA_Init+0xbe>
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f000 813b 	beq.w	8001caa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2202      	movs	r2, #2
 8001a38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a37      	ldr	r2, [pc, #220]	; (8001b28 <HAL_DMA_Init+0x1b8>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d04a      	beq.n	8001ae4 <HAL_DMA_Init+0x174>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a36      	ldr	r2, [pc, #216]	; (8001b2c <HAL_DMA_Init+0x1bc>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d045      	beq.n	8001ae4 <HAL_DMA_Init+0x174>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a34      	ldr	r2, [pc, #208]	; (8001b30 <HAL_DMA_Init+0x1c0>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d040      	beq.n	8001ae4 <HAL_DMA_Init+0x174>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a33      	ldr	r2, [pc, #204]	; (8001b34 <HAL_DMA_Init+0x1c4>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d03b      	beq.n	8001ae4 <HAL_DMA_Init+0x174>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a31      	ldr	r2, [pc, #196]	; (8001b38 <HAL_DMA_Init+0x1c8>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d036      	beq.n	8001ae4 <HAL_DMA_Init+0x174>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a30      	ldr	r2, [pc, #192]	; (8001b3c <HAL_DMA_Init+0x1cc>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d031      	beq.n	8001ae4 <HAL_DMA_Init+0x174>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a2e      	ldr	r2, [pc, #184]	; (8001b40 <HAL_DMA_Init+0x1d0>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d02c      	beq.n	8001ae4 <HAL_DMA_Init+0x174>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a2d      	ldr	r2, [pc, #180]	; (8001b44 <HAL_DMA_Init+0x1d4>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d027      	beq.n	8001ae4 <HAL_DMA_Init+0x174>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a2b      	ldr	r2, [pc, #172]	; (8001b48 <HAL_DMA_Init+0x1d8>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d022      	beq.n	8001ae4 <HAL_DMA_Init+0x174>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a2a      	ldr	r2, [pc, #168]	; (8001b4c <HAL_DMA_Init+0x1dc>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d01d      	beq.n	8001ae4 <HAL_DMA_Init+0x174>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a28      	ldr	r2, [pc, #160]	; (8001b50 <HAL_DMA_Init+0x1e0>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d018      	beq.n	8001ae4 <HAL_DMA_Init+0x174>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a27      	ldr	r2, [pc, #156]	; (8001b54 <HAL_DMA_Init+0x1e4>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d013      	beq.n	8001ae4 <HAL_DMA_Init+0x174>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a25      	ldr	r2, [pc, #148]	; (8001b58 <HAL_DMA_Init+0x1e8>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d00e      	beq.n	8001ae4 <HAL_DMA_Init+0x174>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a24      	ldr	r2, [pc, #144]	; (8001b5c <HAL_DMA_Init+0x1ec>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d009      	beq.n	8001ae4 <HAL_DMA_Init+0x174>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a22      	ldr	r2, [pc, #136]	; (8001b60 <HAL_DMA_Init+0x1f0>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d004      	beq.n	8001ae4 <HAL_DMA_Init+0x174>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a21      	ldr	r2, [pc, #132]	; (8001b64 <HAL_DMA_Init+0x1f4>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d108      	bne.n	8001af6 <HAL_DMA_Init+0x186>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f022 0201 	bic.w	r2, r2, #1
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	e007      	b.n	8001b06 <HAL_DMA_Init+0x196>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 0201 	bic.w	r2, r2, #1
 8001b04:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001b06:	e02f      	b.n	8001b68 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b08:	f7ff fde6 	bl	80016d8 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b05      	cmp	r3, #5
 8001b14:	d928      	bls.n	8001b68 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2220      	movs	r2, #32
 8001b1a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2203      	movs	r2, #3
 8001b20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e246      	b.n	8001fb6 <HAL_DMA_Init+0x646>
 8001b28:	40020010 	.word	0x40020010
 8001b2c:	40020028 	.word	0x40020028
 8001b30:	40020040 	.word	0x40020040
 8001b34:	40020058 	.word	0x40020058
 8001b38:	40020070 	.word	0x40020070
 8001b3c:	40020088 	.word	0x40020088
 8001b40:	400200a0 	.word	0x400200a0
 8001b44:	400200b8 	.word	0x400200b8
 8001b48:	40020410 	.word	0x40020410
 8001b4c:	40020428 	.word	0x40020428
 8001b50:	40020440 	.word	0x40020440
 8001b54:	40020458 	.word	0x40020458
 8001b58:	40020470 	.word	0x40020470
 8001b5c:	40020488 	.word	0x40020488
 8001b60:	400204a0 	.word	0x400204a0
 8001b64:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1c8      	bne.n	8001b08 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	4b83      	ldr	r3, [pc, #524]	; (8001d90 <HAL_DMA_Init+0x420>)
 8001b82:	4013      	ands	r3, r2
 8001b84:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001b8e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b9a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ba6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	2b04      	cmp	r3, #4
 8001bba:	d107      	bne.n	8001bcc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001bcc:	4b71      	ldr	r3, [pc, #452]	; (8001d94 <HAL_DMA_Init+0x424>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4b71      	ldr	r3, [pc, #452]	; (8001d98 <HAL_DMA_Init+0x428>)
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bd8:	d328      	bcc.n	8001c2c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b28      	cmp	r3, #40	; 0x28
 8001be0:	d903      	bls.n	8001bea <HAL_DMA_Init+0x27a>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b2e      	cmp	r3, #46	; 0x2e
 8001be8:	d917      	bls.n	8001c1a <HAL_DMA_Init+0x2aa>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b3e      	cmp	r3, #62	; 0x3e
 8001bf0:	d903      	bls.n	8001bfa <HAL_DMA_Init+0x28a>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b42      	cmp	r3, #66	; 0x42
 8001bf8:	d90f      	bls.n	8001c1a <HAL_DMA_Init+0x2aa>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b46      	cmp	r3, #70	; 0x46
 8001c00:	d903      	bls.n	8001c0a <HAL_DMA_Init+0x29a>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	2b48      	cmp	r3, #72	; 0x48
 8001c08:	d907      	bls.n	8001c1a <HAL_DMA_Init+0x2aa>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b4e      	cmp	r3, #78	; 0x4e
 8001c10:	d905      	bls.n	8001c1e <HAL_DMA_Init+0x2ae>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b52      	cmp	r3, #82	; 0x52
 8001c18:	d801      	bhi.n	8001c1e <HAL_DMA_Init+0x2ae>
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <HAL_DMA_Init+0x2b0>
 8001c1e:	2300      	movs	r3, #0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c2a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f023 0307 	bic.w	r3, r3, #7
 8001c42:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d117      	bne.n	8001c86 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d00e      	beq.n	8001c86 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f002 fb33 	bl	80042d4 <DMA_CheckFifoParam>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d008      	beq.n	8001c86 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2240      	movs	r2, #64	; 0x40
 8001c78:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e197      	b.n	8001fb6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f002 fa6e 	bl	8004170 <DMA_CalcBaseAndBitshift>
 8001c94:	4603      	mov	r3, r0
 8001c96:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c9c:	f003 031f 	and.w	r3, r3, #31
 8001ca0:	223f      	movs	r2, #63	; 0x3f
 8001ca2:	409a      	lsls	r2, r3
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	e0cd      	b.n	8001e46 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a3b      	ldr	r2, [pc, #236]	; (8001d9c <HAL_DMA_Init+0x42c>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d022      	beq.n	8001cfa <HAL_DMA_Init+0x38a>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a39      	ldr	r2, [pc, #228]	; (8001da0 <HAL_DMA_Init+0x430>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d01d      	beq.n	8001cfa <HAL_DMA_Init+0x38a>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a38      	ldr	r2, [pc, #224]	; (8001da4 <HAL_DMA_Init+0x434>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d018      	beq.n	8001cfa <HAL_DMA_Init+0x38a>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a36      	ldr	r2, [pc, #216]	; (8001da8 <HAL_DMA_Init+0x438>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d013      	beq.n	8001cfa <HAL_DMA_Init+0x38a>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a35      	ldr	r2, [pc, #212]	; (8001dac <HAL_DMA_Init+0x43c>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d00e      	beq.n	8001cfa <HAL_DMA_Init+0x38a>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a33      	ldr	r2, [pc, #204]	; (8001db0 <HAL_DMA_Init+0x440>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d009      	beq.n	8001cfa <HAL_DMA_Init+0x38a>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a32      	ldr	r2, [pc, #200]	; (8001db4 <HAL_DMA_Init+0x444>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d004      	beq.n	8001cfa <HAL_DMA_Init+0x38a>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a30      	ldr	r2, [pc, #192]	; (8001db8 <HAL_DMA_Init+0x448>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d101      	bne.n	8001cfe <HAL_DMA_Init+0x38e>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <HAL_DMA_Init+0x390>
 8001cfe:	2300      	movs	r3, #0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f000 8097 	beq.w	8001e34 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a24      	ldr	r2, [pc, #144]	; (8001d9c <HAL_DMA_Init+0x42c>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d021      	beq.n	8001d54 <HAL_DMA_Init+0x3e4>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a22      	ldr	r2, [pc, #136]	; (8001da0 <HAL_DMA_Init+0x430>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d01c      	beq.n	8001d54 <HAL_DMA_Init+0x3e4>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a21      	ldr	r2, [pc, #132]	; (8001da4 <HAL_DMA_Init+0x434>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d017      	beq.n	8001d54 <HAL_DMA_Init+0x3e4>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a1f      	ldr	r2, [pc, #124]	; (8001da8 <HAL_DMA_Init+0x438>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d012      	beq.n	8001d54 <HAL_DMA_Init+0x3e4>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a1e      	ldr	r2, [pc, #120]	; (8001dac <HAL_DMA_Init+0x43c>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d00d      	beq.n	8001d54 <HAL_DMA_Init+0x3e4>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a1c      	ldr	r2, [pc, #112]	; (8001db0 <HAL_DMA_Init+0x440>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d008      	beq.n	8001d54 <HAL_DMA_Init+0x3e4>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a1b      	ldr	r2, [pc, #108]	; (8001db4 <HAL_DMA_Init+0x444>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d003      	beq.n	8001d54 <HAL_DMA_Init+0x3e4>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a19      	ldr	r2, [pc, #100]	; (8001db8 <HAL_DMA_Init+0x448>)
 8001d52:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2202      	movs	r2, #2
 8001d58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <HAL_DMA_Init+0x44c>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	2b40      	cmp	r3, #64	; 0x40
 8001d7a:	d021      	beq.n	8001dc0 <HAL_DMA_Init+0x450>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	2b80      	cmp	r3, #128	; 0x80
 8001d82:	d102      	bne.n	8001d8a <HAL_DMA_Init+0x41a>
 8001d84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d88:	e01b      	b.n	8001dc2 <HAL_DMA_Init+0x452>
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	e019      	b.n	8001dc2 <HAL_DMA_Init+0x452>
 8001d8e:	bf00      	nop
 8001d90:	fe10803f 	.word	0xfe10803f
 8001d94:	5c001000 	.word	0x5c001000
 8001d98:	ffff0000 	.word	0xffff0000
 8001d9c:	58025408 	.word	0x58025408
 8001da0:	5802541c 	.word	0x5802541c
 8001da4:	58025430 	.word	0x58025430
 8001da8:	58025444 	.word	0x58025444
 8001dac:	58025458 	.word	0x58025458
 8001db0:	5802546c 	.word	0x5802546c
 8001db4:	58025480 	.word	0x58025480
 8001db8:	58025494 	.word	0x58025494
 8001dbc:	fffe000f 	.word	0xfffe000f
 8001dc0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	68d2      	ldr	r2, [r2, #12]
 8001dc6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001dc8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001dd0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001dd8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001de0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001de8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001df0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	461a      	mov	r2, r3
 8001e06:	4b6e      	ldr	r3, [pc, #440]	; (8001fc0 <HAL_DMA_Init+0x650>)
 8001e08:	4413      	add	r3, r2
 8001e0a:	4a6e      	ldr	r2, [pc, #440]	; (8001fc4 <HAL_DMA_Init+0x654>)
 8001e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e10:	091b      	lsrs	r3, r3, #4
 8001e12:	009a      	lsls	r2, r3, #2
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f002 f9a9 	bl	8004170 <DMA_CalcBaseAndBitshift>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e26:	f003 031f 	and.w	r3, r3, #31
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	409a      	lsls	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	e008      	b.n	8001e46 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2240      	movs	r2, #64	; 0x40
 8001e38:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2203      	movs	r2, #3
 8001e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e0b7      	b.n	8001fb6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a5f      	ldr	r2, [pc, #380]	; (8001fc8 <HAL_DMA_Init+0x658>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d072      	beq.n	8001f36 <HAL_DMA_Init+0x5c6>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a5d      	ldr	r2, [pc, #372]	; (8001fcc <HAL_DMA_Init+0x65c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d06d      	beq.n	8001f36 <HAL_DMA_Init+0x5c6>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a5c      	ldr	r2, [pc, #368]	; (8001fd0 <HAL_DMA_Init+0x660>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d068      	beq.n	8001f36 <HAL_DMA_Init+0x5c6>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a5a      	ldr	r2, [pc, #360]	; (8001fd4 <HAL_DMA_Init+0x664>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d063      	beq.n	8001f36 <HAL_DMA_Init+0x5c6>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a59      	ldr	r2, [pc, #356]	; (8001fd8 <HAL_DMA_Init+0x668>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d05e      	beq.n	8001f36 <HAL_DMA_Init+0x5c6>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a57      	ldr	r2, [pc, #348]	; (8001fdc <HAL_DMA_Init+0x66c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d059      	beq.n	8001f36 <HAL_DMA_Init+0x5c6>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a56      	ldr	r2, [pc, #344]	; (8001fe0 <HAL_DMA_Init+0x670>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d054      	beq.n	8001f36 <HAL_DMA_Init+0x5c6>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a54      	ldr	r2, [pc, #336]	; (8001fe4 <HAL_DMA_Init+0x674>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d04f      	beq.n	8001f36 <HAL_DMA_Init+0x5c6>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a53      	ldr	r2, [pc, #332]	; (8001fe8 <HAL_DMA_Init+0x678>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d04a      	beq.n	8001f36 <HAL_DMA_Init+0x5c6>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a51      	ldr	r2, [pc, #324]	; (8001fec <HAL_DMA_Init+0x67c>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d045      	beq.n	8001f36 <HAL_DMA_Init+0x5c6>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a50      	ldr	r2, [pc, #320]	; (8001ff0 <HAL_DMA_Init+0x680>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d040      	beq.n	8001f36 <HAL_DMA_Init+0x5c6>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a4e      	ldr	r2, [pc, #312]	; (8001ff4 <HAL_DMA_Init+0x684>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d03b      	beq.n	8001f36 <HAL_DMA_Init+0x5c6>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a4d      	ldr	r2, [pc, #308]	; (8001ff8 <HAL_DMA_Init+0x688>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d036      	beq.n	8001f36 <HAL_DMA_Init+0x5c6>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a4b      	ldr	r2, [pc, #300]	; (8001ffc <HAL_DMA_Init+0x68c>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d031      	beq.n	8001f36 <HAL_DMA_Init+0x5c6>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a4a      	ldr	r2, [pc, #296]	; (8002000 <HAL_DMA_Init+0x690>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d02c      	beq.n	8001f36 <HAL_DMA_Init+0x5c6>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a48      	ldr	r2, [pc, #288]	; (8002004 <HAL_DMA_Init+0x694>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d027      	beq.n	8001f36 <HAL_DMA_Init+0x5c6>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a47      	ldr	r2, [pc, #284]	; (8002008 <HAL_DMA_Init+0x698>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d022      	beq.n	8001f36 <HAL_DMA_Init+0x5c6>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a45      	ldr	r2, [pc, #276]	; (800200c <HAL_DMA_Init+0x69c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d01d      	beq.n	8001f36 <HAL_DMA_Init+0x5c6>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a44      	ldr	r2, [pc, #272]	; (8002010 <HAL_DMA_Init+0x6a0>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d018      	beq.n	8001f36 <HAL_DMA_Init+0x5c6>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a42      	ldr	r2, [pc, #264]	; (8002014 <HAL_DMA_Init+0x6a4>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d013      	beq.n	8001f36 <HAL_DMA_Init+0x5c6>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a41      	ldr	r2, [pc, #260]	; (8002018 <HAL_DMA_Init+0x6a8>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d00e      	beq.n	8001f36 <HAL_DMA_Init+0x5c6>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a3f      	ldr	r2, [pc, #252]	; (800201c <HAL_DMA_Init+0x6ac>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d009      	beq.n	8001f36 <HAL_DMA_Init+0x5c6>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a3e      	ldr	r2, [pc, #248]	; (8002020 <HAL_DMA_Init+0x6b0>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d004      	beq.n	8001f36 <HAL_DMA_Init+0x5c6>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a3c      	ldr	r2, [pc, #240]	; (8002024 <HAL_DMA_Init+0x6b4>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d101      	bne.n	8001f3a <HAL_DMA_Init+0x5ca>
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <HAL_DMA_Init+0x5cc>
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d032      	beq.n	8001fa6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f002 fa43 	bl	80043cc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	2b80      	cmp	r3, #128	; 0x80
 8001f4c:	d102      	bne.n	8001f54 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001f68:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d010      	beq.n	8001f94 <HAL_DMA_Init+0x624>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b08      	cmp	r3, #8
 8001f78:	d80c      	bhi.n	8001f94 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f002 fac0 	bl	8004500 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	e008      	b.n	8001fa6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3718      	adds	r7, #24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	a7fdabf8 	.word	0xa7fdabf8
 8001fc4:	cccccccd 	.word	0xcccccccd
 8001fc8:	40020010 	.word	0x40020010
 8001fcc:	40020028 	.word	0x40020028
 8001fd0:	40020040 	.word	0x40020040
 8001fd4:	40020058 	.word	0x40020058
 8001fd8:	40020070 	.word	0x40020070
 8001fdc:	40020088 	.word	0x40020088
 8001fe0:	400200a0 	.word	0x400200a0
 8001fe4:	400200b8 	.word	0x400200b8
 8001fe8:	40020410 	.word	0x40020410
 8001fec:	40020428 	.word	0x40020428
 8001ff0:	40020440 	.word	0x40020440
 8001ff4:	40020458 	.word	0x40020458
 8001ff8:	40020470 	.word	0x40020470
 8001ffc:	40020488 	.word	0x40020488
 8002000:	400204a0 	.word	0x400204a0
 8002004:	400204b8 	.word	0x400204b8
 8002008:	58025408 	.word	0x58025408
 800200c:	5802541c 	.word	0x5802541c
 8002010:	58025430 	.word	0x58025430
 8002014:	58025444 	.word	0x58025444
 8002018:	58025458 	.word	0x58025458
 800201c:	5802546c 	.word	0x5802546c
 8002020:	58025480 	.word	0x58025480
 8002024:	58025494 	.word	0x58025494

08002028 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
 8002034:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002036:	2300      	movs	r3, #0
 8002038:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e226      	b.n	8002492 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800204a:	2b01      	cmp	r3, #1
 800204c:	d101      	bne.n	8002052 <HAL_DMA_Start_IT+0x2a>
 800204e:	2302      	movs	r3, #2
 8002050:	e21f      	b.n	8002492 <HAL_DMA_Start_IT+0x46a>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b01      	cmp	r3, #1
 8002064:	f040 820a 	bne.w	800247c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2202      	movs	r2, #2
 800206c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a68      	ldr	r2, [pc, #416]	; (800221c <HAL_DMA_Start_IT+0x1f4>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d04a      	beq.n	8002116 <HAL_DMA_Start_IT+0xee>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a66      	ldr	r2, [pc, #408]	; (8002220 <HAL_DMA_Start_IT+0x1f8>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d045      	beq.n	8002116 <HAL_DMA_Start_IT+0xee>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a65      	ldr	r2, [pc, #404]	; (8002224 <HAL_DMA_Start_IT+0x1fc>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d040      	beq.n	8002116 <HAL_DMA_Start_IT+0xee>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a63      	ldr	r2, [pc, #396]	; (8002228 <HAL_DMA_Start_IT+0x200>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d03b      	beq.n	8002116 <HAL_DMA_Start_IT+0xee>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a62      	ldr	r2, [pc, #392]	; (800222c <HAL_DMA_Start_IT+0x204>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d036      	beq.n	8002116 <HAL_DMA_Start_IT+0xee>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a60      	ldr	r2, [pc, #384]	; (8002230 <HAL_DMA_Start_IT+0x208>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d031      	beq.n	8002116 <HAL_DMA_Start_IT+0xee>
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a5f      	ldr	r2, [pc, #380]	; (8002234 <HAL_DMA_Start_IT+0x20c>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d02c      	beq.n	8002116 <HAL_DMA_Start_IT+0xee>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a5d      	ldr	r2, [pc, #372]	; (8002238 <HAL_DMA_Start_IT+0x210>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d027      	beq.n	8002116 <HAL_DMA_Start_IT+0xee>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a5c      	ldr	r2, [pc, #368]	; (800223c <HAL_DMA_Start_IT+0x214>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d022      	beq.n	8002116 <HAL_DMA_Start_IT+0xee>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a5a      	ldr	r2, [pc, #360]	; (8002240 <HAL_DMA_Start_IT+0x218>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d01d      	beq.n	8002116 <HAL_DMA_Start_IT+0xee>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a59      	ldr	r2, [pc, #356]	; (8002244 <HAL_DMA_Start_IT+0x21c>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d018      	beq.n	8002116 <HAL_DMA_Start_IT+0xee>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a57      	ldr	r2, [pc, #348]	; (8002248 <HAL_DMA_Start_IT+0x220>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d013      	beq.n	8002116 <HAL_DMA_Start_IT+0xee>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a56      	ldr	r2, [pc, #344]	; (800224c <HAL_DMA_Start_IT+0x224>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d00e      	beq.n	8002116 <HAL_DMA_Start_IT+0xee>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a54      	ldr	r2, [pc, #336]	; (8002250 <HAL_DMA_Start_IT+0x228>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d009      	beq.n	8002116 <HAL_DMA_Start_IT+0xee>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a53      	ldr	r2, [pc, #332]	; (8002254 <HAL_DMA_Start_IT+0x22c>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d004      	beq.n	8002116 <HAL_DMA_Start_IT+0xee>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a51      	ldr	r2, [pc, #324]	; (8002258 <HAL_DMA_Start_IT+0x230>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d108      	bne.n	8002128 <HAL_DMA_Start_IT+0x100>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 0201 	bic.w	r2, r2, #1
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	e007      	b.n	8002138 <HAL_DMA_Start_IT+0x110>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 0201 	bic.w	r2, r2, #1
 8002136:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	68b9      	ldr	r1, [r7, #8]
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f001 fe6a 	bl	8003e18 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a34      	ldr	r2, [pc, #208]	; (800221c <HAL_DMA_Start_IT+0x1f4>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d04a      	beq.n	80021e4 <HAL_DMA_Start_IT+0x1bc>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a33      	ldr	r2, [pc, #204]	; (8002220 <HAL_DMA_Start_IT+0x1f8>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d045      	beq.n	80021e4 <HAL_DMA_Start_IT+0x1bc>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a31      	ldr	r2, [pc, #196]	; (8002224 <HAL_DMA_Start_IT+0x1fc>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d040      	beq.n	80021e4 <HAL_DMA_Start_IT+0x1bc>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a30      	ldr	r2, [pc, #192]	; (8002228 <HAL_DMA_Start_IT+0x200>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d03b      	beq.n	80021e4 <HAL_DMA_Start_IT+0x1bc>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a2e      	ldr	r2, [pc, #184]	; (800222c <HAL_DMA_Start_IT+0x204>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d036      	beq.n	80021e4 <HAL_DMA_Start_IT+0x1bc>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a2d      	ldr	r2, [pc, #180]	; (8002230 <HAL_DMA_Start_IT+0x208>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d031      	beq.n	80021e4 <HAL_DMA_Start_IT+0x1bc>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a2b      	ldr	r2, [pc, #172]	; (8002234 <HAL_DMA_Start_IT+0x20c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d02c      	beq.n	80021e4 <HAL_DMA_Start_IT+0x1bc>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a2a      	ldr	r2, [pc, #168]	; (8002238 <HAL_DMA_Start_IT+0x210>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d027      	beq.n	80021e4 <HAL_DMA_Start_IT+0x1bc>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a28      	ldr	r2, [pc, #160]	; (800223c <HAL_DMA_Start_IT+0x214>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d022      	beq.n	80021e4 <HAL_DMA_Start_IT+0x1bc>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a27      	ldr	r2, [pc, #156]	; (8002240 <HAL_DMA_Start_IT+0x218>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d01d      	beq.n	80021e4 <HAL_DMA_Start_IT+0x1bc>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a25      	ldr	r2, [pc, #148]	; (8002244 <HAL_DMA_Start_IT+0x21c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d018      	beq.n	80021e4 <HAL_DMA_Start_IT+0x1bc>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a24      	ldr	r2, [pc, #144]	; (8002248 <HAL_DMA_Start_IT+0x220>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d013      	beq.n	80021e4 <HAL_DMA_Start_IT+0x1bc>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a22      	ldr	r2, [pc, #136]	; (800224c <HAL_DMA_Start_IT+0x224>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d00e      	beq.n	80021e4 <HAL_DMA_Start_IT+0x1bc>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a21      	ldr	r2, [pc, #132]	; (8002250 <HAL_DMA_Start_IT+0x228>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d009      	beq.n	80021e4 <HAL_DMA_Start_IT+0x1bc>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a1f      	ldr	r2, [pc, #124]	; (8002254 <HAL_DMA_Start_IT+0x22c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d004      	beq.n	80021e4 <HAL_DMA_Start_IT+0x1bc>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a1e      	ldr	r2, [pc, #120]	; (8002258 <HAL_DMA_Start_IT+0x230>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d101      	bne.n	80021e8 <HAL_DMA_Start_IT+0x1c0>
 80021e4:	2301      	movs	r3, #1
 80021e6:	e000      	b.n	80021ea <HAL_DMA_Start_IT+0x1c2>
 80021e8:	2300      	movs	r3, #0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d036      	beq.n	800225c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f023 021e 	bic.w	r2, r3, #30
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f042 0216 	orr.w	r2, r2, #22
 8002200:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	2b00      	cmp	r3, #0
 8002208:	d03e      	beq.n	8002288 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f042 0208 	orr.w	r2, r2, #8
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	e035      	b.n	8002288 <HAL_DMA_Start_IT+0x260>
 800221c:	40020010 	.word	0x40020010
 8002220:	40020028 	.word	0x40020028
 8002224:	40020040 	.word	0x40020040
 8002228:	40020058 	.word	0x40020058
 800222c:	40020070 	.word	0x40020070
 8002230:	40020088 	.word	0x40020088
 8002234:	400200a0 	.word	0x400200a0
 8002238:	400200b8 	.word	0x400200b8
 800223c:	40020410 	.word	0x40020410
 8002240:	40020428 	.word	0x40020428
 8002244:	40020440 	.word	0x40020440
 8002248:	40020458 	.word	0x40020458
 800224c:	40020470 	.word	0x40020470
 8002250:	40020488 	.word	0x40020488
 8002254:	400204a0 	.word	0x400204a0
 8002258:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f023 020e 	bic.w	r2, r3, #14
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 020a 	orr.w	r2, r2, #10
 800226e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	2b00      	cmp	r3, #0
 8002276:	d007      	beq.n	8002288 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 0204 	orr.w	r2, r2, #4
 8002286:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a83      	ldr	r2, [pc, #524]	; (800249c <HAL_DMA_Start_IT+0x474>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d072      	beq.n	8002378 <HAL_DMA_Start_IT+0x350>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a82      	ldr	r2, [pc, #520]	; (80024a0 <HAL_DMA_Start_IT+0x478>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d06d      	beq.n	8002378 <HAL_DMA_Start_IT+0x350>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a80      	ldr	r2, [pc, #512]	; (80024a4 <HAL_DMA_Start_IT+0x47c>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d068      	beq.n	8002378 <HAL_DMA_Start_IT+0x350>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a7f      	ldr	r2, [pc, #508]	; (80024a8 <HAL_DMA_Start_IT+0x480>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d063      	beq.n	8002378 <HAL_DMA_Start_IT+0x350>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a7d      	ldr	r2, [pc, #500]	; (80024ac <HAL_DMA_Start_IT+0x484>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d05e      	beq.n	8002378 <HAL_DMA_Start_IT+0x350>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a7c      	ldr	r2, [pc, #496]	; (80024b0 <HAL_DMA_Start_IT+0x488>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d059      	beq.n	8002378 <HAL_DMA_Start_IT+0x350>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a7a      	ldr	r2, [pc, #488]	; (80024b4 <HAL_DMA_Start_IT+0x48c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d054      	beq.n	8002378 <HAL_DMA_Start_IT+0x350>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a79      	ldr	r2, [pc, #484]	; (80024b8 <HAL_DMA_Start_IT+0x490>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d04f      	beq.n	8002378 <HAL_DMA_Start_IT+0x350>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a77      	ldr	r2, [pc, #476]	; (80024bc <HAL_DMA_Start_IT+0x494>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d04a      	beq.n	8002378 <HAL_DMA_Start_IT+0x350>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a76      	ldr	r2, [pc, #472]	; (80024c0 <HAL_DMA_Start_IT+0x498>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d045      	beq.n	8002378 <HAL_DMA_Start_IT+0x350>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a74      	ldr	r2, [pc, #464]	; (80024c4 <HAL_DMA_Start_IT+0x49c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d040      	beq.n	8002378 <HAL_DMA_Start_IT+0x350>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a73      	ldr	r2, [pc, #460]	; (80024c8 <HAL_DMA_Start_IT+0x4a0>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d03b      	beq.n	8002378 <HAL_DMA_Start_IT+0x350>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a71      	ldr	r2, [pc, #452]	; (80024cc <HAL_DMA_Start_IT+0x4a4>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d036      	beq.n	8002378 <HAL_DMA_Start_IT+0x350>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a70      	ldr	r2, [pc, #448]	; (80024d0 <HAL_DMA_Start_IT+0x4a8>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d031      	beq.n	8002378 <HAL_DMA_Start_IT+0x350>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a6e      	ldr	r2, [pc, #440]	; (80024d4 <HAL_DMA_Start_IT+0x4ac>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d02c      	beq.n	8002378 <HAL_DMA_Start_IT+0x350>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a6d      	ldr	r2, [pc, #436]	; (80024d8 <HAL_DMA_Start_IT+0x4b0>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d027      	beq.n	8002378 <HAL_DMA_Start_IT+0x350>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a6b      	ldr	r2, [pc, #428]	; (80024dc <HAL_DMA_Start_IT+0x4b4>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d022      	beq.n	8002378 <HAL_DMA_Start_IT+0x350>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a6a      	ldr	r2, [pc, #424]	; (80024e0 <HAL_DMA_Start_IT+0x4b8>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d01d      	beq.n	8002378 <HAL_DMA_Start_IT+0x350>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a68      	ldr	r2, [pc, #416]	; (80024e4 <HAL_DMA_Start_IT+0x4bc>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d018      	beq.n	8002378 <HAL_DMA_Start_IT+0x350>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a67      	ldr	r2, [pc, #412]	; (80024e8 <HAL_DMA_Start_IT+0x4c0>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d013      	beq.n	8002378 <HAL_DMA_Start_IT+0x350>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a65      	ldr	r2, [pc, #404]	; (80024ec <HAL_DMA_Start_IT+0x4c4>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d00e      	beq.n	8002378 <HAL_DMA_Start_IT+0x350>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a64      	ldr	r2, [pc, #400]	; (80024f0 <HAL_DMA_Start_IT+0x4c8>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d009      	beq.n	8002378 <HAL_DMA_Start_IT+0x350>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a62      	ldr	r2, [pc, #392]	; (80024f4 <HAL_DMA_Start_IT+0x4cc>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d004      	beq.n	8002378 <HAL_DMA_Start_IT+0x350>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a61      	ldr	r2, [pc, #388]	; (80024f8 <HAL_DMA_Start_IT+0x4d0>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d101      	bne.n	800237c <HAL_DMA_Start_IT+0x354>
 8002378:	2301      	movs	r3, #1
 800237a:	e000      	b.n	800237e <HAL_DMA_Start_IT+0x356>
 800237c:	2300      	movs	r3, #0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d01a      	beq.n	80023b8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d007      	beq.n	80023a0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800239a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800239e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d007      	beq.n	80023b8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023b6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a37      	ldr	r2, [pc, #220]	; (800249c <HAL_DMA_Start_IT+0x474>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d04a      	beq.n	8002458 <HAL_DMA_Start_IT+0x430>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a36      	ldr	r2, [pc, #216]	; (80024a0 <HAL_DMA_Start_IT+0x478>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d045      	beq.n	8002458 <HAL_DMA_Start_IT+0x430>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a34      	ldr	r2, [pc, #208]	; (80024a4 <HAL_DMA_Start_IT+0x47c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d040      	beq.n	8002458 <HAL_DMA_Start_IT+0x430>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a33      	ldr	r2, [pc, #204]	; (80024a8 <HAL_DMA_Start_IT+0x480>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d03b      	beq.n	8002458 <HAL_DMA_Start_IT+0x430>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a31      	ldr	r2, [pc, #196]	; (80024ac <HAL_DMA_Start_IT+0x484>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d036      	beq.n	8002458 <HAL_DMA_Start_IT+0x430>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a30      	ldr	r2, [pc, #192]	; (80024b0 <HAL_DMA_Start_IT+0x488>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d031      	beq.n	8002458 <HAL_DMA_Start_IT+0x430>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a2e      	ldr	r2, [pc, #184]	; (80024b4 <HAL_DMA_Start_IT+0x48c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d02c      	beq.n	8002458 <HAL_DMA_Start_IT+0x430>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a2d      	ldr	r2, [pc, #180]	; (80024b8 <HAL_DMA_Start_IT+0x490>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d027      	beq.n	8002458 <HAL_DMA_Start_IT+0x430>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a2b      	ldr	r2, [pc, #172]	; (80024bc <HAL_DMA_Start_IT+0x494>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d022      	beq.n	8002458 <HAL_DMA_Start_IT+0x430>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a2a      	ldr	r2, [pc, #168]	; (80024c0 <HAL_DMA_Start_IT+0x498>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d01d      	beq.n	8002458 <HAL_DMA_Start_IT+0x430>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a28      	ldr	r2, [pc, #160]	; (80024c4 <HAL_DMA_Start_IT+0x49c>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d018      	beq.n	8002458 <HAL_DMA_Start_IT+0x430>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a27      	ldr	r2, [pc, #156]	; (80024c8 <HAL_DMA_Start_IT+0x4a0>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d013      	beq.n	8002458 <HAL_DMA_Start_IT+0x430>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a25      	ldr	r2, [pc, #148]	; (80024cc <HAL_DMA_Start_IT+0x4a4>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d00e      	beq.n	8002458 <HAL_DMA_Start_IT+0x430>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a24      	ldr	r2, [pc, #144]	; (80024d0 <HAL_DMA_Start_IT+0x4a8>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d009      	beq.n	8002458 <HAL_DMA_Start_IT+0x430>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a22      	ldr	r2, [pc, #136]	; (80024d4 <HAL_DMA_Start_IT+0x4ac>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d004      	beq.n	8002458 <HAL_DMA_Start_IT+0x430>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a21      	ldr	r2, [pc, #132]	; (80024d8 <HAL_DMA_Start_IT+0x4b0>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d108      	bne.n	800246a <HAL_DMA_Start_IT+0x442>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0201 	orr.w	r2, r2, #1
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	e012      	b.n	8002490 <HAL_DMA_Start_IT+0x468>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f042 0201 	orr.w	r2, r2, #1
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	e009      	b.n	8002490 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002482:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002490:	7dfb      	ldrb	r3, [r7, #23]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3718      	adds	r7, #24
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40020010 	.word	0x40020010
 80024a0:	40020028 	.word	0x40020028
 80024a4:	40020040 	.word	0x40020040
 80024a8:	40020058 	.word	0x40020058
 80024ac:	40020070 	.word	0x40020070
 80024b0:	40020088 	.word	0x40020088
 80024b4:	400200a0 	.word	0x400200a0
 80024b8:	400200b8 	.word	0x400200b8
 80024bc:	40020410 	.word	0x40020410
 80024c0:	40020428 	.word	0x40020428
 80024c4:	40020440 	.word	0x40020440
 80024c8:	40020458 	.word	0x40020458
 80024cc:	40020470 	.word	0x40020470
 80024d0:	40020488 	.word	0x40020488
 80024d4:	400204a0 	.word	0x400204a0
 80024d8:	400204b8 	.word	0x400204b8
 80024dc:	58025408 	.word	0x58025408
 80024e0:	5802541c 	.word	0x5802541c
 80024e4:	58025430 	.word	0x58025430
 80024e8:	58025444 	.word	0x58025444
 80024ec:	58025458 	.word	0x58025458
 80024f0:	5802546c 	.word	0x5802546c
 80024f4:	58025480 	.word	0x58025480
 80024f8:	58025494 	.word	0x58025494

080024fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002504:	f7ff f8e8 	bl	80016d8 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e2dc      	b.n	8002ace <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d008      	beq.n	8002532 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2280      	movs	r2, #128	; 0x80
 8002524:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e2cd      	b.n	8002ace <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a76      	ldr	r2, [pc, #472]	; (8002710 <HAL_DMA_Abort+0x214>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d04a      	beq.n	80025d2 <HAL_DMA_Abort+0xd6>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a74      	ldr	r2, [pc, #464]	; (8002714 <HAL_DMA_Abort+0x218>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d045      	beq.n	80025d2 <HAL_DMA_Abort+0xd6>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a73      	ldr	r2, [pc, #460]	; (8002718 <HAL_DMA_Abort+0x21c>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d040      	beq.n	80025d2 <HAL_DMA_Abort+0xd6>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a71      	ldr	r2, [pc, #452]	; (800271c <HAL_DMA_Abort+0x220>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d03b      	beq.n	80025d2 <HAL_DMA_Abort+0xd6>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a70      	ldr	r2, [pc, #448]	; (8002720 <HAL_DMA_Abort+0x224>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d036      	beq.n	80025d2 <HAL_DMA_Abort+0xd6>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a6e      	ldr	r2, [pc, #440]	; (8002724 <HAL_DMA_Abort+0x228>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d031      	beq.n	80025d2 <HAL_DMA_Abort+0xd6>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a6d      	ldr	r2, [pc, #436]	; (8002728 <HAL_DMA_Abort+0x22c>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d02c      	beq.n	80025d2 <HAL_DMA_Abort+0xd6>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a6b      	ldr	r2, [pc, #428]	; (800272c <HAL_DMA_Abort+0x230>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d027      	beq.n	80025d2 <HAL_DMA_Abort+0xd6>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a6a      	ldr	r2, [pc, #424]	; (8002730 <HAL_DMA_Abort+0x234>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d022      	beq.n	80025d2 <HAL_DMA_Abort+0xd6>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a68      	ldr	r2, [pc, #416]	; (8002734 <HAL_DMA_Abort+0x238>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d01d      	beq.n	80025d2 <HAL_DMA_Abort+0xd6>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a67      	ldr	r2, [pc, #412]	; (8002738 <HAL_DMA_Abort+0x23c>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d018      	beq.n	80025d2 <HAL_DMA_Abort+0xd6>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a65      	ldr	r2, [pc, #404]	; (800273c <HAL_DMA_Abort+0x240>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d013      	beq.n	80025d2 <HAL_DMA_Abort+0xd6>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a64      	ldr	r2, [pc, #400]	; (8002740 <HAL_DMA_Abort+0x244>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d00e      	beq.n	80025d2 <HAL_DMA_Abort+0xd6>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a62      	ldr	r2, [pc, #392]	; (8002744 <HAL_DMA_Abort+0x248>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d009      	beq.n	80025d2 <HAL_DMA_Abort+0xd6>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a61      	ldr	r2, [pc, #388]	; (8002748 <HAL_DMA_Abort+0x24c>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d004      	beq.n	80025d2 <HAL_DMA_Abort+0xd6>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a5f      	ldr	r2, [pc, #380]	; (800274c <HAL_DMA_Abort+0x250>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d101      	bne.n	80025d6 <HAL_DMA_Abort+0xda>
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <HAL_DMA_Abort+0xdc>
 80025d6:	2300      	movs	r3, #0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d013      	beq.n	8002604 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 021e 	bic.w	r2, r2, #30
 80025ea:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	695a      	ldr	r2, [r3, #20]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025fa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	e00a      	b.n	800261a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 020e 	bic.w	r2, r2, #14
 8002612:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a3c      	ldr	r2, [pc, #240]	; (8002710 <HAL_DMA_Abort+0x214>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d072      	beq.n	800270a <HAL_DMA_Abort+0x20e>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a3a      	ldr	r2, [pc, #232]	; (8002714 <HAL_DMA_Abort+0x218>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d06d      	beq.n	800270a <HAL_DMA_Abort+0x20e>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a39      	ldr	r2, [pc, #228]	; (8002718 <HAL_DMA_Abort+0x21c>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d068      	beq.n	800270a <HAL_DMA_Abort+0x20e>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a37      	ldr	r2, [pc, #220]	; (800271c <HAL_DMA_Abort+0x220>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d063      	beq.n	800270a <HAL_DMA_Abort+0x20e>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a36      	ldr	r2, [pc, #216]	; (8002720 <HAL_DMA_Abort+0x224>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d05e      	beq.n	800270a <HAL_DMA_Abort+0x20e>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a34      	ldr	r2, [pc, #208]	; (8002724 <HAL_DMA_Abort+0x228>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d059      	beq.n	800270a <HAL_DMA_Abort+0x20e>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a33      	ldr	r2, [pc, #204]	; (8002728 <HAL_DMA_Abort+0x22c>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d054      	beq.n	800270a <HAL_DMA_Abort+0x20e>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a31      	ldr	r2, [pc, #196]	; (800272c <HAL_DMA_Abort+0x230>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d04f      	beq.n	800270a <HAL_DMA_Abort+0x20e>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a30      	ldr	r2, [pc, #192]	; (8002730 <HAL_DMA_Abort+0x234>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d04a      	beq.n	800270a <HAL_DMA_Abort+0x20e>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a2e      	ldr	r2, [pc, #184]	; (8002734 <HAL_DMA_Abort+0x238>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d045      	beq.n	800270a <HAL_DMA_Abort+0x20e>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a2d      	ldr	r2, [pc, #180]	; (8002738 <HAL_DMA_Abort+0x23c>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d040      	beq.n	800270a <HAL_DMA_Abort+0x20e>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a2b      	ldr	r2, [pc, #172]	; (800273c <HAL_DMA_Abort+0x240>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d03b      	beq.n	800270a <HAL_DMA_Abort+0x20e>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a2a      	ldr	r2, [pc, #168]	; (8002740 <HAL_DMA_Abort+0x244>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d036      	beq.n	800270a <HAL_DMA_Abort+0x20e>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a28      	ldr	r2, [pc, #160]	; (8002744 <HAL_DMA_Abort+0x248>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d031      	beq.n	800270a <HAL_DMA_Abort+0x20e>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a27      	ldr	r2, [pc, #156]	; (8002748 <HAL_DMA_Abort+0x24c>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d02c      	beq.n	800270a <HAL_DMA_Abort+0x20e>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a25      	ldr	r2, [pc, #148]	; (800274c <HAL_DMA_Abort+0x250>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d027      	beq.n	800270a <HAL_DMA_Abort+0x20e>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a24      	ldr	r2, [pc, #144]	; (8002750 <HAL_DMA_Abort+0x254>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d022      	beq.n	800270a <HAL_DMA_Abort+0x20e>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a22      	ldr	r2, [pc, #136]	; (8002754 <HAL_DMA_Abort+0x258>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d01d      	beq.n	800270a <HAL_DMA_Abort+0x20e>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a21      	ldr	r2, [pc, #132]	; (8002758 <HAL_DMA_Abort+0x25c>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d018      	beq.n	800270a <HAL_DMA_Abort+0x20e>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a1f      	ldr	r2, [pc, #124]	; (800275c <HAL_DMA_Abort+0x260>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d013      	beq.n	800270a <HAL_DMA_Abort+0x20e>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a1e      	ldr	r2, [pc, #120]	; (8002760 <HAL_DMA_Abort+0x264>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d00e      	beq.n	800270a <HAL_DMA_Abort+0x20e>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a1c      	ldr	r2, [pc, #112]	; (8002764 <HAL_DMA_Abort+0x268>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d009      	beq.n	800270a <HAL_DMA_Abort+0x20e>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a1b      	ldr	r2, [pc, #108]	; (8002768 <HAL_DMA_Abort+0x26c>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d004      	beq.n	800270a <HAL_DMA_Abort+0x20e>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a19      	ldr	r2, [pc, #100]	; (800276c <HAL_DMA_Abort+0x270>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d132      	bne.n	8002770 <HAL_DMA_Abort+0x274>
 800270a:	2301      	movs	r3, #1
 800270c:	e031      	b.n	8002772 <HAL_DMA_Abort+0x276>
 800270e:	bf00      	nop
 8002710:	40020010 	.word	0x40020010
 8002714:	40020028 	.word	0x40020028
 8002718:	40020040 	.word	0x40020040
 800271c:	40020058 	.word	0x40020058
 8002720:	40020070 	.word	0x40020070
 8002724:	40020088 	.word	0x40020088
 8002728:	400200a0 	.word	0x400200a0
 800272c:	400200b8 	.word	0x400200b8
 8002730:	40020410 	.word	0x40020410
 8002734:	40020428 	.word	0x40020428
 8002738:	40020440 	.word	0x40020440
 800273c:	40020458 	.word	0x40020458
 8002740:	40020470 	.word	0x40020470
 8002744:	40020488 	.word	0x40020488
 8002748:	400204a0 	.word	0x400204a0
 800274c:	400204b8 	.word	0x400204b8
 8002750:	58025408 	.word	0x58025408
 8002754:	5802541c 	.word	0x5802541c
 8002758:	58025430 	.word	0x58025430
 800275c:	58025444 	.word	0x58025444
 8002760:	58025458 	.word	0x58025458
 8002764:	5802546c 	.word	0x5802546c
 8002768:	58025480 	.word	0x58025480
 800276c:	58025494 	.word	0x58025494
 8002770:	2300      	movs	r3, #0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d007      	beq.n	8002786 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002780:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002784:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a6d      	ldr	r2, [pc, #436]	; (8002940 <HAL_DMA_Abort+0x444>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d04a      	beq.n	8002826 <HAL_DMA_Abort+0x32a>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a6b      	ldr	r2, [pc, #428]	; (8002944 <HAL_DMA_Abort+0x448>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d045      	beq.n	8002826 <HAL_DMA_Abort+0x32a>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a6a      	ldr	r2, [pc, #424]	; (8002948 <HAL_DMA_Abort+0x44c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d040      	beq.n	8002826 <HAL_DMA_Abort+0x32a>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a68      	ldr	r2, [pc, #416]	; (800294c <HAL_DMA_Abort+0x450>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d03b      	beq.n	8002826 <HAL_DMA_Abort+0x32a>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a67      	ldr	r2, [pc, #412]	; (8002950 <HAL_DMA_Abort+0x454>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d036      	beq.n	8002826 <HAL_DMA_Abort+0x32a>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a65      	ldr	r2, [pc, #404]	; (8002954 <HAL_DMA_Abort+0x458>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d031      	beq.n	8002826 <HAL_DMA_Abort+0x32a>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a64      	ldr	r2, [pc, #400]	; (8002958 <HAL_DMA_Abort+0x45c>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d02c      	beq.n	8002826 <HAL_DMA_Abort+0x32a>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a62      	ldr	r2, [pc, #392]	; (800295c <HAL_DMA_Abort+0x460>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d027      	beq.n	8002826 <HAL_DMA_Abort+0x32a>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a61      	ldr	r2, [pc, #388]	; (8002960 <HAL_DMA_Abort+0x464>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d022      	beq.n	8002826 <HAL_DMA_Abort+0x32a>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a5f      	ldr	r2, [pc, #380]	; (8002964 <HAL_DMA_Abort+0x468>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d01d      	beq.n	8002826 <HAL_DMA_Abort+0x32a>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a5e      	ldr	r2, [pc, #376]	; (8002968 <HAL_DMA_Abort+0x46c>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d018      	beq.n	8002826 <HAL_DMA_Abort+0x32a>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a5c      	ldr	r2, [pc, #368]	; (800296c <HAL_DMA_Abort+0x470>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d013      	beq.n	8002826 <HAL_DMA_Abort+0x32a>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a5b      	ldr	r2, [pc, #364]	; (8002970 <HAL_DMA_Abort+0x474>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d00e      	beq.n	8002826 <HAL_DMA_Abort+0x32a>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a59      	ldr	r2, [pc, #356]	; (8002974 <HAL_DMA_Abort+0x478>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d009      	beq.n	8002826 <HAL_DMA_Abort+0x32a>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a58      	ldr	r2, [pc, #352]	; (8002978 <HAL_DMA_Abort+0x47c>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d004      	beq.n	8002826 <HAL_DMA_Abort+0x32a>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a56      	ldr	r2, [pc, #344]	; (800297c <HAL_DMA_Abort+0x480>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d108      	bne.n	8002838 <HAL_DMA_Abort+0x33c>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0201 	bic.w	r2, r2, #1
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	e007      	b.n	8002848 <HAL_DMA_Abort+0x34c>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 0201 	bic.w	r2, r2, #1
 8002846:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002848:	e013      	b.n	8002872 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800284a:	f7fe ff45 	bl	80016d8 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b05      	cmp	r3, #5
 8002856:	d90c      	bls.n	8002872 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2220      	movs	r2, #32
 800285c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2203      	movs	r2, #3
 8002862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e12d      	b.n	8002ace <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1e5      	bne.n	800284a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a2f      	ldr	r2, [pc, #188]	; (8002940 <HAL_DMA_Abort+0x444>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d04a      	beq.n	800291e <HAL_DMA_Abort+0x422>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a2d      	ldr	r2, [pc, #180]	; (8002944 <HAL_DMA_Abort+0x448>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d045      	beq.n	800291e <HAL_DMA_Abort+0x422>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a2c      	ldr	r2, [pc, #176]	; (8002948 <HAL_DMA_Abort+0x44c>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d040      	beq.n	800291e <HAL_DMA_Abort+0x422>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a2a      	ldr	r2, [pc, #168]	; (800294c <HAL_DMA_Abort+0x450>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d03b      	beq.n	800291e <HAL_DMA_Abort+0x422>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a29      	ldr	r2, [pc, #164]	; (8002950 <HAL_DMA_Abort+0x454>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d036      	beq.n	800291e <HAL_DMA_Abort+0x422>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a27      	ldr	r2, [pc, #156]	; (8002954 <HAL_DMA_Abort+0x458>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d031      	beq.n	800291e <HAL_DMA_Abort+0x422>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a26      	ldr	r2, [pc, #152]	; (8002958 <HAL_DMA_Abort+0x45c>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d02c      	beq.n	800291e <HAL_DMA_Abort+0x422>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a24      	ldr	r2, [pc, #144]	; (800295c <HAL_DMA_Abort+0x460>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d027      	beq.n	800291e <HAL_DMA_Abort+0x422>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a23      	ldr	r2, [pc, #140]	; (8002960 <HAL_DMA_Abort+0x464>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d022      	beq.n	800291e <HAL_DMA_Abort+0x422>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a21      	ldr	r2, [pc, #132]	; (8002964 <HAL_DMA_Abort+0x468>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d01d      	beq.n	800291e <HAL_DMA_Abort+0x422>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a20      	ldr	r2, [pc, #128]	; (8002968 <HAL_DMA_Abort+0x46c>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d018      	beq.n	800291e <HAL_DMA_Abort+0x422>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a1e      	ldr	r2, [pc, #120]	; (800296c <HAL_DMA_Abort+0x470>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d013      	beq.n	800291e <HAL_DMA_Abort+0x422>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a1d      	ldr	r2, [pc, #116]	; (8002970 <HAL_DMA_Abort+0x474>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d00e      	beq.n	800291e <HAL_DMA_Abort+0x422>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a1b      	ldr	r2, [pc, #108]	; (8002974 <HAL_DMA_Abort+0x478>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d009      	beq.n	800291e <HAL_DMA_Abort+0x422>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a1a      	ldr	r2, [pc, #104]	; (8002978 <HAL_DMA_Abort+0x47c>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d004      	beq.n	800291e <HAL_DMA_Abort+0x422>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a18      	ldr	r2, [pc, #96]	; (800297c <HAL_DMA_Abort+0x480>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d101      	bne.n	8002922 <HAL_DMA_Abort+0x426>
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <HAL_DMA_Abort+0x428>
 8002922:	2300      	movs	r3, #0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d02b      	beq.n	8002980 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002932:	f003 031f 	and.w	r3, r3, #31
 8002936:	223f      	movs	r2, #63	; 0x3f
 8002938:	409a      	lsls	r2, r3
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	609a      	str	r2, [r3, #8]
 800293e:	e02a      	b.n	8002996 <HAL_DMA_Abort+0x49a>
 8002940:	40020010 	.word	0x40020010
 8002944:	40020028 	.word	0x40020028
 8002948:	40020040 	.word	0x40020040
 800294c:	40020058 	.word	0x40020058
 8002950:	40020070 	.word	0x40020070
 8002954:	40020088 	.word	0x40020088
 8002958:	400200a0 	.word	0x400200a0
 800295c:	400200b8 	.word	0x400200b8
 8002960:	40020410 	.word	0x40020410
 8002964:	40020428 	.word	0x40020428
 8002968:	40020440 	.word	0x40020440
 800296c:	40020458 	.word	0x40020458
 8002970:	40020470 	.word	0x40020470
 8002974:	40020488 	.word	0x40020488
 8002978:	400204a0 	.word	0x400204a0
 800297c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002984:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298a:	f003 031f 	and.w	r3, r3, #31
 800298e:	2201      	movs	r2, #1
 8002990:	409a      	lsls	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a4f      	ldr	r2, [pc, #316]	; (8002ad8 <HAL_DMA_Abort+0x5dc>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d072      	beq.n	8002a86 <HAL_DMA_Abort+0x58a>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a4d      	ldr	r2, [pc, #308]	; (8002adc <HAL_DMA_Abort+0x5e0>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d06d      	beq.n	8002a86 <HAL_DMA_Abort+0x58a>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a4c      	ldr	r2, [pc, #304]	; (8002ae0 <HAL_DMA_Abort+0x5e4>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d068      	beq.n	8002a86 <HAL_DMA_Abort+0x58a>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a4a      	ldr	r2, [pc, #296]	; (8002ae4 <HAL_DMA_Abort+0x5e8>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d063      	beq.n	8002a86 <HAL_DMA_Abort+0x58a>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a49      	ldr	r2, [pc, #292]	; (8002ae8 <HAL_DMA_Abort+0x5ec>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d05e      	beq.n	8002a86 <HAL_DMA_Abort+0x58a>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a47      	ldr	r2, [pc, #284]	; (8002aec <HAL_DMA_Abort+0x5f0>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d059      	beq.n	8002a86 <HAL_DMA_Abort+0x58a>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a46      	ldr	r2, [pc, #280]	; (8002af0 <HAL_DMA_Abort+0x5f4>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d054      	beq.n	8002a86 <HAL_DMA_Abort+0x58a>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a44      	ldr	r2, [pc, #272]	; (8002af4 <HAL_DMA_Abort+0x5f8>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d04f      	beq.n	8002a86 <HAL_DMA_Abort+0x58a>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a43      	ldr	r2, [pc, #268]	; (8002af8 <HAL_DMA_Abort+0x5fc>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d04a      	beq.n	8002a86 <HAL_DMA_Abort+0x58a>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a41      	ldr	r2, [pc, #260]	; (8002afc <HAL_DMA_Abort+0x600>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d045      	beq.n	8002a86 <HAL_DMA_Abort+0x58a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a40      	ldr	r2, [pc, #256]	; (8002b00 <HAL_DMA_Abort+0x604>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d040      	beq.n	8002a86 <HAL_DMA_Abort+0x58a>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a3e      	ldr	r2, [pc, #248]	; (8002b04 <HAL_DMA_Abort+0x608>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d03b      	beq.n	8002a86 <HAL_DMA_Abort+0x58a>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a3d      	ldr	r2, [pc, #244]	; (8002b08 <HAL_DMA_Abort+0x60c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d036      	beq.n	8002a86 <HAL_DMA_Abort+0x58a>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a3b      	ldr	r2, [pc, #236]	; (8002b0c <HAL_DMA_Abort+0x610>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d031      	beq.n	8002a86 <HAL_DMA_Abort+0x58a>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a3a      	ldr	r2, [pc, #232]	; (8002b10 <HAL_DMA_Abort+0x614>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d02c      	beq.n	8002a86 <HAL_DMA_Abort+0x58a>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a38      	ldr	r2, [pc, #224]	; (8002b14 <HAL_DMA_Abort+0x618>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d027      	beq.n	8002a86 <HAL_DMA_Abort+0x58a>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a37      	ldr	r2, [pc, #220]	; (8002b18 <HAL_DMA_Abort+0x61c>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d022      	beq.n	8002a86 <HAL_DMA_Abort+0x58a>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a35      	ldr	r2, [pc, #212]	; (8002b1c <HAL_DMA_Abort+0x620>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d01d      	beq.n	8002a86 <HAL_DMA_Abort+0x58a>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a34      	ldr	r2, [pc, #208]	; (8002b20 <HAL_DMA_Abort+0x624>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d018      	beq.n	8002a86 <HAL_DMA_Abort+0x58a>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a32      	ldr	r2, [pc, #200]	; (8002b24 <HAL_DMA_Abort+0x628>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d013      	beq.n	8002a86 <HAL_DMA_Abort+0x58a>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a31      	ldr	r2, [pc, #196]	; (8002b28 <HAL_DMA_Abort+0x62c>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d00e      	beq.n	8002a86 <HAL_DMA_Abort+0x58a>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a2f      	ldr	r2, [pc, #188]	; (8002b2c <HAL_DMA_Abort+0x630>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d009      	beq.n	8002a86 <HAL_DMA_Abort+0x58a>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a2e      	ldr	r2, [pc, #184]	; (8002b30 <HAL_DMA_Abort+0x634>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d004      	beq.n	8002a86 <HAL_DMA_Abort+0x58a>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a2c      	ldr	r2, [pc, #176]	; (8002b34 <HAL_DMA_Abort+0x638>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d101      	bne.n	8002a8a <HAL_DMA_Abort+0x58e>
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <HAL_DMA_Abort+0x590>
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d015      	beq.n	8002abc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002a98:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00c      	beq.n	8002abc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ab0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002aba:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3718      	adds	r7, #24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40020010 	.word	0x40020010
 8002adc:	40020028 	.word	0x40020028
 8002ae0:	40020040 	.word	0x40020040
 8002ae4:	40020058 	.word	0x40020058
 8002ae8:	40020070 	.word	0x40020070
 8002aec:	40020088 	.word	0x40020088
 8002af0:	400200a0 	.word	0x400200a0
 8002af4:	400200b8 	.word	0x400200b8
 8002af8:	40020410 	.word	0x40020410
 8002afc:	40020428 	.word	0x40020428
 8002b00:	40020440 	.word	0x40020440
 8002b04:	40020458 	.word	0x40020458
 8002b08:	40020470 	.word	0x40020470
 8002b0c:	40020488 	.word	0x40020488
 8002b10:	400204a0 	.word	0x400204a0
 8002b14:	400204b8 	.word	0x400204b8
 8002b18:	58025408 	.word	0x58025408
 8002b1c:	5802541c 	.word	0x5802541c
 8002b20:	58025430 	.word	0x58025430
 8002b24:	58025444 	.word	0x58025444
 8002b28:	58025458 	.word	0x58025458
 8002b2c:	5802546c 	.word	0x5802546c
 8002b30:	58025480 	.word	0x58025480
 8002b34:	58025494 	.word	0x58025494

08002b38 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e237      	b.n	8002fba <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d004      	beq.n	8002b60 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2280      	movs	r2, #128	; 0x80
 8002b5a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e22c      	b.n	8002fba <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a5c      	ldr	r2, [pc, #368]	; (8002cd8 <HAL_DMA_Abort_IT+0x1a0>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d04a      	beq.n	8002c00 <HAL_DMA_Abort_IT+0xc8>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a5b      	ldr	r2, [pc, #364]	; (8002cdc <HAL_DMA_Abort_IT+0x1a4>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d045      	beq.n	8002c00 <HAL_DMA_Abort_IT+0xc8>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a59      	ldr	r2, [pc, #356]	; (8002ce0 <HAL_DMA_Abort_IT+0x1a8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d040      	beq.n	8002c00 <HAL_DMA_Abort_IT+0xc8>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a58      	ldr	r2, [pc, #352]	; (8002ce4 <HAL_DMA_Abort_IT+0x1ac>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d03b      	beq.n	8002c00 <HAL_DMA_Abort_IT+0xc8>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a56      	ldr	r2, [pc, #344]	; (8002ce8 <HAL_DMA_Abort_IT+0x1b0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d036      	beq.n	8002c00 <HAL_DMA_Abort_IT+0xc8>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a55      	ldr	r2, [pc, #340]	; (8002cec <HAL_DMA_Abort_IT+0x1b4>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d031      	beq.n	8002c00 <HAL_DMA_Abort_IT+0xc8>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a53      	ldr	r2, [pc, #332]	; (8002cf0 <HAL_DMA_Abort_IT+0x1b8>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d02c      	beq.n	8002c00 <HAL_DMA_Abort_IT+0xc8>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a52      	ldr	r2, [pc, #328]	; (8002cf4 <HAL_DMA_Abort_IT+0x1bc>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d027      	beq.n	8002c00 <HAL_DMA_Abort_IT+0xc8>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a50      	ldr	r2, [pc, #320]	; (8002cf8 <HAL_DMA_Abort_IT+0x1c0>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d022      	beq.n	8002c00 <HAL_DMA_Abort_IT+0xc8>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a4f      	ldr	r2, [pc, #316]	; (8002cfc <HAL_DMA_Abort_IT+0x1c4>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d01d      	beq.n	8002c00 <HAL_DMA_Abort_IT+0xc8>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a4d      	ldr	r2, [pc, #308]	; (8002d00 <HAL_DMA_Abort_IT+0x1c8>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d018      	beq.n	8002c00 <HAL_DMA_Abort_IT+0xc8>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a4c      	ldr	r2, [pc, #304]	; (8002d04 <HAL_DMA_Abort_IT+0x1cc>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d013      	beq.n	8002c00 <HAL_DMA_Abort_IT+0xc8>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a4a      	ldr	r2, [pc, #296]	; (8002d08 <HAL_DMA_Abort_IT+0x1d0>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d00e      	beq.n	8002c00 <HAL_DMA_Abort_IT+0xc8>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a49      	ldr	r2, [pc, #292]	; (8002d0c <HAL_DMA_Abort_IT+0x1d4>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d009      	beq.n	8002c00 <HAL_DMA_Abort_IT+0xc8>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a47      	ldr	r2, [pc, #284]	; (8002d10 <HAL_DMA_Abort_IT+0x1d8>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d004      	beq.n	8002c00 <HAL_DMA_Abort_IT+0xc8>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a46      	ldr	r2, [pc, #280]	; (8002d14 <HAL_DMA_Abort_IT+0x1dc>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d101      	bne.n	8002c04 <HAL_DMA_Abort_IT+0xcc>
 8002c00:	2301      	movs	r3, #1
 8002c02:	e000      	b.n	8002c06 <HAL_DMA_Abort_IT+0xce>
 8002c04:	2300      	movs	r3, #0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 8086 	beq.w	8002d18 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2204      	movs	r2, #4
 8002c10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a2f      	ldr	r2, [pc, #188]	; (8002cd8 <HAL_DMA_Abort_IT+0x1a0>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d04a      	beq.n	8002cb4 <HAL_DMA_Abort_IT+0x17c>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a2e      	ldr	r2, [pc, #184]	; (8002cdc <HAL_DMA_Abort_IT+0x1a4>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d045      	beq.n	8002cb4 <HAL_DMA_Abort_IT+0x17c>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a2c      	ldr	r2, [pc, #176]	; (8002ce0 <HAL_DMA_Abort_IT+0x1a8>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d040      	beq.n	8002cb4 <HAL_DMA_Abort_IT+0x17c>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a2b      	ldr	r2, [pc, #172]	; (8002ce4 <HAL_DMA_Abort_IT+0x1ac>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d03b      	beq.n	8002cb4 <HAL_DMA_Abort_IT+0x17c>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a29      	ldr	r2, [pc, #164]	; (8002ce8 <HAL_DMA_Abort_IT+0x1b0>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d036      	beq.n	8002cb4 <HAL_DMA_Abort_IT+0x17c>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a28      	ldr	r2, [pc, #160]	; (8002cec <HAL_DMA_Abort_IT+0x1b4>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d031      	beq.n	8002cb4 <HAL_DMA_Abort_IT+0x17c>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a26      	ldr	r2, [pc, #152]	; (8002cf0 <HAL_DMA_Abort_IT+0x1b8>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d02c      	beq.n	8002cb4 <HAL_DMA_Abort_IT+0x17c>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a25      	ldr	r2, [pc, #148]	; (8002cf4 <HAL_DMA_Abort_IT+0x1bc>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d027      	beq.n	8002cb4 <HAL_DMA_Abort_IT+0x17c>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a23      	ldr	r2, [pc, #140]	; (8002cf8 <HAL_DMA_Abort_IT+0x1c0>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d022      	beq.n	8002cb4 <HAL_DMA_Abort_IT+0x17c>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a22      	ldr	r2, [pc, #136]	; (8002cfc <HAL_DMA_Abort_IT+0x1c4>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d01d      	beq.n	8002cb4 <HAL_DMA_Abort_IT+0x17c>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a20      	ldr	r2, [pc, #128]	; (8002d00 <HAL_DMA_Abort_IT+0x1c8>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d018      	beq.n	8002cb4 <HAL_DMA_Abort_IT+0x17c>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a1f      	ldr	r2, [pc, #124]	; (8002d04 <HAL_DMA_Abort_IT+0x1cc>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d013      	beq.n	8002cb4 <HAL_DMA_Abort_IT+0x17c>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a1d      	ldr	r2, [pc, #116]	; (8002d08 <HAL_DMA_Abort_IT+0x1d0>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d00e      	beq.n	8002cb4 <HAL_DMA_Abort_IT+0x17c>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a1c      	ldr	r2, [pc, #112]	; (8002d0c <HAL_DMA_Abort_IT+0x1d4>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d009      	beq.n	8002cb4 <HAL_DMA_Abort_IT+0x17c>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a1a      	ldr	r2, [pc, #104]	; (8002d10 <HAL_DMA_Abort_IT+0x1d8>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d004      	beq.n	8002cb4 <HAL_DMA_Abort_IT+0x17c>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a19      	ldr	r2, [pc, #100]	; (8002d14 <HAL_DMA_Abort_IT+0x1dc>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d108      	bne.n	8002cc6 <HAL_DMA_Abort_IT+0x18e>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 0201 	bic.w	r2, r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	e178      	b.n	8002fb8 <HAL_DMA_Abort_IT+0x480>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 0201 	bic.w	r2, r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	e16f      	b.n	8002fb8 <HAL_DMA_Abort_IT+0x480>
 8002cd8:	40020010 	.word	0x40020010
 8002cdc:	40020028 	.word	0x40020028
 8002ce0:	40020040 	.word	0x40020040
 8002ce4:	40020058 	.word	0x40020058
 8002ce8:	40020070 	.word	0x40020070
 8002cec:	40020088 	.word	0x40020088
 8002cf0:	400200a0 	.word	0x400200a0
 8002cf4:	400200b8 	.word	0x400200b8
 8002cf8:	40020410 	.word	0x40020410
 8002cfc:	40020428 	.word	0x40020428
 8002d00:	40020440 	.word	0x40020440
 8002d04:	40020458 	.word	0x40020458
 8002d08:	40020470 	.word	0x40020470
 8002d0c:	40020488 	.word	0x40020488
 8002d10:	400204a0 	.word	0x400204a0
 8002d14:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 020e 	bic.w	r2, r2, #14
 8002d26:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a6c      	ldr	r2, [pc, #432]	; (8002ee0 <HAL_DMA_Abort_IT+0x3a8>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d04a      	beq.n	8002dc8 <HAL_DMA_Abort_IT+0x290>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a6b      	ldr	r2, [pc, #428]	; (8002ee4 <HAL_DMA_Abort_IT+0x3ac>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d045      	beq.n	8002dc8 <HAL_DMA_Abort_IT+0x290>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a69      	ldr	r2, [pc, #420]	; (8002ee8 <HAL_DMA_Abort_IT+0x3b0>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d040      	beq.n	8002dc8 <HAL_DMA_Abort_IT+0x290>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a68      	ldr	r2, [pc, #416]	; (8002eec <HAL_DMA_Abort_IT+0x3b4>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d03b      	beq.n	8002dc8 <HAL_DMA_Abort_IT+0x290>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a66      	ldr	r2, [pc, #408]	; (8002ef0 <HAL_DMA_Abort_IT+0x3b8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d036      	beq.n	8002dc8 <HAL_DMA_Abort_IT+0x290>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a65      	ldr	r2, [pc, #404]	; (8002ef4 <HAL_DMA_Abort_IT+0x3bc>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d031      	beq.n	8002dc8 <HAL_DMA_Abort_IT+0x290>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a63      	ldr	r2, [pc, #396]	; (8002ef8 <HAL_DMA_Abort_IT+0x3c0>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d02c      	beq.n	8002dc8 <HAL_DMA_Abort_IT+0x290>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a62      	ldr	r2, [pc, #392]	; (8002efc <HAL_DMA_Abort_IT+0x3c4>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d027      	beq.n	8002dc8 <HAL_DMA_Abort_IT+0x290>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a60      	ldr	r2, [pc, #384]	; (8002f00 <HAL_DMA_Abort_IT+0x3c8>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d022      	beq.n	8002dc8 <HAL_DMA_Abort_IT+0x290>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a5f      	ldr	r2, [pc, #380]	; (8002f04 <HAL_DMA_Abort_IT+0x3cc>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d01d      	beq.n	8002dc8 <HAL_DMA_Abort_IT+0x290>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a5d      	ldr	r2, [pc, #372]	; (8002f08 <HAL_DMA_Abort_IT+0x3d0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d018      	beq.n	8002dc8 <HAL_DMA_Abort_IT+0x290>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a5c      	ldr	r2, [pc, #368]	; (8002f0c <HAL_DMA_Abort_IT+0x3d4>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d013      	beq.n	8002dc8 <HAL_DMA_Abort_IT+0x290>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a5a      	ldr	r2, [pc, #360]	; (8002f10 <HAL_DMA_Abort_IT+0x3d8>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d00e      	beq.n	8002dc8 <HAL_DMA_Abort_IT+0x290>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a59      	ldr	r2, [pc, #356]	; (8002f14 <HAL_DMA_Abort_IT+0x3dc>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d009      	beq.n	8002dc8 <HAL_DMA_Abort_IT+0x290>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a57      	ldr	r2, [pc, #348]	; (8002f18 <HAL_DMA_Abort_IT+0x3e0>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d004      	beq.n	8002dc8 <HAL_DMA_Abort_IT+0x290>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a56      	ldr	r2, [pc, #344]	; (8002f1c <HAL_DMA_Abort_IT+0x3e4>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d108      	bne.n	8002dda <HAL_DMA_Abort_IT+0x2a2>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0201 	bic.w	r2, r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	e007      	b.n	8002dea <HAL_DMA_Abort_IT+0x2b2>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0201 	bic.w	r2, r2, #1
 8002de8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a3c      	ldr	r2, [pc, #240]	; (8002ee0 <HAL_DMA_Abort_IT+0x3a8>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d072      	beq.n	8002eda <HAL_DMA_Abort_IT+0x3a2>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a3a      	ldr	r2, [pc, #232]	; (8002ee4 <HAL_DMA_Abort_IT+0x3ac>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d06d      	beq.n	8002eda <HAL_DMA_Abort_IT+0x3a2>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a39      	ldr	r2, [pc, #228]	; (8002ee8 <HAL_DMA_Abort_IT+0x3b0>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d068      	beq.n	8002eda <HAL_DMA_Abort_IT+0x3a2>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a37      	ldr	r2, [pc, #220]	; (8002eec <HAL_DMA_Abort_IT+0x3b4>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d063      	beq.n	8002eda <HAL_DMA_Abort_IT+0x3a2>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a36      	ldr	r2, [pc, #216]	; (8002ef0 <HAL_DMA_Abort_IT+0x3b8>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d05e      	beq.n	8002eda <HAL_DMA_Abort_IT+0x3a2>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a34      	ldr	r2, [pc, #208]	; (8002ef4 <HAL_DMA_Abort_IT+0x3bc>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d059      	beq.n	8002eda <HAL_DMA_Abort_IT+0x3a2>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a33      	ldr	r2, [pc, #204]	; (8002ef8 <HAL_DMA_Abort_IT+0x3c0>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d054      	beq.n	8002eda <HAL_DMA_Abort_IT+0x3a2>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a31      	ldr	r2, [pc, #196]	; (8002efc <HAL_DMA_Abort_IT+0x3c4>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d04f      	beq.n	8002eda <HAL_DMA_Abort_IT+0x3a2>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a30      	ldr	r2, [pc, #192]	; (8002f00 <HAL_DMA_Abort_IT+0x3c8>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d04a      	beq.n	8002eda <HAL_DMA_Abort_IT+0x3a2>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a2e      	ldr	r2, [pc, #184]	; (8002f04 <HAL_DMA_Abort_IT+0x3cc>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d045      	beq.n	8002eda <HAL_DMA_Abort_IT+0x3a2>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a2d      	ldr	r2, [pc, #180]	; (8002f08 <HAL_DMA_Abort_IT+0x3d0>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d040      	beq.n	8002eda <HAL_DMA_Abort_IT+0x3a2>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a2b      	ldr	r2, [pc, #172]	; (8002f0c <HAL_DMA_Abort_IT+0x3d4>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d03b      	beq.n	8002eda <HAL_DMA_Abort_IT+0x3a2>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a2a      	ldr	r2, [pc, #168]	; (8002f10 <HAL_DMA_Abort_IT+0x3d8>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d036      	beq.n	8002eda <HAL_DMA_Abort_IT+0x3a2>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a28      	ldr	r2, [pc, #160]	; (8002f14 <HAL_DMA_Abort_IT+0x3dc>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d031      	beq.n	8002eda <HAL_DMA_Abort_IT+0x3a2>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a27      	ldr	r2, [pc, #156]	; (8002f18 <HAL_DMA_Abort_IT+0x3e0>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d02c      	beq.n	8002eda <HAL_DMA_Abort_IT+0x3a2>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a25      	ldr	r2, [pc, #148]	; (8002f1c <HAL_DMA_Abort_IT+0x3e4>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d027      	beq.n	8002eda <HAL_DMA_Abort_IT+0x3a2>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a24      	ldr	r2, [pc, #144]	; (8002f20 <HAL_DMA_Abort_IT+0x3e8>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d022      	beq.n	8002eda <HAL_DMA_Abort_IT+0x3a2>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a22      	ldr	r2, [pc, #136]	; (8002f24 <HAL_DMA_Abort_IT+0x3ec>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d01d      	beq.n	8002eda <HAL_DMA_Abort_IT+0x3a2>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a21      	ldr	r2, [pc, #132]	; (8002f28 <HAL_DMA_Abort_IT+0x3f0>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d018      	beq.n	8002eda <HAL_DMA_Abort_IT+0x3a2>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a1f      	ldr	r2, [pc, #124]	; (8002f2c <HAL_DMA_Abort_IT+0x3f4>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d013      	beq.n	8002eda <HAL_DMA_Abort_IT+0x3a2>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a1e      	ldr	r2, [pc, #120]	; (8002f30 <HAL_DMA_Abort_IT+0x3f8>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d00e      	beq.n	8002eda <HAL_DMA_Abort_IT+0x3a2>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a1c      	ldr	r2, [pc, #112]	; (8002f34 <HAL_DMA_Abort_IT+0x3fc>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d009      	beq.n	8002eda <HAL_DMA_Abort_IT+0x3a2>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a1b      	ldr	r2, [pc, #108]	; (8002f38 <HAL_DMA_Abort_IT+0x400>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d004      	beq.n	8002eda <HAL_DMA_Abort_IT+0x3a2>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a19      	ldr	r2, [pc, #100]	; (8002f3c <HAL_DMA_Abort_IT+0x404>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d132      	bne.n	8002f40 <HAL_DMA_Abort_IT+0x408>
 8002eda:	2301      	movs	r3, #1
 8002edc:	e031      	b.n	8002f42 <HAL_DMA_Abort_IT+0x40a>
 8002ede:	bf00      	nop
 8002ee0:	40020010 	.word	0x40020010
 8002ee4:	40020028 	.word	0x40020028
 8002ee8:	40020040 	.word	0x40020040
 8002eec:	40020058 	.word	0x40020058
 8002ef0:	40020070 	.word	0x40020070
 8002ef4:	40020088 	.word	0x40020088
 8002ef8:	400200a0 	.word	0x400200a0
 8002efc:	400200b8 	.word	0x400200b8
 8002f00:	40020410 	.word	0x40020410
 8002f04:	40020428 	.word	0x40020428
 8002f08:	40020440 	.word	0x40020440
 8002f0c:	40020458 	.word	0x40020458
 8002f10:	40020470 	.word	0x40020470
 8002f14:	40020488 	.word	0x40020488
 8002f18:	400204a0 	.word	0x400204a0
 8002f1c:	400204b8 	.word	0x400204b8
 8002f20:	58025408 	.word	0x58025408
 8002f24:	5802541c 	.word	0x5802541c
 8002f28:	58025430 	.word	0x58025430
 8002f2c:	58025444 	.word	0x58025444
 8002f30:	58025458 	.word	0x58025458
 8002f34:	5802546c 	.word	0x5802546c
 8002f38:	58025480 	.word	0x58025480
 8002f3c:	58025494 	.word	0x58025494
 8002f40:	2300      	movs	r3, #0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d028      	beq.n	8002f98 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f54:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f60:	f003 031f 	and.w	r3, r3, #31
 8002f64:	2201      	movs	r2, #1
 8002f66:	409a      	lsls	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002f74:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00c      	beq.n	8002f98 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f8c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002f96:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop

08002fc4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b08a      	sub	sp, #40	; 0x28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002fd0:	4b67      	ldr	r3, [pc, #412]	; (8003170 <HAL_DMA_IRQHandler+0x1ac>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a67      	ldr	r2, [pc, #412]	; (8003174 <HAL_DMA_IRQHandler+0x1b0>)
 8002fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fda:	0a9b      	lsrs	r3, r3, #10
 8002fdc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002fea:	6a3b      	ldr	r3, [r7, #32]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a5f      	ldr	r2, [pc, #380]	; (8003178 <HAL_DMA_IRQHandler+0x1b4>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d04a      	beq.n	8003096 <HAL_DMA_IRQHandler+0xd2>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a5d      	ldr	r2, [pc, #372]	; (800317c <HAL_DMA_IRQHandler+0x1b8>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d045      	beq.n	8003096 <HAL_DMA_IRQHandler+0xd2>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a5c      	ldr	r2, [pc, #368]	; (8003180 <HAL_DMA_IRQHandler+0x1bc>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d040      	beq.n	8003096 <HAL_DMA_IRQHandler+0xd2>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a5a      	ldr	r2, [pc, #360]	; (8003184 <HAL_DMA_IRQHandler+0x1c0>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d03b      	beq.n	8003096 <HAL_DMA_IRQHandler+0xd2>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a59      	ldr	r2, [pc, #356]	; (8003188 <HAL_DMA_IRQHandler+0x1c4>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d036      	beq.n	8003096 <HAL_DMA_IRQHandler+0xd2>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a57      	ldr	r2, [pc, #348]	; (800318c <HAL_DMA_IRQHandler+0x1c8>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d031      	beq.n	8003096 <HAL_DMA_IRQHandler+0xd2>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a56      	ldr	r2, [pc, #344]	; (8003190 <HAL_DMA_IRQHandler+0x1cc>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d02c      	beq.n	8003096 <HAL_DMA_IRQHandler+0xd2>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a54      	ldr	r2, [pc, #336]	; (8003194 <HAL_DMA_IRQHandler+0x1d0>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d027      	beq.n	8003096 <HAL_DMA_IRQHandler+0xd2>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a53      	ldr	r2, [pc, #332]	; (8003198 <HAL_DMA_IRQHandler+0x1d4>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d022      	beq.n	8003096 <HAL_DMA_IRQHandler+0xd2>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a51      	ldr	r2, [pc, #324]	; (800319c <HAL_DMA_IRQHandler+0x1d8>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d01d      	beq.n	8003096 <HAL_DMA_IRQHandler+0xd2>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a50      	ldr	r2, [pc, #320]	; (80031a0 <HAL_DMA_IRQHandler+0x1dc>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d018      	beq.n	8003096 <HAL_DMA_IRQHandler+0xd2>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a4e      	ldr	r2, [pc, #312]	; (80031a4 <HAL_DMA_IRQHandler+0x1e0>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d013      	beq.n	8003096 <HAL_DMA_IRQHandler+0xd2>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a4d      	ldr	r2, [pc, #308]	; (80031a8 <HAL_DMA_IRQHandler+0x1e4>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d00e      	beq.n	8003096 <HAL_DMA_IRQHandler+0xd2>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a4b      	ldr	r2, [pc, #300]	; (80031ac <HAL_DMA_IRQHandler+0x1e8>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d009      	beq.n	8003096 <HAL_DMA_IRQHandler+0xd2>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a4a      	ldr	r2, [pc, #296]	; (80031b0 <HAL_DMA_IRQHandler+0x1ec>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d004      	beq.n	8003096 <HAL_DMA_IRQHandler+0xd2>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a48      	ldr	r2, [pc, #288]	; (80031b4 <HAL_DMA_IRQHandler+0x1f0>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d101      	bne.n	800309a <HAL_DMA_IRQHandler+0xd6>
 8003096:	2301      	movs	r3, #1
 8003098:	e000      	b.n	800309c <HAL_DMA_IRQHandler+0xd8>
 800309a:	2300      	movs	r3, #0
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 842b 	beq.w	80038f8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a6:	f003 031f 	and.w	r3, r3, #31
 80030aa:	2208      	movs	r2, #8
 80030ac:	409a      	lsls	r2, r3
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	4013      	ands	r3, r2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 80a2 	beq.w	80031fc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a2e      	ldr	r2, [pc, #184]	; (8003178 <HAL_DMA_IRQHandler+0x1b4>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d04a      	beq.n	8003158 <HAL_DMA_IRQHandler+0x194>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a2d      	ldr	r2, [pc, #180]	; (800317c <HAL_DMA_IRQHandler+0x1b8>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d045      	beq.n	8003158 <HAL_DMA_IRQHandler+0x194>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a2b      	ldr	r2, [pc, #172]	; (8003180 <HAL_DMA_IRQHandler+0x1bc>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d040      	beq.n	8003158 <HAL_DMA_IRQHandler+0x194>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a2a      	ldr	r2, [pc, #168]	; (8003184 <HAL_DMA_IRQHandler+0x1c0>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d03b      	beq.n	8003158 <HAL_DMA_IRQHandler+0x194>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a28      	ldr	r2, [pc, #160]	; (8003188 <HAL_DMA_IRQHandler+0x1c4>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d036      	beq.n	8003158 <HAL_DMA_IRQHandler+0x194>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a27      	ldr	r2, [pc, #156]	; (800318c <HAL_DMA_IRQHandler+0x1c8>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d031      	beq.n	8003158 <HAL_DMA_IRQHandler+0x194>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a25      	ldr	r2, [pc, #148]	; (8003190 <HAL_DMA_IRQHandler+0x1cc>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d02c      	beq.n	8003158 <HAL_DMA_IRQHandler+0x194>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a24      	ldr	r2, [pc, #144]	; (8003194 <HAL_DMA_IRQHandler+0x1d0>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d027      	beq.n	8003158 <HAL_DMA_IRQHandler+0x194>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a22      	ldr	r2, [pc, #136]	; (8003198 <HAL_DMA_IRQHandler+0x1d4>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d022      	beq.n	8003158 <HAL_DMA_IRQHandler+0x194>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a21      	ldr	r2, [pc, #132]	; (800319c <HAL_DMA_IRQHandler+0x1d8>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d01d      	beq.n	8003158 <HAL_DMA_IRQHandler+0x194>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a1f      	ldr	r2, [pc, #124]	; (80031a0 <HAL_DMA_IRQHandler+0x1dc>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d018      	beq.n	8003158 <HAL_DMA_IRQHandler+0x194>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a1e      	ldr	r2, [pc, #120]	; (80031a4 <HAL_DMA_IRQHandler+0x1e0>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d013      	beq.n	8003158 <HAL_DMA_IRQHandler+0x194>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a1c      	ldr	r2, [pc, #112]	; (80031a8 <HAL_DMA_IRQHandler+0x1e4>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d00e      	beq.n	8003158 <HAL_DMA_IRQHandler+0x194>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a1b      	ldr	r2, [pc, #108]	; (80031ac <HAL_DMA_IRQHandler+0x1e8>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d009      	beq.n	8003158 <HAL_DMA_IRQHandler+0x194>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a19      	ldr	r2, [pc, #100]	; (80031b0 <HAL_DMA_IRQHandler+0x1ec>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d004      	beq.n	8003158 <HAL_DMA_IRQHandler+0x194>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a18      	ldr	r2, [pc, #96]	; (80031b4 <HAL_DMA_IRQHandler+0x1f0>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d12f      	bne.n	80031b8 <HAL_DMA_IRQHandler+0x1f4>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0304 	and.w	r3, r3, #4
 8003162:	2b00      	cmp	r3, #0
 8003164:	bf14      	ite	ne
 8003166:	2301      	movne	r3, #1
 8003168:	2300      	moveq	r3, #0
 800316a:	b2db      	uxtb	r3, r3
 800316c:	e02e      	b.n	80031cc <HAL_DMA_IRQHandler+0x208>
 800316e:	bf00      	nop
 8003170:	24000018 	.word	0x24000018
 8003174:	1b4e81b5 	.word	0x1b4e81b5
 8003178:	40020010 	.word	0x40020010
 800317c:	40020028 	.word	0x40020028
 8003180:	40020040 	.word	0x40020040
 8003184:	40020058 	.word	0x40020058
 8003188:	40020070 	.word	0x40020070
 800318c:	40020088 	.word	0x40020088
 8003190:	400200a0 	.word	0x400200a0
 8003194:	400200b8 	.word	0x400200b8
 8003198:	40020410 	.word	0x40020410
 800319c:	40020428 	.word	0x40020428
 80031a0:	40020440 	.word	0x40020440
 80031a4:	40020458 	.word	0x40020458
 80031a8:	40020470 	.word	0x40020470
 80031ac:	40020488 	.word	0x40020488
 80031b0:	400204a0 	.word	0x400204a0
 80031b4:	400204b8 	.word	0x400204b8
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	bf14      	ite	ne
 80031c6:	2301      	movne	r3, #1
 80031c8:	2300      	moveq	r3, #0
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d015      	beq.n	80031fc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0204 	bic.w	r2, r2, #4
 80031de:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e4:	f003 031f 	and.w	r3, r3, #31
 80031e8:	2208      	movs	r2, #8
 80031ea:	409a      	lsls	r2, r3
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f4:	f043 0201 	orr.w	r2, r3, #1
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003200:	f003 031f 	and.w	r3, r3, #31
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	fa22 f303 	lsr.w	r3, r2, r3
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d06e      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a69      	ldr	r2, [pc, #420]	; (80033bc <HAL_DMA_IRQHandler+0x3f8>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d04a      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x2ee>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a67      	ldr	r2, [pc, #412]	; (80033c0 <HAL_DMA_IRQHandler+0x3fc>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d045      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x2ee>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a66      	ldr	r2, [pc, #408]	; (80033c4 <HAL_DMA_IRQHandler+0x400>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d040      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x2ee>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a64      	ldr	r2, [pc, #400]	; (80033c8 <HAL_DMA_IRQHandler+0x404>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d03b      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x2ee>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a63      	ldr	r2, [pc, #396]	; (80033cc <HAL_DMA_IRQHandler+0x408>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d036      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x2ee>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a61      	ldr	r2, [pc, #388]	; (80033d0 <HAL_DMA_IRQHandler+0x40c>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d031      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x2ee>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a60      	ldr	r2, [pc, #384]	; (80033d4 <HAL_DMA_IRQHandler+0x410>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d02c      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x2ee>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a5e      	ldr	r2, [pc, #376]	; (80033d8 <HAL_DMA_IRQHandler+0x414>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d027      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x2ee>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a5d      	ldr	r2, [pc, #372]	; (80033dc <HAL_DMA_IRQHandler+0x418>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d022      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x2ee>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a5b      	ldr	r2, [pc, #364]	; (80033e0 <HAL_DMA_IRQHandler+0x41c>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d01d      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x2ee>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a5a      	ldr	r2, [pc, #360]	; (80033e4 <HAL_DMA_IRQHandler+0x420>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d018      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x2ee>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a58      	ldr	r2, [pc, #352]	; (80033e8 <HAL_DMA_IRQHandler+0x424>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d013      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x2ee>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a57      	ldr	r2, [pc, #348]	; (80033ec <HAL_DMA_IRQHandler+0x428>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d00e      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x2ee>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a55      	ldr	r2, [pc, #340]	; (80033f0 <HAL_DMA_IRQHandler+0x42c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d009      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x2ee>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a54      	ldr	r2, [pc, #336]	; (80033f4 <HAL_DMA_IRQHandler+0x430>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d004      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x2ee>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a52      	ldr	r2, [pc, #328]	; (80033f8 <HAL_DMA_IRQHandler+0x434>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d10a      	bne.n	80032c8 <HAL_DMA_IRQHandler+0x304>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032bc:	2b00      	cmp	r3, #0
 80032be:	bf14      	ite	ne
 80032c0:	2301      	movne	r3, #1
 80032c2:	2300      	moveq	r3, #0
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	e003      	b.n	80032d0 <HAL_DMA_IRQHandler+0x30c>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2300      	movs	r3, #0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00d      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d8:	f003 031f 	and.w	r3, r3, #31
 80032dc:	2201      	movs	r2, #1
 80032de:	409a      	lsls	r2, r3
 80032e0:	6a3b      	ldr	r3, [r7, #32]
 80032e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e8:	f043 0202 	orr.w	r2, r3, #2
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f4:	f003 031f 	and.w	r3, r3, #31
 80032f8:	2204      	movs	r2, #4
 80032fa:	409a      	lsls	r2, r3
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	4013      	ands	r3, r2
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 808f 	beq.w	8003424 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a2c      	ldr	r2, [pc, #176]	; (80033bc <HAL_DMA_IRQHandler+0x3f8>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d04a      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x3e2>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a2a      	ldr	r2, [pc, #168]	; (80033c0 <HAL_DMA_IRQHandler+0x3fc>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d045      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x3e2>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a29      	ldr	r2, [pc, #164]	; (80033c4 <HAL_DMA_IRQHandler+0x400>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d040      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x3e2>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a27      	ldr	r2, [pc, #156]	; (80033c8 <HAL_DMA_IRQHandler+0x404>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d03b      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x3e2>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a26      	ldr	r2, [pc, #152]	; (80033cc <HAL_DMA_IRQHandler+0x408>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d036      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x3e2>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a24      	ldr	r2, [pc, #144]	; (80033d0 <HAL_DMA_IRQHandler+0x40c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d031      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x3e2>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a23      	ldr	r2, [pc, #140]	; (80033d4 <HAL_DMA_IRQHandler+0x410>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d02c      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x3e2>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a21      	ldr	r2, [pc, #132]	; (80033d8 <HAL_DMA_IRQHandler+0x414>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d027      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x3e2>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a20      	ldr	r2, [pc, #128]	; (80033dc <HAL_DMA_IRQHandler+0x418>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d022      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x3e2>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a1e      	ldr	r2, [pc, #120]	; (80033e0 <HAL_DMA_IRQHandler+0x41c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d01d      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x3e2>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a1d      	ldr	r2, [pc, #116]	; (80033e4 <HAL_DMA_IRQHandler+0x420>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d018      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x3e2>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a1b      	ldr	r2, [pc, #108]	; (80033e8 <HAL_DMA_IRQHandler+0x424>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d013      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x3e2>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a1a      	ldr	r2, [pc, #104]	; (80033ec <HAL_DMA_IRQHandler+0x428>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d00e      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x3e2>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a18      	ldr	r2, [pc, #96]	; (80033f0 <HAL_DMA_IRQHandler+0x42c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d009      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x3e2>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a17      	ldr	r2, [pc, #92]	; (80033f4 <HAL_DMA_IRQHandler+0x430>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d004      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x3e2>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a15      	ldr	r2, [pc, #84]	; (80033f8 <HAL_DMA_IRQHandler+0x434>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d12a      	bne.n	80033fc <HAL_DMA_IRQHandler+0x438>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	bf14      	ite	ne
 80033b4:	2301      	movne	r3, #1
 80033b6:	2300      	moveq	r3, #0
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	e023      	b.n	8003404 <HAL_DMA_IRQHandler+0x440>
 80033bc:	40020010 	.word	0x40020010
 80033c0:	40020028 	.word	0x40020028
 80033c4:	40020040 	.word	0x40020040
 80033c8:	40020058 	.word	0x40020058
 80033cc:	40020070 	.word	0x40020070
 80033d0:	40020088 	.word	0x40020088
 80033d4:	400200a0 	.word	0x400200a0
 80033d8:	400200b8 	.word	0x400200b8
 80033dc:	40020410 	.word	0x40020410
 80033e0:	40020428 	.word	0x40020428
 80033e4:	40020440 	.word	0x40020440
 80033e8:	40020458 	.word	0x40020458
 80033ec:	40020470 	.word	0x40020470
 80033f0:	40020488 	.word	0x40020488
 80033f4:	400204a0 	.word	0x400204a0
 80033f8:	400204b8 	.word	0x400204b8
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2300      	movs	r3, #0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00d      	beq.n	8003424 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800340c:	f003 031f 	and.w	r3, r3, #31
 8003410:	2204      	movs	r2, #4
 8003412:	409a      	lsls	r2, r3
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341c:	f043 0204 	orr.w	r2, r3, #4
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003428:	f003 031f 	and.w	r3, r3, #31
 800342c:	2210      	movs	r2, #16
 800342e:	409a      	lsls	r2, r3
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	4013      	ands	r3, r2
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 80a6 	beq.w	8003586 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a85      	ldr	r2, [pc, #532]	; (8003654 <HAL_DMA_IRQHandler+0x690>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d04a      	beq.n	80034da <HAL_DMA_IRQHandler+0x516>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a83      	ldr	r2, [pc, #524]	; (8003658 <HAL_DMA_IRQHandler+0x694>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d045      	beq.n	80034da <HAL_DMA_IRQHandler+0x516>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a82      	ldr	r2, [pc, #520]	; (800365c <HAL_DMA_IRQHandler+0x698>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d040      	beq.n	80034da <HAL_DMA_IRQHandler+0x516>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a80      	ldr	r2, [pc, #512]	; (8003660 <HAL_DMA_IRQHandler+0x69c>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d03b      	beq.n	80034da <HAL_DMA_IRQHandler+0x516>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a7f      	ldr	r2, [pc, #508]	; (8003664 <HAL_DMA_IRQHandler+0x6a0>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d036      	beq.n	80034da <HAL_DMA_IRQHandler+0x516>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a7d      	ldr	r2, [pc, #500]	; (8003668 <HAL_DMA_IRQHandler+0x6a4>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d031      	beq.n	80034da <HAL_DMA_IRQHandler+0x516>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a7c      	ldr	r2, [pc, #496]	; (800366c <HAL_DMA_IRQHandler+0x6a8>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d02c      	beq.n	80034da <HAL_DMA_IRQHandler+0x516>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a7a      	ldr	r2, [pc, #488]	; (8003670 <HAL_DMA_IRQHandler+0x6ac>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d027      	beq.n	80034da <HAL_DMA_IRQHandler+0x516>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a79      	ldr	r2, [pc, #484]	; (8003674 <HAL_DMA_IRQHandler+0x6b0>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d022      	beq.n	80034da <HAL_DMA_IRQHandler+0x516>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a77      	ldr	r2, [pc, #476]	; (8003678 <HAL_DMA_IRQHandler+0x6b4>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d01d      	beq.n	80034da <HAL_DMA_IRQHandler+0x516>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a76      	ldr	r2, [pc, #472]	; (800367c <HAL_DMA_IRQHandler+0x6b8>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d018      	beq.n	80034da <HAL_DMA_IRQHandler+0x516>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a74      	ldr	r2, [pc, #464]	; (8003680 <HAL_DMA_IRQHandler+0x6bc>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d013      	beq.n	80034da <HAL_DMA_IRQHandler+0x516>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a73      	ldr	r2, [pc, #460]	; (8003684 <HAL_DMA_IRQHandler+0x6c0>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d00e      	beq.n	80034da <HAL_DMA_IRQHandler+0x516>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a71      	ldr	r2, [pc, #452]	; (8003688 <HAL_DMA_IRQHandler+0x6c4>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d009      	beq.n	80034da <HAL_DMA_IRQHandler+0x516>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a70      	ldr	r2, [pc, #448]	; (800368c <HAL_DMA_IRQHandler+0x6c8>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d004      	beq.n	80034da <HAL_DMA_IRQHandler+0x516>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a6e      	ldr	r2, [pc, #440]	; (8003690 <HAL_DMA_IRQHandler+0x6cc>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d10a      	bne.n	80034f0 <HAL_DMA_IRQHandler+0x52c>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	bf14      	ite	ne
 80034e8:	2301      	movne	r3, #1
 80034ea:	2300      	moveq	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	e009      	b.n	8003504 <HAL_DMA_IRQHandler+0x540>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0304 	and.w	r3, r3, #4
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	bf14      	ite	ne
 80034fe:	2301      	movne	r3, #1
 8003500:	2300      	moveq	r3, #0
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	d03e      	beq.n	8003586 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350c:	f003 031f 	and.w	r3, r3, #31
 8003510:	2210      	movs	r2, #16
 8003512:	409a      	lsls	r2, r3
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d018      	beq.n	8003558 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d108      	bne.n	8003546 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003538:	2b00      	cmp	r3, #0
 800353a:	d024      	beq.n	8003586 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	4798      	blx	r3
 8003544:	e01f      	b.n	8003586 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800354a:	2b00      	cmp	r3, #0
 800354c:	d01b      	beq.n	8003586 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	4798      	blx	r3
 8003556:	e016      	b.n	8003586 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003562:	2b00      	cmp	r3, #0
 8003564:	d107      	bne.n	8003576 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 0208 	bic.w	r2, r2, #8
 8003574:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358a:	f003 031f 	and.w	r3, r3, #31
 800358e:	2220      	movs	r2, #32
 8003590:	409a      	lsls	r2, r3
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	4013      	ands	r3, r2
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 8110 	beq.w	80037bc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a2c      	ldr	r2, [pc, #176]	; (8003654 <HAL_DMA_IRQHandler+0x690>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d04a      	beq.n	800363c <HAL_DMA_IRQHandler+0x678>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a2b      	ldr	r2, [pc, #172]	; (8003658 <HAL_DMA_IRQHandler+0x694>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d045      	beq.n	800363c <HAL_DMA_IRQHandler+0x678>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a29      	ldr	r2, [pc, #164]	; (800365c <HAL_DMA_IRQHandler+0x698>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d040      	beq.n	800363c <HAL_DMA_IRQHandler+0x678>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a28      	ldr	r2, [pc, #160]	; (8003660 <HAL_DMA_IRQHandler+0x69c>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d03b      	beq.n	800363c <HAL_DMA_IRQHandler+0x678>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a26      	ldr	r2, [pc, #152]	; (8003664 <HAL_DMA_IRQHandler+0x6a0>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d036      	beq.n	800363c <HAL_DMA_IRQHandler+0x678>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a25      	ldr	r2, [pc, #148]	; (8003668 <HAL_DMA_IRQHandler+0x6a4>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d031      	beq.n	800363c <HAL_DMA_IRQHandler+0x678>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a23      	ldr	r2, [pc, #140]	; (800366c <HAL_DMA_IRQHandler+0x6a8>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d02c      	beq.n	800363c <HAL_DMA_IRQHandler+0x678>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a22      	ldr	r2, [pc, #136]	; (8003670 <HAL_DMA_IRQHandler+0x6ac>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d027      	beq.n	800363c <HAL_DMA_IRQHandler+0x678>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a20      	ldr	r2, [pc, #128]	; (8003674 <HAL_DMA_IRQHandler+0x6b0>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d022      	beq.n	800363c <HAL_DMA_IRQHandler+0x678>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a1f      	ldr	r2, [pc, #124]	; (8003678 <HAL_DMA_IRQHandler+0x6b4>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d01d      	beq.n	800363c <HAL_DMA_IRQHandler+0x678>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a1d      	ldr	r2, [pc, #116]	; (800367c <HAL_DMA_IRQHandler+0x6b8>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d018      	beq.n	800363c <HAL_DMA_IRQHandler+0x678>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a1c      	ldr	r2, [pc, #112]	; (8003680 <HAL_DMA_IRQHandler+0x6bc>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d013      	beq.n	800363c <HAL_DMA_IRQHandler+0x678>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a1a      	ldr	r2, [pc, #104]	; (8003684 <HAL_DMA_IRQHandler+0x6c0>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d00e      	beq.n	800363c <HAL_DMA_IRQHandler+0x678>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a19      	ldr	r2, [pc, #100]	; (8003688 <HAL_DMA_IRQHandler+0x6c4>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d009      	beq.n	800363c <HAL_DMA_IRQHandler+0x678>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a17      	ldr	r2, [pc, #92]	; (800368c <HAL_DMA_IRQHandler+0x6c8>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d004      	beq.n	800363c <HAL_DMA_IRQHandler+0x678>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a16      	ldr	r2, [pc, #88]	; (8003690 <HAL_DMA_IRQHandler+0x6cc>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d12b      	bne.n	8003694 <HAL_DMA_IRQHandler+0x6d0>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0310 	and.w	r3, r3, #16
 8003646:	2b00      	cmp	r3, #0
 8003648:	bf14      	ite	ne
 800364a:	2301      	movne	r3, #1
 800364c:	2300      	moveq	r3, #0
 800364e:	b2db      	uxtb	r3, r3
 8003650:	e02a      	b.n	80036a8 <HAL_DMA_IRQHandler+0x6e4>
 8003652:	bf00      	nop
 8003654:	40020010 	.word	0x40020010
 8003658:	40020028 	.word	0x40020028
 800365c:	40020040 	.word	0x40020040
 8003660:	40020058 	.word	0x40020058
 8003664:	40020070 	.word	0x40020070
 8003668:	40020088 	.word	0x40020088
 800366c:	400200a0 	.word	0x400200a0
 8003670:	400200b8 	.word	0x400200b8
 8003674:	40020410 	.word	0x40020410
 8003678:	40020428 	.word	0x40020428
 800367c:	40020440 	.word	0x40020440
 8003680:	40020458 	.word	0x40020458
 8003684:	40020470 	.word	0x40020470
 8003688:	40020488 	.word	0x40020488
 800368c:	400204a0 	.word	0x400204a0
 8003690:	400204b8 	.word	0x400204b8
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	bf14      	ite	ne
 80036a2:	2301      	movne	r3, #1
 80036a4:	2300      	moveq	r3, #0
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 8087 	beq.w	80037bc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b2:	f003 031f 	and.w	r3, r3, #31
 80036b6:	2220      	movs	r2, #32
 80036b8:	409a      	lsls	r2, r3
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b04      	cmp	r3, #4
 80036c8:	d139      	bne.n	800373e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0216 	bic.w	r2, r2, #22
 80036d8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	695a      	ldr	r2, [r3, #20]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036e8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d103      	bne.n	80036fa <HAL_DMA_IRQHandler+0x736>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d007      	beq.n	800370a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 0208 	bic.w	r2, r2, #8
 8003708:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800370e:	f003 031f 	and.w	r3, r3, #31
 8003712:	223f      	movs	r2, #63	; 0x3f
 8003714:	409a      	lsls	r2, r3
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 834a 	beq.w	8003dc8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	4798      	blx	r3
          }
          return;
 800373c:	e344      	b.n	8003dc8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d018      	beq.n	800377e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d108      	bne.n	800376c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375e:	2b00      	cmp	r3, #0
 8003760:	d02c      	beq.n	80037bc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	4798      	blx	r3
 800376a:	e027      	b.n	80037bc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003770:	2b00      	cmp	r3, #0
 8003772:	d023      	beq.n	80037bc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	4798      	blx	r3
 800377c:	e01e      	b.n	80037bc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10f      	bne.n	80037ac <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0210 	bic.w	r2, r2, #16
 800379a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d003      	beq.n	80037bc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 8306 	beq.w	8003dd2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 8088 	beq.w	80038e4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2204      	movs	r2, #4
 80037d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a7a      	ldr	r2, [pc, #488]	; (80039cc <HAL_DMA_IRQHandler+0xa08>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d04a      	beq.n	800387c <HAL_DMA_IRQHandler+0x8b8>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a79      	ldr	r2, [pc, #484]	; (80039d0 <HAL_DMA_IRQHandler+0xa0c>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d045      	beq.n	800387c <HAL_DMA_IRQHandler+0x8b8>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a77      	ldr	r2, [pc, #476]	; (80039d4 <HAL_DMA_IRQHandler+0xa10>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d040      	beq.n	800387c <HAL_DMA_IRQHandler+0x8b8>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a76      	ldr	r2, [pc, #472]	; (80039d8 <HAL_DMA_IRQHandler+0xa14>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d03b      	beq.n	800387c <HAL_DMA_IRQHandler+0x8b8>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a74      	ldr	r2, [pc, #464]	; (80039dc <HAL_DMA_IRQHandler+0xa18>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d036      	beq.n	800387c <HAL_DMA_IRQHandler+0x8b8>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a73      	ldr	r2, [pc, #460]	; (80039e0 <HAL_DMA_IRQHandler+0xa1c>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d031      	beq.n	800387c <HAL_DMA_IRQHandler+0x8b8>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a71      	ldr	r2, [pc, #452]	; (80039e4 <HAL_DMA_IRQHandler+0xa20>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d02c      	beq.n	800387c <HAL_DMA_IRQHandler+0x8b8>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a70      	ldr	r2, [pc, #448]	; (80039e8 <HAL_DMA_IRQHandler+0xa24>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d027      	beq.n	800387c <HAL_DMA_IRQHandler+0x8b8>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a6e      	ldr	r2, [pc, #440]	; (80039ec <HAL_DMA_IRQHandler+0xa28>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d022      	beq.n	800387c <HAL_DMA_IRQHandler+0x8b8>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a6d      	ldr	r2, [pc, #436]	; (80039f0 <HAL_DMA_IRQHandler+0xa2c>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d01d      	beq.n	800387c <HAL_DMA_IRQHandler+0x8b8>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a6b      	ldr	r2, [pc, #428]	; (80039f4 <HAL_DMA_IRQHandler+0xa30>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d018      	beq.n	800387c <HAL_DMA_IRQHandler+0x8b8>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a6a      	ldr	r2, [pc, #424]	; (80039f8 <HAL_DMA_IRQHandler+0xa34>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d013      	beq.n	800387c <HAL_DMA_IRQHandler+0x8b8>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a68      	ldr	r2, [pc, #416]	; (80039fc <HAL_DMA_IRQHandler+0xa38>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d00e      	beq.n	800387c <HAL_DMA_IRQHandler+0x8b8>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a67      	ldr	r2, [pc, #412]	; (8003a00 <HAL_DMA_IRQHandler+0xa3c>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d009      	beq.n	800387c <HAL_DMA_IRQHandler+0x8b8>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a65      	ldr	r2, [pc, #404]	; (8003a04 <HAL_DMA_IRQHandler+0xa40>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d004      	beq.n	800387c <HAL_DMA_IRQHandler+0x8b8>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a64      	ldr	r2, [pc, #400]	; (8003a08 <HAL_DMA_IRQHandler+0xa44>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d108      	bne.n	800388e <HAL_DMA_IRQHandler+0x8ca>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0201 	bic.w	r2, r2, #1
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	e007      	b.n	800389e <HAL_DMA_IRQHandler+0x8da>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0201 	bic.w	r2, r2, #1
 800389c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	3301      	adds	r3, #1
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d307      	bcc.n	80038ba <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1f2      	bne.n	800389e <HAL_DMA_IRQHandler+0x8da>
 80038b8:	e000      	b.n	80038bc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80038ba:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d004      	beq.n	80038d4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2203      	movs	r2, #3
 80038ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80038d2:	e003      	b.n	80038dc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 8272 	beq.w	8003dd2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	4798      	blx	r3
 80038f6:	e26c      	b.n	8003dd2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a43      	ldr	r2, [pc, #268]	; (8003a0c <HAL_DMA_IRQHandler+0xa48>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d022      	beq.n	8003948 <HAL_DMA_IRQHandler+0x984>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a42      	ldr	r2, [pc, #264]	; (8003a10 <HAL_DMA_IRQHandler+0xa4c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d01d      	beq.n	8003948 <HAL_DMA_IRQHandler+0x984>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a40      	ldr	r2, [pc, #256]	; (8003a14 <HAL_DMA_IRQHandler+0xa50>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d018      	beq.n	8003948 <HAL_DMA_IRQHandler+0x984>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a3f      	ldr	r2, [pc, #252]	; (8003a18 <HAL_DMA_IRQHandler+0xa54>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d013      	beq.n	8003948 <HAL_DMA_IRQHandler+0x984>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a3d      	ldr	r2, [pc, #244]	; (8003a1c <HAL_DMA_IRQHandler+0xa58>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d00e      	beq.n	8003948 <HAL_DMA_IRQHandler+0x984>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a3c      	ldr	r2, [pc, #240]	; (8003a20 <HAL_DMA_IRQHandler+0xa5c>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d009      	beq.n	8003948 <HAL_DMA_IRQHandler+0x984>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a3a      	ldr	r2, [pc, #232]	; (8003a24 <HAL_DMA_IRQHandler+0xa60>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d004      	beq.n	8003948 <HAL_DMA_IRQHandler+0x984>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a39      	ldr	r2, [pc, #228]	; (8003a28 <HAL_DMA_IRQHandler+0xa64>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d101      	bne.n	800394c <HAL_DMA_IRQHandler+0x988>
 8003948:	2301      	movs	r3, #1
 800394a:	e000      	b.n	800394e <HAL_DMA_IRQHandler+0x98a>
 800394c:	2300      	movs	r3, #0
 800394e:	2b00      	cmp	r3, #0
 8003950:	f000 823f 	beq.w	8003dd2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003960:	f003 031f 	and.w	r3, r3, #31
 8003964:	2204      	movs	r2, #4
 8003966:	409a      	lsls	r2, r3
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	4013      	ands	r3, r2
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 80cd 	beq.w	8003b0c <HAL_DMA_IRQHandler+0xb48>
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 80c7 	beq.w	8003b0c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003982:	f003 031f 	and.w	r3, r3, #31
 8003986:	2204      	movs	r2, #4
 8003988:	409a      	lsls	r2, r3
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d049      	beq.n	8003a2c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d109      	bne.n	80039b6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f000 8210 	beq.w	8003dcc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039b4:	e20a      	b.n	8003dcc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f000 8206 	beq.w	8003dcc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039c8:	e200      	b.n	8003dcc <HAL_DMA_IRQHandler+0xe08>
 80039ca:	bf00      	nop
 80039cc:	40020010 	.word	0x40020010
 80039d0:	40020028 	.word	0x40020028
 80039d4:	40020040 	.word	0x40020040
 80039d8:	40020058 	.word	0x40020058
 80039dc:	40020070 	.word	0x40020070
 80039e0:	40020088 	.word	0x40020088
 80039e4:	400200a0 	.word	0x400200a0
 80039e8:	400200b8 	.word	0x400200b8
 80039ec:	40020410 	.word	0x40020410
 80039f0:	40020428 	.word	0x40020428
 80039f4:	40020440 	.word	0x40020440
 80039f8:	40020458 	.word	0x40020458
 80039fc:	40020470 	.word	0x40020470
 8003a00:	40020488 	.word	0x40020488
 8003a04:	400204a0 	.word	0x400204a0
 8003a08:	400204b8 	.word	0x400204b8
 8003a0c:	58025408 	.word	0x58025408
 8003a10:	5802541c 	.word	0x5802541c
 8003a14:	58025430 	.word	0x58025430
 8003a18:	58025444 	.word	0x58025444
 8003a1c:	58025458 	.word	0x58025458
 8003a20:	5802546c 	.word	0x5802546c
 8003a24:	58025480 	.word	0x58025480
 8003a28:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	f003 0320 	and.w	r3, r3, #32
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d160      	bne.n	8003af8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a7f      	ldr	r2, [pc, #508]	; (8003c38 <HAL_DMA_IRQHandler+0xc74>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d04a      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0xb12>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a7d      	ldr	r2, [pc, #500]	; (8003c3c <HAL_DMA_IRQHandler+0xc78>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d045      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0xb12>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a7c      	ldr	r2, [pc, #496]	; (8003c40 <HAL_DMA_IRQHandler+0xc7c>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d040      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0xb12>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a7a      	ldr	r2, [pc, #488]	; (8003c44 <HAL_DMA_IRQHandler+0xc80>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d03b      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0xb12>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a79      	ldr	r2, [pc, #484]	; (8003c48 <HAL_DMA_IRQHandler+0xc84>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d036      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0xb12>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a77      	ldr	r2, [pc, #476]	; (8003c4c <HAL_DMA_IRQHandler+0xc88>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d031      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0xb12>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a76      	ldr	r2, [pc, #472]	; (8003c50 <HAL_DMA_IRQHandler+0xc8c>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d02c      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0xb12>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a74      	ldr	r2, [pc, #464]	; (8003c54 <HAL_DMA_IRQHandler+0xc90>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d027      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0xb12>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a73      	ldr	r2, [pc, #460]	; (8003c58 <HAL_DMA_IRQHandler+0xc94>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d022      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0xb12>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a71      	ldr	r2, [pc, #452]	; (8003c5c <HAL_DMA_IRQHandler+0xc98>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d01d      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0xb12>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a70      	ldr	r2, [pc, #448]	; (8003c60 <HAL_DMA_IRQHandler+0xc9c>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d018      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0xb12>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a6e      	ldr	r2, [pc, #440]	; (8003c64 <HAL_DMA_IRQHandler+0xca0>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d013      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0xb12>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a6d      	ldr	r2, [pc, #436]	; (8003c68 <HAL_DMA_IRQHandler+0xca4>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d00e      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0xb12>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a6b      	ldr	r2, [pc, #428]	; (8003c6c <HAL_DMA_IRQHandler+0xca8>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d009      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0xb12>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a6a      	ldr	r2, [pc, #424]	; (8003c70 <HAL_DMA_IRQHandler+0xcac>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d004      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0xb12>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a68      	ldr	r2, [pc, #416]	; (8003c74 <HAL_DMA_IRQHandler+0xcb0>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d108      	bne.n	8003ae8 <HAL_DMA_IRQHandler+0xb24>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 0208 	bic.w	r2, r2, #8
 8003ae4:	601a      	str	r2, [r3, #0]
 8003ae6:	e007      	b.n	8003af8 <HAL_DMA_IRQHandler+0xb34>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 0204 	bic.w	r2, r2, #4
 8003af6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f000 8165 	beq.w	8003dcc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b0a:	e15f      	b.n	8003dcc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b10:	f003 031f 	and.w	r3, r3, #31
 8003b14:	2202      	movs	r2, #2
 8003b16:	409a      	lsls	r2, r3
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 80c5 	beq.w	8003cac <HAL_DMA_IRQHandler+0xce8>
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 80bf 	beq.w	8003cac <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b32:	f003 031f 	and.w	r3, r3, #31
 8003b36:	2202      	movs	r2, #2
 8003b38:	409a      	lsls	r2, r3
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d018      	beq.n	8003b7a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d109      	bne.n	8003b66 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 813a 	beq.w	8003dd0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b64:	e134      	b.n	8003dd0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 8130 	beq.w	8003dd0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b78:	e12a      	b.n	8003dd0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	f003 0320 	and.w	r3, r3, #32
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f040 8089 	bne.w	8003c98 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a2b      	ldr	r2, [pc, #172]	; (8003c38 <HAL_DMA_IRQHandler+0xc74>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d04a      	beq.n	8003c26 <HAL_DMA_IRQHandler+0xc62>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a29      	ldr	r2, [pc, #164]	; (8003c3c <HAL_DMA_IRQHandler+0xc78>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d045      	beq.n	8003c26 <HAL_DMA_IRQHandler+0xc62>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a28      	ldr	r2, [pc, #160]	; (8003c40 <HAL_DMA_IRQHandler+0xc7c>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d040      	beq.n	8003c26 <HAL_DMA_IRQHandler+0xc62>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a26      	ldr	r2, [pc, #152]	; (8003c44 <HAL_DMA_IRQHandler+0xc80>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d03b      	beq.n	8003c26 <HAL_DMA_IRQHandler+0xc62>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a25      	ldr	r2, [pc, #148]	; (8003c48 <HAL_DMA_IRQHandler+0xc84>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d036      	beq.n	8003c26 <HAL_DMA_IRQHandler+0xc62>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a23      	ldr	r2, [pc, #140]	; (8003c4c <HAL_DMA_IRQHandler+0xc88>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d031      	beq.n	8003c26 <HAL_DMA_IRQHandler+0xc62>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a22      	ldr	r2, [pc, #136]	; (8003c50 <HAL_DMA_IRQHandler+0xc8c>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d02c      	beq.n	8003c26 <HAL_DMA_IRQHandler+0xc62>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a20      	ldr	r2, [pc, #128]	; (8003c54 <HAL_DMA_IRQHandler+0xc90>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d027      	beq.n	8003c26 <HAL_DMA_IRQHandler+0xc62>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a1f      	ldr	r2, [pc, #124]	; (8003c58 <HAL_DMA_IRQHandler+0xc94>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d022      	beq.n	8003c26 <HAL_DMA_IRQHandler+0xc62>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a1d      	ldr	r2, [pc, #116]	; (8003c5c <HAL_DMA_IRQHandler+0xc98>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d01d      	beq.n	8003c26 <HAL_DMA_IRQHandler+0xc62>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a1c      	ldr	r2, [pc, #112]	; (8003c60 <HAL_DMA_IRQHandler+0xc9c>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d018      	beq.n	8003c26 <HAL_DMA_IRQHandler+0xc62>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a1a      	ldr	r2, [pc, #104]	; (8003c64 <HAL_DMA_IRQHandler+0xca0>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d013      	beq.n	8003c26 <HAL_DMA_IRQHandler+0xc62>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a19      	ldr	r2, [pc, #100]	; (8003c68 <HAL_DMA_IRQHandler+0xca4>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d00e      	beq.n	8003c26 <HAL_DMA_IRQHandler+0xc62>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a17      	ldr	r2, [pc, #92]	; (8003c6c <HAL_DMA_IRQHandler+0xca8>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d009      	beq.n	8003c26 <HAL_DMA_IRQHandler+0xc62>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a16      	ldr	r2, [pc, #88]	; (8003c70 <HAL_DMA_IRQHandler+0xcac>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d004      	beq.n	8003c26 <HAL_DMA_IRQHandler+0xc62>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a14      	ldr	r2, [pc, #80]	; (8003c74 <HAL_DMA_IRQHandler+0xcb0>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d128      	bne.n	8003c78 <HAL_DMA_IRQHandler+0xcb4>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 0214 	bic.w	r2, r2, #20
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	e027      	b.n	8003c88 <HAL_DMA_IRQHandler+0xcc4>
 8003c38:	40020010 	.word	0x40020010
 8003c3c:	40020028 	.word	0x40020028
 8003c40:	40020040 	.word	0x40020040
 8003c44:	40020058 	.word	0x40020058
 8003c48:	40020070 	.word	0x40020070
 8003c4c:	40020088 	.word	0x40020088
 8003c50:	400200a0 	.word	0x400200a0
 8003c54:	400200b8 	.word	0x400200b8
 8003c58:	40020410 	.word	0x40020410
 8003c5c:	40020428 	.word	0x40020428
 8003c60:	40020440 	.word	0x40020440
 8003c64:	40020458 	.word	0x40020458
 8003c68:	40020470 	.word	0x40020470
 8003c6c:	40020488 	.word	0x40020488
 8003c70:	400204a0 	.word	0x400204a0
 8003c74:	400204b8 	.word	0x400204b8
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 020a 	bic.w	r2, r2, #10
 8003c86:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 8097 	beq.w	8003dd0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003caa:	e091      	b.n	8003dd0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb0:	f003 031f 	and.w	r3, r3, #31
 8003cb4:	2208      	movs	r2, #8
 8003cb6:	409a      	lsls	r2, r3
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 8088 	beq.w	8003dd2 <HAL_DMA_IRQHandler+0xe0e>
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	f003 0308 	and.w	r3, r3, #8
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 8082 	beq.w	8003dd2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a41      	ldr	r2, [pc, #260]	; (8003dd8 <HAL_DMA_IRQHandler+0xe14>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d04a      	beq.n	8003d6e <HAL_DMA_IRQHandler+0xdaa>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a3f      	ldr	r2, [pc, #252]	; (8003ddc <HAL_DMA_IRQHandler+0xe18>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d045      	beq.n	8003d6e <HAL_DMA_IRQHandler+0xdaa>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a3e      	ldr	r2, [pc, #248]	; (8003de0 <HAL_DMA_IRQHandler+0xe1c>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d040      	beq.n	8003d6e <HAL_DMA_IRQHandler+0xdaa>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a3c      	ldr	r2, [pc, #240]	; (8003de4 <HAL_DMA_IRQHandler+0xe20>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d03b      	beq.n	8003d6e <HAL_DMA_IRQHandler+0xdaa>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a3b      	ldr	r2, [pc, #236]	; (8003de8 <HAL_DMA_IRQHandler+0xe24>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d036      	beq.n	8003d6e <HAL_DMA_IRQHandler+0xdaa>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a39      	ldr	r2, [pc, #228]	; (8003dec <HAL_DMA_IRQHandler+0xe28>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d031      	beq.n	8003d6e <HAL_DMA_IRQHandler+0xdaa>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a38      	ldr	r2, [pc, #224]	; (8003df0 <HAL_DMA_IRQHandler+0xe2c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d02c      	beq.n	8003d6e <HAL_DMA_IRQHandler+0xdaa>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a36      	ldr	r2, [pc, #216]	; (8003df4 <HAL_DMA_IRQHandler+0xe30>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d027      	beq.n	8003d6e <HAL_DMA_IRQHandler+0xdaa>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a35      	ldr	r2, [pc, #212]	; (8003df8 <HAL_DMA_IRQHandler+0xe34>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d022      	beq.n	8003d6e <HAL_DMA_IRQHandler+0xdaa>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a33      	ldr	r2, [pc, #204]	; (8003dfc <HAL_DMA_IRQHandler+0xe38>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d01d      	beq.n	8003d6e <HAL_DMA_IRQHandler+0xdaa>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a32      	ldr	r2, [pc, #200]	; (8003e00 <HAL_DMA_IRQHandler+0xe3c>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d018      	beq.n	8003d6e <HAL_DMA_IRQHandler+0xdaa>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a30      	ldr	r2, [pc, #192]	; (8003e04 <HAL_DMA_IRQHandler+0xe40>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d013      	beq.n	8003d6e <HAL_DMA_IRQHandler+0xdaa>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a2f      	ldr	r2, [pc, #188]	; (8003e08 <HAL_DMA_IRQHandler+0xe44>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d00e      	beq.n	8003d6e <HAL_DMA_IRQHandler+0xdaa>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a2d      	ldr	r2, [pc, #180]	; (8003e0c <HAL_DMA_IRQHandler+0xe48>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d009      	beq.n	8003d6e <HAL_DMA_IRQHandler+0xdaa>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a2c      	ldr	r2, [pc, #176]	; (8003e10 <HAL_DMA_IRQHandler+0xe4c>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d004      	beq.n	8003d6e <HAL_DMA_IRQHandler+0xdaa>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a2a      	ldr	r2, [pc, #168]	; (8003e14 <HAL_DMA_IRQHandler+0xe50>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d108      	bne.n	8003d80 <HAL_DMA_IRQHandler+0xdbc>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 021c 	bic.w	r2, r2, #28
 8003d7c:	601a      	str	r2, [r3, #0]
 8003d7e:	e007      	b.n	8003d90 <HAL_DMA_IRQHandler+0xdcc>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f022 020e 	bic.w	r2, r2, #14
 8003d8e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d94:	f003 031f 	and.w	r3, r3, #31
 8003d98:	2201      	movs	r2, #1
 8003d9a:	409a      	lsls	r2, r3
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d009      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	4798      	blx	r3
 8003dc6:	e004      	b.n	8003dd2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003dc8:	bf00      	nop
 8003dca:	e002      	b.n	8003dd2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dcc:	bf00      	nop
 8003dce:	e000      	b.n	8003dd2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dd0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003dd2:	3728      	adds	r7, #40	; 0x28
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40020010 	.word	0x40020010
 8003ddc:	40020028 	.word	0x40020028
 8003de0:	40020040 	.word	0x40020040
 8003de4:	40020058 	.word	0x40020058
 8003de8:	40020070 	.word	0x40020070
 8003dec:	40020088 	.word	0x40020088
 8003df0:	400200a0 	.word	0x400200a0
 8003df4:	400200b8 	.word	0x400200b8
 8003df8:	40020410 	.word	0x40020410
 8003dfc:	40020428 	.word	0x40020428
 8003e00:	40020440 	.word	0x40020440
 8003e04:	40020458 	.word	0x40020458
 8003e08:	40020470 	.word	0x40020470
 8003e0c:	40020488 	.word	0x40020488
 8003e10:	400204a0 	.word	0x400204a0
 8003e14:	400204b8 	.word	0x400204b8

08003e18 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b087      	sub	sp, #28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
 8003e24:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e2a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e30:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a7f      	ldr	r2, [pc, #508]	; (8004034 <DMA_SetConfig+0x21c>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d072      	beq.n	8003f22 <DMA_SetConfig+0x10a>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a7d      	ldr	r2, [pc, #500]	; (8004038 <DMA_SetConfig+0x220>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d06d      	beq.n	8003f22 <DMA_SetConfig+0x10a>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a7c      	ldr	r2, [pc, #496]	; (800403c <DMA_SetConfig+0x224>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d068      	beq.n	8003f22 <DMA_SetConfig+0x10a>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a7a      	ldr	r2, [pc, #488]	; (8004040 <DMA_SetConfig+0x228>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d063      	beq.n	8003f22 <DMA_SetConfig+0x10a>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a79      	ldr	r2, [pc, #484]	; (8004044 <DMA_SetConfig+0x22c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d05e      	beq.n	8003f22 <DMA_SetConfig+0x10a>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a77      	ldr	r2, [pc, #476]	; (8004048 <DMA_SetConfig+0x230>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d059      	beq.n	8003f22 <DMA_SetConfig+0x10a>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a76      	ldr	r2, [pc, #472]	; (800404c <DMA_SetConfig+0x234>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d054      	beq.n	8003f22 <DMA_SetConfig+0x10a>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a74      	ldr	r2, [pc, #464]	; (8004050 <DMA_SetConfig+0x238>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d04f      	beq.n	8003f22 <DMA_SetConfig+0x10a>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a73      	ldr	r2, [pc, #460]	; (8004054 <DMA_SetConfig+0x23c>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d04a      	beq.n	8003f22 <DMA_SetConfig+0x10a>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a71      	ldr	r2, [pc, #452]	; (8004058 <DMA_SetConfig+0x240>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d045      	beq.n	8003f22 <DMA_SetConfig+0x10a>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a70      	ldr	r2, [pc, #448]	; (800405c <DMA_SetConfig+0x244>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d040      	beq.n	8003f22 <DMA_SetConfig+0x10a>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a6e      	ldr	r2, [pc, #440]	; (8004060 <DMA_SetConfig+0x248>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d03b      	beq.n	8003f22 <DMA_SetConfig+0x10a>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a6d      	ldr	r2, [pc, #436]	; (8004064 <DMA_SetConfig+0x24c>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d036      	beq.n	8003f22 <DMA_SetConfig+0x10a>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a6b      	ldr	r2, [pc, #428]	; (8004068 <DMA_SetConfig+0x250>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d031      	beq.n	8003f22 <DMA_SetConfig+0x10a>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a6a      	ldr	r2, [pc, #424]	; (800406c <DMA_SetConfig+0x254>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d02c      	beq.n	8003f22 <DMA_SetConfig+0x10a>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a68      	ldr	r2, [pc, #416]	; (8004070 <DMA_SetConfig+0x258>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d027      	beq.n	8003f22 <DMA_SetConfig+0x10a>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a67      	ldr	r2, [pc, #412]	; (8004074 <DMA_SetConfig+0x25c>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d022      	beq.n	8003f22 <DMA_SetConfig+0x10a>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a65      	ldr	r2, [pc, #404]	; (8004078 <DMA_SetConfig+0x260>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d01d      	beq.n	8003f22 <DMA_SetConfig+0x10a>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a64      	ldr	r2, [pc, #400]	; (800407c <DMA_SetConfig+0x264>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d018      	beq.n	8003f22 <DMA_SetConfig+0x10a>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a62      	ldr	r2, [pc, #392]	; (8004080 <DMA_SetConfig+0x268>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d013      	beq.n	8003f22 <DMA_SetConfig+0x10a>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a61      	ldr	r2, [pc, #388]	; (8004084 <DMA_SetConfig+0x26c>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d00e      	beq.n	8003f22 <DMA_SetConfig+0x10a>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a5f      	ldr	r2, [pc, #380]	; (8004088 <DMA_SetConfig+0x270>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d009      	beq.n	8003f22 <DMA_SetConfig+0x10a>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a5e      	ldr	r2, [pc, #376]	; (800408c <DMA_SetConfig+0x274>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d004      	beq.n	8003f22 <DMA_SetConfig+0x10a>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a5c      	ldr	r2, [pc, #368]	; (8004090 <DMA_SetConfig+0x278>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d101      	bne.n	8003f26 <DMA_SetConfig+0x10e>
 8003f22:	2301      	movs	r3, #1
 8003f24:	e000      	b.n	8003f28 <DMA_SetConfig+0x110>
 8003f26:	2300      	movs	r3, #0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00d      	beq.n	8003f48 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003f34:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d004      	beq.n	8003f48 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003f46:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a39      	ldr	r2, [pc, #228]	; (8004034 <DMA_SetConfig+0x21c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d04a      	beq.n	8003fe8 <DMA_SetConfig+0x1d0>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a38      	ldr	r2, [pc, #224]	; (8004038 <DMA_SetConfig+0x220>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d045      	beq.n	8003fe8 <DMA_SetConfig+0x1d0>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a36      	ldr	r2, [pc, #216]	; (800403c <DMA_SetConfig+0x224>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d040      	beq.n	8003fe8 <DMA_SetConfig+0x1d0>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a35      	ldr	r2, [pc, #212]	; (8004040 <DMA_SetConfig+0x228>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d03b      	beq.n	8003fe8 <DMA_SetConfig+0x1d0>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a33      	ldr	r2, [pc, #204]	; (8004044 <DMA_SetConfig+0x22c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d036      	beq.n	8003fe8 <DMA_SetConfig+0x1d0>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a32      	ldr	r2, [pc, #200]	; (8004048 <DMA_SetConfig+0x230>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d031      	beq.n	8003fe8 <DMA_SetConfig+0x1d0>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a30      	ldr	r2, [pc, #192]	; (800404c <DMA_SetConfig+0x234>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d02c      	beq.n	8003fe8 <DMA_SetConfig+0x1d0>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a2f      	ldr	r2, [pc, #188]	; (8004050 <DMA_SetConfig+0x238>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d027      	beq.n	8003fe8 <DMA_SetConfig+0x1d0>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a2d      	ldr	r2, [pc, #180]	; (8004054 <DMA_SetConfig+0x23c>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d022      	beq.n	8003fe8 <DMA_SetConfig+0x1d0>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a2c      	ldr	r2, [pc, #176]	; (8004058 <DMA_SetConfig+0x240>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d01d      	beq.n	8003fe8 <DMA_SetConfig+0x1d0>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a2a      	ldr	r2, [pc, #168]	; (800405c <DMA_SetConfig+0x244>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d018      	beq.n	8003fe8 <DMA_SetConfig+0x1d0>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a29      	ldr	r2, [pc, #164]	; (8004060 <DMA_SetConfig+0x248>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d013      	beq.n	8003fe8 <DMA_SetConfig+0x1d0>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a27      	ldr	r2, [pc, #156]	; (8004064 <DMA_SetConfig+0x24c>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d00e      	beq.n	8003fe8 <DMA_SetConfig+0x1d0>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a26      	ldr	r2, [pc, #152]	; (8004068 <DMA_SetConfig+0x250>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d009      	beq.n	8003fe8 <DMA_SetConfig+0x1d0>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a24      	ldr	r2, [pc, #144]	; (800406c <DMA_SetConfig+0x254>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d004      	beq.n	8003fe8 <DMA_SetConfig+0x1d0>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a23      	ldr	r2, [pc, #140]	; (8004070 <DMA_SetConfig+0x258>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d101      	bne.n	8003fec <DMA_SetConfig+0x1d4>
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e000      	b.n	8003fee <DMA_SetConfig+0x1d6>
 8003fec:	2300      	movs	r3, #0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d059      	beq.n	80040a6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff6:	f003 031f 	and.w	r3, r3, #31
 8003ffa:	223f      	movs	r2, #63	; 0x3f
 8003ffc:	409a      	lsls	r2, r3
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004010:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	2b40      	cmp	r3, #64	; 0x40
 8004020:	d138      	bne.n	8004094 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004032:	e086      	b.n	8004142 <DMA_SetConfig+0x32a>
 8004034:	40020010 	.word	0x40020010
 8004038:	40020028 	.word	0x40020028
 800403c:	40020040 	.word	0x40020040
 8004040:	40020058 	.word	0x40020058
 8004044:	40020070 	.word	0x40020070
 8004048:	40020088 	.word	0x40020088
 800404c:	400200a0 	.word	0x400200a0
 8004050:	400200b8 	.word	0x400200b8
 8004054:	40020410 	.word	0x40020410
 8004058:	40020428 	.word	0x40020428
 800405c:	40020440 	.word	0x40020440
 8004060:	40020458 	.word	0x40020458
 8004064:	40020470 	.word	0x40020470
 8004068:	40020488 	.word	0x40020488
 800406c:	400204a0 	.word	0x400204a0
 8004070:	400204b8 	.word	0x400204b8
 8004074:	58025408 	.word	0x58025408
 8004078:	5802541c 	.word	0x5802541c
 800407c:	58025430 	.word	0x58025430
 8004080:	58025444 	.word	0x58025444
 8004084:	58025458 	.word	0x58025458
 8004088:	5802546c 	.word	0x5802546c
 800408c:	58025480 	.word	0x58025480
 8004090:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	60da      	str	r2, [r3, #12]
}
 80040a4:	e04d      	b.n	8004142 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a29      	ldr	r2, [pc, #164]	; (8004150 <DMA_SetConfig+0x338>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d022      	beq.n	80040f6 <DMA_SetConfig+0x2de>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a27      	ldr	r2, [pc, #156]	; (8004154 <DMA_SetConfig+0x33c>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d01d      	beq.n	80040f6 <DMA_SetConfig+0x2de>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a26      	ldr	r2, [pc, #152]	; (8004158 <DMA_SetConfig+0x340>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d018      	beq.n	80040f6 <DMA_SetConfig+0x2de>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a24      	ldr	r2, [pc, #144]	; (800415c <DMA_SetConfig+0x344>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d013      	beq.n	80040f6 <DMA_SetConfig+0x2de>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a23      	ldr	r2, [pc, #140]	; (8004160 <DMA_SetConfig+0x348>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d00e      	beq.n	80040f6 <DMA_SetConfig+0x2de>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a21      	ldr	r2, [pc, #132]	; (8004164 <DMA_SetConfig+0x34c>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d009      	beq.n	80040f6 <DMA_SetConfig+0x2de>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a20      	ldr	r2, [pc, #128]	; (8004168 <DMA_SetConfig+0x350>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d004      	beq.n	80040f6 <DMA_SetConfig+0x2de>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a1e      	ldr	r2, [pc, #120]	; (800416c <DMA_SetConfig+0x354>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d101      	bne.n	80040fa <DMA_SetConfig+0x2e2>
 80040f6:	2301      	movs	r3, #1
 80040f8:	e000      	b.n	80040fc <DMA_SetConfig+0x2e4>
 80040fa:	2300      	movs	r3, #0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d020      	beq.n	8004142 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004104:	f003 031f 	and.w	r3, r3, #31
 8004108:	2201      	movs	r2, #1
 800410a:	409a      	lsls	r2, r3
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	2b40      	cmp	r3, #64	; 0x40
 800411e:	d108      	bne.n	8004132 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	60da      	str	r2, [r3, #12]
}
 8004130:	e007      	b.n	8004142 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	60da      	str	r2, [r3, #12]
}
 8004142:	bf00      	nop
 8004144:	371c      	adds	r7, #28
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	58025408 	.word	0x58025408
 8004154:	5802541c 	.word	0x5802541c
 8004158:	58025430 	.word	0x58025430
 800415c:	58025444 	.word	0x58025444
 8004160:	58025458 	.word	0x58025458
 8004164:	5802546c 	.word	0x5802546c
 8004168:	58025480 	.word	0x58025480
 800416c:	58025494 	.word	0x58025494

08004170 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a42      	ldr	r2, [pc, #264]	; (8004288 <DMA_CalcBaseAndBitshift+0x118>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d04a      	beq.n	8004218 <DMA_CalcBaseAndBitshift+0xa8>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a41      	ldr	r2, [pc, #260]	; (800428c <DMA_CalcBaseAndBitshift+0x11c>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d045      	beq.n	8004218 <DMA_CalcBaseAndBitshift+0xa8>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a3f      	ldr	r2, [pc, #252]	; (8004290 <DMA_CalcBaseAndBitshift+0x120>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d040      	beq.n	8004218 <DMA_CalcBaseAndBitshift+0xa8>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a3e      	ldr	r2, [pc, #248]	; (8004294 <DMA_CalcBaseAndBitshift+0x124>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d03b      	beq.n	8004218 <DMA_CalcBaseAndBitshift+0xa8>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a3c      	ldr	r2, [pc, #240]	; (8004298 <DMA_CalcBaseAndBitshift+0x128>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d036      	beq.n	8004218 <DMA_CalcBaseAndBitshift+0xa8>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a3b      	ldr	r2, [pc, #236]	; (800429c <DMA_CalcBaseAndBitshift+0x12c>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d031      	beq.n	8004218 <DMA_CalcBaseAndBitshift+0xa8>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a39      	ldr	r2, [pc, #228]	; (80042a0 <DMA_CalcBaseAndBitshift+0x130>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d02c      	beq.n	8004218 <DMA_CalcBaseAndBitshift+0xa8>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a38      	ldr	r2, [pc, #224]	; (80042a4 <DMA_CalcBaseAndBitshift+0x134>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d027      	beq.n	8004218 <DMA_CalcBaseAndBitshift+0xa8>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a36      	ldr	r2, [pc, #216]	; (80042a8 <DMA_CalcBaseAndBitshift+0x138>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d022      	beq.n	8004218 <DMA_CalcBaseAndBitshift+0xa8>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a35      	ldr	r2, [pc, #212]	; (80042ac <DMA_CalcBaseAndBitshift+0x13c>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d01d      	beq.n	8004218 <DMA_CalcBaseAndBitshift+0xa8>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a33      	ldr	r2, [pc, #204]	; (80042b0 <DMA_CalcBaseAndBitshift+0x140>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d018      	beq.n	8004218 <DMA_CalcBaseAndBitshift+0xa8>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a32      	ldr	r2, [pc, #200]	; (80042b4 <DMA_CalcBaseAndBitshift+0x144>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d013      	beq.n	8004218 <DMA_CalcBaseAndBitshift+0xa8>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a30      	ldr	r2, [pc, #192]	; (80042b8 <DMA_CalcBaseAndBitshift+0x148>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d00e      	beq.n	8004218 <DMA_CalcBaseAndBitshift+0xa8>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a2f      	ldr	r2, [pc, #188]	; (80042bc <DMA_CalcBaseAndBitshift+0x14c>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d009      	beq.n	8004218 <DMA_CalcBaseAndBitshift+0xa8>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a2d      	ldr	r2, [pc, #180]	; (80042c0 <DMA_CalcBaseAndBitshift+0x150>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d004      	beq.n	8004218 <DMA_CalcBaseAndBitshift+0xa8>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a2c      	ldr	r2, [pc, #176]	; (80042c4 <DMA_CalcBaseAndBitshift+0x154>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d101      	bne.n	800421c <DMA_CalcBaseAndBitshift+0xac>
 8004218:	2301      	movs	r3, #1
 800421a:	e000      	b.n	800421e <DMA_CalcBaseAndBitshift+0xae>
 800421c:	2300      	movs	r3, #0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d024      	beq.n	800426c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	b2db      	uxtb	r3, r3
 8004228:	3b10      	subs	r3, #16
 800422a:	4a27      	ldr	r2, [pc, #156]	; (80042c8 <DMA_CalcBaseAndBitshift+0x158>)
 800422c:	fba2 2303 	umull	r2, r3, r2, r3
 8004230:	091b      	lsrs	r3, r3, #4
 8004232:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	4a24      	ldr	r2, [pc, #144]	; (80042cc <DMA_CalcBaseAndBitshift+0x15c>)
 800423c:	5cd3      	ldrb	r3, [r2, r3]
 800423e:	461a      	mov	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2b03      	cmp	r3, #3
 8004248:	d908      	bls.n	800425c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	461a      	mov	r2, r3
 8004250:	4b1f      	ldr	r3, [pc, #124]	; (80042d0 <DMA_CalcBaseAndBitshift+0x160>)
 8004252:	4013      	ands	r3, r2
 8004254:	1d1a      	adds	r2, r3, #4
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	659a      	str	r2, [r3, #88]	; 0x58
 800425a:	e00d      	b.n	8004278 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	461a      	mov	r2, r3
 8004262:	4b1b      	ldr	r3, [pc, #108]	; (80042d0 <DMA_CalcBaseAndBitshift+0x160>)
 8004264:	4013      	ands	r3, r2
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	6593      	str	r3, [r2, #88]	; 0x58
 800426a:	e005      	b.n	8004278 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800427c:	4618      	mov	r0, r3
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	40020010 	.word	0x40020010
 800428c:	40020028 	.word	0x40020028
 8004290:	40020040 	.word	0x40020040
 8004294:	40020058 	.word	0x40020058
 8004298:	40020070 	.word	0x40020070
 800429c:	40020088 	.word	0x40020088
 80042a0:	400200a0 	.word	0x400200a0
 80042a4:	400200b8 	.word	0x400200b8
 80042a8:	40020410 	.word	0x40020410
 80042ac:	40020428 	.word	0x40020428
 80042b0:	40020440 	.word	0x40020440
 80042b4:	40020458 	.word	0x40020458
 80042b8:	40020470 	.word	0x40020470
 80042bc:	40020488 	.word	0x40020488
 80042c0:	400204a0 	.word	0x400204a0
 80042c4:	400204b8 	.word	0x400204b8
 80042c8:	aaaaaaab 	.word	0xaaaaaaab
 80042cc:	0800bfe8 	.word	0x0800bfe8
 80042d0:	fffffc00 	.word	0xfffffc00

080042d4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042dc:	2300      	movs	r3, #0
 80042de:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d120      	bne.n	800432a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ec:	2b03      	cmp	r3, #3
 80042ee:	d858      	bhi.n	80043a2 <DMA_CheckFifoParam+0xce>
 80042f0:	a201      	add	r2, pc, #4	; (adr r2, 80042f8 <DMA_CheckFifoParam+0x24>)
 80042f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f6:	bf00      	nop
 80042f8:	08004309 	.word	0x08004309
 80042fc:	0800431b 	.word	0x0800431b
 8004300:	08004309 	.word	0x08004309
 8004304:	080043a3 	.word	0x080043a3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d048      	beq.n	80043a6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004318:	e045      	b.n	80043a6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004322:	d142      	bne.n	80043aa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004328:	e03f      	b.n	80043aa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004332:	d123      	bne.n	800437c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004338:	2b03      	cmp	r3, #3
 800433a:	d838      	bhi.n	80043ae <DMA_CheckFifoParam+0xda>
 800433c:	a201      	add	r2, pc, #4	; (adr r2, 8004344 <DMA_CheckFifoParam+0x70>)
 800433e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004342:	bf00      	nop
 8004344:	08004355 	.word	0x08004355
 8004348:	0800435b 	.word	0x0800435b
 800434c:	08004355 	.word	0x08004355
 8004350:	0800436d 	.word	0x0800436d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	73fb      	strb	r3, [r7, #15]
        break;
 8004358:	e030      	b.n	80043bc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d025      	beq.n	80043b2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800436a:	e022      	b.n	80043b2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004370:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004374:	d11f      	bne.n	80043b6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800437a:	e01c      	b.n	80043b6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004380:	2b02      	cmp	r3, #2
 8004382:	d902      	bls.n	800438a <DMA_CheckFifoParam+0xb6>
 8004384:	2b03      	cmp	r3, #3
 8004386:	d003      	beq.n	8004390 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004388:	e018      	b.n	80043bc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	73fb      	strb	r3, [r7, #15]
        break;
 800438e:	e015      	b.n	80043bc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004394:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00e      	beq.n	80043ba <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	73fb      	strb	r3, [r7, #15]
    break;
 80043a0:	e00b      	b.n	80043ba <DMA_CheckFifoParam+0xe6>
        break;
 80043a2:	bf00      	nop
 80043a4:	e00a      	b.n	80043bc <DMA_CheckFifoParam+0xe8>
        break;
 80043a6:	bf00      	nop
 80043a8:	e008      	b.n	80043bc <DMA_CheckFifoParam+0xe8>
        break;
 80043aa:	bf00      	nop
 80043ac:	e006      	b.n	80043bc <DMA_CheckFifoParam+0xe8>
        break;
 80043ae:	bf00      	nop
 80043b0:	e004      	b.n	80043bc <DMA_CheckFifoParam+0xe8>
        break;
 80043b2:	bf00      	nop
 80043b4:	e002      	b.n	80043bc <DMA_CheckFifoParam+0xe8>
        break;
 80043b6:	bf00      	nop
 80043b8:	e000      	b.n	80043bc <DMA_CheckFifoParam+0xe8>
    break;
 80043ba:	bf00      	nop
    }
  }

  return status;
 80043bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop

080043cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a38      	ldr	r2, [pc, #224]	; (80044c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d022      	beq.n	800442a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a36      	ldr	r2, [pc, #216]	; (80044c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d01d      	beq.n	800442a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a35      	ldr	r2, [pc, #212]	; (80044c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d018      	beq.n	800442a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a33      	ldr	r2, [pc, #204]	; (80044cc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d013      	beq.n	800442a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a32      	ldr	r2, [pc, #200]	; (80044d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d00e      	beq.n	800442a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a30      	ldr	r2, [pc, #192]	; (80044d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d009      	beq.n	800442a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a2f      	ldr	r2, [pc, #188]	; (80044d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d004      	beq.n	800442a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a2d      	ldr	r2, [pc, #180]	; (80044dc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d101      	bne.n	800442e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800442a:	2301      	movs	r3, #1
 800442c:	e000      	b.n	8004430 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800442e:	2300      	movs	r3, #0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d01a      	beq.n	800446a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	b2db      	uxtb	r3, r3
 800443a:	3b08      	subs	r3, #8
 800443c:	4a28      	ldr	r2, [pc, #160]	; (80044e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800443e:	fba2 2303 	umull	r2, r3, r2, r3
 8004442:	091b      	lsrs	r3, r3, #4
 8004444:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	4b26      	ldr	r3, [pc, #152]	; (80044e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800444a:	4413      	add	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	461a      	mov	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a24      	ldr	r2, [pc, #144]	; (80044e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004458:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f003 031f 	and.w	r3, r3, #31
 8004460:	2201      	movs	r2, #1
 8004462:	409a      	lsls	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004468:	e024      	b.n	80044b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	b2db      	uxtb	r3, r3
 8004470:	3b10      	subs	r3, #16
 8004472:	4a1e      	ldr	r2, [pc, #120]	; (80044ec <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004474:	fba2 2303 	umull	r2, r3, r2, r3
 8004478:	091b      	lsrs	r3, r3, #4
 800447a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	4a1c      	ldr	r2, [pc, #112]	; (80044f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d806      	bhi.n	8004492 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	4a1b      	ldr	r2, [pc, #108]	; (80044f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d902      	bls.n	8004492 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	3308      	adds	r3, #8
 8004490:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	4b18      	ldr	r3, [pc, #96]	; (80044f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004496:	4413      	add	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	461a      	mov	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a16      	ldr	r2, [pc, #88]	; (80044fc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80044a4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f003 031f 	and.w	r3, r3, #31
 80044ac:	2201      	movs	r2, #1
 80044ae:	409a      	lsls	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80044b4:	bf00      	nop
 80044b6:	3714      	adds	r7, #20
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	58025408 	.word	0x58025408
 80044c4:	5802541c 	.word	0x5802541c
 80044c8:	58025430 	.word	0x58025430
 80044cc:	58025444 	.word	0x58025444
 80044d0:	58025458 	.word	0x58025458
 80044d4:	5802546c 	.word	0x5802546c
 80044d8:	58025480 	.word	0x58025480
 80044dc:	58025494 	.word	0x58025494
 80044e0:	cccccccd 	.word	0xcccccccd
 80044e4:	16009600 	.word	0x16009600
 80044e8:	58025880 	.word	0x58025880
 80044ec:	aaaaaaab 	.word	0xaaaaaaab
 80044f0:	400204b8 	.word	0x400204b8
 80044f4:	4002040f 	.word	0x4002040f
 80044f8:	10008200 	.word	0x10008200
 80044fc:	40020880 	.word	0x40020880

08004500 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	b2db      	uxtb	r3, r3
 800450e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d04a      	beq.n	80045ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2b08      	cmp	r3, #8
 800451a:	d847      	bhi.n	80045ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a25      	ldr	r2, [pc, #148]	; (80045b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d022      	beq.n	800456c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a24      	ldr	r2, [pc, #144]	; (80045bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d01d      	beq.n	800456c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a22      	ldr	r2, [pc, #136]	; (80045c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d018      	beq.n	800456c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a21      	ldr	r2, [pc, #132]	; (80045c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d013      	beq.n	800456c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a1f      	ldr	r2, [pc, #124]	; (80045c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d00e      	beq.n	800456c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a1e      	ldr	r2, [pc, #120]	; (80045cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d009      	beq.n	800456c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a1c      	ldr	r2, [pc, #112]	; (80045d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d004      	beq.n	800456c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a1b      	ldr	r2, [pc, #108]	; (80045d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d101      	bne.n	8004570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800456c:	2301      	movs	r3, #1
 800456e:	e000      	b.n	8004572 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004570:	2300      	movs	r3, #0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00a      	beq.n	800458c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	4b17      	ldr	r3, [pc, #92]	; (80045d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800457a:	4413      	add	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	461a      	mov	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a15      	ldr	r2, [pc, #84]	; (80045dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004588:	671a      	str	r2, [r3, #112]	; 0x70
 800458a:	e009      	b.n	80045a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	4b14      	ldr	r3, [pc, #80]	; (80045e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004590:	4413      	add	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	461a      	mov	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a11      	ldr	r2, [pc, #68]	; (80045e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800459e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	3b01      	subs	r3, #1
 80045a4:	2201      	movs	r2, #1
 80045a6:	409a      	lsls	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80045ac:	bf00      	nop
 80045ae:	3714      	adds	r7, #20
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr
 80045b8:	58025408 	.word	0x58025408
 80045bc:	5802541c 	.word	0x5802541c
 80045c0:	58025430 	.word	0x58025430
 80045c4:	58025444 	.word	0x58025444
 80045c8:	58025458 	.word	0x58025458
 80045cc:	5802546c 	.word	0x5802546c
 80045d0:	58025480 	.word	0x58025480
 80045d4:	58025494 	.word	0x58025494
 80045d8:	1600963f 	.word	0x1600963f
 80045dc:	58025940 	.word	0x58025940
 80045e0:	1000823f 	.word	0x1000823f
 80045e4:	40020940 	.word	0x40020940

080045e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b089      	sub	sp, #36	; 0x24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80045f6:	4b89      	ldr	r3, [pc, #548]	; (800481c <HAL_GPIO_Init+0x234>)
 80045f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80045fa:	e194      	b.n	8004926 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	2101      	movs	r1, #1
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	fa01 f303 	lsl.w	r3, r1, r3
 8004608:	4013      	ands	r3, r2
 800460a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 8186 	beq.w	8004920 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f003 0303 	and.w	r3, r3, #3
 800461c:	2b01      	cmp	r3, #1
 800461e:	d005      	beq.n	800462c <HAL_GPIO_Init+0x44>
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f003 0303 	and.w	r3, r3, #3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d130      	bne.n	800468e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	2203      	movs	r2, #3
 8004638:	fa02 f303 	lsl.w	r3, r2, r3
 800463c:	43db      	mvns	r3, r3
 800463e:	69ba      	ldr	r2, [r7, #24]
 8004640:	4013      	ands	r3, r2
 8004642:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	68da      	ldr	r2, [r3, #12]
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	005b      	lsls	r3, r3, #1
 800464c:	fa02 f303 	lsl.w	r3, r2, r3
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	4313      	orrs	r3, r2
 8004654:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004662:	2201      	movs	r2, #1
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	fa02 f303 	lsl.w	r3, r2, r3
 800466a:	43db      	mvns	r3, r3
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	4013      	ands	r3, r2
 8004670:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	091b      	lsrs	r3, r3, #4
 8004678:	f003 0201 	and.w	r2, r3, #1
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	fa02 f303 	lsl.w	r3, r2, r3
 8004682:	69ba      	ldr	r2, [r7, #24]
 8004684:	4313      	orrs	r3, r2
 8004686:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	69ba      	ldr	r2, [r7, #24]
 800468c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	2b03      	cmp	r3, #3
 8004698:	d017      	beq.n	80046ca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	2203      	movs	r2, #3
 80046a6:	fa02 f303 	lsl.w	r3, r2, r3
 80046aa:	43db      	mvns	r3, r3
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	4013      	ands	r3, r2
 80046b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	689a      	ldr	r2, [r3, #8]
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	fa02 f303 	lsl.w	r3, r2, r3
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f003 0303 	and.w	r3, r3, #3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d123      	bne.n	800471e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	08da      	lsrs	r2, r3, #3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	3208      	adds	r2, #8
 80046de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	f003 0307 	and.w	r3, r3, #7
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	220f      	movs	r2, #15
 80046ee:	fa02 f303 	lsl.w	r3, r2, r3
 80046f2:	43db      	mvns	r3, r3
 80046f4:	69ba      	ldr	r2, [r7, #24]
 80046f6:	4013      	ands	r3, r2
 80046f8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	691a      	ldr	r2, [r3, #16]
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	fa02 f303 	lsl.w	r3, r2, r3
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	4313      	orrs	r3, r2
 800470e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	08da      	lsrs	r2, r3, #3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	3208      	adds	r2, #8
 8004718:	69b9      	ldr	r1, [r7, #24]
 800471a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	2203      	movs	r2, #3
 800472a:	fa02 f303 	lsl.w	r3, r2, r3
 800472e:	43db      	mvns	r3, r3
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	4013      	ands	r3, r2
 8004734:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f003 0203 	and.w	r2, r3, #3
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	fa02 f303 	lsl.w	r3, r2, r3
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	4313      	orrs	r3, r2
 800474a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800475a:	2b00      	cmp	r3, #0
 800475c:	f000 80e0 	beq.w	8004920 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004760:	4b2f      	ldr	r3, [pc, #188]	; (8004820 <HAL_GPIO_Init+0x238>)
 8004762:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004766:	4a2e      	ldr	r2, [pc, #184]	; (8004820 <HAL_GPIO_Init+0x238>)
 8004768:	f043 0302 	orr.w	r3, r3, #2
 800476c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004770:	4b2b      	ldr	r3, [pc, #172]	; (8004820 <HAL_GPIO_Init+0x238>)
 8004772:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800477e:	4a29      	ldr	r2, [pc, #164]	; (8004824 <HAL_GPIO_Init+0x23c>)
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	089b      	lsrs	r3, r3, #2
 8004784:	3302      	adds	r3, #2
 8004786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800478a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	f003 0303 	and.w	r3, r3, #3
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	220f      	movs	r2, #15
 8004796:	fa02 f303 	lsl.w	r3, r2, r3
 800479a:	43db      	mvns	r3, r3
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	4013      	ands	r3, r2
 80047a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a20      	ldr	r2, [pc, #128]	; (8004828 <HAL_GPIO_Init+0x240>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d052      	beq.n	8004850 <HAL_GPIO_Init+0x268>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a1f      	ldr	r2, [pc, #124]	; (800482c <HAL_GPIO_Init+0x244>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d031      	beq.n	8004816 <HAL_GPIO_Init+0x22e>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a1e      	ldr	r2, [pc, #120]	; (8004830 <HAL_GPIO_Init+0x248>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d02b      	beq.n	8004812 <HAL_GPIO_Init+0x22a>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a1d      	ldr	r2, [pc, #116]	; (8004834 <HAL_GPIO_Init+0x24c>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d025      	beq.n	800480e <HAL_GPIO_Init+0x226>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a1c      	ldr	r2, [pc, #112]	; (8004838 <HAL_GPIO_Init+0x250>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d01f      	beq.n	800480a <HAL_GPIO_Init+0x222>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a1b      	ldr	r2, [pc, #108]	; (800483c <HAL_GPIO_Init+0x254>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d019      	beq.n	8004806 <HAL_GPIO_Init+0x21e>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a1a      	ldr	r2, [pc, #104]	; (8004840 <HAL_GPIO_Init+0x258>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d013      	beq.n	8004802 <HAL_GPIO_Init+0x21a>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a19      	ldr	r2, [pc, #100]	; (8004844 <HAL_GPIO_Init+0x25c>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d00d      	beq.n	80047fe <HAL_GPIO_Init+0x216>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a18      	ldr	r2, [pc, #96]	; (8004848 <HAL_GPIO_Init+0x260>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d007      	beq.n	80047fa <HAL_GPIO_Init+0x212>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a17      	ldr	r2, [pc, #92]	; (800484c <HAL_GPIO_Init+0x264>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d101      	bne.n	80047f6 <HAL_GPIO_Init+0x20e>
 80047f2:	2309      	movs	r3, #9
 80047f4:	e02d      	b.n	8004852 <HAL_GPIO_Init+0x26a>
 80047f6:	230a      	movs	r3, #10
 80047f8:	e02b      	b.n	8004852 <HAL_GPIO_Init+0x26a>
 80047fa:	2308      	movs	r3, #8
 80047fc:	e029      	b.n	8004852 <HAL_GPIO_Init+0x26a>
 80047fe:	2307      	movs	r3, #7
 8004800:	e027      	b.n	8004852 <HAL_GPIO_Init+0x26a>
 8004802:	2306      	movs	r3, #6
 8004804:	e025      	b.n	8004852 <HAL_GPIO_Init+0x26a>
 8004806:	2305      	movs	r3, #5
 8004808:	e023      	b.n	8004852 <HAL_GPIO_Init+0x26a>
 800480a:	2304      	movs	r3, #4
 800480c:	e021      	b.n	8004852 <HAL_GPIO_Init+0x26a>
 800480e:	2303      	movs	r3, #3
 8004810:	e01f      	b.n	8004852 <HAL_GPIO_Init+0x26a>
 8004812:	2302      	movs	r3, #2
 8004814:	e01d      	b.n	8004852 <HAL_GPIO_Init+0x26a>
 8004816:	2301      	movs	r3, #1
 8004818:	e01b      	b.n	8004852 <HAL_GPIO_Init+0x26a>
 800481a:	bf00      	nop
 800481c:	58000080 	.word	0x58000080
 8004820:	58024400 	.word	0x58024400
 8004824:	58000400 	.word	0x58000400
 8004828:	58020000 	.word	0x58020000
 800482c:	58020400 	.word	0x58020400
 8004830:	58020800 	.word	0x58020800
 8004834:	58020c00 	.word	0x58020c00
 8004838:	58021000 	.word	0x58021000
 800483c:	58021400 	.word	0x58021400
 8004840:	58021800 	.word	0x58021800
 8004844:	58021c00 	.word	0x58021c00
 8004848:	58022000 	.word	0x58022000
 800484c:	58022400 	.word	0x58022400
 8004850:	2300      	movs	r3, #0
 8004852:	69fa      	ldr	r2, [r7, #28]
 8004854:	f002 0203 	and.w	r2, r2, #3
 8004858:	0092      	lsls	r2, r2, #2
 800485a:	4093      	lsls	r3, r2
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	4313      	orrs	r3, r2
 8004860:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004862:	4938      	ldr	r1, [pc, #224]	; (8004944 <HAL_GPIO_Init+0x35c>)
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	089b      	lsrs	r3, r3, #2
 8004868:	3302      	adds	r3, #2
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	43db      	mvns	r3, r3
 800487c:	69ba      	ldr	r2, [r7, #24]
 800487e:	4013      	ands	r3, r2
 8004880:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	4313      	orrs	r3, r2
 8004894:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004896:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800489e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	43db      	mvns	r3, r3
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	4013      	ands	r3, r2
 80048ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d003      	beq.n	80048c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80048c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	43db      	mvns	r3, r3
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	4013      	ands	r3, r2
 80048da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d003      	beq.n	80048f0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	43db      	mvns	r3, r3
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	4013      	ands	r3, r2
 8004904:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d003      	beq.n	800491a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	4313      	orrs	r3, r2
 8004918:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	3301      	adds	r3, #1
 8004924:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	fa22 f303 	lsr.w	r3, r2, r3
 8004930:	2b00      	cmp	r3, #0
 8004932:	f47f ae63 	bne.w	80045fc <HAL_GPIO_Init+0x14>
  }
}
 8004936:	bf00      	nop
 8004938:	bf00      	nop
 800493a:	3724      	adds	r7, #36	; 0x24
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr
 8004944:	58000400 	.word	0x58000400

08004948 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	460b      	mov	r3, r1
 8004952:	807b      	strh	r3, [r7, #2]
 8004954:	4613      	mov	r3, r2
 8004956:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004958:	787b      	ldrb	r3, [r7, #1]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800495e:	887a      	ldrh	r2, [r7, #2]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004964:	e003      	b.n	800496e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004966:	887b      	ldrh	r3, [r7, #2]
 8004968:	041a      	lsls	r2, r3, #16
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	619a      	str	r2, [r3, #24]
}
 800496e:	bf00      	nop
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800497a:	b480      	push	{r7}
 800497c:	b085      	sub	sp, #20
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
 8004982:	460b      	mov	r3, r1
 8004984:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800498c:	887a      	ldrh	r2, [r7, #2]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4013      	ands	r3, r2
 8004992:	041a      	lsls	r2, r3, #16
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	43d9      	mvns	r1, r3
 8004998:	887b      	ldrh	r3, [r7, #2]
 800499a:	400b      	ands	r3, r1
 800499c:	431a      	orrs	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	619a      	str	r2, [r3, #24]
}
 80049a2:	bf00      	nop
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
	...

080049b0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80049b8:	4b19      	ldr	r3, [pc, #100]	; (8004a20 <HAL_PWREx_ConfigSupply+0x70>)
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f003 0304 	and.w	r3, r3, #4
 80049c0:	2b04      	cmp	r3, #4
 80049c2:	d00a      	beq.n	80049da <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80049c4:	4b16      	ldr	r3, [pc, #88]	; (8004a20 <HAL_PWREx_ConfigSupply+0x70>)
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	f003 0307 	and.w	r3, r3, #7
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d001      	beq.n	80049d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e01f      	b.n	8004a16 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80049d6:	2300      	movs	r3, #0
 80049d8:	e01d      	b.n	8004a16 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80049da:	4b11      	ldr	r3, [pc, #68]	; (8004a20 <HAL_PWREx_ConfigSupply+0x70>)
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	f023 0207 	bic.w	r2, r3, #7
 80049e2:	490f      	ldr	r1, [pc, #60]	; (8004a20 <HAL_PWREx_ConfigSupply+0x70>)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80049ea:	f7fc fe75 	bl	80016d8 <HAL_GetTick>
 80049ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80049f0:	e009      	b.n	8004a06 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80049f2:	f7fc fe71 	bl	80016d8 <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a00:	d901      	bls.n	8004a06 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e007      	b.n	8004a16 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a06:	4b06      	ldr	r3, [pc, #24]	; (8004a20 <HAL_PWREx_ConfigSupply+0x70>)
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a12:	d1ee      	bne.n	80049f2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	58024800 	.word	0x58024800

08004a24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b08c      	sub	sp, #48	; 0x30
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d102      	bne.n	8004a38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	f000 bc48 	b.w	80052c8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 8088 	beq.w	8004b56 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a46:	4b99      	ldr	r3, [pc, #612]	; (8004cac <HAL_RCC_OscConfig+0x288>)
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a50:	4b96      	ldr	r3, [pc, #600]	; (8004cac <HAL_RCC_OscConfig+0x288>)
 8004a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a54:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a58:	2b10      	cmp	r3, #16
 8004a5a:	d007      	beq.n	8004a6c <HAL_RCC_OscConfig+0x48>
 8004a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5e:	2b18      	cmp	r3, #24
 8004a60:	d111      	bne.n	8004a86 <HAL_RCC_OscConfig+0x62>
 8004a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a64:	f003 0303 	and.w	r3, r3, #3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d10c      	bne.n	8004a86 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a6c:	4b8f      	ldr	r3, [pc, #572]	; (8004cac <HAL_RCC_OscConfig+0x288>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d06d      	beq.n	8004b54 <HAL_RCC_OscConfig+0x130>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d169      	bne.n	8004b54 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	f000 bc21 	b.w	80052c8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a8e:	d106      	bne.n	8004a9e <HAL_RCC_OscConfig+0x7a>
 8004a90:	4b86      	ldr	r3, [pc, #536]	; (8004cac <HAL_RCC_OscConfig+0x288>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a85      	ldr	r2, [pc, #532]	; (8004cac <HAL_RCC_OscConfig+0x288>)
 8004a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a9a:	6013      	str	r3, [r2, #0]
 8004a9c:	e02e      	b.n	8004afc <HAL_RCC_OscConfig+0xd8>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d10c      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x9c>
 8004aa6:	4b81      	ldr	r3, [pc, #516]	; (8004cac <HAL_RCC_OscConfig+0x288>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a80      	ldr	r2, [pc, #512]	; (8004cac <HAL_RCC_OscConfig+0x288>)
 8004aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ab0:	6013      	str	r3, [r2, #0]
 8004ab2:	4b7e      	ldr	r3, [pc, #504]	; (8004cac <HAL_RCC_OscConfig+0x288>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a7d      	ldr	r2, [pc, #500]	; (8004cac <HAL_RCC_OscConfig+0x288>)
 8004ab8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004abc:	6013      	str	r3, [r2, #0]
 8004abe:	e01d      	b.n	8004afc <HAL_RCC_OscConfig+0xd8>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ac8:	d10c      	bne.n	8004ae4 <HAL_RCC_OscConfig+0xc0>
 8004aca:	4b78      	ldr	r3, [pc, #480]	; (8004cac <HAL_RCC_OscConfig+0x288>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a77      	ldr	r2, [pc, #476]	; (8004cac <HAL_RCC_OscConfig+0x288>)
 8004ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ad4:	6013      	str	r3, [r2, #0]
 8004ad6:	4b75      	ldr	r3, [pc, #468]	; (8004cac <HAL_RCC_OscConfig+0x288>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a74      	ldr	r2, [pc, #464]	; (8004cac <HAL_RCC_OscConfig+0x288>)
 8004adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ae0:	6013      	str	r3, [r2, #0]
 8004ae2:	e00b      	b.n	8004afc <HAL_RCC_OscConfig+0xd8>
 8004ae4:	4b71      	ldr	r3, [pc, #452]	; (8004cac <HAL_RCC_OscConfig+0x288>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a70      	ldr	r2, [pc, #448]	; (8004cac <HAL_RCC_OscConfig+0x288>)
 8004aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aee:	6013      	str	r3, [r2, #0]
 8004af0:	4b6e      	ldr	r3, [pc, #440]	; (8004cac <HAL_RCC_OscConfig+0x288>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a6d      	ldr	r2, [pc, #436]	; (8004cac <HAL_RCC_OscConfig+0x288>)
 8004af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004afa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d013      	beq.n	8004b2c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b04:	f7fc fde8 	bl	80016d8 <HAL_GetTick>
 8004b08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b0a:	e008      	b.n	8004b1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b0c:	f7fc fde4 	bl	80016d8 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b64      	cmp	r3, #100	; 0x64
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e3d4      	b.n	80052c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b1e:	4b63      	ldr	r3, [pc, #396]	; (8004cac <HAL_RCC_OscConfig+0x288>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d0f0      	beq.n	8004b0c <HAL_RCC_OscConfig+0xe8>
 8004b2a:	e014      	b.n	8004b56 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2c:	f7fc fdd4 	bl	80016d8 <HAL_GetTick>
 8004b30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b34:	f7fc fdd0 	bl	80016d8 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b64      	cmp	r3, #100	; 0x64
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e3c0      	b.n	80052c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b46:	4b59      	ldr	r3, [pc, #356]	; (8004cac <HAL_RCC_OscConfig+0x288>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1f0      	bne.n	8004b34 <HAL_RCC_OscConfig+0x110>
 8004b52:	e000      	b.n	8004b56 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f000 80ca 	beq.w	8004cf8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b64:	4b51      	ldr	r3, [pc, #324]	; (8004cac <HAL_RCC_OscConfig+0x288>)
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b6c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b6e:	4b4f      	ldr	r3, [pc, #316]	; (8004cac <HAL_RCC_OscConfig+0x288>)
 8004b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b72:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004b74:	6a3b      	ldr	r3, [r7, #32]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d007      	beq.n	8004b8a <HAL_RCC_OscConfig+0x166>
 8004b7a:	6a3b      	ldr	r3, [r7, #32]
 8004b7c:	2b18      	cmp	r3, #24
 8004b7e:	d156      	bne.n	8004c2e <HAL_RCC_OscConfig+0x20a>
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	f003 0303 	and.w	r3, r3, #3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d151      	bne.n	8004c2e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b8a:	4b48      	ldr	r3, [pc, #288]	; (8004cac <HAL_RCC_OscConfig+0x288>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0304 	and.w	r3, r3, #4
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d005      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x17e>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e392      	b.n	80052c8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004ba2:	4b42      	ldr	r3, [pc, #264]	; (8004cac <HAL_RCC_OscConfig+0x288>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f023 0219 	bic.w	r2, r3, #25
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	493f      	ldr	r1, [pc, #252]	; (8004cac <HAL_RCC_OscConfig+0x288>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb4:	f7fc fd90 	bl	80016d8 <HAL_GetTick>
 8004bb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bba:	e008      	b.n	8004bce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bbc:	f7fc fd8c 	bl	80016d8 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e37c      	b.n	80052c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bce:	4b37      	ldr	r3, [pc, #220]	; (8004cac <HAL_RCC_OscConfig+0x288>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0304 	and.w	r3, r3, #4
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d0f0      	beq.n	8004bbc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bda:	f7fc fdad 	bl	8001738 <HAL_GetREVID>
 8004bde:	4603      	mov	r3, r0
 8004be0:	f241 0203 	movw	r2, #4099	; 0x1003
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d817      	bhi.n	8004c18 <HAL_RCC_OscConfig+0x1f4>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	2b40      	cmp	r3, #64	; 0x40
 8004bee:	d108      	bne.n	8004c02 <HAL_RCC_OscConfig+0x1de>
 8004bf0:	4b2e      	ldr	r3, [pc, #184]	; (8004cac <HAL_RCC_OscConfig+0x288>)
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004bf8:	4a2c      	ldr	r2, [pc, #176]	; (8004cac <HAL_RCC_OscConfig+0x288>)
 8004bfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bfe:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c00:	e07a      	b.n	8004cf8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c02:	4b2a      	ldr	r3, [pc, #168]	; (8004cac <HAL_RCC_OscConfig+0x288>)
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	031b      	lsls	r3, r3, #12
 8004c10:	4926      	ldr	r1, [pc, #152]	; (8004cac <HAL_RCC_OscConfig+0x288>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c16:	e06f      	b.n	8004cf8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c18:	4b24      	ldr	r3, [pc, #144]	; (8004cac <HAL_RCC_OscConfig+0x288>)
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	061b      	lsls	r3, r3, #24
 8004c26:	4921      	ldr	r1, [pc, #132]	; (8004cac <HAL_RCC_OscConfig+0x288>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c2c:	e064      	b.n	8004cf8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d047      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004c36:	4b1d      	ldr	r3, [pc, #116]	; (8004cac <HAL_RCC_OscConfig+0x288>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f023 0219 	bic.w	r2, r3, #25
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	491a      	ldr	r1, [pc, #104]	; (8004cac <HAL_RCC_OscConfig+0x288>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c48:	f7fc fd46 	bl	80016d8 <HAL_GetTick>
 8004c4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c50:	f7fc fd42 	bl	80016d8 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e332      	b.n	80052c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c62:	4b12      	ldr	r3, [pc, #72]	; (8004cac <HAL_RCC_OscConfig+0x288>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0304 	and.w	r3, r3, #4
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0f0      	beq.n	8004c50 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c6e:	f7fc fd63 	bl	8001738 <HAL_GetREVID>
 8004c72:	4603      	mov	r3, r0
 8004c74:	f241 0203 	movw	r2, #4099	; 0x1003
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d819      	bhi.n	8004cb0 <HAL_RCC_OscConfig+0x28c>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	2b40      	cmp	r3, #64	; 0x40
 8004c82:	d108      	bne.n	8004c96 <HAL_RCC_OscConfig+0x272>
 8004c84:	4b09      	ldr	r3, [pc, #36]	; (8004cac <HAL_RCC_OscConfig+0x288>)
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004c8c:	4a07      	ldr	r2, [pc, #28]	; (8004cac <HAL_RCC_OscConfig+0x288>)
 8004c8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c92:	6053      	str	r3, [r2, #4]
 8004c94:	e030      	b.n	8004cf8 <HAL_RCC_OscConfig+0x2d4>
 8004c96:	4b05      	ldr	r3, [pc, #20]	; (8004cac <HAL_RCC_OscConfig+0x288>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	031b      	lsls	r3, r3, #12
 8004ca4:	4901      	ldr	r1, [pc, #4]	; (8004cac <HAL_RCC_OscConfig+0x288>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	604b      	str	r3, [r1, #4]
 8004caa:	e025      	b.n	8004cf8 <HAL_RCC_OscConfig+0x2d4>
 8004cac:	58024400 	.word	0x58024400
 8004cb0:	4b9a      	ldr	r3, [pc, #616]	; (8004f1c <HAL_RCC_OscConfig+0x4f8>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	061b      	lsls	r3, r3, #24
 8004cbe:	4997      	ldr	r1, [pc, #604]	; (8004f1c <HAL_RCC_OscConfig+0x4f8>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	604b      	str	r3, [r1, #4]
 8004cc4:	e018      	b.n	8004cf8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cc6:	4b95      	ldr	r3, [pc, #596]	; (8004f1c <HAL_RCC_OscConfig+0x4f8>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a94      	ldr	r2, [pc, #592]	; (8004f1c <HAL_RCC_OscConfig+0x4f8>)
 8004ccc:	f023 0301 	bic.w	r3, r3, #1
 8004cd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd2:	f7fc fd01 	bl	80016d8 <HAL_GetTick>
 8004cd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004cd8:	e008      	b.n	8004cec <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cda:	f7fc fcfd 	bl	80016d8 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d901      	bls.n	8004cec <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e2ed      	b.n	80052c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004cec:	4b8b      	ldr	r3, [pc, #556]	; (8004f1c <HAL_RCC_OscConfig+0x4f8>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0304 	and.w	r3, r3, #4
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1f0      	bne.n	8004cda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0310 	and.w	r3, r3, #16
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 80a9 	beq.w	8004e58 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d06:	4b85      	ldr	r3, [pc, #532]	; (8004f1c <HAL_RCC_OscConfig+0x4f8>)
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d0e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d10:	4b82      	ldr	r3, [pc, #520]	; (8004f1c <HAL_RCC_OscConfig+0x4f8>)
 8004d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d14:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	2b08      	cmp	r3, #8
 8004d1a:	d007      	beq.n	8004d2c <HAL_RCC_OscConfig+0x308>
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	2b18      	cmp	r3, #24
 8004d20:	d13a      	bne.n	8004d98 <HAL_RCC_OscConfig+0x374>
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f003 0303 	and.w	r3, r3, #3
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d135      	bne.n	8004d98 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d2c:	4b7b      	ldr	r3, [pc, #492]	; (8004f1c <HAL_RCC_OscConfig+0x4f8>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d005      	beq.n	8004d44 <HAL_RCC_OscConfig+0x320>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	69db      	ldr	r3, [r3, #28]
 8004d3c:	2b80      	cmp	r3, #128	; 0x80
 8004d3e:	d001      	beq.n	8004d44 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e2c1      	b.n	80052c8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d44:	f7fc fcf8 	bl	8001738 <HAL_GetREVID>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	f241 0203 	movw	r2, #4099	; 0x1003
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d817      	bhi.n	8004d82 <HAL_RCC_OscConfig+0x35e>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	2b20      	cmp	r3, #32
 8004d58:	d108      	bne.n	8004d6c <HAL_RCC_OscConfig+0x348>
 8004d5a:	4b70      	ldr	r3, [pc, #448]	; (8004f1c <HAL_RCC_OscConfig+0x4f8>)
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004d62:	4a6e      	ldr	r2, [pc, #440]	; (8004f1c <HAL_RCC_OscConfig+0x4f8>)
 8004d64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d68:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d6a:	e075      	b.n	8004e58 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d6c:	4b6b      	ldr	r3, [pc, #428]	; (8004f1c <HAL_RCC_OscConfig+0x4f8>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	069b      	lsls	r3, r3, #26
 8004d7a:	4968      	ldr	r1, [pc, #416]	; (8004f1c <HAL_RCC_OscConfig+0x4f8>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d80:	e06a      	b.n	8004e58 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d82:	4b66      	ldr	r3, [pc, #408]	; (8004f1c <HAL_RCC_OscConfig+0x4f8>)
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	061b      	lsls	r3, r3, #24
 8004d90:	4962      	ldr	r1, [pc, #392]	; (8004f1c <HAL_RCC_OscConfig+0x4f8>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d96:	e05f      	b.n	8004e58 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	69db      	ldr	r3, [r3, #28]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d042      	beq.n	8004e26 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004da0:	4b5e      	ldr	r3, [pc, #376]	; (8004f1c <HAL_RCC_OscConfig+0x4f8>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a5d      	ldr	r2, [pc, #372]	; (8004f1c <HAL_RCC_OscConfig+0x4f8>)
 8004da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004daa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dac:	f7fc fc94 	bl	80016d8 <HAL_GetTick>
 8004db0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004db2:	e008      	b.n	8004dc6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004db4:	f7fc fc90 	bl	80016d8 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e280      	b.n	80052c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004dc6:	4b55      	ldr	r3, [pc, #340]	; (8004f1c <HAL_RCC_OscConfig+0x4f8>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d0f0      	beq.n	8004db4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004dd2:	f7fc fcb1 	bl	8001738 <HAL_GetREVID>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	f241 0203 	movw	r2, #4099	; 0x1003
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d817      	bhi.n	8004e10 <HAL_RCC_OscConfig+0x3ec>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	2b20      	cmp	r3, #32
 8004de6:	d108      	bne.n	8004dfa <HAL_RCC_OscConfig+0x3d6>
 8004de8:	4b4c      	ldr	r3, [pc, #304]	; (8004f1c <HAL_RCC_OscConfig+0x4f8>)
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004df0:	4a4a      	ldr	r2, [pc, #296]	; (8004f1c <HAL_RCC_OscConfig+0x4f8>)
 8004df2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004df6:	6053      	str	r3, [r2, #4]
 8004df8:	e02e      	b.n	8004e58 <HAL_RCC_OscConfig+0x434>
 8004dfa:	4b48      	ldr	r3, [pc, #288]	; (8004f1c <HAL_RCC_OscConfig+0x4f8>)
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	069b      	lsls	r3, r3, #26
 8004e08:	4944      	ldr	r1, [pc, #272]	; (8004f1c <HAL_RCC_OscConfig+0x4f8>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	604b      	str	r3, [r1, #4]
 8004e0e:	e023      	b.n	8004e58 <HAL_RCC_OscConfig+0x434>
 8004e10:	4b42      	ldr	r3, [pc, #264]	; (8004f1c <HAL_RCC_OscConfig+0x4f8>)
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
 8004e1c:	061b      	lsls	r3, r3, #24
 8004e1e:	493f      	ldr	r1, [pc, #252]	; (8004f1c <HAL_RCC_OscConfig+0x4f8>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	60cb      	str	r3, [r1, #12]
 8004e24:	e018      	b.n	8004e58 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004e26:	4b3d      	ldr	r3, [pc, #244]	; (8004f1c <HAL_RCC_OscConfig+0x4f8>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a3c      	ldr	r2, [pc, #240]	; (8004f1c <HAL_RCC_OscConfig+0x4f8>)
 8004e2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e32:	f7fc fc51 	bl	80016d8 <HAL_GetTick>
 8004e36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e38:	e008      	b.n	8004e4c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004e3a:	f7fc fc4d 	bl	80016d8 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d901      	bls.n	8004e4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e23d      	b.n	80052c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e4c:	4b33      	ldr	r3, [pc, #204]	; (8004f1c <HAL_RCC_OscConfig+0x4f8>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1f0      	bne.n	8004e3a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0308 	and.w	r3, r3, #8
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d036      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d019      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e6c:	4b2b      	ldr	r3, [pc, #172]	; (8004f1c <HAL_RCC_OscConfig+0x4f8>)
 8004e6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e70:	4a2a      	ldr	r2, [pc, #168]	; (8004f1c <HAL_RCC_OscConfig+0x4f8>)
 8004e72:	f043 0301 	orr.w	r3, r3, #1
 8004e76:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e78:	f7fc fc2e 	bl	80016d8 <HAL_GetTick>
 8004e7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e7e:	e008      	b.n	8004e92 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e80:	f7fc fc2a 	bl	80016d8 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e21a      	b.n	80052c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e92:	4b22      	ldr	r3, [pc, #136]	; (8004f1c <HAL_RCC_OscConfig+0x4f8>)
 8004e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d0f0      	beq.n	8004e80 <HAL_RCC_OscConfig+0x45c>
 8004e9e:	e018      	b.n	8004ed2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ea0:	4b1e      	ldr	r3, [pc, #120]	; (8004f1c <HAL_RCC_OscConfig+0x4f8>)
 8004ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ea4:	4a1d      	ldr	r2, [pc, #116]	; (8004f1c <HAL_RCC_OscConfig+0x4f8>)
 8004ea6:	f023 0301 	bic.w	r3, r3, #1
 8004eaa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eac:	f7fc fc14 	bl	80016d8 <HAL_GetTick>
 8004eb0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004eb2:	e008      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004eb4:	f7fc fc10 	bl	80016d8 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e200      	b.n	80052c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004ec6:	4b15      	ldr	r3, [pc, #84]	; (8004f1c <HAL_RCC_OscConfig+0x4f8>)
 8004ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1f0      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0320 	and.w	r3, r3, #32
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d039      	beq.n	8004f52 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d01c      	beq.n	8004f20 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ee6:	4b0d      	ldr	r3, [pc, #52]	; (8004f1c <HAL_RCC_OscConfig+0x4f8>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a0c      	ldr	r2, [pc, #48]	; (8004f1c <HAL_RCC_OscConfig+0x4f8>)
 8004eec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004ef0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004ef2:	f7fc fbf1 	bl	80016d8 <HAL_GetTick>
 8004ef6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ef8:	e008      	b.n	8004f0c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004efa:	f7fc fbed 	bl	80016d8 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d901      	bls.n	8004f0c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e1dd      	b.n	80052c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f0c:	4b03      	ldr	r3, [pc, #12]	; (8004f1c <HAL_RCC_OscConfig+0x4f8>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d0f0      	beq.n	8004efa <HAL_RCC_OscConfig+0x4d6>
 8004f18:	e01b      	b.n	8004f52 <HAL_RCC_OscConfig+0x52e>
 8004f1a:	bf00      	nop
 8004f1c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f20:	4b9b      	ldr	r3, [pc, #620]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a9a      	ldr	r2, [pc, #616]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 8004f26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f2a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f2c:	f7fc fbd4 	bl	80016d8 <HAL_GetTick>
 8004f30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f32:	e008      	b.n	8004f46 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f34:	f7fc fbd0 	bl	80016d8 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e1c0      	b.n	80052c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f46:	4b92      	ldr	r3, [pc, #584]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1f0      	bne.n	8004f34 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0304 	and.w	r3, r3, #4
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f000 8081 	beq.w	8005062 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f60:	4b8c      	ldr	r3, [pc, #560]	; (8005194 <HAL_RCC_OscConfig+0x770>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a8b      	ldr	r2, [pc, #556]	; (8005194 <HAL_RCC_OscConfig+0x770>)
 8004f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f6c:	f7fc fbb4 	bl	80016d8 <HAL_GetTick>
 8004f70:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f72:	e008      	b.n	8004f86 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f74:	f7fc fbb0 	bl	80016d8 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b64      	cmp	r3, #100	; 0x64
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e1a0      	b.n	80052c8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f86:	4b83      	ldr	r3, [pc, #524]	; (8005194 <HAL_RCC_OscConfig+0x770>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d0f0      	beq.n	8004f74 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d106      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x584>
 8004f9a:	4b7d      	ldr	r3, [pc, #500]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 8004f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9e:	4a7c      	ldr	r2, [pc, #496]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 8004fa0:	f043 0301 	orr.w	r3, r3, #1
 8004fa4:	6713      	str	r3, [r2, #112]	; 0x70
 8004fa6:	e02d      	b.n	8005004 <HAL_RCC_OscConfig+0x5e0>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10c      	bne.n	8004fca <HAL_RCC_OscConfig+0x5a6>
 8004fb0:	4b77      	ldr	r3, [pc, #476]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 8004fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb4:	4a76      	ldr	r2, [pc, #472]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 8004fb6:	f023 0301 	bic.w	r3, r3, #1
 8004fba:	6713      	str	r3, [r2, #112]	; 0x70
 8004fbc:	4b74      	ldr	r3, [pc, #464]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 8004fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc0:	4a73      	ldr	r2, [pc, #460]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 8004fc2:	f023 0304 	bic.w	r3, r3, #4
 8004fc6:	6713      	str	r3, [r2, #112]	; 0x70
 8004fc8:	e01c      	b.n	8005004 <HAL_RCC_OscConfig+0x5e0>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	2b05      	cmp	r3, #5
 8004fd0:	d10c      	bne.n	8004fec <HAL_RCC_OscConfig+0x5c8>
 8004fd2:	4b6f      	ldr	r3, [pc, #444]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 8004fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd6:	4a6e      	ldr	r2, [pc, #440]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 8004fd8:	f043 0304 	orr.w	r3, r3, #4
 8004fdc:	6713      	str	r3, [r2, #112]	; 0x70
 8004fde:	4b6c      	ldr	r3, [pc, #432]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 8004fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe2:	4a6b      	ldr	r2, [pc, #428]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 8004fe4:	f043 0301 	orr.w	r3, r3, #1
 8004fe8:	6713      	str	r3, [r2, #112]	; 0x70
 8004fea:	e00b      	b.n	8005004 <HAL_RCC_OscConfig+0x5e0>
 8004fec:	4b68      	ldr	r3, [pc, #416]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 8004fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff0:	4a67      	ldr	r2, [pc, #412]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 8004ff2:	f023 0301 	bic.w	r3, r3, #1
 8004ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ff8:	4b65      	ldr	r3, [pc, #404]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 8004ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ffc:	4a64      	ldr	r2, [pc, #400]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 8004ffe:	f023 0304 	bic.w	r3, r3, #4
 8005002:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d015      	beq.n	8005038 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800500c:	f7fc fb64 	bl	80016d8 <HAL_GetTick>
 8005010:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005012:	e00a      	b.n	800502a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005014:	f7fc fb60 	bl	80016d8 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005022:	4293      	cmp	r3, r2
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e14e      	b.n	80052c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800502a:	4b59      	ldr	r3, [pc, #356]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 800502c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d0ee      	beq.n	8005014 <HAL_RCC_OscConfig+0x5f0>
 8005036:	e014      	b.n	8005062 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005038:	f7fc fb4e 	bl	80016d8 <HAL_GetTick>
 800503c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800503e:	e00a      	b.n	8005056 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005040:	f7fc fb4a 	bl	80016d8 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	f241 3288 	movw	r2, #5000	; 0x1388
 800504e:	4293      	cmp	r3, r2
 8005050:	d901      	bls.n	8005056 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e138      	b.n	80052c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005056:	4b4e      	ldr	r3, [pc, #312]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 8005058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1ee      	bne.n	8005040 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005066:	2b00      	cmp	r3, #0
 8005068:	f000 812d 	beq.w	80052c6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800506c:	4b48      	ldr	r3, [pc, #288]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005074:	2b18      	cmp	r3, #24
 8005076:	f000 80bd 	beq.w	80051f4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	2b02      	cmp	r3, #2
 8005080:	f040 809e 	bne.w	80051c0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005084:	4b42      	ldr	r3, [pc, #264]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a41      	ldr	r2, [pc, #260]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 800508a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800508e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005090:	f7fc fb22 	bl	80016d8 <HAL_GetTick>
 8005094:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005096:	e008      	b.n	80050aa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005098:	f7fc fb1e 	bl	80016d8 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e10e      	b.n	80052c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050aa:	4b39      	ldr	r3, [pc, #228]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1f0      	bne.n	8005098 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050b6:	4b36      	ldr	r3, [pc, #216]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 80050b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050ba:	4b37      	ldr	r3, [pc, #220]	; (8005198 <HAL_RCC_OscConfig+0x774>)
 80050bc:	4013      	ands	r3, r2
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80050c6:	0112      	lsls	r2, r2, #4
 80050c8:	430a      	orrs	r2, r1
 80050ca:	4931      	ldr	r1, [pc, #196]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	628b      	str	r3, [r1, #40]	; 0x28
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d4:	3b01      	subs	r3, #1
 80050d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050de:	3b01      	subs	r3, #1
 80050e0:	025b      	lsls	r3, r3, #9
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	431a      	orrs	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ea:	3b01      	subs	r3, #1
 80050ec:	041b      	lsls	r3, r3, #16
 80050ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80050f2:	431a      	orrs	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f8:	3b01      	subs	r3, #1
 80050fa:	061b      	lsls	r3, r3, #24
 80050fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005100:	4923      	ldr	r1, [pc, #140]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 8005102:	4313      	orrs	r3, r2
 8005104:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005106:	4b22      	ldr	r3, [pc, #136]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 8005108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510a:	4a21      	ldr	r2, [pc, #132]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 800510c:	f023 0301 	bic.w	r3, r3, #1
 8005110:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005112:	4b1f      	ldr	r3, [pc, #124]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 8005114:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005116:	4b21      	ldr	r3, [pc, #132]	; (800519c <HAL_RCC_OscConfig+0x778>)
 8005118:	4013      	ands	r3, r2
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800511e:	00d2      	lsls	r2, r2, #3
 8005120:	491b      	ldr	r1, [pc, #108]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 8005122:	4313      	orrs	r3, r2
 8005124:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005126:	4b1a      	ldr	r3, [pc, #104]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 8005128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512a:	f023 020c 	bic.w	r2, r3, #12
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005132:	4917      	ldr	r1, [pc, #92]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 8005134:	4313      	orrs	r3, r2
 8005136:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005138:	4b15      	ldr	r3, [pc, #84]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 800513a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513c:	f023 0202 	bic.w	r2, r3, #2
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005144:	4912      	ldr	r1, [pc, #72]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 8005146:	4313      	orrs	r3, r2
 8005148:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800514a:	4b11      	ldr	r3, [pc, #68]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 800514c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514e:	4a10      	ldr	r2, [pc, #64]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 8005150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005154:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005156:	4b0e      	ldr	r3, [pc, #56]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 8005158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515a:	4a0d      	ldr	r2, [pc, #52]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 800515c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005160:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005162:	4b0b      	ldr	r3, [pc, #44]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 8005164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005166:	4a0a      	ldr	r2, [pc, #40]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 8005168:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800516c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800516e:	4b08      	ldr	r3, [pc, #32]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 8005170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005172:	4a07      	ldr	r2, [pc, #28]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 8005174:	f043 0301 	orr.w	r3, r3, #1
 8005178:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800517a:	4b05      	ldr	r3, [pc, #20]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a04      	ldr	r2, [pc, #16]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 8005180:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005184:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005186:	f7fc faa7 	bl	80016d8 <HAL_GetTick>
 800518a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800518c:	e011      	b.n	80051b2 <HAL_RCC_OscConfig+0x78e>
 800518e:	bf00      	nop
 8005190:	58024400 	.word	0x58024400
 8005194:	58024800 	.word	0x58024800
 8005198:	fffffc0c 	.word	0xfffffc0c
 800519c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051a0:	f7fc fa9a 	bl	80016d8 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e08a      	b.n	80052c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051b2:	4b47      	ldr	r3, [pc, #284]	; (80052d0 <HAL_RCC_OscConfig+0x8ac>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d0f0      	beq.n	80051a0 <HAL_RCC_OscConfig+0x77c>
 80051be:	e082      	b.n	80052c6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051c0:	4b43      	ldr	r3, [pc, #268]	; (80052d0 <HAL_RCC_OscConfig+0x8ac>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a42      	ldr	r2, [pc, #264]	; (80052d0 <HAL_RCC_OscConfig+0x8ac>)
 80051c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051cc:	f7fc fa84 	bl	80016d8 <HAL_GetTick>
 80051d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051d2:	e008      	b.n	80051e6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051d4:	f7fc fa80 	bl	80016d8 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e070      	b.n	80052c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051e6:	4b3a      	ldr	r3, [pc, #232]	; (80052d0 <HAL_RCC_OscConfig+0x8ac>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1f0      	bne.n	80051d4 <HAL_RCC_OscConfig+0x7b0>
 80051f2:	e068      	b.n	80052c6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80051f4:	4b36      	ldr	r3, [pc, #216]	; (80052d0 <HAL_RCC_OscConfig+0x8ac>)
 80051f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80051fa:	4b35      	ldr	r3, [pc, #212]	; (80052d0 <HAL_RCC_OscConfig+0x8ac>)
 80051fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	2b01      	cmp	r3, #1
 8005206:	d031      	beq.n	800526c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	f003 0203 	and.w	r2, r3, #3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005212:	429a      	cmp	r2, r3
 8005214:	d12a      	bne.n	800526c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	091b      	lsrs	r3, r3, #4
 800521a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005222:	429a      	cmp	r2, r3
 8005224:	d122      	bne.n	800526c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005230:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005232:	429a      	cmp	r2, r3
 8005234:	d11a      	bne.n	800526c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	0a5b      	lsrs	r3, r3, #9
 800523a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005242:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005244:	429a      	cmp	r2, r3
 8005246:	d111      	bne.n	800526c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	0c1b      	lsrs	r3, r3, #16
 800524c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005254:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005256:	429a      	cmp	r2, r3
 8005258:	d108      	bne.n	800526c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	0e1b      	lsrs	r3, r3, #24
 800525e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005266:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005268:	429a      	cmp	r2, r3
 800526a:	d001      	beq.n	8005270 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e02b      	b.n	80052c8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005270:	4b17      	ldr	r3, [pc, #92]	; (80052d0 <HAL_RCC_OscConfig+0x8ac>)
 8005272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005274:	08db      	lsrs	r3, r3, #3
 8005276:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800527a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	429a      	cmp	r2, r3
 8005284:	d01f      	beq.n	80052c6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005286:	4b12      	ldr	r3, [pc, #72]	; (80052d0 <HAL_RCC_OscConfig+0x8ac>)
 8005288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528a:	4a11      	ldr	r2, [pc, #68]	; (80052d0 <HAL_RCC_OscConfig+0x8ac>)
 800528c:	f023 0301 	bic.w	r3, r3, #1
 8005290:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005292:	f7fc fa21 	bl	80016d8 <HAL_GetTick>
 8005296:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005298:	bf00      	nop
 800529a:	f7fc fa1d 	bl	80016d8 <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d0f9      	beq.n	800529a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80052a6:	4b0a      	ldr	r3, [pc, #40]	; (80052d0 <HAL_RCC_OscConfig+0x8ac>)
 80052a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052aa:	4b0a      	ldr	r3, [pc, #40]	; (80052d4 <HAL_RCC_OscConfig+0x8b0>)
 80052ac:	4013      	ands	r3, r2
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80052b2:	00d2      	lsls	r2, r2, #3
 80052b4:	4906      	ldr	r1, [pc, #24]	; (80052d0 <HAL_RCC_OscConfig+0x8ac>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80052ba:	4b05      	ldr	r3, [pc, #20]	; (80052d0 <HAL_RCC_OscConfig+0x8ac>)
 80052bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052be:	4a04      	ldr	r2, [pc, #16]	; (80052d0 <HAL_RCC_OscConfig+0x8ac>)
 80052c0:	f043 0301 	orr.w	r3, r3, #1
 80052c4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3730      	adds	r7, #48	; 0x30
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	58024400 	.word	0x58024400
 80052d4:	ffff0007 	.word	0xffff0007

080052d8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d101      	bne.n	80052ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e19c      	b.n	8005626 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052ec:	4b8a      	ldr	r3, [pc, #552]	; (8005518 <HAL_RCC_ClockConfig+0x240>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 030f 	and.w	r3, r3, #15
 80052f4:	683a      	ldr	r2, [r7, #0]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d910      	bls.n	800531c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052fa:	4b87      	ldr	r3, [pc, #540]	; (8005518 <HAL_RCC_ClockConfig+0x240>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f023 020f 	bic.w	r2, r3, #15
 8005302:	4985      	ldr	r1, [pc, #532]	; (8005518 <HAL_RCC_ClockConfig+0x240>)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	4313      	orrs	r3, r2
 8005308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800530a:	4b83      	ldr	r3, [pc, #524]	; (8005518 <HAL_RCC_ClockConfig+0x240>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 030f 	and.w	r3, r3, #15
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	429a      	cmp	r2, r3
 8005316:	d001      	beq.n	800531c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e184      	b.n	8005626 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0304 	and.w	r3, r3, #4
 8005324:	2b00      	cmp	r3, #0
 8005326:	d010      	beq.n	800534a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	691a      	ldr	r2, [r3, #16]
 800532c:	4b7b      	ldr	r3, [pc, #492]	; (800551c <HAL_RCC_ClockConfig+0x244>)
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005334:	429a      	cmp	r2, r3
 8005336:	d908      	bls.n	800534a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005338:	4b78      	ldr	r3, [pc, #480]	; (800551c <HAL_RCC_ClockConfig+0x244>)
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	4975      	ldr	r1, [pc, #468]	; (800551c <HAL_RCC_ClockConfig+0x244>)
 8005346:	4313      	orrs	r3, r2
 8005348:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0308 	and.w	r3, r3, #8
 8005352:	2b00      	cmp	r3, #0
 8005354:	d010      	beq.n	8005378 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	695a      	ldr	r2, [r3, #20]
 800535a:	4b70      	ldr	r3, [pc, #448]	; (800551c <HAL_RCC_ClockConfig+0x244>)
 800535c:	69db      	ldr	r3, [r3, #28]
 800535e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005362:	429a      	cmp	r2, r3
 8005364:	d908      	bls.n	8005378 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005366:	4b6d      	ldr	r3, [pc, #436]	; (800551c <HAL_RCC_ClockConfig+0x244>)
 8005368:	69db      	ldr	r3, [r3, #28]
 800536a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	496a      	ldr	r1, [pc, #424]	; (800551c <HAL_RCC_ClockConfig+0x244>)
 8005374:	4313      	orrs	r3, r2
 8005376:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0310 	and.w	r3, r3, #16
 8005380:	2b00      	cmp	r3, #0
 8005382:	d010      	beq.n	80053a6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	699a      	ldr	r2, [r3, #24]
 8005388:	4b64      	ldr	r3, [pc, #400]	; (800551c <HAL_RCC_ClockConfig+0x244>)
 800538a:	69db      	ldr	r3, [r3, #28]
 800538c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005390:	429a      	cmp	r2, r3
 8005392:	d908      	bls.n	80053a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005394:	4b61      	ldr	r3, [pc, #388]	; (800551c <HAL_RCC_ClockConfig+0x244>)
 8005396:	69db      	ldr	r3, [r3, #28]
 8005398:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	495e      	ldr	r1, [pc, #376]	; (800551c <HAL_RCC_ClockConfig+0x244>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0320 	and.w	r3, r3, #32
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d010      	beq.n	80053d4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	69da      	ldr	r2, [r3, #28]
 80053b6:	4b59      	ldr	r3, [pc, #356]	; (800551c <HAL_RCC_ClockConfig+0x244>)
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053be:	429a      	cmp	r2, r3
 80053c0:	d908      	bls.n	80053d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80053c2:	4b56      	ldr	r3, [pc, #344]	; (800551c <HAL_RCC_ClockConfig+0x244>)
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	4953      	ldr	r1, [pc, #332]	; (800551c <HAL_RCC_ClockConfig+0x244>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0302 	and.w	r3, r3, #2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d010      	beq.n	8005402 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68da      	ldr	r2, [r3, #12]
 80053e4:	4b4d      	ldr	r3, [pc, #308]	; (800551c <HAL_RCC_ClockConfig+0x244>)
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	f003 030f 	and.w	r3, r3, #15
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d908      	bls.n	8005402 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053f0:	4b4a      	ldr	r3, [pc, #296]	; (800551c <HAL_RCC_ClockConfig+0x244>)
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	f023 020f 	bic.w	r2, r3, #15
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	4947      	ldr	r1, [pc, #284]	; (800551c <HAL_RCC_ClockConfig+0x244>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d055      	beq.n	80054ba <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800540e:	4b43      	ldr	r3, [pc, #268]	; (800551c <HAL_RCC_ClockConfig+0x244>)
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	4940      	ldr	r1, [pc, #256]	; (800551c <HAL_RCC_ClockConfig+0x244>)
 800541c:	4313      	orrs	r3, r2
 800541e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	2b02      	cmp	r3, #2
 8005426:	d107      	bne.n	8005438 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005428:	4b3c      	ldr	r3, [pc, #240]	; (800551c <HAL_RCC_ClockConfig+0x244>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d121      	bne.n	8005478 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e0f6      	b.n	8005626 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	2b03      	cmp	r3, #3
 800543e:	d107      	bne.n	8005450 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005440:	4b36      	ldr	r3, [pc, #216]	; (800551c <HAL_RCC_ClockConfig+0x244>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d115      	bne.n	8005478 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e0ea      	b.n	8005626 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d107      	bne.n	8005468 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005458:	4b30      	ldr	r3, [pc, #192]	; (800551c <HAL_RCC_ClockConfig+0x244>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005460:	2b00      	cmp	r3, #0
 8005462:	d109      	bne.n	8005478 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e0de      	b.n	8005626 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005468:	4b2c      	ldr	r3, [pc, #176]	; (800551c <HAL_RCC_ClockConfig+0x244>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e0d6      	b.n	8005626 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005478:	4b28      	ldr	r3, [pc, #160]	; (800551c <HAL_RCC_ClockConfig+0x244>)
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	f023 0207 	bic.w	r2, r3, #7
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	4925      	ldr	r1, [pc, #148]	; (800551c <HAL_RCC_ClockConfig+0x244>)
 8005486:	4313      	orrs	r3, r2
 8005488:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800548a:	f7fc f925 	bl	80016d8 <HAL_GetTick>
 800548e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005490:	e00a      	b.n	80054a8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005492:	f7fc f921 	bl	80016d8 <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	f241 3288 	movw	r2, #5000	; 0x1388
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d901      	bls.n	80054a8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e0be      	b.n	8005626 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054a8:	4b1c      	ldr	r3, [pc, #112]	; (800551c <HAL_RCC_ClockConfig+0x244>)
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	00db      	lsls	r3, r3, #3
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d1eb      	bne.n	8005492 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d010      	beq.n	80054e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68da      	ldr	r2, [r3, #12]
 80054ca:	4b14      	ldr	r3, [pc, #80]	; (800551c <HAL_RCC_ClockConfig+0x244>)
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	f003 030f 	and.w	r3, r3, #15
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d208      	bcs.n	80054e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054d6:	4b11      	ldr	r3, [pc, #68]	; (800551c <HAL_RCC_ClockConfig+0x244>)
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	f023 020f 	bic.w	r2, r3, #15
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	490e      	ldr	r1, [pc, #56]	; (800551c <HAL_RCC_ClockConfig+0x244>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054e8:	4b0b      	ldr	r3, [pc, #44]	; (8005518 <HAL_RCC_ClockConfig+0x240>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 030f 	and.w	r3, r3, #15
 80054f0:	683a      	ldr	r2, [r7, #0]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d214      	bcs.n	8005520 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054f6:	4b08      	ldr	r3, [pc, #32]	; (8005518 <HAL_RCC_ClockConfig+0x240>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f023 020f 	bic.w	r2, r3, #15
 80054fe:	4906      	ldr	r1, [pc, #24]	; (8005518 <HAL_RCC_ClockConfig+0x240>)
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	4313      	orrs	r3, r2
 8005504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005506:	4b04      	ldr	r3, [pc, #16]	; (8005518 <HAL_RCC_ClockConfig+0x240>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 030f 	and.w	r3, r3, #15
 800550e:	683a      	ldr	r2, [r7, #0]
 8005510:	429a      	cmp	r2, r3
 8005512:	d005      	beq.n	8005520 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e086      	b.n	8005626 <HAL_RCC_ClockConfig+0x34e>
 8005518:	52002000 	.word	0x52002000
 800551c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0304 	and.w	r3, r3, #4
 8005528:	2b00      	cmp	r3, #0
 800552a:	d010      	beq.n	800554e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	691a      	ldr	r2, [r3, #16]
 8005530:	4b3f      	ldr	r3, [pc, #252]	; (8005630 <HAL_RCC_ClockConfig+0x358>)
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005538:	429a      	cmp	r2, r3
 800553a:	d208      	bcs.n	800554e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800553c:	4b3c      	ldr	r3, [pc, #240]	; (8005630 <HAL_RCC_ClockConfig+0x358>)
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	4939      	ldr	r1, [pc, #228]	; (8005630 <HAL_RCC_ClockConfig+0x358>)
 800554a:	4313      	orrs	r3, r2
 800554c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0308 	and.w	r3, r3, #8
 8005556:	2b00      	cmp	r3, #0
 8005558:	d010      	beq.n	800557c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	695a      	ldr	r2, [r3, #20]
 800555e:	4b34      	ldr	r3, [pc, #208]	; (8005630 <HAL_RCC_ClockConfig+0x358>)
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005566:	429a      	cmp	r2, r3
 8005568:	d208      	bcs.n	800557c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800556a:	4b31      	ldr	r3, [pc, #196]	; (8005630 <HAL_RCC_ClockConfig+0x358>)
 800556c:	69db      	ldr	r3, [r3, #28]
 800556e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	492e      	ldr	r1, [pc, #184]	; (8005630 <HAL_RCC_ClockConfig+0x358>)
 8005578:	4313      	orrs	r3, r2
 800557a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0310 	and.w	r3, r3, #16
 8005584:	2b00      	cmp	r3, #0
 8005586:	d010      	beq.n	80055aa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	699a      	ldr	r2, [r3, #24]
 800558c:	4b28      	ldr	r3, [pc, #160]	; (8005630 <HAL_RCC_ClockConfig+0x358>)
 800558e:	69db      	ldr	r3, [r3, #28]
 8005590:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005594:	429a      	cmp	r2, r3
 8005596:	d208      	bcs.n	80055aa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005598:	4b25      	ldr	r3, [pc, #148]	; (8005630 <HAL_RCC_ClockConfig+0x358>)
 800559a:	69db      	ldr	r3, [r3, #28]
 800559c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	4922      	ldr	r1, [pc, #136]	; (8005630 <HAL_RCC_ClockConfig+0x358>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0320 	and.w	r3, r3, #32
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d010      	beq.n	80055d8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	69da      	ldr	r2, [r3, #28]
 80055ba:	4b1d      	ldr	r3, [pc, #116]	; (8005630 <HAL_RCC_ClockConfig+0x358>)
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d208      	bcs.n	80055d8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80055c6:	4b1a      	ldr	r3, [pc, #104]	; (8005630 <HAL_RCC_ClockConfig+0x358>)
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	4917      	ldr	r1, [pc, #92]	; (8005630 <HAL_RCC_ClockConfig+0x358>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80055d8:	f000 f834 	bl	8005644 <HAL_RCC_GetSysClockFreq>
 80055dc:	4602      	mov	r2, r0
 80055de:	4b14      	ldr	r3, [pc, #80]	; (8005630 <HAL_RCC_ClockConfig+0x358>)
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	0a1b      	lsrs	r3, r3, #8
 80055e4:	f003 030f 	and.w	r3, r3, #15
 80055e8:	4912      	ldr	r1, [pc, #72]	; (8005634 <HAL_RCC_ClockConfig+0x35c>)
 80055ea:	5ccb      	ldrb	r3, [r1, r3]
 80055ec:	f003 031f 	and.w	r3, r3, #31
 80055f0:	fa22 f303 	lsr.w	r3, r2, r3
 80055f4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80055f6:	4b0e      	ldr	r3, [pc, #56]	; (8005630 <HAL_RCC_ClockConfig+0x358>)
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	f003 030f 	and.w	r3, r3, #15
 80055fe:	4a0d      	ldr	r2, [pc, #52]	; (8005634 <HAL_RCC_ClockConfig+0x35c>)
 8005600:	5cd3      	ldrb	r3, [r2, r3]
 8005602:	f003 031f 	and.w	r3, r3, #31
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	fa22 f303 	lsr.w	r3, r2, r3
 800560c:	4a0a      	ldr	r2, [pc, #40]	; (8005638 <HAL_RCC_ClockConfig+0x360>)
 800560e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005610:	4a0a      	ldr	r2, [pc, #40]	; (800563c <HAL_RCC_ClockConfig+0x364>)
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005616:	4b0a      	ldr	r3, [pc, #40]	; (8005640 <HAL_RCC_ClockConfig+0x368>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4618      	mov	r0, r3
 800561c:	f7fc f812 	bl	8001644 <HAL_InitTick>
 8005620:	4603      	mov	r3, r0
 8005622:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005624:	7bfb      	ldrb	r3, [r7, #15]
}
 8005626:	4618      	mov	r0, r3
 8005628:	3718      	adds	r7, #24
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	58024400 	.word	0x58024400
 8005634:	0800bfd8 	.word	0x0800bfd8
 8005638:	2400001c 	.word	0x2400001c
 800563c:	24000018 	.word	0x24000018
 8005640:	24000020 	.word	0x24000020

08005644 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005644:	b480      	push	{r7}
 8005646:	b089      	sub	sp, #36	; 0x24
 8005648:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800564a:	4bb3      	ldr	r3, [pc, #716]	; (8005918 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005652:	2b18      	cmp	r3, #24
 8005654:	f200 8155 	bhi.w	8005902 <HAL_RCC_GetSysClockFreq+0x2be>
 8005658:	a201      	add	r2, pc, #4	; (adr r2, 8005660 <HAL_RCC_GetSysClockFreq+0x1c>)
 800565a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800565e:	bf00      	nop
 8005660:	080056c5 	.word	0x080056c5
 8005664:	08005903 	.word	0x08005903
 8005668:	08005903 	.word	0x08005903
 800566c:	08005903 	.word	0x08005903
 8005670:	08005903 	.word	0x08005903
 8005674:	08005903 	.word	0x08005903
 8005678:	08005903 	.word	0x08005903
 800567c:	08005903 	.word	0x08005903
 8005680:	080056eb 	.word	0x080056eb
 8005684:	08005903 	.word	0x08005903
 8005688:	08005903 	.word	0x08005903
 800568c:	08005903 	.word	0x08005903
 8005690:	08005903 	.word	0x08005903
 8005694:	08005903 	.word	0x08005903
 8005698:	08005903 	.word	0x08005903
 800569c:	08005903 	.word	0x08005903
 80056a0:	080056f1 	.word	0x080056f1
 80056a4:	08005903 	.word	0x08005903
 80056a8:	08005903 	.word	0x08005903
 80056ac:	08005903 	.word	0x08005903
 80056b0:	08005903 	.word	0x08005903
 80056b4:	08005903 	.word	0x08005903
 80056b8:	08005903 	.word	0x08005903
 80056bc:	08005903 	.word	0x08005903
 80056c0:	080056f7 	.word	0x080056f7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056c4:	4b94      	ldr	r3, [pc, #592]	; (8005918 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0320 	and.w	r3, r3, #32
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d009      	beq.n	80056e4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056d0:	4b91      	ldr	r3, [pc, #580]	; (8005918 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	08db      	lsrs	r3, r3, #3
 80056d6:	f003 0303 	and.w	r3, r3, #3
 80056da:	4a90      	ldr	r2, [pc, #576]	; (800591c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80056dc:	fa22 f303 	lsr.w	r3, r2, r3
 80056e0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80056e2:	e111      	b.n	8005908 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80056e4:	4b8d      	ldr	r3, [pc, #564]	; (800591c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80056e6:	61bb      	str	r3, [r7, #24]
      break;
 80056e8:	e10e      	b.n	8005908 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80056ea:	4b8d      	ldr	r3, [pc, #564]	; (8005920 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80056ec:	61bb      	str	r3, [r7, #24]
      break;
 80056ee:	e10b      	b.n	8005908 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80056f0:	4b8c      	ldr	r3, [pc, #560]	; (8005924 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80056f2:	61bb      	str	r3, [r7, #24]
      break;
 80056f4:	e108      	b.n	8005908 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80056f6:	4b88      	ldr	r3, [pc, #544]	; (8005918 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056fa:	f003 0303 	and.w	r3, r3, #3
 80056fe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005700:	4b85      	ldr	r3, [pc, #532]	; (8005918 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005704:	091b      	lsrs	r3, r3, #4
 8005706:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800570a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800570c:	4b82      	ldr	r3, [pc, #520]	; (8005918 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800570e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005716:	4b80      	ldr	r3, [pc, #512]	; (8005918 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800571a:	08db      	lsrs	r3, r3, #3
 800571c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	fb02 f303 	mul.w	r3, r2, r3
 8005726:	ee07 3a90 	vmov	s15, r3
 800572a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800572e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	2b00      	cmp	r3, #0
 8005736:	f000 80e1 	beq.w	80058fc <HAL_RCC_GetSysClockFreq+0x2b8>
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	2b02      	cmp	r3, #2
 800573e:	f000 8083 	beq.w	8005848 <HAL_RCC_GetSysClockFreq+0x204>
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	2b02      	cmp	r3, #2
 8005746:	f200 80a1 	bhi.w	800588c <HAL_RCC_GetSysClockFreq+0x248>
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d003      	beq.n	8005758 <HAL_RCC_GetSysClockFreq+0x114>
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d056      	beq.n	8005804 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005756:	e099      	b.n	800588c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005758:	4b6f      	ldr	r3, [pc, #444]	; (8005918 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0320 	and.w	r3, r3, #32
 8005760:	2b00      	cmp	r3, #0
 8005762:	d02d      	beq.n	80057c0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005764:	4b6c      	ldr	r3, [pc, #432]	; (8005918 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	08db      	lsrs	r3, r3, #3
 800576a:	f003 0303 	and.w	r3, r3, #3
 800576e:	4a6b      	ldr	r2, [pc, #428]	; (800591c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005770:	fa22 f303 	lsr.w	r3, r2, r3
 8005774:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	ee07 3a90 	vmov	s15, r3
 800577c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	ee07 3a90 	vmov	s15, r3
 8005786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800578a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800578e:	4b62      	ldr	r3, [pc, #392]	; (8005918 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005796:	ee07 3a90 	vmov	s15, r3
 800579a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800579e:	ed97 6a02 	vldr	s12, [r7, #8]
 80057a2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005928 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ba:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80057be:	e087      	b.n	80058d0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	ee07 3a90 	vmov	s15, r3
 80057c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ca:	eddf 6a58 	vldr	s13, [pc, #352]	; 800592c <HAL_RCC_GetSysClockFreq+0x2e8>
 80057ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057d2:	4b51      	ldr	r3, [pc, #324]	; (8005918 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057da:	ee07 3a90 	vmov	s15, r3
 80057de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80057e6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005928 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005802:	e065      	b.n	80058d0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	ee07 3a90 	vmov	s15, r3
 800580a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800580e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005930 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005816:	4b40      	ldr	r3, [pc, #256]	; (8005918 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800581e:	ee07 3a90 	vmov	s15, r3
 8005822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005826:	ed97 6a02 	vldr	s12, [r7, #8]
 800582a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005928 <HAL_RCC_GetSysClockFreq+0x2e4>
 800582e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005836:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800583a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800583e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005842:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005846:	e043      	b.n	80058d0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	ee07 3a90 	vmov	s15, r3
 800584e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005852:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005934 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800585a:	4b2f      	ldr	r3, [pc, #188]	; (8005918 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800585c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005862:	ee07 3a90 	vmov	s15, r3
 8005866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800586a:	ed97 6a02 	vldr	s12, [r7, #8]
 800586e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005928 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800587a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800587e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005886:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800588a:	e021      	b.n	80058d0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	ee07 3a90 	vmov	s15, r3
 8005892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005896:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005930 <HAL_RCC_GetSysClockFreq+0x2ec>
 800589a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800589e:	4b1e      	ldr	r3, [pc, #120]	; (8005918 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058a6:	ee07 3a90 	vmov	s15, r3
 80058aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80058b2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005928 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058ce:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80058d0:	4b11      	ldr	r3, [pc, #68]	; (8005918 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d4:	0a5b      	lsrs	r3, r3, #9
 80058d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058da:	3301      	adds	r3, #1
 80058dc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	ee07 3a90 	vmov	s15, r3
 80058e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80058e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80058ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058f4:	ee17 3a90 	vmov	r3, s15
 80058f8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80058fa:	e005      	b.n	8005908 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80058fc:	2300      	movs	r3, #0
 80058fe:	61bb      	str	r3, [r7, #24]
      break;
 8005900:	e002      	b.n	8005908 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005902:	4b07      	ldr	r3, [pc, #28]	; (8005920 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005904:	61bb      	str	r3, [r7, #24]
      break;
 8005906:	bf00      	nop
  }

  return sysclockfreq;
 8005908:	69bb      	ldr	r3, [r7, #24]
}
 800590a:	4618      	mov	r0, r3
 800590c:	3724      	adds	r7, #36	; 0x24
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	58024400 	.word	0x58024400
 800591c:	03d09000 	.word	0x03d09000
 8005920:	003d0900 	.word	0x003d0900
 8005924:	017d7840 	.word	0x017d7840
 8005928:	46000000 	.word	0x46000000
 800592c:	4c742400 	.word	0x4c742400
 8005930:	4a742400 	.word	0x4a742400
 8005934:	4bbebc20 	.word	0x4bbebc20

08005938 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800593e:	f7ff fe81 	bl	8005644 <HAL_RCC_GetSysClockFreq>
 8005942:	4602      	mov	r2, r0
 8005944:	4b10      	ldr	r3, [pc, #64]	; (8005988 <HAL_RCC_GetHCLKFreq+0x50>)
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	0a1b      	lsrs	r3, r3, #8
 800594a:	f003 030f 	and.w	r3, r3, #15
 800594e:	490f      	ldr	r1, [pc, #60]	; (800598c <HAL_RCC_GetHCLKFreq+0x54>)
 8005950:	5ccb      	ldrb	r3, [r1, r3]
 8005952:	f003 031f 	and.w	r3, r3, #31
 8005956:	fa22 f303 	lsr.w	r3, r2, r3
 800595a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800595c:	4b0a      	ldr	r3, [pc, #40]	; (8005988 <HAL_RCC_GetHCLKFreq+0x50>)
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	f003 030f 	and.w	r3, r3, #15
 8005964:	4a09      	ldr	r2, [pc, #36]	; (800598c <HAL_RCC_GetHCLKFreq+0x54>)
 8005966:	5cd3      	ldrb	r3, [r2, r3]
 8005968:	f003 031f 	and.w	r3, r3, #31
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	fa22 f303 	lsr.w	r3, r2, r3
 8005972:	4a07      	ldr	r2, [pc, #28]	; (8005990 <HAL_RCC_GetHCLKFreq+0x58>)
 8005974:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005976:	4a07      	ldr	r2, [pc, #28]	; (8005994 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800597c:	4b04      	ldr	r3, [pc, #16]	; (8005990 <HAL_RCC_GetHCLKFreq+0x58>)
 800597e:	681b      	ldr	r3, [r3, #0]
}
 8005980:	4618      	mov	r0, r3
 8005982:	3708      	adds	r7, #8
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	58024400 	.word	0x58024400
 800598c:	0800bfd8 	.word	0x0800bfd8
 8005990:	2400001c 	.word	0x2400001c
 8005994:	24000018 	.word	0x24000018

08005998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800599c:	f7ff ffcc 	bl	8005938 <HAL_RCC_GetHCLKFreq>
 80059a0:	4602      	mov	r2, r0
 80059a2:	4b06      	ldr	r3, [pc, #24]	; (80059bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	091b      	lsrs	r3, r3, #4
 80059a8:	f003 0307 	and.w	r3, r3, #7
 80059ac:	4904      	ldr	r1, [pc, #16]	; (80059c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80059ae:	5ccb      	ldrb	r3, [r1, r3]
 80059b0:	f003 031f 	and.w	r3, r3, #31
 80059b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	58024400 	.word	0x58024400
 80059c0:	0800bfd8 	.word	0x0800bfd8

080059c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80059c8:	f7ff ffb6 	bl	8005938 <HAL_RCC_GetHCLKFreq>
 80059cc:	4602      	mov	r2, r0
 80059ce:	4b06      	ldr	r3, [pc, #24]	; (80059e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059d0:	69db      	ldr	r3, [r3, #28]
 80059d2:	0a1b      	lsrs	r3, r3, #8
 80059d4:	f003 0307 	and.w	r3, r3, #7
 80059d8:	4904      	ldr	r1, [pc, #16]	; (80059ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80059da:	5ccb      	ldrb	r3, [r1, r3]
 80059dc:	f003 031f 	and.w	r3, r3, #31
 80059e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	58024400 	.word	0x58024400
 80059ec:	0800bfd8 	.word	0x0800bfd8

080059f0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059f4:	b0ca      	sub	sp, #296	; 0x128
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80059fc:	2300      	movs	r3, #0
 80059fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a02:	2300      	movs	r3, #0
 8005a04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a10:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005a14:	2500      	movs	r5, #0
 8005a16:	ea54 0305 	orrs.w	r3, r4, r5
 8005a1a:	d049      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a22:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a26:	d02f      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005a28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a2c:	d828      	bhi.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005a2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a32:	d01a      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005a34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a38:	d822      	bhi.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d003      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005a3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a42:	d007      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a44:	e01c      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a46:	4bb8      	ldr	r3, [pc, #736]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4a:	4ab7      	ldr	r2, [pc, #732]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a52:	e01a      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a58:	3308      	adds	r3, #8
 8005a5a:	2102      	movs	r1, #2
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f001 fc8f 	bl	8007380 <RCCEx_PLL2_Config>
 8005a62:	4603      	mov	r3, r0
 8005a64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a68:	e00f      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a6e:	3328      	adds	r3, #40	; 0x28
 8005a70:	2102      	movs	r1, #2
 8005a72:	4618      	mov	r0, r3
 8005a74:	f001 fd36 	bl	80074e4 <RCCEx_PLL3_Config>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a7e:	e004      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a86:	e000      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005a88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10a      	bne.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005a92:	4ba5      	ldr	r3, [pc, #660]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a96:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005aa0:	4aa1      	ldr	r2, [pc, #644]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005aa2:	430b      	orrs	r3, r1
 8005aa4:	6513      	str	r3, [r2, #80]	; 0x50
 8005aa6:	e003      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005aac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005abc:	f04f 0900 	mov.w	r9, #0
 8005ac0:	ea58 0309 	orrs.w	r3, r8, r9
 8005ac4:	d047      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005acc:	2b04      	cmp	r3, #4
 8005ace:	d82a      	bhi.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005ad0:	a201      	add	r2, pc, #4	; (adr r2, 8005ad8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad6:	bf00      	nop
 8005ad8:	08005aed 	.word	0x08005aed
 8005adc:	08005afb 	.word	0x08005afb
 8005ae0:	08005b11 	.word	0x08005b11
 8005ae4:	08005b2f 	.word	0x08005b2f
 8005ae8:	08005b2f 	.word	0x08005b2f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aec:	4b8e      	ldr	r3, [pc, #568]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af0:	4a8d      	ldr	r2, [pc, #564]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005af2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005af6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005af8:	e01a      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005afe:	3308      	adds	r3, #8
 8005b00:	2100      	movs	r1, #0
 8005b02:	4618      	mov	r0, r3
 8005b04:	f001 fc3c 	bl	8007380 <RCCEx_PLL2_Config>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b0e:	e00f      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b14:	3328      	adds	r3, #40	; 0x28
 8005b16:	2100      	movs	r1, #0
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f001 fce3 	bl	80074e4 <RCCEx_PLL3_Config>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b24:	e004      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b2c:	e000      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005b2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10a      	bne.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b38:	4b7b      	ldr	r3, [pc, #492]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b3c:	f023 0107 	bic.w	r1, r3, #7
 8005b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b46:	4a78      	ldr	r2, [pc, #480]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b48:	430b      	orrs	r3, r1
 8005b4a:	6513      	str	r3, [r2, #80]	; 0x50
 8005b4c:	e003      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005b62:	f04f 0b00 	mov.w	fp, #0
 8005b66:	ea5a 030b 	orrs.w	r3, sl, fp
 8005b6a:	d04c      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b76:	d030      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b7c:	d829      	bhi.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005b7e:	2bc0      	cmp	r3, #192	; 0xc0
 8005b80:	d02d      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005b82:	2bc0      	cmp	r3, #192	; 0xc0
 8005b84:	d825      	bhi.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005b86:	2b80      	cmp	r3, #128	; 0x80
 8005b88:	d018      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005b8a:	2b80      	cmp	r3, #128	; 0x80
 8005b8c:	d821      	bhi.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d002      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005b92:	2b40      	cmp	r3, #64	; 0x40
 8005b94:	d007      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005b96:	e01c      	b.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b98:	4b63      	ldr	r3, [pc, #396]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9c:	4a62      	ldr	r2, [pc, #392]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ba2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005ba4:	e01c      	b.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005baa:	3308      	adds	r3, #8
 8005bac:	2100      	movs	r1, #0
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f001 fbe6 	bl	8007380 <RCCEx_PLL2_Config>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005bba:	e011      	b.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bc0:	3328      	adds	r3, #40	; 0x28
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f001 fc8d 	bl	80074e4 <RCCEx_PLL3_Config>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005bd0:	e006      	b.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005bd8:	e002      	b.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005bda:	bf00      	nop
 8005bdc:	e000      	b.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005bde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005be0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d10a      	bne.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005be8:	4b4f      	ldr	r3, [pc, #316]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bec:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bf6:	4a4c      	ldr	r2, [pc, #304]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bf8:	430b      	orrs	r3, r1
 8005bfa:	6513      	str	r3, [r2, #80]	; 0x50
 8005bfc:	e003      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005c12:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005c16:	2300      	movs	r3, #0
 8005c18:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005c1c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8005c20:	460b      	mov	r3, r1
 8005c22:	4313      	orrs	r3, r2
 8005c24:	d053      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005c2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c32:	d035      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005c34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c38:	d82e      	bhi.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c3a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005c3e:	d031      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005c40:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005c44:	d828      	bhi.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c4a:	d01a      	beq.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005c4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c50:	d822      	bhi.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d003      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005c56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c5a:	d007      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005c5c:	e01c      	b.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c5e:	4b32      	ldr	r3, [pc, #200]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c62:	4a31      	ldr	r2, [pc, #196]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c6a:	e01c      	b.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c70:	3308      	adds	r3, #8
 8005c72:	2100      	movs	r1, #0
 8005c74:	4618      	mov	r0, r3
 8005c76:	f001 fb83 	bl	8007380 <RCCEx_PLL2_Config>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005c80:	e011      	b.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c86:	3328      	adds	r3, #40	; 0x28
 8005c88:	2100      	movs	r1, #0
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f001 fc2a 	bl	80074e4 <RCCEx_PLL3_Config>
 8005c90:	4603      	mov	r3, r0
 8005c92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c96:	e006      	b.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c9e:	e002      	b.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005ca0:	bf00      	nop
 8005ca2:	e000      	b.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005ca4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d10b      	bne.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005cae:	4b1e      	ldr	r3, [pc, #120]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cb2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005cbe:	4a1a      	ldr	r2, [pc, #104]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cc0:	430b      	orrs	r3, r1
 8005cc2:	6593      	str	r3, [r2, #88]	; 0x58
 8005cc4:	e003      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005cda:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005cde:	2300      	movs	r3, #0
 8005ce0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005ce4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005ce8:	460b      	mov	r3, r1
 8005cea:	4313      	orrs	r3, r2
 8005cec:	d056      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cf2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005cf6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005cfa:	d038      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005cfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d00:	d831      	bhi.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d02:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d06:	d034      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005d08:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d0c:	d82b      	bhi.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d12:	d01d      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005d14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d18:	d825      	bhi.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d006      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005d1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d22:	d00a      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005d24:	e01f      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d26:	bf00      	nop
 8005d28:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d2c:	4ba2      	ldr	r3, [pc, #648]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d30:	4aa1      	ldr	r2, [pc, #644]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d38:	e01c      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d3e:	3308      	adds	r3, #8
 8005d40:	2100      	movs	r1, #0
 8005d42:	4618      	mov	r0, r3
 8005d44:	f001 fb1c 	bl	8007380 <RCCEx_PLL2_Config>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005d4e:	e011      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d54:	3328      	adds	r3, #40	; 0x28
 8005d56:	2100      	movs	r1, #0
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f001 fbc3 	bl	80074e4 <RCCEx_PLL3_Config>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d64:	e006      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d6c:	e002      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005d6e:	bf00      	nop
 8005d70:	e000      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005d72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d10b      	bne.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005d7c:	4b8e      	ldr	r3, [pc, #568]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d80:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d88:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005d8c:	4a8a      	ldr	r2, [pc, #552]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d8e:	430b      	orrs	r3, r1
 8005d90:	6593      	str	r3, [r2, #88]	; 0x58
 8005d92:	e003      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d98:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005da8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005dac:	2300      	movs	r3, #0
 8005dae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005db2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005db6:	460b      	mov	r3, r1
 8005db8:	4313      	orrs	r3, r2
 8005dba:	d03a      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dc2:	2b30      	cmp	r3, #48	; 0x30
 8005dc4:	d01f      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005dc6:	2b30      	cmp	r3, #48	; 0x30
 8005dc8:	d819      	bhi.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005dca:	2b20      	cmp	r3, #32
 8005dcc:	d00c      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005dce:	2b20      	cmp	r3, #32
 8005dd0:	d815      	bhi.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d019      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005dd6:	2b10      	cmp	r3, #16
 8005dd8:	d111      	bne.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dda:	4b77      	ldr	r3, [pc, #476]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dde:	4a76      	ldr	r2, [pc, #472]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005de4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005de6:	e011      	b.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dec:	3308      	adds	r3, #8
 8005dee:	2102      	movs	r1, #2
 8005df0:	4618      	mov	r0, r3
 8005df2:	f001 fac5 	bl	8007380 <RCCEx_PLL2_Config>
 8005df6:	4603      	mov	r3, r0
 8005df8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005dfc:	e006      	b.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005e04:	e002      	b.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005e06:	bf00      	nop
 8005e08:	e000      	b.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005e0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10a      	bne.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005e14:	4b68      	ldr	r3, [pc, #416]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e18:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e22:	4a65      	ldr	r2, [pc, #404]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e24:	430b      	orrs	r3, r1
 8005e26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e28:	e003      	b.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005e3e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005e42:	2300      	movs	r3, #0
 8005e44:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e48:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	d051      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e5c:	d035      	beq.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005e5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e62:	d82e      	bhi.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005e64:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e68:	d031      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005e6a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e6e:	d828      	bhi.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005e70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e74:	d01a      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e7a:	d822      	bhi.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d003      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e84:	d007      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005e86:	e01c      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e88:	4b4b      	ldr	r3, [pc, #300]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8c:	4a4a      	ldr	r2, [pc, #296]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e94:	e01c      	b.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e9a:	3308      	adds	r3, #8
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f001 fa6e 	bl	8007380 <RCCEx_PLL2_Config>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005eaa:	e011      	b.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eb0:	3328      	adds	r3, #40	; 0x28
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f001 fb15 	bl	80074e4 <RCCEx_PLL3_Config>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ec0:	e006      	b.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005ec8:	e002      	b.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005eca:	bf00      	nop
 8005ecc:	e000      	b.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005ece:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ed0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10a      	bne.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005ed8:	4b37      	ldr	r3, [pc, #220]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005edc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ee6:	4a34      	ldr	r2, [pc, #208]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ee8:	430b      	orrs	r3, r1
 8005eea:	6513      	str	r3, [r2, #80]	; 0x50
 8005eec:	e003      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ef2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efe:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005f02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f06:	2300      	movs	r3, #0
 8005f08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005f0c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005f10:	460b      	mov	r3, r1
 8005f12:	4313      	orrs	r3, r2
 8005f14:	d056      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f20:	d033      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005f22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f26:	d82c      	bhi.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f2c:	d02f      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005f2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f32:	d826      	bhi.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f34:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f38:	d02b      	beq.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005f3a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f3e:	d820      	bhi.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f44:	d012      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005f46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f4a:	d81a      	bhi.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d022      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f54:	d115      	bne.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f5a:	3308      	adds	r3, #8
 8005f5c:	2101      	movs	r1, #1
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f001 fa0e 	bl	8007380 <RCCEx_PLL2_Config>
 8005f64:	4603      	mov	r3, r0
 8005f66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f6a:	e015      	b.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f70:	3328      	adds	r3, #40	; 0x28
 8005f72:	2101      	movs	r1, #1
 8005f74:	4618      	mov	r0, r3
 8005f76:	f001 fab5 	bl	80074e4 <RCCEx_PLL3_Config>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f80:	e00a      	b.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f88:	e006      	b.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f8a:	bf00      	nop
 8005f8c:	e004      	b.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f8e:	bf00      	nop
 8005f90:	e002      	b.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f92:	bf00      	nop
 8005f94:	e000      	b.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10d      	bne.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005fa0:	4b05      	ldr	r3, [pc, #20]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fa4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fae:	4a02      	ldr	r2, [pc, #8]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fb0:	430b      	orrs	r3, r1
 8005fb2:	6513      	str	r3, [r2, #80]	; 0x50
 8005fb4:	e006      	b.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005fb6:	bf00      	nop
 8005fb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fc0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fcc:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005fd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005fda:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005fde:	460b      	mov	r3, r1
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	d055      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fe8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005fec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ff0:	d033      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005ff2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ff6:	d82c      	bhi.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ffc:	d02f      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006002:	d826      	bhi.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006004:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006008:	d02b      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800600a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800600e:	d820      	bhi.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006010:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006014:	d012      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006016:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800601a:	d81a      	bhi.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800601c:	2b00      	cmp	r3, #0
 800601e:	d022      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006020:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006024:	d115      	bne.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800602a:	3308      	adds	r3, #8
 800602c:	2101      	movs	r1, #1
 800602e:	4618      	mov	r0, r3
 8006030:	f001 f9a6 	bl	8007380 <RCCEx_PLL2_Config>
 8006034:	4603      	mov	r3, r0
 8006036:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800603a:	e015      	b.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800603c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006040:	3328      	adds	r3, #40	; 0x28
 8006042:	2101      	movs	r1, #1
 8006044:	4618      	mov	r0, r3
 8006046:	f001 fa4d 	bl	80074e4 <RCCEx_PLL3_Config>
 800604a:	4603      	mov	r3, r0
 800604c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006050:	e00a      	b.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006058:	e006      	b.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800605a:	bf00      	nop
 800605c:	e004      	b.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800605e:	bf00      	nop
 8006060:	e002      	b.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006062:	bf00      	nop
 8006064:	e000      	b.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006066:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006068:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800606c:	2b00      	cmp	r3, #0
 800606e:	d10b      	bne.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006070:	4ba3      	ldr	r3, [pc, #652]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006074:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800607c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006080:	4a9f      	ldr	r2, [pc, #636]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006082:	430b      	orrs	r3, r1
 8006084:	6593      	str	r3, [r2, #88]	; 0x58
 8006086:	e003      	b.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006088:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800608c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006090:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006098:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800609c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80060a0:	2300      	movs	r3, #0
 80060a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80060a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80060aa:	460b      	mov	r3, r1
 80060ac:	4313      	orrs	r3, r2
 80060ae:	d037      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80060b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060ba:	d00e      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80060bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060c0:	d816      	bhi.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d018      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80060c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060ca:	d111      	bne.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060cc:	4b8c      	ldr	r3, [pc, #560]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d0:	4a8b      	ldr	r2, [pc, #556]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80060d8:	e00f      	b.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060de:	3308      	adds	r3, #8
 80060e0:	2101      	movs	r1, #1
 80060e2:	4618      	mov	r0, r3
 80060e4:	f001 f94c 	bl	8007380 <RCCEx_PLL2_Config>
 80060e8:	4603      	mov	r3, r0
 80060ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80060ee:	e004      	b.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80060f6:	e000      	b.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80060f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d10a      	bne.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006102:	4b7f      	ldr	r3, [pc, #508]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006106:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800610a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800610e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006110:	4a7b      	ldr	r2, [pc, #492]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006112:	430b      	orrs	r3, r1
 8006114:	6513      	str	r3, [r2, #80]	; 0x50
 8006116:	e003      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006118:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800611c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006120:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006128:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800612c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006130:	2300      	movs	r3, #0
 8006132:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006136:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800613a:	460b      	mov	r3, r1
 800613c:	4313      	orrs	r3, r2
 800613e:	d039      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006140:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006146:	2b03      	cmp	r3, #3
 8006148:	d81c      	bhi.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800614a:	a201      	add	r2, pc, #4	; (adr r2, 8006150 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800614c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006150:	0800618d 	.word	0x0800618d
 8006154:	08006161 	.word	0x08006161
 8006158:	0800616f 	.word	0x0800616f
 800615c:	0800618d 	.word	0x0800618d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006160:	4b67      	ldr	r3, [pc, #412]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006164:	4a66      	ldr	r2, [pc, #408]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800616a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800616c:	e00f      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800616e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006172:	3308      	adds	r3, #8
 8006174:	2102      	movs	r1, #2
 8006176:	4618      	mov	r0, r3
 8006178:	f001 f902 	bl	8007380 <RCCEx_PLL2_Config>
 800617c:	4603      	mov	r3, r0
 800617e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006182:	e004      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800618a:	e000      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800618c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800618e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006192:	2b00      	cmp	r3, #0
 8006194:	d10a      	bne.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006196:	4b5a      	ldr	r3, [pc, #360]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800619a:	f023 0103 	bic.w	r1, r3, #3
 800619e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061a4:	4a56      	ldr	r2, [pc, #344]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061a6:	430b      	orrs	r3, r1
 80061a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80061aa:	e003      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061bc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80061c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061c4:	2300      	movs	r3, #0
 80061c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80061ca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80061ce:	460b      	mov	r3, r1
 80061d0:	4313      	orrs	r3, r2
 80061d2:	f000 809f 	beq.w	8006314 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061d6:	4b4b      	ldr	r3, [pc, #300]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a4a      	ldr	r2, [pc, #296]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80061dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061e2:	f7fb fa79 	bl	80016d8 <HAL_GetTick>
 80061e6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061ea:	e00b      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061ec:	f7fb fa74 	bl	80016d8 <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	2b64      	cmp	r3, #100	; 0x64
 80061fa:	d903      	bls.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006202:	e005      	b.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006204:	4b3f      	ldr	r3, [pc, #252]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800620c:	2b00      	cmp	r3, #0
 800620e:	d0ed      	beq.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006210:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006214:	2b00      	cmp	r3, #0
 8006216:	d179      	bne.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006218:	4b39      	ldr	r3, [pc, #228]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800621a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800621c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006220:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006224:	4053      	eors	r3, r2
 8006226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800622a:	2b00      	cmp	r3, #0
 800622c:	d015      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800622e:	4b34      	ldr	r3, [pc, #208]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006236:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800623a:	4b31      	ldr	r3, [pc, #196]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800623c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800623e:	4a30      	ldr	r2, [pc, #192]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006244:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006246:	4b2e      	ldr	r3, [pc, #184]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800624a:	4a2d      	ldr	r2, [pc, #180]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800624c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006250:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006252:	4a2b      	ldr	r2, [pc, #172]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006254:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006258:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800625a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800625e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006266:	d118      	bne.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006268:	f7fb fa36 	bl	80016d8 <HAL_GetTick>
 800626c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006270:	e00d      	b.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006272:	f7fb fa31 	bl	80016d8 <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800627c:	1ad2      	subs	r2, r2, r3
 800627e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006282:	429a      	cmp	r2, r3
 8006284:	d903      	bls.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800628c:	e005      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800628e:	4b1c      	ldr	r3, [pc, #112]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006292:	f003 0302 	and.w	r3, r3, #2
 8006296:	2b00      	cmp	r3, #0
 8006298:	d0eb      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800629a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d129      	bne.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80062aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062b2:	d10e      	bne.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80062b4:	4b12      	ldr	r3, [pc, #72]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80062bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80062c4:	091a      	lsrs	r2, r3, #4
 80062c6:	4b10      	ldr	r3, [pc, #64]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80062c8:	4013      	ands	r3, r2
 80062ca:	4a0d      	ldr	r2, [pc, #52]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062cc:	430b      	orrs	r3, r1
 80062ce:	6113      	str	r3, [r2, #16]
 80062d0:	e005      	b.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80062d2:	4b0b      	ldr	r3, [pc, #44]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	4a0a      	ldr	r2, [pc, #40]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062d8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80062dc:	6113      	str	r3, [r2, #16]
 80062de:	4b08      	ldr	r3, [pc, #32]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062e0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80062e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80062ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062ee:	4a04      	ldr	r2, [pc, #16]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062f0:	430b      	orrs	r3, r1
 80062f2:	6713      	str	r3, [r2, #112]	; 0x70
 80062f4:	e00e      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80062fe:	e009      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006300:	58024400 	.word	0x58024400
 8006304:	58024800 	.word	0x58024800
 8006308:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800630c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006310:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006314:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631c:	f002 0301 	and.w	r3, r2, #1
 8006320:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006324:	2300      	movs	r3, #0
 8006326:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800632a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800632e:	460b      	mov	r3, r1
 8006330:	4313      	orrs	r3, r2
 8006332:	f000 8089 	beq.w	8006448 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800633a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800633c:	2b28      	cmp	r3, #40	; 0x28
 800633e:	d86b      	bhi.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006340:	a201      	add	r2, pc, #4	; (adr r2, 8006348 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006346:	bf00      	nop
 8006348:	08006421 	.word	0x08006421
 800634c:	08006419 	.word	0x08006419
 8006350:	08006419 	.word	0x08006419
 8006354:	08006419 	.word	0x08006419
 8006358:	08006419 	.word	0x08006419
 800635c:	08006419 	.word	0x08006419
 8006360:	08006419 	.word	0x08006419
 8006364:	08006419 	.word	0x08006419
 8006368:	080063ed 	.word	0x080063ed
 800636c:	08006419 	.word	0x08006419
 8006370:	08006419 	.word	0x08006419
 8006374:	08006419 	.word	0x08006419
 8006378:	08006419 	.word	0x08006419
 800637c:	08006419 	.word	0x08006419
 8006380:	08006419 	.word	0x08006419
 8006384:	08006419 	.word	0x08006419
 8006388:	08006403 	.word	0x08006403
 800638c:	08006419 	.word	0x08006419
 8006390:	08006419 	.word	0x08006419
 8006394:	08006419 	.word	0x08006419
 8006398:	08006419 	.word	0x08006419
 800639c:	08006419 	.word	0x08006419
 80063a0:	08006419 	.word	0x08006419
 80063a4:	08006419 	.word	0x08006419
 80063a8:	08006421 	.word	0x08006421
 80063ac:	08006419 	.word	0x08006419
 80063b0:	08006419 	.word	0x08006419
 80063b4:	08006419 	.word	0x08006419
 80063b8:	08006419 	.word	0x08006419
 80063bc:	08006419 	.word	0x08006419
 80063c0:	08006419 	.word	0x08006419
 80063c4:	08006419 	.word	0x08006419
 80063c8:	08006421 	.word	0x08006421
 80063cc:	08006419 	.word	0x08006419
 80063d0:	08006419 	.word	0x08006419
 80063d4:	08006419 	.word	0x08006419
 80063d8:	08006419 	.word	0x08006419
 80063dc:	08006419 	.word	0x08006419
 80063e0:	08006419 	.word	0x08006419
 80063e4:	08006419 	.word	0x08006419
 80063e8:	08006421 	.word	0x08006421
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063f0:	3308      	adds	r3, #8
 80063f2:	2101      	movs	r1, #1
 80063f4:	4618      	mov	r0, r3
 80063f6:	f000 ffc3 	bl	8007380 <RCCEx_PLL2_Config>
 80063fa:	4603      	mov	r3, r0
 80063fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006400:	e00f      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006402:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006406:	3328      	adds	r3, #40	; 0x28
 8006408:	2101      	movs	r1, #1
 800640a:	4618      	mov	r0, r3
 800640c:	f001 f86a 	bl	80074e4 <RCCEx_PLL3_Config>
 8006410:	4603      	mov	r3, r0
 8006412:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006416:	e004      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800641e:	e000      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006420:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006422:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10a      	bne.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800642a:	4bbf      	ldr	r3, [pc, #764]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800642c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800642e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006432:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006436:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006438:	4abb      	ldr	r2, [pc, #748]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800643a:	430b      	orrs	r3, r1
 800643c:	6553      	str	r3, [r2, #84]	; 0x54
 800643e:	e003      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006440:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006444:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006448:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800644c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006450:	f002 0302 	and.w	r3, r2, #2
 8006454:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006458:	2300      	movs	r3, #0
 800645a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800645e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006462:	460b      	mov	r3, r1
 8006464:	4313      	orrs	r3, r2
 8006466:	d041      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800646c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800646e:	2b05      	cmp	r3, #5
 8006470:	d824      	bhi.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006472:	a201      	add	r2, pc, #4	; (adr r2, 8006478 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006478:	080064c5 	.word	0x080064c5
 800647c:	08006491 	.word	0x08006491
 8006480:	080064a7 	.word	0x080064a7
 8006484:	080064c5 	.word	0x080064c5
 8006488:	080064c5 	.word	0x080064c5
 800648c:	080064c5 	.word	0x080064c5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006494:	3308      	adds	r3, #8
 8006496:	2101      	movs	r1, #1
 8006498:	4618      	mov	r0, r3
 800649a:	f000 ff71 	bl	8007380 <RCCEx_PLL2_Config>
 800649e:	4603      	mov	r3, r0
 80064a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80064a4:	e00f      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064aa:	3328      	adds	r3, #40	; 0x28
 80064ac:	2101      	movs	r1, #1
 80064ae:	4618      	mov	r0, r3
 80064b0:	f001 f818 	bl	80074e4 <RCCEx_PLL3_Config>
 80064b4:	4603      	mov	r3, r0
 80064b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80064ba:	e004      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80064c2:	e000      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80064c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d10a      	bne.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80064ce:	4b96      	ldr	r3, [pc, #600]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064d2:	f023 0107 	bic.w	r1, r3, #7
 80064d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064dc:	4a92      	ldr	r2, [pc, #584]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064de:	430b      	orrs	r3, r1
 80064e0:	6553      	str	r3, [r2, #84]	; 0x54
 80064e2:	e003      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f4:	f002 0304 	and.w	r3, r2, #4
 80064f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064fc:	2300      	movs	r3, #0
 80064fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006502:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006506:	460b      	mov	r3, r1
 8006508:	4313      	orrs	r3, r2
 800650a:	d044      	beq.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800650c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006510:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006514:	2b05      	cmp	r3, #5
 8006516:	d825      	bhi.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006518:	a201      	add	r2, pc, #4	; (adr r2, 8006520 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800651a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651e:	bf00      	nop
 8006520:	0800656d 	.word	0x0800656d
 8006524:	08006539 	.word	0x08006539
 8006528:	0800654f 	.word	0x0800654f
 800652c:	0800656d 	.word	0x0800656d
 8006530:	0800656d 	.word	0x0800656d
 8006534:	0800656d 	.word	0x0800656d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800653c:	3308      	adds	r3, #8
 800653e:	2101      	movs	r1, #1
 8006540:	4618      	mov	r0, r3
 8006542:	f000 ff1d 	bl	8007380 <RCCEx_PLL2_Config>
 8006546:	4603      	mov	r3, r0
 8006548:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800654c:	e00f      	b.n	800656e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800654e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006552:	3328      	adds	r3, #40	; 0x28
 8006554:	2101      	movs	r1, #1
 8006556:	4618      	mov	r0, r3
 8006558:	f000 ffc4 	bl	80074e4 <RCCEx_PLL3_Config>
 800655c:	4603      	mov	r3, r0
 800655e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006562:	e004      	b.n	800656e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800656a:	e000      	b.n	800656e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800656c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800656e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006572:	2b00      	cmp	r3, #0
 8006574:	d10b      	bne.n	800658e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006576:	4b6c      	ldr	r3, [pc, #432]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800657a:	f023 0107 	bic.w	r1, r3, #7
 800657e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006582:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006586:	4a68      	ldr	r2, [pc, #416]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006588:	430b      	orrs	r3, r1
 800658a:	6593      	str	r3, [r2, #88]	; 0x58
 800658c:	e003      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800658e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006592:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800659a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659e:	f002 0320 	and.w	r3, r2, #32
 80065a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80065a6:	2300      	movs	r3, #0
 80065a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80065ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80065b0:	460b      	mov	r3, r1
 80065b2:	4313      	orrs	r3, r2
 80065b4:	d055      	beq.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80065b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065c2:	d033      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80065c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065c8:	d82c      	bhi.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80065ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ce:	d02f      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80065d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065d4:	d826      	bhi.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80065d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80065da:	d02b      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80065dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80065e0:	d820      	bhi.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80065e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065e6:	d012      	beq.n	800660e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80065e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065ec:	d81a      	bhi.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d022      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80065f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065f6:	d115      	bne.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065fc:	3308      	adds	r3, #8
 80065fe:	2100      	movs	r1, #0
 8006600:	4618      	mov	r0, r3
 8006602:	f000 febd 	bl	8007380 <RCCEx_PLL2_Config>
 8006606:	4603      	mov	r3, r0
 8006608:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800660c:	e015      	b.n	800663a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800660e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006612:	3328      	adds	r3, #40	; 0x28
 8006614:	2102      	movs	r1, #2
 8006616:	4618      	mov	r0, r3
 8006618:	f000 ff64 	bl	80074e4 <RCCEx_PLL3_Config>
 800661c:	4603      	mov	r3, r0
 800661e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006622:	e00a      	b.n	800663a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800662a:	e006      	b.n	800663a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800662c:	bf00      	nop
 800662e:	e004      	b.n	800663a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006630:	bf00      	nop
 8006632:	e002      	b.n	800663a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006634:	bf00      	nop
 8006636:	e000      	b.n	800663a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006638:	bf00      	nop
    }

    if (ret == HAL_OK)
 800663a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800663e:	2b00      	cmp	r3, #0
 8006640:	d10b      	bne.n	800665a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006642:	4b39      	ldr	r3, [pc, #228]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006646:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800664a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800664e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006652:	4a35      	ldr	r2, [pc, #212]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006654:	430b      	orrs	r3, r1
 8006656:	6553      	str	r3, [r2, #84]	; 0x54
 8006658:	e003      	b.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800665a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800665e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800666e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006672:	2300      	movs	r3, #0
 8006674:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006678:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800667c:	460b      	mov	r3, r1
 800667e:	4313      	orrs	r3, r2
 8006680:	d058      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006686:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800668a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800668e:	d033      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006690:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006694:	d82c      	bhi.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800669a:	d02f      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800669c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066a0:	d826      	bhi.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80066a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066a6:	d02b      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80066a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066ac:	d820      	bhi.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80066ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066b2:	d012      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80066b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066b8:	d81a      	bhi.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d022      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80066be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066c2:	d115      	bne.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066c8:	3308      	adds	r3, #8
 80066ca:	2100      	movs	r1, #0
 80066cc:	4618      	mov	r0, r3
 80066ce:	f000 fe57 	bl	8007380 <RCCEx_PLL2_Config>
 80066d2:	4603      	mov	r3, r0
 80066d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80066d8:	e015      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066de:	3328      	adds	r3, #40	; 0x28
 80066e0:	2102      	movs	r1, #2
 80066e2:	4618      	mov	r0, r3
 80066e4:	f000 fefe 	bl	80074e4 <RCCEx_PLL3_Config>
 80066e8:	4603      	mov	r3, r0
 80066ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80066ee:	e00a      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80066f6:	e006      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80066f8:	bf00      	nop
 80066fa:	e004      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80066fc:	bf00      	nop
 80066fe:	e002      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006700:	bf00      	nop
 8006702:	e000      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006704:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006706:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800670a:	2b00      	cmp	r3, #0
 800670c:	d10e      	bne.n	800672c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800670e:	4b06      	ldr	r3, [pc, #24]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006712:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800671a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800671e:	4a02      	ldr	r2, [pc, #8]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006720:	430b      	orrs	r3, r1
 8006722:	6593      	str	r3, [r2, #88]	; 0x58
 8006724:	e006      	b.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006726:	bf00      	nop
 8006728:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800672c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006730:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006740:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006744:	2300      	movs	r3, #0
 8006746:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800674a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800674e:	460b      	mov	r3, r1
 8006750:	4313      	orrs	r3, r2
 8006752:	d055      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006754:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006758:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800675c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006760:	d033      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006762:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006766:	d82c      	bhi.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006768:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800676c:	d02f      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800676e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006772:	d826      	bhi.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006774:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006778:	d02b      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800677a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800677e:	d820      	bhi.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006780:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006784:	d012      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006786:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800678a:	d81a      	bhi.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800678c:	2b00      	cmp	r3, #0
 800678e:	d022      	beq.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006794:	d115      	bne.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800679a:	3308      	adds	r3, #8
 800679c:	2100      	movs	r1, #0
 800679e:	4618      	mov	r0, r3
 80067a0:	f000 fdee 	bl	8007380 <RCCEx_PLL2_Config>
 80067a4:	4603      	mov	r3, r0
 80067a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80067aa:	e015      	b.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067b0:	3328      	adds	r3, #40	; 0x28
 80067b2:	2102      	movs	r1, #2
 80067b4:	4618      	mov	r0, r3
 80067b6:	f000 fe95 	bl	80074e4 <RCCEx_PLL3_Config>
 80067ba:	4603      	mov	r3, r0
 80067bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80067c0:	e00a      	b.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80067c8:	e006      	b.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80067ca:	bf00      	nop
 80067cc:	e004      	b.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80067ce:	bf00      	nop
 80067d0:	e002      	b.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80067d2:	bf00      	nop
 80067d4:	e000      	b.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80067d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d10b      	bne.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80067e0:	4ba1      	ldr	r3, [pc, #644]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067e4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80067e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80067f0:	4a9d      	ldr	r2, [pc, #628]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067f2:	430b      	orrs	r3, r1
 80067f4:	6593      	str	r3, [r2, #88]	; 0x58
 80067f6:	e003      	b.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006800:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006808:	f002 0308 	and.w	r3, r2, #8
 800680c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006810:	2300      	movs	r3, #0
 8006812:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006816:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800681a:	460b      	mov	r3, r1
 800681c:	4313      	orrs	r3, r2
 800681e:	d01e      	beq.n	800685e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006820:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006824:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800682c:	d10c      	bne.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800682e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006832:	3328      	adds	r3, #40	; 0x28
 8006834:	2102      	movs	r1, #2
 8006836:	4618      	mov	r0, r3
 8006838:	f000 fe54 	bl	80074e4 <RCCEx_PLL3_Config>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d002      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006848:	4b87      	ldr	r3, [pc, #540]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800684a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800684c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006854:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006858:	4a83      	ldr	r2, [pc, #524]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800685a:	430b      	orrs	r3, r1
 800685c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800685e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006866:	f002 0310 	and.w	r3, r2, #16
 800686a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800686e:	2300      	movs	r3, #0
 8006870:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006874:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006878:	460b      	mov	r3, r1
 800687a:	4313      	orrs	r3, r2
 800687c:	d01e      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800687e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006882:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006886:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800688a:	d10c      	bne.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800688c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006890:	3328      	adds	r3, #40	; 0x28
 8006892:	2102      	movs	r1, #2
 8006894:	4618      	mov	r0, r3
 8006896:	f000 fe25 	bl	80074e4 <RCCEx_PLL3_Config>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d002      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80068a6:	4b70      	ldr	r3, [pc, #448]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80068ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068b6:	4a6c      	ldr	r2, [pc, #432]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068b8:	430b      	orrs	r3, r1
 80068ba:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80068bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80068c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80068cc:	2300      	movs	r3, #0
 80068ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068d2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80068d6:	460b      	mov	r3, r1
 80068d8:	4313      	orrs	r3, r2
 80068da:	d03e      	beq.n	800695a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80068dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80068e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068e8:	d022      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80068ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068ee:	d81b      	bhi.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d003      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80068f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068f8:	d00b      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80068fa:	e015      	b.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006900:	3308      	adds	r3, #8
 8006902:	2100      	movs	r1, #0
 8006904:	4618      	mov	r0, r3
 8006906:	f000 fd3b 	bl	8007380 <RCCEx_PLL2_Config>
 800690a:	4603      	mov	r3, r0
 800690c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006910:	e00f      	b.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006912:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006916:	3328      	adds	r3, #40	; 0x28
 8006918:	2102      	movs	r1, #2
 800691a:	4618      	mov	r0, r3
 800691c:	f000 fde2 	bl	80074e4 <RCCEx_PLL3_Config>
 8006920:	4603      	mov	r3, r0
 8006922:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006926:	e004      	b.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800692e:	e000      	b.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006930:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006932:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10b      	bne.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800693a:	4b4b      	ldr	r3, [pc, #300]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800693c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800693e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006946:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800694a:	4a47      	ldr	r2, [pc, #284]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800694c:	430b      	orrs	r3, r1
 800694e:	6593      	str	r3, [r2, #88]	; 0x58
 8006950:	e003      	b.n	800695a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006952:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006956:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800695a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800695e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006962:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006966:	67bb      	str	r3, [r7, #120]	; 0x78
 8006968:	2300      	movs	r3, #0
 800696a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800696c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006970:	460b      	mov	r3, r1
 8006972:	4313      	orrs	r3, r2
 8006974:	d03b      	beq.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006976:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800697a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800697e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006982:	d01f      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006984:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006988:	d818      	bhi.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800698a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800698e:	d003      	beq.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006990:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006994:	d007      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006996:	e011      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006998:	4b33      	ldr	r3, [pc, #204]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800699a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699c:	4a32      	ldr	r2, [pc, #200]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800699e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80069a4:	e00f      	b.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069aa:	3328      	adds	r3, #40	; 0x28
 80069ac:	2101      	movs	r1, #1
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 fd98 	bl	80074e4 <RCCEx_PLL3_Config>
 80069b4:	4603      	mov	r3, r0
 80069b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80069ba:	e004      	b.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80069c2:	e000      	b.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80069c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d10b      	bne.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069ce:	4b26      	ldr	r3, [pc, #152]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069d2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80069d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069de:	4a22      	ldr	r2, [pc, #136]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069e0:	430b      	orrs	r3, r1
 80069e2:	6553      	str	r3, [r2, #84]	; 0x54
 80069e4:	e003      	b.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80069ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80069fa:	673b      	str	r3, [r7, #112]	; 0x70
 80069fc:	2300      	movs	r3, #0
 80069fe:	677b      	str	r3, [r7, #116]	; 0x74
 8006a00:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006a04:	460b      	mov	r3, r1
 8006a06:	4313      	orrs	r3, r2
 8006a08:	d034      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d003      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a18:	d007      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006a1a:	e011      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a1c:	4b12      	ldr	r3, [pc, #72]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a20:	4a11      	ldr	r2, [pc, #68]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a28:	e00e      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a2e:	3308      	adds	r3, #8
 8006a30:	2102      	movs	r1, #2
 8006a32:	4618      	mov	r0, r3
 8006a34:	f000 fca4 	bl	8007380 <RCCEx_PLL2_Config>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a3e:	e003      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006a46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d10d      	bne.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006a50:	4b05      	ldr	r3, [pc, #20]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a5e:	4a02      	ldr	r2, [pc, #8]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a60:	430b      	orrs	r3, r1
 8006a62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006a64:	e006      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006a66:	bf00      	nop
 8006a68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006a80:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a82:	2300      	movs	r3, #0
 8006a84:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a86:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	d00c      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a94:	3328      	adds	r3, #40	; 0x28
 8006a96:	2102      	movs	r1, #2
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f000 fd23 	bl	80074e4 <RCCEx_PLL3_Config>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d002      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006ab6:	663b      	str	r3, [r7, #96]	; 0x60
 8006ab8:	2300      	movs	r3, #0
 8006aba:	667b      	str	r3, [r7, #100]	; 0x64
 8006abc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	d038      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ace:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ad2:	d018      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006ad4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ad8:	d811      	bhi.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006ada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ade:	d014      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ae4:	d80b      	bhi.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d011      	beq.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006aea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aee:	d106      	bne.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006af0:	4bc3      	ldr	r3, [pc, #780]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af4:	4ac2      	ldr	r2, [pc, #776]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006afa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006afc:	e008      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006b04:	e004      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006b06:	bf00      	nop
 8006b08:	e002      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006b0a:	bf00      	nop
 8006b0c:	e000      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006b0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d10b      	bne.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b18:	4bb9      	ldr	r3, [pc, #740]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b1c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b28:	4ab5      	ldr	r2, [pc, #724]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b2a:	430b      	orrs	r3, r1
 8006b2c:	6553      	str	r3, [r2, #84]	; 0x54
 8006b2e:	e003      	b.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b40:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006b44:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b46:	2300      	movs	r3, #0
 8006b48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b4a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006b4e:	460b      	mov	r3, r1
 8006b50:	4313      	orrs	r3, r2
 8006b52:	d009      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006b54:	4baa      	ldr	r3, [pc, #680]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b58:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b62:	4aa7      	ldr	r2, [pc, #668]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b64:	430b      	orrs	r3, r1
 8006b66:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b70:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006b74:	653b      	str	r3, [r7, #80]	; 0x50
 8006b76:	2300      	movs	r3, #0
 8006b78:	657b      	str	r3, [r7, #84]	; 0x54
 8006b7a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006b7e:	460b      	mov	r3, r1
 8006b80:	4313      	orrs	r3, r2
 8006b82:	d00a      	beq.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006b84:	4b9e      	ldr	r3, [pc, #632]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b90:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006b94:	4a9a      	ldr	r2, [pc, #616]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b96:	430b      	orrs	r3, r1
 8006b98:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006ba6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ba8:	2300      	movs	r3, #0
 8006baa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bac:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	d009      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006bb6:	4b92      	ldr	r3, [pc, #584]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bba:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bc4:	4a8e      	ldr	r2, [pc, #568]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bc6:	430b      	orrs	r3, r1
 8006bc8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006bd6:	643b      	str	r3, [r7, #64]	; 0x40
 8006bd8:	2300      	movs	r3, #0
 8006bda:	647b      	str	r3, [r7, #68]	; 0x44
 8006bdc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006be0:	460b      	mov	r3, r1
 8006be2:	4313      	orrs	r3, r2
 8006be4:	d00e      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006be6:	4b86      	ldr	r3, [pc, #536]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	4a85      	ldr	r2, [pc, #532]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006bf0:	6113      	str	r3, [r2, #16]
 8006bf2:	4b83      	ldr	r3, [pc, #524]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bf4:	6919      	ldr	r1, [r3, #16]
 8006bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bfa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006bfe:	4a80      	ldr	r2, [pc, #512]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c00:	430b      	orrs	r3, r1
 8006c02:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006c10:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c12:	2300      	movs	r3, #0
 8006c14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c16:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	d009      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006c20:	4b77      	ldr	r3, [pc, #476]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c24:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c2e:	4a74      	ldr	r2, [pc, #464]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c30:	430b      	orrs	r3, r1
 8006c32:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006c40:	633b      	str	r3, [r7, #48]	; 0x30
 8006c42:	2300      	movs	r3, #0
 8006c44:	637b      	str	r3, [r7, #52]	; 0x34
 8006c46:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	d00a      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c50:	4b6b      	ldr	r3, [pc, #428]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c54:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c60:	4a67      	ldr	r2, [pc, #412]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c62:	430b      	orrs	r3, r1
 8006c64:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6e:	2100      	movs	r1, #0
 8006c70:	62b9      	str	r1, [r7, #40]	; 0x28
 8006c72:	f003 0301 	and.w	r3, r3, #1
 8006c76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c78:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	d011      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c86:	3308      	adds	r3, #8
 8006c88:	2100      	movs	r1, #0
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f000 fb78 	bl	8007380 <RCCEx_PLL2_Config>
 8006c90:	4603      	mov	r3, r0
 8006c92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006c96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d003      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ca2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cae:	2100      	movs	r1, #0
 8006cb0:	6239      	str	r1, [r7, #32]
 8006cb2:	f003 0302 	and.w	r3, r3, #2
 8006cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8006cb8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	d011      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cc6:	3308      	adds	r3, #8
 8006cc8:	2101      	movs	r1, #1
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f000 fb58 	bl	8007380 <RCCEx_PLL2_Config>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006cd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d003      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ce2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cee:	2100      	movs	r1, #0
 8006cf0:	61b9      	str	r1, [r7, #24]
 8006cf2:	f003 0304 	and.w	r3, r3, #4
 8006cf6:	61fb      	str	r3, [r7, #28]
 8006cf8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	d011      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d06:	3308      	adds	r3, #8
 8006d08:	2102      	movs	r1, #2
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f000 fb38 	bl	8007380 <RCCEx_PLL2_Config>
 8006d10:	4603      	mov	r3, r0
 8006d12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006d16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d003      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2e:	2100      	movs	r1, #0
 8006d30:	6139      	str	r1, [r7, #16]
 8006d32:	f003 0308 	and.w	r3, r3, #8
 8006d36:	617b      	str	r3, [r7, #20]
 8006d38:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	d011      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d46:	3328      	adds	r3, #40	; 0x28
 8006d48:	2100      	movs	r1, #0
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f000 fbca 	bl	80074e4 <RCCEx_PLL3_Config>
 8006d50:	4603      	mov	r3, r0
 8006d52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8006d56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d003      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6e:	2100      	movs	r1, #0
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	f003 0310 	and.w	r3, r3, #16
 8006d76:	60fb      	str	r3, [r7, #12]
 8006d78:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	d011      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d86:	3328      	adds	r3, #40	; 0x28
 8006d88:	2101      	movs	r1, #1
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f000 fbaa 	bl	80074e4 <RCCEx_PLL3_Config>
 8006d90:	4603      	mov	r3, r0
 8006d92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006d96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d003      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006da2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dae:	2100      	movs	r1, #0
 8006db0:	6039      	str	r1, [r7, #0]
 8006db2:	f003 0320 	and.w	r3, r3, #32
 8006db6:	607b      	str	r3, [r7, #4]
 8006db8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	d011      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dc6:	3328      	adds	r3, #40	; 0x28
 8006dc8:	2102      	movs	r1, #2
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f000 fb8a 	bl	80074e4 <RCCEx_PLL3_Config>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d003      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006de2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8006de6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d101      	bne.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006dee:	2300      	movs	r3, #0
 8006df0:	e000      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e00:	58024400 	.word	0x58024400

08006e04 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006e08:	f7fe fd96 	bl	8005938 <HAL_RCC_GetHCLKFreq>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	4b06      	ldr	r3, [pc, #24]	; (8006e28 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006e10:	6a1b      	ldr	r3, [r3, #32]
 8006e12:	091b      	lsrs	r3, r3, #4
 8006e14:	f003 0307 	and.w	r3, r3, #7
 8006e18:	4904      	ldr	r1, [pc, #16]	; (8006e2c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006e1a:	5ccb      	ldrb	r3, [r1, r3]
 8006e1c:	f003 031f 	and.w	r3, r3, #31
 8006e20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	58024400 	.word	0x58024400
 8006e2c:	0800bfd8 	.word	0x0800bfd8

08006e30 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b089      	sub	sp, #36	; 0x24
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e38:	4ba1      	ldr	r3, [pc, #644]	; (80070c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e3c:	f003 0303 	and.w	r3, r3, #3
 8006e40:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006e42:	4b9f      	ldr	r3, [pc, #636]	; (80070c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e46:	0b1b      	lsrs	r3, r3, #12
 8006e48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e4c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006e4e:	4b9c      	ldr	r3, [pc, #624]	; (80070c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e52:	091b      	lsrs	r3, r3, #4
 8006e54:	f003 0301 	and.w	r3, r3, #1
 8006e58:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006e5a:	4b99      	ldr	r3, [pc, #612]	; (80070c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e5e:	08db      	lsrs	r3, r3, #3
 8006e60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e64:	693a      	ldr	r2, [r7, #16]
 8006e66:	fb02 f303 	mul.w	r3, r2, r3
 8006e6a:	ee07 3a90 	vmov	s15, r3
 8006e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f000 8111 	beq.w	80070a0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	f000 8083 	beq.w	8006f8c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	f200 80a1 	bhi.w	8006fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d003      	beq.n	8006e9c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d056      	beq.n	8006f48 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006e9a:	e099      	b.n	8006fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e9c:	4b88      	ldr	r3, [pc, #544]	; (80070c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 0320 	and.w	r3, r3, #32
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d02d      	beq.n	8006f04 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ea8:	4b85      	ldr	r3, [pc, #532]	; (80070c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	08db      	lsrs	r3, r3, #3
 8006eae:	f003 0303 	and.w	r3, r3, #3
 8006eb2:	4a84      	ldr	r2, [pc, #528]	; (80070c4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8006eb8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	ee07 3a90 	vmov	s15, r3
 8006ec0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	ee07 3a90 	vmov	s15, r3
 8006eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ed2:	4b7b      	ldr	r3, [pc, #492]	; (80070c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eda:	ee07 3a90 	vmov	s15, r3
 8006ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ee2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ee6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80070c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006efe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006f02:	e087      	b.n	8007014 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	ee07 3a90 	vmov	s15, r3
 8006f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f0e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80070cc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f16:	4b6a      	ldr	r3, [pc, #424]	; (80070c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f1e:	ee07 3a90 	vmov	s15, r3
 8006f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f26:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f2a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80070c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f46:	e065      	b.n	8007014 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	ee07 3a90 	vmov	s15, r3
 8006f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f52:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80070d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f5a:	4b59      	ldr	r3, [pc, #356]	; (80070c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f62:	ee07 3a90 	vmov	s15, r3
 8006f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f6e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80070c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f8a:	e043      	b.n	8007014 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	ee07 3a90 	vmov	s15, r3
 8006f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f96:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80070d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f9e:	4b48      	ldr	r3, [pc, #288]	; (80070c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fa6:	ee07 3a90 	vmov	s15, r3
 8006faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fae:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fb2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80070c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fce:	e021      	b.n	8007014 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	ee07 3a90 	vmov	s15, r3
 8006fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fda:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80070d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fe2:	4b37      	ldr	r3, [pc, #220]	; (80070c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fea:	ee07 3a90 	vmov	s15, r3
 8006fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ff2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ff6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80070c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007002:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800700a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800700e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007012:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007014:	4b2a      	ldr	r3, [pc, #168]	; (80070c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007018:	0a5b      	lsrs	r3, r3, #9
 800701a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800701e:	ee07 3a90 	vmov	s15, r3
 8007022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007026:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800702a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800702e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007032:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007036:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800703a:	ee17 2a90 	vmov	r2, s15
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007042:	4b1f      	ldr	r3, [pc, #124]	; (80070c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007046:	0c1b      	lsrs	r3, r3, #16
 8007048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800704c:	ee07 3a90 	vmov	s15, r3
 8007050:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007054:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007058:	ee37 7a87 	vadd.f32	s14, s15, s14
 800705c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007060:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007064:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007068:	ee17 2a90 	vmov	r2, s15
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007070:	4b13      	ldr	r3, [pc, #76]	; (80070c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007074:	0e1b      	lsrs	r3, r3, #24
 8007076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800707a:	ee07 3a90 	vmov	s15, r3
 800707e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007082:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007086:	ee37 7a87 	vadd.f32	s14, s15, s14
 800708a:	edd7 6a07 	vldr	s13, [r7, #28]
 800708e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007096:	ee17 2a90 	vmov	r2, s15
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800709e:	e008      	b.n	80070b2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	609a      	str	r2, [r3, #8]
}
 80070b2:	bf00      	nop
 80070b4:	3724      	adds	r7, #36	; 0x24
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop
 80070c0:	58024400 	.word	0x58024400
 80070c4:	03d09000 	.word	0x03d09000
 80070c8:	46000000 	.word	0x46000000
 80070cc:	4c742400 	.word	0x4c742400
 80070d0:	4a742400 	.word	0x4a742400
 80070d4:	4bbebc20 	.word	0x4bbebc20

080070d8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80070d8:	b480      	push	{r7}
 80070da:	b089      	sub	sp, #36	; 0x24
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070e0:	4ba1      	ldr	r3, [pc, #644]	; (8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e4:	f003 0303 	and.w	r3, r3, #3
 80070e8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80070ea:	4b9f      	ldr	r3, [pc, #636]	; (8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ee:	0d1b      	lsrs	r3, r3, #20
 80070f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070f4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80070f6:	4b9c      	ldr	r3, [pc, #624]	; (8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070fa:	0a1b      	lsrs	r3, r3, #8
 80070fc:	f003 0301 	and.w	r3, r3, #1
 8007100:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007102:	4b99      	ldr	r3, [pc, #612]	; (8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007106:	08db      	lsrs	r3, r3, #3
 8007108:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800710c:	693a      	ldr	r2, [r7, #16]
 800710e:	fb02 f303 	mul.w	r3, r2, r3
 8007112:	ee07 3a90 	vmov	s15, r3
 8007116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800711a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	2b00      	cmp	r3, #0
 8007122:	f000 8111 	beq.w	8007348 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	2b02      	cmp	r3, #2
 800712a:	f000 8083 	beq.w	8007234 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	2b02      	cmp	r3, #2
 8007132:	f200 80a1 	bhi.w	8007278 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d003      	beq.n	8007144 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	2b01      	cmp	r3, #1
 8007140:	d056      	beq.n	80071f0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007142:	e099      	b.n	8007278 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007144:	4b88      	ldr	r3, [pc, #544]	; (8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 0320 	and.w	r3, r3, #32
 800714c:	2b00      	cmp	r3, #0
 800714e:	d02d      	beq.n	80071ac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007150:	4b85      	ldr	r3, [pc, #532]	; (8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	08db      	lsrs	r3, r3, #3
 8007156:	f003 0303 	and.w	r3, r3, #3
 800715a:	4a84      	ldr	r2, [pc, #528]	; (800736c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800715c:	fa22 f303 	lsr.w	r3, r2, r3
 8007160:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	ee07 3a90 	vmov	s15, r3
 8007168:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	ee07 3a90 	vmov	s15, r3
 8007172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800717a:	4b7b      	ldr	r3, [pc, #492]	; (8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800717c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007182:	ee07 3a90 	vmov	s15, r3
 8007186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800718a:	ed97 6a03 	vldr	s12, [r7, #12]
 800718e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007370 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800719a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800719e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80071aa:	e087      	b.n	80072bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	ee07 3a90 	vmov	s15, r3
 80071b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071b6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007374 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80071ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071be:	4b6a      	ldr	r3, [pc, #424]	; (8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071c6:	ee07 3a90 	vmov	s15, r3
 80071ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80071d2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007370 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071ee:	e065      	b.n	80072bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	ee07 3a90 	vmov	s15, r3
 80071f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071fa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007378 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80071fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007202:	4b59      	ldr	r3, [pc, #356]	; (8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800720a:	ee07 3a90 	vmov	s15, r3
 800720e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007212:	ed97 6a03 	vldr	s12, [r7, #12]
 8007216:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007370 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800721a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800721e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800722a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800722e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007232:	e043      	b.n	80072bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	ee07 3a90 	vmov	s15, r3
 800723a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800723e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800737c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007246:	4b48      	ldr	r3, [pc, #288]	; (8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800724e:	ee07 3a90 	vmov	s15, r3
 8007252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007256:	ed97 6a03 	vldr	s12, [r7, #12]
 800725a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007370 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800725e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007266:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800726a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800726e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007272:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007276:	e021      	b.n	80072bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	ee07 3a90 	vmov	s15, r3
 800727e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007282:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007378 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800728a:	4b37      	ldr	r3, [pc, #220]	; (8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800728c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007292:	ee07 3a90 	vmov	s15, r3
 8007296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800729a:	ed97 6a03 	vldr	s12, [r7, #12]
 800729e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007370 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072ba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80072bc:	4b2a      	ldr	r3, [pc, #168]	; (8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c0:	0a5b      	lsrs	r3, r3, #9
 80072c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072c6:	ee07 3a90 	vmov	s15, r3
 80072ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80072da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072e2:	ee17 2a90 	vmov	r2, s15
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80072ea:	4b1f      	ldr	r3, [pc, #124]	; (8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ee:	0c1b      	lsrs	r3, r3, #16
 80072f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072f4:	ee07 3a90 	vmov	s15, r3
 80072f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007300:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007304:	edd7 6a07 	vldr	s13, [r7, #28]
 8007308:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800730c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007310:	ee17 2a90 	vmov	r2, s15
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007318:	4b13      	ldr	r3, [pc, #76]	; (8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800731a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731c:	0e1b      	lsrs	r3, r3, #24
 800731e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007322:	ee07 3a90 	vmov	s15, r3
 8007326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800732a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800732e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007332:	edd7 6a07 	vldr	s13, [r7, #28]
 8007336:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800733a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800733e:	ee17 2a90 	vmov	r2, s15
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007346:	e008      	b.n	800735a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	609a      	str	r2, [r3, #8]
}
 800735a:	bf00      	nop
 800735c:	3724      	adds	r7, #36	; 0x24
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	58024400 	.word	0x58024400
 800736c:	03d09000 	.word	0x03d09000
 8007370:	46000000 	.word	0x46000000
 8007374:	4c742400 	.word	0x4c742400
 8007378:	4a742400 	.word	0x4a742400
 800737c:	4bbebc20 	.word	0x4bbebc20

08007380 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800738a:	2300      	movs	r3, #0
 800738c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800738e:	4b53      	ldr	r3, [pc, #332]	; (80074dc <RCCEx_PLL2_Config+0x15c>)
 8007390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007392:	f003 0303 	and.w	r3, r3, #3
 8007396:	2b03      	cmp	r3, #3
 8007398:	d101      	bne.n	800739e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e099      	b.n	80074d2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800739e:	4b4f      	ldr	r3, [pc, #316]	; (80074dc <RCCEx_PLL2_Config+0x15c>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a4e      	ldr	r2, [pc, #312]	; (80074dc <RCCEx_PLL2_Config+0x15c>)
 80073a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80073a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073aa:	f7fa f995 	bl	80016d8 <HAL_GetTick>
 80073ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073b0:	e008      	b.n	80073c4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80073b2:	f7fa f991 	bl	80016d8 <HAL_GetTick>
 80073b6:	4602      	mov	r2, r0
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	2b02      	cmp	r3, #2
 80073be:	d901      	bls.n	80073c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e086      	b.n	80074d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073c4:	4b45      	ldr	r3, [pc, #276]	; (80074dc <RCCEx_PLL2_Config+0x15c>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d1f0      	bne.n	80073b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80073d0:	4b42      	ldr	r3, [pc, #264]	; (80074dc <RCCEx_PLL2_Config+0x15c>)
 80073d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	031b      	lsls	r3, r3, #12
 80073de:	493f      	ldr	r1, [pc, #252]	; (80074dc <RCCEx_PLL2_Config+0x15c>)
 80073e0:	4313      	orrs	r3, r2
 80073e2:	628b      	str	r3, [r1, #40]	; 0x28
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	3b01      	subs	r3, #1
 80073ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	3b01      	subs	r3, #1
 80073f4:	025b      	lsls	r3, r3, #9
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	431a      	orrs	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	3b01      	subs	r3, #1
 8007400:	041b      	lsls	r3, r3, #16
 8007402:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007406:	431a      	orrs	r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	3b01      	subs	r3, #1
 800740e:	061b      	lsls	r3, r3, #24
 8007410:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007414:	4931      	ldr	r1, [pc, #196]	; (80074dc <RCCEx_PLL2_Config+0x15c>)
 8007416:	4313      	orrs	r3, r2
 8007418:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800741a:	4b30      	ldr	r3, [pc, #192]	; (80074dc <RCCEx_PLL2_Config+0x15c>)
 800741c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	492d      	ldr	r1, [pc, #180]	; (80074dc <RCCEx_PLL2_Config+0x15c>)
 8007428:	4313      	orrs	r3, r2
 800742a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800742c:	4b2b      	ldr	r3, [pc, #172]	; (80074dc <RCCEx_PLL2_Config+0x15c>)
 800742e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007430:	f023 0220 	bic.w	r2, r3, #32
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	699b      	ldr	r3, [r3, #24]
 8007438:	4928      	ldr	r1, [pc, #160]	; (80074dc <RCCEx_PLL2_Config+0x15c>)
 800743a:	4313      	orrs	r3, r2
 800743c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800743e:	4b27      	ldr	r3, [pc, #156]	; (80074dc <RCCEx_PLL2_Config+0x15c>)
 8007440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007442:	4a26      	ldr	r2, [pc, #152]	; (80074dc <RCCEx_PLL2_Config+0x15c>)
 8007444:	f023 0310 	bic.w	r3, r3, #16
 8007448:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800744a:	4b24      	ldr	r3, [pc, #144]	; (80074dc <RCCEx_PLL2_Config+0x15c>)
 800744c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800744e:	4b24      	ldr	r3, [pc, #144]	; (80074e0 <RCCEx_PLL2_Config+0x160>)
 8007450:	4013      	ands	r3, r2
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	69d2      	ldr	r2, [r2, #28]
 8007456:	00d2      	lsls	r2, r2, #3
 8007458:	4920      	ldr	r1, [pc, #128]	; (80074dc <RCCEx_PLL2_Config+0x15c>)
 800745a:	4313      	orrs	r3, r2
 800745c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800745e:	4b1f      	ldr	r3, [pc, #124]	; (80074dc <RCCEx_PLL2_Config+0x15c>)
 8007460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007462:	4a1e      	ldr	r2, [pc, #120]	; (80074dc <RCCEx_PLL2_Config+0x15c>)
 8007464:	f043 0310 	orr.w	r3, r3, #16
 8007468:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d106      	bne.n	800747e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007470:	4b1a      	ldr	r3, [pc, #104]	; (80074dc <RCCEx_PLL2_Config+0x15c>)
 8007472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007474:	4a19      	ldr	r2, [pc, #100]	; (80074dc <RCCEx_PLL2_Config+0x15c>)
 8007476:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800747a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800747c:	e00f      	b.n	800749e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	2b01      	cmp	r3, #1
 8007482:	d106      	bne.n	8007492 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007484:	4b15      	ldr	r3, [pc, #84]	; (80074dc <RCCEx_PLL2_Config+0x15c>)
 8007486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007488:	4a14      	ldr	r2, [pc, #80]	; (80074dc <RCCEx_PLL2_Config+0x15c>)
 800748a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800748e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007490:	e005      	b.n	800749e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007492:	4b12      	ldr	r3, [pc, #72]	; (80074dc <RCCEx_PLL2_Config+0x15c>)
 8007494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007496:	4a11      	ldr	r2, [pc, #68]	; (80074dc <RCCEx_PLL2_Config+0x15c>)
 8007498:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800749c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800749e:	4b0f      	ldr	r3, [pc, #60]	; (80074dc <RCCEx_PLL2_Config+0x15c>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a0e      	ldr	r2, [pc, #56]	; (80074dc <RCCEx_PLL2_Config+0x15c>)
 80074a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80074a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074aa:	f7fa f915 	bl	80016d8 <HAL_GetTick>
 80074ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80074b0:	e008      	b.n	80074c4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80074b2:	f7fa f911 	bl	80016d8 <HAL_GetTick>
 80074b6:	4602      	mov	r2, r0
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	2b02      	cmp	r3, #2
 80074be:	d901      	bls.n	80074c4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80074c0:	2303      	movs	r3, #3
 80074c2:	e006      	b.n	80074d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80074c4:	4b05      	ldr	r3, [pc, #20]	; (80074dc <RCCEx_PLL2_Config+0x15c>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d0f0      	beq.n	80074b2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80074d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	58024400 	.word	0x58024400
 80074e0:	ffff0007 	.word	0xffff0007

080074e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074ee:	2300      	movs	r3, #0
 80074f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80074f2:	4b53      	ldr	r3, [pc, #332]	; (8007640 <RCCEx_PLL3_Config+0x15c>)
 80074f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f6:	f003 0303 	and.w	r3, r3, #3
 80074fa:	2b03      	cmp	r3, #3
 80074fc:	d101      	bne.n	8007502 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e099      	b.n	8007636 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007502:	4b4f      	ldr	r3, [pc, #316]	; (8007640 <RCCEx_PLL3_Config+0x15c>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a4e      	ldr	r2, [pc, #312]	; (8007640 <RCCEx_PLL3_Config+0x15c>)
 8007508:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800750c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800750e:	f7fa f8e3 	bl	80016d8 <HAL_GetTick>
 8007512:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007514:	e008      	b.n	8007528 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007516:	f7fa f8df 	bl	80016d8 <HAL_GetTick>
 800751a:	4602      	mov	r2, r0
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	1ad3      	subs	r3, r2, r3
 8007520:	2b02      	cmp	r3, #2
 8007522:	d901      	bls.n	8007528 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007524:	2303      	movs	r3, #3
 8007526:	e086      	b.n	8007636 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007528:	4b45      	ldr	r3, [pc, #276]	; (8007640 <RCCEx_PLL3_Config+0x15c>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007530:	2b00      	cmp	r3, #0
 8007532:	d1f0      	bne.n	8007516 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007534:	4b42      	ldr	r3, [pc, #264]	; (8007640 <RCCEx_PLL3_Config+0x15c>)
 8007536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007538:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	051b      	lsls	r3, r3, #20
 8007542:	493f      	ldr	r1, [pc, #252]	; (8007640 <RCCEx_PLL3_Config+0x15c>)
 8007544:	4313      	orrs	r3, r2
 8007546:	628b      	str	r3, [r1, #40]	; 0x28
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	3b01      	subs	r3, #1
 800754e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	3b01      	subs	r3, #1
 8007558:	025b      	lsls	r3, r3, #9
 800755a:	b29b      	uxth	r3, r3
 800755c:	431a      	orrs	r2, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	3b01      	subs	r3, #1
 8007564:	041b      	lsls	r3, r3, #16
 8007566:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800756a:	431a      	orrs	r2, r3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	3b01      	subs	r3, #1
 8007572:	061b      	lsls	r3, r3, #24
 8007574:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007578:	4931      	ldr	r1, [pc, #196]	; (8007640 <RCCEx_PLL3_Config+0x15c>)
 800757a:	4313      	orrs	r3, r2
 800757c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800757e:	4b30      	ldr	r3, [pc, #192]	; (8007640 <RCCEx_PLL3_Config+0x15c>)
 8007580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007582:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	695b      	ldr	r3, [r3, #20]
 800758a:	492d      	ldr	r1, [pc, #180]	; (8007640 <RCCEx_PLL3_Config+0x15c>)
 800758c:	4313      	orrs	r3, r2
 800758e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007590:	4b2b      	ldr	r3, [pc, #172]	; (8007640 <RCCEx_PLL3_Config+0x15c>)
 8007592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007594:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	699b      	ldr	r3, [r3, #24]
 800759c:	4928      	ldr	r1, [pc, #160]	; (8007640 <RCCEx_PLL3_Config+0x15c>)
 800759e:	4313      	orrs	r3, r2
 80075a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80075a2:	4b27      	ldr	r3, [pc, #156]	; (8007640 <RCCEx_PLL3_Config+0x15c>)
 80075a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a6:	4a26      	ldr	r2, [pc, #152]	; (8007640 <RCCEx_PLL3_Config+0x15c>)
 80075a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80075ae:	4b24      	ldr	r3, [pc, #144]	; (8007640 <RCCEx_PLL3_Config+0x15c>)
 80075b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075b2:	4b24      	ldr	r3, [pc, #144]	; (8007644 <RCCEx_PLL3_Config+0x160>)
 80075b4:	4013      	ands	r3, r2
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	69d2      	ldr	r2, [r2, #28]
 80075ba:	00d2      	lsls	r2, r2, #3
 80075bc:	4920      	ldr	r1, [pc, #128]	; (8007640 <RCCEx_PLL3_Config+0x15c>)
 80075be:	4313      	orrs	r3, r2
 80075c0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80075c2:	4b1f      	ldr	r3, [pc, #124]	; (8007640 <RCCEx_PLL3_Config+0x15c>)
 80075c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c6:	4a1e      	ldr	r2, [pc, #120]	; (8007640 <RCCEx_PLL3_Config+0x15c>)
 80075c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d106      	bne.n	80075e2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80075d4:	4b1a      	ldr	r3, [pc, #104]	; (8007640 <RCCEx_PLL3_Config+0x15c>)
 80075d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d8:	4a19      	ldr	r2, [pc, #100]	; (8007640 <RCCEx_PLL3_Config+0x15c>)
 80075da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80075de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80075e0:	e00f      	b.n	8007602 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d106      	bne.n	80075f6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80075e8:	4b15      	ldr	r3, [pc, #84]	; (8007640 <RCCEx_PLL3_Config+0x15c>)
 80075ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ec:	4a14      	ldr	r2, [pc, #80]	; (8007640 <RCCEx_PLL3_Config+0x15c>)
 80075ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80075f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80075f4:	e005      	b.n	8007602 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80075f6:	4b12      	ldr	r3, [pc, #72]	; (8007640 <RCCEx_PLL3_Config+0x15c>)
 80075f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fa:	4a11      	ldr	r2, [pc, #68]	; (8007640 <RCCEx_PLL3_Config+0x15c>)
 80075fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007600:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007602:	4b0f      	ldr	r3, [pc, #60]	; (8007640 <RCCEx_PLL3_Config+0x15c>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a0e      	ldr	r2, [pc, #56]	; (8007640 <RCCEx_PLL3_Config+0x15c>)
 8007608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800760c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800760e:	f7fa f863 	bl	80016d8 <HAL_GetTick>
 8007612:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007614:	e008      	b.n	8007628 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007616:	f7fa f85f 	bl	80016d8 <HAL_GetTick>
 800761a:	4602      	mov	r2, r0
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	1ad3      	subs	r3, r2, r3
 8007620:	2b02      	cmp	r3, #2
 8007622:	d901      	bls.n	8007628 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007624:	2303      	movs	r3, #3
 8007626:	e006      	b.n	8007636 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007628:	4b05      	ldr	r3, [pc, #20]	; (8007640 <RCCEx_PLL3_Config+0x15c>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007630:	2b00      	cmp	r3, #0
 8007632:	d0f0      	beq.n	8007616 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007634:	7bfb      	ldrb	r3, [r7, #15]
}
 8007636:	4618      	mov	r0, r3
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	58024400 	.word	0x58024400
 8007644:	ffff0007 	.word	0xffff0007

08007648 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d101      	bne.n	800765a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e042      	b.n	80076e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007660:	2b00      	cmp	r3, #0
 8007662:	d106      	bne.n	8007672 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f7f9 fcdd 	bl	800102c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2224      	movs	r2, #36	; 0x24
 8007676:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f022 0201 	bic.w	r2, r2, #1
 8007688:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 fda8 	bl	80081e0 <UART_SetConfig>
 8007690:	4603      	mov	r3, r0
 8007692:	2b01      	cmp	r3, #1
 8007694:	d101      	bne.n	800769a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	e022      	b.n	80076e0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d002      	beq.n	80076a8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f001 fb04 	bl	8008cb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	685a      	ldr	r2, [r3, #4]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80076b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	689a      	ldr	r2, [r3, #8]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80076c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f042 0201 	orr.w	r2, r2, #1
 80076d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f001 fb8b 	bl	8008df4 <UART_CheckIdleState>
 80076de:	4603      	mov	r3, r0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3708      	adds	r7, #8
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b08a      	sub	sp, #40	; 0x28
 80076ec:	af02      	add	r7, sp, #8
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	603b      	str	r3, [r7, #0]
 80076f4:	4613      	mov	r3, r2
 80076f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076fe:	2b20      	cmp	r3, #32
 8007700:	d17b      	bne.n	80077fa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d002      	beq.n	800770e <HAL_UART_Transmit+0x26>
 8007708:	88fb      	ldrh	r3, [r7, #6]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d101      	bne.n	8007712 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e074      	b.n	80077fc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2200      	movs	r2, #0
 8007716:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2221      	movs	r2, #33	; 0x21
 800771e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007722:	f7f9 ffd9 	bl	80016d8 <HAL_GetTick>
 8007726:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	88fa      	ldrh	r2, [r7, #6]
 800772c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	88fa      	ldrh	r2, [r7, #6]
 8007734:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007740:	d108      	bne.n	8007754 <HAL_UART_Transmit+0x6c>
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d104      	bne.n	8007754 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800774a:	2300      	movs	r3, #0
 800774c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	61bb      	str	r3, [r7, #24]
 8007752:	e003      	b.n	800775c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007758:	2300      	movs	r3, #0
 800775a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800775c:	e030      	b.n	80077c0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	9300      	str	r3, [sp, #0]
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	2200      	movs	r2, #0
 8007766:	2180      	movs	r1, #128	; 0x80
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f001 fbed 	bl	8008f48 <UART_WaitOnFlagUntilTimeout>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d005      	beq.n	8007780 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2220      	movs	r2, #32
 8007778:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800777c:	2303      	movs	r3, #3
 800777e:	e03d      	b.n	80077fc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007780:	69fb      	ldr	r3, [r7, #28]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d10b      	bne.n	800779e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	881b      	ldrh	r3, [r3, #0]
 800778a:	461a      	mov	r2, r3
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007794:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	3302      	adds	r3, #2
 800779a:	61bb      	str	r3, [r7, #24]
 800779c:	e007      	b.n	80077ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	781a      	ldrb	r2, [r3, #0]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	3301      	adds	r3, #1
 80077ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	3b01      	subs	r3, #1
 80077b8:	b29a      	uxth	r2, r3
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d1c8      	bne.n	800775e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	9300      	str	r3, [sp, #0]
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	2200      	movs	r2, #0
 80077d4:	2140      	movs	r1, #64	; 0x40
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f001 fbb6 	bl	8008f48 <UART_WaitOnFlagUntilTimeout>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d005      	beq.n	80077ee <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2220      	movs	r2, #32
 80077e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80077ea:	2303      	movs	r3, #3
 80077ec:	e006      	b.n	80077fc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2220      	movs	r2, #32
 80077f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80077f6:	2300      	movs	r3, #0
 80077f8:	e000      	b.n	80077fc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80077fa:	2302      	movs	r3, #2
  }
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3720      	adds	r7, #32
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b08a      	sub	sp, #40	; 0x28
 8007808:	af02      	add	r7, sp, #8
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	603b      	str	r3, [r7, #0]
 8007810:	4613      	mov	r3, r2
 8007812:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800781a:	2b20      	cmp	r3, #32
 800781c:	f040 80b5 	bne.w	800798a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d002      	beq.n	800782c <HAL_UART_Receive+0x28>
 8007826:	88fb      	ldrh	r3, [r7, #6]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d101      	bne.n	8007830 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e0ad      	b.n	800798c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2200      	movs	r2, #0
 8007834:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2222      	movs	r2, #34	; 0x22
 800783c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2200      	movs	r2, #0
 8007844:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007846:	f7f9 ff47 	bl	80016d8 <HAL_GetTick>
 800784a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	88fa      	ldrh	r2, [r7, #6]
 8007850:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	88fa      	ldrh	r2, [r7, #6]
 8007858:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007864:	d10e      	bne.n	8007884 <HAL_UART_Receive+0x80>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d105      	bne.n	800787a <HAL_UART_Receive+0x76>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007874:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007878:	e02d      	b.n	80078d6 <HAL_UART_Receive+0xd2>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	22ff      	movs	r2, #255	; 0xff
 800787e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007882:	e028      	b.n	80078d6 <HAL_UART_Receive+0xd2>
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d10d      	bne.n	80078a8 <HAL_UART_Receive+0xa4>
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d104      	bne.n	800789e <HAL_UART_Receive+0x9a>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	22ff      	movs	r2, #255	; 0xff
 8007898:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800789c:	e01b      	b.n	80078d6 <HAL_UART_Receive+0xd2>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	227f      	movs	r2, #127	; 0x7f
 80078a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80078a6:	e016      	b.n	80078d6 <HAL_UART_Receive+0xd2>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078b0:	d10d      	bne.n	80078ce <HAL_UART_Receive+0xca>
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d104      	bne.n	80078c4 <HAL_UART_Receive+0xc0>
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	227f      	movs	r2, #127	; 0x7f
 80078be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80078c2:	e008      	b.n	80078d6 <HAL_UART_Receive+0xd2>
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	223f      	movs	r2, #63	; 0x3f
 80078c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80078cc:	e003      	b.n	80078d6 <HAL_UART_Receive+0xd2>
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80078dc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078e6:	d108      	bne.n	80078fa <HAL_UART_Receive+0xf6>
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	691b      	ldr	r3, [r3, #16]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d104      	bne.n	80078fa <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80078f0:	2300      	movs	r3, #0
 80078f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	61bb      	str	r3, [r7, #24]
 80078f8:	e003      	b.n	8007902 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078fe:	2300      	movs	r3, #0
 8007900:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007902:	e036      	b.n	8007972 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	9300      	str	r3, [sp, #0]
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	2200      	movs	r2, #0
 800790c:	2120      	movs	r1, #32
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f001 fb1a 	bl	8008f48 <UART_WaitOnFlagUntilTimeout>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d005      	beq.n	8007926 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2220      	movs	r2, #32
 800791e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8007922:	2303      	movs	r3, #3
 8007924:	e032      	b.n	800798c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d10c      	bne.n	8007946 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007932:	b29a      	uxth	r2, r3
 8007934:	8a7b      	ldrh	r3, [r7, #18]
 8007936:	4013      	ands	r3, r2
 8007938:	b29a      	uxth	r2, r3
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	3302      	adds	r3, #2
 8007942:	61bb      	str	r3, [r7, #24]
 8007944:	e00c      	b.n	8007960 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794c:	b2da      	uxtb	r2, r3
 800794e:	8a7b      	ldrh	r3, [r7, #18]
 8007950:	b2db      	uxtb	r3, r3
 8007952:	4013      	ands	r3, r2
 8007954:	b2da      	uxtb	r2, r3
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	3301      	adds	r3, #1
 800795e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007966:	b29b      	uxth	r3, r3
 8007968:	3b01      	subs	r3, #1
 800796a:	b29a      	uxth	r2, r3
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007978:	b29b      	uxth	r3, r3
 800797a:	2b00      	cmp	r3, #0
 800797c:	d1c2      	bne.n	8007904 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2220      	movs	r2, #32
 8007982:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8007986:	2300      	movs	r3, #0
 8007988:	e000      	b.n	800798c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800798a:	2302      	movs	r3, #2
  }
}
 800798c:	4618      	mov	r0, r3
 800798e:	3720      	adds	r7, #32
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b08a      	sub	sp, #40	; 0x28
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	60b9      	str	r1, [r7, #8]
 800799e:	4613      	mov	r3, r2
 80079a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079a8:	2b20      	cmp	r3, #32
 80079aa:	d137      	bne.n	8007a1c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d002      	beq.n	80079b8 <HAL_UART_Receive_DMA+0x24>
 80079b2:	88fb      	ldrh	r3, [r7, #6]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d101      	bne.n	80079bc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
 80079ba:	e030      	b.n	8007a1e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2200      	movs	r2, #0
 80079c0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a18      	ldr	r2, [pc, #96]	; (8007a28 <HAL_UART_Receive_DMA+0x94>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d01f      	beq.n	8007a0c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d018      	beq.n	8007a0c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	e853 3f00 	ldrex	r3, [r3]
 80079e6:	613b      	str	r3, [r7, #16]
   return(result);
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80079ee:	627b      	str	r3, [r7, #36]	; 0x24
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	461a      	mov	r2, r3
 80079f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f8:	623b      	str	r3, [r7, #32]
 80079fa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fc:	69f9      	ldr	r1, [r7, #28]
 80079fe:	6a3a      	ldr	r2, [r7, #32]
 8007a00:	e841 2300 	strex	r3, r2, [r1]
 8007a04:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1e6      	bne.n	80079da <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007a0c:	88fb      	ldrh	r3, [r7, #6]
 8007a0e:	461a      	mov	r2, r3
 8007a10:	68b9      	ldr	r1, [r7, #8]
 8007a12:	68f8      	ldr	r0, [r7, #12]
 8007a14:	f001 fb00 	bl	8009018 <UART_Start_Receive_DMA>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	e000      	b.n	8007a1e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007a1c:	2302      	movs	r3, #2
  }
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3728      	adds	r7, #40	; 0x28
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	58000c00 	.word	0x58000c00

08007a2c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b0ba      	sub	sp, #232	; 0xe8
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	69db      	ldr	r3, [r3, #28]
 8007a3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007a52:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007a56:	f640 030f 	movw	r3, #2063	; 0x80f
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007a60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d11b      	bne.n	8007aa0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a6c:	f003 0320 	and.w	r3, r3, #32
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d015      	beq.n	8007aa0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a78:	f003 0320 	and.w	r3, r3, #32
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d105      	bne.n	8007a8c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007a80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d009      	beq.n	8007aa0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f000 8377 	beq.w	8008184 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	4798      	blx	r3
      }
      return;
 8007a9e:	e371      	b.n	8008184 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007aa0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	f000 8123 	beq.w	8007cf0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007aaa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007aae:	4b8d      	ldr	r3, [pc, #564]	; (8007ce4 <HAL_UART_IRQHandler+0x2b8>)
 8007ab0:	4013      	ands	r3, r2
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d106      	bne.n	8007ac4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007ab6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007aba:	4b8b      	ldr	r3, [pc, #556]	; (8007ce8 <HAL_UART_IRQHandler+0x2bc>)
 8007abc:	4013      	ands	r3, r2
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f000 8116 	beq.w	8007cf0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ac8:	f003 0301 	and.w	r3, r3, #1
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d011      	beq.n	8007af4 <HAL_UART_IRQHandler+0xc8>
 8007ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d00b      	beq.n	8007af4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aea:	f043 0201 	orr.w	r2, r3, #1
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007af8:	f003 0302 	and.w	r3, r3, #2
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d011      	beq.n	8007b24 <HAL_UART_IRQHandler+0xf8>
 8007b00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b04:	f003 0301 	and.w	r3, r3, #1
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00b      	beq.n	8007b24 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	2202      	movs	r2, #2
 8007b12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b1a:	f043 0204 	orr.w	r2, r3, #4
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b28:	f003 0304 	and.w	r3, r3, #4
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d011      	beq.n	8007b54 <HAL_UART_IRQHandler+0x128>
 8007b30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b34:	f003 0301 	and.w	r3, r3, #1
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d00b      	beq.n	8007b54 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2204      	movs	r2, #4
 8007b42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b4a:	f043 0202 	orr.w	r2, r3, #2
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b58:	f003 0308 	and.w	r3, r3, #8
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d017      	beq.n	8007b90 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b64:	f003 0320 	and.w	r3, r3, #32
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d105      	bne.n	8007b78 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007b6c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007b70:	4b5c      	ldr	r3, [pc, #368]	; (8007ce4 <HAL_UART_IRQHandler+0x2b8>)
 8007b72:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00b      	beq.n	8007b90 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2208      	movs	r2, #8
 8007b7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b86:	f043 0208 	orr.w	r2, r3, #8
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d012      	beq.n	8007bc2 <HAL_UART_IRQHandler+0x196>
 8007b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ba0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00c      	beq.n	8007bc2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007bb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bb8:	f043 0220 	orr.w	r2, r3, #32
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	f000 82dd 	beq.w	8008188 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bd2:	f003 0320 	and.w	r3, r3, #32
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d013      	beq.n	8007c02 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007bda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bde:	f003 0320 	and.w	r3, r3, #32
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d105      	bne.n	8007bf2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007be6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d007      	beq.n	8007c02 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d003      	beq.n	8007c02 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c16:	2b40      	cmp	r3, #64	; 0x40
 8007c18:	d005      	beq.n	8007c26 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007c1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d054      	beq.n	8007cd0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f001 fade 	bl	80091e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c36:	2b40      	cmp	r3, #64	; 0x40
 8007c38:	d146      	bne.n	8007cc8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	3308      	adds	r3, #8
 8007c40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c48:	e853 3f00 	ldrex	r3, [r3]
 8007c4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007c50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	3308      	adds	r3, #8
 8007c62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007c66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007c6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007c72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007c76:	e841 2300 	strex	r3, r2, [r1]
 8007c7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007c7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d1d9      	bne.n	8007c3a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d017      	beq.n	8007cc0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c96:	4a15      	ldr	r2, [pc, #84]	; (8007cec <HAL_UART_IRQHandler+0x2c0>)
 8007c98:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f7fa ff49 	bl	8002b38 <HAL_DMA_Abort_IT>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d019      	beq.n	8007ce0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007cba:	4610      	mov	r0, r2
 8007cbc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cbe:	e00f      	b.n	8007ce0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f7f9 f8d9 	bl	8000e78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cc6:	e00b      	b.n	8007ce0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f7f9 f8d5 	bl	8000e78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cce:	e007      	b.n	8007ce0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f7f9 f8d1 	bl	8000e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007cde:	e253      	b.n	8008188 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ce0:	bf00      	nop
    return;
 8007ce2:	e251      	b.n	8008188 <HAL_UART_IRQHandler+0x75c>
 8007ce4:	10000001 	.word	0x10000001
 8007ce8:	04000120 	.word	0x04000120
 8007cec:	0800949b 	.word	0x0800949b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	f040 81e7 	bne.w	80080c8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cfe:	f003 0310 	and.w	r3, r3, #16
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	f000 81e0 	beq.w	80080c8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d0c:	f003 0310 	and.w	r3, r3, #16
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	f000 81d9 	beq.w	80080c8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2210      	movs	r2, #16
 8007d1c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d28:	2b40      	cmp	r3, #64	; 0x40
 8007d2a:	f040 8151 	bne.w	8007fd0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a96      	ldr	r2, [pc, #600]	; (8007f90 <HAL_UART_IRQHandler+0x564>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d068      	beq.n	8007e0e <HAL_UART_IRQHandler+0x3e2>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a93      	ldr	r2, [pc, #588]	; (8007f94 <HAL_UART_IRQHandler+0x568>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d061      	beq.n	8007e0e <HAL_UART_IRQHandler+0x3e2>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a91      	ldr	r2, [pc, #580]	; (8007f98 <HAL_UART_IRQHandler+0x56c>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d05a      	beq.n	8007e0e <HAL_UART_IRQHandler+0x3e2>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a8e      	ldr	r2, [pc, #568]	; (8007f9c <HAL_UART_IRQHandler+0x570>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d053      	beq.n	8007e0e <HAL_UART_IRQHandler+0x3e2>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a8c      	ldr	r2, [pc, #560]	; (8007fa0 <HAL_UART_IRQHandler+0x574>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d04c      	beq.n	8007e0e <HAL_UART_IRQHandler+0x3e2>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a89      	ldr	r2, [pc, #548]	; (8007fa4 <HAL_UART_IRQHandler+0x578>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d045      	beq.n	8007e0e <HAL_UART_IRQHandler+0x3e2>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a87      	ldr	r2, [pc, #540]	; (8007fa8 <HAL_UART_IRQHandler+0x57c>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d03e      	beq.n	8007e0e <HAL_UART_IRQHandler+0x3e2>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a84      	ldr	r2, [pc, #528]	; (8007fac <HAL_UART_IRQHandler+0x580>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d037      	beq.n	8007e0e <HAL_UART_IRQHandler+0x3e2>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a82      	ldr	r2, [pc, #520]	; (8007fb0 <HAL_UART_IRQHandler+0x584>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d030      	beq.n	8007e0e <HAL_UART_IRQHandler+0x3e2>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a7f      	ldr	r2, [pc, #508]	; (8007fb4 <HAL_UART_IRQHandler+0x588>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d029      	beq.n	8007e0e <HAL_UART_IRQHandler+0x3e2>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a7d      	ldr	r2, [pc, #500]	; (8007fb8 <HAL_UART_IRQHandler+0x58c>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d022      	beq.n	8007e0e <HAL_UART_IRQHandler+0x3e2>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a7a      	ldr	r2, [pc, #488]	; (8007fbc <HAL_UART_IRQHandler+0x590>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d01b      	beq.n	8007e0e <HAL_UART_IRQHandler+0x3e2>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a78      	ldr	r2, [pc, #480]	; (8007fc0 <HAL_UART_IRQHandler+0x594>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d014      	beq.n	8007e0e <HAL_UART_IRQHandler+0x3e2>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a75      	ldr	r2, [pc, #468]	; (8007fc4 <HAL_UART_IRQHandler+0x598>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d00d      	beq.n	8007e0e <HAL_UART_IRQHandler+0x3e2>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a73      	ldr	r2, [pc, #460]	; (8007fc8 <HAL_UART_IRQHandler+0x59c>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d006      	beq.n	8007e0e <HAL_UART_IRQHandler+0x3e2>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a70      	ldr	r2, [pc, #448]	; (8007fcc <HAL_UART_IRQHandler+0x5a0>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d106      	bne.n	8007e1c <HAL_UART_IRQHandler+0x3f0>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	e005      	b.n	8007e28 <HAL_UART_IRQHandler+0x3fc>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007e2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f000 81ab 	beq.w	800818c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e3c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007e40:	429a      	cmp	r2, r3
 8007e42:	f080 81a3 	bcs.w	800818c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007e4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e56:	69db      	ldr	r3, [r3, #28]
 8007e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e5c:	f000 8087 	beq.w	8007f6e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007e6c:	e853 3f00 	ldrex	r3, [r3]
 8007e70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007e74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	461a      	mov	r2, r3
 8007e86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007e8e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007e96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007e9a:	e841 2300 	strex	r3, r2, [r1]
 8007e9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007ea2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d1da      	bne.n	8007e60 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	3308      	adds	r3, #8
 8007eb0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007eb4:	e853 3f00 	ldrex	r3, [r3]
 8007eb8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007eba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ebc:	f023 0301 	bic.w	r3, r3, #1
 8007ec0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	3308      	adds	r3, #8
 8007eca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007ece:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007ed2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007ed6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007eda:	e841 2300 	strex	r3, r2, [r1]
 8007ede:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007ee0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d1e1      	bne.n	8007eaa <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	3308      	adds	r3, #8
 8007eec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ef0:	e853 3f00 	ldrex	r3, [r3]
 8007ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007ef6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007efc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	3308      	adds	r3, #8
 8007f06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007f0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007f0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007f10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007f12:	e841 2300 	strex	r3, r2, [r1]
 8007f16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007f18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d1e3      	bne.n	8007ee6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2220      	movs	r2, #32
 8007f22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f34:	e853 3f00 	ldrex	r3, [r3]
 8007f38:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f3c:	f023 0310 	bic.w	r3, r3, #16
 8007f40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	461a      	mov	r2, r3
 8007f4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f50:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007f54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f56:	e841 2300 	strex	r3, r2, [r1]
 8007f5a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007f5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d1e4      	bne.n	8007f2c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f7fa fac7 	bl	80024fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2202      	movs	r2, #2
 8007f72:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	1ad3      	subs	r3, r2, r3
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	4619      	mov	r1, r3
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 f91d 	bl	80081c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007f8e:	e0fd      	b.n	800818c <HAL_UART_IRQHandler+0x760>
 8007f90:	40020010 	.word	0x40020010
 8007f94:	40020028 	.word	0x40020028
 8007f98:	40020040 	.word	0x40020040
 8007f9c:	40020058 	.word	0x40020058
 8007fa0:	40020070 	.word	0x40020070
 8007fa4:	40020088 	.word	0x40020088
 8007fa8:	400200a0 	.word	0x400200a0
 8007fac:	400200b8 	.word	0x400200b8
 8007fb0:	40020410 	.word	0x40020410
 8007fb4:	40020428 	.word	0x40020428
 8007fb8:	40020440 	.word	0x40020440
 8007fbc:	40020458 	.word	0x40020458
 8007fc0:	40020470 	.word	0x40020470
 8007fc4:	40020488 	.word	0x40020488
 8007fc8:	400204a0 	.word	0x400204a0
 8007fcc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	1ad3      	subs	r3, r2, r3
 8007fe0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f000 80cf 	beq.w	8008190 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8007ff2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	f000 80ca 	beq.w	8008190 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008004:	e853 3f00 	ldrex	r3, [r3]
 8008008:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800800a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800800c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008010:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	461a      	mov	r2, r3
 800801a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800801e:	647b      	str	r3, [r7, #68]	; 0x44
 8008020:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008022:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008024:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008026:	e841 2300 	strex	r3, r2, [r1]
 800802a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800802c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800802e:	2b00      	cmp	r3, #0
 8008030:	d1e4      	bne.n	8007ffc <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	3308      	adds	r3, #8
 8008038:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803c:	e853 3f00 	ldrex	r3, [r3]
 8008040:	623b      	str	r3, [r7, #32]
   return(result);
 8008042:	6a3a      	ldr	r2, [r7, #32]
 8008044:	4b55      	ldr	r3, [pc, #340]	; (800819c <HAL_UART_IRQHandler+0x770>)
 8008046:	4013      	ands	r3, r2
 8008048:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	3308      	adds	r3, #8
 8008052:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008056:	633a      	str	r2, [r7, #48]	; 0x30
 8008058:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800805c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800805e:	e841 2300 	strex	r3, r2, [r1]
 8008062:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008066:	2b00      	cmp	r3, #0
 8008068:	d1e3      	bne.n	8008032 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2220      	movs	r2, #32
 800806e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	e853 3f00 	ldrex	r3, [r3]
 800808a:	60fb      	str	r3, [r7, #12]
   return(result);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f023 0310 	bic.w	r3, r3, #16
 8008092:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	461a      	mov	r2, r3
 800809c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80080a0:	61fb      	str	r3, [r7, #28]
 80080a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a4:	69b9      	ldr	r1, [r7, #24]
 80080a6:	69fa      	ldr	r2, [r7, #28]
 80080a8:	e841 2300 	strex	r3, r2, [r1]
 80080ac:	617b      	str	r3, [r7, #20]
   return(result);
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d1e4      	bne.n	800807e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2202      	movs	r2, #2
 80080b8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80080ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80080be:	4619      	mov	r1, r3
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 f881 	bl	80081c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80080c6:	e063      	b.n	8008190 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80080c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d00e      	beq.n	80080f2 <HAL_UART_IRQHandler+0x6c6>
 80080d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d008      	beq.n	80080f2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80080e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f001 fa16 	bl	800951c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080f0:	e051      	b.n	8008196 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80080f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d014      	beq.n	8008128 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80080fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008106:	2b00      	cmp	r3, #0
 8008108:	d105      	bne.n	8008116 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800810a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800810e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008112:	2b00      	cmp	r3, #0
 8008114:	d008      	beq.n	8008128 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800811a:	2b00      	cmp	r3, #0
 800811c:	d03a      	beq.n	8008194 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	4798      	blx	r3
    }
    return;
 8008126:	e035      	b.n	8008194 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800812c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008130:	2b00      	cmp	r3, #0
 8008132:	d009      	beq.n	8008148 <HAL_UART_IRQHandler+0x71c>
 8008134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800813c:	2b00      	cmp	r3, #0
 800813e:	d003      	beq.n	8008148 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f001 f9c0 	bl	80094c6 <UART_EndTransmit_IT>
    return;
 8008146:	e026      	b.n	8008196 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800814c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008150:	2b00      	cmp	r3, #0
 8008152:	d009      	beq.n	8008168 <HAL_UART_IRQHandler+0x73c>
 8008154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008158:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800815c:	2b00      	cmp	r3, #0
 800815e:	d003      	beq.n	8008168 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f001 f9ef 	bl	8009544 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008166:	e016      	b.n	8008196 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800816c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008170:	2b00      	cmp	r3, #0
 8008172:	d010      	beq.n	8008196 <HAL_UART_IRQHandler+0x76a>
 8008174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008178:	2b00      	cmp	r3, #0
 800817a:	da0c      	bge.n	8008196 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f001 f9d7 	bl	8009530 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008182:	e008      	b.n	8008196 <HAL_UART_IRQHandler+0x76a>
      return;
 8008184:	bf00      	nop
 8008186:	e006      	b.n	8008196 <HAL_UART_IRQHandler+0x76a>
    return;
 8008188:	bf00      	nop
 800818a:	e004      	b.n	8008196 <HAL_UART_IRQHandler+0x76a>
      return;
 800818c:	bf00      	nop
 800818e:	e002      	b.n	8008196 <HAL_UART_IRQHandler+0x76a>
      return;
 8008190:	bf00      	nop
 8008192:	e000      	b.n	8008196 <HAL_UART_IRQHandler+0x76a>
    return;
 8008194:	bf00      	nop
  }
}
 8008196:	37e8      	adds	r7, #232	; 0xe8
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}
 800819c:	effffffe 	.word	0xeffffffe

080081a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80081a8:	bf00      	nop
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80081bc:	bf00      	nop
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	460b      	mov	r3, r1
 80081d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80081d4:	bf00      	nop
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081e4:	b092      	sub	sp, #72	; 0x48
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80081ea:	2300      	movs	r3, #0
 80081ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	689a      	ldr	r2, [r3, #8]
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	431a      	orrs	r2, r3
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	695b      	ldr	r3, [r3, #20]
 80081fe:	431a      	orrs	r2, r3
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	69db      	ldr	r3, [r3, #28]
 8008204:	4313      	orrs	r3, r2
 8008206:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	4bbe      	ldr	r3, [pc, #760]	; (8008508 <UART_SetConfig+0x328>)
 8008210:	4013      	ands	r3, r2
 8008212:	697a      	ldr	r2, [r7, #20]
 8008214:	6812      	ldr	r2, [r2, #0]
 8008216:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008218:	430b      	orrs	r3, r1
 800821a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	68da      	ldr	r2, [r3, #12]
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	430a      	orrs	r2, r1
 8008230:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	699b      	ldr	r3, [r3, #24]
 8008236:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4ab3      	ldr	r2, [pc, #716]	; (800850c <UART_SetConfig+0x32c>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d004      	beq.n	800824c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	6a1b      	ldr	r3, [r3, #32]
 8008246:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008248:	4313      	orrs	r3, r2
 800824a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	689a      	ldr	r2, [r3, #8]
 8008252:	4baf      	ldr	r3, [pc, #700]	; (8008510 <UART_SetConfig+0x330>)
 8008254:	4013      	ands	r3, r2
 8008256:	697a      	ldr	r2, [r7, #20]
 8008258:	6812      	ldr	r2, [r2, #0]
 800825a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800825c:	430b      	orrs	r3, r1
 800825e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008266:	f023 010f 	bic.w	r1, r3, #15
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	430a      	orrs	r2, r1
 8008274:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4aa6      	ldr	r2, [pc, #664]	; (8008514 <UART_SetConfig+0x334>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d177      	bne.n	8008370 <UART_SetConfig+0x190>
 8008280:	4ba5      	ldr	r3, [pc, #660]	; (8008518 <UART_SetConfig+0x338>)
 8008282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008284:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008288:	2b28      	cmp	r3, #40	; 0x28
 800828a:	d86d      	bhi.n	8008368 <UART_SetConfig+0x188>
 800828c:	a201      	add	r2, pc, #4	; (adr r2, 8008294 <UART_SetConfig+0xb4>)
 800828e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008292:	bf00      	nop
 8008294:	08008339 	.word	0x08008339
 8008298:	08008369 	.word	0x08008369
 800829c:	08008369 	.word	0x08008369
 80082a0:	08008369 	.word	0x08008369
 80082a4:	08008369 	.word	0x08008369
 80082a8:	08008369 	.word	0x08008369
 80082ac:	08008369 	.word	0x08008369
 80082b0:	08008369 	.word	0x08008369
 80082b4:	08008341 	.word	0x08008341
 80082b8:	08008369 	.word	0x08008369
 80082bc:	08008369 	.word	0x08008369
 80082c0:	08008369 	.word	0x08008369
 80082c4:	08008369 	.word	0x08008369
 80082c8:	08008369 	.word	0x08008369
 80082cc:	08008369 	.word	0x08008369
 80082d0:	08008369 	.word	0x08008369
 80082d4:	08008349 	.word	0x08008349
 80082d8:	08008369 	.word	0x08008369
 80082dc:	08008369 	.word	0x08008369
 80082e0:	08008369 	.word	0x08008369
 80082e4:	08008369 	.word	0x08008369
 80082e8:	08008369 	.word	0x08008369
 80082ec:	08008369 	.word	0x08008369
 80082f0:	08008369 	.word	0x08008369
 80082f4:	08008351 	.word	0x08008351
 80082f8:	08008369 	.word	0x08008369
 80082fc:	08008369 	.word	0x08008369
 8008300:	08008369 	.word	0x08008369
 8008304:	08008369 	.word	0x08008369
 8008308:	08008369 	.word	0x08008369
 800830c:	08008369 	.word	0x08008369
 8008310:	08008369 	.word	0x08008369
 8008314:	08008359 	.word	0x08008359
 8008318:	08008369 	.word	0x08008369
 800831c:	08008369 	.word	0x08008369
 8008320:	08008369 	.word	0x08008369
 8008324:	08008369 	.word	0x08008369
 8008328:	08008369 	.word	0x08008369
 800832c:	08008369 	.word	0x08008369
 8008330:	08008369 	.word	0x08008369
 8008334:	08008361 	.word	0x08008361
 8008338:	2301      	movs	r3, #1
 800833a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800833e:	e222      	b.n	8008786 <UART_SetConfig+0x5a6>
 8008340:	2304      	movs	r3, #4
 8008342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008346:	e21e      	b.n	8008786 <UART_SetConfig+0x5a6>
 8008348:	2308      	movs	r3, #8
 800834a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800834e:	e21a      	b.n	8008786 <UART_SetConfig+0x5a6>
 8008350:	2310      	movs	r3, #16
 8008352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008356:	e216      	b.n	8008786 <UART_SetConfig+0x5a6>
 8008358:	2320      	movs	r3, #32
 800835a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800835e:	e212      	b.n	8008786 <UART_SetConfig+0x5a6>
 8008360:	2340      	movs	r3, #64	; 0x40
 8008362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008366:	e20e      	b.n	8008786 <UART_SetConfig+0x5a6>
 8008368:	2380      	movs	r3, #128	; 0x80
 800836a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800836e:	e20a      	b.n	8008786 <UART_SetConfig+0x5a6>
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a69      	ldr	r2, [pc, #420]	; (800851c <UART_SetConfig+0x33c>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d130      	bne.n	80083dc <UART_SetConfig+0x1fc>
 800837a:	4b67      	ldr	r3, [pc, #412]	; (8008518 <UART_SetConfig+0x338>)
 800837c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800837e:	f003 0307 	and.w	r3, r3, #7
 8008382:	2b05      	cmp	r3, #5
 8008384:	d826      	bhi.n	80083d4 <UART_SetConfig+0x1f4>
 8008386:	a201      	add	r2, pc, #4	; (adr r2, 800838c <UART_SetConfig+0x1ac>)
 8008388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838c:	080083a5 	.word	0x080083a5
 8008390:	080083ad 	.word	0x080083ad
 8008394:	080083b5 	.word	0x080083b5
 8008398:	080083bd 	.word	0x080083bd
 800839c:	080083c5 	.word	0x080083c5
 80083a0:	080083cd 	.word	0x080083cd
 80083a4:	2300      	movs	r3, #0
 80083a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083aa:	e1ec      	b.n	8008786 <UART_SetConfig+0x5a6>
 80083ac:	2304      	movs	r3, #4
 80083ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083b2:	e1e8      	b.n	8008786 <UART_SetConfig+0x5a6>
 80083b4:	2308      	movs	r3, #8
 80083b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ba:	e1e4      	b.n	8008786 <UART_SetConfig+0x5a6>
 80083bc:	2310      	movs	r3, #16
 80083be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083c2:	e1e0      	b.n	8008786 <UART_SetConfig+0x5a6>
 80083c4:	2320      	movs	r3, #32
 80083c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ca:	e1dc      	b.n	8008786 <UART_SetConfig+0x5a6>
 80083cc:	2340      	movs	r3, #64	; 0x40
 80083ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083d2:	e1d8      	b.n	8008786 <UART_SetConfig+0x5a6>
 80083d4:	2380      	movs	r3, #128	; 0x80
 80083d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083da:	e1d4      	b.n	8008786 <UART_SetConfig+0x5a6>
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a4f      	ldr	r2, [pc, #316]	; (8008520 <UART_SetConfig+0x340>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d130      	bne.n	8008448 <UART_SetConfig+0x268>
 80083e6:	4b4c      	ldr	r3, [pc, #304]	; (8008518 <UART_SetConfig+0x338>)
 80083e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083ea:	f003 0307 	and.w	r3, r3, #7
 80083ee:	2b05      	cmp	r3, #5
 80083f0:	d826      	bhi.n	8008440 <UART_SetConfig+0x260>
 80083f2:	a201      	add	r2, pc, #4	; (adr r2, 80083f8 <UART_SetConfig+0x218>)
 80083f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f8:	08008411 	.word	0x08008411
 80083fc:	08008419 	.word	0x08008419
 8008400:	08008421 	.word	0x08008421
 8008404:	08008429 	.word	0x08008429
 8008408:	08008431 	.word	0x08008431
 800840c:	08008439 	.word	0x08008439
 8008410:	2300      	movs	r3, #0
 8008412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008416:	e1b6      	b.n	8008786 <UART_SetConfig+0x5a6>
 8008418:	2304      	movs	r3, #4
 800841a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800841e:	e1b2      	b.n	8008786 <UART_SetConfig+0x5a6>
 8008420:	2308      	movs	r3, #8
 8008422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008426:	e1ae      	b.n	8008786 <UART_SetConfig+0x5a6>
 8008428:	2310      	movs	r3, #16
 800842a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800842e:	e1aa      	b.n	8008786 <UART_SetConfig+0x5a6>
 8008430:	2320      	movs	r3, #32
 8008432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008436:	e1a6      	b.n	8008786 <UART_SetConfig+0x5a6>
 8008438:	2340      	movs	r3, #64	; 0x40
 800843a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800843e:	e1a2      	b.n	8008786 <UART_SetConfig+0x5a6>
 8008440:	2380      	movs	r3, #128	; 0x80
 8008442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008446:	e19e      	b.n	8008786 <UART_SetConfig+0x5a6>
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a35      	ldr	r2, [pc, #212]	; (8008524 <UART_SetConfig+0x344>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d130      	bne.n	80084b4 <UART_SetConfig+0x2d4>
 8008452:	4b31      	ldr	r3, [pc, #196]	; (8008518 <UART_SetConfig+0x338>)
 8008454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008456:	f003 0307 	and.w	r3, r3, #7
 800845a:	2b05      	cmp	r3, #5
 800845c:	d826      	bhi.n	80084ac <UART_SetConfig+0x2cc>
 800845e:	a201      	add	r2, pc, #4	; (adr r2, 8008464 <UART_SetConfig+0x284>)
 8008460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008464:	0800847d 	.word	0x0800847d
 8008468:	08008485 	.word	0x08008485
 800846c:	0800848d 	.word	0x0800848d
 8008470:	08008495 	.word	0x08008495
 8008474:	0800849d 	.word	0x0800849d
 8008478:	080084a5 	.word	0x080084a5
 800847c:	2300      	movs	r3, #0
 800847e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008482:	e180      	b.n	8008786 <UART_SetConfig+0x5a6>
 8008484:	2304      	movs	r3, #4
 8008486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800848a:	e17c      	b.n	8008786 <UART_SetConfig+0x5a6>
 800848c:	2308      	movs	r3, #8
 800848e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008492:	e178      	b.n	8008786 <UART_SetConfig+0x5a6>
 8008494:	2310      	movs	r3, #16
 8008496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800849a:	e174      	b.n	8008786 <UART_SetConfig+0x5a6>
 800849c:	2320      	movs	r3, #32
 800849e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084a2:	e170      	b.n	8008786 <UART_SetConfig+0x5a6>
 80084a4:	2340      	movs	r3, #64	; 0x40
 80084a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084aa:	e16c      	b.n	8008786 <UART_SetConfig+0x5a6>
 80084ac:	2380      	movs	r3, #128	; 0x80
 80084ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084b2:	e168      	b.n	8008786 <UART_SetConfig+0x5a6>
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a1b      	ldr	r2, [pc, #108]	; (8008528 <UART_SetConfig+0x348>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d142      	bne.n	8008544 <UART_SetConfig+0x364>
 80084be:	4b16      	ldr	r3, [pc, #88]	; (8008518 <UART_SetConfig+0x338>)
 80084c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084c2:	f003 0307 	and.w	r3, r3, #7
 80084c6:	2b05      	cmp	r3, #5
 80084c8:	d838      	bhi.n	800853c <UART_SetConfig+0x35c>
 80084ca:	a201      	add	r2, pc, #4	; (adr r2, 80084d0 <UART_SetConfig+0x2f0>)
 80084cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d0:	080084e9 	.word	0x080084e9
 80084d4:	080084f1 	.word	0x080084f1
 80084d8:	080084f9 	.word	0x080084f9
 80084dc:	08008501 	.word	0x08008501
 80084e0:	0800852d 	.word	0x0800852d
 80084e4:	08008535 	.word	0x08008535
 80084e8:	2300      	movs	r3, #0
 80084ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ee:	e14a      	b.n	8008786 <UART_SetConfig+0x5a6>
 80084f0:	2304      	movs	r3, #4
 80084f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084f6:	e146      	b.n	8008786 <UART_SetConfig+0x5a6>
 80084f8:	2308      	movs	r3, #8
 80084fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084fe:	e142      	b.n	8008786 <UART_SetConfig+0x5a6>
 8008500:	2310      	movs	r3, #16
 8008502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008506:	e13e      	b.n	8008786 <UART_SetConfig+0x5a6>
 8008508:	cfff69f3 	.word	0xcfff69f3
 800850c:	58000c00 	.word	0x58000c00
 8008510:	11fff4ff 	.word	0x11fff4ff
 8008514:	40011000 	.word	0x40011000
 8008518:	58024400 	.word	0x58024400
 800851c:	40004400 	.word	0x40004400
 8008520:	40004800 	.word	0x40004800
 8008524:	40004c00 	.word	0x40004c00
 8008528:	40005000 	.word	0x40005000
 800852c:	2320      	movs	r3, #32
 800852e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008532:	e128      	b.n	8008786 <UART_SetConfig+0x5a6>
 8008534:	2340      	movs	r3, #64	; 0x40
 8008536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800853a:	e124      	b.n	8008786 <UART_SetConfig+0x5a6>
 800853c:	2380      	movs	r3, #128	; 0x80
 800853e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008542:	e120      	b.n	8008786 <UART_SetConfig+0x5a6>
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4acb      	ldr	r2, [pc, #812]	; (8008878 <UART_SetConfig+0x698>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d176      	bne.n	800863c <UART_SetConfig+0x45c>
 800854e:	4bcb      	ldr	r3, [pc, #812]	; (800887c <UART_SetConfig+0x69c>)
 8008550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008552:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008556:	2b28      	cmp	r3, #40	; 0x28
 8008558:	d86c      	bhi.n	8008634 <UART_SetConfig+0x454>
 800855a:	a201      	add	r2, pc, #4	; (adr r2, 8008560 <UART_SetConfig+0x380>)
 800855c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008560:	08008605 	.word	0x08008605
 8008564:	08008635 	.word	0x08008635
 8008568:	08008635 	.word	0x08008635
 800856c:	08008635 	.word	0x08008635
 8008570:	08008635 	.word	0x08008635
 8008574:	08008635 	.word	0x08008635
 8008578:	08008635 	.word	0x08008635
 800857c:	08008635 	.word	0x08008635
 8008580:	0800860d 	.word	0x0800860d
 8008584:	08008635 	.word	0x08008635
 8008588:	08008635 	.word	0x08008635
 800858c:	08008635 	.word	0x08008635
 8008590:	08008635 	.word	0x08008635
 8008594:	08008635 	.word	0x08008635
 8008598:	08008635 	.word	0x08008635
 800859c:	08008635 	.word	0x08008635
 80085a0:	08008615 	.word	0x08008615
 80085a4:	08008635 	.word	0x08008635
 80085a8:	08008635 	.word	0x08008635
 80085ac:	08008635 	.word	0x08008635
 80085b0:	08008635 	.word	0x08008635
 80085b4:	08008635 	.word	0x08008635
 80085b8:	08008635 	.word	0x08008635
 80085bc:	08008635 	.word	0x08008635
 80085c0:	0800861d 	.word	0x0800861d
 80085c4:	08008635 	.word	0x08008635
 80085c8:	08008635 	.word	0x08008635
 80085cc:	08008635 	.word	0x08008635
 80085d0:	08008635 	.word	0x08008635
 80085d4:	08008635 	.word	0x08008635
 80085d8:	08008635 	.word	0x08008635
 80085dc:	08008635 	.word	0x08008635
 80085e0:	08008625 	.word	0x08008625
 80085e4:	08008635 	.word	0x08008635
 80085e8:	08008635 	.word	0x08008635
 80085ec:	08008635 	.word	0x08008635
 80085f0:	08008635 	.word	0x08008635
 80085f4:	08008635 	.word	0x08008635
 80085f8:	08008635 	.word	0x08008635
 80085fc:	08008635 	.word	0x08008635
 8008600:	0800862d 	.word	0x0800862d
 8008604:	2301      	movs	r3, #1
 8008606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800860a:	e0bc      	b.n	8008786 <UART_SetConfig+0x5a6>
 800860c:	2304      	movs	r3, #4
 800860e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008612:	e0b8      	b.n	8008786 <UART_SetConfig+0x5a6>
 8008614:	2308      	movs	r3, #8
 8008616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800861a:	e0b4      	b.n	8008786 <UART_SetConfig+0x5a6>
 800861c:	2310      	movs	r3, #16
 800861e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008622:	e0b0      	b.n	8008786 <UART_SetConfig+0x5a6>
 8008624:	2320      	movs	r3, #32
 8008626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800862a:	e0ac      	b.n	8008786 <UART_SetConfig+0x5a6>
 800862c:	2340      	movs	r3, #64	; 0x40
 800862e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008632:	e0a8      	b.n	8008786 <UART_SetConfig+0x5a6>
 8008634:	2380      	movs	r3, #128	; 0x80
 8008636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800863a:	e0a4      	b.n	8008786 <UART_SetConfig+0x5a6>
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a8f      	ldr	r2, [pc, #572]	; (8008880 <UART_SetConfig+0x6a0>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d130      	bne.n	80086a8 <UART_SetConfig+0x4c8>
 8008646:	4b8d      	ldr	r3, [pc, #564]	; (800887c <UART_SetConfig+0x69c>)
 8008648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800864a:	f003 0307 	and.w	r3, r3, #7
 800864e:	2b05      	cmp	r3, #5
 8008650:	d826      	bhi.n	80086a0 <UART_SetConfig+0x4c0>
 8008652:	a201      	add	r2, pc, #4	; (adr r2, 8008658 <UART_SetConfig+0x478>)
 8008654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008658:	08008671 	.word	0x08008671
 800865c:	08008679 	.word	0x08008679
 8008660:	08008681 	.word	0x08008681
 8008664:	08008689 	.word	0x08008689
 8008668:	08008691 	.word	0x08008691
 800866c:	08008699 	.word	0x08008699
 8008670:	2300      	movs	r3, #0
 8008672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008676:	e086      	b.n	8008786 <UART_SetConfig+0x5a6>
 8008678:	2304      	movs	r3, #4
 800867a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800867e:	e082      	b.n	8008786 <UART_SetConfig+0x5a6>
 8008680:	2308      	movs	r3, #8
 8008682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008686:	e07e      	b.n	8008786 <UART_SetConfig+0x5a6>
 8008688:	2310      	movs	r3, #16
 800868a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800868e:	e07a      	b.n	8008786 <UART_SetConfig+0x5a6>
 8008690:	2320      	movs	r3, #32
 8008692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008696:	e076      	b.n	8008786 <UART_SetConfig+0x5a6>
 8008698:	2340      	movs	r3, #64	; 0x40
 800869a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800869e:	e072      	b.n	8008786 <UART_SetConfig+0x5a6>
 80086a0:	2380      	movs	r3, #128	; 0x80
 80086a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086a6:	e06e      	b.n	8008786 <UART_SetConfig+0x5a6>
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a75      	ldr	r2, [pc, #468]	; (8008884 <UART_SetConfig+0x6a4>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d130      	bne.n	8008714 <UART_SetConfig+0x534>
 80086b2:	4b72      	ldr	r3, [pc, #456]	; (800887c <UART_SetConfig+0x69c>)
 80086b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086b6:	f003 0307 	and.w	r3, r3, #7
 80086ba:	2b05      	cmp	r3, #5
 80086bc:	d826      	bhi.n	800870c <UART_SetConfig+0x52c>
 80086be:	a201      	add	r2, pc, #4	; (adr r2, 80086c4 <UART_SetConfig+0x4e4>)
 80086c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c4:	080086dd 	.word	0x080086dd
 80086c8:	080086e5 	.word	0x080086e5
 80086cc:	080086ed 	.word	0x080086ed
 80086d0:	080086f5 	.word	0x080086f5
 80086d4:	080086fd 	.word	0x080086fd
 80086d8:	08008705 	.word	0x08008705
 80086dc:	2300      	movs	r3, #0
 80086de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086e2:	e050      	b.n	8008786 <UART_SetConfig+0x5a6>
 80086e4:	2304      	movs	r3, #4
 80086e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ea:	e04c      	b.n	8008786 <UART_SetConfig+0x5a6>
 80086ec:	2308      	movs	r3, #8
 80086ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086f2:	e048      	b.n	8008786 <UART_SetConfig+0x5a6>
 80086f4:	2310      	movs	r3, #16
 80086f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086fa:	e044      	b.n	8008786 <UART_SetConfig+0x5a6>
 80086fc:	2320      	movs	r3, #32
 80086fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008702:	e040      	b.n	8008786 <UART_SetConfig+0x5a6>
 8008704:	2340      	movs	r3, #64	; 0x40
 8008706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800870a:	e03c      	b.n	8008786 <UART_SetConfig+0x5a6>
 800870c:	2380      	movs	r3, #128	; 0x80
 800870e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008712:	e038      	b.n	8008786 <UART_SetConfig+0x5a6>
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a5b      	ldr	r2, [pc, #364]	; (8008888 <UART_SetConfig+0x6a8>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d130      	bne.n	8008780 <UART_SetConfig+0x5a0>
 800871e:	4b57      	ldr	r3, [pc, #348]	; (800887c <UART_SetConfig+0x69c>)
 8008720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008722:	f003 0307 	and.w	r3, r3, #7
 8008726:	2b05      	cmp	r3, #5
 8008728:	d826      	bhi.n	8008778 <UART_SetConfig+0x598>
 800872a:	a201      	add	r2, pc, #4	; (adr r2, 8008730 <UART_SetConfig+0x550>)
 800872c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008730:	08008749 	.word	0x08008749
 8008734:	08008751 	.word	0x08008751
 8008738:	08008759 	.word	0x08008759
 800873c:	08008761 	.word	0x08008761
 8008740:	08008769 	.word	0x08008769
 8008744:	08008771 	.word	0x08008771
 8008748:	2302      	movs	r3, #2
 800874a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800874e:	e01a      	b.n	8008786 <UART_SetConfig+0x5a6>
 8008750:	2304      	movs	r3, #4
 8008752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008756:	e016      	b.n	8008786 <UART_SetConfig+0x5a6>
 8008758:	2308      	movs	r3, #8
 800875a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800875e:	e012      	b.n	8008786 <UART_SetConfig+0x5a6>
 8008760:	2310      	movs	r3, #16
 8008762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008766:	e00e      	b.n	8008786 <UART_SetConfig+0x5a6>
 8008768:	2320      	movs	r3, #32
 800876a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800876e:	e00a      	b.n	8008786 <UART_SetConfig+0x5a6>
 8008770:	2340      	movs	r3, #64	; 0x40
 8008772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008776:	e006      	b.n	8008786 <UART_SetConfig+0x5a6>
 8008778:	2380      	movs	r3, #128	; 0x80
 800877a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800877e:	e002      	b.n	8008786 <UART_SetConfig+0x5a6>
 8008780:	2380      	movs	r3, #128	; 0x80
 8008782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a3f      	ldr	r2, [pc, #252]	; (8008888 <UART_SetConfig+0x6a8>)
 800878c:	4293      	cmp	r3, r2
 800878e:	f040 80f8 	bne.w	8008982 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008792:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008796:	2b20      	cmp	r3, #32
 8008798:	dc46      	bgt.n	8008828 <UART_SetConfig+0x648>
 800879a:	2b02      	cmp	r3, #2
 800879c:	f2c0 8082 	blt.w	80088a4 <UART_SetConfig+0x6c4>
 80087a0:	3b02      	subs	r3, #2
 80087a2:	2b1e      	cmp	r3, #30
 80087a4:	d87e      	bhi.n	80088a4 <UART_SetConfig+0x6c4>
 80087a6:	a201      	add	r2, pc, #4	; (adr r2, 80087ac <UART_SetConfig+0x5cc>)
 80087a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ac:	0800882f 	.word	0x0800882f
 80087b0:	080088a5 	.word	0x080088a5
 80087b4:	08008837 	.word	0x08008837
 80087b8:	080088a5 	.word	0x080088a5
 80087bc:	080088a5 	.word	0x080088a5
 80087c0:	080088a5 	.word	0x080088a5
 80087c4:	08008847 	.word	0x08008847
 80087c8:	080088a5 	.word	0x080088a5
 80087cc:	080088a5 	.word	0x080088a5
 80087d0:	080088a5 	.word	0x080088a5
 80087d4:	080088a5 	.word	0x080088a5
 80087d8:	080088a5 	.word	0x080088a5
 80087dc:	080088a5 	.word	0x080088a5
 80087e0:	080088a5 	.word	0x080088a5
 80087e4:	08008857 	.word	0x08008857
 80087e8:	080088a5 	.word	0x080088a5
 80087ec:	080088a5 	.word	0x080088a5
 80087f0:	080088a5 	.word	0x080088a5
 80087f4:	080088a5 	.word	0x080088a5
 80087f8:	080088a5 	.word	0x080088a5
 80087fc:	080088a5 	.word	0x080088a5
 8008800:	080088a5 	.word	0x080088a5
 8008804:	080088a5 	.word	0x080088a5
 8008808:	080088a5 	.word	0x080088a5
 800880c:	080088a5 	.word	0x080088a5
 8008810:	080088a5 	.word	0x080088a5
 8008814:	080088a5 	.word	0x080088a5
 8008818:	080088a5 	.word	0x080088a5
 800881c:	080088a5 	.word	0x080088a5
 8008820:	080088a5 	.word	0x080088a5
 8008824:	08008897 	.word	0x08008897
 8008828:	2b40      	cmp	r3, #64	; 0x40
 800882a:	d037      	beq.n	800889c <UART_SetConfig+0x6bc>
 800882c:	e03a      	b.n	80088a4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800882e:	f7fe fae9 	bl	8006e04 <HAL_RCCEx_GetD3PCLK1Freq>
 8008832:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008834:	e03c      	b.n	80088b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800883a:	4618      	mov	r0, r3
 800883c:	f7fe faf8 	bl	8006e30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008842:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008844:	e034      	b.n	80088b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008846:	f107 0318 	add.w	r3, r7, #24
 800884a:	4618      	mov	r0, r3
 800884c:	f7fe fc44 	bl	80070d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008850:	69fb      	ldr	r3, [r7, #28]
 8008852:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008854:	e02c      	b.n	80088b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008856:	4b09      	ldr	r3, [pc, #36]	; (800887c <UART_SetConfig+0x69c>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 0320 	and.w	r3, r3, #32
 800885e:	2b00      	cmp	r3, #0
 8008860:	d016      	beq.n	8008890 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008862:	4b06      	ldr	r3, [pc, #24]	; (800887c <UART_SetConfig+0x69c>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	08db      	lsrs	r3, r3, #3
 8008868:	f003 0303 	and.w	r3, r3, #3
 800886c:	4a07      	ldr	r2, [pc, #28]	; (800888c <UART_SetConfig+0x6ac>)
 800886e:	fa22 f303 	lsr.w	r3, r2, r3
 8008872:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008874:	e01c      	b.n	80088b0 <UART_SetConfig+0x6d0>
 8008876:	bf00      	nop
 8008878:	40011400 	.word	0x40011400
 800887c:	58024400 	.word	0x58024400
 8008880:	40007800 	.word	0x40007800
 8008884:	40007c00 	.word	0x40007c00
 8008888:	58000c00 	.word	0x58000c00
 800888c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008890:	4b9d      	ldr	r3, [pc, #628]	; (8008b08 <UART_SetConfig+0x928>)
 8008892:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008894:	e00c      	b.n	80088b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008896:	4b9d      	ldr	r3, [pc, #628]	; (8008b0c <UART_SetConfig+0x92c>)
 8008898:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800889a:	e009      	b.n	80088b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800889c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088a2:	e005      	b.n	80088b0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80088a4:	2300      	movs	r3, #0
 80088a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80088a8:	2301      	movs	r3, #1
 80088aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80088ae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80088b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	f000 81de 	beq.w	8008c74 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088bc:	4a94      	ldr	r2, [pc, #592]	; (8008b10 <UART_SetConfig+0x930>)
 80088be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088c2:	461a      	mov	r2, r3
 80088c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80088ca:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	685a      	ldr	r2, [r3, #4]
 80088d0:	4613      	mov	r3, r2
 80088d2:	005b      	lsls	r3, r3, #1
 80088d4:	4413      	add	r3, r2
 80088d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088d8:	429a      	cmp	r2, r3
 80088da:	d305      	bcc.n	80088e8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d903      	bls.n	80088f0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80088ee:	e1c1      	b.n	8008c74 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088f2:	2200      	movs	r2, #0
 80088f4:	60bb      	str	r3, [r7, #8]
 80088f6:	60fa      	str	r2, [r7, #12]
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fc:	4a84      	ldr	r2, [pc, #528]	; (8008b10 <UART_SetConfig+0x930>)
 80088fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008902:	b29b      	uxth	r3, r3
 8008904:	2200      	movs	r2, #0
 8008906:	603b      	str	r3, [r7, #0]
 8008908:	607a      	str	r2, [r7, #4]
 800890a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800890e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008912:	f7f7 fd3d 	bl	8000390 <__aeabi_uldivmod>
 8008916:	4602      	mov	r2, r0
 8008918:	460b      	mov	r3, r1
 800891a:	4610      	mov	r0, r2
 800891c:	4619      	mov	r1, r3
 800891e:	f04f 0200 	mov.w	r2, #0
 8008922:	f04f 0300 	mov.w	r3, #0
 8008926:	020b      	lsls	r3, r1, #8
 8008928:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800892c:	0202      	lsls	r2, r0, #8
 800892e:	6979      	ldr	r1, [r7, #20]
 8008930:	6849      	ldr	r1, [r1, #4]
 8008932:	0849      	lsrs	r1, r1, #1
 8008934:	2000      	movs	r0, #0
 8008936:	460c      	mov	r4, r1
 8008938:	4605      	mov	r5, r0
 800893a:	eb12 0804 	adds.w	r8, r2, r4
 800893e:	eb43 0905 	adc.w	r9, r3, r5
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	469a      	mov	sl, r3
 800894a:	4693      	mov	fp, r2
 800894c:	4652      	mov	r2, sl
 800894e:	465b      	mov	r3, fp
 8008950:	4640      	mov	r0, r8
 8008952:	4649      	mov	r1, r9
 8008954:	f7f7 fd1c 	bl	8000390 <__aeabi_uldivmod>
 8008958:	4602      	mov	r2, r0
 800895a:	460b      	mov	r3, r1
 800895c:	4613      	mov	r3, r2
 800895e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008962:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008966:	d308      	bcc.n	800897a <UART_SetConfig+0x79a>
 8008968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800896a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800896e:	d204      	bcs.n	800897a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008976:	60da      	str	r2, [r3, #12]
 8008978:	e17c      	b.n	8008c74 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800897a:	2301      	movs	r3, #1
 800897c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008980:	e178      	b.n	8008c74 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	69db      	ldr	r3, [r3, #28]
 8008986:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800898a:	f040 80c5 	bne.w	8008b18 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800898e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008992:	2b20      	cmp	r3, #32
 8008994:	dc48      	bgt.n	8008a28 <UART_SetConfig+0x848>
 8008996:	2b00      	cmp	r3, #0
 8008998:	db7b      	blt.n	8008a92 <UART_SetConfig+0x8b2>
 800899a:	2b20      	cmp	r3, #32
 800899c:	d879      	bhi.n	8008a92 <UART_SetConfig+0x8b2>
 800899e:	a201      	add	r2, pc, #4	; (adr r2, 80089a4 <UART_SetConfig+0x7c4>)
 80089a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a4:	08008a2f 	.word	0x08008a2f
 80089a8:	08008a37 	.word	0x08008a37
 80089ac:	08008a93 	.word	0x08008a93
 80089b0:	08008a93 	.word	0x08008a93
 80089b4:	08008a3f 	.word	0x08008a3f
 80089b8:	08008a93 	.word	0x08008a93
 80089bc:	08008a93 	.word	0x08008a93
 80089c0:	08008a93 	.word	0x08008a93
 80089c4:	08008a4f 	.word	0x08008a4f
 80089c8:	08008a93 	.word	0x08008a93
 80089cc:	08008a93 	.word	0x08008a93
 80089d0:	08008a93 	.word	0x08008a93
 80089d4:	08008a93 	.word	0x08008a93
 80089d8:	08008a93 	.word	0x08008a93
 80089dc:	08008a93 	.word	0x08008a93
 80089e0:	08008a93 	.word	0x08008a93
 80089e4:	08008a5f 	.word	0x08008a5f
 80089e8:	08008a93 	.word	0x08008a93
 80089ec:	08008a93 	.word	0x08008a93
 80089f0:	08008a93 	.word	0x08008a93
 80089f4:	08008a93 	.word	0x08008a93
 80089f8:	08008a93 	.word	0x08008a93
 80089fc:	08008a93 	.word	0x08008a93
 8008a00:	08008a93 	.word	0x08008a93
 8008a04:	08008a93 	.word	0x08008a93
 8008a08:	08008a93 	.word	0x08008a93
 8008a0c:	08008a93 	.word	0x08008a93
 8008a10:	08008a93 	.word	0x08008a93
 8008a14:	08008a93 	.word	0x08008a93
 8008a18:	08008a93 	.word	0x08008a93
 8008a1c:	08008a93 	.word	0x08008a93
 8008a20:	08008a93 	.word	0x08008a93
 8008a24:	08008a85 	.word	0x08008a85
 8008a28:	2b40      	cmp	r3, #64	; 0x40
 8008a2a:	d02e      	beq.n	8008a8a <UART_SetConfig+0x8aa>
 8008a2c:	e031      	b.n	8008a92 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a2e:	f7fc ffb3 	bl	8005998 <HAL_RCC_GetPCLK1Freq>
 8008a32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008a34:	e033      	b.n	8008a9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a36:	f7fc ffc5 	bl	80059c4 <HAL_RCC_GetPCLK2Freq>
 8008a3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008a3c:	e02f      	b.n	8008a9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a42:	4618      	mov	r0, r3
 8008a44:	f7fe f9f4 	bl	8006e30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a4c:	e027      	b.n	8008a9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a4e:	f107 0318 	add.w	r3, r7, #24
 8008a52:	4618      	mov	r0, r3
 8008a54:	f7fe fb40 	bl	80070d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008a58:	69fb      	ldr	r3, [r7, #28]
 8008a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a5c:	e01f      	b.n	8008a9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a5e:	4b2d      	ldr	r3, [pc, #180]	; (8008b14 <UART_SetConfig+0x934>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f003 0320 	and.w	r3, r3, #32
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d009      	beq.n	8008a7e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008a6a:	4b2a      	ldr	r3, [pc, #168]	; (8008b14 <UART_SetConfig+0x934>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	08db      	lsrs	r3, r3, #3
 8008a70:	f003 0303 	and.w	r3, r3, #3
 8008a74:	4a24      	ldr	r2, [pc, #144]	; (8008b08 <UART_SetConfig+0x928>)
 8008a76:	fa22 f303 	lsr.w	r3, r2, r3
 8008a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008a7c:	e00f      	b.n	8008a9e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008a7e:	4b22      	ldr	r3, [pc, #136]	; (8008b08 <UART_SetConfig+0x928>)
 8008a80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a82:	e00c      	b.n	8008a9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008a84:	4b21      	ldr	r3, [pc, #132]	; (8008b0c <UART_SetConfig+0x92c>)
 8008a86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a88:	e009      	b.n	8008a9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a90:	e005      	b.n	8008a9e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008a92:	2300      	movs	r3, #0
 8008a94:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008a9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	f000 80e7 	beq.w	8008c74 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aaa:	4a19      	ldr	r2, [pc, #100]	; (8008b10 <UART_SetConfig+0x930>)
 8008aac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ab4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ab8:	005a      	lsls	r2, r3, #1
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	085b      	lsrs	r3, r3, #1
 8008ac0:	441a      	add	r2, r3
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aca:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ace:	2b0f      	cmp	r3, #15
 8008ad0:	d916      	bls.n	8008b00 <UART_SetConfig+0x920>
 8008ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ad8:	d212      	bcs.n	8008b00 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	f023 030f 	bic.w	r3, r3, #15
 8008ae2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae6:	085b      	lsrs	r3, r3, #1
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	f003 0307 	and.w	r3, r3, #7
 8008aee:	b29a      	uxth	r2, r3
 8008af0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008af2:	4313      	orrs	r3, r2
 8008af4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008afc:	60da      	str	r2, [r3, #12]
 8008afe:	e0b9      	b.n	8008c74 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008b06:	e0b5      	b.n	8008c74 <UART_SetConfig+0xa94>
 8008b08:	03d09000 	.word	0x03d09000
 8008b0c:	003d0900 	.word	0x003d0900
 8008b10:	0800bff0 	.word	0x0800bff0
 8008b14:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008b18:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008b1c:	2b20      	cmp	r3, #32
 8008b1e:	dc49      	bgt.n	8008bb4 <UART_SetConfig+0x9d4>
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	db7c      	blt.n	8008c1e <UART_SetConfig+0xa3e>
 8008b24:	2b20      	cmp	r3, #32
 8008b26:	d87a      	bhi.n	8008c1e <UART_SetConfig+0xa3e>
 8008b28:	a201      	add	r2, pc, #4	; (adr r2, 8008b30 <UART_SetConfig+0x950>)
 8008b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b2e:	bf00      	nop
 8008b30:	08008bbb 	.word	0x08008bbb
 8008b34:	08008bc3 	.word	0x08008bc3
 8008b38:	08008c1f 	.word	0x08008c1f
 8008b3c:	08008c1f 	.word	0x08008c1f
 8008b40:	08008bcb 	.word	0x08008bcb
 8008b44:	08008c1f 	.word	0x08008c1f
 8008b48:	08008c1f 	.word	0x08008c1f
 8008b4c:	08008c1f 	.word	0x08008c1f
 8008b50:	08008bdb 	.word	0x08008bdb
 8008b54:	08008c1f 	.word	0x08008c1f
 8008b58:	08008c1f 	.word	0x08008c1f
 8008b5c:	08008c1f 	.word	0x08008c1f
 8008b60:	08008c1f 	.word	0x08008c1f
 8008b64:	08008c1f 	.word	0x08008c1f
 8008b68:	08008c1f 	.word	0x08008c1f
 8008b6c:	08008c1f 	.word	0x08008c1f
 8008b70:	08008beb 	.word	0x08008beb
 8008b74:	08008c1f 	.word	0x08008c1f
 8008b78:	08008c1f 	.word	0x08008c1f
 8008b7c:	08008c1f 	.word	0x08008c1f
 8008b80:	08008c1f 	.word	0x08008c1f
 8008b84:	08008c1f 	.word	0x08008c1f
 8008b88:	08008c1f 	.word	0x08008c1f
 8008b8c:	08008c1f 	.word	0x08008c1f
 8008b90:	08008c1f 	.word	0x08008c1f
 8008b94:	08008c1f 	.word	0x08008c1f
 8008b98:	08008c1f 	.word	0x08008c1f
 8008b9c:	08008c1f 	.word	0x08008c1f
 8008ba0:	08008c1f 	.word	0x08008c1f
 8008ba4:	08008c1f 	.word	0x08008c1f
 8008ba8:	08008c1f 	.word	0x08008c1f
 8008bac:	08008c1f 	.word	0x08008c1f
 8008bb0:	08008c11 	.word	0x08008c11
 8008bb4:	2b40      	cmp	r3, #64	; 0x40
 8008bb6:	d02e      	beq.n	8008c16 <UART_SetConfig+0xa36>
 8008bb8:	e031      	b.n	8008c1e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bba:	f7fc feed 	bl	8005998 <HAL_RCC_GetPCLK1Freq>
 8008bbe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008bc0:	e033      	b.n	8008c2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bc2:	f7fc feff 	bl	80059c4 <HAL_RCC_GetPCLK2Freq>
 8008bc6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008bc8:	e02f      	b.n	8008c2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f7fe f92e 	bl	8006e30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bd8:	e027      	b.n	8008c2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bda:	f107 0318 	add.w	r3, r7, #24
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7fe fa7a 	bl	80070d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008be4:	69fb      	ldr	r3, [r7, #28]
 8008be6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008be8:	e01f      	b.n	8008c2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bea:	4b2d      	ldr	r3, [pc, #180]	; (8008ca0 <UART_SetConfig+0xac0>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f003 0320 	and.w	r3, r3, #32
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d009      	beq.n	8008c0a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008bf6:	4b2a      	ldr	r3, [pc, #168]	; (8008ca0 <UART_SetConfig+0xac0>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	08db      	lsrs	r3, r3, #3
 8008bfc:	f003 0303 	and.w	r3, r3, #3
 8008c00:	4a28      	ldr	r2, [pc, #160]	; (8008ca4 <UART_SetConfig+0xac4>)
 8008c02:	fa22 f303 	lsr.w	r3, r2, r3
 8008c06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008c08:	e00f      	b.n	8008c2a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008c0a:	4b26      	ldr	r3, [pc, #152]	; (8008ca4 <UART_SetConfig+0xac4>)
 8008c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c0e:	e00c      	b.n	8008c2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008c10:	4b25      	ldr	r3, [pc, #148]	; (8008ca8 <UART_SetConfig+0xac8>)
 8008c12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c14:	e009      	b.n	8008c2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c1c:	e005      	b.n	8008c2a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008c22:	2301      	movs	r3, #1
 8008c24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008c28:	bf00      	nop
    }

    if (pclk != 0U)
 8008c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d021      	beq.n	8008c74 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c34:	4a1d      	ldr	r2, [pc, #116]	; (8008cac <UART_SetConfig+0xacc>)
 8008c36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c3e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	085b      	lsrs	r3, r3, #1
 8008c48:	441a      	add	r2, r3
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c52:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c56:	2b0f      	cmp	r3, #15
 8008c58:	d909      	bls.n	8008c6e <UART_SetConfig+0xa8e>
 8008c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c60:	d205      	bcs.n	8008c6e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c64:	b29a      	uxth	r2, r3
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	60da      	str	r2, [r3, #12]
 8008c6c:	e002      	b.n	8008c74 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	2201      	movs	r2, #1
 8008c78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	2200      	movs	r2, #0
 8008c88:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008c90:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3748      	adds	r7, #72	; 0x48
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c9e:	bf00      	nop
 8008ca0:	58024400 	.word	0x58024400
 8008ca4:	03d09000 	.word	0x03d09000
 8008ca8:	003d0900 	.word	0x003d0900
 8008cac:	0800bff0 	.word	0x0800bff0

08008cb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cbc:	f003 0301 	and.w	r3, r3, #1
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d00a      	beq.n	8008cda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	430a      	orrs	r2, r1
 8008cd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cde:	f003 0302 	and.w	r3, r3, #2
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d00a      	beq.n	8008cfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	430a      	orrs	r2, r1
 8008cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d00:	f003 0304 	and.w	r3, r3, #4
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d00a      	beq.n	8008d1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	430a      	orrs	r2, r1
 8008d1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d22:	f003 0308 	and.w	r3, r3, #8
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d00a      	beq.n	8008d40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	430a      	orrs	r2, r1
 8008d3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d44:	f003 0310 	and.w	r3, r3, #16
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d00a      	beq.n	8008d62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	430a      	orrs	r2, r1
 8008d60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d66:	f003 0320 	and.w	r3, r3, #32
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00a      	beq.n	8008d84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	689b      	ldr	r3, [r3, #8]
 8008d74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	430a      	orrs	r2, r1
 8008d82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d01a      	beq.n	8008dc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	430a      	orrs	r2, r1
 8008da4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008daa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008dae:	d10a      	bne.n	8008dc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	430a      	orrs	r2, r1
 8008dc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d00a      	beq.n	8008de8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	430a      	orrs	r2, r1
 8008de6:	605a      	str	r2, [r3, #4]
  }
}
 8008de8:	bf00      	nop
 8008dea:	370c      	adds	r7, #12
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b098      	sub	sp, #96	; 0x60
 8008df8:	af02      	add	r7, sp, #8
 8008dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e04:	f7f8 fc68 	bl	80016d8 <HAL_GetTick>
 8008e08:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 0308 	and.w	r3, r3, #8
 8008e14:	2b08      	cmp	r3, #8
 8008e16:	d12f      	bne.n	8008e78 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e1c:	9300      	str	r3, [sp, #0]
 8008e1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e20:	2200      	movs	r2, #0
 8008e22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 f88e 	bl	8008f48 <UART_WaitOnFlagUntilTimeout>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d022      	beq.n	8008e78 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e3a:	e853 3f00 	ldrex	r3, [r3]
 8008e3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e46:	653b      	str	r3, [r7, #80]	; 0x50
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e50:	647b      	str	r3, [r7, #68]	; 0x44
 8008e52:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e58:	e841 2300 	strex	r3, r2, [r1]
 8008e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d1e6      	bne.n	8008e32 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2220      	movs	r2, #32
 8008e68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e74:	2303      	movs	r3, #3
 8008e76:	e063      	b.n	8008f40 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f003 0304 	and.w	r3, r3, #4
 8008e82:	2b04      	cmp	r3, #4
 8008e84:	d149      	bne.n	8008f1a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e86:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e8a:	9300      	str	r3, [sp, #0]
 8008e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 f857 	bl	8008f48 <UART_WaitOnFlagUntilTimeout>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d03c      	beq.n	8008f1a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea8:	e853 3f00 	ldrex	r3, [r3]
 8008eac:	623b      	str	r3, [r7, #32]
   return(result);
 8008eae:	6a3b      	ldr	r3, [r7, #32]
 8008eb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008eb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	461a      	mov	r2, r3
 8008ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ebe:	633b      	str	r3, [r7, #48]	; 0x30
 8008ec0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ec6:	e841 2300 	strex	r3, r2, [r1]
 8008eca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d1e6      	bne.n	8008ea0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	3308      	adds	r3, #8
 8008ed8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	e853 3f00 	ldrex	r3, [r3]
 8008ee0:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f023 0301 	bic.w	r3, r3, #1
 8008ee8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	3308      	adds	r3, #8
 8008ef0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ef2:	61fa      	str	r2, [r7, #28]
 8008ef4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef6:	69b9      	ldr	r1, [r7, #24]
 8008ef8:	69fa      	ldr	r2, [r7, #28]
 8008efa:	e841 2300 	strex	r3, r2, [r1]
 8008efe:	617b      	str	r3, [r7, #20]
   return(result);
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d1e5      	bne.n	8008ed2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2220      	movs	r2, #32
 8008f0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f16:	2303      	movs	r3, #3
 8008f18:	e012      	b.n	8008f40 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2220      	movs	r2, #32
 8008f1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2220      	movs	r2, #32
 8008f26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008f3e:	2300      	movs	r3, #0
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3758      	adds	r7, #88	; 0x58
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b084      	sub	sp, #16
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	603b      	str	r3, [r7, #0]
 8008f54:	4613      	mov	r3, r2
 8008f56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f58:	e049      	b.n	8008fee <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f60:	d045      	beq.n	8008fee <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f62:	f7f8 fbb9 	bl	80016d8 <HAL_GetTick>
 8008f66:	4602      	mov	r2, r0
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	1ad3      	subs	r3, r2, r3
 8008f6c:	69ba      	ldr	r2, [r7, #24]
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d302      	bcc.n	8008f78 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f72:	69bb      	ldr	r3, [r7, #24]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d101      	bne.n	8008f7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008f78:	2303      	movs	r3, #3
 8008f7a:	e048      	b.n	800900e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f003 0304 	and.w	r3, r3, #4
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d031      	beq.n	8008fee <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	69db      	ldr	r3, [r3, #28]
 8008f90:	f003 0308 	and.w	r3, r3, #8
 8008f94:	2b08      	cmp	r3, #8
 8008f96:	d110      	bne.n	8008fba <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	2208      	movs	r2, #8
 8008f9e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008fa0:	68f8      	ldr	r0, [r7, #12]
 8008fa2:	f000 f921 	bl	80091e8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2208      	movs	r2, #8
 8008faa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e029      	b.n	800900e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	69db      	ldr	r3, [r3, #28]
 8008fc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fc8:	d111      	bne.n	8008fee <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008fd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008fd4:	68f8      	ldr	r0, [r7, #12]
 8008fd6:	f000 f907 	bl	80091e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2220      	movs	r2, #32
 8008fde:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008fea:	2303      	movs	r3, #3
 8008fec:	e00f      	b.n	800900e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	69da      	ldr	r2, [r3, #28]
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	68ba      	ldr	r2, [r7, #8]
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	bf0c      	ite	eq
 8008ffe:	2301      	moveq	r3, #1
 8009000:	2300      	movne	r3, #0
 8009002:	b2db      	uxtb	r3, r3
 8009004:	461a      	mov	r2, r3
 8009006:	79fb      	ldrb	r3, [r7, #7]
 8009008:	429a      	cmp	r2, r3
 800900a:	d0a6      	beq.n	8008f5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800900c:	2300      	movs	r3, #0
}
 800900e:	4618      	mov	r0, r3
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
	...

08009018 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b096      	sub	sp, #88	; 0x58
 800901c:	af00      	add	r7, sp, #0
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	4613      	mov	r3, r2
 8009024:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	68ba      	ldr	r2, [r7, #8]
 800902a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	88fa      	ldrh	r2, [r7, #6]
 8009030:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2200      	movs	r2, #0
 8009038:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2222      	movs	r2, #34	; 0x22
 8009040:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800904a:	2b00      	cmp	r3, #0
 800904c:	d02d      	beq.n	80090aa <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009054:	4a40      	ldr	r2, [pc, #256]	; (8009158 <UART_Start_Receive_DMA+0x140>)
 8009056:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800905e:	4a3f      	ldr	r2, [pc, #252]	; (800915c <UART_Start_Receive_DMA+0x144>)
 8009060:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009068:	4a3d      	ldr	r2, [pc, #244]	; (8009160 <UART_Start_Receive_DMA+0x148>)
 800906a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009072:	2200      	movs	r2, #0
 8009074:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	3324      	adds	r3, #36	; 0x24
 8009082:	4619      	mov	r1, r3
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009088:	461a      	mov	r2, r3
 800908a:	88fb      	ldrh	r3, [r7, #6]
 800908c:	f7f8 ffcc 	bl	8002028 <HAL_DMA_Start_IT>
 8009090:	4603      	mov	r3, r0
 8009092:	2b00      	cmp	r3, #0
 8009094:	d009      	beq.n	80090aa <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2210      	movs	r2, #16
 800909a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2220      	movs	r2, #32
 80090a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 80090a6:	2301      	movs	r3, #1
 80090a8:	e051      	b.n	800914e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	691b      	ldr	r3, [r3, #16]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d018      	beq.n	80090e4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ba:	e853 3f00 	ldrex	r3, [r3]
 80090be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80090c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090c6:	657b      	str	r3, [r7, #84]	; 0x54
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	461a      	mov	r2, r3
 80090ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80090d2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80090d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80090d8:	e841 2300 	strex	r3, r2, [r1]
 80090dc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80090de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d1e6      	bne.n	80090b2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	3308      	adds	r3, #8
 80090ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ee:	e853 3f00 	ldrex	r3, [r3]
 80090f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f6:	f043 0301 	orr.w	r3, r3, #1
 80090fa:	653b      	str	r3, [r7, #80]	; 0x50
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	3308      	adds	r3, #8
 8009102:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009104:	637a      	str	r2, [r7, #52]	; 0x34
 8009106:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009108:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800910a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800910c:	e841 2300 	strex	r3, r2, [r1]
 8009110:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009114:	2b00      	cmp	r3, #0
 8009116:	d1e5      	bne.n	80090e4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	3308      	adds	r3, #8
 800911e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	e853 3f00 	ldrex	r3, [r3]
 8009126:	613b      	str	r3, [r7, #16]
   return(result);
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800912e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	3308      	adds	r3, #8
 8009136:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009138:	623a      	str	r2, [r7, #32]
 800913a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800913c:	69f9      	ldr	r1, [r7, #28]
 800913e:	6a3a      	ldr	r2, [r7, #32]
 8009140:	e841 2300 	strex	r3, r2, [r1]
 8009144:	61bb      	str	r3, [r7, #24]
   return(result);
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d1e5      	bne.n	8009118 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800914c:	2300      	movs	r3, #0
}
 800914e:	4618      	mov	r0, r3
 8009150:	3758      	adds	r7, #88	; 0x58
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	080092b5 	.word	0x080092b5
 800915c:	080093dd 	.word	0x080093dd
 8009160:	0800941b 	.word	0x0800941b

08009164 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009164:	b480      	push	{r7}
 8009166:	b08f      	sub	sp, #60	; 0x3c
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009172:	6a3b      	ldr	r3, [r7, #32]
 8009174:	e853 3f00 	ldrex	r3, [r3]
 8009178:	61fb      	str	r3, [r7, #28]
   return(result);
 800917a:	69fb      	ldr	r3, [r7, #28]
 800917c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009180:	637b      	str	r3, [r7, #52]	; 0x34
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	461a      	mov	r2, r3
 8009188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800918a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800918c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009190:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009192:	e841 2300 	strex	r3, r2, [r1]
 8009196:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919a:	2b00      	cmp	r3, #0
 800919c:	d1e6      	bne.n	800916c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	3308      	adds	r3, #8
 80091a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	e853 3f00 	ldrex	r3, [r3]
 80091ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80091b4:	633b      	str	r3, [r7, #48]	; 0x30
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	3308      	adds	r3, #8
 80091bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091be:	61ba      	str	r2, [r7, #24]
 80091c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c2:	6979      	ldr	r1, [r7, #20]
 80091c4:	69ba      	ldr	r2, [r7, #24]
 80091c6:	e841 2300 	strex	r3, r2, [r1]
 80091ca:	613b      	str	r3, [r7, #16]
   return(result);
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d1e5      	bne.n	800919e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2220      	movs	r2, #32
 80091d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80091da:	bf00      	nop
 80091dc:	373c      	adds	r7, #60	; 0x3c
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr
	...

080091e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b095      	sub	sp, #84	; 0x54
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091f8:	e853 3f00 	ldrex	r3, [r3]
 80091fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80091fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009200:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009204:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	461a      	mov	r2, r3
 800920c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800920e:	643b      	str	r3, [r7, #64]	; 0x40
 8009210:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009212:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009214:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009216:	e841 2300 	strex	r3, r2, [r1]
 800921a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800921c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1e6      	bne.n	80091f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	3308      	adds	r3, #8
 8009228:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800922a:	6a3b      	ldr	r3, [r7, #32]
 800922c:	e853 3f00 	ldrex	r3, [r3]
 8009230:	61fb      	str	r3, [r7, #28]
   return(result);
 8009232:	69fa      	ldr	r2, [r7, #28]
 8009234:	4b1e      	ldr	r3, [pc, #120]	; (80092b0 <UART_EndRxTransfer+0xc8>)
 8009236:	4013      	ands	r3, r2
 8009238:	64bb      	str	r3, [r7, #72]	; 0x48
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	3308      	adds	r3, #8
 8009240:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009242:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009244:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009246:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009248:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800924a:	e841 2300 	strex	r3, r2, [r1]
 800924e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009252:	2b00      	cmp	r3, #0
 8009254:	d1e5      	bne.n	8009222 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800925a:	2b01      	cmp	r3, #1
 800925c:	d118      	bne.n	8009290 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	e853 3f00 	ldrex	r3, [r3]
 800926a:	60bb      	str	r3, [r7, #8]
   return(result);
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	f023 0310 	bic.w	r3, r3, #16
 8009272:	647b      	str	r3, [r7, #68]	; 0x44
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	461a      	mov	r2, r3
 800927a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800927c:	61bb      	str	r3, [r7, #24]
 800927e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009280:	6979      	ldr	r1, [r7, #20]
 8009282:	69ba      	ldr	r2, [r7, #24]
 8009284:	e841 2300 	strex	r3, r2, [r1]
 8009288:	613b      	str	r3, [r7, #16]
   return(result);
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d1e6      	bne.n	800925e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2220      	movs	r2, #32
 8009294:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2200      	movs	r2, #0
 80092a2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80092a4:	bf00      	nop
 80092a6:	3754      	adds	r7, #84	; 0x54
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr
 80092b0:	effffffe 	.word	0xeffffffe

080092b4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b09c      	sub	sp, #112	; 0x70
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c0:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	69db      	ldr	r3, [r3, #28]
 80092c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092ca:	d071      	beq.n	80093b0 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80092cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092ce:	2200      	movs	r2, #0
 80092d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092dc:	e853 3f00 	ldrex	r3, [r3]
 80092e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80092e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80092ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	461a      	mov	r2, r3
 80092f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80092f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80092f4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80092f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80092fa:	e841 2300 	strex	r3, r2, [r1]
 80092fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009302:	2b00      	cmp	r3, #0
 8009304:	d1e6      	bne.n	80092d4 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	3308      	adds	r3, #8
 800930c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009310:	e853 3f00 	ldrex	r3, [r3]
 8009314:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009318:	f023 0301 	bic.w	r3, r3, #1
 800931c:	667b      	str	r3, [r7, #100]	; 0x64
 800931e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	3308      	adds	r3, #8
 8009324:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009326:	647a      	str	r2, [r7, #68]	; 0x44
 8009328:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800932c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800932e:	e841 2300 	strex	r3, r2, [r1]
 8009332:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009336:	2b00      	cmp	r3, #0
 8009338:	d1e5      	bne.n	8009306 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800933a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	3308      	adds	r3, #8
 8009340:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009344:	e853 3f00 	ldrex	r3, [r3]
 8009348:	623b      	str	r3, [r7, #32]
   return(result);
 800934a:	6a3b      	ldr	r3, [r7, #32]
 800934c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009350:	663b      	str	r3, [r7, #96]	; 0x60
 8009352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	3308      	adds	r3, #8
 8009358:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800935a:	633a      	str	r2, [r7, #48]	; 0x30
 800935c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800935e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009362:	e841 2300 	strex	r3, r2, [r1]
 8009366:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800936a:	2b00      	cmp	r3, #0
 800936c:	d1e5      	bne.n	800933a <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800936e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009370:	2220      	movs	r2, #32
 8009372:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800937a:	2b01      	cmp	r3, #1
 800937c:	d118      	bne.n	80093b0 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800937e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	e853 3f00 	ldrex	r3, [r3]
 800938a:	60fb      	str	r3, [r7, #12]
   return(result);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f023 0310 	bic.w	r3, r3, #16
 8009392:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	461a      	mov	r2, r3
 800939a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800939c:	61fb      	str	r3, [r7, #28]
 800939e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a0:	69b9      	ldr	r1, [r7, #24]
 80093a2:	69fa      	ldr	r2, [r7, #28]
 80093a4:	e841 2300 	strex	r3, r2, [r1]
 80093a8:	617b      	str	r3, [r7, #20]
   return(result);
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d1e6      	bne.n	800937e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80093b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093b2:	2200      	movs	r2, #0
 80093b4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d107      	bne.n	80093ce <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80093c4:	4619      	mov	r1, r3
 80093c6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80093c8:	f7fe fefe 	bl	80081c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80093cc:	e002      	b.n	80093d4 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80093ce:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80093d0:	f7f7 fcfc 	bl	8000dcc <HAL_UART_RxCpltCallback>
}
 80093d4:	bf00      	nop
 80093d6:	3770      	adds	r7, #112	; 0x70
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093e8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2201      	movs	r2, #1
 80093ee:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d109      	bne.n	800940c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80093fe:	085b      	lsrs	r3, r3, #1
 8009400:	b29b      	uxth	r3, r3
 8009402:	4619      	mov	r1, r3
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f7fe fedf 	bl	80081c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800940a:	e002      	b.n	8009412 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800940c:	68f8      	ldr	r0, [r7, #12]
 800940e:	f7fe fed1 	bl	80081b4 <HAL_UART_RxHalfCpltCallback>
}
 8009412:	bf00      	nop
 8009414:	3710      	adds	r7, #16
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}

0800941a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800941a:	b580      	push	{r7, lr}
 800941c:	b086      	sub	sp, #24
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009426:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800942e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009436:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	689b      	ldr	r3, [r3, #8]
 800943e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009442:	2b80      	cmp	r3, #128	; 0x80
 8009444:	d109      	bne.n	800945a <UART_DMAError+0x40>
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	2b21      	cmp	r3, #33	; 0x21
 800944a:	d106      	bne.n	800945a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	2200      	movs	r2, #0
 8009450:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8009454:	6978      	ldr	r0, [r7, #20]
 8009456:	f7ff fe85 	bl	8009164 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009464:	2b40      	cmp	r3, #64	; 0x40
 8009466:	d109      	bne.n	800947c <UART_DMAError+0x62>
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2b22      	cmp	r3, #34	; 0x22
 800946c:	d106      	bne.n	800947c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	2200      	movs	r2, #0
 8009472:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009476:	6978      	ldr	r0, [r7, #20]
 8009478:	f7ff feb6 	bl	80091e8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009482:	f043 0210 	orr.w	r2, r3, #16
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800948c:	6978      	ldr	r0, [r7, #20]
 800948e:	f7f7 fcf3 	bl	8000e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009492:	bf00      	nop
 8009494:	3718      	adds	r7, #24
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}

0800949a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800949a:	b580      	push	{r7, lr}
 800949c:	b084      	sub	sp, #16
 800949e:	af00      	add	r7, sp, #0
 80094a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2200      	movs	r2, #0
 80094ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2200      	movs	r2, #0
 80094b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094b8:	68f8      	ldr	r0, [r7, #12]
 80094ba:	f7f7 fcdd 	bl	8000e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094be:	bf00      	nop
 80094c0:	3710      	adds	r7, #16
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}

080094c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b088      	sub	sp, #32
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	e853 3f00 	ldrex	r3, [r3]
 80094da:	60bb      	str	r3, [r7, #8]
   return(result);
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094e2:	61fb      	str	r3, [r7, #28]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	461a      	mov	r2, r3
 80094ea:	69fb      	ldr	r3, [r7, #28]
 80094ec:	61bb      	str	r3, [r7, #24]
 80094ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f0:	6979      	ldr	r1, [r7, #20]
 80094f2:	69ba      	ldr	r2, [r7, #24]
 80094f4:	e841 2300 	strex	r3, r2, [r1]
 80094f8:	613b      	str	r3, [r7, #16]
   return(result);
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d1e6      	bne.n	80094ce <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2220      	movs	r2, #32
 8009504:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2200      	movs	r2, #0
 800950c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f7fe fe46 	bl	80081a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009514:	bf00      	nop
 8009516:	3720      	adds	r7, #32
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009524:	bf00      	nop
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009538:	bf00      	nop
 800953a:	370c      	adds	r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800954c:	bf00      	nop
 800954e:	370c      	adds	r7, #12
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr

08009558 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009558:	b480      	push	{r7}
 800955a:	b085      	sub	sp, #20
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009566:	2b01      	cmp	r3, #1
 8009568:	d101      	bne.n	800956e <HAL_UARTEx_DisableFifoMode+0x16>
 800956a:	2302      	movs	r3, #2
 800956c:	e027      	b.n	80095be <HAL_UARTEx_DisableFifoMode+0x66>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2201      	movs	r2, #1
 8009572:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2224      	movs	r2, #36	; 0x24
 800957a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	681a      	ldr	r2, [r3, #0]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f022 0201 	bic.w	r2, r2, #1
 8009594:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800959c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2200      	movs	r2, #0
 80095a2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	68fa      	ldr	r2, [r7, #12]
 80095aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2220      	movs	r2, #32
 80095b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80095bc:	2300      	movs	r3, #0
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3714      	adds	r7, #20
 80095c2:	46bd      	mov	sp, r7
 80095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c8:	4770      	bx	lr

080095ca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095ca:	b580      	push	{r7, lr}
 80095cc:	b084      	sub	sp, #16
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
 80095d2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d101      	bne.n	80095e2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80095de:	2302      	movs	r3, #2
 80095e0:	e02d      	b.n	800963e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2201      	movs	r2, #1
 80095e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2224      	movs	r2, #36	; 0x24
 80095ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	681a      	ldr	r2, [r3, #0]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f022 0201 	bic.w	r2, r2, #1
 8009608:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	683a      	ldr	r2, [r7, #0]
 800961a:	430a      	orrs	r2, r1
 800961c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 f850 	bl	80096c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	68fa      	ldr	r2, [r7, #12]
 800962a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2220      	movs	r2, #32
 8009630:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2200      	movs	r2, #0
 8009638:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800963c:	2300      	movs	r3, #0
}
 800963e:	4618      	mov	r0, r3
 8009640:	3710      	adds	r7, #16
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}

08009646 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009646:	b580      	push	{r7, lr}
 8009648:	b084      	sub	sp, #16
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
 800964e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009656:	2b01      	cmp	r3, #1
 8009658:	d101      	bne.n	800965e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800965a:	2302      	movs	r3, #2
 800965c:	e02d      	b.n	80096ba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2201      	movs	r2, #1
 8009662:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2224      	movs	r2, #36	; 0x24
 800966a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	681a      	ldr	r2, [r3, #0]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f022 0201 	bic.w	r2, r2, #1
 8009684:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	683a      	ldr	r2, [r7, #0]
 8009696:	430a      	orrs	r2, r1
 8009698:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 f812 	bl	80096c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	68fa      	ldr	r2, [r7, #12]
 80096a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2220      	movs	r2, #32
 80096ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80096b8:	2300      	movs	r3, #0
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3710      	adds	r7, #16
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
	...

080096c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b085      	sub	sp, #20
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d108      	bne.n	80096e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2201      	movs	r2, #1
 80096d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2201      	movs	r2, #1
 80096e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80096e4:	e031      	b.n	800974a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80096e6:	2310      	movs	r3, #16
 80096e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80096ea:	2310      	movs	r3, #16
 80096ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	689b      	ldr	r3, [r3, #8]
 80096f4:	0e5b      	lsrs	r3, r3, #25
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	f003 0307 	and.w	r3, r3, #7
 80096fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	0f5b      	lsrs	r3, r3, #29
 8009706:	b2db      	uxtb	r3, r3
 8009708:	f003 0307 	and.w	r3, r3, #7
 800970c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800970e:	7bbb      	ldrb	r3, [r7, #14]
 8009710:	7b3a      	ldrb	r2, [r7, #12]
 8009712:	4911      	ldr	r1, [pc, #68]	; (8009758 <UARTEx_SetNbDataToProcess+0x94>)
 8009714:	5c8a      	ldrb	r2, [r1, r2]
 8009716:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800971a:	7b3a      	ldrb	r2, [r7, #12]
 800971c:	490f      	ldr	r1, [pc, #60]	; (800975c <UARTEx_SetNbDataToProcess+0x98>)
 800971e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009720:	fb93 f3f2 	sdiv	r3, r3, r2
 8009724:	b29a      	uxth	r2, r3
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800972c:	7bfb      	ldrb	r3, [r7, #15]
 800972e:	7b7a      	ldrb	r2, [r7, #13]
 8009730:	4909      	ldr	r1, [pc, #36]	; (8009758 <UARTEx_SetNbDataToProcess+0x94>)
 8009732:	5c8a      	ldrb	r2, [r1, r2]
 8009734:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009738:	7b7a      	ldrb	r2, [r7, #13]
 800973a:	4908      	ldr	r1, [pc, #32]	; (800975c <UARTEx_SetNbDataToProcess+0x98>)
 800973c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800973e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009742:	b29a      	uxth	r2, r3
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800974a:	bf00      	nop
 800974c:	3714      	adds	r7, #20
 800974e:	46bd      	mov	sp, r7
 8009750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009754:	4770      	bx	lr
 8009756:	bf00      	nop
 8009758:	0800c008 	.word	0x0800c008
 800975c:	0800c010 	.word	0x0800c010

08009760 <__cvt>:
 8009760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009762:	ed2d 8b02 	vpush	{d8}
 8009766:	eeb0 8b40 	vmov.f64	d8, d0
 800976a:	b085      	sub	sp, #20
 800976c:	4617      	mov	r7, r2
 800976e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009770:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009772:	ee18 2a90 	vmov	r2, s17
 8009776:	f025 0520 	bic.w	r5, r5, #32
 800977a:	2a00      	cmp	r2, #0
 800977c:	bfb6      	itet	lt
 800977e:	222d      	movlt	r2, #45	; 0x2d
 8009780:	2200      	movge	r2, #0
 8009782:	eeb1 8b40 	vneglt.f64	d8, d0
 8009786:	2d46      	cmp	r5, #70	; 0x46
 8009788:	460c      	mov	r4, r1
 800978a:	701a      	strb	r2, [r3, #0]
 800978c:	d004      	beq.n	8009798 <__cvt+0x38>
 800978e:	2d45      	cmp	r5, #69	; 0x45
 8009790:	d100      	bne.n	8009794 <__cvt+0x34>
 8009792:	3401      	adds	r4, #1
 8009794:	2102      	movs	r1, #2
 8009796:	e000      	b.n	800979a <__cvt+0x3a>
 8009798:	2103      	movs	r1, #3
 800979a:	ab03      	add	r3, sp, #12
 800979c:	9301      	str	r3, [sp, #4]
 800979e:	ab02      	add	r3, sp, #8
 80097a0:	9300      	str	r3, [sp, #0]
 80097a2:	4622      	mov	r2, r4
 80097a4:	4633      	mov	r3, r6
 80097a6:	eeb0 0b48 	vmov.f64	d0, d8
 80097aa:	f000 fe41 	bl	800a430 <_dtoa_r>
 80097ae:	2d47      	cmp	r5, #71	; 0x47
 80097b0:	d101      	bne.n	80097b6 <__cvt+0x56>
 80097b2:	07fb      	lsls	r3, r7, #31
 80097b4:	d51a      	bpl.n	80097ec <__cvt+0x8c>
 80097b6:	2d46      	cmp	r5, #70	; 0x46
 80097b8:	eb00 0204 	add.w	r2, r0, r4
 80097bc:	d10c      	bne.n	80097d8 <__cvt+0x78>
 80097be:	7803      	ldrb	r3, [r0, #0]
 80097c0:	2b30      	cmp	r3, #48	; 0x30
 80097c2:	d107      	bne.n	80097d4 <__cvt+0x74>
 80097c4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80097c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097cc:	bf1c      	itt	ne
 80097ce:	f1c4 0401 	rsbne	r4, r4, #1
 80097d2:	6034      	strne	r4, [r6, #0]
 80097d4:	6833      	ldr	r3, [r6, #0]
 80097d6:	441a      	add	r2, r3
 80097d8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80097dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097e0:	bf08      	it	eq
 80097e2:	9203      	streq	r2, [sp, #12]
 80097e4:	2130      	movs	r1, #48	; 0x30
 80097e6:	9b03      	ldr	r3, [sp, #12]
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d307      	bcc.n	80097fc <__cvt+0x9c>
 80097ec:	9b03      	ldr	r3, [sp, #12]
 80097ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80097f0:	1a1b      	subs	r3, r3, r0
 80097f2:	6013      	str	r3, [r2, #0]
 80097f4:	b005      	add	sp, #20
 80097f6:	ecbd 8b02 	vpop	{d8}
 80097fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097fc:	1c5c      	adds	r4, r3, #1
 80097fe:	9403      	str	r4, [sp, #12]
 8009800:	7019      	strb	r1, [r3, #0]
 8009802:	e7f0      	b.n	80097e6 <__cvt+0x86>

08009804 <__exponent>:
 8009804:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009806:	4603      	mov	r3, r0
 8009808:	2900      	cmp	r1, #0
 800980a:	bfb8      	it	lt
 800980c:	4249      	neglt	r1, r1
 800980e:	f803 2b02 	strb.w	r2, [r3], #2
 8009812:	bfb4      	ite	lt
 8009814:	222d      	movlt	r2, #45	; 0x2d
 8009816:	222b      	movge	r2, #43	; 0x2b
 8009818:	2909      	cmp	r1, #9
 800981a:	7042      	strb	r2, [r0, #1]
 800981c:	dd2a      	ble.n	8009874 <__exponent+0x70>
 800981e:	f10d 0207 	add.w	r2, sp, #7
 8009822:	4617      	mov	r7, r2
 8009824:	260a      	movs	r6, #10
 8009826:	4694      	mov	ip, r2
 8009828:	fb91 f5f6 	sdiv	r5, r1, r6
 800982c:	fb06 1415 	mls	r4, r6, r5, r1
 8009830:	3430      	adds	r4, #48	; 0x30
 8009832:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009836:	460c      	mov	r4, r1
 8009838:	2c63      	cmp	r4, #99	; 0x63
 800983a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800983e:	4629      	mov	r1, r5
 8009840:	dcf1      	bgt.n	8009826 <__exponent+0x22>
 8009842:	3130      	adds	r1, #48	; 0x30
 8009844:	f1ac 0402 	sub.w	r4, ip, #2
 8009848:	f802 1c01 	strb.w	r1, [r2, #-1]
 800984c:	1c41      	adds	r1, r0, #1
 800984e:	4622      	mov	r2, r4
 8009850:	42ba      	cmp	r2, r7
 8009852:	d30a      	bcc.n	800986a <__exponent+0x66>
 8009854:	f10d 0209 	add.w	r2, sp, #9
 8009858:	eba2 020c 	sub.w	r2, r2, ip
 800985c:	42bc      	cmp	r4, r7
 800985e:	bf88      	it	hi
 8009860:	2200      	movhi	r2, #0
 8009862:	4413      	add	r3, r2
 8009864:	1a18      	subs	r0, r3, r0
 8009866:	b003      	add	sp, #12
 8009868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800986a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800986e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009872:	e7ed      	b.n	8009850 <__exponent+0x4c>
 8009874:	2330      	movs	r3, #48	; 0x30
 8009876:	3130      	adds	r1, #48	; 0x30
 8009878:	7083      	strb	r3, [r0, #2]
 800987a:	70c1      	strb	r1, [r0, #3]
 800987c:	1d03      	adds	r3, r0, #4
 800987e:	e7f1      	b.n	8009864 <__exponent+0x60>

08009880 <_printf_float>:
 8009880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009884:	b08b      	sub	sp, #44	; 0x2c
 8009886:	460c      	mov	r4, r1
 8009888:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800988c:	4616      	mov	r6, r2
 800988e:	461f      	mov	r7, r3
 8009890:	4605      	mov	r5, r0
 8009892:	f000 fcbf 	bl	800a214 <_localeconv_r>
 8009896:	f8d0 b000 	ldr.w	fp, [r0]
 800989a:	4658      	mov	r0, fp
 800989c:	f7f6 fd70 	bl	8000380 <strlen>
 80098a0:	2300      	movs	r3, #0
 80098a2:	9308      	str	r3, [sp, #32]
 80098a4:	f8d8 3000 	ldr.w	r3, [r8]
 80098a8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80098ac:	6822      	ldr	r2, [r4, #0]
 80098ae:	3307      	adds	r3, #7
 80098b0:	f023 0307 	bic.w	r3, r3, #7
 80098b4:	f103 0108 	add.w	r1, r3, #8
 80098b8:	f8c8 1000 	str.w	r1, [r8]
 80098bc:	ed93 0b00 	vldr	d0, [r3]
 80098c0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8009b20 <_printf_float+0x2a0>
 80098c4:	eeb0 7bc0 	vabs.f64	d7, d0
 80098c8:	eeb4 7b46 	vcmp.f64	d7, d6
 80098cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098d0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 80098d4:	4682      	mov	sl, r0
 80098d6:	dd24      	ble.n	8009922 <_printf_float+0xa2>
 80098d8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80098dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098e0:	d502      	bpl.n	80098e8 <_printf_float+0x68>
 80098e2:	232d      	movs	r3, #45	; 0x2d
 80098e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098e8:	498f      	ldr	r1, [pc, #572]	; (8009b28 <_printf_float+0x2a8>)
 80098ea:	4b90      	ldr	r3, [pc, #576]	; (8009b2c <_printf_float+0x2ac>)
 80098ec:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80098f0:	bf94      	ite	ls
 80098f2:	4688      	movls	r8, r1
 80098f4:	4698      	movhi	r8, r3
 80098f6:	2303      	movs	r3, #3
 80098f8:	6123      	str	r3, [r4, #16]
 80098fa:	f022 0204 	bic.w	r2, r2, #4
 80098fe:	2300      	movs	r3, #0
 8009900:	6022      	str	r2, [r4, #0]
 8009902:	9304      	str	r3, [sp, #16]
 8009904:	9700      	str	r7, [sp, #0]
 8009906:	4633      	mov	r3, r6
 8009908:	aa09      	add	r2, sp, #36	; 0x24
 800990a:	4621      	mov	r1, r4
 800990c:	4628      	mov	r0, r5
 800990e:	f000 f9d1 	bl	8009cb4 <_printf_common>
 8009912:	3001      	adds	r0, #1
 8009914:	f040 808a 	bne.w	8009a2c <_printf_float+0x1ac>
 8009918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800991c:	b00b      	add	sp, #44	; 0x2c
 800991e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009922:	eeb4 0b40 	vcmp.f64	d0, d0
 8009926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800992a:	d709      	bvc.n	8009940 <_printf_float+0xc0>
 800992c:	ee10 3a90 	vmov	r3, s1
 8009930:	2b00      	cmp	r3, #0
 8009932:	bfbc      	itt	lt
 8009934:	232d      	movlt	r3, #45	; 0x2d
 8009936:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800993a:	497d      	ldr	r1, [pc, #500]	; (8009b30 <_printf_float+0x2b0>)
 800993c:	4b7d      	ldr	r3, [pc, #500]	; (8009b34 <_printf_float+0x2b4>)
 800993e:	e7d5      	b.n	80098ec <_printf_float+0x6c>
 8009940:	6863      	ldr	r3, [r4, #4]
 8009942:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009946:	9104      	str	r1, [sp, #16]
 8009948:	1c59      	adds	r1, r3, #1
 800994a:	d13c      	bne.n	80099c6 <_printf_float+0x146>
 800994c:	2306      	movs	r3, #6
 800994e:	6063      	str	r3, [r4, #4]
 8009950:	2300      	movs	r3, #0
 8009952:	9303      	str	r3, [sp, #12]
 8009954:	ab08      	add	r3, sp, #32
 8009956:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800995a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800995e:	ab07      	add	r3, sp, #28
 8009960:	6861      	ldr	r1, [r4, #4]
 8009962:	9300      	str	r3, [sp, #0]
 8009964:	6022      	str	r2, [r4, #0]
 8009966:	f10d 031b 	add.w	r3, sp, #27
 800996a:	4628      	mov	r0, r5
 800996c:	f7ff fef8 	bl	8009760 <__cvt>
 8009970:	9b04      	ldr	r3, [sp, #16]
 8009972:	9907      	ldr	r1, [sp, #28]
 8009974:	2b47      	cmp	r3, #71	; 0x47
 8009976:	4680      	mov	r8, r0
 8009978:	d108      	bne.n	800998c <_printf_float+0x10c>
 800997a:	1cc8      	adds	r0, r1, #3
 800997c:	db02      	blt.n	8009984 <_printf_float+0x104>
 800997e:	6863      	ldr	r3, [r4, #4]
 8009980:	4299      	cmp	r1, r3
 8009982:	dd41      	ble.n	8009a08 <_printf_float+0x188>
 8009984:	f1a9 0902 	sub.w	r9, r9, #2
 8009988:	fa5f f989 	uxtb.w	r9, r9
 800998c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009990:	d820      	bhi.n	80099d4 <_printf_float+0x154>
 8009992:	3901      	subs	r1, #1
 8009994:	464a      	mov	r2, r9
 8009996:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800999a:	9107      	str	r1, [sp, #28]
 800999c:	f7ff ff32 	bl	8009804 <__exponent>
 80099a0:	9a08      	ldr	r2, [sp, #32]
 80099a2:	9004      	str	r0, [sp, #16]
 80099a4:	1813      	adds	r3, r2, r0
 80099a6:	2a01      	cmp	r2, #1
 80099a8:	6123      	str	r3, [r4, #16]
 80099aa:	dc02      	bgt.n	80099b2 <_printf_float+0x132>
 80099ac:	6822      	ldr	r2, [r4, #0]
 80099ae:	07d2      	lsls	r2, r2, #31
 80099b0:	d501      	bpl.n	80099b6 <_printf_float+0x136>
 80099b2:	3301      	adds	r3, #1
 80099b4:	6123      	str	r3, [r4, #16]
 80099b6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d0a2      	beq.n	8009904 <_printf_float+0x84>
 80099be:	232d      	movs	r3, #45	; 0x2d
 80099c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099c4:	e79e      	b.n	8009904 <_printf_float+0x84>
 80099c6:	9904      	ldr	r1, [sp, #16]
 80099c8:	2947      	cmp	r1, #71	; 0x47
 80099ca:	d1c1      	bne.n	8009950 <_printf_float+0xd0>
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d1bf      	bne.n	8009950 <_printf_float+0xd0>
 80099d0:	2301      	movs	r3, #1
 80099d2:	e7bc      	b.n	800994e <_printf_float+0xce>
 80099d4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80099d8:	d118      	bne.n	8009a0c <_printf_float+0x18c>
 80099da:	2900      	cmp	r1, #0
 80099dc:	6863      	ldr	r3, [r4, #4]
 80099de:	dd0b      	ble.n	80099f8 <_printf_float+0x178>
 80099e0:	6121      	str	r1, [r4, #16]
 80099e2:	b913      	cbnz	r3, 80099ea <_printf_float+0x16a>
 80099e4:	6822      	ldr	r2, [r4, #0]
 80099e6:	07d0      	lsls	r0, r2, #31
 80099e8:	d502      	bpl.n	80099f0 <_printf_float+0x170>
 80099ea:	3301      	adds	r3, #1
 80099ec:	440b      	add	r3, r1
 80099ee:	6123      	str	r3, [r4, #16]
 80099f0:	2300      	movs	r3, #0
 80099f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80099f4:	9304      	str	r3, [sp, #16]
 80099f6:	e7de      	b.n	80099b6 <_printf_float+0x136>
 80099f8:	b913      	cbnz	r3, 8009a00 <_printf_float+0x180>
 80099fa:	6822      	ldr	r2, [r4, #0]
 80099fc:	07d2      	lsls	r2, r2, #31
 80099fe:	d501      	bpl.n	8009a04 <_printf_float+0x184>
 8009a00:	3302      	adds	r3, #2
 8009a02:	e7f4      	b.n	80099ee <_printf_float+0x16e>
 8009a04:	2301      	movs	r3, #1
 8009a06:	e7f2      	b.n	80099ee <_printf_float+0x16e>
 8009a08:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009a0c:	9b08      	ldr	r3, [sp, #32]
 8009a0e:	4299      	cmp	r1, r3
 8009a10:	db05      	blt.n	8009a1e <_printf_float+0x19e>
 8009a12:	6823      	ldr	r3, [r4, #0]
 8009a14:	6121      	str	r1, [r4, #16]
 8009a16:	07d8      	lsls	r0, r3, #31
 8009a18:	d5ea      	bpl.n	80099f0 <_printf_float+0x170>
 8009a1a:	1c4b      	adds	r3, r1, #1
 8009a1c:	e7e7      	b.n	80099ee <_printf_float+0x16e>
 8009a1e:	2900      	cmp	r1, #0
 8009a20:	bfd4      	ite	le
 8009a22:	f1c1 0202 	rsble	r2, r1, #2
 8009a26:	2201      	movgt	r2, #1
 8009a28:	4413      	add	r3, r2
 8009a2a:	e7e0      	b.n	80099ee <_printf_float+0x16e>
 8009a2c:	6823      	ldr	r3, [r4, #0]
 8009a2e:	055a      	lsls	r2, r3, #21
 8009a30:	d407      	bmi.n	8009a42 <_printf_float+0x1c2>
 8009a32:	6923      	ldr	r3, [r4, #16]
 8009a34:	4642      	mov	r2, r8
 8009a36:	4631      	mov	r1, r6
 8009a38:	4628      	mov	r0, r5
 8009a3a:	47b8      	blx	r7
 8009a3c:	3001      	adds	r0, #1
 8009a3e:	d12a      	bne.n	8009a96 <_printf_float+0x216>
 8009a40:	e76a      	b.n	8009918 <_printf_float+0x98>
 8009a42:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009a46:	f240 80e0 	bls.w	8009c0a <_printf_float+0x38a>
 8009a4a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009a4e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a56:	d133      	bne.n	8009ac0 <_printf_float+0x240>
 8009a58:	4a37      	ldr	r2, [pc, #220]	; (8009b38 <_printf_float+0x2b8>)
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	4631      	mov	r1, r6
 8009a5e:	4628      	mov	r0, r5
 8009a60:	47b8      	blx	r7
 8009a62:	3001      	adds	r0, #1
 8009a64:	f43f af58 	beq.w	8009918 <_printf_float+0x98>
 8009a68:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	db02      	blt.n	8009a76 <_printf_float+0x1f6>
 8009a70:	6823      	ldr	r3, [r4, #0]
 8009a72:	07d8      	lsls	r0, r3, #31
 8009a74:	d50f      	bpl.n	8009a96 <_printf_float+0x216>
 8009a76:	4653      	mov	r3, sl
 8009a78:	465a      	mov	r2, fp
 8009a7a:	4631      	mov	r1, r6
 8009a7c:	4628      	mov	r0, r5
 8009a7e:	47b8      	blx	r7
 8009a80:	3001      	adds	r0, #1
 8009a82:	f43f af49 	beq.w	8009918 <_printf_float+0x98>
 8009a86:	f04f 0800 	mov.w	r8, #0
 8009a8a:	f104 091a 	add.w	r9, r4, #26
 8009a8e:	9b08      	ldr	r3, [sp, #32]
 8009a90:	3b01      	subs	r3, #1
 8009a92:	4543      	cmp	r3, r8
 8009a94:	dc09      	bgt.n	8009aaa <_printf_float+0x22a>
 8009a96:	6823      	ldr	r3, [r4, #0]
 8009a98:	079b      	lsls	r3, r3, #30
 8009a9a:	f100 8106 	bmi.w	8009caa <_printf_float+0x42a>
 8009a9e:	68e0      	ldr	r0, [r4, #12]
 8009aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aa2:	4298      	cmp	r0, r3
 8009aa4:	bfb8      	it	lt
 8009aa6:	4618      	movlt	r0, r3
 8009aa8:	e738      	b.n	800991c <_printf_float+0x9c>
 8009aaa:	2301      	movs	r3, #1
 8009aac:	464a      	mov	r2, r9
 8009aae:	4631      	mov	r1, r6
 8009ab0:	4628      	mov	r0, r5
 8009ab2:	47b8      	blx	r7
 8009ab4:	3001      	adds	r0, #1
 8009ab6:	f43f af2f 	beq.w	8009918 <_printf_float+0x98>
 8009aba:	f108 0801 	add.w	r8, r8, #1
 8009abe:	e7e6      	b.n	8009a8e <_printf_float+0x20e>
 8009ac0:	9b07      	ldr	r3, [sp, #28]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	dc3a      	bgt.n	8009b3c <_printf_float+0x2bc>
 8009ac6:	4a1c      	ldr	r2, [pc, #112]	; (8009b38 <_printf_float+0x2b8>)
 8009ac8:	2301      	movs	r3, #1
 8009aca:	4631      	mov	r1, r6
 8009acc:	4628      	mov	r0, r5
 8009ace:	47b8      	blx	r7
 8009ad0:	3001      	adds	r0, #1
 8009ad2:	f43f af21 	beq.w	8009918 <_printf_float+0x98>
 8009ad6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8009ada:	4313      	orrs	r3, r2
 8009adc:	d102      	bne.n	8009ae4 <_printf_float+0x264>
 8009ade:	6823      	ldr	r3, [r4, #0]
 8009ae0:	07d9      	lsls	r1, r3, #31
 8009ae2:	d5d8      	bpl.n	8009a96 <_printf_float+0x216>
 8009ae4:	4653      	mov	r3, sl
 8009ae6:	465a      	mov	r2, fp
 8009ae8:	4631      	mov	r1, r6
 8009aea:	4628      	mov	r0, r5
 8009aec:	47b8      	blx	r7
 8009aee:	3001      	adds	r0, #1
 8009af0:	f43f af12 	beq.w	8009918 <_printf_float+0x98>
 8009af4:	f04f 0900 	mov.w	r9, #0
 8009af8:	f104 0a1a 	add.w	sl, r4, #26
 8009afc:	9b07      	ldr	r3, [sp, #28]
 8009afe:	425b      	negs	r3, r3
 8009b00:	454b      	cmp	r3, r9
 8009b02:	dc01      	bgt.n	8009b08 <_printf_float+0x288>
 8009b04:	9b08      	ldr	r3, [sp, #32]
 8009b06:	e795      	b.n	8009a34 <_printf_float+0x1b4>
 8009b08:	2301      	movs	r3, #1
 8009b0a:	4652      	mov	r2, sl
 8009b0c:	4631      	mov	r1, r6
 8009b0e:	4628      	mov	r0, r5
 8009b10:	47b8      	blx	r7
 8009b12:	3001      	adds	r0, #1
 8009b14:	f43f af00 	beq.w	8009918 <_printf_float+0x98>
 8009b18:	f109 0901 	add.w	r9, r9, #1
 8009b1c:	e7ee      	b.n	8009afc <_printf_float+0x27c>
 8009b1e:	bf00      	nop
 8009b20:	ffffffff 	.word	0xffffffff
 8009b24:	7fefffff 	.word	0x7fefffff
 8009b28:	0800c018 	.word	0x0800c018
 8009b2c:	0800c01c 	.word	0x0800c01c
 8009b30:	0800c020 	.word	0x0800c020
 8009b34:	0800c024 	.word	0x0800c024
 8009b38:	0800c028 	.word	0x0800c028
 8009b3c:	9a08      	ldr	r2, [sp, #32]
 8009b3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009b40:	429a      	cmp	r2, r3
 8009b42:	bfa8      	it	ge
 8009b44:	461a      	movge	r2, r3
 8009b46:	2a00      	cmp	r2, #0
 8009b48:	4691      	mov	r9, r2
 8009b4a:	dc38      	bgt.n	8009bbe <_printf_float+0x33e>
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	9305      	str	r3, [sp, #20]
 8009b50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b54:	f104 021a 	add.w	r2, r4, #26
 8009b58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009b5a:	9905      	ldr	r1, [sp, #20]
 8009b5c:	9304      	str	r3, [sp, #16]
 8009b5e:	eba3 0309 	sub.w	r3, r3, r9
 8009b62:	428b      	cmp	r3, r1
 8009b64:	dc33      	bgt.n	8009bce <_printf_float+0x34e>
 8009b66:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	db3c      	blt.n	8009be8 <_printf_float+0x368>
 8009b6e:	6823      	ldr	r3, [r4, #0]
 8009b70:	07da      	lsls	r2, r3, #31
 8009b72:	d439      	bmi.n	8009be8 <_printf_float+0x368>
 8009b74:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8009b78:	eba2 0903 	sub.w	r9, r2, r3
 8009b7c:	9b04      	ldr	r3, [sp, #16]
 8009b7e:	1ad2      	subs	r2, r2, r3
 8009b80:	4591      	cmp	r9, r2
 8009b82:	bfa8      	it	ge
 8009b84:	4691      	movge	r9, r2
 8009b86:	f1b9 0f00 	cmp.w	r9, #0
 8009b8a:	dc35      	bgt.n	8009bf8 <_printf_float+0x378>
 8009b8c:	f04f 0800 	mov.w	r8, #0
 8009b90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b94:	f104 0a1a 	add.w	sl, r4, #26
 8009b98:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009b9c:	1a9b      	subs	r3, r3, r2
 8009b9e:	eba3 0309 	sub.w	r3, r3, r9
 8009ba2:	4543      	cmp	r3, r8
 8009ba4:	f77f af77 	ble.w	8009a96 <_printf_float+0x216>
 8009ba8:	2301      	movs	r3, #1
 8009baa:	4652      	mov	r2, sl
 8009bac:	4631      	mov	r1, r6
 8009bae:	4628      	mov	r0, r5
 8009bb0:	47b8      	blx	r7
 8009bb2:	3001      	adds	r0, #1
 8009bb4:	f43f aeb0 	beq.w	8009918 <_printf_float+0x98>
 8009bb8:	f108 0801 	add.w	r8, r8, #1
 8009bbc:	e7ec      	b.n	8009b98 <_printf_float+0x318>
 8009bbe:	4613      	mov	r3, r2
 8009bc0:	4631      	mov	r1, r6
 8009bc2:	4642      	mov	r2, r8
 8009bc4:	4628      	mov	r0, r5
 8009bc6:	47b8      	blx	r7
 8009bc8:	3001      	adds	r0, #1
 8009bca:	d1bf      	bne.n	8009b4c <_printf_float+0x2cc>
 8009bcc:	e6a4      	b.n	8009918 <_printf_float+0x98>
 8009bce:	2301      	movs	r3, #1
 8009bd0:	4631      	mov	r1, r6
 8009bd2:	4628      	mov	r0, r5
 8009bd4:	9204      	str	r2, [sp, #16]
 8009bd6:	47b8      	blx	r7
 8009bd8:	3001      	adds	r0, #1
 8009bda:	f43f ae9d 	beq.w	8009918 <_printf_float+0x98>
 8009bde:	9b05      	ldr	r3, [sp, #20]
 8009be0:	9a04      	ldr	r2, [sp, #16]
 8009be2:	3301      	adds	r3, #1
 8009be4:	9305      	str	r3, [sp, #20]
 8009be6:	e7b7      	b.n	8009b58 <_printf_float+0x2d8>
 8009be8:	4653      	mov	r3, sl
 8009bea:	465a      	mov	r2, fp
 8009bec:	4631      	mov	r1, r6
 8009bee:	4628      	mov	r0, r5
 8009bf0:	47b8      	blx	r7
 8009bf2:	3001      	adds	r0, #1
 8009bf4:	d1be      	bne.n	8009b74 <_printf_float+0x2f4>
 8009bf6:	e68f      	b.n	8009918 <_printf_float+0x98>
 8009bf8:	9a04      	ldr	r2, [sp, #16]
 8009bfa:	464b      	mov	r3, r9
 8009bfc:	4442      	add	r2, r8
 8009bfe:	4631      	mov	r1, r6
 8009c00:	4628      	mov	r0, r5
 8009c02:	47b8      	blx	r7
 8009c04:	3001      	adds	r0, #1
 8009c06:	d1c1      	bne.n	8009b8c <_printf_float+0x30c>
 8009c08:	e686      	b.n	8009918 <_printf_float+0x98>
 8009c0a:	9a08      	ldr	r2, [sp, #32]
 8009c0c:	2a01      	cmp	r2, #1
 8009c0e:	dc01      	bgt.n	8009c14 <_printf_float+0x394>
 8009c10:	07db      	lsls	r3, r3, #31
 8009c12:	d537      	bpl.n	8009c84 <_printf_float+0x404>
 8009c14:	2301      	movs	r3, #1
 8009c16:	4642      	mov	r2, r8
 8009c18:	4631      	mov	r1, r6
 8009c1a:	4628      	mov	r0, r5
 8009c1c:	47b8      	blx	r7
 8009c1e:	3001      	adds	r0, #1
 8009c20:	f43f ae7a 	beq.w	8009918 <_printf_float+0x98>
 8009c24:	4653      	mov	r3, sl
 8009c26:	465a      	mov	r2, fp
 8009c28:	4631      	mov	r1, r6
 8009c2a:	4628      	mov	r0, r5
 8009c2c:	47b8      	blx	r7
 8009c2e:	3001      	adds	r0, #1
 8009c30:	f43f ae72 	beq.w	8009918 <_printf_float+0x98>
 8009c34:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009c38:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c40:	9b08      	ldr	r3, [sp, #32]
 8009c42:	d01a      	beq.n	8009c7a <_printf_float+0x3fa>
 8009c44:	3b01      	subs	r3, #1
 8009c46:	f108 0201 	add.w	r2, r8, #1
 8009c4a:	4631      	mov	r1, r6
 8009c4c:	4628      	mov	r0, r5
 8009c4e:	47b8      	blx	r7
 8009c50:	3001      	adds	r0, #1
 8009c52:	d10e      	bne.n	8009c72 <_printf_float+0x3f2>
 8009c54:	e660      	b.n	8009918 <_printf_float+0x98>
 8009c56:	2301      	movs	r3, #1
 8009c58:	464a      	mov	r2, r9
 8009c5a:	4631      	mov	r1, r6
 8009c5c:	4628      	mov	r0, r5
 8009c5e:	47b8      	blx	r7
 8009c60:	3001      	adds	r0, #1
 8009c62:	f43f ae59 	beq.w	8009918 <_printf_float+0x98>
 8009c66:	f108 0801 	add.w	r8, r8, #1
 8009c6a:	9b08      	ldr	r3, [sp, #32]
 8009c6c:	3b01      	subs	r3, #1
 8009c6e:	4543      	cmp	r3, r8
 8009c70:	dcf1      	bgt.n	8009c56 <_printf_float+0x3d6>
 8009c72:	9b04      	ldr	r3, [sp, #16]
 8009c74:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009c78:	e6dd      	b.n	8009a36 <_printf_float+0x1b6>
 8009c7a:	f04f 0800 	mov.w	r8, #0
 8009c7e:	f104 091a 	add.w	r9, r4, #26
 8009c82:	e7f2      	b.n	8009c6a <_printf_float+0x3ea>
 8009c84:	2301      	movs	r3, #1
 8009c86:	4642      	mov	r2, r8
 8009c88:	e7df      	b.n	8009c4a <_printf_float+0x3ca>
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	464a      	mov	r2, r9
 8009c8e:	4631      	mov	r1, r6
 8009c90:	4628      	mov	r0, r5
 8009c92:	47b8      	blx	r7
 8009c94:	3001      	adds	r0, #1
 8009c96:	f43f ae3f 	beq.w	8009918 <_printf_float+0x98>
 8009c9a:	f108 0801 	add.w	r8, r8, #1
 8009c9e:	68e3      	ldr	r3, [r4, #12]
 8009ca0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ca2:	1a5b      	subs	r3, r3, r1
 8009ca4:	4543      	cmp	r3, r8
 8009ca6:	dcf0      	bgt.n	8009c8a <_printf_float+0x40a>
 8009ca8:	e6f9      	b.n	8009a9e <_printf_float+0x21e>
 8009caa:	f04f 0800 	mov.w	r8, #0
 8009cae:	f104 0919 	add.w	r9, r4, #25
 8009cb2:	e7f4      	b.n	8009c9e <_printf_float+0x41e>

08009cb4 <_printf_common>:
 8009cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cb8:	4616      	mov	r6, r2
 8009cba:	4699      	mov	r9, r3
 8009cbc:	688a      	ldr	r2, [r1, #8]
 8009cbe:	690b      	ldr	r3, [r1, #16]
 8009cc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	bfb8      	it	lt
 8009cc8:	4613      	movlt	r3, r2
 8009cca:	6033      	str	r3, [r6, #0]
 8009ccc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009cd0:	4607      	mov	r7, r0
 8009cd2:	460c      	mov	r4, r1
 8009cd4:	b10a      	cbz	r2, 8009cda <_printf_common+0x26>
 8009cd6:	3301      	adds	r3, #1
 8009cd8:	6033      	str	r3, [r6, #0]
 8009cda:	6823      	ldr	r3, [r4, #0]
 8009cdc:	0699      	lsls	r1, r3, #26
 8009cde:	bf42      	ittt	mi
 8009ce0:	6833      	ldrmi	r3, [r6, #0]
 8009ce2:	3302      	addmi	r3, #2
 8009ce4:	6033      	strmi	r3, [r6, #0]
 8009ce6:	6825      	ldr	r5, [r4, #0]
 8009ce8:	f015 0506 	ands.w	r5, r5, #6
 8009cec:	d106      	bne.n	8009cfc <_printf_common+0x48>
 8009cee:	f104 0a19 	add.w	sl, r4, #25
 8009cf2:	68e3      	ldr	r3, [r4, #12]
 8009cf4:	6832      	ldr	r2, [r6, #0]
 8009cf6:	1a9b      	subs	r3, r3, r2
 8009cf8:	42ab      	cmp	r3, r5
 8009cfa:	dc26      	bgt.n	8009d4a <_printf_common+0x96>
 8009cfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009d00:	1e13      	subs	r3, r2, #0
 8009d02:	6822      	ldr	r2, [r4, #0]
 8009d04:	bf18      	it	ne
 8009d06:	2301      	movne	r3, #1
 8009d08:	0692      	lsls	r2, r2, #26
 8009d0a:	d42b      	bmi.n	8009d64 <_printf_common+0xb0>
 8009d0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d10:	4649      	mov	r1, r9
 8009d12:	4638      	mov	r0, r7
 8009d14:	47c0      	blx	r8
 8009d16:	3001      	adds	r0, #1
 8009d18:	d01e      	beq.n	8009d58 <_printf_common+0xa4>
 8009d1a:	6823      	ldr	r3, [r4, #0]
 8009d1c:	6922      	ldr	r2, [r4, #16]
 8009d1e:	f003 0306 	and.w	r3, r3, #6
 8009d22:	2b04      	cmp	r3, #4
 8009d24:	bf02      	ittt	eq
 8009d26:	68e5      	ldreq	r5, [r4, #12]
 8009d28:	6833      	ldreq	r3, [r6, #0]
 8009d2a:	1aed      	subeq	r5, r5, r3
 8009d2c:	68a3      	ldr	r3, [r4, #8]
 8009d2e:	bf0c      	ite	eq
 8009d30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d34:	2500      	movne	r5, #0
 8009d36:	4293      	cmp	r3, r2
 8009d38:	bfc4      	itt	gt
 8009d3a:	1a9b      	subgt	r3, r3, r2
 8009d3c:	18ed      	addgt	r5, r5, r3
 8009d3e:	2600      	movs	r6, #0
 8009d40:	341a      	adds	r4, #26
 8009d42:	42b5      	cmp	r5, r6
 8009d44:	d11a      	bne.n	8009d7c <_printf_common+0xc8>
 8009d46:	2000      	movs	r0, #0
 8009d48:	e008      	b.n	8009d5c <_printf_common+0xa8>
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	4652      	mov	r2, sl
 8009d4e:	4649      	mov	r1, r9
 8009d50:	4638      	mov	r0, r7
 8009d52:	47c0      	blx	r8
 8009d54:	3001      	adds	r0, #1
 8009d56:	d103      	bne.n	8009d60 <_printf_common+0xac>
 8009d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d60:	3501      	adds	r5, #1
 8009d62:	e7c6      	b.n	8009cf2 <_printf_common+0x3e>
 8009d64:	18e1      	adds	r1, r4, r3
 8009d66:	1c5a      	adds	r2, r3, #1
 8009d68:	2030      	movs	r0, #48	; 0x30
 8009d6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d6e:	4422      	add	r2, r4
 8009d70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d78:	3302      	adds	r3, #2
 8009d7a:	e7c7      	b.n	8009d0c <_printf_common+0x58>
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	4622      	mov	r2, r4
 8009d80:	4649      	mov	r1, r9
 8009d82:	4638      	mov	r0, r7
 8009d84:	47c0      	blx	r8
 8009d86:	3001      	adds	r0, #1
 8009d88:	d0e6      	beq.n	8009d58 <_printf_common+0xa4>
 8009d8a:	3601      	adds	r6, #1
 8009d8c:	e7d9      	b.n	8009d42 <_printf_common+0x8e>
	...

08009d90 <_printf_i>:
 8009d90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d94:	7e0f      	ldrb	r7, [r1, #24]
 8009d96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009d98:	2f78      	cmp	r7, #120	; 0x78
 8009d9a:	4691      	mov	r9, r2
 8009d9c:	4680      	mov	r8, r0
 8009d9e:	460c      	mov	r4, r1
 8009da0:	469a      	mov	sl, r3
 8009da2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009da6:	d807      	bhi.n	8009db8 <_printf_i+0x28>
 8009da8:	2f62      	cmp	r7, #98	; 0x62
 8009daa:	d80a      	bhi.n	8009dc2 <_printf_i+0x32>
 8009dac:	2f00      	cmp	r7, #0
 8009dae:	f000 80d4 	beq.w	8009f5a <_printf_i+0x1ca>
 8009db2:	2f58      	cmp	r7, #88	; 0x58
 8009db4:	f000 80c0 	beq.w	8009f38 <_printf_i+0x1a8>
 8009db8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009dbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009dc0:	e03a      	b.n	8009e38 <_printf_i+0xa8>
 8009dc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009dc6:	2b15      	cmp	r3, #21
 8009dc8:	d8f6      	bhi.n	8009db8 <_printf_i+0x28>
 8009dca:	a101      	add	r1, pc, #4	; (adr r1, 8009dd0 <_printf_i+0x40>)
 8009dcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009dd0:	08009e29 	.word	0x08009e29
 8009dd4:	08009e3d 	.word	0x08009e3d
 8009dd8:	08009db9 	.word	0x08009db9
 8009ddc:	08009db9 	.word	0x08009db9
 8009de0:	08009db9 	.word	0x08009db9
 8009de4:	08009db9 	.word	0x08009db9
 8009de8:	08009e3d 	.word	0x08009e3d
 8009dec:	08009db9 	.word	0x08009db9
 8009df0:	08009db9 	.word	0x08009db9
 8009df4:	08009db9 	.word	0x08009db9
 8009df8:	08009db9 	.word	0x08009db9
 8009dfc:	08009f41 	.word	0x08009f41
 8009e00:	08009e69 	.word	0x08009e69
 8009e04:	08009efb 	.word	0x08009efb
 8009e08:	08009db9 	.word	0x08009db9
 8009e0c:	08009db9 	.word	0x08009db9
 8009e10:	08009f63 	.word	0x08009f63
 8009e14:	08009db9 	.word	0x08009db9
 8009e18:	08009e69 	.word	0x08009e69
 8009e1c:	08009db9 	.word	0x08009db9
 8009e20:	08009db9 	.word	0x08009db9
 8009e24:	08009f03 	.word	0x08009f03
 8009e28:	682b      	ldr	r3, [r5, #0]
 8009e2a:	1d1a      	adds	r2, r3, #4
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	602a      	str	r2, [r5, #0]
 8009e30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e38:	2301      	movs	r3, #1
 8009e3a:	e09f      	b.n	8009f7c <_printf_i+0x1ec>
 8009e3c:	6820      	ldr	r0, [r4, #0]
 8009e3e:	682b      	ldr	r3, [r5, #0]
 8009e40:	0607      	lsls	r7, r0, #24
 8009e42:	f103 0104 	add.w	r1, r3, #4
 8009e46:	6029      	str	r1, [r5, #0]
 8009e48:	d501      	bpl.n	8009e4e <_printf_i+0xbe>
 8009e4a:	681e      	ldr	r6, [r3, #0]
 8009e4c:	e003      	b.n	8009e56 <_printf_i+0xc6>
 8009e4e:	0646      	lsls	r6, r0, #25
 8009e50:	d5fb      	bpl.n	8009e4a <_printf_i+0xba>
 8009e52:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009e56:	2e00      	cmp	r6, #0
 8009e58:	da03      	bge.n	8009e62 <_printf_i+0xd2>
 8009e5a:	232d      	movs	r3, #45	; 0x2d
 8009e5c:	4276      	negs	r6, r6
 8009e5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e62:	485a      	ldr	r0, [pc, #360]	; (8009fcc <_printf_i+0x23c>)
 8009e64:	230a      	movs	r3, #10
 8009e66:	e012      	b.n	8009e8e <_printf_i+0xfe>
 8009e68:	682b      	ldr	r3, [r5, #0]
 8009e6a:	6820      	ldr	r0, [r4, #0]
 8009e6c:	1d19      	adds	r1, r3, #4
 8009e6e:	6029      	str	r1, [r5, #0]
 8009e70:	0605      	lsls	r5, r0, #24
 8009e72:	d501      	bpl.n	8009e78 <_printf_i+0xe8>
 8009e74:	681e      	ldr	r6, [r3, #0]
 8009e76:	e002      	b.n	8009e7e <_printf_i+0xee>
 8009e78:	0641      	lsls	r1, r0, #25
 8009e7a:	d5fb      	bpl.n	8009e74 <_printf_i+0xe4>
 8009e7c:	881e      	ldrh	r6, [r3, #0]
 8009e7e:	4853      	ldr	r0, [pc, #332]	; (8009fcc <_printf_i+0x23c>)
 8009e80:	2f6f      	cmp	r7, #111	; 0x6f
 8009e82:	bf0c      	ite	eq
 8009e84:	2308      	moveq	r3, #8
 8009e86:	230a      	movne	r3, #10
 8009e88:	2100      	movs	r1, #0
 8009e8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009e8e:	6865      	ldr	r5, [r4, #4]
 8009e90:	60a5      	str	r5, [r4, #8]
 8009e92:	2d00      	cmp	r5, #0
 8009e94:	bfa2      	ittt	ge
 8009e96:	6821      	ldrge	r1, [r4, #0]
 8009e98:	f021 0104 	bicge.w	r1, r1, #4
 8009e9c:	6021      	strge	r1, [r4, #0]
 8009e9e:	b90e      	cbnz	r6, 8009ea4 <_printf_i+0x114>
 8009ea0:	2d00      	cmp	r5, #0
 8009ea2:	d04b      	beq.n	8009f3c <_printf_i+0x1ac>
 8009ea4:	4615      	mov	r5, r2
 8009ea6:	fbb6 f1f3 	udiv	r1, r6, r3
 8009eaa:	fb03 6711 	mls	r7, r3, r1, r6
 8009eae:	5dc7      	ldrb	r7, [r0, r7]
 8009eb0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009eb4:	4637      	mov	r7, r6
 8009eb6:	42bb      	cmp	r3, r7
 8009eb8:	460e      	mov	r6, r1
 8009eba:	d9f4      	bls.n	8009ea6 <_printf_i+0x116>
 8009ebc:	2b08      	cmp	r3, #8
 8009ebe:	d10b      	bne.n	8009ed8 <_printf_i+0x148>
 8009ec0:	6823      	ldr	r3, [r4, #0]
 8009ec2:	07de      	lsls	r6, r3, #31
 8009ec4:	d508      	bpl.n	8009ed8 <_printf_i+0x148>
 8009ec6:	6923      	ldr	r3, [r4, #16]
 8009ec8:	6861      	ldr	r1, [r4, #4]
 8009eca:	4299      	cmp	r1, r3
 8009ecc:	bfde      	ittt	le
 8009ece:	2330      	movle	r3, #48	; 0x30
 8009ed0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ed4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009ed8:	1b52      	subs	r2, r2, r5
 8009eda:	6122      	str	r2, [r4, #16]
 8009edc:	f8cd a000 	str.w	sl, [sp]
 8009ee0:	464b      	mov	r3, r9
 8009ee2:	aa03      	add	r2, sp, #12
 8009ee4:	4621      	mov	r1, r4
 8009ee6:	4640      	mov	r0, r8
 8009ee8:	f7ff fee4 	bl	8009cb4 <_printf_common>
 8009eec:	3001      	adds	r0, #1
 8009eee:	d14a      	bne.n	8009f86 <_printf_i+0x1f6>
 8009ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ef4:	b004      	add	sp, #16
 8009ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009efa:	6823      	ldr	r3, [r4, #0]
 8009efc:	f043 0320 	orr.w	r3, r3, #32
 8009f00:	6023      	str	r3, [r4, #0]
 8009f02:	4833      	ldr	r0, [pc, #204]	; (8009fd0 <_printf_i+0x240>)
 8009f04:	2778      	movs	r7, #120	; 0x78
 8009f06:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009f0a:	6823      	ldr	r3, [r4, #0]
 8009f0c:	6829      	ldr	r1, [r5, #0]
 8009f0e:	061f      	lsls	r7, r3, #24
 8009f10:	f851 6b04 	ldr.w	r6, [r1], #4
 8009f14:	d402      	bmi.n	8009f1c <_printf_i+0x18c>
 8009f16:	065f      	lsls	r7, r3, #25
 8009f18:	bf48      	it	mi
 8009f1a:	b2b6      	uxthmi	r6, r6
 8009f1c:	07df      	lsls	r7, r3, #31
 8009f1e:	bf48      	it	mi
 8009f20:	f043 0320 	orrmi.w	r3, r3, #32
 8009f24:	6029      	str	r1, [r5, #0]
 8009f26:	bf48      	it	mi
 8009f28:	6023      	strmi	r3, [r4, #0]
 8009f2a:	b91e      	cbnz	r6, 8009f34 <_printf_i+0x1a4>
 8009f2c:	6823      	ldr	r3, [r4, #0]
 8009f2e:	f023 0320 	bic.w	r3, r3, #32
 8009f32:	6023      	str	r3, [r4, #0]
 8009f34:	2310      	movs	r3, #16
 8009f36:	e7a7      	b.n	8009e88 <_printf_i+0xf8>
 8009f38:	4824      	ldr	r0, [pc, #144]	; (8009fcc <_printf_i+0x23c>)
 8009f3a:	e7e4      	b.n	8009f06 <_printf_i+0x176>
 8009f3c:	4615      	mov	r5, r2
 8009f3e:	e7bd      	b.n	8009ebc <_printf_i+0x12c>
 8009f40:	682b      	ldr	r3, [r5, #0]
 8009f42:	6826      	ldr	r6, [r4, #0]
 8009f44:	6961      	ldr	r1, [r4, #20]
 8009f46:	1d18      	adds	r0, r3, #4
 8009f48:	6028      	str	r0, [r5, #0]
 8009f4a:	0635      	lsls	r5, r6, #24
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	d501      	bpl.n	8009f54 <_printf_i+0x1c4>
 8009f50:	6019      	str	r1, [r3, #0]
 8009f52:	e002      	b.n	8009f5a <_printf_i+0x1ca>
 8009f54:	0670      	lsls	r0, r6, #25
 8009f56:	d5fb      	bpl.n	8009f50 <_printf_i+0x1c0>
 8009f58:	8019      	strh	r1, [r3, #0]
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	6123      	str	r3, [r4, #16]
 8009f5e:	4615      	mov	r5, r2
 8009f60:	e7bc      	b.n	8009edc <_printf_i+0x14c>
 8009f62:	682b      	ldr	r3, [r5, #0]
 8009f64:	1d1a      	adds	r2, r3, #4
 8009f66:	602a      	str	r2, [r5, #0]
 8009f68:	681d      	ldr	r5, [r3, #0]
 8009f6a:	6862      	ldr	r2, [r4, #4]
 8009f6c:	2100      	movs	r1, #0
 8009f6e:	4628      	mov	r0, r5
 8009f70:	f7f6 f9b6 	bl	80002e0 <memchr>
 8009f74:	b108      	cbz	r0, 8009f7a <_printf_i+0x1ea>
 8009f76:	1b40      	subs	r0, r0, r5
 8009f78:	6060      	str	r0, [r4, #4]
 8009f7a:	6863      	ldr	r3, [r4, #4]
 8009f7c:	6123      	str	r3, [r4, #16]
 8009f7e:	2300      	movs	r3, #0
 8009f80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f84:	e7aa      	b.n	8009edc <_printf_i+0x14c>
 8009f86:	6923      	ldr	r3, [r4, #16]
 8009f88:	462a      	mov	r2, r5
 8009f8a:	4649      	mov	r1, r9
 8009f8c:	4640      	mov	r0, r8
 8009f8e:	47d0      	blx	sl
 8009f90:	3001      	adds	r0, #1
 8009f92:	d0ad      	beq.n	8009ef0 <_printf_i+0x160>
 8009f94:	6823      	ldr	r3, [r4, #0]
 8009f96:	079b      	lsls	r3, r3, #30
 8009f98:	d413      	bmi.n	8009fc2 <_printf_i+0x232>
 8009f9a:	68e0      	ldr	r0, [r4, #12]
 8009f9c:	9b03      	ldr	r3, [sp, #12]
 8009f9e:	4298      	cmp	r0, r3
 8009fa0:	bfb8      	it	lt
 8009fa2:	4618      	movlt	r0, r3
 8009fa4:	e7a6      	b.n	8009ef4 <_printf_i+0x164>
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	4632      	mov	r2, r6
 8009faa:	4649      	mov	r1, r9
 8009fac:	4640      	mov	r0, r8
 8009fae:	47d0      	blx	sl
 8009fb0:	3001      	adds	r0, #1
 8009fb2:	d09d      	beq.n	8009ef0 <_printf_i+0x160>
 8009fb4:	3501      	adds	r5, #1
 8009fb6:	68e3      	ldr	r3, [r4, #12]
 8009fb8:	9903      	ldr	r1, [sp, #12]
 8009fba:	1a5b      	subs	r3, r3, r1
 8009fbc:	42ab      	cmp	r3, r5
 8009fbe:	dcf2      	bgt.n	8009fa6 <_printf_i+0x216>
 8009fc0:	e7eb      	b.n	8009f9a <_printf_i+0x20a>
 8009fc2:	2500      	movs	r5, #0
 8009fc4:	f104 0619 	add.w	r6, r4, #25
 8009fc8:	e7f5      	b.n	8009fb6 <_printf_i+0x226>
 8009fca:	bf00      	nop
 8009fcc:	0800c02a 	.word	0x0800c02a
 8009fd0:	0800c03b 	.word	0x0800c03b

08009fd4 <std>:
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	b510      	push	{r4, lr}
 8009fd8:	4604      	mov	r4, r0
 8009fda:	e9c0 3300 	strd	r3, r3, [r0]
 8009fde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009fe2:	6083      	str	r3, [r0, #8]
 8009fe4:	8181      	strh	r1, [r0, #12]
 8009fe6:	6643      	str	r3, [r0, #100]	; 0x64
 8009fe8:	81c2      	strh	r2, [r0, #14]
 8009fea:	6183      	str	r3, [r0, #24]
 8009fec:	4619      	mov	r1, r3
 8009fee:	2208      	movs	r2, #8
 8009ff0:	305c      	adds	r0, #92	; 0x5c
 8009ff2:	f000 f906 	bl	800a202 <memset>
 8009ff6:	4b0d      	ldr	r3, [pc, #52]	; (800a02c <std+0x58>)
 8009ff8:	6263      	str	r3, [r4, #36]	; 0x24
 8009ffa:	4b0d      	ldr	r3, [pc, #52]	; (800a030 <std+0x5c>)
 8009ffc:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ffe:	4b0d      	ldr	r3, [pc, #52]	; (800a034 <std+0x60>)
 800a000:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a002:	4b0d      	ldr	r3, [pc, #52]	; (800a038 <std+0x64>)
 800a004:	6323      	str	r3, [r4, #48]	; 0x30
 800a006:	4b0d      	ldr	r3, [pc, #52]	; (800a03c <std+0x68>)
 800a008:	6224      	str	r4, [r4, #32]
 800a00a:	429c      	cmp	r4, r3
 800a00c:	d006      	beq.n	800a01c <std+0x48>
 800a00e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a012:	4294      	cmp	r4, r2
 800a014:	d002      	beq.n	800a01c <std+0x48>
 800a016:	33d0      	adds	r3, #208	; 0xd0
 800a018:	429c      	cmp	r4, r3
 800a01a:	d105      	bne.n	800a028 <std+0x54>
 800a01c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a024:	f000 b96a 	b.w	800a2fc <__retarget_lock_init_recursive>
 800a028:	bd10      	pop	{r4, pc}
 800a02a:	bf00      	nop
 800a02c:	0800a17d 	.word	0x0800a17d
 800a030:	0800a19f 	.word	0x0800a19f
 800a034:	0800a1d7 	.word	0x0800a1d7
 800a038:	0800a1fb 	.word	0x0800a1fb
 800a03c:	240004d4 	.word	0x240004d4

0800a040 <stdio_exit_handler>:
 800a040:	4a02      	ldr	r2, [pc, #8]	; (800a04c <stdio_exit_handler+0xc>)
 800a042:	4903      	ldr	r1, [pc, #12]	; (800a050 <stdio_exit_handler+0x10>)
 800a044:	4803      	ldr	r0, [pc, #12]	; (800a054 <stdio_exit_handler+0x14>)
 800a046:	f000 b869 	b.w	800a11c <_fwalk_sglue>
 800a04a:	bf00      	nop
 800a04c:	24000028 	.word	0x24000028
 800a050:	0800bb95 	.word	0x0800bb95
 800a054:	24000034 	.word	0x24000034

0800a058 <cleanup_stdio>:
 800a058:	6841      	ldr	r1, [r0, #4]
 800a05a:	4b0c      	ldr	r3, [pc, #48]	; (800a08c <cleanup_stdio+0x34>)
 800a05c:	4299      	cmp	r1, r3
 800a05e:	b510      	push	{r4, lr}
 800a060:	4604      	mov	r4, r0
 800a062:	d001      	beq.n	800a068 <cleanup_stdio+0x10>
 800a064:	f001 fd96 	bl	800bb94 <_fflush_r>
 800a068:	68a1      	ldr	r1, [r4, #8]
 800a06a:	4b09      	ldr	r3, [pc, #36]	; (800a090 <cleanup_stdio+0x38>)
 800a06c:	4299      	cmp	r1, r3
 800a06e:	d002      	beq.n	800a076 <cleanup_stdio+0x1e>
 800a070:	4620      	mov	r0, r4
 800a072:	f001 fd8f 	bl	800bb94 <_fflush_r>
 800a076:	68e1      	ldr	r1, [r4, #12]
 800a078:	4b06      	ldr	r3, [pc, #24]	; (800a094 <cleanup_stdio+0x3c>)
 800a07a:	4299      	cmp	r1, r3
 800a07c:	d004      	beq.n	800a088 <cleanup_stdio+0x30>
 800a07e:	4620      	mov	r0, r4
 800a080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a084:	f001 bd86 	b.w	800bb94 <_fflush_r>
 800a088:	bd10      	pop	{r4, pc}
 800a08a:	bf00      	nop
 800a08c:	240004d4 	.word	0x240004d4
 800a090:	2400053c 	.word	0x2400053c
 800a094:	240005a4 	.word	0x240005a4

0800a098 <global_stdio_init.part.0>:
 800a098:	b510      	push	{r4, lr}
 800a09a:	4b0b      	ldr	r3, [pc, #44]	; (800a0c8 <global_stdio_init.part.0+0x30>)
 800a09c:	4c0b      	ldr	r4, [pc, #44]	; (800a0cc <global_stdio_init.part.0+0x34>)
 800a09e:	4a0c      	ldr	r2, [pc, #48]	; (800a0d0 <global_stdio_init.part.0+0x38>)
 800a0a0:	601a      	str	r2, [r3, #0]
 800a0a2:	4620      	mov	r0, r4
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	2104      	movs	r1, #4
 800a0a8:	f7ff ff94 	bl	8009fd4 <std>
 800a0ac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	2109      	movs	r1, #9
 800a0b4:	f7ff ff8e 	bl	8009fd4 <std>
 800a0b8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a0bc:	2202      	movs	r2, #2
 800a0be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0c2:	2112      	movs	r1, #18
 800a0c4:	f7ff bf86 	b.w	8009fd4 <std>
 800a0c8:	2400060c 	.word	0x2400060c
 800a0cc:	240004d4 	.word	0x240004d4
 800a0d0:	0800a041 	.word	0x0800a041

0800a0d4 <__sfp_lock_acquire>:
 800a0d4:	4801      	ldr	r0, [pc, #4]	; (800a0dc <__sfp_lock_acquire+0x8>)
 800a0d6:	f000 b912 	b.w	800a2fe <__retarget_lock_acquire_recursive>
 800a0da:	bf00      	nop
 800a0dc:	24000615 	.word	0x24000615

0800a0e0 <__sfp_lock_release>:
 800a0e0:	4801      	ldr	r0, [pc, #4]	; (800a0e8 <__sfp_lock_release+0x8>)
 800a0e2:	f000 b90d 	b.w	800a300 <__retarget_lock_release_recursive>
 800a0e6:	bf00      	nop
 800a0e8:	24000615 	.word	0x24000615

0800a0ec <__sinit>:
 800a0ec:	b510      	push	{r4, lr}
 800a0ee:	4604      	mov	r4, r0
 800a0f0:	f7ff fff0 	bl	800a0d4 <__sfp_lock_acquire>
 800a0f4:	6a23      	ldr	r3, [r4, #32]
 800a0f6:	b11b      	cbz	r3, 800a100 <__sinit+0x14>
 800a0f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0fc:	f7ff bff0 	b.w	800a0e0 <__sfp_lock_release>
 800a100:	4b04      	ldr	r3, [pc, #16]	; (800a114 <__sinit+0x28>)
 800a102:	6223      	str	r3, [r4, #32]
 800a104:	4b04      	ldr	r3, [pc, #16]	; (800a118 <__sinit+0x2c>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d1f5      	bne.n	800a0f8 <__sinit+0xc>
 800a10c:	f7ff ffc4 	bl	800a098 <global_stdio_init.part.0>
 800a110:	e7f2      	b.n	800a0f8 <__sinit+0xc>
 800a112:	bf00      	nop
 800a114:	0800a059 	.word	0x0800a059
 800a118:	2400060c 	.word	0x2400060c

0800a11c <_fwalk_sglue>:
 800a11c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a120:	4607      	mov	r7, r0
 800a122:	4688      	mov	r8, r1
 800a124:	4614      	mov	r4, r2
 800a126:	2600      	movs	r6, #0
 800a128:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a12c:	f1b9 0901 	subs.w	r9, r9, #1
 800a130:	d505      	bpl.n	800a13e <_fwalk_sglue+0x22>
 800a132:	6824      	ldr	r4, [r4, #0]
 800a134:	2c00      	cmp	r4, #0
 800a136:	d1f7      	bne.n	800a128 <_fwalk_sglue+0xc>
 800a138:	4630      	mov	r0, r6
 800a13a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a13e:	89ab      	ldrh	r3, [r5, #12]
 800a140:	2b01      	cmp	r3, #1
 800a142:	d907      	bls.n	800a154 <_fwalk_sglue+0x38>
 800a144:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a148:	3301      	adds	r3, #1
 800a14a:	d003      	beq.n	800a154 <_fwalk_sglue+0x38>
 800a14c:	4629      	mov	r1, r5
 800a14e:	4638      	mov	r0, r7
 800a150:	47c0      	blx	r8
 800a152:	4306      	orrs	r6, r0
 800a154:	3568      	adds	r5, #104	; 0x68
 800a156:	e7e9      	b.n	800a12c <_fwalk_sglue+0x10>

0800a158 <iprintf>:
 800a158:	b40f      	push	{r0, r1, r2, r3}
 800a15a:	b507      	push	{r0, r1, r2, lr}
 800a15c:	4906      	ldr	r1, [pc, #24]	; (800a178 <iprintf+0x20>)
 800a15e:	ab04      	add	r3, sp, #16
 800a160:	6808      	ldr	r0, [r1, #0]
 800a162:	f853 2b04 	ldr.w	r2, [r3], #4
 800a166:	6881      	ldr	r1, [r0, #8]
 800a168:	9301      	str	r3, [sp, #4]
 800a16a:	f001 fb73 	bl	800b854 <_vfiprintf_r>
 800a16e:	b003      	add	sp, #12
 800a170:	f85d eb04 	ldr.w	lr, [sp], #4
 800a174:	b004      	add	sp, #16
 800a176:	4770      	bx	lr
 800a178:	24000080 	.word	0x24000080

0800a17c <__sread>:
 800a17c:	b510      	push	{r4, lr}
 800a17e:	460c      	mov	r4, r1
 800a180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a184:	f000 f86c 	bl	800a260 <_read_r>
 800a188:	2800      	cmp	r0, #0
 800a18a:	bfab      	itete	ge
 800a18c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a18e:	89a3      	ldrhlt	r3, [r4, #12]
 800a190:	181b      	addge	r3, r3, r0
 800a192:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a196:	bfac      	ite	ge
 800a198:	6563      	strge	r3, [r4, #84]	; 0x54
 800a19a:	81a3      	strhlt	r3, [r4, #12]
 800a19c:	bd10      	pop	{r4, pc}

0800a19e <__swrite>:
 800a19e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1a2:	461f      	mov	r7, r3
 800a1a4:	898b      	ldrh	r3, [r1, #12]
 800a1a6:	05db      	lsls	r3, r3, #23
 800a1a8:	4605      	mov	r5, r0
 800a1aa:	460c      	mov	r4, r1
 800a1ac:	4616      	mov	r6, r2
 800a1ae:	d505      	bpl.n	800a1bc <__swrite+0x1e>
 800a1b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1b4:	2302      	movs	r3, #2
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	f000 f840 	bl	800a23c <_lseek_r>
 800a1bc:	89a3      	ldrh	r3, [r4, #12]
 800a1be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1c6:	81a3      	strh	r3, [r4, #12]
 800a1c8:	4632      	mov	r2, r6
 800a1ca:	463b      	mov	r3, r7
 800a1cc:	4628      	mov	r0, r5
 800a1ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1d2:	f000 b857 	b.w	800a284 <_write_r>

0800a1d6 <__sseek>:
 800a1d6:	b510      	push	{r4, lr}
 800a1d8:	460c      	mov	r4, r1
 800a1da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1de:	f000 f82d 	bl	800a23c <_lseek_r>
 800a1e2:	1c43      	adds	r3, r0, #1
 800a1e4:	89a3      	ldrh	r3, [r4, #12]
 800a1e6:	bf15      	itete	ne
 800a1e8:	6560      	strne	r0, [r4, #84]	; 0x54
 800a1ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a1ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a1f2:	81a3      	strheq	r3, [r4, #12]
 800a1f4:	bf18      	it	ne
 800a1f6:	81a3      	strhne	r3, [r4, #12]
 800a1f8:	bd10      	pop	{r4, pc}

0800a1fa <__sclose>:
 800a1fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1fe:	f000 b80d 	b.w	800a21c <_close_r>

0800a202 <memset>:
 800a202:	4402      	add	r2, r0
 800a204:	4603      	mov	r3, r0
 800a206:	4293      	cmp	r3, r2
 800a208:	d100      	bne.n	800a20c <memset+0xa>
 800a20a:	4770      	bx	lr
 800a20c:	f803 1b01 	strb.w	r1, [r3], #1
 800a210:	e7f9      	b.n	800a206 <memset+0x4>
	...

0800a214 <_localeconv_r>:
 800a214:	4800      	ldr	r0, [pc, #0]	; (800a218 <_localeconv_r+0x4>)
 800a216:	4770      	bx	lr
 800a218:	24000174 	.word	0x24000174

0800a21c <_close_r>:
 800a21c:	b538      	push	{r3, r4, r5, lr}
 800a21e:	4d06      	ldr	r5, [pc, #24]	; (800a238 <_close_r+0x1c>)
 800a220:	2300      	movs	r3, #0
 800a222:	4604      	mov	r4, r0
 800a224:	4608      	mov	r0, r1
 800a226:	602b      	str	r3, [r5, #0]
 800a228:	f7f7 f8b3 	bl	8001392 <_close>
 800a22c:	1c43      	adds	r3, r0, #1
 800a22e:	d102      	bne.n	800a236 <_close_r+0x1a>
 800a230:	682b      	ldr	r3, [r5, #0]
 800a232:	b103      	cbz	r3, 800a236 <_close_r+0x1a>
 800a234:	6023      	str	r3, [r4, #0]
 800a236:	bd38      	pop	{r3, r4, r5, pc}
 800a238:	24000610 	.word	0x24000610

0800a23c <_lseek_r>:
 800a23c:	b538      	push	{r3, r4, r5, lr}
 800a23e:	4d07      	ldr	r5, [pc, #28]	; (800a25c <_lseek_r+0x20>)
 800a240:	4604      	mov	r4, r0
 800a242:	4608      	mov	r0, r1
 800a244:	4611      	mov	r1, r2
 800a246:	2200      	movs	r2, #0
 800a248:	602a      	str	r2, [r5, #0]
 800a24a:	461a      	mov	r2, r3
 800a24c:	f7f7 f8c8 	bl	80013e0 <_lseek>
 800a250:	1c43      	adds	r3, r0, #1
 800a252:	d102      	bne.n	800a25a <_lseek_r+0x1e>
 800a254:	682b      	ldr	r3, [r5, #0]
 800a256:	b103      	cbz	r3, 800a25a <_lseek_r+0x1e>
 800a258:	6023      	str	r3, [r4, #0]
 800a25a:	bd38      	pop	{r3, r4, r5, pc}
 800a25c:	24000610 	.word	0x24000610

0800a260 <_read_r>:
 800a260:	b538      	push	{r3, r4, r5, lr}
 800a262:	4d07      	ldr	r5, [pc, #28]	; (800a280 <_read_r+0x20>)
 800a264:	4604      	mov	r4, r0
 800a266:	4608      	mov	r0, r1
 800a268:	4611      	mov	r1, r2
 800a26a:	2200      	movs	r2, #0
 800a26c:	602a      	str	r2, [r5, #0]
 800a26e:	461a      	mov	r2, r3
 800a270:	f7f7 f856 	bl	8001320 <_read>
 800a274:	1c43      	adds	r3, r0, #1
 800a276:	d102      	bne.n	800a27e <_read_r+0x1e>
 800a278:	682b      	ldr	r3, [r5, #0]
 800a27a:	b103      	cbz	r3, 800a27e <_read_r+0x1e>
 800a27c:	6023      	str	r3, [r4, #0]
 800a27e:	bd38      	pop	{r3, r4, r5, pc}
 800a280:	24000610 	.word	0x24000610

0800a284 <_write_r>:
 800a284:	b538      	push	{r3, r4, r5, lr}
 800a286:	4d07      	ldr	r5, [pc, #28]	; (800a2a4 <_write_r+0x20>)
 800a288:	4604      	mov	r4, r0
 800a28a:	4608      	mov	r0, r1
 800a28c:	4611      	mov	r1, r2
 800a28e:	2200      	movs	r2, #0
 800a290:	602a      	str	r2, [r5, #0]
 800a292:	461a      	mov	r2, r3
 800a294:	f7f7 f861 	bl	800135a <_write>
 800a298:	1c43      	adds	r3, r0, #1
 800a29a:	d102      	bne.n	800a2a2 <_write_r+0x1e>
 800a29c:	682b      	ldr	r3, [r5, #0]
 800a29e:	b103      	cbz	r3, 800a2a2 <_write_r+0x1e>
 800a2a0:	6023      	str	r3, [r4, #0]
 800a2a2:	bd38      	pop	{r3, r4, r5, pc}
 800a2a4:	24000610 	.word	0x24000610

0800a2a8 <__errno>:
 800a2a8:	4b01      	ldr	r3, [pc, #4]	; (800a2b0 <__errno+0x8>)
 800a2aa:	6818      	ldr	r0, [r3, #0]
 800a2ac:	4770      	bx	lr
 800a2ae:	bf00      	nop
 800a2b0:	24000080 	.word	0x24000080

0800a2b4 <__libc_init_array>:
 800a2b4:	b570      	push	{r4, r5, r6, lr}
 800a2b6:	4d0d      	ldr	r5, [pc, #52]	; (800a2ec <__libc_init_array+0x38>)
 800a2b8:	4c0d      	ldr	r4, [pc, #52]	; (800a2f0 <__libc_init_array+0x3c>)
 800a2ba:	1b64      	subs	r4, r4, r5
 800a2bc:	10a4      	asrs	r4, r4, #2
 800a2be:	2600      	movs	r6, #0
 800a2c0:	42a6      	cmp	r6, r4
 800a2c2:	d109      	bne.n	800a2d8 <__libc_init_array+0x24>
 800a2c4:	4d0b      	ldr	r5, [pc, #44]	; (800a2f4 <__libc_init_array+0x40>)
 800a2c6:	4c0c      	ldr	r4, [pc, #48]	; (800a2f8 <__libc_init_array+0x44>)
 800a2c8:	f001 fe68 	bl	800bf9c <_init>
 800a2cc:	1b64      	subs	r4, r4, r5
 800a2ce:	10a4      	asrs	r4, r4, #2
 800a2d0:	2600      	movs	r6, #0
 800a2d2:	42a6      	cmp	r6, r4
 800a2d4:	d105      	bne.n	800a2e2 <__libc_init_array+0x2e>
 800a2d6:	bd70      	pop	{r4, r5, r6, pc}
 800a2d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2dc:	4798      	blx	r3
 800a2de:	3601      	adds	r6, #1
 800a2e0:	e7ee      	b.n	800a2c0 <__libc_init_array+0xc>
 800a2e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2e6:	4798      	blx	r3
 800a2e8:	3601      	adds	r6, #1
 800a2ea:	e7f2      	b.n	800a2d2 <__libc_init_array+0x1e>
 800a2ec:	0800c394 	.word	0x0800c394
 800a2f0:	0800c394 	.word	0x0800c394
 800a2f4:	0800c394 	.word	0x0800c394
 800a2f8:	0800c3a0 	.word	0x0800c3a0

0800a2fc <__retarget_lock_init_recursive>:
 800a2fc:	4770      	bx	lr

0800a2fe <__retarget_lock_acquire_recursive>:
 800a2fe:	4770      	bx	lr

0800a300 <__retarget_lock_release_recursive>:
 800a300:	4770      	bx	lr

0800a302 <memcpy>:
 800a302:	440a      	add	r2, r1
 800a304:	4291      	cmp	r1, r2
 800a306:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a30a:	d100      	bne.n	800a30e <memcpy+0xc>
 800a30c:	4770      	bx	lr
 800a30e:	b510      	push	{r4, lr}
 800a310:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a314:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a318:	4291      	cmp	r1, r2
 800a31a:	d1f9      	bne.n	800a310 <memcpy+0xe>
 800a31c:	bd10      	pop	{r4, pc}

0800a31e <quorem>:
 800a31e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a322:	6903      	ldr	r3, [r0, #16]
 800a324:	690c      	ldr	r4, [r1, #16]
 800a326:	42a3      	cmp	r3, r4
 800a328:	4607      	mov	r7, r0
 800a32a:	db7e      	blt.n	800a42a <quorem+0x10c>
 800a32c:	3c01      	subs	r4, #1
 800a32e:	f101 0814 	add.w	r8, r1, #20
 800a332:	f100 0514 	add.w	r5, r0, #20
 800a336:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a33a:	9301      	str	r3, [sp, #4]
 800a33c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a340:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a344:	3301      	adds	r3, #1
 800a346:	429a      	cmp	r2, r3
 800a348:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a34c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a350:	fbb2 f6f3 	udiv	r6, r2, r3
 800a354:	d331      	bcc.n	800a3ba <quorem+0x9c>
 800a356:	f04f 0e00 	mov.w	lr, #0
 800a35a:	4640      	mov	r0, r8
 800a35c:	46ac      	mov	ip, r5
 800a35e:	46f2      	mov	sl, lr
 800a360:	f850 2b04 	ldr.w	r2, [r0], #4
 800a364:	b293      	uxth	r3, r2
 800a366:	fb06 e303 	mla	r3, r6, r3, lr
 800a36a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a36e:	0c1a      	lsrs	r2, r3, #16
 800a370:	b29b      	uxth	r3, r3
 800a372:	ebaa 0303 	sub.w	r3, sl, r3
 800a376:	f8dc a000 	ldr.w	sl, [ip]
 800a37a:	fa13 f38a 	uxtah	r3, r3, sl
 800a37e:	fb06 220e 	mla	r2, r6, lr, r2
 800a382:	9300      	str	r3, [sp, #0]
 800a384:	9b00      	ldr	r3, [sp, #0]
 800a386:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a38a:	b292      	uxth	r2, r2
 800a38c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a390:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a394:	f8bd 3000 	ldrh.w	r3, [sp]
 800a398:	4581      	cmp	r9, r0
 800a39a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a39e:	f84c 3b04 	str.w	r3, [ip], #4
 800a3a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a3a6:	d2db      	bcs.n	800a360 <quorem+0x42>
 800a3a8:	f855 300b 	ldr.w	r3, [r5, fp]
 800a3ac:	b92b      	cbnz	r3, 800a3ba <quorem+0x9c>
 800a3ae:	9b01      	ldr	r3, [sp, #4]
 800a3b0:	3b04      	subs	r3, #4
 800a3b2:	429d      	cmp	r5, r3
 800a3b4:	461a      	mov	r2, r3
 800a3b6:	d32c      	bcc.n	800a412 <quorem+0xf4>
 800a3b8:	613c      	str	r4, [r7, #16]
 800a3ba:	4638      	mov	r0, r7
 800a3bc:	f001 f920 	bl	800b600 <__mcmp>
 800a3c0:	2800      	cmp	r0, #0
 800a3c2:	db22      	blt.n	800a40a <quorem+0xec>
 800a3c4:	3601      	adds	r6, #1
 800a3c6:	4629      	mov	r1, r5
 800a3c8:	2000      	movs	r0, #0
 800a3ca:	f858 2b04 	ldr.w	r2, [r8], #4
 800a3ce:	f8d1 c000 	ldr.w	ip, [r1]
 800a3d2:	b293      	uxth	r3, r2
 800a3d4:	1ac3      	subs	r3, r0, r3
 800a3d6:	0c12      	lsrs	r2, r2, #16
 800a3d8:	fa13 f38c 	uxtah	r3, r3, ip
 800a3dc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a3e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3ea:	45c1      	cmp	r9, r8
 800a3ec:	f841 3b04 	str.w	r3, [r1], #4
 800a3f0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a3f4:	d2e9      	bcs.n	800a3ca <quorem+0xac>
 800a3f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a3fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a3fe:	b922      	cbnz	r2, 800a40a <quorem+0xec>
 800a400:	3b04      	subs	r3, #4
 800a402:	429d      	cmp	r5, r3
 800a404:	461a      	mov	r2, r3
 800a406:	d30a      	bcc.n	800a41e <quorem+0x100>
 800a408:	613c      	str	r4, [r7, #16]
 800a40a:	4630      	mov	r0, r6
 800a40c:	b003      	add	sp, #12
 800a40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a412:	6812      	ldr	r2, [r2, #0]
 800a414:	3b04      	subs	r3, #4
 800a416:	2a00      	cmp	r2, #0
 800a418:	d1ce      	bne.n	800a3b8 <quorem+0x9a>
 800a41a:	3c01      	subs	r4, #1
 800a41c:	e7c9      	b.n	800a3b2 <quorem+0x94>
 800a41e:	6812      	ldr	r2, [r2, #0]
 800a420:	3b04      	subs	r3, #4
 800a422:	2a00      	cmp	r2, #0
 800a424:	d1f0      	bne.n	800a408 <quorem+0xea>
 800a426:	3c01      	subs	r4, #1
 800a428:	e7eb      	b.n	800a402 <quorem+0xe4>
 800a42a:	2000      	movs	r0, #0
 800a42c:	e7ee      	b.n	800a40c <quorem+0xee>
	...

0800a430 <_dtoa_r>:
 800a430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a434:	ed2d 8b02 	vpush	{d8}
 800a438:	69c5      	ldr	r5, [r0, #28]
 800a43a:	b091      	sub	sp, #68	; 0x44
 800a43c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a440:	ec59 8b10 	vmov	r8, r9, d0
 800a444:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800a446:	9106      	str	r1, [sp, #24]
 800a448:	4606      	mov	r6, r0
 800a44a:	9208      	str	r2, [sp, #32]
 800a44c:	930c      	str	r3, [sp, #48]	; 0x30
 800a44e:	b975      	cbnz	r5, 800a46e <_dtoa_r+0x3e>
 800a450:	2010      	movs	r0, #16
 800a452:	f000 fda5 	bl	800afa0 <malloc>
 800a456:	4602      	mov	r2, r0
 800a458:	61f0      	str	r0, [r6, #28]
 800a45a:	b920      	cbnz	r0, 800a466 <_dtoa_r+0x36>
 800a45c:	4ba6      	ldr	r3, [pc, #664]	; (800a6f8 <_dtoa_r+0x2c8>)
 800a45e:	21ef      	movs	r1, #239	; 0xef
 800a460:	48a6      	ldr	r0, [pc, #664]	; (800a6fc <_dtoa_r+0x2cc>)
 800a462:	f001 fc65 	bl	800bd30 <__assert_func>
 800a466:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a46a:	6005      	str	r5, [r0, #0]
 800a46c:	60c5      	str	r5, [r0, #12]
 800a46e:	69f3      	ldr	r3, [r6, #28]
 800a470:	6819      	ldr	r1, [r3, #0]
 800a472:	b151      	cbz	r1, 800a48a <_dtoa_r+0x5a>
 800a474:	685a      	ldr	r2, [r3, #4]
 800a476:	604a      	str	r2, [r1, #4]
 800a478:	2301      	movs	r3, #1
 800a47a:	4093      	lsls	r3, r2
 800a47c:	608b      	str	r3, [r1, #8]
 800a47e:	4630      	mov	r0, r6
 800a480:	f000 fe82 	bl	800b188 <_Bfree>
 800a484:	69f3      	ldr	r3, [r6, #28]
 800a486:	2200      	movs	r2, #0
 800a488:	601a      	str	r2, [r3, #0]
 800a48a:	f1b9 0300 	subs.w	r3, r9, #0
 800a48e:	bfbb      	ittet	lt
 800a490:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a494:	9303      	strlt	r3, [sp, #12]
 800a496:	2300      	movge	r3, #0
 800a498:	2201      	movlt	r2, #1
 800a49a:	bfac      	ite	ge
 800a49c:	6023      	strge	r3, [r4, #0]
 800a49e:	6022      	strlt	r2, [r4, #0]
 800a4a0:	4b97      	ldr	r3, [pc, #604]	; (800a700 <_dtoa_r+0x2d0>)
 800a4a2:	9c03      	ldr	r4, [sp, #12]
 800a4a4:	43a3      	bics	r3, r4
 800a4a6:	d11c      	bne.n	800a4e2 <_dtoa_r+0xb2>
 800a4a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4aa:	f242 730f 	movw	r3, #9999	; 0x270f
 800a4ae:	6013      	str	r3, [r2, #0]
 800a4b0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a4b4:	ea53 0308 	orrs.w	r3, r3, r8
 800a4b8:	f000 84fb 	beq.w	800aeb2 <_dtoa_r+0xa82>
 800a4bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a4be:	b963      	cbnz	r3, 800a4da <_dtoa_r+0xaa>
 800a4c0:	4b90      	ldr	r3, [pc, #576]	; (800a704 <_dtoa_r+0x2d4>)
 800a4c2:	e020      	b.n	800a506 <_dtoa_r+0xd6>
 800a4c4:	4b90      	ldr	r3, [pc, #576]	; (800a708 <_dtoa_r+0x2d8>)
 800a4c6:	9301      	str	r3, [sp, #4]
 800a4c8:	3308      	adds	r3, #8
 800a4ca:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a4cc:	6013      	str	r3, [r2, #0]
 800a4ce:	9801      	ldr	r0, [sp, #4]
 800a4d0:	b011      	add	sp, #68	; 0x44
 800a4d2:	ecbd 8b02 	vpop	{d8}
 800a4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4da:	4b8a      	ldr	r3, [pc, #552]	; (800a704 <_dtoa_r+0x2d4>)
 800a4dc:	9301      	str	r3, [sp, #4]
 800a4de:	3303      	adds	r3, #3
 800a4e0:	e7f3      	b.n	800a4ca <_dtoa_r+0x9a>
 800a4e2:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a4e6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a4ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4ee:	d10c      	bne.n	800a50a <_dtoa_r+0xda>
 800a4f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	6013      	str	r3, [r2, #0]
 800a4f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	f000 84d7 	beq.w	800aeac <_dtoa_r+0xa7c>
 800a4fe:	4b83      	ldr	r3, [pc, #524]	; (800a70c <_dtoa_r+0x2dc>)
 800a500:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a502:	6013      	str	r3, [r2, #0]
 800a504:	3b01      	subs	r3, #1
 800a506:	9301      	str	r3, [sp, #4]
 800a508:	e7e1      	b.n	800a4ce <_dtoa_r+0x9e>
 800a50a:	aa0e      	add	r2, sp, #56	; 0x38
 800a50c:	a90f      	add	r1, sp, #60	; 0x3c
 800a50e:	4630      	mov	r0, r6
 800a510:	eeb0 0b48 	vmov.f64	d0, d8
 800a514:	f001 f91a 	bl	800b74c <__d2b>
 800a518:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800a51c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a51e:	4605      	mov	r5, r0
 800a520:	2b00      	cmp	r3, #0
 800a522:	d046      	beq.n	800a5b2 <_dtoa_r+0x182>
 800a524:	eeb0 7b48 	vmov.f64	d7, d8
 800a528:	ee18 1a90 	vmov	r1, s17
 800a52c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a530:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800a534:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a538:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a53c:	2000      	movs	r0, #0
 800a53e:	ee07 1a90 	vmov	s15, r1
 800a542:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800a546:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800a6e0 <_dtoa_r+0x2b0>
 800a54a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a54e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800a6e8 <_dtoa_r+0x2b8>
 800a552:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a556:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800a6f0 <_dtoa_r+0x2c0>
 800a55a:	ee07 3a90 	vmov	s15, r3
 800a55e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a562:	eeb0 7b46 	vmov.f64	d7, d6
 800a566:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a56a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a56e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a576:	ee16 ba90 	vmov	fp, s13
 800a57a:	9009      	str	r0, [sp, #36]	; 0x24
 800a57c:	d508      	bpl.n	800a590 <_dtoa_r+0x160>
 800a57e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a582:	eeb4 6b47 	vcmp.f64	d6, d7
 800a586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a58a:	bf18      	it	ne
 800a58c:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 800a590:	f1bb 0f16 	cmp.w	fp, #22
 800a594:	d82b      	bhi.n	800a5ee <_dtoa_r+0x1be>
 800a596:	495e      	ldr	r1, [pc, #376]	; (800a710 <_dtoa_r+0x2e0>)
 800a598:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800a59c:	ed91 7b00 	vldr	d7, [r1]
 800a5a0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a5a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5a8:	d501      	bpl.n	800a5ae <_dtoa_r+0x17e>
 800a5aa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a5ae:	2100      	movs	r1, #0
 800a5b0:	e01e      	b.n	800a5f0 <_dtoa_r+0x1c0>
 800a5b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a5b4:	4413      	add	r3, r2
 800a5b6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800a5ba:	2920      	cmp	r1, #32
 800a5bc:	bfc1      	itttt	gt
 800a5be:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800a5c2:	408c      	lslgt	r4, r1
 800a5c4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800a5c8:	fa28 f101 	lsrgt.w	r1, r8, r1
 800a5cc:	bfd6      	itet	le
 800a5ce:	f1c1 0120 	rsble	r1, r1, #32
 800a5d2:	4321      	orrgt	r1, r4
 800a5d4:	fa08 f101 	lslle.w	r1, r8, r1
 800a5d8:	ee07 1a90 	vmov	s15, r1
 800a5dc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a5e0:	3b01      	subs	r3, #1
 800a5e2:	ee17 1a90 	vmov	r1, s15
 800a5e6:	2001      	movs	r0, #1
 800a5e8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a5ec:	e7a7      	b.n	800a53e <_dtoa_r+0x10e>
 800a5ee:	2101      	movs	r1, #1
 800a5f0:	1ad2      	subs	r2, r2, r3
 800a5f2:	1e53      	subs	r3, r2, #1
 800a5f4:	9305      	str	r3, [sp, #20]
 800a5f6:	bf45      	ittet	mi
 800a5f8:	f1c2 0301 	rsbmi	r3, r2, #1
 800a5fc:	9304      	strmi	r3, [sp, #16]
 800a5fe:	2300      	movpl	r3, #0
 800a600:	2300      	movmi	r3, #0
 800a602:	bf4c      	ite	mi
 800a604:	9305      	strmi	r3, [sp, #20]
 800a606:	9304      	strpl	r3, [sp, #16]
 800a608:	f1bb 0f00 	cmp.w	fp, #0
 800a60c:	910b      	str	r1, [sp, #44]	; 0x2c
 800a60e:	db18      	blt.n	800a642 <_dtoa_r+0x212>
 800a610:	9b05      	ldr	r3, [sp, #20]
 800a612:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800a616:	445b      	add	r3, fp
 800a618:	9305      	str	r3, [sp, #20]
 800a61a:	2300      	movs	r3, #0
 800a61c:	9a06      	ldr	r2, [sp, #24]
 800a61e:	2a09      	cmp	r2, #9
 800a620:	d848      	bhi.n	800a6b4 <_dtoa_r+0x284>
 800a622:	2a05      	cmp	r2, #5
 800a624:	bfc4      	itt	gt
 800a626:	3a04      	subgt	r2, #4
 800a628:	9206      	strgt	r2, [sp, #24]
 800a62a:	9a06      	ldr	r2, [sp, #24]
 800a62c:	f1a2 0202 	sub.w	r2, r2, #2
 800a630:	bfcc      	ite	gt
 800a632:	2400      	movgt	r4, #0
 800a634:	2401      	movle	r4, #1
 800a636:	2a03      	cmp	r2, #3
 800a638:	d847      	bhi.n	800a6ca <_dtoa_r+0x29a>
 800a63a:	e8df f002 	tbb	[pc, r2]
 800a63e:	2d0b      	.short	0x2d0b
 800a640:	392b      	.short	0x392b
 800a642:	9b04      	ldr	r3, [sp, #16]
 800a644:	2200      	movs	r2, #0
 800a646:	eba3 030b 	sub.w	r3, r3, fp
 800a64a:	9304      	str	r3, [sp, #16]
 800a64c:	920a      	str	r2, [sp, #40]	; 0x28
 800a64e:	f1cb 0300 	rsb	r3, fp, #0
 800a652:	e7e3      	b.n	800a61c <_dtoa_r+0x1ec>
 800a654:	2200      	movs	r2, #0
 800a656:	9207      	str	r2, [sp, #28]
 800a658:	9a08      	ldr	r2, [sp, #32]
 800a65a:	2a00      	cmp	r2, #0
 800a65c:	dc38      	bgt.n	800a6d0 <_dtoa_r+0x2a0>
 800a65e:	f04f 0a01 	mov.w	sl, #1
 800a662:	46d1      	mov	r9, sl
 800a664:	4652      	mov	r2, sl
 800a666:	f8cd a020 	str.w	sl, [sp, #32]
 800a66a:	69f7      	ldr	r7, [r6, #28]
 800a66c:	2100      	movs	r1, #0
 800a66e:	2004      	movs	r0, #4
 800a670:	f100 0c14 	add.w	ip, r0, #20
 800a674:	4594      	cmp	ip, r2
 800a676:	d930      	bls.n	800a6da <_dtoa_r+0x2aa>
 800a678:	6079      	str	r1, [r7, #4]
 800a67a:	4630      	mov	r0, r6
 800a67c:	930d      	str	r3, [sp, #52]	; 0x34
 800a67e:	f000 fd43 	bl	800b108 <_Balloc>
 800a682:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a684:	9001      	str	r0, [sp, #4]
 800a686:	4602      	mov	r2, r0
 800a688:	2800      	cmp	r0, #0
 800a68a:	d145      	bne.n	800a718 <_dtoa_r+0x2e8>
 800a68c:	4b21      	ldr	r3, [pc, #132]	; (800a714 <_dtoa_r+0x2e4>)
 800a68e:	f240 11af 	movw	r1, #431	; 0x1af
 800a692:	e6e5      	b.n	800a460 <_dtoa_r+0x30>
 800a694:	2201      	movs	r2, #1
 800a696:	e7de      	b.n	800a656 <_dtoa_r+0x226>
 800a698:	2200      	movs	r2, #0
 800a69a:	9207      	str	r2, [sp, #28]
 800a69c:	9a08      	ldr	r2, [sp, #32]
 800a69e:	eb0b 0a02 	add.w	sl, fp, r2
 800a6a2:	f10a 0901 	add.w	r9, sl, #1
 800a6a6:	464a      	mov	r2, r9
 800a6a8:	2a01      	cmp	r2, #1
 800a6aa:	bfb8      	it	lt
 800a6ac:	2201      	movlt	r2, #1
 800a6ae:	e7dc      	b.n	800a66a <_dtoa_r+0x23a>
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	e7f2      	b.n	800a69a <_dtoa_r+0x26a>
 800a6b4:	2401      	movs	r4, #1
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800a6bc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a6c0:	2100      	movs	r1, #0
 800a6c2:	46d1      	mov	r9, sl
 800a6c4:	2212      	movs	r2, #18
 800a6c6:	9108      	str	r1, [sp, #32]
 800a6c8:	e7cf      	b.n	800a66a <_dtoa_r+0x23a>
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	9207      	str	r2, [sp, #28]
 800a6ce:	e7f5      	b.n	800a6bc <_dtoa_r+0x28c>
 800a6d0:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a6d4:	46d1      	mov	r9, sl
 800a6d6:	4652      	mov	r2, sl
 800a6d8:	e7c7      	b.n	800a66a <_dtoa_r+0x23a>
 800a6da:	3101      	adds	r1, #1
 800a6dc:	0040      	lsls	r0, r0, #1
 800a6de:	e7c7      	b.n	800a670 <_dtoa_r+0x240>
 800a6e0:	636f4361 	.word	0x636f4361
 800a6e4:	3fd287a7 	.word	0x3fd287a7
 800a6e8:	8b60c8b3 	.word	0x8b60c8b3
 800a6ec:	3fc68a28 	.word	0x3fc68a28
 800a6f0:	509f79fb 	.word	0x509f79fb
 800a6f4:	3fd34413 	.word	0x3fd34413
 800a6f8:	0800c059 	.word	0x0800c059
 800a6fc:	0800c070 	.word	0x0800c070
 800a700:	7ff00000 	.word	0x7ff00000
 800a704:	0800c055 	.word	0x0800c055
 800a708:	0800c04c 	.word	0x0800c04c
 800a70c:	0800c029 	.word	0x0800c029
 800a710:	0800c160 	.word	0x0800c160
 800a714:	0800c0c8 	.word	0x0800c0c8
 800a718:	69f2      	ldr	r2, [r6, #28]
 800a71a:	9901      	ldr	r1, [sp, #4]
 800a71c:	6011      	str	r1, [r2, #0]
 800a71e:	f1b9 0f0e 	cmp.w	r9, #14
 800a722:	d86c      	bhi.n	800a7fe <_dtoa_r+0x3ce>
 800a724:	2c00      	cmp	r4, #0
 800a726:	d06a      	beq.n	800a7fe <_dtoa_r+0x3ce>
 800a728:	f1bb 0f00 	cmp.w	fp, #0
 800a72c:	f340 80a0 	ble.w	800a870 <_dtoa_r+0x440>
 800a730:	4ac1      	ldr	r2, [pc, #772]	; (800aa38 <_dtoa_r+0x608>)
 800a732:	f00b 010f 	and.w	r1, fp, #15
 800a736:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a73a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a73e:	ed92 7b00 	vldr	d7, [r2]
 800a742:	ea4f 122b 	mov.w	r2, fp, asr #4
 800a746:	f000 8087 	beq.w	800a858 <_dtoa_r+0x428>
 800a74a:	49bc      	ldr	r1, [pc, #752]	; (800aa3c <_dtoa_r+0x60c>)
 800a74c:	ed91 6b08 	vldr	d6, [r1, #32]
 800a750:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a754:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a758:	f002 020f 	and.w	r2, r2, #15
 800a75c:	2103      	movs	r1, #3
 800a75e:	48b7      	ldr	r0, [pc, #732]	; (800aa3c <_dtoa_r+0x60c>)
 800a760:	2a00      	cmp	r2, #0
 800a762:	d17b      	bne.n	800a85c <_dtoa_r+0x42c>
 800a764:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a768:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a76c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a770:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a772:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a776:	2a00      	cmp	r2, #0
 800a778:	f000 80a0 	beq.w	800a8bc <_dtoa_r+0x48c>
 800a77c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a780:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a788:	f140 8098 	bpl.w	800a8bc <_dtoa_r+0x48c>
 800a78c:	f1b9 0f00 	cmp.w	r9, #0
 800a790:	f000 8094 	beq.w	800a8bc <_dtoa_r+0x48c>
 800a794:	f1ba 0f00 	cmp.w	sl, #0
 800a798:	dd2f      	ble.n	800a7fa <_dtoa_r+0x3ca>
 800a79a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a79e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a7a2:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a7a6:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800a7aa:	3101      	adds	r1, #1
 800a7ac:	4654      	mov	r4, sl
 800a7ae:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a7b2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a7b6:	ee07 1a90 	vmov	s15, r1
 800a7ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a7be:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a7c2:	ee15 7a90 	vmov	r7, s11
 800a7c6:	ec51 0b15 	vmov	r0, r1, d5
 800a7ca:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800a7ce:	2c00      	cmp	r4, #0
 800a7d0:	d177      	bne.n	800a8c2 <_dtoa_r+0x492>
 800a7d2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a7d6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a7da:	ec41 0b17 	vmov	d7, r0, r1
 800a7de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a7e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7e6:	f300 826a 	bgt.w	800acbe <_dtoa_r+0x88e>
 800a7ea:	eeb1 7b47 	vneg.f64	d7, d7
 800a7ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a7f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7f6:	f100 8260 	bmi.w	800acba <_dtoa_r+0x88a>
 800a7fa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a7fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a800:	2a00      	cmp	r2, #0
 800a802:	f2c0 811d 	blt.w	800aa40 <_dtoa_r+0x610>
 800a806:	f1bb 0f0e 	cmp.w	fp, #14
 800a80a:	f300 8119 	bgt.w	800aa40 <_dtoa_r+0x610>
 800a80e:	4b8a      	ldr	r3, [pc, #552]	; (800aa38 <_dtoa_r+0x608>)
 800a810:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a814:	ed93 6b00 	vldr	d6, [r3]
 800a818:	9b08      	ldr	r3, [sp, #32]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	f280 80b7 	bge.w	800a98e <_dtoa_r+0x55e>
 800a820:	f1b9 0f00 	cmp.w	r9, #0
 800a824:	f300 80b3 	bgt.w	800a98e <_dtoa_r+0x55e>
 800a828:	f040 8246 	bne.w	800acb8 <_dtoa_r+0x888>
 800a82c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a830:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a834:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a838:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a83c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a840:	464c      	mov	r4, r9
 800a842:	464f      	mov	r7, r9
 800a844:	f280 821c 	bge.w	800ac80 <_dtoa_r+0x850>
 800a848:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a84c:	2331      	movs	r3, #49	; 0x31
 800a84e:	f808 3b01 	strb.w	r3, [r8], #1
 800a852:	f10b 0b01 	add.w	fp, fp, #1
 800a856:	e218      	b.n	800ac8a <_dtoa_r+0x85a>
 800a858:	2102      	movs	r1, #2
 800a85a:	e780      	b.n	800a75e <_dtoa_r+0x32e>
 800a85c:	07d4      	lsls	r4, r2, #31
 800a85e:	d504      	bpl.n	800a86a <_dtoa_r+0x43a>
 800a860:	ed90 6b00 	vldr	d6, [r0]
 800a864:	3101      	adds	r1, #1
 800a866:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a86a:	1052      	asrs	r2, r2, #1
 800a86c:	3008      	adds	r0, #8
 800a86e:	e777      	b.n	800a760 <_dtoa_r+0x330>
 800a870:	d022      	beq.n	800a8b8 <_dtoa_r+0x488>
 800a872:	f1cb 0200 	rsb	r2, fp, #0
 800a876:	4970      	ldr	r1, [pc, #448]	; (800aa38 <_dtoa_r+0x608>)
 800a878:	f002 000f 	and.w	r0, r2, #15
 800a87c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800a880:	ed91 7b00 	vldr	d7, [r1]
 800a884:	ee28 7b07 	vmul.f64	d7, d8, d7
 800a888:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a88c:	486b      	ldr	r0, [pc, #428]	; (800aa3c <_dtoa_r+0x60c>)
 800a88e:	1112      	asrs	r2, r2, #4
 800a890:	2400      	movs	r4, #0
 800a892:	2102      	movs	r1, #2
 800a894:	b92a      	cbnz	r2, 800a8a2 <_dtoa_r+0x472>
 800a896:	2c00      	cmp	r4, #0
 800a898:	f43f af6a 	beq.w	800a770 <_dtoa_r+0x340>
 800a89c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a8a0:	e766      	b.n	800a770 <_dtoa_r+0x340>
 800a8a2:	07d7      	lsls	r7, r2, #31
 800a8a4:	d505      	bpl.n	800a8b2 <_dtoa_r+0x482>
 800a8a6:	ed90 6b00 	vldr	d6, [r0]
 800a8aa:	3101      	adds	r1, #1
 800a8ac:	2401      	movs	r4, #1
 800a8ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a8b2:	1052      	asrs	r2, r2, #1
 800a8b4:	3008      	adds	r0, #8
 800a8b6:	e7ed      	b.n	800a894 <_dtoa_r+0x464>
 800a8b8:	2102      	movs	r1, #2
 800a8ba:	e759      	b.n	800a770 <_dtoa_r+0x340>
 800a8bc:	465a      	mov	r2, fp
 800a8be:	464c      	mov	r4, r9
 800a8c0:	e775      	b.n	800a7ae <_dtoa_r+0x37e>
 800a8c2:	ec41 0b17 	vmov	d7, r0, r1
 800a8c6:	495c      	ldr	r1, [pc, #368]	; (800aa38 <_dtoa_r+0x608>)
 800a8c8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800a8cc:	ed11 4b02 	vldr	d4, [r1, #-8]
 800a8d0:	9901      	ldr	r1, [sp, #4]
 800a8d2:	440c      	add	r4, r1
 800a8d4:	9907      	ldr	r1, [sp, #28]
 800a8d6:	b351      	cbz	r1, 800a92e <_dtoa_r+0x4fe>
 800a8d8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a8dc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a8e0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a8e4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a8e8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a8ec:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a8f0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a8f4:	ee14 1a90 	vmov	r1, s9
 800a8f8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a8fc:	3130      	adds	r1, #48	; 0x30
 800a8fe:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a902:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a90a:	f808 1b01 	strb.w	r1, [r8], #1
 800a90e:	d439      	bmi.n	800a984 <_dtoa_r+0x554>
 800a910:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a914:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a91c:	d472      	bmi.n	800aa04 <_dtoa_r+0x5d4>
 800a91e:	45a0      	cmp	r8, r4
 800a920:	f43f af6b 	beq.w	800a7fa <_dtoa_r+0x3ca>
 800a924:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a928:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a92c:	e7e0      	b.n	800a8f0 <_dtoa_r+0x4c0>
 800a92e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a932:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a936:	4620      	mov	r0, r4
 800a938:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a93c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a940:	ee14 1a90 	vmov	r1, s9
 800a944:	3130      	adds	r1, #48	; 0x30
 800a946:	f808 1b01 	strb.w	r1, [r8], #1
 800a94a:	45a0      	cmp	r8, r4
 800a94c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a950:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a954:	d118      	bne.n	800a988 <_dtoa_r+0x558>
 800a956:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a95a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a95e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a966:	dc4d      	bgt.n	800aa04 <_dtoa_r+0x5d4>
 800a968:	ee35 5b47 	vsub.f64	d5, d5, d7
 800a96c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800a970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a974:	f57f af41 	bpl.w	800a7fa <_dtoa_r+0x3ca>
 800a978:	4680      	mov	r8, r0
 800a97a:	3801      	subs	r0, #1
 800a97c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800a980:	2b30      	cmp	r3, #48	; 0x30
 800a982:	d0f9      	beq.n	800a978 <_dtoa_r+0x548>
 800a984:	4693      	mov	fp, r2
 800a986:	e02a      	b.n	800a9de <_dtoa_r+0x5ae>
 800a988:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a98c:	e7d6      	b.n	800a93c <_dtoa_r+0x50c>
 800a98e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a992:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a996:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a99a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a99e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a9a2:	ee15 3a10 	vmov	r3, s10
 800a9a6:	3330      	adds	r3, #48	; 0x30
 800a9a8:	f808 3b01 	strb.w	r3, [r8], #1
 800a9ac:	9b01      	ldr	r3, [sp, #4]
 800a9ae:	eba8 0303 	sub.w	r3, r8, r3
 800a9b2:	4599      	cmp	r9, r3
 800a9b4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a9b8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a9bc:	d133      	bne.n	800aa26 <_dtoa_r+0x5f6>
 800a9be:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a9c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a9c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9ca:	dc1a      	bgt.n	800aa02 <_dtoa_r+0x5d2>
 800a9cc:	eeb4 7b46 	vcmp.f64	d7, d6
 800a9d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9d4:	d103      	bne.n	800a9de <_dtoa_r+0x5ae>
 800a9d6:	ee15 3a10 	vmov	r3, s10
 800a9da:	07d9      	lsls	r1, r3, #31
 800a9dc:	d411      	bmi.n	800aa02 <_dtoa_r+0x5d2>
 800a9de:	4629      	mov	r1, r5
 800a9e0:	4630      	mov	r0, r6
 800a9e2:	f000 fbd1 	bl	800b188 <_Bfree>
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a9ea:	f888 3000 	strb.w	r3, [r8]
 800a9ee:	f10b 0301 	add.w	r3, fp, #1
 800a9f2:	6013      	str	r3, [r2, #0]
 800a9f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	f43f ad69 	beq.w	800a4ce <_dtoa_r+0x9e>
 800a9fc:	f8c3 8000 	str.w	r8, [r3]
 800aa00:	e565      	b.n	800a4ce <_dtoa_r+0x9e>
 800aa02:	465a      	mov	r2, fp
 800aa04:	4643      	mov	r3, r8
 800aa06:	4698      	mov	r8, r3
 800aa08:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800aa0c:	2939      	cmp	r1, #57	; 0x39
 800aa0e:	d106      	bne.n	800aa1e <_dtoa_r+0x5ee>
 800aa10:	9901      	ldr	r1, [sp, #4]
 800aa12:	4299      	cmp	r1, r3
 800aa14:	d1f7      	bne.n	800aa06 <_dtoa_r+0x5d6>
 800aa16:	9801      	ldr	r0, [sp, #4]
 800aa18:	2130      	movs	r1, #48	; 0x30
 800aa1a:	3201      	adds	r2, #1
 800aa1c:	7001      	strb	r1, [r0, #0]
 800aa1e:	7819      	ldrb	r1, [r3, #0]
 800aa20:	3101      	adds	r1, #1
 800aa22:	7019      	strb	r1, [r3, #0]
 800aa24:	e7ae      	b.n	800a984 <_dtoa_r+0x554>
 800aa26:	ee27 7b04 	vmul.f64	d7, d7, d4
 800aa2a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aa2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa32:	d1b2      	bne.n	800a99a <_dtoa_r+0x56a>
 800aa34:	e7d3      	b.n	800a9de <_dtoa_r+0x5ae>
 800aa36:	bf00      	nop
 800aa38:	0800c160 	.word	0x0800c160
 800aa3c:	0800c138 	.word	0x0800c138
 800aa40:	9907      	ldr	r1, [sp, #28]
 800aa42:	2900      	cmp	r1, #0
 800aa44:	f000 80d0 	beq.w	800abe8 <_dtoa_r+0x7b8>
 800aa48:	9906      	ldr	r1, [sp, #24]
 800aa4a:	2901      	cmp	r1, #1
 800aa4c:	f300 80b4 	bgt.w	800abb8 <_dtoa_r+0x788>
 800aa50:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa52:	2900      	cmp	r1, #0
 800aa54:	f000 80ac 	beq.w	800abb0 <_dtoa_r+0x780>
 800aa58:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800aa5c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800aa60:	461c      	mov	r4, r3
 800aa62:	9309      	str	r3, [sp, #36]	; 0x24
 800aa64:	9b04      	ldr	r3, [sp, #16]
 800aa66:	4413      	add	r3, r2
 800aa68:	9304      	str	r3, [sp, #16]
 800aa6a:	9b05      	ldr	r3, [sp, #20]
 800aa6c:	2101      	movs	r1, #1
 800aa6e:	4413      	add	r3, r2
 800aa70:	4630      	mov	r0, r6
 800aa72:	9305      	str	r3, [sp, #20]
 800aa74:	f000 fc3e 	bl	800b2f4 <__i2b>
 800aa78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa7a:	4607      	mov	r7, r0
 800aa7c:	f1b8 0f00 	cmp.w	r8, #0
 800aa80:	d00d      	beq.n	800aa9e <_dtoa_r+0x66e>
 800aa82:	9a05      	ldr	r2, [sp, #20]
 800aa84:	2a00      	cmp	r2, #0
 800aa86:	dd0a      	ble.n	800aa9e <_dtoa_r+0x66e>
 800aa88:	4542      	cmp	r2, r8
 800aa8a:	9904      	ldr	r1, [sp, #16]
 800aa8c:	bfa8      	it	ge
 800aa8e:	4642      	movge	r2, r8
 800aa90:	1a89      	subs	r1, r1, r2
 800aa92:	9104      	str	r1, [sp, #16]
 800aa94:	9905      	ldr	r1, [sp, #20]
 800aa96:	eba8 0802 	sub.w	r8, r8, r2
 800aa9a:	1a8a      	subs	r2, r1, r2
 800aa9c:	9205      	str	r2, [sp, #20]
 800aa9e:	b303      	cbz	r3, 800aae2 <_dtoa_r+0x6b2>
 800aaa0:	9a07      	ldr	r2, [sp, #28]
 800aaa2:	2a00      	cmp	r2, #0
 800aaa4:	f000 80a5 	beq.w	800abf2 <_dtoa_r+0x7c2>
 800aaa8:	2c00      	cmp	r4, #0
 800aaaa:	dd13      	ble.n	800aad4 <_dtoa_r+0x6a4>
 800aaac:	4639      	mov	r1, r7
 800aaae:	4622      	mov	r2, r4
 800aab0:	4630      	mov	r0, r6
 800aab2:	930d      	str	r3, [sp, #52]	; 0x34
 800aab4:	f000 fcde 	bl	800b474 <__pow5mult>
 800aab8:	462a      	mov	r2, r5
 800aaba:	4601      	mov	r1, r0
 800aabc:	4607      	mov	r7, r0
 800aabe:	4630      	mov	r0, r6
 800aac0:	f000 fc2e 	bl	800b320 <__multiply>
 800aac4:	4629      	mov	r1, r5
 800aac6:	9009      	str	r0, [sp, #36]	; 0x24
 800aac8:	4630      	mov	r0, r6
 800aaca:	f000 fb5d 	bl	800b188 <_Bfree>
 800aace:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aad0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aad2:	4615      	mov	r5, r2
 800aad4:	1b1a      	subs	r2, r3, r4
 800aad6:	d004      	beq.n	800aae2 <_dtoa_r+0x6b2>
 800aad8:	4629      	mov	r1, r5
 800aada:	4630      	mov	r0, r6
 800aadc:	f000 fcca 	bl	800b474 <__pow5mult>
 800aae0:	4605      	mov	r5, r0
 800aae2:	2101      	movs	r1, #1
 800aae4:	4630      	mov	r0, r6
 800aae6:	f000 fc05 	bl	800b2f4 <__i2b>
 800aaea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	4604      	mov	r4, r0
 800aaf0:	f340 8081 	ble.w	800abf6 <_dtoa_r+0x7c6>
 800aaf4:	461a      	mov	r2, r3
 800aaf6:	4601      	mov	r1, r0
 800aaf8:	4630      	mov	r0, r6
 800aafa:	f000 fcbb 	bl	800b474 <__pow5mult>
 800aafe:	9b06      	ldr	r3, [sp, #24]
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	4604      	mov	r4, r0
 800ab04:	dd7a      	ble.n	800abfc <_dtoa_r+0x7cc>
 800ab06:	2300      	movs	r3, #0
 800ab08:	9309      	str	r3, [sp, #36]	; 0x24
 800ab0a:	6922      	ldr	r2, [r4, #16]
 800ab0c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ab10:	6910      	ldr	r0, [r2, #16]
 800ab12:	f000 fba1 	bl	800b258 <__hi0bits>
 800ab16:	f1c0 0020 	rsb	r0, r0, #32
 800ab1a:	9b05      	ldr	r3, [sp, #20]
 800ab1c:	4418      	add	r0, r3
 800ab1e:	f010 001f 	ands.w	r0, r0, #31
 800ab22:	f000 8093 	beq.w	800ac4c <_dtoa_r+0x81c>
 800ab26:	f1c0 0220 	rsb	r2, r0, #32
 800ab2a:	2a04      	cmp	r2, #4
 800ab2c:	f340 8085 	ble.w	800ac3a <_dtoa_r+0x80a>
 800ab30:	9b04      	ldr	r3, [sp, #16]
 800ab32:	f1c0 001c 	rsb	r0, r0, #28
 800ab36:	4403      	add	r3, r0
 800ab38:	9304      	str	r3, [sp, #16]
 800ab3a:	9b05      	ldr	r3, [sp, #20]
 800ab3c:	4480      	add	r8, r0
 800ab3e:	4403      	add	r3, r0
 800ab40:	9305      	str	r3, [sp, #20]
 800ab42:	9b04      	ldr	r3, [sp, #16]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	dd05      	ble.n	800ab54 <_dtoa_r+0x724>
 800ab48:	4629      	mov	r1, r5
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	4630      	mov	r0, r6
 800ab4e:	f000 fceb 	bl	800b528 <__lshift>
 800ab52:	4605      	mov	r5, r0
 800ab54:	9b05      	ldr	r3, [sp, #20]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	dd05      	ble.n	800ab66 <_dtoa_r+0x736>
 800ab5a:	4621      	mov	r1, r4
 800ab5c:	461a      	mov	r2, r3
 800ab5e:	4630      	mov	r0, r6
 800ab60:	f000 fce2 	bl	800b528 <__lshift>
 800ab64:	4604      	mov	r4, r0
 800ab66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d071      	beq.n	800ac50 <_dtoa_r+0x820>
 800ab6c:	4621      	mov	r1, r4
 800ab6e:	4628      	mov	r0, r5
 800ab70:	f000 fd46 	bl	800b600 <__mcmp>
 800ab74:	2800      	cmp	r0, #0
 800ab76:	da6b      	bge.n	800ac50 <_dtoa_r+0x820>
 800ab78:	2300      	movs	r3, #0
 800ab7a:	4629      	mov	r1, r5
 800ab7c:	220a      	movs	r2, #10
 800ab7e:	4630      	mov	r0, r6
 800ab80:	f000 fb24 	bl	800b1cc <__multadd>
 800ab84:	9b07      	ldr	r3, [sp, #28]
 800ab86:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ab8a:	4605      	mov	r5, r0
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	f000 8197 	beq.w	800aec0 <_dtoa_r+0xa90>
 800ab92:	4639      	mov	r1, r7
 800ab94:	2300      	movs	r3, #0
 800ab96:	220a      	movs	r2, #10
 800ab98:	4630      	mov	r0, r6
 800ab9a:	f000 fb17 	bl	800b1cc <__multadd>
 800ab9e:	f1ba 0f00 	cmp.w	sl, #0
 800aba2:	4607      	mov	r7, r0
 800aba4:	f300 8093 	bgt.w	800acce <_dtoa_r+0x89e>
 800aba8:	9b06      	ldr	r3, [sp, #24]
 800abaa:	2b02      	cmp	r3, #2
 800abac:	dc57      	bgt.n	800ac5e <_dtoa_r+0x82e>
 800abae:	e08e      	b.n	800acce <_dtoa_r+0x89e>
 800abb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800abb2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800abb6:	e751      	b.n	800aa5c <_dtoa_r+0x62c>
 800abb8:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 800abbc:	42a3      	cmp	r3, r4
 800abbe:	bfbf      	itttt	lt
 800abc0:	1ae2      	sublt	r2, r4, r3
 800abc2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800abc4:	189b      	addlt	r3, r3, r2
 800abc6:	930a      	strlt	r3, [sp, #40]	; 0x28
 800abc8:	bfae      	itee	ge
 800abca:	1b1c      	subge	r4, r3, r4
 800abcc:	4623      	movlt	r3, r4
 800abce:	2400      	movlt	r4, #0
 800abd0:	f1b9 0f00 	cmp.w	r9, #0
 800abd4:	bfb5      	itete	lt
 800abd6:	9a04      	ldrlt	r2, [sp, #16]
 800abd8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800abdc:	eba2 0809 	sublt.w	r8, r2, r9
 800abe0:	464a      	movge	r2, r9
 800abe2:	bfb8      	it	lt
 800abe4:	2200      	movlt	r2, #0
 800abe6:	e73c      	b.n	800aa62 <_dtoa_r+0x632>
 800abe8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800abec:	9f07      	ldr	r7, [sp, #28]
 800abee:	461c      	mov	r4, r3
 800abf0:	e744      	b.n	800aa7c <_dtoa_r+0x64c>
 800abf2:	461a      	mov	r2, r3
 800abf4:	e770      	b.n	800aad8 <_dtoa_r+0x6a8>
 800abf6:	9b06      	ldr	r3, [sp, #24]
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	dc18      	bgt.n	800ac2e <_dtoa_r+0x7fe>
 800abfc:	9b02      	ldr	r3, [sp, #8]
 800abfe:	b9b3      	cbnz	r3, 800ac2e <_dtoa_r+0x7fe>
 800ac00:	9b03      	ldr	r3, [sp, #12]
 800ac02:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800ac06:	b9a2      	cbnz	r2, 800ac32 <_dtoa_r+0x802>
 800ac08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ac0c:	0d12      	lsrs	r2, r2, #20
 800ac0e:	0512      	lsls	r2, r2, #20
 800ac10:	b18a      	cbz	r2, 800ac36 <_dtoa_r+0x806>
 800ac12:	9b04      	ldr	r3, [sp, #16]
 800ac14:	3301      	adds	r3, #1
 800ac16:	9304      	str	r3, [sp, #16]
 800ac18:	9b05      	ldr	r3, [sp, #20]
 800ac1a:	3301      	adds	r3, #1
 800ac1c:	9305      	str	r3, [sp, #20]
 800ac1e:	2301      	movs	r3, #1
 800ac20:	9309      	str	r3, [sp, #36]	; 0x24
 800ac22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	f47f af70 	bne.w	800ab0a <_dtoa_r+0x6da>
 800ac2a:	2001      	movs	r0, #1
 800ac2c:	e775      	b.n	800ab1a <_dtoa_r+0x6ea>
 800ac2e:	2300      	movs	r3, #0
 800ac30:	e7f6      	b.n	800ac20 <_dtoa_r+0x7f0>
 800ac32:	9b02      	ldr	r3, [sp, #8]
 800ac34:	e7f4      	b.n	800ac20 <_dtoa_r+0x7f0>
 800ac36:	9209      	str	r2, [sp, #36]	; 0x24
 800ac38:	e7f3      	b.n	800ac22 <_dtoa_r+0x7f2>
 800ac3a:	d082      	beq.n	800ab42 <_dtoa_r+0x712>
 800ac3c:	9b04      	ldr	r3, [sp, #16]
 800ac3e:	321c      	adds	r2, #28
 800ac40:	4413      	add	r3, r2
 800ac42:	9304      	str	r3, [sp, #16]
 800ac44:	9b05      	ldr	r3, [sp, #20]
 800ac46:	4490      	add	r8, r2
 800ac48:	4413      	add	r3, r2
 800ac4a:	e779      	b.n	800ab40 <_dtoa_r+0x710>
 800ac4c:	4602      	mov	r2, r0
 800ac4e:	e7f5      	b.n	800ac3c <_dtoa_r+0x80c>
 800ac50:	f1b9 0f00 	cmp.w	r9, #0
 800ac54:	dc36      	bgt.n	800acc4 <_dtoa_r+0x894>
 800ac56:	9b06      	ldr	r3, [sp, #24]
 800ac58:	2b02      	cmp	r3, #2
 800ac5a:	dd33      	ble.n	800acc4 <_dtoa_r+0x894>
 800ac5c:	46ca      	mov	sl, r9
 800ac5e:	f1ba 0f00 	cmp.w	sl, #0
 800ac62:	d10d      	bne.n	800ac80 <_dtoa_r+0x850>
 800ac64:	4621      	mov	r1, r4
 800ac66:	4653      	mov	r3, sl
 800ac68:	2205      	movs	r2, #5
 800ac6a:	4630      	mov	r0, r6
 800ac6c:	f000 faae 	bl	800b1cc <__multadd>
 800ac70:	4601      	mov	r1, r0
 800ac72:	4604      	mov	r4, r0
 800ac74:	4628      	mov	r0, r5
 800ac76:	f000 fcc3 	bl	800b600 <__mcmp>
 800ac7a:	2800      	cmp	r0, #0
 800ac7c:	f73f ade4 	bgt.w	800a848 <_dtoa_r+0x418>
 800ac80:	9b08      	ldr	r3, [sp, #32]
 800ac82:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ac86:	ea6f 0b03 	mvn.w	fp, r3
 800ac8a:	f04f 0900 	mov.w	r9, #0
 800ac8e:	4621      	mov	r1, r4
 800ac90:	4630      	mov	r0, r6
 800ac92:	f000 fa79 	bl	800b188 <_Bfree>
 800ac96:	2f00      	cmp	r7, #0
 800ac98:	f43f aea1 	beq.w	800a9de <_dtoa_r+0x5ae>
 800ac9c:	f1b9 0f00 	cmp.w	r9, #0
 800aca0:	d005      	beq.n	800acae <_dtoa_r+0x87e>
 800aca2:	45b9      	cmp	r9, r7
 800aca4:	d003      	beq.n	800acae <_dtoa_r+0x87e>
 800aca6:	4649      	mov	r1, r9
 800aca8:	4630      	mov	r0, r6
 800acaa:	f000 fa6d 	bl	800b188 <_Bfree>
 800acae:	4639      	mov	r1, r7
 800acb0:	4630      	mov	r0, r6
 800acb2:	f000 fa69 	bl	800b188 <_Bfree>
 800acb6:	e692      	b.n	800a9de <_dtoa_r+0x5ae>
 800acb8:	2400      	movs	r4, #0
 800acba:	4627      	mov	r7, r4
 800acbc:	e7e0      	b.n	800ac80 <_dtoa_r+0x850>
 800acbe:	4693      	mov	fp, r2
 800acc0:	4627      	mov	r7, r4
 800acc2:	e5c1      	b.n	800a848 <_dtoa_r+0x418>
 800acc4:	9b07      	ldr	r3, [sp, #28]
 800acc6:	46ca      	mov	sl, r9
 800acc8:	2b00      	cmp	r3, #0
 800acca:	f000 8100 	beq.w	800aece <_dtoa_r+0xa9e>
 800acce:	f1b8 0f00 	cmp.w	r8, #0
 800acd2:	dd05      	ble.n	800ace0 <_dtoa_r+0x8b0>
 800acd4:	4639      	mov	r1, r7
 800acd6:	4642      	mov	r2, r8
 800acd8:	4630      	mov	r0, r6
 800acda:	f000 fc25 	bl	800b528 <__lshift>
 800acde:	4607      	mov	r7, r0
 800ace0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d05d      	beq.n	800ada2 <_dtoa_r+0x972>
 800ace6:	6879      	ldr	r1, [r7, #4]
 800ace8:	4630      	mov	r0, r6
 800acea:	f000 fa0d 	bl	800b108 <_Balloc>
 800acee:	4680      	mov	r8, r0
 800acf0:	b928      	cbnz	r0, 800acfe <_dtoa_r+0x8ce>
 800acf2:	4b82      	ldr	r3, [pc, #520]	; (800aefc <_dtoa_r+0xacc>)
 800acf4:	4602      	mov	r2, r0
 800acf6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800acfa:	f7ff bbb1 	b.w	800a460 <_dtoa_r+0x30>
 800acfe:	693a      	ldr	r2, [r7, #16]
 800ad00:	3202      	adds	r2, #2
 800ad02:	0092      	lsls	r2, r2, #2
 800ad04:	f107 010c 	add.w	r1, r7, #12
 800ad08:	300c      	adds	r0, #12
 800ad0a:	f7ff fafa 	bl	800a302 <memcpy>
 800ad0e:	2201      	movs	r2, #1
 800ad10:	4641      	mov	r1, r8
 800ad12:	4630      	mov	r0, r6
 800ad14:	f000 fc08 	bl	800b528 <__lshift>
 800ad18:	9b01      	ldr	r3, [sp, #4]
 800ad1a:	3301      	adds	r3, #1
 800ad1c:	9304      	str	r3, [sp, #16]
 800ad1e:	9b01      	ldr	r3, [sp, #4]
 800ad20:	4453      	add	r3, sl
 800ad22:	9308      	str	r3, [sp, #32]
 800ad24:	9b02      	ldr	r3, [sp, #8]
 800ad26:	f003 0301 	and.w	r3, r3, #1
 800ad2a:	46b9      	mov	r9, r7
 800ad2c:	9307      	str	r3, [sp, #28]
 800ad2e:	4607      	mov	r7, r0
 800ad30:	9b04      	ldr	r3, [sp, #16]
 800ad32:	4621      	mov	r1, r4
 800ad34:	3b01      	subs	r3, #1
 800ad36:	4628      	mov	r0, r5
 800ad38:	9302      	str	r3, [sp, #8]
 800ad3a:	f7ff faf0 	bl	800a31e <quorem>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	3330      	adds	r3, #48	; 0x30
 800ad42:	9005      	str	r0, [sp, #20]
 800ad44:	4649      	mov	r1, r9
 800ad46:	4628      	mov	r0, r5
 800ad48:	9309      	str	r3, [sp, #36]	; 0x24
 800ad4a:	f000 fc59 	bl	800b600 <__mcmp>
 800ad4e:	463a      	mov	r2, r7
 800ad50:	4682      	mov	sl, r0
 800ad52:	4621      	mov	r1, r4
 800ad54:	4630      	mov	r0, r6
 800ad56:	f000 fc6f 	bl	800b638 <__mdiff>
 800ad5a:	68c2      	ldr	r2, [r0, #12]
 800ad5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad5e:	4680      	mov	r8, r0
 800ad60:	bb0a      	cbnz	r2, 800ada6 <_dtoa_r+0x976>
 800ad62:	4601      	mov	r1, r0
 800ad64:	4628      	mov	r0, r5
 800ad66:	f000 fc4b 	bl	800b600 <__mcmp>
 800ad6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad6c:	4602      	mov	r2, r0
 800ad6e:	4641      	mov	r1, r8
 800ad70:	4630      	mov	r0, r6
 800ad72:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800ad76:	f000 fa07 	bl	800b188 <_Bfree>
 800ad7a:	9b06      	ldr	r3, [sp, #24]
 800ad7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad7e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ad82:	ea43 0102 	orr.w	r1, r3, r2
 800ad86:	9b07      	ldr	r3, [sp, #28]
 800ad88:	4319      	orrs	r1, r3
 800ad8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad8c:	d10d      	bne.n	800adaa <_dtoa_r+0x97a>
 800ad8e:	2b39      	cmp	r3, #57	; 0x39
 800ad90:	d029      	beq.n	800ade6 <_dtoa_r+0x9b6>
 800ad92:	f1ba 0f00 	cmp.w	sl, #0
 800ad96:	dd01      	ble.n	800ad9c <_dtoa_r+0x96c>
 800ad98:	9b05      	ldr	r3, [sp, #20]
 800ad9a:	3331      	adds	r3, #49	; 0x31
 800ad9c:	9a02      	ldr	r2, [sp, #8]
 800ad9e:	7013      	strb	r3, [r2, #0]
 800ada0:	e775      	b.n	800ac8e <_dtoa_r+0x85e>
 800ada2:	4638      	mov	r0, r7
 800ada4:	e7b8      	b.n	800ad18 <_dtoa_r+0x8e8>
 800ada6:	2201      	movs	r2, #1
 800ada8:	e7e1      	b.n	800ad6e <_dtoa_r+0x93e>
 800adaa:	f1ba 0f00 	cmp.w	sl, #0
 800adae:	db06      	blt.n	800adbe <_dtoa_r+0x98e>
 800adb0:	9906      	ldr	r1, [sp, #24]
 800adb2:	ea41 0a0a 	orr.w	sl, r1, sl
 800adb6:	9907      	ldr	r1, [sp, #28]
 800adb8:	ea5a 0a01 	orrs.w	sl, sl, r1
 800adbc:	d120      	bne.n	800ae00 <_dtoa_r+0x9d0>
 800adbe:	2a00      	cmp	r2, #0
 800adc0:	ddec      	ble.n	800ad9c <_dtoa_r+0x96c>
 800adc2:	4629      	mov	r1, r5
 800adc4:	2201      	movs	r2, #1
 800adc6:	4630      	mov	r0, r6
 800adc8:	9304      	str	r3, [sp, #16]
 800adca:	f000 fbad 	bl	800b528 <__lshift>
 800adce:	4621      	mov	r1, r4
 800add0:	4605      	mov	r5, r0
 800add2:	f000 fc15 	bl	800b600 <__mcmp>
 800add6:	2800      	cmp	r0, #0
 800add8:	9b04      	ldr	r3, [sp, #16]
 800adda:	dc02      	bgt.n	800ade2 <_dtoa_r+0x9b2>
 800addc:	d1de      	bne.n	800ad9c <_dtoa_r+0x96c>
 800adde:	07da      	lsls	r2, r3, #31
 800ade0:	d5dc      	bpl.n	800ad9c <_dtoa_r+0x96c>
 800ade2:	2b39      	cmp	r3, #57	; 0x39
 800ade4:	d1d8      	bne.n	800ad98 <_dtoa_r+0x968>
 800ade6:	9a02      	ldr	r2, [sp, #8]
 800ade8:	2339      	movs	r3, #57	; 0x39
 800adea:	7013      	strb	r3, [r2, #0]
 800adec:	4643      	mov	r3, r8
 800adee:	4698      	mov	r8, r3
 800adf0:	3b01      	subs	r3, #1
 800adf2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800adf6:	2a39      	cmp	r2, #57	; 0x39
 800adf8:	d051      	beq.n	800ae9e <_dtoa_r+0xa6e>
 800adfa:	3201      	adds	r2, #1
 800adfc:	701a      	strb	r2, [r3, #0]
 800adfe:	e746      	b.n	800ac8e <_dtoa_r+0x85e>
 800ae00:	2a00      	cmp	r2, #0
 800ae02:	dd03      	ble.n	800ae0c <_dtoa_r+0x9dc>
 800ae04:	2b39      	cmp	r3, #57	; 0x39
 800ae06:	d0ee      	beq.n	800ade6 <_dtoa_r+0x9b6>
 800ae08:	3301      	adds	r3, #1
 800ae0a:	e7c7      	b.n	800ad9c <_dtoa_r+0x96c>
 800ae0c:	9a04      	ldr	r2, [sp, #16]
 800ae0e:	9908      	ldr	r1, [sp, #32]
 800ae10:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ae14:	428a      	cmp	r2, r1
 800ae16:	d02b      	beq.n	800ae70 <_dtoa_r+0xa40>
 800ae18:	4629      	mov	r1, r5
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	220a      	movs	r2, #10
 800ae1e:	4630      	mov	r0, r6
 800ae20:	f000 f9d4 	bl	800b1cc <__multadd>
 800ae24:	45b9      	cmp	r9, r7
 800ae26:	4605      	mov	r5, r0
 800ae28:	f04f 0300 	mov.w	r3, #0
 800ae2c:	f04f 020a 	mov.w	r2, #10
 800ae30:	4649      	mov	r1, r9
 800ae32:	4630      	mov	r0, r6
 800ae34:	d107      	bne.n	800ae46 <_dtoa_r+0xa16>
 800ae36:	f000 f9c9 	bl	800b1cc <__multadd>
 800ae3a:	4681      	mov	r9, r0
 800ae3c:	4607      	mov	r7, r0
 800ae3e:	9b04      	ldr	r3, [sp, #16]
 800ae40:	3301      	adds	r3, #1
 800ae42:	9304      	str	r3, [sp, #16]
 800ae44:	e774      	b.n	800ad30 <_dtoa_r+0x900>
 800ae46:	f000 f9c1 	bl	800b1cc <__multadd>
 800ae4a:	4639      	mov	r1, r7
 800ae4c:	4681      	mov	r9, r0
 800ae4e:	2300      	movs	r3, #0
 800ae50:	220a      	movs	r2, #10
 800ae52:	4630      	mov	r0, r6
 800ae54:	f000 f9ba 	bl	800b1cc <__multadd>
 800ae58:	4607      	mov	r7, r0
 800ae5a:	e7f0      	b.n	800ae3e <_dtoa_r+0xa0e>
 800ae5c:	f1ba 0f00 	cmp.w	sl, #0
 800ae60:	9a01      	ldr	r2, [sp, #4]
 800ae62:	bfcc      	ite	gt
 800ae64:	46d0      	movgt	r8, sl
 800ae66:	f04f 0801 	movle.w	r8, #1
 800ae6a:	4490      	add	r8, r2
 800ae6c:	f04f 0900 	mov.w	r9, #0
 800ae70:	4629      	mov	r1, r5
 800ae72:	2201      	movs	r2, #1
 800ae74:	4630      	mov	r0, r6
 800ae76:	9302      	str	r3, [sp, #8]
 800ae78:	f000 fb56 	bl	800b528 <__lshift>
 800ae7c:	4621      	mov	r1, r4
 800ae7e:	4605      	mov	r5, r0
 800ae80:	f000 fbbe 	bl	800b600 <__mcmp>
 800ae84:	2800      	cmp	r0, #0
 800ae86:	dcb1      	bgt.n	800adec <_dtoa_r+0x9bc>
 800ae88:	d102      	bne.n	800ae90 <_dtoa_r+0xa60>
 800ae8a:	9b02      	ldr	r3, [sp, #8]
 800ae8c:	07db      	lsls	r3, r3, #31
 800ae8e:	d4ad      	bmi.n	800adec <_dtoa_r+0x9bc>
 800ae90:	4643      	mov	r3, r8
 800ae92:	4698      	mov	r8, r3
 800ae94:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae98:	2a30      	cmp	r2, #48	; 0x30
 800ae9a:	d0fa      	beq.n	800ae92 <_dtoa_r+0xa62>
 800ae9c:	e6f7      	b.n	800ac8e <_dtoa_r+0x85e>
 800ae9e:	9a01      	ldr	r2, [sp, #4]
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d1a4      	bne.n	800adee <_dtoa_r+0x9be>
 800aea4:	f10b 0b01 	add.w	fp, fp, #1
 800aea8:	2331      	movs	r3, #49	; 0x31
 800aeaa:	e778      	b.n	800ad9e <_dtoa_r+0x96e>
 800aeac:	4b14      	ldr	r3, [pc, #80]	; (800af00 <_dtoa_r+0xad0>)
 800aeae:	f7ff bb2a 	b.w	800a506 <_dtoa_r+0xd6>
 800aeb2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	f47f ab05 	bne.w	800a4c4 <_dtoa_r+0x94>
 800aeba:	4b12      	ldr	r3, [pc, #72]	; (800af04 <_dtoa_r+0xad4>)
 800aebc:	f7ff bb23 	b.w	800a506 <_dtoa_r+0xd6>
 800aec0:	f1ba 0f00 	cmp.w	sl, #0
 800aec4:	dc03      	bgt.n	800aece <_dtoa_r+0xa9e>
 800aec6:	9b06      	ldr	r3, [sp, #24]
 800aec8:	2b02      	cmp	r3, #2
 800aeca:	f73f aec8 	bgt.w	800ac5e <_dtoa_r+0x82e>
 800aece:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800aed2:	4621      	mov	r1, r4
 800aed4:	4628      	mov	r0, r5
 800aed6:	f7ff fa22 	bl	800a31e <quorem>
 800aeda:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800aede:	f808 3b01 	strb.w	r3, [r8], #1
 800aee2:	9a01      	ldr	r2, [sp, #4]
 800aee4:	eba8 0202 	sub.w	r2, r8, r2
 800aee8:	4592      	cmp	sl, r2
 800aeea:	ddb7      	ble.n	800ae5c <_dtoa_r+0xa2c>
 800aeec:	4629      	mov	r1, r5
 800aeee:	2300      	movs	r3, #0
 800aef0:	220a      	movs	r2, #10
 800aef2:	4630      	mov	r0, r6
 800aef4:	f000 f96a 	bl	800b1cc <__multadd>
 800aef8:	4605      	mov	r5, r0
 800aefa:	e7ea      	b.n	800aed2 <_dtoa_r+0xaa2>
 800aefc:	0800c0c8 	.word	0x0800c0c8
 800af00:	0800c028 	.word	0x0800c028
 800af04:	0800c04c 	.word	0x0800c04c

0800af08 <_free_r>:
 800af08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af0a:	2900      	cmp	r1, #0
 800af0c:	d044      	beq.n	800af98 <_free_r+0x90>
 800af0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af12:	9001      	str	r0, [sp, #4]
 800af14:	2b00      	cmp	r3, #0
 800af16:	f1a1 0404 	sub.w	r4, r1, #4
 800af1a:	bfb8      	it	lt
 800af1c:	18e4      	addlt	r4, r4, r3
 800af1e:	f000 f8e7 	bl	800b0f0 <__malloc_lock>
 800af22:	4a1e      	ldr	r2, [pc, #120]	; (800af9c <_free_r+0x94>)
 800af24:	9801      	ldr	r0, [sp, #4]
 800af26:	6813      	ldr	r3, [r2, #0]
 800af28:	b933      	cbnz	r3, 800af38 <_free_r+0x30>
 800af2a:	6063      	str	r3, [r4, #4]
 800af2c:	6014      	str	r4, [r2, #0]
 800af2e:	b003      	add	sp, #12
 800af30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af34:	f000 b8e2 	b.w	800b0fc <__malloc_unlock>
 800af38:	42a3      	cmp	r3, r4
 800af3a:	d908      	bls.n	800af4e <_free_r+0x46>
 800af3c:	6825      	ldr	r5, [r4, #0]
 800af3e:	1961      	adds	r1, r4, r5
 800af40:	428b      	cmp	r3, r1
 800af42:	bf01      	itttt	eq
 800af44:	6819      	ldreq	r1, [r3, #0]
 800af46:	685b      	ldreq	r3, [r3, #4]
 800af48:	1949      	addeq	r1, r1, r5
 800af4a:	6021      	streq	r1, [r4, #0]
 800af4c:	e7ed      	b.n	800af2a <_free_r+0x22>
 800af4e:	461a      	mov	r2, r3
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	b10b      	cbz	r3, 800af58 <_free_r+0x50>
 800af54:	42a3      	cmp	r3, r4
 800af56:	d9fa      	bls.n	800af4e <_free_r+0x46>
 800af58:	6811      	ldr	r1, [r2, #0]
 800af5a:	1855      	adds	r5, r2, r1
 800af5c:	42a5      	cmp	r5, r4
 800af5e:	d10b      	bne.n	800af78 <_free_r+0x70>
 800af60:	6824      	ldr	r4, [r4, #0]
 800af62:	4421      	add	r1, r4
 800af64:	1854      	adds	r4, r2, r1
 800af66:	42a3      	cmp	r3, r4
 800af68:	6011      	str	r1, [r2, #0]
 800af6a:	d1e0      	bne.n	800af2e <_free_r+0x26>
 800af6c:	681c      	ldr	r4, [r3, #0]
 800af6e:	685b      	ldr	r3, [r3, #4]
 800af70:	6053      	str	r3, [r2, #4]
 800af72:	440c      	add	r4, r1
 800af74:	6014      	str	r4, [r2, #0]
 800af76:	e7da      	b.n	800af2e <_free_r+0x26>
 800af78:	d902      	bls.n	800af80 <_free_r+0x78>
 800af7a:	230c      	movs	r3, #12
 800af7c:	6003      	str	r3, [r0, #0]
 800af7e:	e7d6      	b.n	800af2e <_free_r+0x26>
 800af80:	6825      	ldr	r5, [r4, #0]
 800af82:	1961      	adds	r1, r4, r5
 800af84:	428b      	cmp	r3, r1
 800af86:	bf04      	itt	eq
 800af88:	6819      	ldreq	r1, [r3, #0]
 800af8a:	685b      	ldreq	r3, [r3, #4]
 800af8c:	6063      	str	r3, [r4, #4]
 800af8e:	bf04      	itt	eq
 800af90:	1949      	addeq	r1, r1, r5
 800af92:	6021      	streq	r1, [r4, #0]
 800af94:	6054      	str	r4, [r2, #4]
 800af96:	e7ca      	b.n	800af2e <_free_r+0x26>
 800af98:	b003      	add	sp, #12
 800af9a:	bd30      	pop	{r4, r5, pc}
 800af9c:	24000618 	.word	0x24000618

0800afa0 <malloc>:
 800afa0:	4b02      	ldr	r3, [pc, #8]	; (800afac <malloc+0xc>)
 800afa2:	4601      	mov	r1, r0
 800afa4:	6818      	ldr	r0, [r3, #0]
 800afa6:	f000 b823 	b.w	800aff0 <_malloc_r>
 800afaa:	bf00      	nop
 800afac:	24000080 	.word	0x24000080

0800afb0 <sbrk_aligned>:
 800afb0:	b570      	push	{r4, r5, r6, lr}
 800afb2:	4e0e      	ldr	r6, [pc, #56]	; (800afec <sbrk_aligned+0x3c>)
 800afb4:	460c      	mov	r4, r1
 800afb6:	6831      	ldr	r1, [r6, #0]
 800afb8:	4605      	mov	r5, r0
 800afba:	b911      	cbnz	r1, 800afc2 <sbrk_aligned+0x12>
 800afbc:	f000 fea8 	bl	800bd10 <_sbrk_r>
 800afc0:	6030      	str	r0, [r6, #0]
 800afc2:	4621      	mov	r1, r4
 800afc4:	4628      	mov	r0, r5
 800afc6:	f000 fea3 	bl	800bd10 <_sbrk_r>
 800afca:	1c43      	adds	r3, r0, #1
 800afcc:	d00a      	beq.n	800afe4 <sbrk_aligned+0x34>
 800afce:	1cc4      	adds	r4, r0, #3
 800afd0:	f024 0403 	bic.w	r4, r4, #3
 800afd4:	42a0      	cmp	r0, r4
 800afd6:	d007      	beq.n	800afe8 <sbrk_aligned+0x38>
 800afd8:	1a21      	subs	r1, r4, r0
 800afda:	4628      	mov	r0, r5
 800afdc:	f000 fe98 	bl	800bd10 <_sbrk_r>
 800afe0:	3001      	adds	r0, #1
 800afe2:	d101      	bne.n	800afe8 <sbrk_aligned+0x38>
 800afe4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800afe8:	4620      	mov	r0, r4
 800afea:	bd70      	pop	{r4, r5, r6, pc}
 800afec:	2400061c 	.word	0x2400061c

0800aff0 <_malloc_r>:
 800aff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aff4:	1ccd      	adds	r5, r1, #3
 800aff6:	f025 0503 	bic.w	r5, r5, #3
 800affa:	3508      	adds	r5, #8
 800affc:	2d0c      	cmp	r5, #12
 800affe:	bf38      	it	cc
 800b000:	250c      	movcc	r5, #12
 800b002:	2d00      	cmp	r5, #0
 800b004:	4607      	mov	r7, r0
 800b006:	db01      	blt.n	800b00c <_malloc_r+0x1c>
 800b008:	42a9      	cmp	r1, r5
 800b00a:	d905      	bls.n	800b018 <_malloc_r+0x28>
 800b00c:	230c      	movs	r3, #12
 800b00e:	603b      	str	r3, [r7, #0]
 800b010:	2600      	movs	r6, #0
 800b012:	4630      	mov	r0, r6
 800b014:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b018:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b0ec <_malloc_r+0xfc>
 800b01c:	f000 f868 	bl	800b0f0 <__malloc_lock>
 800b020:	f8d8 3000 	ldr.w	r3, [r8]
 800b024:	461c      	mov	r4, r3
 800b026:	bb5c      	cbnz	r4, 800b080 <_malloc_r+0x90>
 800b028:	4629      	mov	r1, r5
 800b02a:	4638      	mov	r0, r7
 800b02c:	f7ff ffc0 	bl	800afb0 <sbrk_aligned>
 800b030:	1c43      	adds	r3, r0, #1
 800b032:	4604      	mov	r4, r0
 800b034:	d155      	bne.n	800b0e2 <_malloc_r+0xf2>
 800b036:	f8d8 4000 	ldr.w	r4, [r8]
 800b03a:	4626      	mov	r6, r4
 800b03c:	2e00      	cmp	r6, #0
 800b03e:	d145      	bne.n	800b0cc <_malloc_r+0xdc>
 800b040:	2c00      	cmp	r4, #0
 800b042:	d048      	beq.n	800b0d6 <_malloc_r+0xe6>
 800b044:	6823      	ldr	r3, [r4, #0]
 800b046:	4631      	mov	r1, r6
 800b048:	4638      	mov	r0, r7
 800b04a:	eb04 0903 	add.w	r9, r4, r3
 800b04e:	f000 fe5f 	bl	800bd10 <_sbrk_r>
 800b052:	4581      	cmp	r9, r0
 800b054:	d13f      	bne.n	800b0d6 <_malloc_r+0xe6>
 800b056:	6821      	ldr	r1, [r4, #0]
 800b058:	1a6d      	subs	r5, r5, r1
 800b05a:	4629      	mov	r1, r5
 800b05c:	4638      	mov	r0, r7
 800b05e:	f7ff ffa7 	bl	800afb0 <sbrk_aligned>
 800b062:	3001      	adds	r0, #1
 800b064:	d037      	beq.n	800b0d6 <_malloc_r+0xe6>
 800b066:	6823      	ldr	r3, [r4, #0]
 800b068:	442b      	add	r3, r5
 800b06a:	6023      	str	r3, [r4, #0]
 800b06c:	f8d8 3000 	ldr.w	r3, [r8]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d038      	beq.n	800b0e6 <_malloc_r+0xf6>
 800b074:	685a      	ldr	r2, [r3, #4]
 800b076:	42a2      	cmp	r2, r4
 800b078:	d12b      	bne.n	800b0d2 <_malloc_r+0xe2>
 800b07a:	2200      	movs	r2, #0
 800b07c:	605a      	str	r2, [r3, #4]
 800b07e:	e00f      	b.n	800b0a0 <_malloc_r+0xb0>
 800b080:	6822      	ldr	r2, [r4, #0]
 800b082:	1b52      	subs	r2, r2, r5
 800b084:	d41f      	bmi.n	800b0c6 <_malloc_r+0xd6>
 800b086:	2a0b      	cmp	r2, #11
 800b088:	d917      	bls.n	800b0ba <_malloc_r+0xca>
 800b08a:	1961      	adds	r1, r4, r5
 800b08c:	42a3      	cmp	r3, r4
 800b08e:	6025      	str	r5, [r4, #0]
 800b090:	bf18      	it	ne
 800b092:	6059      	strne	r1, [r3, #4]
 800b094:	6863      	ldr	r3, [r4, #4]
 800b096:	bf08      	it	eq
 800b098:	f8c8 1000 	streq.w	r1, [r8]
 800b09c:	5162      	str	r2, [r4, r5]
 800b09e:	604b      	str	r3, [r1, #4]
 800b0a0:	4638      	mov	r0, r7
 800b0a2:	f104 060b 	add.w	r6, r4, #11
 800b0a6:	f000 f829 	bl	800b0fc <__malloc_unlock>
 800b0aa:	f026 0607 	bic.w	r6, r6, #7
 800b0ae:	1d23      	adds	r3, r4, #4
 800b0b0:	1af2      	subs	r2, r6, r3
 800b0b2:	d0ae      	beq.n	800b012 <_malloc_r+0x22>
 800b0b4:	1b9b      	subs	r3, r3, r6
 800b0b6:	50a3      	str	r3, [r4, r2]
 800b0b8:	e7ab      	b.n	800b012 <_malloc_r+0x22>
 800b0ba:	42a3      	cmp	r3, r4
 800b0bc:	6862      	ldr	r2, [r4, #4]
 800b0be:	d1dd      	bne.n	800b07c <_malloc_r+0x8c>
 800b0c0:	f8c8 2000 	str.w	r2, [r8]
 800b0c4:	e7ec      	b.n	800b0a0 <_malloc_r+0xb0>
 800b0c6:	4623      	mov	r3, r4
 800b0c8:	6864      	ldr	r4, [r4, #4]
 800b0ca:	e7ac      	b.n	800b026 <_malloc_r+0x36>
 800b0cc:	4634      	mov	r4, r6
 800b0ce:	6876      	ldr	r6, [r6, #4]
 800b0d0:	e7b4      	b.n	800b03c <_malloc_r+0x4c>
 800b0d2:	4613      	mov	r3, r2
 800b0d4:	e7cc      	b.n	800b070 <_malloc_r+0x80>
 800b0d6:	230c      	movs	r3, #12
 800b0d8:	603b      	str	r3, [r7, #0]
 800b0da:	4638      	mov	r0, r7
 800b0dc:	f000 f80e 	bl	800b0fc <__malloc_unlock>
 800b0e0:	e797      	b.n	800b012 <_malloc_r+0x22>
 800b0e2:	6025      	str	r5, [r4, #0]
 800b0e4:	e7dc      	b.n	800b0a0 <_malloc_r+0xb0>
 800b0e6:	605b      	str	r3, [r3, #4]
 800b0e8:	deff      	udf	#255	; 0xff
 800b0ea:	bf00      	nop
 800b0ec:	24000618 	.word	0x24000618

0800b0f0 <__malloc_lock>:
 800b0f0:	4801      	ldr	r0, [pc, #4]	; (800b0f8 <__malloc_lock+0x8>)
 800b0f2:	f7ff b904 	b.w	800a2fe <__retarget_lock_acquire_recursive>
 800b0f6:	bf00      	nop
 800b0f8:	24000614 	.word	0x24000614

0800b0fc <__malloc_unlock>:
 800b0fc:	4801      	ldr	r0, [pc, #4]	; (800b104 <__malloc_unlock+0x8>)
 800b0fe:	f7ff b8ff 	b.w	800a300 <__retarget_lock_release_recursive>
 800b102:	bf00      	nop
 800b104:	24000614 	.word	0x24000614

0800b108 <_Balloc>:
 800b108:	b570      	push	{r4, r5, r6, lr}
 800b10a:	69c6      	ldr	r6, [r0, #28]
 800b10c:	4604      	mov	r4, r0
 800b10e:	460d      	mov	r5, r1
 800b110:	b976      	cbnz	r6, 800b130 <_Balloc+0x28>
 800b112:	2010      	movs	r0, #16
 800b114:	f7ff ff44 	bl	800afa0 <malloc>
 800b118:	4602      	mov	r2, r0
 800b11a:	61e0      	str	r0, [r4, #28]
 800b11c:	b920      	cbnz	r0, 800b128 <_Balloc+0x20>
 800b11e:	4b18      	ldr	r3, [pc, #96]	; (800b180 <_Balloc+0x78>)
 800b120:	4818      	ldr	r0, [pc, #96]	; (800b184 <_Balloc+0x7c>)
 800b122:	216b      	movs	r1, #107	; 0x6b
 800b124:	f000 fe04 	bl	800bd30 <__assert_func>
 800b128:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b12c:	6006      	str	r6, [r0, #0]
 800b12e:	60c6      	str	r6, [r0, #12]
 800b130:	69e6      	ldr	r6, [r4, #28]
 800b132:	68f3      	ldr	r3, [r6, #12]
 800b134:	b183      	cbz	r3, 800b158 <_Balloc+0x50>
 800b136:	69e3      	ldr	r3, [r4, #28]
 800b138:	68db      	ldr	r3, [r3, #12]
 800b13a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b13e:	b9b8      	cbnz	r0, 800b170 <_Balloc+0x68>
 800b140:	2101      	movs	r1, #1
 800b142:	fa01 f605 	lsl.w	r6, r1, r5
 800b146:	1d72      	adds	r2, r6, #5
 800b148:	0092      	lsls	r2, r2, #2
 800b14a:	4620      	mov	r0, r4
 800b14c:	f000 fe0e 	bl	800bd6c <_calloc_r>
 800b150:	b160      	cbz	r0, 800b16c <_Balloc+0x64>
 800b152:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b156:	e00e      	b.n	800b176 <_Balloc+0x6e>
 800b158:	2221      	movs	r2, #33	; 0x21
 800b15a:	2104      	movs	r1, #4
 800b15c:	4620      	mov	r0, r4
 800b15e:	f000 fe05 	bl	800bd6c <_calloc_r>
 800b162:	69e3      	ldr	r3, [r4, #28]
 800b164:	60f0      	str	r0, [r6, #12]
 800b166:	68db      	ldr	r3, [r3, #12]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d1e4      	bne.n	800b136 <_Balloc+0x2e>
 800b16c:	2000      	movs	r0, #0
 800b16e:	bd70      	pop	{r4, r5, r6, pc}
 800b170:	6802      	ldr	r2, [r0, #0]
 800b172:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b176:	2300      	movs	r3, #0
 800b178:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b17c:	e7f7      	b.n	800b16e <_Balloc+0x66>
 800b17e:	bf00      	nop
 800b180:	0800c059 	.word	0x0800c059
 800b184:	0800c0d9 	.word	0x0800c0d9

0800b188 <_Bfree>:
 800b188:	b570      	push	{r4, r5, r6, lr}
 800b18a:	69c6      	ldr	r6, [r0, #28]
 800b18c:	4605      	mov	r5, r0
 800b18e:	460c      	mov	r4, r1
 800b190:	b976      	cbnz	r6, 800b1b0 <_Bfree+0x28>
 800b192:	2010      	movs	r0, #16
 800b194:	f7ff ff04 	bl	800afa0 <malloc>
 800b198:	4602      	mov	r2, r0
 800b19a:	61e8      	str	r0, [r5, #28]
 800b19c:	b920      	cbnz	r0, 800b1a8 <_Bfree+0x20>
 800b19e:	4b09      	ldr	r3, [pc, #36]	; (800b1c4 <_Bfree+0x3c>)
 800b1a0:	4809      	ldr	r0, [pc, #36]	; (800b1c8 <_Bfree+0x40>)
 800b1a2:	218f      	movs	r1, #143	; 0x8f
 800b1a4:	f000 fdc4 	bl	800bd30 <__assert_func>
 800b1a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1ac:	6006      	str	r6, [r0, #0]
 800b1ae:	60c6      	str	r6, [r0, #12]
 800b1b0:	b13c      	cbz	r4, 800b1c2 <_Bfree+0x3a>
 800b1b2:	69eb      	ldr	r3, [r5, #28]
 800b1b4:	6862      	ldr	r2, [r4, #4]
 800b1b6:	68db      	ldr	r3, [r3, #12]
 800b1b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b1bc:	6021      	str	r1, [r4, #0]
 800b1be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b1c2:	bd70      	pop	{r4, r5, r6, pc}
 800b1c4:	0800c059 	.word	0x0800c059
 800b1c8:	0800c0d9 	.word	0x0800c0d9

0800b1cc <__multadd>:
 800b1cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1d0:	690d      	ldr	r5, [r1, #16]
 800b1d2:	4607      	mov	r7, r0
 800b1d4:	460c      	mov	r4, r1
 800b1d6:	461e      	mov	r6, r3
 800b1d8:	f101 0c14 	add.w	ip, r1, #20
 800b1dc:	2000      	movs	r0, #0
 800b1de:	f8dc 3000 	ldr.w	r3, [ip]
 800b1e2:	b299      	uxth	r1, r3
 800b1e4:	fb02 6101 	mla	r1, r2, r1, r6
 800b1e8:	0c1e      	lsrs	r6, r3, #16
 800b1ea:	0c0b      	lsrs	r3, r1, #16
 800b1ec:	fb02 3306 	mla	r3, r2, r6, r3
 800b1f0:	b289      	uxth	r1, r1
 800b1f2:	3001      	adds	r0, #1
 800b1f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b1f8:	4285      	cmp	r5, r0
 800b1fa:	f84c 1b04 	str.w	r1, [ip], #4
 800b1fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b202:	dcec      	bgt.n	800b1de <__multadd+0x12>
 800b204:	b30e      	cbz	r6, 800b24a <__multadd+0x7e>
 800b206:	68a3      	ldr	r3, [r4, #8]
 800b208:	42ab      	cmp	r3, r5
 800b20a:	dc19      	bgt.n	800b240 <__multadd+0x74>
 800b20c:	6861      	ldr	r1, [r4, #4]
 800b20e:	4638      	mov	r0, r7
 800b210:	3101      	adds	r1, #1
 800b212:	f7ff ff79 	bl	800b108 <_Balloc>
 800b216:	4680      	mov	r8, r0
 800b218:	b928      	cbnz	r0, 800b226 <__multadd+0x5a>
 800b21a:	4602      	mov	r2, r0
 800b21c:	4b0c      	ldr	r3, [pc, #48]	; (800b250 <__multadd+0x84>)
 800b21e:	480d      	ldr	r0, [pc, #52]	; (800b254 <__multadd+0x88>)
 800b220:	21ba      	movs	r1, #186	; 0xba
 800b222:	f000 fd85 	bl	800bd30 <__assert_func>
 800b226:	6922      	ldr	r2, [r4, #16]
 800b228:	3202      	adds	r2, #2
 800b22a:	f104 010c 	add.w	r1, r4, #12
 800b22e:	0092      	lsls	r2, r2, #2
 800b230:	300c      	adds	r0, #12
 800b232:	f7ff f866 	bl	800a302 <memcpy>
 800b236:	4621      	mov	r1, r4
 800b238:	4638      	mov	r0, r7
 800b23a:	f7ff ffa5 	bl	800b188 <_Bfree>
 800b23e:	4644      	mov	r4, r8
 800b240:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b244:	3501      	adds	r5, #1
 800b246:	615e      	str	r6, [r3, #20]
 800b248:	6125      	str	r5, [r4, #16]
 800b24a:	4620      	mov	r0, r4
 800b24c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b250:	0800c0c8 	.word	0x0800c0c8
 800b254:	0800c0d9 	.word	0x0800c0d9

0800b258 <__hi0bits>:
 800b258:	0c03      	lsrs	r3, r0, #16
 800b25a:	041b      	lsls	r3, r3, #16
 800b25c:	b9d3      	cbnz	r3, 800b294 <__hi0bits+0x3c>
 800b25e:	0400      	lsls	r0, r0, #16
 800b260:	2310      	movs	r3, #16
 800b262:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b266:	bf04      	itt	eq
 800b268:	0200      	lsleq	r0, r0, #8
 800b26a:	3308      	addeq	r3, #8
 800b26c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b270:	bf04      	itt	eq
 800b272:	0100      	lsleq	r0, r0, #4
 800b274:	3304      	addeq	r3, #4
 800b276:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b27a:	bf04      	itt	eq
 800b27c:	0080      	lsleq	r0, r0, #2
 800b27e:	3302      	addeq	r3, #2
 800b280:	2800      	cmp	r0, #0
 800b282:	db05      	blt.n	800b290 <__hi0bits+0x38>
 800b284:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b288:	f103 0301 	add.w	r3, r3, #1
 800b28c:	bf08      	it	eq
 800b28e:	2320      	moveq	r3, #32
 800b290:	4618      	mov	r0, r3
 800b292:	4770      	bx	lr
 800b294:	2300      	movs	r3, #0
 800b296:	e7e4      	b.n	800b262 <__hi0bits+0xa>

0800b298 <__lo0bits>:
 800b298:	6803      	ldr	r3, [r0, #0]
 800b29a:	f013 0207 	ands.w	r2, r3, #7
 800b29e:	d00c      	beq.n	800b2ba <__lo0bits+0x22>
 800b2a0:	07d9      	lsls	r1, r3, #31
 800b2a2:	d422      	bmi.n	800b2ea <__lo0bits+0x52>
 800b2a4:	079a      	lsls	r2, r3, #30
 800b2a6:	bf49      	itett	mi
 800b2a8:	085b      	lsrmi	r3, r3, #1
 800b2aa:	089b      	lsrpl	r3, r3, #2
 800b2ac:	6003      	strmi	r3, [r0, #0]
 800b2ae:	2201      	movmi	r2, #1
 800b2b0:	bf5c      	itt	pl
 800b2b2:	6003      	strpl	r3, [r0, #0]
 800b2b4:	2202      	movpl	r2, #2
 800b2b6:	4610      	mov	r0, r2
 800b2b8:	4770      	bx	lr
 800b2ba:	b299      	uxth	r1, r3
 800b2bc:	b909      	cbnz	r1, 800b2c2 <__lo0bits+0x2a>
 800b2be:	0c1b      	lsrs	r3, r3, #16
 800b2c0:	2210      	movs	r2, #16
 800b2c2:	b2d9      	uxtb	r1, r3
 800b2c4:	b909      	cbnz	r1, 800b2ca <__lo0bits+0x32>
 800b2c6:	3208      	adds	r2, #8
 800b2c8:	0a1b      	lsrs	r3, r3, #8
 800b2ca:	0719      	lsls	r1, r3, #28
 800b2cc:	bf04      	itt	eq
 800b2ce:	091b      	lsreq	r3, r3, #4
 800b2d0:	3204      	addeq	r2, #4
 800b2d2:	0799      	lsls	r1, r3, #30
 800b2d4:	bf04      	itt	eq
 800b2d6:	089b      	lsreq	r3, r3, #2
 800b2d8:	3202      	addeq	r2, #2
 800b2da:	07d9      	lsls	r1, r3, #31
 800b2dc:	d403      	bmi.n	800b2e6 <__lo0bits+0x4e>
 800b2de:	085b      	lsrs	r3, r3, #1
 800b2e0:	f102 0201 	add.w	r2, r2, #1
 800b2e4:	d003      	beq.n	800b2ee <__lo0bits+0x56>
 800b2e6:	6003      	str	r3, [r0, #0]
 800b2e8:	e7e5      	b.n	800b2b6 <__lo0bits+0x1e>
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	e7e3      	b.n	800b2b6 <__lo0bits+0x1e>
 800b2ee:	2220      	movs	r2, #32
 800b2f0:	e7e1      	b.n	800b2b6 <__lo0bits+0x1e>
	...

0800b2f4 <__i2b>:
 800b2f4:	b510      	push	{r4, lr}
 800b2f6:	460c      	mov	r4, r1
 800b2f8:	2101      	movs	r1, #1
 800b2fa:	f7ff ff05 	bl	800b108 <_Balloc>
 800b2fe:	4602      	mov	r2, r0
 800b300:	b928      	cbnz	r0, 800b30e <__i2b+0x1a>
 800b302:	4b05      	ldr	r3, [pc, #20]	; (800b318 <__i2b+0x24>)
 800b304:	4805      	ldr	r0, [pc, #20]	; (800b31c <__i2b+0x28>)
 800b306:	f240 1145 	movw	r1, #325	; 0x145
 800b30a:	f000 fd11 	bl	800bd30 <__assert_func>
 800b30e:	2301      	movs	r3, #1
 800b310:	6144      	str	r4, [r0, #20]
 800b312:	6103      	str	r3, [r0, #16]
 800b314:	bd10      	pop	{r4, pc}
 800b316:	bf00      	nop
 800b318:	0800c0c8 	.word	0x0800c0c8
 800b31c:	0800c0d9 	.word	0x0800c0d9

0800b320 <__multiply>:
 800b320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b324:	4691      	mov	r9, r2
 800b326:	690a      	ldr	r2, [r1, #16]
 800b328:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b32c:	429a      	cmp	r2, r3
 800b32e:	bfb8      	it	lt
 800b330:	460b      	movlt	r3, r1
 800b332:	460c      	mov	r4, r1
 800b334:	bfbc      	itt	lt
 800b336:	464c      	movlt	r4, r9
 800b338:	4699      	movlt	r9, r3
 800b33a:	6927      	ldr	r7, [r4, #16]
 800b33c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b340:	68a3      	ldr	r3, [r4, #8]
 800b342:	6861      	ldr	r1, [r4, #4]
 800b344:	eb07 060a 	add.w	r6, r7, sl
 800b348:	42b3      	cmp	r3, r6
 800b34a:	b085      	sub	sp, #20
 800b34c:	bfb8      	it	lt
 800b34e:	3101      	addlt	r1, #1
 800b350:	f7ff feda 	bl	800b108 <_Balloc>
 800b354:	b930      	cbnz	r0, 800b364 <__multiply+0x44>
 800b356:	4602      	mov	r2, r0
 800b358:	4b44      	ldr	r3, [pc, #272]	; (800b46c <__multiply+0x14c>)
 800b35a:	4845      	ldr	r0, [pc, #276]	; (800b470 <__multiply+0x150>)
 800b35c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b360:	f000 fce6 	bl	800bd30 <__assert_func>
 800b364:	f100 0514 	add.w	r5, r0, #20
 800b368:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b36c:	462b      	mov	r3, r5
 800b36e:	2200      	movs	r2, #0
 800b370:	4543      	cmp	r3, r8
 800b372:	d321      	bcc.n	800b3b8 <__multiply+0x98>
 800b374:	f104 0314 	add.w	r3, r4, #20
 800b378:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b37c:	f109 0314 	add.w	r3, r9, #20
 800b380:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b384:	9202      	str	r2, [sp, #8]
 800b386:	1b3a      	subs	r2, r7, r4
 800b388:	3a15      	subs	r2, #21
 800b38a:	f022 0203 	bic.w	r2, r2, #3
 800b38e:	3204      	adds	r2, #4
 800b390:	f104 0115 	add.w	r1, r4, #21
 800b394:	428f      	cmp	r7, r1
 800b396:	bf38      	it	cc
 800b398:	2204      	movcc	r2, #4
 800b39a:	9201      	str	r2, [sp, #4]
 800b39c:	9a02      	ldr	r2, [sp, #8]
 800b39e:	9303      	str	r3, [sp, #12]
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	d80c      	bhi.n	800b3be <__multiply+0x9e>
 800b3a4:	2e00      	cmp	r6, #0
 800b3a6:	dd03      	ble.n	800b3b0 <__multiply+0x90>
 800b3a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d05b      	beq.n	800b468 <__multiply+0x148>
 800b3b0:	6106      	str	r6, [r0, #16]
 800b3b2:	b005      	add	sp, #20
 800b3b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3b8:	f843 2b04 	str.w	r2, [r3], #4
 800b3bc:	e7d8      	b.n	800b370 <__multiply+0x50>
 800b3be:	f8b3 a000 	ldrh.w	sl, [r3]
 800b3c2:	f1ba 0f00 	cmp.w	sl, #0
 800b3c6:	d024      	beq.n	800b412 <__multiply+0xf2>
 800b3c8:	f104 0e14 	add.w	lr, r4, #20
 800b3cc:	46a9      	mov	r9, r5
 800b3ce:	f04f 0c00 	mov.w	ip, #0
 800b3d2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b3d6:	f8d9 1000 	ldr.w	r1, [r9]
 800b3da:	fa1f fb82 	uxth.w	fp, r2
 800b3de:	b289      	uxth	r1, r1
 800b3e0:	fb0a 110b 	mla	r1, sl, fp, r1
 800b3e4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b3e8:	f8d9 2000 	ldr.w	r2, [r9]
 800b3ec:	4461      	add	r1, ip
 800b3ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b3f2:	fb0a c20b 	mla	r2, sl, fp, ip
 800b3f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b3fa:	b289      	uxth	r1, r1
 800b3fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b400:	4577      	cmp	r7, lr
 800b402:	f849 1b04 	str.w	r1, [r9], #4
 800b406:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b40a:	d8e2      	bhi.n	800b3d2 <__multiply+0xb2>
 800b40c:	9a01      	ldr	r2, [sp, #4]
 800b40e:	f845 c002 	str.w	ip, [r5, r2]
 800b412:	9a03      	ldr	r2, [sp, #12]
 800b414:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b418:	3304      	adds	r3, #4
 800b41a:	f1b9 0f00 	cmp.w	r9, #0
 800b41e:	d021      	beq.n	800b464 <__multiply+0x144>
 800b420:	6829      	ldr	r1, [r5, #0]
 800b422:	f104 0c14 	add.w	ip, r4, #20
 800b426:	46ae      	mov	lr, r5
 800b428:	f04f 0a00 	mov.w	sl, #0
 800b42c:	f8bc b000 	ldrh.w	fp, [ip]
 800b430:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b434:	fb09 220b 	mla	r2, r9, fp, r2
 800b438:	4452      	add	r2, sl
 800b43a:	b289      	uxth	r1, r1
 800b43c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b440:	f84e 1b04 	str.w	r1, [lr], #4
 800b444:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b448:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b44c:	f8be 1000 	ldrh.w	r1, [lr]
 800b450:	fb09 110a 	mla	r1, r9, sl, r1
 800b454:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b458:	4567      	cmp	r7, ip
 800b45a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b45e:	d8e5      	bhi.n	800b42c <__multiply+0x10c>
 800b460:	9a01      	ldr	r2, [sp, #4]
 800b462:	50a9      	str	r1, [r5, r2]
 800b464:	3504      	adds	r5, #4
 800b466:	e799      	b.n	800b39c <__multiply+0x7c>
 800b468:	3e01      	subs	r6, #1
 800b46a:	e79b      	b.n	800b3a4 <__multiply+0x84>
 800b46c:	0800c0c8 	.word	0x0800c0c8
 800b470:	0800c0d9 	.word	0x0800c0d9

0800b474 <__pow5mult>:
 800b474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b478:	4615      	mov	r5, r2
 800b47a:	f012 0203 	ands.w	r2, r2, #3
 800b47e:	4606      	mov	r6, r0
 800b480:	460f      	mov	r7, r1
 800b482:	d007      	beq.n	800b494 <__pow5mult+0x20>
 800b484:	4c25      	ldr	r4, [pc, #148]	; (800b51c <__pow5mult+0xa8>)
 800b486:	3a01      	subs	r2, #1
 800b488:	2300      	movs	r3, #0
 800b48a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b48e:	f7ff fe9d 	bl	800b1cc <__multadd>
 800b492:	4607      	mov	r7, r0
 800b494:	10ad      	asrs	r5, r5, #2
 800b496:	d03d      	beq.n	800b514 <__pow5mult+0xa0>
 800b498:	69f4      	ldr	r4, [r6, #28]
 800b49a:	b97c      	cbnz	r4, 800b4bc <__pow5mult+0x48>
 800b49c:	2010      	movs	r0, #16
 800b49e:	f7ff fd7f 	bl	800afa0 <malloc>
 800b4a2:	4602      	mov	r2, r0
 800b4a4:	61f0      	str	r0, [r6, #28]
 800b4a6:	b928      	cbnz	r0, 800b4b4 <__pow5mult+0x40>
 800b4a8:	4b1d      	ldr	r3, [pc, #116]	; (800b520 <__pow5mult+0xac>)
 800b4aa:	481e      	ldr	r0, [pc, #120]	; (800b524 <__pow5mult+0xb0>)
 800b4ac:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b4b0:	f000 fc3e 	bl	800bd30 <__assert_func>
 800b4b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b4b8:	6004      	str	r4, [r0, #0]
 800b4ba:	60c4      	str	r4, [r0, #12]
 800b4bc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b4c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b4c4:	b94c      	cbnz	r4, 800b4da <__pow5mult+0x66>
 800b4c6:	f240 2171 	movw	r1, #625	; 0x271
 800b4ca:	4630      	mov	r0, r6
 800b4cc:	f7ff ff12 	bl	800b2f4 <__i2b>
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b4d6:	4604      	mov	r4, r0
 800b4d8:	6003      	str	r3, [r0, #0]
 800b4da:	f04f 0900 	mov.w	r9, #0
 800b4de:	07eb      	lsls	r3, r5, #31
 800b4e0:	d50a      	bpl.n	800b4f8 <__pow5mult+0x84>
 800b4e2:	4639      	mov	r1, r7
 800b4e4:	4622      	mov	r2, r4
 800b4e6:	4630      	mov	r0, r6
 800b4e8:	f7ff ff1a 	bl	800b320 <__multiply>
 800b4ec:	4639      	mov	r1, r7
 800b4ee:	4680      	mov	r8, r0
 800b4f0:	4630      	mov	r0, r6
 800b4f2:	f7ff fe49 	bl	800b188 <_Bfree>
 800b4f6:	4647      	mov	r7, r8
 800b4f8:	106d      	asrs	r5, r5, #1
 800b4fa:	d00b      	beq.n	800b514 <__pow5mult+0xa0>
 800b4fc:	6820      	ldr	r0, [r4, #0]
 800b4fe:	b938      	cbnz	r0, 800b510 <__pow5mult+0x9c>
 800b500:	4622      	mov	r2, r4
 800b502:	4621      	mov	r1, r4
 800b504:	4630      	mov	r0, r6
 800b506:	f7ff ff0b 	bl	800b320 <__multiply>
 800b50a:	6020      	str	r0, [r4, #0]
 800b50c:	f8c0 9000 	str.w	r9, [r0]
 800b510:	4604      	mov	r4, r0
 800b512:	e7e4      	b.n	800b4de <__pow5mult+0x6a>
 800b514:	4638      	mov	r0, r7
 800b516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b51a:	bf00      	nop
 800b51c:	0800c228 	.word	0x0800c228
 800b520:	0800c059 	.word	0x0800c059
 800b524:	0800c0d9 	.word	0x0800c0d9

0800b528 <__lshift>:
 800b528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b52c:	460c      	mov	r4, r1
 800b52e:	6849      	ldr	r1, [r1, #4]
 800b530:	6923      	ldr	r3, [r4, #16]
 800b532:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b536:	68a3      	ldr	r3, [r4, #8]
 800b538:	4607      	mov	r7, r0
 800b53a:	4691      	mov	r9, r2
 800b53c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b540:	f108 0601 	add.w	r6, r8, #1
 800b544:	42b3      	cmp	r3, r6
 800b546:	db0b      	blt.n	800b560 <__lshift+0x38>
 800b548:	4638      	mov	r0, r7
 800b54a:	f7ff fddd 	bl	800b108 <_Balloc>
 800b54e:	4605      	mov	r5, r0
 800b550:	b948      	cbnz	r0, 800b566 <__lshift+0x3e>
 800b552:	4602      	mov	r2, r0
 800b554:	4b28      	ldr	r3, [pc, #160]	; (800b5f8 <__lshift+0xd0>)
 800b556:	4829      	ldr	r0, [pc, #164]	; (800b5fc <__lshift+0xd4>)
 800b558:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b55c:	f000 fbe8 	bl	800bd30 <__assert_func>
 800b560:	3101      	adds	r1, #1
 800b562:	005b      	lsls	r3, r3, #1
 800b564:	e7ee      	b.n	800b544 <__lshift+0x1c>
 800b566:	2300      	movs	r3, #0
 800b568:	f100 0114 	add.w	r1, r0, #20
 800b56c:	f100 0210 	add.w	r2, r0, #16
 800b570:	4618      	mov	r0, r3
 800b572:	4553      	cmp	r3, sl
 800b574:	db33      	blt.n	800b5de <__lshift+0xb6>
 800b576:	6920      	ldr	r0, [r4, #16]
 800b578:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b57c:	f104 0314 	add.w	r3, r4, #20
 800b580:	f019 091f 	ands.w	r9, r9, #31
 800b584:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b588:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b58c:	d02b      	beq.n	800b5e6 <__lshift+0xbe>
 800b58e:	f1c9 0e20 	rsb	lr, r9, #32
 800b592:	468a      	mov	sl, r1
 800b594:	2200      	movs	r2, #0
 800b596:	6818      	ldr	r0, [r3, #0]
 800b598:	fa00 f009 	lsl.w	r0, r0, r9
 800b59c:	4310      	orrs	r0, r2
 800b59e:	f84a 0b04 	str.w	r0, [sl], #4
 800b5a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5a6:	459c      	cmp	ip, r3
 800b5a8:	fa22 f20e 	lsr.w	r2, r2, lr
 800b5ac:	d8f3      	bhi.n	800b596 <__lshift+0x6e>
 800b5ae:	ebac 0304 	sub.w	r3, ip, r4
 800b5b2:	3b15      	subs	r3, #21
 800b5b4:	f023 0303 	bic.w	r3, r3, #3
 800b5b8:	3304      	adds	r3, #4
 800b5ba:	f104 0015 	add.w	r0, r4, #21
 800b5be:	4584      	cmp	ip, r0
 800b5c0:	bf38      	it	cc
 800b5c2:	2304      	movcc	r3, #4
 800b5c4:	50ca      	str	r2, [r1, r3]
 800b5c6:	b10a      	cbz	r2, 800b5cc <__lshift+0xa4>
 800b5c8:	f108 0602 	add.w	r6, r8, #2
 800b5cc:	3e01      	subs	r6, #1
 800b5ce:	4638      	mov	r0, r7
 800b5d0:	612e      	str	r6, [r5, #16]
 800b5d2:	4621      	mov	r1, r4
 800b5d4:	f7ff fdd8 	bl	800b188 <_Bfree>
 800b5d8:	4628      	mov	r0, r5
 800b5da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5de:	f842 0f04 	str.w	r0, [r2, #4]!
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	e7c5      	b.n	800b572 <__lshift+0x4a>
 800b5e6:	3904      	subs	r1, #4
 800b5e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5ec:	f841 2f04 	str.w	r2, [r1, #4]!
 800b5f0:	459c      	cmp	ip, r3
 800b5f2:	d8f9      	bhi.n	800b5e8 <__lshift+0xc0>
 800b5f4:	e7ea      	b.n	800b5cc <__lshift+0xa4>
 800b5f6:	bf00      	nop
 800b5f8:	0800c0c8 	.word	0x0800c0c8
 800b5fc:	0800c0d9 	.word	0x0800c0d9

0800b600 <__mcmp>:
 800b600:	b530      	push	{r4, r5, lr}
 800b602:	6902      	ldr	r2, [r0, #16]
 800b604:	690c      	ldr	r4, [r1, #16]
 800b606:	1b12      	subs	r2, r2, r4
 800b608:	d10e      	bne.n	800b628 <__mcmp+0x28>
 800b60a:	f100 0314 	add.w	r3, r0, #20
 800b60e:	3114      	adds	r1, #20
 800b610:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b614:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b618:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b61c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b620:	42a5      	cmp	r5, r4
 800b622:	d003      	beq.n	800b62c <__mcmp+0x2c>
 800b624:	d305      	bcc.n	800b632 <__mcmp+0x32>
 800b626:	2201      	movs	r2, #1
 800b628:	4610      	mov	r0, r2
 800b62a:	bd30      	pop	{r4, r5, pc}
 800b62c:	4283      	cmp	r3, r0
 800b62e:	d3f3      	bcc.n	800b618 <__mcmp+0x18>
 800b630:	e7fa      	b.n	800b628 <__mcmp+0x28>
 800b632:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b636:	e7f7      	b.n	800b628 <__mcmp+0x28>

0800b638 <__mdiff>:
 800b638:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b63c:	460c      	mov	r4, r1
 800b63e:	4606      	mov	r6, r0
 800b640:	4611      	mov	r1, r2
 800b642:	4620      	mov	r0, r4
 800b644:	4690      	mov	r8, r2
 800b646:	f7ff ffdb 	bl	800b600 <__mcmp>
 800b64a:	1e05      	subs	r5, r0, #0
 800b64c:	d110      	bne.n	800b670 <__mdiff+0x38>
 800b64e:	4629      	mov	r1, r5
 800b650:	4630      	mov	r0, r6
 800b652:	f7ff fd59 	bl	800b108 <_Balloc>
 800b656:	b930      	cbnz	r0, 800b666 <__mdiff+0x2e>
 800b658:	4b3a      	ldr	r3, [pc, #232]	; (800b744 <__mdiff+0x10c>)
 800b65a:	4602      	mov	r2, r0
 800b65c:	f240 2137 	movw	r1, #567	; 0x237
 800b660:	4839      	ldr	r0, [pc, #228]	; (800b748 <__mdiff+0x110>)
 800b662:	f000 fb65 	bl	800bd30 <__assert_func>
 800b666:	2301      	movs	r3, #1
 800b668:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b66c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b670:	bfa4      	itt	ge
 800b672:	4643      	movge	r3, r8
 800b674:	46a0      	movge	r8, r4
 800b676:	4630      	mov	r0, r6
 800b678:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b67c:	bfa6      	itte	ge
 800b67e:	461c      	movge	r4, r3
 800b680:	2500      	movge	r5, #0
 800b682:	2501      	movlt	r5, #1
 800b684:	f7ff fd40 	bl	800b108 <_Balloc>
 800b688:	b920      	cbnz	r0, 800b694 <__mdiff+0x5c>
 800b68a:	4b2e      	ldr	r3, [pc, #184]	; (800b744 <__mdiff+0x10c>)
 800b68c:	4602      	mov	r2, r0
 800b68e:	f240 2145 	movw	r1, #581	; 0x245
 800b692:	e7e5      	b.n	800b660 <__mdiff+0x28>
 800b694:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b698:	6926      	ldr	r6, [r4, #16]
 800b69a:	60c5      	str	r5, [r0, #12]
 800b69c:	f104 0914 	add.w	r9, r4, #20
 800b6a0:	f108 0514 	add.w	r5, r8, #20
 800b6a4:	f100 0e14 	add.w	lr, r0, #20
 800b6a8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b6ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b6b0:	f108 0210 	add.w	r2, r8, #16
 800b6b4:	46f2      	mov	sl, lr
 800b6b6:	2100      	movs	r1, #0
 800b6b8:	f859 3b04 	ldr.w	r3, [r9], #4
 800b6bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b6c0:	fa11 f88b 	uxtah	r8, r1, fp
 800b6c4:	b299      	uxth	r1, r3
 800b6c6:	0c1b      	lsrs	r3, r3, #16
 800b6c8:	eba8 0801 	sub.w	r8, r8, r1
 800b6cc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b6d0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b6d4:	fa1f f888 	uxth.w	r8, r8
 800b6d8:	1419      	asrs	r1, r3, #16
 800b6da:	454e      	cmp	r6, r9
 800b6dc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b6e0:	f84a 3b04 	str.w	r3, [sl], #4
 800b6e4:	d8e8      	bhi.n	800b6b8 <__mdiff+0x80>
 800b6e6:	1b33      	subs	r3, r6, r4
 800b6e8:	3b15      	subs	r3, #21
 800b6ea:	f023 0303 	bic.w	r3, r3, #3
 800b6ee:	3304      	adds	r3, #4
 800b6f0:	3415      	adds	r4, #21
 800b6f2:	42a6      	cmp	r6, r4
 800b6f4:	bf38      	it	cc
 800b6f6:	2304      	movcc	r3, #4
 800b6f8:	441d      	add	r5, r3
 800b6fa:	4473      	add	r3, lr
 800b6fc:	469e      	mov	lr, r3
 800b6fe:	462e      	mov	r6, r5
 800b700:	4566      	cmp	r6, ip
 800b702:	d30e      	bcc.n	800b722 <__mdiff+0xea>
 800b704:	f10c 0203 	add.w	r2, ip, #3
 800b708:	1b52      	subs	r2, r2, r5
 800b70a:	f022 0203 	bic.w	r2, r2, #3
 800b70e:	3d03      	subs	r5, #3
 800b710:	45ac      	cmp	ip, r5
 800b712:	bf38      	it	cc
 800b714:	2200      	movcc	r2, #0
 800b716:	4413      	add	r3, r2
 800b718:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b71c:	b17a      	cbz	r2, 800b73e <__mdiff+0x106>
 800b71e:	6107      	str	r7, [r0, #16]
 800b720:	e7a4      	b.n	800b66c <__mdiff+0x34>
 800b722:	f856 8b04 	ldr.w	r8, [r6], #4
 800b726:	fa11 f288 	uxtah	r2, r1, r8
 800b72a:	1414      	asrs	r4, r2, #16
 800b72c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b730:	b292      	uxth	r2, r2
 800b732:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b736:	f84e 2b04 	str.w	r2, [lr], #4
 800b73a:	1421      	asrs	r1, r4, #16
 800b73c:	e7e0      	b.n	800b700 <__mdiff+0xc8>
 800b73e:	3f01      	subs	r7, #1
 800b740:	e7ea      	b.n	800b718 <__mdiff+0xe0>
 800b742:	bf00      	nop
 800b744:	0800c0c8 	.word	0x0800c0c8
 800b748:	0800c0d9 	.word	0x0800c0d9

0800b74c <__d2b>:
 800b74c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b750:	460f      	mov	r7, r1
 800b752:	2101      	movs	r1, #1
 800b754:	ec59 8b10 	vmov	r8, r9, d0
 800b758:	4616      	mov	r6, r2
 800b75a:	f7ff fcd5 	bl	800b108 <_Balloc>
 800b75e:	4604      	mov	r4, r0
 800b760:	b930      	cbnz	r0, 800b770 <__d2b+0x24>
 800b762:	4602      	mov	r2, r0
 800b764:	4b24      	ldr	r3, [pc, #144]	; (800b7f8 <__d2b+0xac>)
 800b766:	4825      	ldr	r0, [pc, #148]	; (800b7fc <__d2b+0xb0>)
 800b768:	f240 310f 	movw	r1, #783	; 0x30f
 800b76c:	f000 fae0 	bl	800bd30 <__assert_func>
 800b770:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b774:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b778:	bb2d      	cbnz	r5, 800b7c6 <__d2b+0x7a>
 800b77a:	9301      	str	r3, [sp, #4]
 800b77c:	f1b8 0300 	subs.w	r3, r8, #0
 800b780:	d026      	beq.n	800b7d0 <__d2b+0x84>
 800b782:	4668      	mov	r0, sp
 800b784:	9300      	str	r3, [sp, #0]
 800b786:	f7ff fd87 	bl	800b298 <__lo0bits>
 800b78a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b78e:	b1e8      	cbz	r0, 800b7cc <__d2b+0x80>
 800b790:	f1c0 0320 	rsb	r3, r0, #32
 800b794:	fa02 f303 	lsl.w	r3, r2, r3
 800b798:	430b      	orrs	r3, r1
 800b79a:	40c2      	lsrs	r2, r0
 800b79c:	6163      	str	r3, [r4, #20]
 800b79e:	9201      	str	r2, [sp, #4]
 800b7a0:	9b01      	ldr	r3, [sp, #4]
 800b7a2:	61a3      	str	r3, [r4, #24]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	bf14      	ite	ne
 800b7a8:	2202      	movne	r2, #2
 800b7aa:	2201      	moveq	r2, #1
 800b7ac:	6122      	str	r2, [r4, #16]
 800b7ae:	b1bd      	cbz	r5, 800b7e0 <__d2b+0x94>
 800b7b0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b7b4:	4405      	add	r5, r0
 800b7b6:	603d      	str	r5, [r7, #0]
 800b7b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b7bc:	6030      	str	r0, [r6, #0]
 800b7be:	4620      	mov	r0, r4
 800b7c0:	b003      	add	sp, #12
 800b7c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b7ca:	e7d6      	b.n	800b77a <__d2b+0x2e>
 800b7cc:	6161      	str	r1, [r4, #20]
 800b7ce:	e7e7      	b.n	800b7a0 <__d2b+0x54>
 800b7d0:	a801      	add	r0, sp, #4
 800b7d2:	f7ff fd61 	bl	800b298 <__lo0bits>
 800b7d6:	9b01      	ldr	r3, [sp, #4]
 800b7d8:	6163      	str	r3, [r4, #20]
 800b7da:	3020      	adds	r0, #32
 800b7dc:	2201      	movs	r2, #1
 800b7de:	e7e5      	b.n	800b7ac <__d2b+0x60>
 800b7e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b7e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b7e8:	6038      	str	r0, [r7, #0]
 800b7ea:	6918      	ldr	r0, [r3, #16]
 800b7ec:	f7ff fd34 	bl	800b258 <__hi0bits>
 800b7f0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b7f4:	e7e2      	b.n	800b7bc <__d2b+0x70>
 800b7f6:	bf00      	nop
 800b7f8:	0800c0c8 	.word	0x0800c0c8
 800b7fc:	0800c0d9 	.word	0x0800c0d9

0800b800 <__sfputc_r>:
 800b800:	6893      	ldr	r3, [r2, #8]
 800b802:	3b01      	subs	r3, #1
 800b804:	2b00      	cmp	r3, #0
 800b806:	b410      	push	{r4}
 800b808:	6093      	str	r3, [r2, #8]
 800b80a:	da08      	bge.n	800b81e <__sfputc_r+0x1e>
 800b80c:	6994      	ldr	r4, [r2, #24]
 800b80e:	42a3      	cmp	r3, r4
 800b810:	db01      	blt.n	800b816 <__sfputc_r+0x16>
 800b812:	290a      	cmp	r1, #10
 800b814:	d103      	bne.n	800b81e <__sfputc_r+0x1e>
 800b816:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b81a:	f000 b9e3 	b.w	800bbe4 <__swbuf_r>
 800b81e:	6813      	ldr	r3, [r2, #0]
 800b820:	1c58      	adds	r0, r3, #1
 800b822:	6010      	str	r0, [r2, #0]
 800b824:	7019      	strb	r1, [r3, #0]
 800b826:	4608      	mov	r0, r1
 800b828:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b82c:	4770      	bx	lr

0800b82e <__sfputs_r>:
 800b82e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b830:	4606      	mov	r6, r0
 800b832:	460f      	mov	r7, r1
 800b834:	4614      	mov	r4, r2
 800b836:	18d5      	adds	r5, r2, r3
 800b838:	42ac      	cmp	r4, r5
 800b83a:	d101      	bne.n	800b840 <__sfputs_r+0x12>
 800b83c:	2000      	movs	r0, #0
 800b83e:	e007      	b.n	800b850 <__sfputs_r+0x22>
 800b840:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b844:	463a      	mov	r2, r7
 800b846:	4630      	mov	r0, r6
 800b848:	f7ff ffda 	bl	800b800 <__sfputc_r>
 800b84c:	1c43      	adds	r3, r0, #1
 800b84e:	d1f3      	bne.n	800b838 <__sfputs_r+0xa>
 800b850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b854 <_vfiprintf_r>:
 800b854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b858:	460d      	mov	r5, r1
 800b85a:	b09d      	sub	sp, #116	; 0x74
 800b85c:	4614      	mov	r4, r2
 800b85e:	4698      	mov	r8, r3
 800b860:	4606      	mov	r6, r0
 800b862:	b118      	cbz	r0, 800b86c <_vfiprintf_r+0x18>
 800b864:	6a03      	ldr	r3, [r0, #32]
 800b866:	b90b      	cbnz	r3, 800b86c <_vfiprintf_r+0x18>
 800b868:	f7fe fc40 	bl	800a0ec <__sinit>
 800b86c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b86e:	07d9      	lsls	r1, r3, #31
 800b870:	d405      	bmi.n	800b87e <_vfiprintf_r+0x2a>
 800b872:	89ab      	ldrh	r3, [r5, #12]
 800b874:	059a      	lsls	r2, r3, #22
 800b876:	d402      	bmi.n	800b87e <_vfiprintf_r+0x2a>
 800b878:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b87a:	f7fe fd40 	bl	800a2fe <__retarget_lock_acquire_recursive>
 800b87e:	89ab      	ldrh	r3, [r5, #12]
 800b880:	071b      	lsls	r3, r3, #28
 800b882:	d501      	bpl.n	800b888 <_vfiprintf_r+0x34>
 800b884:	692b      	ldr	r3, [r5, #16]
 800b886:	b99b      	cbnz	r3, 800b8b0 <_vfiprintf_r+0x5c>
 800b888:	4629      	mov	r1, r5
 800b88a:	4630      	mov	r0, r6
 800b88c:	f000 f9e8 	bl	800bc60 <__swsetup_r>
 800b890:	b170      	cbz	r0, 800b8b0 <_vfiprintf_r+0x5c>
 800b892:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b894:	07dc      	lsls	r4, r3, #31
 800b896:	d504      	bpl.n	800b8a2 <_vfiprintf_r+0x4e>
 800b898:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b89c:	b01d      	add	sp, #116	; 0x74
 800b89e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8a2:	89ab      	ldrh	r3, [r5, #12]
 800b8a4:	0598      	lsls	r0, r3, #22
 800b8a6:	d4f7      	bmi.n	800b898 <_vfiprintf_r+0x44>
 800b8a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8aa:	f7fe fd29 	bl	800a300 <__retarget_lock_release_recursive>
 800b8ae:	e7f3      	b.n	800b898 <_vfiprintf_r+0x44>
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	9309      	str	r3, [sp, #36]	; 0x24
 800b8b4:	2320      	movs	r3, #32
 800b8b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8be:	2330      	movs	r3, #48	; 0x30
 800b8c0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ba74 <_vfiprintf_r+0x220>
 800b8c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b8c8:	f04f 0901 	mov.w	r9, #1
 800b8cc:	4623      	mov	r3, r4
 800b8ce:	469a      	mov	sl, r3
 800b8d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8d4:	b10a      	cbz	r2, 800b8da <_vfiprintf_r+0x86>
 800b8d6:	2a25      	cmp	r2, #37	; 0x25
 800b8d8:	d1f9      	bne.n	800b8ce <_vfiprintf_r+0x7a>
 800b8da:	ebba 0b04 	subs.w	fp, sl, r4
 800b8de:	d00b      	beq.n	800b8f8 <_vfiprintf_r+0xa4>
 800b8e0:	465b      	mov	r3, fp
 800b8e2:	4622      	mov	r2, r4
 800b8e4:	4629      	mov	r1, r5
 800b8e6:	4630      	mov	r0, r6
 800b8e8:	f7ff ffa1 	bl	800b82e <__sfputs_r>
 800b8ec:	3001      	adds	r0, #1
 800b8ee:	f000 80a9 	beq.w	800ba44 <_vfiprintf_r+0x1f0>
 800b8f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8f4:	445a      	add	r2, fp
 800b8f6:	9209      	str	r2, [sp, #36]	; 0x24
 800b8f8:	f89a 3000 	ldrb.w	r3, [sl]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	f000 80a1 	beq.w	800ba44 <_vfiprintf_r+0x1f0>
 800b902:	2300      	movs	r3, #0
 800b904:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b908:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b90c:	f10a 0a01 	add.w	sl, sl, #1
 800b910:	9304      	str	r3, [sp, #16]
 800b912:	9307      	str	r3, [sp, #28]
 800b914:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b918:	931a      	str	r3, [sp, #104]	; 0x68
 800b91a:	4654      	mov	r4, sl
 800b91c:	2205      	movs	r2, #5
 800b91e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b922:	4854      	ldr	r0, [pc, #336]	; (800ba74 <_vfiprintf_r+0x220>)
 800b924:	f7f4 fcdc 	bl	80002e0 <memchr>
 800b928:	9a04      	ldr	r2, [sp, #16]
 800b92a:	b9d8      	cbnz	r0, 800b964 <_vfiprintf_r+0x110>
 800b92c:	06d1      	lsls	r1, r2, #27
 800b92e:	bf44      	itt	mi
 800b930:	2320      	movmi	r3, #32
 800b932:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b936:	0713      	lsls	r3, r2, #28
 800b938:	bf44      	itt	mi
 800b93a:	232b      	movmi	r3, #43	; 0x2b
 800b93c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b940:	f89a 3000 	ldrb.w	r3, [sl]
 800b944:	2b2a      	cmp	r3, #42	; 0x2a
 800b946:	d015      	beq.n	800b974 <_vfiprintf_r+0x120>
 800b948:	9a07      	ldr	r2, [sp, #28]
 800b94a:	4654      	mov	r4, sl
 800b94c:	2000      	movs	r0, #0
 800b94e:	f04f 0c0a 	mov.w	ip, #10
 800b952:	4621      	mov	r1, r4
 800b954:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b958:	3b30      	subs	r3, #48	; 0x30
 800b95a:	2b09      	cmp	r3, #9
 800b95c:	d94d      	bls.n	800b9fa <_vfiprintf_r+0x1a6>
 800b95e:	b1b0      	cbz	r0, 800b98e <_vfiprintf_r+0x13a>
 800b960:	9207      	str	r2, [sp, #28]
 800b962:	e014      	b.n	800b98e <_vfiprintf_r+0x13a>
 800b964:	eba0 0308 	sub.w	r3, r0, r8
 800b968:	fa09 f303 	lsl.w	r3, r9, r3
 800b96c:	4313      	orrs	r3, r2
 800b96e:	9304      	str	r3, [sp, #16]
 800b970:	46a2      	mov	sl, r4
 800b972:	e7d2      	b.n	800b91a <_vfiprintf_r+0xc6>
 800b974:	9b03      	ldr	r3, [sp, #12]
 800b976:	1d19      	adds	r1, r3, #4
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	9103      	str	r1, [sp, #12]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	bfbb      	ittet	lt
 800b980:	425b      	neglt	r3, r3
 800b982:	f042 0202 	orrlt.w	r2, r2, #2
 800b986:	9307      	strge	r3, [sp, #28]
 800b988:	9307      	strlt	r3, [sp, #28]
 800b98a:	bfb8      	it	lt
 800b98c:	9204      	strlt	r2, [sp, #16]
 800b98e:	7823      	ldrb	r3, [r4, #0]
 800b990:	2b2e      	cmp	r3, #46	; 0x2e
 800b992:	d10c      	bne.n	800b9ae <_vfiprintf_r+0x15a>
 800b994:	7863      	ldrb	r3, [r4, #1]
 800b996:	2b2a      	cmp	r3, #42	; 0x2a
 800b998:	d134      	bne.n	800ba04 <_vfiprintf_r+0x1b0>
 800b99a:	9b03      	ldr	r3, [sp, #12]
 800b99c:	1d1a      	adds	r2, r3, #4
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	9203      	str	r2, [sp, #12]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	bfb8      	it	lt
 800b9a6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b9aa:	3402      	adds	r4, #2
 800b9ac:	9305      	str	r3, [sp, #20]
 800b9ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ba84 <_vfiprintf_r+0x230>
 800b9b2:	7821      	ldrb	r1, [r4, #0]
 800b9b4:	2203      	movs	r2, #3
 800b9b6:	4650      	mov	r0, sl
 800b9b8:	f7f4 fc92 	bl	80002e0 <memchr>
 800b9bc:	b138      	cbz	r0, 800b9ce <_vfiprintf_r+0x17a>
 800b9be:	9b04      	ldr	r3, [sp, #16]
 800b9c0:	eba0 000a 	sub.w	r0, r0, sl
 800b9c4:	2240      	movs	r2, #64	; 0x40
 800b9c6:	4082      	lsls	r2, r0
 800b9c8:	4313      	orrs	r3, r2
 800b9ca:	3401      	adds	r4, #1
 800b9cc:	9304      	str	r3, [sp, #16]
 800b9ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9d2:	4829      	ldr	r0, [pc, #164]	; (800ba78 <_vfiprintf_r+0x224>)
 800b9d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9d8:	2206      	movs	r2, #6
 800b9da:	f7f4 fc81 	bl	80002e0 <memchr>
 800b9de:	2800      	cmp	r0, #0
 800b9e0:	d03f      	beq.n	800ba62 <_vfiprintf_r+0x20e>
 800b9e2:	4b26      	ldr	r3, [pc, #152]	; (800ba7c <_vfiprintf_r+0x228>)
 800b9e4:	bb1b      	cbnz	r3, 800ba2e <_vfiprintf_r+0x1da>
 800b9e6:	9b03      	ldr	r3, [sp, #12]
 800b9e8:	3307      	adds	r3, #7
 800b9ea:	f023 0307 	bic.w	r3, r3, #7
 800b9ee:	3308      	adds	r3, #8
 800b9f0:	9303      	str	r3, [sp, #12]
 800b9f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9f4:	443b      	add	r3, r7
 800b9f6:	9309      	str	r3, [sp, #36]	; 0x24
 800b9f8:	e768      	b.n	800b8cc <_vfiprintf_r+0x78>
 800b9fa:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9fe:	460c      	mov	r4, r1
 800ba00:	2001      	movs	r0, #1
 800ba02:	e7a6      	b.n	800b952 <_vfiprintf_r+0xfe>
 800ba04:	2300      	movs	r3, #0
 800ba06:	3401      	adds	r4, #1
 800ba08:	9305      	str	r3, [sp, #20]
 800ba0a:	4619      	mov	r1, r3
 800ba0c:	f04f 0c0a 	mov.w	ip, #10
 800ba10:	4620      	mov	r0, r4
 800ba12:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba16:	3a30      	subs	r2, #48	; 0x30
 800ba18:	2a09      	cmp	r2, #9
 800ba1a:	d903      	bls.n	800ba24 <_vfiprintf_r+0x1d0>
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d0c6      	beq.n	800b9ae <_vfiprintf_r+0x15a>
 800ba20:	9105      	str	r1, [sp, #20]
 800ba22:	e7c4      	b.n	800b9ae <_vfiprintf_r+0x15a>
 800ba24:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba28:	4604      	mov	r4, r0
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	e7f0      	b.n	800ba10 <_vfiprintf_r+0x1bc>
 800ba2e:	ab03      	add	r3, sp, #12
 800ba30:	9300      	str	r3, [sp, #0]
 800ba32:	462a      	mov	r2, r5
 800ba34:	4b12      	ldr	r3, [pc, #72]	; (800ba80 <_vfiprintf_r+0x22c>)
 800ba36:	a904      	add	r1, sp, #16
 800ba38:	4630      	mov	r0, r6
 800ba3a:	f7fd ff21 	bl	8009880 <_printf_float>
 800ba3e:	4607      	mov	r7, r0
 800ba40:	1c78      	adds	r0, r7, #1
 800ba42:	d1d6      	bne.n	800b9f2 <_vfiprintf_r+0x19e>
 800ba44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba46:	07d9      	lsls	r1, r3, #31
 800ba48:	d405      	bmi.n	800ba56 <_vfiprintf_r+0x202>
 800ba4a:	89ab      	ldrh	r3, [r5, #12]
 800ba4c:	059a      	lsls	r2, r3, #22
 800ba4e:	d402      	bmi.n	800ba56 <_vfiprintf_r+0x202>
 800ba50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba52:	f7fe fc55 	bl	800a300 <__retarget_lock_release_recursive>
 800ba56:	89ab      	ldrh	r3, [r5, #12]
 800ba58:	065b      	lsls	r3, r3, #25
 800ba5a:	f53f af1d 	bmi.w	800b898 <_vfiprintf_r+0x44>
 800ba5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba60:	e71c      	b.n	800b89c <_vfiprintf_r+0x48>
 800ba62:	ab03      	add	r3, sp, #12
 800ba64:	9300      	str	r3, [sp, #0]
 800ba66:	462a      	mov	r2, r5
 800ba68:	4b05      	ldr	r3, [pc, #20]	; (800ba80 <_vfiprintf_r+0x22c>)
 800ba6a:	a904      	add	r1, sp, #16
 800ba6c:	4630      	mov	r0, r6
 800ba6e:	f7fe f98f 	bl	8009d90 <_printf_i>
 800ba72:	e7e4      	b.n	800ba3e <_vfiprintf_r+0x1ea>
 800ba74:	0800c234 	.word	0x0800c234
 800ba78:	0800c23e 	.word	0x0800c23e
 800ba7c:	08009881 	.word	0x08009881
 800ba80:	0800b82f 	.word	0x0800b82f
 800ba84:	0800c23a 	.word	0x0800c23a

0800ba88 <__sflush_r>:
 800ba88:	898a      	ldrh	r2, [r1, #12]
 800ba8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba8e:	4605      	mov	r5, r0
 800ba90:	0710      	lsls	r0, r2, #28
 800ba92:	460c      	mov	r4, r1
 800ba94:	d458      	bmi.n	800bb48 <__sflush_r+0xc0>
 800ba96:	684b      	ldr	r3, [r1, #4]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	dc05      	bgt.n	800baa8 <__sflush_r+0x20>
 800ba9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	dc02      	bgt.n	800baa8 <__sflush_r+0x20>
 800baa2:	2000      	movs	r0, #0
 800baa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baa8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800baaa:	2e00      	cmp	r6, #0
 800baac:	d0f9      	beq.n	800baa2 <__sflush_r+0x1a>
 800baae:	2300      	movs	r3, #0
 800bab0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bab4:	682f      	ldr	r7, [r5, #0]
 800bab6:	6a21      	ldr	r1, [r4, #32]
 800bab8:	602b      	str	r3, [r5, #0]
 800baba:	d032      	beq.n	800bb22 <__sflush_r+0x9a>
 800babc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800babe:	89a3      	ldrh	r3, [r4, #12]
 800bac0:	075a      	lsls	r2, r3, #29
 800bac2:	d505      	bpl.n	800bad0 <__sflush_r+0x48>
 800bac4:	6863      	ldr	r3, [r4, #4]
 800bac6:	1ac0      	subs	r0, r0, r3
 800bac8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800baca:	b10b      	cbz	r3, 800bad0 <__sflush_r+0x48>
 800bacc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bace:	1ac0      	subs	r0, r0, r3
 800bad0:	2300      	movs	r3, #0
 800bad2:	4602      	mov	r2, r0
 800bad4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bad6:	6a21      	ldr	r1, [r4, #32]
 800bad8:	4628      	mov	r0, r5
 800bada:	47b0      	blx	r6
 800badc:	1c43      	adds	r3, r0, #1
 800bade:	89a3      	ldrh	r3, [r4, #12]
 800bae0:	d106      	bne.n	800baf0 <__sflush_r+0x68>
 800bae2:	6829      	ldr	r1, [r5, #0]
 800bae4:	291d      	cmp	r1, #29
 800bae6:	d82b      	bhi.n	800bb40 <__sflush_r+0xb8>
 800bae8:	4a29      	ldr	r2, [pc, #164]	; (800bb90 <__sflush_r+0x108>)
 800baea:	410a      	asrs	r2, r1
 800baec:	07d6      	lsls	r6, r2, #31
 800baee:	d427      	bmi.n	800bb40 <__sflush_r+0xb8>
 800baf0:	2200      	movs	r2, #0
 800baf2:	6062      	str	r2, [r4, #4]
 800baf4:	04d9      	lsls	r1, r3, #19
 800baf6:	6922      	ldr	r2, [r4, #16]
 800baf8:	6022      	str	r2, [r4, #0]
 800bafa:	d504      	bpl.n	800bb06 <__sflush_r+0x7e>
 800bafc:	1c42      	adds	r2, r0, #1
 800bafe:	d101      	bne.n	800bb04 <__sflush_r+0x7c>
 800bb00:	682b      	ldr	r3, [r5, #0]
 800bb02:	b903      	cbnz	r3, 800bb06 <__sflush_r+0x7e>
 800bb04:	6560      	str	r0, [r4, #84]	; 0x54
 800bb06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb08:	602f      	str	r7, [r5, #0]
 800bb0a:	2900      	cmp	r1, #0
 800bb0c:	d0c9      	beq.n	800baa2 <__sflush_r+0x1a>
 800bb0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb12:	4299      	cmp	r1, r3
 800bb14:	d002      	beq.n	800bb1c <__sflush_r+0x94>
 800bb16:	4628      	mov	r0, r5
 800bb18:	f7ff f9f6 	bl	800af08 <_free_r>
 800bb1c:	2000      	movs	r0, #0
 800bb1e:	6360      	str	r0, [r4, #52]	; 0x34
 800bb20:	e7c0      	b.n	800baa4 <__sflush_r+0x1c>
 800bb22:	2301      	movs	r3, #1
 800bb24:	4628      	mov	r0, r5
 800bb26:	47b0      	blx	r6
 800bb28:	1c41      	adds	r1, r0, #1
 800bb2a:	d1c8      	bne.n	800babe <__sflush_r+0x36>
 800bb2c:	682b      	ldr	r3, [r5, #0]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d0c5      	beq.n	800babe <__sflush_r+0x36>
 800bb32:	2b1d      	cmp	r3, #29
 800bb34:	d001      	beq.n	800bb3a <__sflush_r+0xb2>
 800bb36:	2b16      	cmp	r3, #22
 800bb38:	d101      	bne.n	800bb3e <__sflush_r+0xb6>
 800bb3a:	602f      	str	r7, [r5, #0]
 800bb3c:	e7b1      	b.n	800baa2 <__sflush_r+0x1a>
 800bb3e:	89a3      	ldrh	r3, [r4, #12]
 800bb40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb44:	81a3      	strh	r3, [r4, #12]
 800bb46:	e7ad      	b.n	800baa4 <__sflush_r+0x1c>
 800bb48:	690f      	ldr	r7, [r1, #16]
 800bb4a:	2f00      	cmp	r7, #0
 800bb4c:	d0a9      	beq.n	800baa2 <__sflush_r+0x1a>
 800bb4e:	0793      	lsls	r3, r2, #30
 800bb50:	680e      	ldr	r6, [r1, #0]
 800bb52:	bf08      	it	eq
 800bb54:	694b      	ldreq	r3, [r1, #20]
 800bb56:	600f      	str	r7, [r1, #0]
 800bb58:	bf18      	it	ne
 800bb5a:	2300      	movne	r3, #0
 800bb5c:	eba6 0807 	sub.w	r8, r6, r7
 800bb60:	608b      	str	r3, [r1, #8]
 800bb62:	f1b8 0f00 	cmp.w	r8, #0
 800bb66:	dd9c      	ble.n	800baa2 <__sflush_r+0x1a>
 800bb68:	6a21      	ldr	r1, [r4, #32]
 800bb6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bb6c:	4643      	mov	r3, r8
 800bb6e:	463a      	mov	r2, r7
 800bb70:	4628      	mov	r0, r5
 800bb72:	47b0      	blx	r6
 800bb74:	2800      	cmp	r0, #0
 800bb76:	dc06      	bgt.n	800bb86 <__sflush_r+0xfe>
 800bb78:	89a3      	ldrh	r3, [r4, #12]
 800bb7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb7e:	81a3      	strh	r3, [r4, #12]
 800bb80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb84:	e78e      	b.n	800baa4 <__sflush_r+0x1c>
 800bb86:	4407      	add	r7, r0
 800bb88:	eba8 0800 	sub.w	r8, r8, r0
 800bb8c:	e7e9      	b.n	800bb62 <__sflush_r+0xda>
 800bb8e:	bf00      	nop
 800bb90:	dfbffffe 	.word	0xdfbffffe

0800bb94 <_fflush_r>:
 800bb94:	b538      	push	{r3, r4, r5, lr}
 800bb96:	690b      	ldr	r3, [r1, #16]
 800bb98:	4605      	mov	r5, r0
 800bb9a:	460c      	mov	r4, r1
 800bb9c:	b913      	cbnz	r3, 800bba4 <_fflush_r+0x10>
 800bb9e:	2500      	movs	r5, #0
 800bba0:	4628      	mov	r0, r5
 800bba2:	bd38      	pop	{r3, r4, r5, pc}
 800bba4:	b118      	cbz	r0, 800bbae <_fflush_r+0x1a>
 800bba6:	6a03      	ldr	r3, [r0, #32]
 800bba8:	b90b      	cbnz	r3, 800bbae <_fflush_r+0x1a>
 800bbaa:	f7fe fa9f 	bl	800a0ec <__sinit>
 800bbae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d0f3      	beq.n	800bb9e <_fflush_r+0xa>
 800bbb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bbb8:	07d0      	lsls	r0, r2, #31
 800bbba:	d404      	bmi.n	800bbc6 <_fflush_r+0x32>
 800bbbc:	0599      	lsls	r1, r3, #22
 800bbbe:	d402      	bmi.n	800bbc6 <_fflush_r+0x32>
 800bbc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bbc2:	f7fe fb9c 	bl	800a2fe <__retarget_lock_acquire_recursive>
 800bbc6:	4628      	mov	r0, r5
 800bbc8:	4621      	mov	r1, r4
 800bbca:	f7ff ff5d 	bl	800ba88 <__sflush_r>
 800bbce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bbd0:	07da      	lsls	r2, r3, #31
 800bbd2:	4605      	mov	r5, r0
 800bbd4:	d4e4      	bmi.n	800bba0 <_fflush_r+0xc>
 800bbd6:	89a3      	ldrh	r3, [r4, #12]
 800bbd8:	059b      	lsls	r3, r3, #22
 800bbda:	d4e1      	bmi.n	800bba0 <_fflush_r+0xc>
 800bbdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bbde:	f7fe fb8f 	bl	800a300 <__retarget_lock_release_recursive>
 800bbe2:	e7dd      	b.n	800bba0 <_fflush_r+0xc>

0800bbe4 <__swbuf_r>:
 800bbe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbe6:	460e      	mov	r6, r1
 800bbe8:	4614      	mov	r4, r2
 800bbea:	4605      	mov	r5, r0
 800bbec:	b118      	cbz	r0, 800bbf6 <__swbuf_r+0x12>
 800bbee:	6a03      	ldr	r3, [r0, #32]
 800bbf0:	b90b      	cbnz	r3, 800bbf6 <__swbuf_r+0x12>
 800bbf2:	f7fe fa7b 	bl	800a0ec <__sinit>
 800bbf6:	69a3      	ldr	r3, [r4, #24]
 800bbf8:	60a3      	str	r3, [r4, #8]
 800bbfa:	89a3      	ldrh	r3, [r4, #12]
 800bbfc:	071a      	lsls	r2, r3, #28
 800bbfe:	d525      	bpl.n	800bc4c <__swbuf_r+0x68>
 800bc00:	6923      	ldr	r3, [r4, #16]
 800bc02:	b31b      	cbz	r3, 800bc4c <__swbuf_r+0x68>
 800bc04:	6823      	ldr	r3, [r4, #0]
 800bc06:	6922      	ldr	r2, [r4, #16]
 800bc08:	1a98      	subs	r0, r3, r2
 800bc0a:	6963      	ldr	r3, [r4, #20]
 800bc0c:	b2f6      	uxtb	r6, r6
 800bc0e:	4283      	cmp	r3, r0
 800bc10:	4637      	mov	r7, r6
 800bc12:	dc04      	bgt.n	800bc1e <__swbuf_r+0x3a>
 800bc14:	4621      	mov	r1, r4
 800bc16:	4628      	mov	r0, r5
 800bc18:	f7ff ffbc 	bl	800bb94 <_fflush_r>
 800bc1c:	b9e0      	cbnz	r0, 800bc58 <__swbuf_r+0x74>
 800bc1e:	68a3      	ldr	r3, [r4, #8]
 800bc20:	3b01      	subs	r3, #1
 800bc22:	60a3      	str	r3, [r4, #8]
 800bc24:	6823      	ldr	r3, [r4, #0]
 800bc26:	1c5a      	adds	r2, r3, #1
 800bc28:	6022      	str	r2, [r4, #0]
 800bc2a:	701e      	strb	r6, [r3, #0]
 800bc2c:	6962      	ldr	r2, [r4, #20]
 800bc2e:	1c43      	adds	r3, r0, #1
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d004      	beq.n	800bc3e <__swbuf_r+0x5a>
 800bc34:	89a3      	ldrh	r3, [r4, #12]
 800bc36:	07db      	lsls	r3, r3, #31
 800bc38:	d506      	bpl.n	800bc48 <__swbuf_r+0x64>
 800bc3a:	2e0a      	cmp	r6, #10
 800bc3c:	d104      	bne.n	800bc48 <__swbuf_r+0x64>
 800bc3e:	4621      	mov	r1, r4
 800bc40:	4628      	mov	r0, r5
 800bc42:	f7ff ffa7 	bl	800bb94 <_fflush_r>
 800bc46:	b938      	cbnz	r0, 800bc58 <__swbuf_r+0x74>
 800bc48:	4638      	mov	r0, r7
 800bc4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc4c:	4621      	mov	r1, r4
 800bc4e:	4628      	mov	r0, r5
 800bc50:	f000 f806 	bl	800bc60 <__swsetup_r>
 800bc54:	2800      	cmp	r0, #0
 800bc56:	d0d5      	beq.n	800bc04 <__swbuf_r+0x20>
 800bc58:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bc5c:	e7f4      	b.n	800bc48 <__swbuf_r+0x64>
	...

0800bc60 <__swsetup_r>:
 800bc60:	b538      	push	{r3, r4, r5, lr}
 800bc62:	4b2a      	ldr	r3, [pc, #168]	; (800bd0c <__swsetup_r+0xac>)
 800bc64:	4605      	mov	r5, r0
 800bc66:	6818      	ldr	r0, [r3, #0]
 800bc68:	460c      	mov	r4, r1
 800bc6a:	b118      	cbz	r0, 800bc74 <__swsetup_r+0x14>
 800bc6c:	6a03      	ldr	r3, [r0, #32]
 800bc6e:	b90b      	cbnz	r3, 800bc74 <__swsetup_r+0x14>
 800bc70:	f7fe fa3c 	bl	800a0ec <__sinit>
 800bc74:	89a3      	ldrh	r3, [r4, #12]
 800bc76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc7a:	0718      	lsls	r0, r3, #28
 800bc7c:	d422      	bmi.n	800bcc4 <__swsetup_r+0x64>
 800bc7e:	06d9      	lsls	r1, r3, #27
 800bc80:	d407      	bmi.n	800bc92 <__swsetup_r+0x32>
 800bc82:	2309      	movs	r3, #9
 800bc84:	602b      	str	r3, [r5, #0]
 800bc86:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bc8a:	81a3      	strh	r3, [r4, #12]
 800bc8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc90:	e034      	b.n	800bcfc <__swsetup_r+0x9c>
 800bc92:	0758      	lsls	r0, r3, #29
 800bc94:	d512      	bpl.n	800bcbc <__swsetup_r+0x5c>
 800bc96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc98:	b141      	cbz	r1, 800bcac <__swsetup_r+0x4c>
 800bc9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc9e:	4299      	cmp	r1, r3
 800bca0:	d002      	beq.n	800bca8 <__swsetup_r+0x48>
 800bca2:	4628      	mov	r0, r5
 800bca4:	f7ff f930 	bl	800af08 <_free_r>
 800bca8:	2300      	movs	r3, #0
 800bcaa:	6363      	str	r3, [r4, #52]	; 0x34
 800bcac:	89a3      	ldrh	r3, [r4, #12]
 800bcae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bcb2:	81a3      	strh	r3, [r4, #12]
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	6063      	str	r3, [r4, #4]
 800bcb8:	6923      	ldr	r3, [r4, #16]
 800bcba:	6023      	str	r3, [r4, #0]
 800bcbc:	89a3      	ldrh	r3, [r4, #12]
 800bcbe:	f043 0308 	orr.w	r3, r3, #8
 800bcc2:	81a3      	strh	r3, [r4, #12]
 800bcc4:	6923      	ldr	r3, [r4, #16]
 800bcc6:	b94b      	cbnz	r3, 800bcdc <__swsetup_r+0x7c>
 800bcc8:	89a3      	ldrh	r3, [r4, #12]
 800bcca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bcce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bcd2:	d003      	beq.n	800bcdc <__swsetup_r+0x7c>
 800bcd4:	4621      	mov	r1, r4
 800bcd6:	4628      	mov	r0, r5
 800bcd8:	f000 f8b6 	bl	800be48 <__smakebuf_r>
 800bcdc:	89a0      	ldrh	r0, [r4, #12]
 800bcde:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bce2:	f010 0301 	ands.w	r3, r0, #1
 800bce6:	d00a      	beq.n	800bcfe <__swsetup_r+0x9e>
 800bce8:	2300      	movs	r3, #0
 800bcea:	60a3      	str	r3, [r4, #8]
 800bcec:	6963      	ldr	r3, [r4, #20]
 800bcee:	425b      	negs	r3, r3
 800bcf0:	61a3      	str	r3, [r4, #24]
 800bcf2:	6923      	ldr	r3, [r4, #16]
 800bcf4:	b943      	cbnz	r3, 800bd08 <__swsetup_r+0xa8>
 800bcf6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bcfa:	d1c4      	bne.n	800bc86 <__swsetup_r+0x26>
 800bcfc:	bd38      	pop	{r3, r4, r5, pc}
 800bcfe:	0781      	lsls	r1, r0, #30
 800bd00:	bf58      	it	pl
 800bd02:	6963      	ldrpl	r3, [r4, #20]
 800bd04:	60a3      	str	r3, [r4, #8]
 800bd06:	e7f4      	b.n	800bcf2 <__swsetup_r+0x92>
 800bd08:	2000      	movs	r0, #0
 800bd0a:	e7f7      	b.n	800bcfc <__swsetup_r+0x9c>
 800bd0c:	24000080 	.word	0x24000080

0800bd10 <_sbrk_r>:
 800bd10:	b538      	push	{r3, r4, r5, lr}
 800bd12:	4d06      	ldr	r5, [pc, #24]	; (800bd2c <_sbrk_r+0x1c>)
 800bd14:	2300      	movs	r3, #0
 800bd16:	4604      	mov	r4, r0
 800bd18:	4608      	mov	r0, r1
 800bd1a:	602b      	str	r3, [r5, #0]
 800bd1c:	f7f5 fb6e 	bl	80013fc <_sbrk>
 800bd20:	1c43      	adds	r3, r0, #1
 800bd22:	d102      	bne.n	800bd2a <_sbrk_r+0x1a>
 800bd24:	682b      	ldr	r3, [r5, #0]
 800bd26:	b103      	cbz	r3, 800bd2a <_sbrk_r+0x1a>
 800bd28:	6023      	str	r3, [r4, #0]
 800bd2a:	bd38      	pop	{r3, r4, r5, pc}
 800bd2c:	24000610 	.word	0x24000610

0800bd30 <__assert_func>:
 800bd30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd32:	4614      	mov	r4, r2
 800bd34:	461a      	mov	r2, r3
 800bd36:	4b09      	ldr	r3, [pc, #36]	; (800bd5c <__assert_func+0x2c>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	4605      	mov	r5, r0
 800bd3c:	68d8      	ldr	r0, [r3, #12]
 800bd3e:	b14c      	cbz	r4, 800bd54 <__assert_func+0x24>
 800bd40:	4b07      	ldr	r3, [pc, #28]	; (800bd60 <__assert_func+0x30>)
 800bd42:	9100      	str	r1, [sp, #0]
 800bd44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bd48:	4906      	ldr	r1, [pc, #24]	; (800bd64 <__assert_func+0x34>)
 800bd4a:	462b      	mov	r3, r5
 800bd4c:	f000 f844 	bl	800bdd8 <fiprintf>
 800bd50:	f000 f8d8 	bl	800bf04 <abort>
 800bd54:	4b04      	ldr	r3, [pc, #16]	; (800bd68 <__assert_func+0x38>)
 800bd56:	461c      	mov	r4, r3
 800bd58:	e7f3      	b.n	800bd42 <__assert_func+0x12>
 800bd5a:	bf00      	nop
 800bd5c:	24000080 	.word	0x24000080
 800bd60:	0800c24f 	.word	0x0800c24f
 800bd64:	0800c25c 	.word	0x0800c25c
 800bd68:	0800c28a 	.word	0x0800c28a

0800bd6c <_calloc_r>:
 800bd6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bd6e:	fba1 2402 	umull	r2, r4, r1, r2
 800bd72:	b94c      	cbnz	r4, 800bd88 <_calloc_r+0x1c>
 800bd74:	4611      	mov	r1, r2
 800bd76:	9201      	str	r2, [sp, #4]
 800bd78:	f7ff f93a 	bl	800aff0 <_malloc_r>
 800bd7c:	9a01      	ldr	r2, [sp, #4]
 800bd7e:	4605      	mov	r5, r0
 800bd80:	b930      	cbnz	r0, 800bd90 <_calloc_r+0x24>
 800bd82:	4628      	mov	r0, r5
 800bd84:	b003      	add	sp, #12
 800bd86:	bd30      	pop	{r4, r5, pc}
 800bd88:	220c      	movs	r2, #12
 800bd8a:	6002      	str	r2, [r0, #0]
 800bd8c:	2500      	movs	r5, #0
 800bd8e:	e7f8      	b.n	800bd82 <_calloc_r+0x16>
 800bd90:	4621      	mov	r1, r4
 800bd92:	f7fe fa36 	bl	800a202 <memset>
 800bd96:	e7f4      	b.n	800bd82 <_calloc_r+0x16>

0800bd98 <__ascii_mbtowc>:
 800bd98:	b082      	sub	sp, #8
 800bd9a:	b901      	cbnz	r1, 800bd9e <__ascii_mbtowc+0x6>
 800bd9c:	a901      	add	r1, sp, #4
 800bd9e:	b142      	cbz	r2, 800bdb2 <__ascii_mbtowc+0x1a>
 800bda0:	b14b      	cbz	r3, 800bdb6 <__ascii_mbtowc+0x1e>
 800bda2:	7813      	ldrb	r3, [r2, #0]
 800bda4:	600b      	str	r3, [r1, #0]
 800bda6:	7812      	ldrb	r2, [r2, #0]
 800bda8:	1e10      	subs	r0, r2, #0
 800bdaa:	bf18      	it	ne
 800bdac:	2001      	movne	r0, #1
 800bdae:	b002      	add	sp, #8
 800bdb0:	4770      	bx	lr
 800bdb2:	4610      	mov	r0, r2
 800bdb4:	e7fb      	b.n	800bdae <__ascii_mbtowc+0x16>
 800bdb6:	f06f 0001 	mvn.w	r0, #1
 800bdba:	e7f8      	b.n	800bdae <__ascii_mbtowc+0x16>

0800bdbc <__ascii_wctomb>:
 800bdbc:	b149      	cbz	r1, 800bdd2 <__ascii_wctomb+0x16>
 800bdbe:	2aff      	cmp	r2, #255	; 0xff
 800bdc0:	bf85      	ittet	hi
 800bdc2:	238a      	movhi	r3, #138	; 0x8a
 800bdc4:	6003      	strhi	r3, [r0, #0]
 800bdc6:	700a      	strbls	r2, [r1, #0]
 800bdc8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800bdcc:	bf98      	it	ls
 800bdce:	2001      	movls	r0, #1
 800bdd0:	4770      	bx	lr
 800bdd2:	4608      	mov	r0, r1
 800bdd4:	4770      	bx	lr
	...

0800bdd8 <fiprintf>:
 800bdd8:	b40e      	push	{r1, r2, r3}
 800bdda:	b503      	push	{r0, r1, lr}
 800bddc:	4601      	mov	r1, r0
 800bdde:	ab03      	add	r3, sp, #12
 800bde0:	4805      	ldr	r0, [pc, #20]	; (800bdf8 <fiprintf+0x20>)
 800bde2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bde6:	6800      	ldr	r0, [r0, #0]
 800bde8:	9301      	str	r3, [sp, #4]
 800bdea:	f7ff fd33 	bl	800b854 <_vfiprintf_r>
 800bdee:	b002      	add	sp, #8
 800bdf0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdf4:	b003      	add	sp, #12
 800bdf6:	4770      	bx	lr
 800bdf8:	24000080 	.word	0x24000080

0800bdfc <__swhatbuf_r>:
 800bdfc:	b570      	push	{r4, r5, r6, lr}
 800bdfe:	460c      	mov	r4, r1
 800be00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be04:	2900      	cmp	r1, #0
 800be06:	b096      	sub	sp, #88	; 0x58
 800be08:	4615      	mov	r5, r2
 800be0a:	461e      	mov	r6, r3
 800be0c:	da0d      	bge.n	800be2a <__swhatbuf_r+0x2e>
 800be0e:	89a3      	ldrh	r3, [r4, #12]
 800be10:	f013 0f80 	tst.w	r3, #128	; 0x80
 800be14:	f04f 0100 	mov.w	r1, #0
 800be18:	bf0c      	ite	eq
 800be1a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800be1e:	2340      	movne	r3, #64	; 0x40
 800be20:	2000      	movs	r0, #0
 800be22:	6031      	str	r1, [r6, #0]
 800be24:	602b      	str	r3, [r5, #0]
 800be26:	b016      	add	sp, #88	; 0x58
 800be28:	bd70      	pop	{r4, r5, r6, pc}
 800be2a:	466a      	mov	r2, sp
 800be2c:	f000 f848 	bl	800bec0 <_fstat_r>
 800be30:	2800      	cmp	r0, #0
 800be32:	dbec      	blt.n	800be0e <__swhatbuf_r+0x12>
 800be34:	9901      	ldr	r1, [sp, #4]
 800be36:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800be3a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800be3e:	4259      	negs	r1, r3
 800be40:	4159      	adcs	r1, r3
 800be42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be46:	e7eb      	b.n	800be20 <__swhatbuf_r+0x24>

0800be48 <__smakebuf_r>:
 800be48:	898b      	ldrh	r3, [r1, #12]
 800be4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800be4c:	079d      	lsls	r5, r3, #30
 800be4e:	4606      	mov	r6, r0
 800be50:	460c      	mov	r4, r1
 800be52:	d507      	bpl.n	800be64 <__smakebuf_r+0x1c>
 800be54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800be58:	6023      	str	r3, [r4, #0]
 800be5a:	6123      	str	r3, [r4, #16]
 800be5c:	2301      	movs	r3, #1
 800be5e:	6163      	str	r3, [r4, #20]
 800be60:	b002      	add	sp, #8
 800be62:	bd70      	pop	{r4, r5, r6, pc}
 800be64:	ab01      	add	r3, sp, #4
 800be66:	466a      	mov	r2, sp
 800be68:	f7ff ffc8 	bl	800bdfc <__swhatbuf_r>
 800be6c:	9900      	ldr	r1, [sp, #0]
 800be6e:	4605      	mov	r5, r0
 800be70:	4630      	mov	r0, r6
 800be72:	f7ff f8bd 	bl	800aff0 <_malloc_r>
 800be76:	b948      	cbnz	r0, 800be8c <__smakebuf_r+0x44>
 800be78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be7c:	059a      	lsls	r2, r3, #22
 800be7e:	d4ef      	bmi.n	800be60 <__smakebuf_r+0x18>
 800be80:	f023 0303 	bic.w	r3, r3, #3
 800be84:	f043 0302 	orr.w	r3, r3, #2
 800be88:	81a3      	strh	r3, [r4, #12]
 800be8a:	e7e3      	b.n	800be54 <__smakebuf_r+0xc>
 800be8c:	89a3      	ldrh	r3, [r4, #12]
 800be8e:	6020      	str	r0, [r4, #0]
 800be90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be94:	81a3      	strh	r3, [r4, #12]
 800be96:	9b00      	ldr	r3, [sp, #0]
 800be98:	6163      	str	r3, [r4, #20]
 800be9a:	9b01      	ldr	r3, [sp, #4]
 800be9c:	6120      	str	r0, [r4, #16]
 800be9e:	b15b      	cbz	r3, 800beb8 <__smakebuf_r+0x70>
 800bea0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bea4:	4630      	mov	r0, r6
 800bea6:	f000 f81d 	bl	800bee4 <_isatty_r>
 800beaa:	b128      	cbz	r0, 800beb8 <__smakebuf_r+0x70>
 800beac:	89a3      	ldrh	r3, [r4, #12]
 800beae:	f023 0303 	bic.w	r3, r3, #3
 800beb2:	f043 0301 	orr.w	r3, r3, #1
 800beb6:	81a3      	strh	r3, [r4, #12]
 800beb8:	89a3      	ldrh	r3, [r4, #12]
 800beba:	431d      	orrs	r5, r3
 800bebc:	81a5      	strh	r5, [r4, #12]
 800bebe:	e7cf      	b.n	800be60 <__smakebuf_r+0x18>

0800bec0 <_fstat_r>:
 800bec0:	b538      	push	{r3, r4, r5, lr}
 800bec2:	4d07      	ldr	r5, [pc, #28]	; (800bee0 <_fstat_r+0x20>)
 800bec4:	2300      	movs	r3, #0
 800bec6:	4604      	mov	r4, r0
 800bec8:	4608      	mov	r0, r1
 800beca:	4611      	mov	r1, r2
 800becc:	602b      	str	r3, [r5, #0]
 800bece:	f7f5 fa6c 	bl	80013aa <_fstat>
 800bed2:	1c43      	adds	r3, r0, #1
 800bed4:	d102      	bne.n	800bedc <_fstat_r+0x1c>
 800bed6:	682b      	ldr	r3, [r5, #0]
 800bed8:	b103      	cbz	r3, 800bedc <_fstat_r+0x1c>
 800beda:	6023      	str	r3, [r4, #0]
 800bedc:	bd38      	pop	{r3, r4, r5, pc}
 800bede:	bf00      	nop
 800bee0:	24000610 	.word	0x24000610

0800bee4 <_isatty_r>:
 800bee4:	b538      	push	{r3, r4, r5, lr}
 800bee6:	4d06      	ldr	r5, [pc, #24]	; (800bf00 <_isatty_r+0x1c>)
 800bee8:	2300      	movs	r3, #0
 800beea:	4604      	mov	r4, r0
 800beec:	4608      	mov	r0, r1
 800beee:	602b      	str	r3, [r5, #0]
 800bef0:	f7f5 fa6b 	bl	80013ca <_isatty>
 800bef4:	1c43      	adds	r3, r0, #1
 800bef6:	d102      	bne.n	800befe <_isatty_r+0x1a>
 800bef8:	682b      	ldr	r3, [r5, #0]
 800befa:	b103      	cbz	r3, 800befe <_isatty_r+0x1a>
 800befc:	6023      	str	r3, [r4, #0]
 800befe:	bd38      	pop	{r3, r4, r5, pc}
 800bf00:	24000610 	.word	0x24000610

0800bf04 <abort>:
 800bf04:	b508      	push	{r3, lr}
 800bf06:	2006      	movs	r0, #6
 800bf08:	f000 f82c 	bl	800bf64 <raise>
 800bf0c:	2001      	movs	r0, #1
 800bf0e:	f7f5 f9fd 	bl	800130c <_exit>

0800bf12 <_raise_r>:
 800bf12:	291f      	cmp	r1, #31
 800bf14:	b538      	push	{r3, r4, r5, lr}
 800bf16:	4604      	mov	r4, r0
 800bf18:	460d      	mov	r5, r1
 800bf1a:	d904      	bls.n	800bf26 <_raise_r+0x14>
 800bf1c:	2316      	movs	r3, #22
 800bf1e:	6003      	str	r3, [r0, #0]
 800bf20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf24:	bd38      	pop	{r3, r4, r5, pc}
 800bf26:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bf28:	b112      	cbz	r2, 800bf30 <_raise_r+0x1e>
 800bf2a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bf2e:	b94b      	cbnz	r3, 800bf44 <_raise_r+0x32>
 800bf30:	4620      	mov	r0, r4
 800bf32:	f000 f831 	bl	800bf98 <_getpid_r>
 800bf36:	462a      	mov	r2, r5
 800bf38:	4601      	mov	r1, r0
 800bf3a:	4620      	mov	r0, r4
 800bf3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf40:	f000 b818 	b.w	800bf74 <_kill_r>
 800bf44:	2b01      	cmp	r3, #1
 800bf46:	d00a      	beq.n	800bf5e <_raise_r+0x4c>
 800bf48:	1c59      	adds	r1, r3, #1
 800bf4a:	d103      	bne.n	800bf54 <_raise_r+0x42>
 800bf4c:	2316      	movs	r3, #22
 800bf4e:	6003      	str	r3, [r0, #0]
 800bf50:	2001      	movs	r0, #1
 800bf52:	e7e7      	b.n	800bf24 <_raise_r+0x12>
 800bf54:	2400      	movs	r4, #0
 800bf56:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bf5a:	4628      	mov	r0, r5
 800bf5c:	4798      	blx	r3
 800bf5e:	2000      	movs	r0, #0
 800bf60:	e7e0      	b.n	800bf24 <_raise_r+0x12>
	...

0800bf64 <raise>:
 800bf64:	4b02      	ldr	r3, [pc, #8]	; (800bf70 <raise+0xc>)
 800bf66:	4601      	mov	r1, r0
 800bf68:	6818      	ldr	r0, [r3, #0]
 800bf6a:	f7ff bfd2 	b.w	800bf12 <_raise_r>
 800bf6e:	bf00      	nop
 800bf70:	24000080 	.word	0x24000080

0800bf74 <_kill_r>:
 800bf74:	b538      	push	{r3, r4, r5, lr}
 800bf76:	4d07      	ldr	r5, [pc, #28]	; (800bf94 <_kill_r+0x20>)
 800bf78:	2300      	movs	r3, #0
 800bf7a:	4604      	mov	r4, r0
 800bf7c:	4608      	mov	r0, r1
 800bf7e:	4611      	mov	r1, r2
 800bf80:	602b      	str	r3, [r5, #0]
 800bf82:	f7f5 f9b3 	bl	80012ec <_kill>
 800bf86:	1c43      	adds	r3, r0, #1
 800bf88:	d102      	bne.n	800bf90 <_kill_r+0x1c>
 800bf8a:	682b      	ldr	r3, [r5, #0]
 800bf8c:	b103      	cbz	r3, 800bf90 <_kill_r+0x1c>
 800bf8e:	6023      	str	r3, [r4, #0]
 800bf90:	bd38      	pop	{r3, r4, r5, pc}
 800bf92:	bf00      	nop
 800bf94:	24000610 	.word	0x24000610

0800bf98 <_getpid_r>:
 800bf98:	f7f5 b9a0 	b.w	80012dc <_getpid>

0800bf9c <_init>:
 800bf9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf9e:	bf00      	nop
 800bfa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfa2:	bc08      	pop	{r3}
 800bfa4:	469e      	mov	lr, r3
 800bfa6:	4770      	bx	lr

0800bfa8 <_fini>:
 800bfa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfaa:	bf00      	nop
 800bfac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfae:	bc08      	pop	{r3}
 800bfb0:	469e      	mov	lr, r3
 800bfb2:	4770      	bx	lr
