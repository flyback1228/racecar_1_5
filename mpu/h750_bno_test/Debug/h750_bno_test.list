
h750_bno_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000652c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  080067cc  080067cc  000167cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080068f0  080068f0  000168f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080068f8  080068f8  000168f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080068fc  080068fc  000168fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  24000000  08006900  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002a8  24000060  08006960  00020060  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000308  08006960  00020308  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00012fe3  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002207  00000000  00000000  000330b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000d48  00000000  00000000  000352c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000a5a  00000000  00000000  00036008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003656f  00000000  00000000  00036a62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00012299  00000000  00000000  0006cfd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00158e1c  00000000  00000000  0007f26a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00003c7c  00000000  00000000  001d8088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005b  00000000  00000000  001dbd04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000060 	.word	0x24000060
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080067b4 	.word	0x080067b4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000064 	.word	0x24000064
 80002dc:	080067b4 	.word	0x080067b4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b970 	b.w	8000678 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	460d      	mov	r5, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	460f      	mov	r7, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4694      	mov	ip, r2
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0xe2>
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	b143      	cbz	r3, 80003de <__udivmoddi4+0x2e>
 80003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d0:	f1c3 0220 	rsb	r2, r3, #32
 80003d4:	409f      	lsls	r7, r3
 80003d6:	fa20 f202 	lsr.w	r2, r0, r2
 80003da:	4317      	orrs	r7, r2
 80003dc:	409c      	lsls	r4, r3
 80003de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003e2:	fa1f f58c 	uxth.w	r5, ip
 80003e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ea:	0c22      	lsrs	r2, r4, #16
 80003ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80003f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003f4:	fb01 f005 	mul.w	r0, r1, r5
 80003f8:	4290      	cmp	r0, r2
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000400:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000404:	f080 811c 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000408:	4290      	cmp	r0, r2
 800040a:	f240 8119 	bls.w	8000640 <__udivmoddi4+0x290>
 800040e:	3902      	subs	r1, #2
 8000410:	4462      	add	r2, ip
 8000412:	1a12      	subs	r2, r2, r0
 8000414:	b2a4      	uxth	r4, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000422:	fb00 f505 	mul.w	r5, r0, r5
 8000426:	42a5      	cmp	r5, r4
 8000428:	d90a      	bls.n	8000440 <__udivmoddi4+0x90>
 800042a:	eb1c 0404 	adds.w	r4, ip, r4
 800042e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000432:	f080 8107 	bcs.w	8000644 <__udivmoddi4+0x294>
 8000436:	42a5      	cmp	r5, r4
 8000438:	f240 8104 	bls.w	8000644 <__udivmoddi4+0x294>
 800043c:	4464      	add	r4, ip
 800043e:	3802      	subs	r0, #2
 8000440:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	2100      	movs	r1, #0
 8000448:	b11e      	cbz	r6, 8000452 <__udivmoddi4+0xa2>
 800044a:	40dc      	lsrs	r4, r3
 800044c:	2300      	movs	r3, #0
 800044e:	e9c6 4300 	strd	r4, r3, [r6]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0xbc>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80ed 	beq.w	800063a <__udivmoddi4+0x28a>
 8000460:	2100      	movs	r1, #0
 8000462:	e9c6 0500 	strd	r0, r5, [r6]
 8000466:	4608      	mov	r0, r1
 8000468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046c:	fab3 f183 	clz	r1, r3
 8000470:	2900      	cmp	r1, #0
 8000472:	d149      	bne.n	8000508 <__udivmoddi4+0x158>
 8000474:	42ab      	cmp	r3, r5
 8000476:	d302      	bcc.n	800047e <__udivmoddi4+0xce>
 8000478:	4282      	cmp	r2, r0
 800047a:	f200 80f8 	bhi.w	800066e <__udivmoddi4+0x2be>
 800047e:	1a84      	subs	r4, r0, r2
 8000480:	eb65 0203 	sbc.w	r2, r5, r3
 8000484:	2001      	movs	r0, #1
 8000486:	4617      	mov	r7, r2
 8000488:	2e00      	cmp	r6, #0
 800048a:	d0e2      	beq.n	8000452 <__udivmoddi4+0xa2>
 800048c:	e9c6 4700 	strd	r4, r7, [r6]
 8000490:	e7df      	b.n	8000452 <__udivmoddi4+0xa2>
 8000492:	b902      	cbnz	r2, 8000496 <__udivmoddi4+0xe6>
 8000494:	deff      	udf	#255	; 0xff
 8000496:	fab2 f382 	clz	r3, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	f040 8090 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a0:	1a8a      	subs	r2, r1, r2
 80004a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a6:	fa1f fe8c 	uxth.w	lr, ip
 80004aa:	2101      	movs	r1, #1
 80004ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80004b0:	fb07 2015 	mls	r0, r7, r5, r2
 80004b4:	0c22      	lsrs	r2, r4, #16
 80004b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ba:	fb0e f005 	mul.w	r0, lr, r5
 80004be:	4290      	cmp	r0, r2
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c2:	eb1c 0202 	adds.w	r2, ip, r2
 80004c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4290      	cmp	r0, r2
 80004ce:	f200 80cb 	bhi.w	8000668 <__udivmoddi4+0x2b8>
 80004d2:	4645      	mov	r5, r8
 80004d4:	1a12      	subs	r2, r2, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004dc:	fb07 2210 	mls	r2, r7, r0, r2
 80004e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004e4:	fb0e fe00 	mul.w	lr, lr, r0
 80004e8:	45a6      	cmp	lr, r4
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x14e>
 80004ec:	eb1c 0404 	adds.w	r4, ip, r4
 80004f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x14c>
 80004f6:	45a6      	cmp	lr, r4
 80004f8:	f200 80bb 	bhi.w	8000672 <__udivmoddi4+0x2c2>
 80004fc:	4610      	mov	r0, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000506:	e79f      	b.n	8000448 <__udivmoddi4+0x98>
 8000508:	f1c1 0720 	rsb	r7, r1, #32
 800050c:	408b      	lsls	r3, r1
 800050e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000512:	ea4c 0c03 	orr.w	ip, ip, r3
 8000516:	fa05 f401 	lsl.w	r4, r5, r1
 800051a:	fa20 f307 	lsr.w	r3, r0, r7
 800051e:	40fd      	lsrs	r5, r7
 8000520:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000524:	4323      	orrs	r3, r4
 8000526:	fbb5 f8f9 	udiv	r8, r5, r9
 800052a:	fa1f fe8c 	uxth.w	lr, ip
 800052e:	fb09 5518 	mls	r5, r9, r8, r5
 8000532:	0c1c      	lsrs	r4, r3, #16
 8000534:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000538:	fb08 f50e 	mul.w	r5, r8, lr
 800053c:	42a5      	cmp	r5, r4
 800053e:	fa02 f201 	lsl.w	r2, r2, r1
 8000542:	fa00 f001 	lsl.w	r0, r0, r1
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000550:	f080 8088 	bcs.w	8000664 <__udivmoddi4+0x2b4>
 8000554:	42a5      	cmp	r5, r4
 8000556:	f240 8085 	bls.w	8000664 <__udivmoddi4+0x2b4>
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	4464      	add	r4, ip
 8000560:	1b64      	subs	r4, r4, r5
 8000562:	b29d      	uxth	r5, r3
 8000564:	fbb4 f3f9 	udiv	r3, r4, r9
 8000568:	fb09 4413 	mls	r4, r9, r3, r4
 800056c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000570:	fb03 fe0e 	mul.w	lr, r3, lr
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000580:	d26c      	bcs.n	800065c <__udivmoddi4+0x2ac>
 8000582:	45a6      	cmp	lr, r4
 8000584:	d96a      	bls.n	800065c <__udivmoddi4+0x2ac>
 8000586:	3b02      	subs	r3, #2
 8000588:	4464      	add	r4, ip
 800058a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800058e:	fba3 9502 	umull	r9, r5, r3, r2
 8000592:	eba4 040e 	sub.w	r4, r4, lr
 8000596:	42ac      	cmp	r4, r5
 8000598:	46c8      	mov	r8, r9
 800059a:	46ae      	mov	lr, r5
 800059c:	d356      	bcc.n	800064c <__udivmoddi4+0x29c>
 800059e:	d053      	beq.n	8000648 <__udivmoddi4+0x298>
 80005a0:	b156      	cbz	r6, 80005b8 <__udivmoddi4+0x208>
 80005a2:	ebb0 0208 	subs.w	r2, r0, r8
 80005a6:	eb64 040e 	sbc.w	r4, r4, lr
 80005aa:	fa04 f707 	lsl.w	r7, r4, r7
 80005ae:	40ca      	lsrs	r2, r1
 80005b0:	40cc      	lsrs	r4, r1
 80005b2:	4317      	orrs	r7, r2
 80005b4:	e9c6 7400 	strd	r7, r4, [r6]
 80005b8:	4618      	mov	r0, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c0:	f1c3 0120 	rsb	r1, r3, #32
 80005c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005c8:	fa20 f201 	lsr.w	r2, r0, r1
 80005cc:	fa25 f101 	lsr.w	r1, r5, r1
 80005d0:	409d      	lsls	r5, r3
 80005d2:	432a      	orrs	r2, r5
 80005d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005d8:	fa1f fe8c 	uxth.w	lr, ip
 80005dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005e0:	fb07 1510 	mls	r5, r7, r0, r1
 80005e4:	0c11      	lsrs	r1, r2, #16
 80005e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ea:	fb00 f50e 	mul.w	r5, r0, lr
 80005ee:	428d      	cmp	r5, r1
 80005f0:	fa04 f403 	lsl.w	r4, r4, r3
 80005f4:	d908      	bls.n	8000608 <__udivmoddi4+0x258>
 80005f6:	eb1c 0101 	adds.w	r1, ip, r1
 80005fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005fe:	d22f      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000600:	428d      	cmp	r5, r1
 8000602:	d92d      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000604:	3802      	subs	r0, #2
 8000606:	4461      	add	r1, ip
 8000608:	1b49      	subs	r1, r1, r5
 800060a:	b292      	uxth	r2, r2
 800060c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000610:	fb07 1115 	mls	r1, r7, r5, r1
 8000614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000618:	fb05 f10e 	mul.w	r1, r5, lr
 800061c:	4291      	cmp	r1, r2
 800061e:	d908      	bls.n	8000632 <__udivmoddi4+0x282>
 8000620:	eb1c 0202 	adds.w	r2, ip, r2
 8000624:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000628:	d216      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 800062a:	4291      	cmp	r1, r2
 800062c:	d914      	bls.n	8000658 <__udivmoddi4+0x2a8>
 800062e:	3d02      	subs	r5, #2
 8000630:	4462      	add	r2, ip
 8000632:	1a52      	subs	r2, r2, r1
 8000634:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000638:	e738      	b.n	80004ac <__udivmoddi4+0xfc>
 800063a:	4631      	mov	r1, r6
 800063c:	4630      	mov	r0, r6
 800063e:	e708      	b.n	8000452 <__udivmoddi4+0xa2>
 8000640:	4639      	mov	r1, r7
 8000642:	e6e6      	b.n	8000412 <__udivmoddi4+0x62>
 8000644:	4610      	mov	r0, r2
 8000646:	e6fb      	b.n	8000440 <__udivmoddi4+0x90>
 8000648:	4548      	cmp	r0, r9
 800064a:	d2a9      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 800064c:	ebb9 0802 	subs.w	r8, r9, r2
 8000650:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000654:	3b01      	subs	r3, #1
 8000656:	e7a3      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000658:	4645      	mov	r5, r8
 800065a:	e7ea      	b.n	8000632 <__udivmoddi4+0x282>
 800065c:	462b      	mov	r3, r5
 800065e:	e794      	b.n	800058a <__udivmoddi4+0x1da>
 8000660:	4640      	mov	r0, r8
 8000662:	e7d1      	b.n	8000608 <__udivmoddi4+0x258>
 8000664:	46d0      	mov	r8, sl
 8000666:	e77b      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000668:	3d02      	subs	r5, #2
 800066a:	4462      	add	r2, ip
 800066c:	e732      	b.n	80004d4 <__udivmoddi4+0x124>
 800066e:	4608      	mov	r0, r1
 8000670:	e70a      	b.n	8000488 <__udivmoddi4+0xd8>
 8000672:	4464      	add	r4, ip
 8000674:	3802      	subs	r0, #2
 8000676:	e742      	b.n	80004fe <__udivmoddi4+0x14e>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <BNO085_setup>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void BNO085_setup(){
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BNO_P0_GPIO_Port, BNO_P0_Pin, GPIO_PIN_RESET);
 8000680:	2200      	movs	r2, #0
 8000682:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000686:	4825      	ldr	r0, [pc, #148]	; (800071c <BNO085_setup+0xa0>)
 8000688:	f001 f974 	bl	8001974 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BNO_P1_GPIO_Port, BNO_P1_Pin, GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000692:	4822      	ldr	r0, [pc, #136]	; (800071c <BNO085_setup+0xa0>)
 8000694:	f001 f96e 	bl	8001974 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BNO_BOOTN_GPIO_Port, BNO_BOOTN_Pin, GPIO_PIN_SET);
 8000698:	2201      	movs	r2, #1
 800069a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800069e:	4820      	ldr	r0, [pc, #128]	; (8000720 <BNO085_setup+0xa4>)
 80006a0:	f001 f968 	bl	8001974 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80006a4:	2064      	movs	r0, #100	; 0x64
 80006a6:	f000 fe75 	bl	8001394 <HAL_Delay>

	HAL_GPIO_WritePin(BNO_NRST_GPIO_Port,BNO_NRST_Pin,GPIO_PIN_SET);
 80006aa:	2201      	movs	r2, #1
 80006ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006b0:	481b      	ldr	r0, [pc, #108]	; (8000720 <BNO085_setup+0xa4>)
 80006b2:	f001 f95f 	bl	8001974 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80006b6:	2064      	movs	r0, #100	; 0x64
 80006b8:	f000 fe6c 	bl	8001394 <HAL_Delay>
	HAL_GPIO_WritePin(BNO_NRST_GPIO_Port,BNO_NRST_Pin,GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006c2:	4817      	ldr	r0, [pc, #92]	; (8000720 <BNO085_setup+0xa4>)
 80006c4:	f001 f956 	bl	8001974 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80006c8:	2032      	movs	r0, #50	; 0x32
 80006ca:	f000 fe63 	bl	8001394 <HAL_Delay>
	HAL_GPIO_WritePin(BNO_NRST_GPIO_Port,BNO_NRST_Pin,GPIO_PIN_SET);
 80006ce:	2201      	movs	r2, #1
 80006d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006d4:	4812      	ldr	r0, [pc, #72]	; (8000720 <BNO085_setup+0xa4>)
 80006d6:	f001 f94d 	bl	8001974 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80006da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006de:	f000 fe59 	bl	8001394 <HAL_Delay>

	HAL_GPIO_WritePin(BNO_NRST_GPIO_Port,BNO_NRST_Pin,GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006e8:	480d      	ldr	r0, [pc, #52]	; (8000720 <BNO085_setup+0xa4>)
 80006ea:	f001 f943 	bl	8001974 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80006ee:	2064      	movs	r0, #100	; 0x64
 80006f0:	f000 fe50 	bl	8001394 <HAL_Delay>
	HAL_GPIO_WritePin(BNO_NRST_GPIO_Port,BNO_NRST_Pin,GPIO_PIN_RESET);
 80006f4:	2200      	movs	r2, #0
 80006f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006fa:	4809      	ldr	r0, [pc, #36]	; (8000720 <BNO085_setup+0xa4>)
 80006fc:	f001 f93a 	bl	8001974 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000700:	2032      	movs	r0, #50	; 0x32
 8000702:	f000 fe47 	bl	8001394 <HAL_Delay>
	HAL_GPIO_WritePin(BNO_NRST_GPIO_Port,BNO_NRST_Pin,GPIO_PIN_SET);
 8000706:	2201      	movs	r2, #1
 8000708:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <BNO085_setup+0xa4>)
 800070e:	f001 f931 	bl	8001974 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000712:	2064      	movs	r0, #100	; 0x64
 8000714:	f000 fe3e 	bl	8001394 <HAL_Delay>




}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	58020c00 	.word	0x58020c00
 8000720:	58020400 	.word	0x58020400

08000724 <test_i2c>:

void test_i2c(){
 8000724:	b590      	push	{r4, r7, lr}
 8000726:	b091      	sub	sp, #68	; 0x44
 8000728:	af00      	add	r7, sp, #0

    uint8_t i;
    HAL_StatusTypeDef ret;
    uint8_t address[10];
    uint8_t length=0;
 800072a:	2300      	movs	r3, #0
 800072c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    for(i=1; i<128; i++)
 8000730:	2301      	movs	r3, #1
 8000732:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000736:	e020      	b.n	800077a <test_i2c+0x56>
    {
        ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
 8000738:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800073c:	b29b      	uxth	r3, r3
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	b299      	uxth	r1, r3
 8000742:	2305      	movs	r3, #5
 8000744:	2203      	movs	r2, #3
 8000746:	4864      	ldr	r0, [pc, #400]	; (80008d8 <test_i2c+0x1b4>)
 8000748:	f001 f9f2 	bl	8001b30 <HAL_I2C_IsDeviceReady>
 800074c:	4603      	mov	r3, r0
 800074e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        if(ret == HAL_OK)
 8000752:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000756:	2b00      	cmp	r3, #0
 8000758:	d10a      	bne.n	8000770 <test_i2c+0x4c>
        {
            address[length++]=i;
 800075a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800075e:	1c5a      	adds	r2, r3, #1
 8000760:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
 8000764:	3340      	adds	r3, #64	; 0x40
 8000766:	443b      	add	r3, r7
 8000768:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800076c:	f803 2c10 	strb.w	r2, [r3, #-16]
    for(i=1; i<128; i++)
 8000770:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000774:	3301      	adds	r3, #1
 8000776:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800077a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800077e:	2b00      	cmp	r3, #0
 8000780:	dada      	bge.n	8000738 <test_i2c+0x14>
        }
    }
    uint8_t i2c_start_msg1[] = "I2C Scanning:\n";
 8000782:	4b56      	ldr	r3, [pc, #344]	; (80008dc <test_i2c+0x1b8>)
 8000784:	f107 0420 	add.w	r4, r7, #32
 8000788:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800078a:	c407      	stmia	r4!, {r0, r1, r2}
 800078c:	8023      	strh	r3, [r4, #0]
 800078e:	3402      	adds	r4, #2
 8000790:	0c1b      	lsrs	r3, r3, #16
 8000792:	7023      	strb	r3, [r4, #0]

	char buffer[25] = {0};
 8000794:	2300      	movs	r3, #0
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	f107 0308 	add.w	r3, r7, #8
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
 80007a8:	751a      	strb	r2, [r3, #20]
	HAL_UART_Transmit(&huart7, i2c_start_msg1, sizeof(i2c_start_msg1)-1, 10);
 80007aa:	f107 0120 	add.w	r1, r7, #32
 80007ae:	230a      	movs	r3, #10
 80007b0:	220e      	movs	r2, #14
 80007b2:	484b      	ldr	r0, [pc, #300]	; (80008e0 <test_i2c+0x1bc>)
 80007b4:	f004 fa46 	bl	8004c44 <HAL_UART_Transmit>

	if(length==2){
 80007b8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80007bc:	2b02      	cmp	r3, #2
 80007be:	d10f      	bne.n	80007e0 <test_i2c+0xbc>
		sprintf(buffer, "\tI2C1 Address:0x%02X,0x%02X\n", address[0],address[1]);
 80007c0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80007c4:	461a      	mov	r2, r3
 80007c6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80007ca:	1d38      	adds	r0, r7, #4
 80007cc:	4945      	ldr	r1, [pc, #276]	; (80008e4 <test_i2c+0x1c0>)
 80007ce:	f005 fb4d 	bl	8005e6c <siprintf>
		HAL_UART_Transmit(&huart7, (uint8_t*)buffer, 24, 10);
 80007d2:	1d39      	adds	r1, r7, #4
 80007d4:	230a      	movs	r3, #10
 80007d6:	2218      	movs	r2, #24
 80007d8:	4841      	ldr	r0, [pc, #260]	; (80008e0 <test_i2c+0x1bc>)
 80007da:	f004 fa33 	bl	8004c44 <HAL_UART_Transmit>
 80007de:	e01c      	b.n	800081a <test_i2c+0xf6>
	}else if(length==1){
 80007e0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d10e      	bne.n	8000806 <test_i2c+0xe2>
		sprintf(buffer, "\tI2C1 Address:0x%02X\n", address[0]);
 80007e8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80007ec:	461a      	mov	r2, r3
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	493d      	ldr	r1, [pc, #244]	; (80008e8 <test_i2c+0x1c4>)
 80007f2:	4618      	mov	r0, r3
 80007f4:	f005 fb3a 	bl	8005e6c <siprintf>
		HAL_UART_Transmit(&huart7, (uint8_t*)buffer, 19, 10);
 80007f8:	1d39      	adds	r1, r7, #4
 80007fa:	230a      	movs	r3, #10
 80007fc:	2213      	movs	r2, #19
 80007fe:	4838      	ldr	r0, [pc, #224]	; (80008e0 <test_i2c+0x1bc>)
 8000800:	f004 fa20 	bl	8004c44 <HAL_UART_Transmit>
 8000804:	e009      	b.n	800081a <test_i2c+0xf6>
	}else if(length==0){
 8000806:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800080a:	2b00      	cmp	r3, #0
 800080c:	d105      	bne.n	800081a <test_i2c+0xf6>
		HAL_UART_Transmit(&huart7, (uint8_t*)"\tNo Device Found In I2C1\n", 25, 10);
 800080e:	230a      	movs	r3, #10
 8000810:	2219      	movs	r2, #25
 8000812:	4936      	ldr	r1, [pc, #216]	; (80008ec <test_i2c+0x1c8>)
 8000814:	4832      	ldr	r0, [pc, #200]	; (80008e0 <test_i2c+0x1bc>)
 8000816:	f004 fa15 	bl	8004c44 <HAL_UART_Transmit>
	}

    length=0;
 800081a:	2300      	movs	r3, #0
 800081c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    for(i=1; i<255; i++)
 8000820:	2301      	movs	r3, #1
 8000822:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000826:	e01e      	b.n	8000866 <test_i2c+0x142>
	{
		ret = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i), 3, 5);
 8000828:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800082c:	b299      	uxth	r1, r3
 800082e:	2305      	movs	r3, #5
 8000830:	2203      	movs	r2, #3
 8000832:	482f      	ldr	r0, [pc, #188]	; (80008f0 <test_i2c+0x1cc>)
 8000834:	f001 f97c 	bl	8001b30 <HAL_I2C_IsDeviceReady>
 8000838:	4603      	mov	r3, r0
 800083a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		if(ret == HAL_OK)
 800083e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000842:	2b00      	cmp	r3, #0
 8000844:	d10a      	bne.n	800085c <test_i2c+0x138>
		{
			address[length++]=i;
 8000846:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800084a:	1c5a      	adds	r2, r3, #1
 800084c:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
 8000850:	3340      	adds	r3, #64	; 0x40
 8000852:	443b      	add	r3, r7
 8000854:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000858:	f803 2c10 	strb.w	r2, [r3, #-16]
    for(i=1; i<255; i++)
 800085c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000860:	3301      	adds	r3, #1
 8000862:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000866:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800086a:	2bff      	cmp	r3, #255	; 0xff
 800086c:	d1dc      	bne.n	8000828 <test_i2c+0x104>
		}
	}
    if(length==2){
 800086e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000872:	2b02      	cmp	r3, #2
 8000874:	d10f      	bne.n	8000896 <test_i2c+0x172>
		sprintf(buffer, "\tI2C2 Address:0x%02X,0x%02X\n", address[0],address[1]);
 8000876:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800087a:	461a      	mov	r2, r3
 800087c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000880:	1d38      	adds	r0, r7, #4
 8000882:	491c      	ldr	r1, [pc, #112]	; (80008f4 <test_i2c+0x1d0>)
 8000884:	f005 faf2 	bl	8005e6c <siprintf>
		HAL_UART_Transmit(&huart7, (uint8_t*)buffer, 24, 10);
 8000888:	1d39      	adds	r1, r7, #4
 800088a:	230a      	movs	r3, #10
 800088c:	2218      	movs	r2, #24
 800088e:	4814      	ldr	r0, [pc, #80]	; (80008e0 <test_i2c+0x1bc>)
 8000890:	f004 f9d8 	bl	8004c44 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart7, (uint8_t*)buffer, 19, 10);
	}else if(length==0){
		HAL_UART_Transmit(&huart7, (uint8_t*)"\tNo Device Found In I2C2\n", 25, 10);
	}

}
 8000894:	e01c      	b.n	80008d0 <test_i2c+0x1ac>
	}else if(length==1){
 8000896:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800089a:	2b01      	cmp	r3, #1
 800089c:	d10e      	bne.n	80008bc <test_i2c+0x198>
		sprintf(buffer, "\tI2C2 Address:0x%02X\n", address[0]);
 800089e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80008a2:	461a      	mov	r2, r3
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	4914      	ldr	r1, [pc, #80]	; (80008f8 <test_i2c+0x1d4>)
 80008a8:	4618      	mov	r0, r3
 80008aa:	f005 fadf 	bl	8005e6c <siprintf>
		HAL_UART_Transmit(&huart7, (uint8_t*)buffer, 19, 10);
 80008ae:	1d39      	adds	r1, r7, #4
 80008b0:	230a      	movs	r3, #10
 80008b2:	2213      	movs	r2, #19
 80008b4:	480a      	ldr	r0, [pc, #40]	; (80008e0 <test_i2c+0x1bc>)
 80008b6:	f004 f9c5 	bl	8004c44 <HAL_UART_Transmit>
}
 80008ba:	e009      	b.n	80008d0 <test_i2c+0x1ac>
	}else if(length==0){
 80008bc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d105      	bne.n	80008d0 <test_i2c+0x1ac>
		HAL_UART_Transmit(&huart7, (uint8_t*)"\tNo Device Found In I2C2\n", 25, 10);
 80008c4:	230a      	movs	r3, #10
 80008c6:	2219      	movs	r2, #25
 80008c8:	490c      	ldr	r1, [pc, #48]	; (80008fc <test_i2c+0x1d8>)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <test_i2c+0x1bc>)
 80008cc:	f004 f9ba 	bl	8004c44 <HAL_UART_Transmit>
}
 80008d0:	bf00      	nop
 80008d2:	3744      	adds	r7, #68	; 0x44
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd90      	pop	{r4, r7, pc}
 80008d8:	2400007c 	.word	0x2400007c
 80008dc:	08006874 	.word	0x08006874
 80008e0:	24000124 	.word	0x24000124
 80008e4:	080067cc 	.word	0x080067cc
 80008e8:	080067ec 	.word	0x080067ec
 80008ec:	08006804 	.word	0x08006804
 80008f0:	240000d0 	.word	0x240000d0
 80008f4:	08006820 	.word	0x08006820
 80008f8:	08006840 	.word	0x08006840
 80008fc:	08006858 	.word	0x08006858

08000900 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == BNO_INT_Pin)
 800090a:	88fb      	ldrh	r3, [r7, #6]
 800090c:	2b80      	cmp	r3, #128	; 0x80
 800090e:	d103      	bne.n	8000918 <HAL_GPIO_EXTI_Callback+0x18>
  {
    /* Toggle LED1 */
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000910:	2140      	movs	r1, #64	; 0x40
 8000912:	4803      	ldr	r0, [pc, #12]	; (8000920 <HAL_GPIO_EXTI_Callback+0x20>)
 8000914:	f001 f847 	bl	80019a6 <HAL_GPIO_TogglePin>
  }
}
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	58020c00 	.word	0x58020c00

08000924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000928:	f000 fca2 	bl	8001270 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800092c:	f000 f81e 	bl	800096c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000930:	f000 f896 	bl	8000a60 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000934:	f000 f992 	bl	8000c5c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000938:	f000 f8c4 	bl	8000ac4 <MX_I2C1_Init>
  MX_UART7_Init();
 800093c:	f000 f942 	bl	8000bc4 <MX_UART7_Init>
  MX_I2C2_Init();
 8000940:	f000 f900 	bl	8000b44 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  BNO085_setup();
 8000944:	f7ff fe9a 	bl	800067c <BNO085_setup>
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000948:	2201      	movs	r2, #1
 800094a:	2140      	movs	r1, #64	; 0x40
 800094c:	4806      	ldr	r0, [pc, #24]	; (8000968 <main+0x44>)
 800094e:	f001 f811 	bl	8001974 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  test_i2c();
 8000952:	f7ff fee7 	bl	8000724 <test_i2c>
	  HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8000956:	2108      	movs	r1, #8
 8000958:	4803      	ldr	r0, [pc, #12]	; (8000968 <main+0x44>)
 800095a:	f001 f824 	bl	80019a6 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800095e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000962:	f000 fd17 	bl	8001394 <HAL_Delay>
	  test_i2c();
 8000966:	e7f4      	b.n	8000952 <main+0x2e>
 8000968:	58020c00 	.word	0x58020c00

0800096c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b09c      	sub	sp, #112	; 0x70
 8000970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000976:	224c      	movs	r2, #76	; 0x4c
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f005 fa96 	bl	8005eac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	2220      	movs	r2, #32
 8000984:	2100      	movs	r1, #0
 8000986:	4618      	mov	r0, r3
 8000988:	f005 fa90 	bl	8005eac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800098c:	2002      	movs	r0, #2
 800098e:	f001 fabd 	bl	8001f0c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000992:	2300      	movs	r3, #0
 8000994:	603b      	str	r3, [r7, #0]
 8000996:	4b30      	ldr	r3, [pc, #192]	; (8000a58 <SystemClock_Config+0xec>)
 8000998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800099a:	4a2f      	ldr	r2, [pc, #188]	; (8000a58 <SystemClock_Config+0xec>)
 800099c:	f023 0301 	bic.w	r3, r3, #1
 80009a0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009a2:	4b2d      	ldr	r3, [pc, #180]	; (8000a58 <SystemClock_Config+0xec>)
 80009a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	4b2b      	ldr	r3, [pc, #172]	; (8000a5c <SystemClock_Config+0xf0>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	4a2a      	ldr	r2, [pc, #168]	; (8000a5c <SystemClock_Config+0xf0>)
 80009b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009b6:	6193      	str	r3, [r2, #24]
 80009b8:	4b28      	ldr	r3, [pc, #160]	; (8000a5c <SystemClock_Config+0xf0>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009c0:	603b      	str	r3, [r7, #0]
 80009c2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009c4:	bf00      	nop
 80009c6:	4b25      	ldr	r3, [pc, #148]	; (8000a5c <SystemClock_Config+0xf0>)
 80009c8:	699b      	ldr	r3, [r3, #24]
 80009ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009d2:	d1f8      	bne.n	80009c6 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009d4:	2301      	movs	r3, #1
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009de:	2302      	movs	r3, #2
 80009e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009e2:	2302      	movs	r3, #2
 80009e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80009e6:	2305      	movs	r3, #5
 80009e8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 80009ea:	23a0      	movs	r3, #160	; 0xa0
 80009ec:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009ee:	2302      	movs	r3, #2
 80009f0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009f2:	2302      	movs	r3, #2
 80009f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009f6:	2302      	movs	r3, #2
 80009f8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80009fa:	2308      	movs	r3, #8
 80009fc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f001 fab8 	bl	8001f80 <HAL_RCC_OscConfig>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000a16:	f000 f9df 	bl	8000dd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a1a:	233f      	movs	r3, #63	; 0x3f
 8000a1c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 8000a26:	2309      	movs	r3, #9
 8000a28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a36:	2300      	movs	r3, #0
 8000a38:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f001 fef8 	bl	8002834 <HAL_RCC_ClockConfig>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000a4a:	f000 f9c5 	bl	8000dd8 <Error_Handler>
  }
}
 8000a4e:	bf00      	nop
 8000a50:	3770      	adds	r7, #112	; 0x70
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	58000400 	.word	0x58000400
 8000a5c:	58024800 	.word	0x58024800

08000a60 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b0b0      	sub	sp, #192	; 0xc0
 8000a64:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a66:	463b      	mov	r3, r7
 8000a68:	22c0      	movs	r2, #192	; 0xc0
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f005 fa1d 	bl	8005eac <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C1;
 8000a72:	f04f 0208 	mov.w	r2, #8
 8000a76:	f04f 0300 	mov.w	r3, #0
 8000a7a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 25;
 8000a7e:	2319      	movs	r3, #25
 8000a80:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 160;
 8000a82:	23a0      	movs	r3, #160	; 0xa0
 8000a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000a86:	2302      	movs	r3, #2
 8000a88:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 8;
 8000a8a:	2308      	movs	r3, #8
 8000a8c:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 8;
 8000a8e:	2308      	movs	r3, #8
 8000a90:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000a96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a9a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 8000aa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aa8:	463b      	mov	r3, r7
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f002 fa4e 	bl	8002f4c <HAL_RCCEx_PeriphCLKConfig>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8000ab6:	f000 f98f 	bl	8000dd8 <Error_Handler>
  }
}
 8000aba:	bf00      	nop
 8000abc:	37c0      	adds	r7, #192	; 0xc0
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ac8:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <MX_I2C1_Init+0x74>)
 8000aca:	4a1c      	ldr	r2, [pc, #112]	; (8000b3c <MX_I2C1_Init+0x78>)
 8000acc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00404C74;
 8000ace:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <MX_I2C1_Init+0x74>)
 8000ad0:	4a1b      	ldr	r2, [pc, #108]	; (8000b40 <MX_I2C1_Init+0x7c>)
 8000ad2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ad4:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <MX_I2C1_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ada:	4b17      	ldr	r3, [pc, #92]	; (8000b38 <MX_I2C1_Init+0x74>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ae0:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <MX_I2C1_Init+0x74>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ae6:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <MX_I2C1_Init+0x74>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <MX_I2C1_Init+0x74>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <MX_I2C1_Init+0x74>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <MX_I2C1_Init+0x74>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000afe:	480e      	ldr	r0, [pc, #56]	; (8000b38 <MX_I2C1_Init+0x74>)
 8000b00:	f000 ff86 	bl	8001a10 <HAL_I2C_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b0a:	f000 f965 	bl	8000dd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4809      	ldr	r0, [pc, #36]	; (8000b38 <MX_I2C1_Init+0x74>)
 8000b12:	f001 f964 	bl	8001dde <HAL_I2CEx_ConfigAnalogFilter>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b1c:	f000 f95c 	bl	8000dd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b20:	2100      	movs	r1, #0
 8000b22:	4805      	ldr	r0, [pc, #20]	; (8000b38 <MX_I2C1_Init+0x74>)
 8000b24:	f001 f9a6 	bl	8001e74 <HAL_I2CEx_ConfigDigitalFilter>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b2e:	f000 f953 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	2400007c 	.word	0x2400007c
 8000b3c:	40005400 	.word	0x40005400
 8000b40:	00404c74 	.word	0x00404c74

08000b44 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b48:	4b1b      	ldr	r3, [pc, #108]	; (8000bb8 <MX_I2C2_Init+0x74>)
 8000b4a:	4a1c      	ldr	r2, [pc, #112]	; (8000bbc <MX_I2C2_Init+0x78>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00404C74;
 8000b4e:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <MX_I2C2_Init+0x74>)
 8000b50:	4a1b      	ldr	r2, [pc, #108]	; (8000bc0 <MX_I2C2_Init+0x7c>)
 8000b52:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b54:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <MX_I2C2_Init+0x74>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b5a:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <MX_I2C2_Init+0x74>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b60:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <MX_I2C2_Init+0x74>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b66:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <MX_I2C2_Init+0x74>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b6c:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <MX_I2C2_Init+0x74>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b72:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <MX_I2C2_Init+0x74>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b78:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <MX_I2C2_Init+0x74>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b7e:	480e      	ldr	r0, [pc, #56]	; (8000bb8 <MX_I2C2_Init+0x74>)
 8000b80:	f000 ff46 	bl	8001a10 <HAL_I2C_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b8a:	f000 f925 	bl	8000dd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4809      	ldr	r0, [pc, #36]	; (8000bb8 <MX_I2C2_Init+0x74>)
 8000b92:	f001 f924 	bl	8001dde <HAL_I2CEx_ConfigAnalogFilter>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b9c:	f000 f91c 	bl	8000dd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <MX_I2C2_Init+0x74>)
 8000ba4:	f001 f966 	bl	8001e74 <HAL_I2CEx_ConfigDigitalFilter>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000bae:	f000 f913 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	240000d0 	.word	0x240000d0
 8000bbc:	40005800 	.word	0x40005800
 8000bc0:	00404c74 	.word	0x00404c74

08000bc4 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000bc8:	4b22      	ldr	r3, [pc, #136]	; (8000c54 <MX_UART7_Init+0x90>)
 8000bca:	4a23      	ldr	r2, [pc, #140]	; (8000c58 <MX_UART7_Init+0x94>)
 8000bcc:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000bce:	4b21      	ldr	r3, [pc, #132]	; (8000c54 <MX_UART7_Init+0x90>)
 8000bd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bd4:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd6:	4b1f      	ldr	r3, [pc, #124]	; (8000c54 <MX_UART7_Init+0x90>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000bdc:	4b1d      	ldr	r3, [pc, #116]	; (8000c54 <MX_UART7_Init+0x90>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000be2:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <MX_UART7_Init+0x90>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000be8:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <MX_UART7_Init+0x90>)
 8000bea:	220c      	movs	r2, #12
 8000bec:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bee:	4b19      	ldr	r3, [pc, #100]	; (8000c54 <MX_UART7_Init+0x90>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf4:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <MX_UART7_Init+0x90>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bfa:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <MX_UART7_Init+0x90>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c00:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <MX_UART7_Init+0x90>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c06:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <MX_UART7_Init+0x90>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000c0c:	4811      	ldr	r0, [pc, #68]	; (8000c54 <MX_UART7_Init+0x90>)
 8000c0e:	f003 ffc9 	bl	8004ba4 <HAL_UART_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8000c18:	f000 f8de 	bl	8000dd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	480d      	ldr	r0, [pc, #52]	; (8000c54 <MX_UART7_Init+0x90>)
 8000c20:	f005 f859 	bl	8005cd6 <HAL_UARTEx_SetTxFifoThreshold>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8000c2a:	f000 f8d5 	bl	8000dd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4808      	ldr	r0, [pc, #32]	; (8000c54 <MX_UART7_Init+0x90>)
 8000c32:	f005 f88e 	bl	8005d52 <HAL_UARTEx_SetRxFifoThreshold>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000c3c:	f000 f8cc 	bl	8000dd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000c40:	4804      	ldr	r0, [pc, #16]	; (8000c54 <MX_UART7_Init+0x90>)
 8000c42:	f005 f80f 	bl	8005c64 <HAL_UARTEx_DisableFifoMode>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000c4c:	f000 f8c4 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	24000124 	.word	0x24000124
 8000c58:	40007800 	.word	0x40007800

08000c5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08c      	sub	sp, #48	; 0x30
 8000c60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c62:	f107 031c 	add.w	r3, r7, #28
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]
 8000c70:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c72:	4b55      	ldr	r3, [pc, #340]	; (8000dc8 <MX_GPIO_Init+0x16c>)
 8000c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c78:	4a53      	ldr	r2, [pc, #332]	; (8000dc8 <MX_GPIO_Init+0x16c>)
 8000c7a:	f043 0304 	orr.w	r3, r3, #4
 8000c7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c82:	4b51      	ldr	r3, [pc, #324]	; (8000dc8 <MX_GPIO_Init+0x16c>)
 8000c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c88:	f003 0304 	and.w	r3, r3, #4
 8000c8c:	61bb      	str	r3, [r7, #24]
 8000c8e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c90:	4b4d      	ldr	r3, [pc, #308]	; (8000dc8 <MX_GPIO_Init+0x16c>)
 8000c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c96:	4a4c      	ldr	r2, [pc, #304]	; (8000dc8 <MX_GPIO_Init+0x16c>)
 8000c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca0:	4b49      	ldr	r3, [pc, #292]	; (8000dc8 <MX_GPIO_Init+0x16c>)
 8000ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cae:	4b46      	ldr	r3, [pc, #280]	; (8000dc8 <MX_GPIO_Init+0x16c>)
 8000cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb4:	4a44      	ldr	r2, [pc, #272]	; (8000dc8 <MX_GPIO_Init+0x16c>)
 8000cb6:	f043 0310 	orr.w	r3, r3, #16
 8000cba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cbe:	4b42      	ldr	r3, [pc, #264]	; (8000dc8 <MX_GPIO_Init+0x16c>)
 8000cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc4:	f003 0310 	and.w	r3, r3, #16
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ccc:	4b3e      	ldr	r3, [pc, #248]	; (8000dc8 <MX_GPIO_Init+0x16c>)
 8000cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd2:	4a3d      	ldr	r2, [pc, #244]	; (8000dc8 <MX_GPIO_Init+0x16c>)
 8000cd4:	f043 0302 	orr.w	r3, r3, #2
 8000cd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cdc:	4b3a      	ldr	r3, [pc, #232]	; (8000dc8 <MX_GPIO_Init+0x16c>)
 8000cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cea:	4b37      	ldr	r3, [pc, #220]	; (8000dc8 <MX_GPIO_Init+0x16c>)
 8000cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf0:	4a35      	ldr	r2, [pc, #212]	; (8000dc8 <MX_GPIO_Init+0x16c>)
 8000cf2:	f043 0308 	orr.w	r3, r3, #8
 8000cf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cfa:	4b33      	ldr	r3, [pc, #204]	; (8000dc8 <MX_GPIO_Init+0x16c>)
 8000cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d00:	f003 0308 	and.w	r3, r3, #8
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d08:	4b2f      	ldr	r3, [pc, #188]	; (8000dc8 <MX_GPIO_Init+0x16c>)
 8000d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d0e:	4a2e      	ldr	r2, [pc, #184]	; (8000dc8 <MX_GPIO_Init+0x16c>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d18:	4b2b      	ldr	r3, [pc, #172]	; (8000dc8 <MX_GPIO_Init+0x16c>)
 8000d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BNO_NRST_Pin|BNO_BOOTN_Pin, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000d2c:	4827      	ldr	r0, [pc, #156]	; (8000dcc <MX_GPIO_Init+0x170>)
 8000d2e:	f000 fe21 	bl	8001974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BNO_P0_Pin|BNO_P1_Pin|LED_BLUE_Pin|LED_YELLOW_Pin
 8000d32:	2200      	movs	r2, #0
 8000d34:	f44f 715a 	mov.w	r1, #872	; 0x368
 8000d38:	4825      	ldr	r0, [pc, #148]	; (8000dd0 <MX_GPIO_Init+0x174>)
 8000d3a:	f000 fe1b 	bl	8001974 <HAL_GPIO_WritePin>
                          |LED_RED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : BNO_INT_Pin */
  GPIO_InitStruct.Pin = BNO_INT_Pin;
 8000d3e:	2380      	movs	r3, #128	; 0x80
 8000d40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d42:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BNO_INT_GPIO_Port, &GPIO_InitStruct);
 8000d4c:	f107 031c 	add.w	r3, r7, #28
 8000d50:	4619      	mov	r1, r3
 8000d52:	4820      	ldr	r0, [pc, #128]	; (8000dd4 <MX_GPIO_Init+0x178>)
 8000d54:	f000 fc5e 	bl	8001614 <HAL_GPIO_Init>

  /*Configure GPIO pins : BNO_NRST_Pin BNO_BOOTN_Pin */
  GPIO_InitStruct.Pin = BNO_NRST_Pin|BNO_BOOTN_Pin;
 8000d58:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000d5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4816      	ldr	r0, [pc, #88]	; (8000dcc <MX_GPIO_Init+0x170>)
 8000d72:	f000 fc4f 	bl	8001614 <HAL_GPIO_Init>

  /*Configure GPIO pins : BNO_P0_Pin BNO_P1_Pin */
  GPIO_InitStruct.Pin = BNO_P0_Pin|BNO_P1_Pin;
 8000d76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d80:	2302      	movs	r3, #2
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d88:	f107 031c 	add.w	r3, r7, #28
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4810      	ldr	r0, [pc, #64]	; (8000dd0 <MX_GPIO_Init+0x174>)
 8000d90:	f000 fc40 	bl	8001614 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_BLUE_Pin LED_YELLOW_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_YELLOW_Pin|LED_RED_Pin;
 8000d94:	2368      	movs	r3, #104	; 0x68
 8000d96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	2300      	movs	r3, #0
 8000da2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000da4:	f107 031c 	add.w	r3, r7, #28
 8000da8:	4619      	mov	r1, r3
 8000daa:	4809      	ldr	r0, [pc, #36]	; (8000dd0 <MX_GPIO_Init+0x174>)
 8000dac:	f000 fc32 	bl	8001614 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2100      	movs	r1, #0
 8000db4:	2017      	movs	r0, #23
 8000db6:	f000 fbf8 	bl	80015aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000dba:	2017      	movs	r0, #23
 8000dbc:	f000 fc0f 	bl	80015de <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dc0:	bf00      	nop
 8000dc2:	3730      	adds	r7, #48	; 0x30
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	58024400 	.word	0x58024400
 8000dcc:	58020400 	.word	0x58020400
 8000dd0:	58020c00 	.word	0x58020c00
 8000dd4:	58021000 	.word	0x58021000

08000dd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ddc:	b672      	cpsid	i
}
 8000dde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <Error_Handler+0x8>
	...

08000de4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <HAL_MspInit+0x30>)
 8000dec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000df0:	4a08      	ldr	r2, [pc, #32]	; (8000e14 <HAL_MspInit+0x30>)
 8000df2:	f043 0302 	orr.w	r3, r3, #2
 8000df6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_MspInit+0x30>)
 8000dfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e00:	f003 0302 	and.w	r3, r3, #2
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	58024400 	.word	0x58024400

08000e18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08c      	sub	sp, #48	; 0x30
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 031c 	add.w	r3, r7, #28
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a35      	ldr	r2, [pc, #212]	; (8000f0c <HAL_I2C_MspInit+0xf4>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d12f      	bne.n	8000e9a <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3a:	4b35      	ldr	r3, [pc, #212]	; (8000f10 <HAL_I2C_MspInit+0xf8>)
 8000e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e40:	4a33      	ldr	r2, [pc, #204]	; (8000f10 <HAL_I2C_MspInit+0xf8>)
 8000e42:	f043 0302 	orr.w	r3, r3, #2
 8000e46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e4a:	4b31      	ldr	r3, [pc, #196]	; (8000f10 <HAL_I2C_MspInit+0xf8>)
 8000e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e50:	f003 0302 	and.w	r3, r3, #2
 8000e54:	61bb      	str	r3, [r7, #24]
 8000e56:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e58:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e5e:	2312      	movs	r3, #18
 8000e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e6a:	2304      	movs	r3, #4
 8000e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6e:	f107 031c 	add.w	r3, r7, #28
 8000e72:	4619      	mov	r1, r3
 8000e74:	4827      	ldr	r0, [pc, #156]	; (8000f14 <HAL_I2C_MspInit+0xfc>)
 8000e76:	f000 fbcd 	bl	8001614 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e7a:	4b25      	ldr	r3, [pc, #148]	; (8000f10 <HAL_I2C_MspInit+0xf8>)
 8000e7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e80:	4a23      	ldr	r2, [pc, #140]	; (8000f10 <HAL_I2C_MspInit+0xf8>)
 8000e82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e86:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e8a:	4b21      	ldr	r3, [pc, #132]	; (8000f10 <HAL_I2C_MspInit+0xf8>)
 8000e8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e98:	e033      	b.n	8000f02 <HAL_I2C_MspInit+0xea>
  else if(hi2c->Instance==I2C2)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a1e      	ldr	r2, [pc, #120]	; (8000f18 <HAL_I2C_MspInit+0x100>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d12e      	bne.n	8000f02 <HAL_I2C_MspInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea4:	4b1a      	ldr	r3, [pc, #104]	; (8000f10 <HAL_I2C_MspInit+0xf8>)
 8000ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eaa:	4a19      	ldr	r2, [pc, #100]	; (8000f10 <HAL_I2C_MspInit+0xf8>)
 8000eac:	f043 0302 	orr.w	r3, r3, #2
 8000eb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eb4:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <HAL_I2C_MspInit+0xf8>)
 8000eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ec2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ec8:	2312      	movs	r3, #18
 8000eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ed4:	2304      	movs	r3, #4
 8000ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed8:	f107 031c 	add.w	r3, r7, #28
 8000edc:	4619      	mov	r1, r3
 8000ede:	480d      	ldr	r0, [pc, #52]	; (8000f14 <HAL_I2C_MspInit+0xfc>)
 8000ee0:	f000 fb98 	bl	8001614 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <HAL_I2C_MspInit+0xf8>)
 8000ee6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000eea:	4a09      	ldr	r2, [pc, #36]	; (8000f10 <HAL_I2C_MspInit+0xf8>)
 8000eec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ef0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_I2C_MspInit+0xf8>)
 8000ef6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
}
 8000f02:	bf00      	nop
 8000f04:	3730      	adds	r7, #48	; 0x30
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40005400 	.word	0x40005400
 8000f10:	58024400 	.word	0x58024400
 8000f14:	58020400 	.word	0x58020400
 8000f18:	40005800 	.word	0x40005800

08000f1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b0bc      	sub	sp, #240	; 0xf0
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f34:	f107 0318 	add.w	r3, r7, #24
 8000f38:	22c0      	movs	r2, #192	; 0xc0
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f004 ffb5 	bl	8005eac <memset>
  if(huart->Instance==UART7)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a39      	ldr	r2, [pc, #228]	; (800102c <HAL_UART_MspInit+0x110>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d16b      	bne.n	8001024 <HAL_UART_MspInit+0x108>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8000f4c:	f04f 0202 	mov.w	r2, #2
 8000f50:	f04f 0300 	mov.w	r3, #0
 8000f54:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f5e:	f107 0318 	add.w	r3, r7, #24
 8000f62:	4618      	mov	r0, r3
 8000f64:	f001 fff2 	bl	8002f4c <HAL_RCCEx_PeriphCLKConfig>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f6e:	f7ff ff33 	bl	8000dd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8000f72:	4b2f      	ldr	r3, [pc, #188]	; (8001030 <HAL_UART_MspInit+0x114>)
 8000f74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f78:	4a2d      	ldr	r2, [pc, #180]	; (8001030 <HAL_UART_MspInit+0x114>)
 8000f7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000f7e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f82:	4b2b      	ldr	r3, [pc, #172]	; (8001030 <HAL_UART_MspInit+0x114>)
 8000f84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f90:	4b27      	ldr	r3, [pc, #156]	; (8001030 <HAL_UART_MspInit+0x114>)
 8000f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f96:	4a26      	ldr	r2, [pc, #152]	; (8001030 <HAL_UART_MspInit+0x114>)
 8000f98:	f043 0310 	orr.w	r3, r3, #16
 8000f9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fa0:	4b23      	ldr	r3, [pc, #140]	; (8001030 <HAL_UART_MspInit+0x114>)
 8000fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa6:	f003 0310 	and.w	r3, r3, #16
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	4b20      	ldr	r3, [pc, #128]	; (8001030 <HAL_UART_MspInit+0x114>)
 8000fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb4:	4a1e      	ldr	r2, [pc, #120]	; (8001030 <HAL_UART_MspInit+0x114>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fbe:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <HAL_UART_MspInit+0x114>)
 8000fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PE8     ------> UART7_TX
    PA8     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fd0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8000fe6:	2307      	movs	r3, #7
 8000fe8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4810      	ldr	r0, [pc, #64]	; (8001034 <HAL_UART_MspInit+0x118>)
 8000ff4:	f000 fb0e 	bl	8001614 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ff8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ffc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001000:	2302      	movs	r3, #2
 8001002:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100c:	2300      	movs	r3, #0
 800100e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
 8001012:	230b      	movs	r3, #11
 8001014:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001018:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800101c:	4619      	mov	r1, r3
 800101e:	4806      	ldr	r0, [pc, #24]	; (8001038 <HAL_UART_MspInit+0x11c>)
 8001020:	f000 faf8 	bl	8001614 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8001024:	bf00      	nop
 8001026:	37f0      	adds	r7, #240	; 0xf0
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40007800 	.word	0x40007800
 8001030:	58024400 	.word	0x58024400
 8001034:	58021000 	.word	0x58021000
 8001038:	58020000 	.word	0x58020000

0800103c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001040:	e7fe      	b.n	8001040 <NMI_Handler+0x4>

08001042 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001046:	e7fe      	b.n	8001046 <HardFault_Handler+0x4>

08001048 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800104c:	e7fe      	b.n	800104c <MemManage_Handler+0x4>

0800104e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001052:	e7fe      	b.n	8001052 <BusFault_Handler+0x4>

08001054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <UsageFault_Handler+0x4>

0800105a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001088:	f000 f964 	bl	8001354 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}

08001090 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BNO_INT_Pin);
 8001094:	2080      	movs	r0, #128	; 0x80
 8001096:	f000 fca0 	bl	80019da <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010a8:	4a14      	ldr	r2, [pc, #80]	; (80010fc <_sbrk+0x5c>)
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <_sbrk+0x60>)
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b4:	4b13      	ldr	r3, [pc, #76]	; (8001104 <_sbrk+0x64>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d102      	bne.n	80010c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010bc:	4b11      	ldr	r3, [pc, #68]	; (8001104 <_sbrk+0x64>)
 80010be:	4a12      	ldr	r2, [pc, #72]	; (8001108 <_sbrk+0x68>)
 80010c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010c2:	4b10      	ldr	r3, [pc, #64]	; (8001104 <_sbrk+0x64>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d207      	bcs.n	80010e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010d0:	f004 fef4 	bl	8005ebc <__errno>
 80010d4:	4603      	mov	r3, r0
 80010d6:	220c      	movs	r2, #12
 80010d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010de:	e009      	b.n	80010f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <_sbrk+0x64>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010e6:	4b07      	ldr	r3, [pc, #28]	; (8001104 <_sbrk+0x64>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4413      	add	r3, r2
 80010ee:	4a05      	ldr	r2, [pc, #20]	; (8001104 <_sbrk+0x64>)
 80010f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010f2:	68fb      	ldr	r3, [r7, #12]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	24080000 	.word	0x24080000
 8001100:	00000400 	.word	0x00000400
 8001104:	240001b8 	.word	0x240001b8
 8001108:	24000308 	.word	0x24000308

0800110c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001110:	4b37      	ldr	r3, [pc, #220]	; (80011f0 <SystemInit+0xe4>)
 8001112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001116:	4a36      	ldr	r2, [pc, #216]	; (80011f0 <SystemInit+0xe4>)
 8001118:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800111c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001120:	4b34      	ldr	r3, [pc, #208]	; (80011f4 <SystemInit+0xe8>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 030f 	and.w	r3, r3, #15
 8001128:	2b06      	cmp	r3, #6
 800112a:	d807      	bhi.n	800113c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800112c:	4b31      	ldr	r3, [pc, #196]	; (80011f4 <SystemInit+0xe8>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f023 030f 	bic.w	r3, r3, #15
 8001134:	4a2f      	ldr	r2, [pc, #188]	; (80011f4 <SystemInit+0xe8>)
 8001136:	f043 0307 	orr.w	r3, r3, #7
 800113a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800113c:	4b2e      	ldr	r3, [pc, #184]	; (80011f8 <SystemInit+0xec>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a2d      	ldr	r2, [pc, #180]	; (80011f8 <SystemInit+0xec>)
 8001142:	f043 0301 	orr.w	r3, r3, #1
 8001146:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001148:	4b2b      	ldr	r3, [pc, #172]	; (80011f8 <SystemInit+0xec>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800114e:	4b2a      	ldr	r3, [pc, #168]	; (80011f8 <SystemInit+0xec>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	4929      	ldr	r1, [pc, #164]	; (80011f8 <SystemInit+0xec>)
 8001154:	4b29      	ldr	r3, [pc, #164]	; (80011fc <SystemInit+0xf0>)
 8001156:	4013      	ands	r3, r2
 8001158:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800115a:	4b26      	ldr	r3, [pc, #152]	; (80011f4 <SystemInit+0xe8>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0308 	and.w	r3, r3, #8
 8001162:	2b00      	cmp	r3, #0
 8001164:	d007      	beq.n	8001176 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001166:	4b23      	ldr	r3, [pc, #140]	; (80011f4 <SystemInit+0xe8>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f023 030f 	bic.w	r3, r3, #15
 800116e:	4a21      	ldr	r2, [pc, #132]	; (80011f4 <SystemInit+0xe8>)
 8001170:	f043 0307 	orr.w	r3, r3, #7
 8001174:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001176:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <SystemInit+0xec>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800117c:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <SystemInit+0xec>)
 800117e:	2200      	movs	r2, #0
 8001180:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001182:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <SystemInit+0xec>)
 8001184:	2200      	movs	r2, #0
 8001186:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001188:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <SystemInit+0xec>)
 800118a:	4a1d      	ldr	r2, [pc, #116]	; (8001200 <SystemInit+0xf4>)
 800118c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800118e:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <SystemInit+0xec>)
 8001190:	4a1c      	ldr	r2, [pc, #112]	; (8001204 <SystemInit+0xf8>)
 8001192:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001194:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <SystemInit+0xec>)
 8001196:	4a1c      	ldr	r2, [pc, #112]	; (8001208 <SystemInit+0xfc>)
 8001198:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800119a:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <SystemInit+0xec>)
 800119c:	2200      	movs	r2, #0
 800119e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011a0:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <SystemInit+0xec>)
 80011a2:	4a19      	ldr	r2, [pc, #100]	; (8001208 <SystemInit+0xfc>)
 80011a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011a6:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <SystemInit+0xec>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <SystemInit+0xec>)
 80011ae:	4a16      	ldr	r2, [pc, #88]	; (8001208 <SystemInit+0xfc>)
 80011b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011b2:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <SystemInit+0xec>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <SystemInit+0xec>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a0e      	ldr	r2, [pc, #56]	; (80011f8 <SystemInit+0xec>)
 80011be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <SystemInit+0xec>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <SystemInit+0x100>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	4b10      	ldr	r3, [pc, #64]	; (8001210 <SystemInit+0x104>)
 80011d0:	4013      	ands	r3, r2
 80011d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011d6:	d202      	bcs.n	80011de <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80011d8:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <SystemInit+0x108>)
 80011da:	2201      	movs	r2, #1
 80011dc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <SystemInit+0x10c>)
 80011e0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80011e4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000ed00 	.word	0xe000ed00
 80011f4:	52002000 	.word	0x52002000
 80011f8:	58024400 	.word	0x58024400
 80011fc:	eaf6ed7f 	.word	0xeaf6ed7f
 8001200:	02020200 	.word	0x02020200
 8001204:	01ff0000 	.word	0x01ff0000
 8001208:	01010280 	.word	0x01010280
 800120c:	5c001000 	.word	0x5c001000
 8001210:	ffff0000 	.word	0xffff0000
 8001214:	51008108 	.word	0x51008108
 8001218:	52004000 	.word	0x52004000

0800121c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800121c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001254 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001220:	f7ff ff74 	bl	800110c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001224:	480c      	ldr	r0, [pc, #48]	; (8001258 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001226:	490d      	ldr	r1, [pc, #52]	; (800125c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001228:	4a0d      	ldr	r2, [pc, #52]	; (8001260 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800122c:	e002      	b.n	8001234 <LoopCopyDataInit>

0800122e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800122e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001232:	3304      	adds	r3, #4

08001234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001238:	d3f9      	bcc.n	800122e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800123a:	4a0a      	ldr	r2, [pc, #40]	; (8001264 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800123c:	4c0a      	ldr	r4, [pc, #40]	; (8001268 <LoopFillZerobss+0x22>)
  movs r3, #0
 800123e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001240:	e001      	b.n	8001246 <LoopFillZerobss>

08001242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001244:	3204      	adds	r2, #4

08001246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001248:	d3fb      	bcc.n	8001242 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800124a:	f004 fe3d 	bl	8005ec8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800124e:	f7ff fb69 	bl	8000924 <main>
  bx  lr
 8001252:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001254:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001258:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800125c:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8001260:	08006900 	.word	0x08006900
  ldr r2, =_sbss
 8001264:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8001268:	24000308 	.word	0x24000308

0800126c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800126c:	e7fe      	b.n	800126c <ADC3_IRQHandler>
	...

08001270 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001276:	2003      	movs	r0, #3
 8001278:	f000 f98c 	bl	8001594 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800127c:	f001 fc90 	bl	8002ba0 <HAL_RCC_GetSysClockFreq>
 8001280:	4602      	mov	r2, r0
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <HAL_Init+0x68>)
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	0a1b      	lsrs	r3, r3, #8
 8001288:	f003 030f 	and.w	r3, r3, #15
 800128c:	4913      	ldr	r1, [pc, #76]	; (80012dc <HAL_Init+0x6c>)
 800128e:	5ccb      	ldrb	r3, [r1, r3]
 8001290:	f003 031f 	and.w	r3, r3, #31
 8001294:	fa22 f303 	lsr.w	r3, r2, r3
 8001298:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800129a:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <HAL_Init+0x68>)
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	f003 030f 	and.w	r3, r3, #15
 80012a2:	4a0e      	ldr	r2, [pc, #56]	; (80012dc <HAL_Init+0x6c>)
 80012a4:	5cd3      	ldrb	r3, [r2, r3]
 80012a6:	f003 031f 	and.w	r3, r3, #31
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	fa22 f303 	lsr.w	r3, r2, r3
 80012b0:	4a0b      	ldr	r2, [pc, #44]	; (80012e0 <HAL_Init+0x70>)
 80012b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012b4:	4a0b      	ldr	r2, [pc, #44]	; (80012e4 <HAL_Init+0x74>)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012ba:	200f      	movs	r0, #15
 80012bc:	f000 f814 	bl	80012e8 <HAL_InitTick>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e002      	b.n	80012d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012ca:	f7ff fd8b 	bl	8000de4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	58024400 	.word	0x58024400
 80012dc:	08006884 	.word	0x08006884
 80012e0:	24000004 	.word	0x24000004
 80012e4:	24000000 	.word	0x24000000

080012e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012f0:	4b15      	ldr	r3, [pc, #84]	; (8001348 <HAL_InitTick+0x60>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d101      	bne.n	80012fc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e021      	b.n	8001340 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012fc:	4b13      	ldr	r3, [pc, #76]	; (800134c <HAL_InitTick+0x64>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <HAL_InitTick+0x60>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4619      	mov	r1, r3
 8001306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130a:	fbb3 f3f1 	udiv	r3, r3, r1
 800130e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001312:	4618      	mov	r0, r3
 8001314:	f000 f971 	bl	80015fa <HAL_SYSTICK_Config>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e00e      	b.n	8001340 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b0f      	cmp	r3, #15
 8001326:	d80a      	bhi.n	800133e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001328:	2200      	movs	r2, #0
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001330:	f000 f93b 	bl	80015aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001334:	4a06      	ldr	r2, [pc, #24]	; (8001350 <HAL_InitTick+0x68>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	e000      	b.n	8001340 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
}
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	2400000c 	.word	0x2400000c
 800134c:	24000000 	.word	0x24000000
 8001350:	24000008 	.word	0x24000008

08001354 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_IncTick+0x20>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	461a      	mov	r2, r3
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_IncTick+0x24>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4413      	add	r3, r2
 8001364:	4a04      	ldr	r2, [pc, #16]	; (8001378 <HAL_IncTick+0x24>)
 8001366:	6013      	str	r3, [r2, #0]
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	2400000c 	.word	0x2400000c
 8001378:	240001bc 	.word	0x240001bc

0800137c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return uwTick;
 8001380:	4b03      	ldr	r3, [pc, #12]	; (8001390 <HAL_GetTick+0x14>)
 8001382:	681b      	ldr	r3, [r3, #0]
}
 8001384:	4618      	mov	r0, r3
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	240001bc 	.word	0x240001bc

08001394 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800139c:	f7ff ffee 	bl	800137c <HAL_GetTick>
 80013a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013ac:	d005      	beq.n	80013ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ae:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <HAL_Delay+0x44>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	461a      	mov	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4413      	add	r3, r2
 80013b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013ba:	bf00      	nop
 80013bc:	f7ff ffde 	bl	800137c <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d8f7      	bhi.n	80013bc <HAL_Delay+0x28>
  {
  }
}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	2400000c 	.word	0x2400000c

080013dc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80013e0:	4b03      	ldr	r3, [pc, #12]	; (80013f0 <HAL_GetREVID+0x14>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	0c1b      	lsrs	r3, r3, #16
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	5c001000 	.word	0x5c001000

080013f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001404:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <__NVIC_SetPriorityGrouping+0x40>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001410:	4013      	ands	r3, r2
 8001412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <__NVIC_SetPriorityGrouping+0x44>)
 800141e:	4313      	orrs	r3, r2
 8001420:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001422:	4a04      	ldr	r2, [pc, #16]	; (8001434 <__NVIC_SetPriorityGrouping+0x40>)
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	60d3      	str	r3, [r2, #12]
}
 8001428:	bf00      	nop
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	e000ed00 	.word	0xe000ed00
 8001438:	05fa0000 	.word	0x05fa0000

0800143c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001440:	4b04      	ldr	r3, [pc, #16]	; (8001454 <__NVIC_GetPriorityGrouping+0x18>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	0a1b      	lsrs	r3, r3, #8
 8001446:	f003 0307 	and.w	r3, r3, #7
}
 800144a:	4618      	mov	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001462:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001466:	2b00      	cmp	r3, #0
 8001468:	db0b      	blt.n	8001482 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800146a:	88fb      	ldrh	r3, [r7, #6]
 800146c:	f003 021f 	and.w	r2, r3, #31
 8001470:	4907      	ldr	r1, [pc, #28]	; (8001490 <__NVIC_EnableIRQ+0x38>)
 8001472:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001476:	095b      	lsrs	r3, r3, #5
 8001478:	2001      	movs	r0, #1
 800147a:	fa00 f202 	lsl.w	r2, r0, r2
 800147e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000e100 	.word	0xe000e100

08001494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	6039      	str	r1, [r7, #0]
 800149e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	db0a      	blt.n	80014be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	490c      	ldr	r1, [pc, #48]	; (80014e0 <__NVIC_SetPriority+0x4c>)
 80014ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014b2:	0112      	lsls	r2, r2, #4
 80014b4:	b2d2      	uxtb	r2, r2
 80014b6:	440b      	add	r3, r1
 80014b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014bc:	e00a      	b.n	80014d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	4908      	ldr	r1, [pc, #32]	; (80014e4 <__NVIC_SetPriority+0x50>)
 80014c4:	88fb      	ldrh	r3, [r7, #6]
 80014c6:	f003 030f 	and.w	r3, r3, #15
 80014ca:	3b04      	subs	r3, #4
 80014cc:	0112      	lsls	r2, r2, #4
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	440b      	add	r3, r1
 80014d2:	761a      	strb	r2, [r3, #24]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	e000e100 	.word	0xe000e100
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b089      	sub	sp, #36	; 0x24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f1c3 0307 	rsb	r3, r3, #7
 8001502:	2b04      	cmp	r3, #4
 8001504:	bf28      	it	cs
 8001506:	2304      	movcs	r3, #4
 8001508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3304      	adds	r3, #4
 800150e:	2b06      	cmp	r3, #6
 8001510:	d902      	bls.n	8001518 <NVIC_EncodePriority+0x30>
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3b03      	subs	r3, #3
 8001516:	e000      	b.n	800151a <NVIC_EncodePriority+0x32>
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43da      	mvns	r2, r3
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	401a      	ands	r2, r3
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001530:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	fa01 f303 	lsl.w	r3, r1, r3
 800153a:	43d9      	mvns	r1, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001540:	4313      	orrs	r3, r2
         );
}
 8001542:	4618      	mov	r0, r3
 8001544:	3724      	adds	r7, #36	; 0x24
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
	...

08001550 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3b01      	subs	r3, #1
 800155c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001560:	d301      	bcc.n	8001566 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001562:	2301      	movs	r3, #1
 8001564:	e00f      	b.n	8001586 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001566:	4a0a      	ldr	r2, [pc, #40]	; (8001590 <SysTick_Config+0x40>)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3b01      	subs	r3, #1
 800156c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800156e:	210f      	movs	r1, #15
 8001570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001574:	f7ff ff8e 	bl	8001494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <SysTick_Config+0x40>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800157e:	4b04      	ldr	r3, [pc, #16]	; (8001590 <SysTick_Config+0x40>)
 8001580:	2207      	movs	r2, #7
 8001582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	e000e010 	.word	0xe000e010

08001594 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff ff29 	bl	80013f4 <__NVIC_SetPriorityGrouping>
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b086      	sub	sp, #24
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	4603      	mov	r3, r0
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	607a      	str	r2, [r7, #4]
 80015b6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015b8:	f7ff ff40 	bl	800143c <__NVIC_GetPriorityGrouping>
 80015bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	68b9      	ldr	r1, [r7, #8]
 80015c2:	6978      	ldr	r0, [r7, #20]
 80015c4:	f7ff ff90 	bl	80014e8 <NVIC_EncodePriority>
 80015c8:	4602      	mov	r2, r0
 80015ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015ce:	4611      	mov	r1, r2
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff ff5f 	bl	8001494 <__NVIC_SetPriority>
}
 80015d6:	bf00      	nop
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b082      	sub	sp, #8
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	4603      	mov	r3, r0
 80015e6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff ff33 	bl	8001458 <__NVIC_EnableIRQ>
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff ffa4 	bl	8001550 <SysTick_Config>
 8001608:	4603      	mov	r3, r0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
	...

08001614 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001614:	b480      	push	{r7}
 8001616:	b089      	sub	sp, #36	; 0x24
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001622:	4b89      	ldr	r3, [pc, #548]	; (8001848 <HAL_GPIO_Init+0x234>)
 8001624:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001626:	e194      	b.n	8001952 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	2101      	movs	r1, #1
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	fa01 f303 	lsl.w	r3, r1, r3
 8001634:	4013      	ands	r3, r2
 8001636:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	2b00      	cmp	r3, #0
 800163c:	f000 8186 	beq.w	800194c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 0303 	and.w	r3, r3, #3
 8001648:	2b01      	cmp	r3, #1
 800164a:	d005      	beq.n	8001658 <HAL_GPIO_Init+0x44>
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f003 0303 	and.w	r3, r3, #3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d130      	bne.n	80016ba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	2203      	movs	r2, #3
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	68da      	ldr	r2, [r3, #12]
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800168e:	2201      	movs	r2, #1
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	091b      	lsrs	r3, r3, #4
 80016a4:	f003 0201 	and.w	r2, r3, #1
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f003 0303 	and.w	r3, r3, #3
 80016c2:	2b03      	cmp	r3, #3
 80016c4:	d017      	beq.n	80016f6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	2203      	movs	r2, #3
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43db      	mvns	r3, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4013      	ands	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	689a      	ldr	r2, [r3, #8]
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f003 0303 	and.w	r3, r3, #3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d123      	bne.n	800174a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	08da      	lsrs	r2, r3, #3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3208      	adds	r2, #8
 800170a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800170e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	220f      	movs	r2, #15
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43db      	mvns	r3, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4013      	ands	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	691a      	ldr	r2, [r3, #16]
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	f003 0307 	and.w	r3, r3, #7
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4313      	orrs	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	08da      	lsrs	r2, r3, #3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3208      	adds	r2, #8
 8001744:	69b9      	ldr	r1, [r7, #24]
 8001746:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	2203      	movs	r2, #3
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43db      	mvns	r3, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4013      	ands	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f003 0203 	and.w	r2, r3, #3
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4313      	orrs	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001786:	2b00      	cmp	r3, #0
 8001788:	f000 80e0 	beq.w	800194c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178c:	4b2f      	ldr	r3, [pc, #188]	; (800184c <HAL_GPIO_Init+0x238>)
 800178e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001792:	4a2e      	ldr	r2, [pc, #184]	; (800184c <HAL_GPIO_Init+0x238>)
 8001794:	f043 0302 	orr.w	r3, r3, #2
 8001798:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800179c:	4b2b      	ldr	r3, [pc, #172]	; (800184c <HAL_GPIO_Init+0x238>)
 800179e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017aa:	4a29      	ldr	r2, [pc, #164]	; (8001850 <HAL_GPIO_Init+0x23c>)
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	089b      	lsrs	r3, r3, #2
 80017b0:	3302      	adds	r3, #2
 80017b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	220f      	movs	r2, #15
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4013      	ands	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a20      	ldr	r2, [pc, #128]	; (8001854 <HAL_GPIO_Init+0x240>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d052      	beq.n	800187c <HAL_GPIO_Init+0x268>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a1f      	ldr	r2, [pc, #124]	; (8001858 <HAL_GPIO_Init+0x244>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d031      	beq.n	8001842 <HAL_GPIO_Init+0x22e>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a1e      	ldr	r2, [pc, #120]	; (800185c <HAL_GPIO_Init+0x248>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d02b      	beq.n	800183e <HAL_GPIO_Init+0x22a>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a1d      	ldr	r2, [pc, #116]	; (8001860 <HAL_GPIO_Init+0x24c>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d025      	beq.n	800183a <HAL_GPIO_Init+0x226>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a1c      	ldr	r2, [pc, #112]	; (8001864 <HAL_GPIO_Init+0x250>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d01f      	beq.n	8001836 <HAL_GPIO_Init+0x222>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a1b      	ldr	r2, [pc, #108]	; (8001868 <HAL_GPIO_Init+0x254>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d019      	beq.n	8001832 <HAL_GPIO_Init+0x21e>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a1a      	ldr	r2, [pc, #104]	; (800186c <HAL_GPIO_Init+0x258>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d013      	beq.n	800182e <HAL_GPIO_Init+0x21a>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a19      	ldr	r2, [pc, #100]	; (8001870 <HAL_GPIO_Init+0x25c>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d00d      	beq.n	800182a <HAL_GPIO_Init+0x216>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a18      	ldr	r2, [pc, #96]	; (8001874 <HAL_GPIO_Init+0x260>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d007      	beq.n	8001826 <HAL_GPIO_Init+0x212>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a17      	ldr	r2, [pc, #92]	; (8001878 <HAL_GPIO_Init+0x264>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d101      	bne.n	8001822 <HAL_GPIO_Init+0x20e>
 800181e:	2309      	movs	r3, #9
 8001820:	e02d      	b.n	800187e <HAL_GPIO_Init+0x26a>
 8001822:	230a      	movs	r3, #10
 8001824:	e02b      	b.n	800187e <HAL_GPIO_Init+0x26a>
 8001826:	2308      	movs	r3, #8
 8001828:	e029      	b.n	800187e <HAL_GPIO_Init+0x26a>
 800182a:	2307      	movs	r3, #7
 800182c:	e027      	b.n	800187e <HAL_GPIO_Init+0x26a>
 800182e:	2306      	movs	r3, #6
 8001830:	e025      	b.n	800187e <HAL_GPIO_Init+0x26a>
 8001832:	2305      	movs	r3, #5
 8001834:	e023      	b.n	800187e <HAL_GPIO_Init+0x26a>
 8001836:	2304      	movs	r3, #4
 8001838:	e021      	b.n	800187e <HAL_GPIO_Init+0x26a>
 800183a:	2303      	movs	r3, #3
 800183c:	e01f      	b.n	800187e <HAL_GPIO_Init+0x26a>
 800183e:	2302      	movs	r3, #2
 8001840:	e01d      	b.n	800187e <HAL_GPIO_Init+0x26a>
 8001842:	2301      	movs	r3, #1
 8001844:	e01b      	b.n	800187e <HAL_GPIO_Init+0x26a>
 8001846:	bf00      	nop
 8001848:	58000080 	.word	0x58000080
 800184c:	58024400 	.word	0x58024400
 8001850:	58000400 	.word	0x58000400
 8001854:	58020000 	.word	0x58020000
 8001858:	58020400 	.word	0x58020400
 800185c:	58020800 	.word	0x58020800
 8001860:	58020c00 	.word	0x58020c00
 8001864:	58021000 	.word	0x58021000
 8001868:	58021400 	.word	0x58021400
 800186c:	58021800 	.word	0x58021800
 8001870:	58021c00 	.word	0x58021c00
 8001874:	58022000 	.word	0x58022000
 8001878:	58022400 	.word	0x58022400
 800187c:	2300      	movs	r3, #0
 800187e:	69fa      	ldr	r2, [r7, #28]
 8001880:	f002 0203 	and.w	r2, r2, #3
 8001884:	0092      	lsls	r2, r2, #2
 8001886:	4093      	lsls	r3, r2
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800188e:	4938      	ldr	r1, [pc, #224]	; (8001970 <HAL_GPIO_Init+0x35c>)
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	089b      	lsrs	r3, r3, #2
 8001894:	3302      	adds	r3, #2
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800189c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	43db      	mvns	r3, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4013      	ands	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	4313      	orrs	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80018c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80018ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80018f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	43db      	mvns	r3, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4013      	ands	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	43db      	mvns	r3, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4013      	ands	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	3301      	adds	r3, #1
 8001950:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	fa22 f303 	lsr.w	r3, r2, r3
 800195c:	2b00      	cmp	r3, #0
 800195e:	f47f ae63 	bne.w	8001628 <HAL_GPIO_Init+0x14>
  }
}
 8001962:	bf00      	nop
 8001964:	bf00      	nop
 8001966:	3724      	adds	r7, #36	; 0x24
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	58000400 	.word	0x58000400

08001974 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	807b      	strh	r3, [r7, #2]
 8001980:	4613      	mov	r3, r2
 8001982:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001984:	787b      	ldrb	r3, [r7, #1]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800198a:	887a      	ldrh	r2, [r7, #2]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001990:	e003      	b.n	800199a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001992:	887b      	ldrh	r3, [r7, #2]
 8001994:	041a      	lsls	r2, r3, #16
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	619a      	str	r2, [r3, #24]
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b085      	sub	sp, #20
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	460b      	mov	r3, r1
 80019b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019b8:	887a      	ldrh	r2, [r7, #2]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	4013      	ands	r3, r2
 80019be:	041a      	lsls	r2, r3, #16
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	43d9      	mvns	r1, r3
 80019c4:	887b      	ldrh	r3, [r7, #2]
 80019c6:	400b      	ands	r3, r1
 80019c8:	431a      	orrs	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	619a      	str	r2, [r3, #24]
}
 80019ce:	bf00      	nop
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	4603      	mov	r3, r0
 80019e2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80019e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80019ec:	88fb      	ldrh	r3, [r7, #6]
 80019ee:	4013      	ands	r3, r2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d008      	beq.n	8001a06 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019f8:	88fb      	ldrh	r3, [r7, #6]
 80019fa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019fe:	88fb      	ldrh	r3, [r7, #6]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe ff7d 	bl	8000900 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e07f      	b.n	8001b22 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d106      	bne.n	8001a3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff f9ee 	bl	8000e18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2224      	movs	r2, #36	; 0x24
 8001a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0201 	bic.w	r2, r2, #1
 8001a52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685a      	ldr	r2, [r3, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d107      	bne.n	8001a8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	e006      	b.n	8001a98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689a      	ldr	r2, [r3, #8]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001a96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d104      	bne.n	8001aaa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001aa8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6859      	ldr	r1, [r3, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <HAL_I2C_Init+0x11c>)
 8001ab6:	430b      	orrs	r3, r1
 8001ab8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68da      	ldr	r2, [r3, #12]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ac8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	691a      	ldr	r2, [r3, #16]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	69d9      	ldr	r1, [r3, #28]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a1a      	ldr	r2, [r3, #32]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0201 	orr.w	r2, r2, #1
 8001b02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2220      	movs	r2, #32
 8001b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	02008000 	.word	0x02008000

08001b30 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08a      	sub	sp, #40	; 0x28
 8001b34:	af02      	add	r7, sp, #8
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	607a      	str	r2, [r7, #4]
 8001b3a:	603b      	str	r3, [r7, #0]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b20      	cmp	r3, #32
 8001b4e:	f040 80ef 	bne.w	8001d30 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b60:	d101      	bne.n	8001b66 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001b62:	2302      	movs	r3, #2
 8001b64:	e0e5      	b.n	8001d32 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d101      	bne.n	8001b74 <HAL_I2C_IsDeviceReady+0x44>
 8001b70:	2302      	movs	r3, #2
 8001b72:	e0de      	b.n	8001d32 <HAL_I2C_IsDeviceReady+0x202>
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2224      	movs	r2, #36	; 0x24
 8001b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d105      	bne.n	8001b9e <HAL_I2C_IsDeviceReady+0x6e>
 8001b92:	897b      	ldrh	r3, [r7, #10]
 8001b94:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b98:	4b68      	ldr	r3, [pc, #416]	; (8001d3c <HAL_I2C_IsDeviceReady+0x20c>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	e004      	b.n	8001ba8 <HAL_I2C_IsDeviceReady+0x78>
 8001b9e:	897b      	ldrh	r3, [r7, #10]
 8001ba0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ba4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	6812      	ldr	r2, [r2, #0]
 8001bac:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001bae:	f7ff fbe5 	bl	800137c <HAL_GetTick>
 8001bb2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	f003 0320 	and.w	r3, r3, #32
 8001bbe:	2b20      	cmp	r3, #32
 8001bc0:	bf0c      	ite	eq
 8001bc2:	2301      	moveq	r3, #1
 8001bc4:	2300      	movne	r3, #0
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	f003 0310 	and.w	r3, r3, #16
 8001bd4:	2b10      	cmp	r3, #16
 8001bd6:	bf0c      	ite	eq
 8001bd8:	2301      	moveq	r3, #1
 8001bda:	2300      	movne	r3, #0
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001be0:	e034      	b.n	8001c4c <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001be8:	d01a      	beq.n	8001c20 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001bea:	f7ff fbc7 	bl	800137c <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d302      	bcc.n	8001c00 <HAL_I2C_IsDeviceReady+0xd0>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d10f      	bne.n	8001c20 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2220      	movs	r2, #32
 8001c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0c:	f043 0220 	orr.w	r2, r3, #32
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e088      	b.n	8001d32 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	f003 0320 	and.w	r3, r3, #32
 8001c2a:	2b20      	cmp	r3, #32
 8001c2c:	bf0c      	ite	eq
 8001c2e:	2301      	moveq	r3, #1
 8001c30:	2300      	movne	r3, #0
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	f003 0310 	and.w	r3, r3, #16
 8001c40:	2b10      	cmp	r3, #16
 8001c42:	bf0c      	ite	eq
 8001c44:	2301      	moveq	r3, #1
 8001c46:	2300      	movne	r3, #0
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001c4c:	7ffb      	ldrb	r3, [r7, #31]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d102      	bne.n	8001c58 <HAL_I2C_IsDeviceReady+0x128>
 8001c52:	7fbb      	ldrb	r3, [r7, #30]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d0c4      	beq.n	8001be2 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	f003 0310 	and.w	r3, r3, #16
 8001c62:	2b10      	cmp	r3, #16
 8001c64:	d01a      	beq.n	8001c9c <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2120      	movs	r1, #32
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	f000 f865 	bl	8001d40 <I2C_WaitOnFlagUntilTimeout>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e058      	b.n	8001d32 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2220      	movs	r2, #32
 8001c86:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	e04a      	b.n	8001d32 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2120      	movs	r1, #32
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f000 f84a 	bl	8001d40 <I2C_WaitOnFlagUntilTimeout>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e03d      	b.n	8001d32 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2210      	movs	r2, #16
 8001cbc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2220      	movs	r2, #32
 8001cc4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d118      	bne.n	8001d00 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cdc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2120      	movs	r1, #32
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f000 f829 	bl	8001d40 <I2C_WaitOnFlagUntilTimeout>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e01c      	b.n	8001d32 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2220      	movs	r2, #32
 8001cfe:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	3301      	adds	r3, #1
 8001d04:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	f63f af3d 	bhi.w	8001b8a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2220      	movs	r2, #32
 8001d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1c:	f043 0220 	orr.w	r2, r3, #32
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e000      	b.n	8001d32 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8001d30:	2302      	movs	r3, #2
  }
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3720      	adds	r7, #32
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	02002000 	.word	0x02002000

08001d40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	603b      	str	r3, [r7, #0]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d50:	e031      	b.n	8001db6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d58:	d02d      	beq.n	8001db6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d5a:	f7ff fb0f 	bl	800137c <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d302      	bcc.n	8001d70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d122      	bne.n	8001db6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	699a      	ldr	r2, [r3, #24]
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	bf0c      	ite	eq
 8001d80:	2301      	moveq	r3, #1
 8001d82:	2300      	movne	r3, #0
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	461a      	mov	r2, r3
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d113      	bne.n	8001db6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	f043 0220 	orr.w	r2, r3, #32
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2220      	movs	r2, #32
 8001d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e00f      	b.n	8001dd6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	699a      	ldr	r2, [r3, #24]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	68ba      	ldr	r2, [r7, #8]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	bf0c      	ite	eq
 8001dc6:	2301      	moveq	r3, #1
 8001dc8:	2300      	movne	r3, #0
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	461a      	mov	r2, r3
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d0be      	beq.n	8001d52 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
 8001de6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b20      	cmp	r3, #32
 8001df2:	d138      	bne.n	8001e66 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d101      	bne.n	8001e02 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001dfe:	2302      	movs	r3, #2
 8001e00:	e032      	b.n	8001e68 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2224      	movs	r2, #36	; 0x24
 8001e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 0201 	bic.w	r2, r2, #1
 8001e20:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e30:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6819      	ldr	r1, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f042 0201 	orr.w	r2, r2, #1
 8001e50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2220      	movs	r2, #32
 8001e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e62:	2300      	movs	r3, #0
 8001e64:	e000      	b.n	8001e68 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e66:	2302      	movs	r3, #2
  }
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b20      	cmp	r3, #32
 8001e88:	d139      	bne.n	8001efe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d101      	bne.n	8001e98 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e94:	2302      	movs	r3, #2
 8001e96:	e033      	b.n	8001f00 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2224      	movs	r2, #36	; 0x24
 8001ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 0201 	bic.w	r2, r2, #1
 8001eb6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ec6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	021b      	lsls	r3, r3, #8
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f042 0201 	orr.w	r2, r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2220      	movs	r2, #32
 8001eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001efa:	2300      	movs	r3, #0
 8001efc:	e000      	b.n	8001f00 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001efe:	2302      	movs	r3, #2
  }
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001f14:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <HAL_PWREx_ConfigSupply+0x70>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b04      	cmp	r3, #4
 8001f1e:	d00a      	beq.n	8001f36 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001f20:	4b16      	ldr	r3, [pc, #88]	; (8001f7c <HAL_PWREx_ConfigSupply+0x70>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d001      	beq.n	8001f32 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e01f      	b.n	8001f72 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	e01d      	b.n	8001f72 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001f36:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <HAL_PWREx_ConfigSupply+0x70>)
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	f023 0207 	bic.w	r2, r3, #7
 8001f3e:	490f      	ldr	r1, [pc, #60]	; (8001f7c <HAL_PWREx_ConfigSupply+0x70>)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001f46:	f7ff fa19 	bl	800137c <HAL_GetTick>
 8001f4a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001f4c:	e009      	b.n	8001f62 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001f4e:	f7ff fa15 	bl	800137c <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f5c:	d901      	bls.n	8001f62 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e007      	b.n	8001f72 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001f62:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <HAL_PWREx_ConfigSupply+0x70>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f6e:	d1ee      	bne.n	8001f4e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	58024800 	.word	0x58024800

08001f80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08c      	sub	sp, #48	; 0x30
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d102      	bne.n	8001f94 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	f000 bc48 	b.w	8002824 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 8088 	beq.w	80020b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fa2:	4b99      	ldr	r3, [pc, #612]	; (8002208 <HAL_RCC_OscConfig+0x288>)
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001faa:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001fac:	4b96      	ldr	r3, [pc, #600]	; (8002208 <HAL_RCC_OscConfig+0x288>)
 8001fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb4:	2b10      	cmp	r3, #16
 8001fb6:	d007      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x48>
 8001fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fba:	2b18      	cmp	r3, #24
 8001fbc:	d111      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x62>
 8001fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc0:	f003 0303 	and.w	r3, r3, #3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d10c      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc8:	4b8f      	ldr	r3, [pc, #572]	; (8002208 <HAL_RCC_OscConfig+0x288>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d06d      	beq.n	80020b0 <HAL_RCC_OscConfig+0x130>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d169      	bne.n	80020b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	f000 bc21 	b.w	8002824 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fea:	d106      	bne.n	8001ffa <HAL_RCC_OscConfig+0x7a>
 8001fec:	4b86      	ldr	r3, [pc, #536]	; (8002208 <HAL_RCC_OscConfig+0x288>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a85      	ldr	r2, [pc, #532]	; (8002208 <HAL_RCC_OscConfig+0x288>)
 8001ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff6:	6013      	str	r3, [r2, #0]
 8001ff8:	e02e      	b.n	8002058 <HAL_RCC_OscConfig+0xd8>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10c      	bne.n	800201c <HAL_RCC_OscConfig+0x9c>
 8002002:	4b81      	ldr	r3, [pc, #516]	; (8002208 <HAL_RCC_OscConfig+0x288>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a80      	ldr	r2, [pc, #512]	; (8002208 <HAL_RCC_OscConfig+0x288>)
 8002008:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	4b7e      	ldr	r3, [pc, #504]	; (8002208 <HAL_RCC_OscConfig+0x288>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a7d      	ldr	r2, [pc, #500]	; (8002208 <HAL_RCC_OscConfig+0x288>)
 8002014:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	e01d      	b.n	8002058 <HAL_RCC_OscConfig+0xd8>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002024:	d10c      	bne.n	8002040 <HAL_RCC_OscConfig+0xc0>
 8002026:	4b78      	ldr	r3, [pc, #480]	; (8002208 <HAL_RCC_OscConfig+0x288>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a77      	ldr	r2, [pc, #476]	; (8002208 <HAL_RCC_OscConfig+0x288>)
 800202c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	4b75      	ldr	r3, [pc, #468]	; (8002208 <HAL_RCC_OscConfig+0x288>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a74      	ldr	r2, [pc, #464]	; (8002208 <HAL_RCC_OscConfig+0x288>)
 8002038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800203c:	6013      	str	r3, [r2, #0]
 800203e:	e00b      	b.n	8002058 <HAL_RCC_OscConfig+0xd8>
 8002040:	4b71      	ldr	r3, [pc, #452]	; (8002208 <HAL_RCC_OscConfig+0x288>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a70      	ldr	r2, [pc, #448]	; (8002208 <HAL_RCC_OscConfig+0x288>)
 8002046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800204a:	6013      	str	r3, [r2, #0]
 800204c:	4b6e      	ldr	r3, [pc, #440]	; (8002208 <HAL_RCC_OscConfig+0x288>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a6d      	ldr	r2, [pc, #436]	; (8002208 <HAL_RCC_OscConfig+0x288>)
 8002052:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002056:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d013      	beq.n	8002088 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002060:	f7ff f98c 	bl	800137c <HAL_GetTick>
 8002064:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002068:	f7ff f988 	bl	800137c <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b64      	cmp	r3, #100	; 0x64
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e3d4      	b.n	8002824 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800207a:	4b63      	ldr	r3, [pc, #396]	; (8002208 <HAL_RCC_OscConfig+0x288>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0f0      	beq.n	8002068 <HAL_RCC_OscConfig+0xe8>
 8002086:	e014      	b.n	80020b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002088:	f7ff f978 	bl	800137c <HAL_GetTick>
 800208c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002090:	f7ff f974 	bl	800137c <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b64      	cmp	r3, #100	; 0x64
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e3c0      	b.n	8002824 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80020a2:	4b59      	ldr	r3, [pc, #356]	; (8002208 <HAL_RCC_OscConfig+0x288>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f0      	bne.n	8002090 <HAL_RCC_OscConfig+0x110>
 80020ae:	e000      	b.n	80020b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 80ca 	beq.w	8002254 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020c0:	4b51      	ldr	r3, [pc, #324]	; (8002208 <HAL_RCC_OscConfig+0x288>)
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020c8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80020ca:	4b4f      	ldr	r3, [pc, #316]	; (8002208 <HAL_RCC_OscConfig+0x288>)
 80020cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ce:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80020d0:	6a3b      	ldr	r3, [r7, #32]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d007      	beq.n	80020e6 <HAL_RCC_OscConfig+0x166>
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	2b18      	cmp	r3, #24
 80020da:	d156      	bne.n	800218a <HAL_RCC_OscConfig+0x20a>
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d151      	bne.n	800218a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020e6:	4b48      	ldr	r3, [pc, #288]	; (8002208 <HAL_RCC_OscConfig+0x288>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0304 	and.w	r3, r3, #4
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d005      	beq.n	80020fe <HAL_RCC_OscConfig+0x17e>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e392      	b.n	8002824 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80020fe:	4b42      	ldr	r3, [pc, #264]	; (8002208 <HAL_RCC_OscConfig+0x288>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f023 0219 	bic.w	r2, r3, #25
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	493f      	ldr	r1, [pc, #252]	; (8002208 <HAL_RCC_OscConfig+0x288>)
 800210c:	4313      	orrs	r3, r2
 800210e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002110:	f7ff f934 	bl	800137c <HAL_GetTick>
 8002114:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002118:	f7ff f930 	bl	800137c <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e37c      	b.n	8002824 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800212a:	4b37      	ldr	r3, [pc, #220]	; (8002208 <HAL_RCC_OscConfig+0x288>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0304 	and.w	r3, r3, #4
 8002132:	2b00      	cmp	r3, #0
 8002134:	d0f0      	beq.n	8002118 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002136:	f7ff f951 	bl	80013dc <HAL_GetREVID>
 800213a:	4603      	mov	r3, r0
 800213c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002140:	4293      	cmp	r3, r2
 8002142:	d817      	bhi.n	8002174 <HAL_RCC_OscConfig+0x1f4>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	2b40      	cmp	r3, #64	; 0x40
 800214a:	d108      	bne.n	800215e <HAL_RCC_OscConfig+0x1de>
 800214c:	4b2e      	ldr	r3, [pc, #184]	; (8002208 <HAL_RCC_OscConfig+0x288>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002154:	4a2c      	ldr	r2, [pc, #176]	; (8002208 <HAL_RCC_OscConfig+0x288>)
 8002156:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800215a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800215c:	e07a      	b.n	8002254 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800215e:	4b2a      	ldr	r3, [pc, #168]	; (8002208 <HAL_RCC_OscConfig+0x288>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	031b      	lsls	r3, r3, #12
 800216c:	4926      	ldr	r1, [pc, #152]	; (8002208 <HAL_RCC_OscConfig+0x288>)
 800216e:	4313      	orrs	r3, r2
 8002170:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002172:	e06f      	b.n	8002254 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002174:	4b24      	ldr	r3, [pc, #144]	; (8002208 <HAL_RCC_OscConfig+0x288>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	061b      	lsls	r3, r3, #24
 8002182:	4921      	ldr	r1, [pc, #132]	; (8002208 <HAL_RCC_OscConfig+0x288>)
 8002184:	4313      	orrs	r3, r2
 8002186:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002188:	e064      	b.n	8002254 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d047      	beq.n	8002222 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002192:	4b1d      	ldr	r3, [pc, #116]	; (8002208 <HAL_RCC_OscConfig+0x288>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f023 0219 	bic.w	r2, r3, #25
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	491a      	ldr	r1, [pc, #104]	; (8002208 <HAL_RCC_OscConfig+0x288>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a4:	f7ff f8ea 	bl	800137c <HAL_GetTick>
 80021a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ac:	f7ff f8e6 	bl	800137c <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e332      	b.n	8002824 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021be:	4b12      	ldr	r3, [pc, #72]	; (8002208 <HAL_RCC_OscConfig+0x288>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0304 	and.w	r3, r3, #4
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0f0      	beq.n	80021ac <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ca:	f7ff f907 	bl	80013dc <HAL_GetREVID>
 80021ce:	4603      	mov	r3, r0
 80021d0:	f241 0203 	movw	r2, #4099	; 0x1003
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d819      	bhi.n	800220c <HAL_RCC_OscConfig+0x28c>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	2b40      	cmp	r3, #64	; 0x40
 80021de:	d108      	bne.n	80021f2 <HAL_RCC_OscConfig+0x272>
 80021e0:	4b09      	ldr	r3, [pc, #36]	; (8002208 <HAL_RCC_OscConfig+0x288>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80021e8:	4a07      	ldr	r2, [pc, #28]	; (8002208 <HAL_RCC_OscConfig+0x288>)
 80021ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021ee:	6053      	str	r3, [r2, #4]
 80021f0:	e030      	b.n	8002254 <HAL_RCC_OscConfig+0x2d4>
 80021f2:	4b05      	ldr	r3, [pc, #20]	; (8002208 <HAL_RCC_OscConfig+0x288>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	031b      	lsls	r3, r3, #12
 8002200:	4901      	ldr	r1, [pc, #4]	; (8002208 <HAL_RCC_OscConfig+0x288>)
 8002202:	4313      	orrs	r3, r2
 8002204:	604b      	str	r3, [r1, #4]
 8002206:	e025      	b.n	8002254 <HAL_RCC_OscConfig+0x2d4>
 8002208:	58024400 	.word	0x58024400
 800220c:	4b9a      	ldr	r3, [pc, #616]	; (8002478 <HAL_RCC_OscConfig+0x4f8>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	061b      	lsls	r3, r3, #24
 800221a:	4997      	ldr	r1, [pc, #604]	; (8002478 <HAL_RCC_OscConfig+0x4f8>)
 800221c:	4313      	orrs	r3, r2
 800221e:	604b      	str	r3, [r1, #4]
 8002220:	e018      	b.n	8002254 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002222:	4b95      	ldr	r3, [pc, #596]	; (8002478 <HAL_RCC_OscConfig+0x4f8>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a94      	ldr	r2, [pc, #592]	; (8002478 <HAL_RCC_OscConfig+0x4f8>)
 8002228:	f023 0301 	bic.w	r3, r3, #1
 800222c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222e:	f7ff f8a5 	bl	800137c <HAL_GetTick>
 8002232:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002236:	f7ff f8a1 	bl	800137c <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e2ed      	b.n	8002824 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002248:	4b8b      	ldr	r3, [pc, #556]	; (8002478 <HAL_RCC_OscConfig+0x4f8>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1f0      	bne.n	8002236 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0310 	and.w	r3, r3, #16
 800225c:	2b00      	cmp	r3, #0
 800225e:	f000 80a9 	beq.w	80023b4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002262:	4b85      	ldr	r3, [pc, #532]	; (8002478 <HAL_RCC_OscConfig+0x4f8>)
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800226a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800226c:	4b82      	ldr	r3, [pc, #520]	; (8002478 <HAL_RCC_OscConfig+0x4f8>)
 800226e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002270:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	2b08      	cmp	r3, #8
 8002276:	d007      	beq.n	8002288 <HAL_RCC_OscConfig+0x308>
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	2b18      	cmp	r3, #24
 800227c:	d13a      	bne.n	80022f4 <HAL_RCC_OscConfig+0x374>
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	f003 0303 	and.w	r3, r3, #3
 8002284:	2b01      	cmp	r3, #1
 8002286:	d135      	bne.n	80022f4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002288:	4b7b      	ldr	r3, [pc, #492]	; (8002478 <HAL_RCC_OscConfig+0x4f8>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002290:	2b00      	cmp	r3, #0
 8002292:	d005      	beq.n	80022a0 <HAL_RCC_OscConfig+0x320>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	2b80      	cmp	r3, #128	; 0x80
 800229a:	d001      	beq.n	80022a0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e2c1      	b.n	8002824 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80022a0:	f7ff f89c 	bl	80013dc <HAL_GetREVID>
 80022a4:	4603      	mov	r3, r0
 80022a6:	f241 0203 	movw	r2, #4099	; 0x1003
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d817      	bhi.n	80022de <HAL_RCC_OscConfig+0x35e>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	2b20      	cmp	r3, #32
 80022b4:	d108      	bne.n	80022c8 <HAL_RCC_OscConfig+0x348>
 80022b6:	4b70      	ldr	r3, [pc, #448]	; (8002478 <HAL_RCC_OscConfig+0x4f8>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80022be:	4a6e      	ldr	r2, [pc, #440]	; (8002478 <HAL_RCC_OscConfig+0x4f8>)
 80022c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80022c4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80022c6:	e075      	b.n	80023b4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80022c8:	4b6b      	ldr	r3, [pc, #428]	; (8002478 <HAL_RCC_OscConfig+0x4f8>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	069b      	lsls	r3, r3, #26
 80022d6:	4968      	ldr	r1, [pc, #416]	; (8002478 <HAL_RCC_OscConfig+0x4f8>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80022dc:	e06a      	b.n	80023b4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80022de:	4b66      	ldr	r3, [pc, #408]	; (8002478 <HAL_RCC_OscConfig+0x4f8>)
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	061b      	lsls	r3, r3, #24
 80022ec:	4962      	ldr	r1, [pc, #392]	; (8002478 <HAL_RCC_OscConfig+0x4f8>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80022f2:	e05f      	b.n	80023b4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d042      	beq.n	8002382 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80022fc:	4b5e      	ldr	r3, [pc, #376]	; (8002478 <HAL_RCC_OscConfig+0x4f8>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a5d      	ldr	r2, [pc, #372]	; (8002478 <HAL_RCC_OscConfig+0x4f8>)
 8002302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002308:	f7ff f838 	bl	800137c <HAL_GetTick>
 800230c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002310:	f7ff f834 	bl	800137c <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e280      	b.n	8002824 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002322:	4b55      	ldr	r3, [pc, #340]	; (8002478 <HAL_RCC_OscConfig+0x4f8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0f0      	beq.n	8002310 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800232e:	f7ff f855 	bl	80013dc <HAL_GetREVID>
 8002332:	4603      	mov	r3, r0
 8002334:	f241 0203 	movw	r2, #4099	; 0x1003
 8002338:	4293      	cmp	r3, r2
 800233a:	d817      	bhi.n	800236c <HAL_RCC_OscConfig+0x3ec>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	2b20      	cmp	r3, #32
 8002342:	d108      	bne.n	8002356 <HAL_RCC_OscConfig+0x3d6>
 8002344:	4b4c      	ldr	r3, [pc, #304]	; (8002478 <HAL_RCC_OscConfig+0x4f8>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800234c:	4a4a      	ldr	r2, [pc, #296]	; (8002478 <HAL_RCC_OscConfig+0x4f8>)
 800234e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002352:	6053      	str	r3, [r2, #4]
 8002354:	e02e      	b.n	80023b4 <HAL_RCC_OscConfig+0x434>
 8002356:	4b48      	ldr	r3, [pc, #288]	; (8002478 <HAL_RCC_OscConfig+0x4f8>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	069b      	lsls	r3, r3, #26
 8002364:	4944      	ldr	r1, [pc, #272]	; (8002478 <HAL_RCC_OscConfig+0x4f8>)
 8002366:	4313      	orrs	r3, r2
 8002368:	604b      	str	r3, [r1, #4]
 800236a:	e023      	b.n	80023b4 <HAL_RCC_OscConfig+0x434>
 800236c:	4b42      	ldr	r3, [pc, #264]	; (8002478 <HAL_RCC_OscConfig+0x4f8>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	061b      	lsls	r3, r3, #24
 800237a:	493f      	ldr	r1, [pc, #252]	; (8002478 <HAL_RCC_OscConfig+0x4f8>)
 800237c:	4313      	orrs	r3, r2
 800237e:	60cb      	str	r3, [r1, #12]
 8002380:	e018      	b.n	80023b4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002382:	4b3d      	ldr	r3, [pc, #244]	; (8002478 <HAL_RCC_OscConfig+0x4f8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a3c      	ldr	r2, [pc, #240]	; (8002478 <HAL_RCC_OscConfig+0x4f8>)
 8002388:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800238c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238e:	f7fe fff5 	bl	800137c <HAL_GetTick>
 8002392:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002396:	f7fe fff1 	bl	800137c <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e23d      	b.n	8002824 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80023a8:	4b33      	ldr	r3, [pc, #204]	; (8002478 <HAL_RCC_OscConfig+0x4f8>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1f0      	bne.n	8002396 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0308 	and.w	r3, r3, #8
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d036      	beq.n	800242e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d019      	beq.n	80023fc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023c8:	4b2b      	ldr	r3, [pc, #172]	; (8002478 <HAL_RCC_OscConfig+0x4f8>)
 80023ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023cc:	4a2a      	ldr	r2, [pc, #168]	; (8002478 <HAL_RCC_OscConfig+0x4f8>)
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d4:	f7fe ffd2 	bl	800137c <HAL_GetTick>
 80023d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023dc:	f7fe ffce 	bl	800137c <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e21a      	b.n	8002824 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80023ee:	4b22      	ldr	r3, [pc, #136]	; (8002478 <HAL_RCC_OscConfig+0x4f8>)
 80023f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0f0      	beq.n	80023dc <HAL_RCC_OscConfig+0x45c>
 80023fa:	e018      	b.n	800242e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023fc:	4b1e      	ldr	r3, [pc, #120]	; (8002478 <HAL_RCC_OscConfig+0x4f8>)
 80023fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002400:	4a1d      	ldr	r2, [pc, #116]	; (8002478 <HAL_RCC_OscConfig+0x4f8>)
 8002402:	f023 0301 	bic.w	r3, r3, #1
 8002406:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002408:	f7fe ffb8 	bl	800137c <HAL_GetTick>
 800240c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002410:	f7fe ffb4 	bl	800137c <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e200      	b.n	8002824 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002422:	4b15      	ldr	r3, [pc, #84]	; (8002478 <HAL_RCC_OscConfig+0x4f8>)
 8002424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f0      	bne.n	8002410 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0320 	and.w	r3, r3, #32
 8002436:	2b00      	cmp	r3, #0
 8002438:	d039      	beq.n	80024ae <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d01c      	beq.n	800247c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002442:	4b0d      	ldr	r3, [pc, #52]	; (8002478 <HAL_RCC_OscConfig+0x4f8>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a0c      	ldr	r2, [pc, #48]	; (8002478 <HAL_RCC_OscConfig+0x4f8>)
 8002448:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800244c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800244e:	f7fe ff95 	bl	800137c <HAL_GetTick>
 8002452:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002456:	f7fe ff91 	bl	800137c <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e1dd      	b.n	8002824 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002468:	4b03      	ldr	r3, [pc, #12]	; (8002478 <HAL_RCC_OscConfig+0x4f8>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0f0      	beq.n	8002456 <HAL_RCC_OscConfig+0x4d6>
 8002474:	e01b      	b.n	80024ae <HAL_RCC_OscConfig+0x52e>
 8002476:	bf00      	nop
 8002478:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800247c:	4b9b      	ldr	r3, [pc, #620]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a9a      	ldr	r2, [pc, #616]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 8002482:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002486:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002488:	f7fe ff78 	bl	800137c <HAL_GetTick>
 800248c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002490:	f7fe ff74 	bl	800137c <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e1c0      	b.n	8002824 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80024a2:	4b92      	ldr	r3, [pc, #584]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f0      	bne.n	8002490 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 8081 	beq.w	80025be <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80024bc:	4b8c      	ldr	r3, [pc, #560]	; (80026f0 <HAL_RCC_OscConfig+0x770>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a8b      	ldr	r2, [pc, #556]	; (80026f0 <HAL_RCC_OscConfig+0x770>)
 80024c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024c8:	f7fe ff58 	bl	800137c <HAL_GetTick>
 80024cc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d0:	f7fe ff54 	bl	800137c <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b64      	cmp	r3, #100	; 0x64
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e1a0      	b.n	8002824 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024e2:	4b83      	ldr	r3, [pc, #524]	; (80026f0 <HAL_RCC_OscConfig+0x770>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f0      	beq.n	80024d0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d106      	bne.n	8002504 <HAL_RCC_OscConfig+0x584>
 80024f6:	4b7d      	ldr	r3, [pc, #500]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 80024f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fa:	4a7c      	ldr	r2, [pc, #496]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	6713      	str	r3, [r2, #112]	; 0x70
 8002502:	e02d      	b.n	8002560 <HAL_RCC_OscConfig+0x5e0>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10c      	bne.n	8002526 <HAL_RCC_OscConfig+0x5a6>
 800250c:	4b77      	ldr	r3, [pc, #476]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 800250e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002510:	4a76      	ldr	r2, [pc, #472]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 8002512:	f023 0301 	bic.w	r3, r3, #1
 8002516:	6713      	str	r3, [r2, #112]	; 0x70
 8002518:	4b74      	ldr	r3, [pc, #464]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 800251a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800251c:	4a73      	ldr	r2, [pc, #460]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 800251e:	f023 0304 	bic.w	r3, r3, #4
 8002522:	6713      	str	r3, [r2, #112]	; 0x70
 8002524:	e01c      	b.n	8002560 <HAL_RCC_OscConfig+0x5e0>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	2b05      	cmp	r3, #5
 800252c:	d10c      	bne.n	8002548 <HAL_RCC_OscConfig+0x5c8>
 800252e:	4b6f      	ldr	r3, [pc, #444]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 8002530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002532:	4a6e      	ldr	r2, [pc, #440]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 8002534:	f043 0304 	orr.w	r3, r3, #4
 8002538:	6713      	str	r3, [r2, #112]	; 0x70
 800253a:	4b6c      	ldr	r3, [pc, #432]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 800253c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253e:	4a6b      	ldr	r2, [pc, #428]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 8002540:	f043 0301 	orr.w	r3, r3, #1
 8002544:	6713      	str	r3, [r2, #112]	; 0x70
 8002546:	e00b      	b.n	8002560 <HAL_RCC_OscConfig+0x5e0>
 8002548:	4b68      	ldr	r3, [pc, #416]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 800254a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254c:	4a67      	ldr	r2, [pc, #412]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 800254e:	f023 0301 	bic.w	r3, r3, #1
 8002552:	6713      	str	r3, [r2, #112]	; 0x70
 8002554:	4b65      	ldr	r3, [pc, #404]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 8002556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002558:	4a64      	ldr	r2, [pc, #400]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 800255a:	f023 0304 	bic.w	r3, r3, #4
 800255e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d015      	beq.n	8002594 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002568:	f7fe ff08 	bl	800137c <HAL_GetTick>
 800256c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800256e:	e00a      	b.n	8002586 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002570:	f7fe ff04 	bl	800137c <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	f241 3288 	movw	r2, #5000	; 0x1388
 800257e:	4293      	cmp	r3, r2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e14e      	b.n	8002824 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002586:	4b59      	ldr	r3, [pc, #356]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 8002588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0ee      	beq.n	8002570 <HAL_RCC_OscConfig+0x5f0>
 8002592:	e014      	b.n	80025be <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002594:	f7fe fef2 	bl	800137c <HAL_GetTick>
 8002598:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800259a:	e00a      	b.n	80025b2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800259c:	f7fe feee 	bl	800137c <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e138      	b.n	8002824 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80025b2:	4b4e      	ldr	r3, [pc, #312]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 80025b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1ee      	bne.n	800259c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 812d 	beq.w	8002822 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80025c8:	4b48      	ldr	r3, [pc, #288]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025d0:	2b18      	cmp	r3, #24
 80025d2:	f000 80bd 	beq.w	8002750 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	2b02      	cmp	r3, #2
 80025dc:	f040 809e 	bne.w	800271c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e0:	4b42      	ldr	r3, [pc, #264]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a41      	ldr	r2, [pc, #260]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 80025e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7fe fec6 	bl	800137c <HAL_GetTick>
 80025f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f4:	f7fe fec2 	bl	800137c <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e10e      	b.n	8002824 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002606:	4b39      	ldr	r3, [pc, #228]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002612:	4b36      	ldr	r3, [pc, #216]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 8002614:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002616:	4b37      	ldr	r3, [pc, #220]	; (80026f4 <HAL_RCC_OscConfig+0x774>)
 8002618:	4013      	ands	r3, r2
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002622:	0112      	lsls	r2, r2, #4
 8002624:	430a      	orrs	r2, r1
 8002626:	4931      	ldr	r1, [pc, #196]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 8002628:	4313      	orrs	r3, r2
 800262a:	628b      	str	r3, [r1, #40]	; 0x28
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002630:	3b01      	subs	r3, #1
 8002632:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800263a:	3b01      	subs	r3, #1
 800263c:	025b      	lsls	r3, r3, #9
 800263e:	b29b      	uxth	r3, r3
 8002640:	431a      	orrs	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002646:	3b01      	subs	r3, #1
 8002648:	041b      	lsls	r3, r3, #16
 800264a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002654:	3b01      	subs	r3, #1
 8002656:	061b      	lsls	r3, r3, #24
 8002658:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800265c:	4923      	ldr	r1, [pc, #140]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 800265e:	4313      	orrs	r3, r2
 8002660:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002662:	4b22      	ldr	r3, [pc, #136]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 8002664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002666:	4a21      	ldr	r2, [pc, #132]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 8002668:	f023 0301 	bic.w	r3, r3, #1
 800266c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800266e:	4b1f      	ldr	r3, [pc, #124]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 8002670:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002672:	4b21      	ldr	r3, [pc, #132]	; (80026f8 <HAL_RCC_OscConfig+0x778>)
 8002674:	4013      	ands	r3, r2
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800267a:	00d2      	lsls	r2, r2, #3
 800267c:	491b      	ldr	r1, [pc, #108]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 800267e:	4313      	orrs	r3, r2
 8002680:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002682:	4b1a      	ldr	r3, [pc, #104]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 8002684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002686:	f023 020c 	bic.w	r2, r3, #12
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	4917      	ldr	r1, [pc, #92]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 8002690:	4313      	orrs	r3, r2
 8002692:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002694:	4b15      	ldr	r3, [pc, #84]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 8002696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002698:	f023 0202 	bic.w	r2, r3, #2
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a0:	4912      	ldr	r1, [pc, #72]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80026a6:	4b11      	ldr	r3, [pc, #68]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 80026a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026aa:	4a10      	ldr	r2, [pc, #64]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 80026ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026b2:	4b0e      	ldr	r3, [pc, #56]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 80026b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b6:	4a0d      	ldr	r2, [pc, #52]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 80026b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80026be:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 80026c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c2:	4a0a      	ldr	r2, [pc, #40]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 80026c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80026ca:	4b08      	ldr	r3, [pc, #32]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 80026cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ce:	4a07      	ldr	r2, [pc, #28]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 80026d0:	f043 0301 	orr.w	r3, r3, #1
 80026d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026d6:	4b05      	ldr	r3, [pc, #20]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a04      	ldr	r2, [pc, #16]	; (80026ec <HAL_RCC_OscConfig+0x76c>)
 80026dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e2:	f7fe fe4b 	bl	800137c <HAL_GetTick>
 80026e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80026e8:	e011      	b.n	800270e <HAL_RCC_OscConfig+0x78e>
 80026ea:	bf00      	nop
 80026ec:	58024400 	.word	0x58024400
 80026f0:	58024800 	.word	0x58024800
 80026f4:	fffffc0c 	.word	0xfffffc0c
 80026f8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026fc:	f7fe fe3e 	bl	800137c <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e08a      	b.n	8002824 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800270e:	4b47      	ldr	r3, [pc, #284]	; (800282c <HAL_RCC_OscConfig+0x8ac>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0x77c>
 800271a:	e082      	b.n	8002822 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800271c:	4b43      	ldr	r3, [pc, #268]	; (800282c <HAL_RCC_OscConfig+0x8ac>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a42      	ldr	r2, [pc, #264]	; (800282c <HAL_RCC_OscConfig+0x8ac>)
 8002722:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002726:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002728:	f7fe fe28 	bl	800137c <HAL_GetTick>
 800272c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002730:	f7fe fe24 	bl	800137c <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e070      	b.n	8002824 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002742:	4b3a      	ldr	r3, [pc, #232]	; (800282c <HAL_RCC_OscConfig+0x8ac>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0x7b0>
 800274e:	e068      	b.n	8002822 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002750:	4b36      	ldr	r3, [pc, #216]	; (800282c <HAL_RCC_OscConfig+0x8ac>)
 8002752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002754:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002756:	4b35      	ldr	r3, [pc, #212]	; (800282c <HAL_RCC_OscConfig+0x8ac>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	2b01      	cmp	r3, #1
 8002762:	d031      	beq.n	80027c8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	f003 0203 	and.w	r2, r3, #3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800276e:	429a      	cmp	r2, r3
 8002770:	d12a      	bne.n	80027c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	091b      	lsrs	r3, r3, #4
 8002776:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800277e:	429a      	cmp	r2, r3
 8002780:	d122      	bne.n	80027c8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800278e:	429a      	cmp	r2, r3
 8002790:	d11a      	bne.n	80027c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	0a5b      	lsrs	r3, r3, #9
 8002796:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800279e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d111      	bne.n	80027c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	0c1b      	lsrs	r3, r3, #16
 80027a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d108      	bne.n	80027c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	0e1b      	lsrs	r3, r3, #24
 80027ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d001      	beq.n	80027cc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e02b      	b.n	8002824 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80027cc:	4b17      	ldr	r3, [pc, #92]	; (800282c <HAL_RCC_OscConfig+0x8ac>)
 80027ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d0:	08db      	lsrs	r3, r3, #3
 80027d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80027d6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d01f      	beq.n	8002822 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80027e2:	4b12      	ldr	r3, [pc, #72]	; (800282c <HAL_RCC_OscConfig+0x8ac>)
 80027e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e6:	4a11      	ldr	r2, [pc, #68]	; (800282c <HAL_RCC_OscConfig+0x8ac>)
 80027e8:	f023 0301 	bic.w	r3, r3, #1
 80027ec:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027ee:	f7fe fdc5 	bl	800137c <HAL_GetTick>
 80027f2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80027f4:	bf00      	nop
 80027f6:	f7fe fdc1 	bl	800137c <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	4293      	cmp	r3, r2
 8002800:	d0f9      	beq.n	80027f6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002802:	4b0a      	ldr	r3, [pc, #40]	; (800282c <HAL_RCC_OscConfig+0x8ac>)
 8002804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002806:	4b0a      	ldr	r3, [pc, #40]	; (8002830 <HAL_RCC_OscConfig+0x8b0>)
 8002808:	4013      	ands	r3, r2
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800280e:	00d2      	lsls	r2, r2, #3
 8002810:	4906      	ldr	r1, [pc, #24]	; (800282c <HAL_RCC_OscConfig+0x8ac>)
 8002812:	4313      	orrs	r3, r2
 8002814:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002816:	4b05      	ldr	r3, [pc, #20]	; (800282c <HAL_RCC_OscConfig+0x8ac>)
 8002818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281a:	4a04      	ldr	r2, [pc, #16]	; (800282c <HAL_RCC_OscConfig+0x8ac>)
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3730      	adds	r7, #48	; 0x30
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	58024400 	.word	0x58024400
 8002830:	ffff0007 	.word	0xffff0007

08002834 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e19c      	b.n	8002b82 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002848:	4b8a      	ldr	r3, [pc, #552]	; (8002a74 <HAL_RCC_ClockConfig+0x240>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 030f 	and.w	r3, r3, #15
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	429a      	cmp	r2, r3
 8002854:	d910      	bls.n	8002878 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002856:	4b87      	ldr	r3, [pc, #540]	; (8002a74 <HAL_RCC_ClockConfig+0x240>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f023 020f 	bic.w	r2, r3, #15
 800285e:	4985      	ldr	r1, [pc, #532]	; (8002a74 <HAL_RCC_ClockConfig+0x240>)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	4313      	orrs	r3, r2
 8002864:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002866:	4b83      	ldr	r3, [pc, #524]	; (8002a74 <HAL_RCC_ClockConfig+0x240>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	429a      	cmp	r2, r3
 8002872:	d001      	beq.n	8002878 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e184      	b.n	8002b82 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b00      	cmp	r3, #0
 8002882:	d010      	beq.n	80028a6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691a      	ldr	r2, [r3, #16]
 8002888:	4b7b      	ldr	r3, [pc, #492]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002890:	429a      	cmp	r2, r3
 8002892:	d908      	bls.n	80028a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002894:	4b78      	ldr	r3, [pc, #480]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	4975      	ldr	r1, [pc, #468]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0308 	and.w	r3, r3, #8
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d010      	beq.n	80028d4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	695a      	ldr	r2, [r3, #20]
 80028b6:	4b70      	ldr	r3, [pc, #448]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028be:	429a      	cmp	r2, r3
 80028c0:	d908      	bls.n	80028d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80028c2:	4b6d      	ldr	r3, [pc, #436]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	496a      	ldr	r1, [pc, #424]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0310 	and.w	r3, r3, #16
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d010      	beq.n	8002902 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	699a      	ldr	r2, [r3, #24]
 80028e4:	4b64      	ldr	r3, [pc, #400]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 80028e6:	69db      	ldr	r3, [r3, #28]
 80028e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d908      	bls.n	8002902 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80028f0:	4b61      	ldr	r3, [pc, #388]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 80028f2:	69db      	ldr	r3, [r3, #28]
 80028f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	495e      	ldr	r1, [pc, #376]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0320 	and.w	r3, r3, #32
 800290a:	2b00      	cmp	r3, #0
 800290c:	d010      	beq.n	8002930 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69da      	ldr	r2, [r3, #28]
 8002912:	4b59      	ldr	r3, [pc, #356]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800291a:	429a      	cmp	r2, r3
 800291c:	d908      	bls.n	8002930 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800291e:	4b56      	ldr	r3, [pc, #344]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	4953      	ldr	r1, [pc, #332]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 800292c:	4313      	orrs	r3, r2
 800292e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d010      	beq.n	800295e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68da      	ldr	r2, [r3, #12]
 8002940:	4b4d      	ldr	r3, [pc, #308]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	f003 030f 	and.w	r3, r3, #15
 8002948:	429a      	cmp	r2, r3
 800294a:	d908      	bls.n	800295e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800294c:	4b4a      	ldr	r3, [pc, #296]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	f023 020f 	bic.w	r2, r3, #15
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	4947      	ldr	r1, [pc, #284]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 800295a:	4313      	orrs	r3, r2
 800295c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d055      	beq.n	8002a16 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800296a:	4b43      	ldr	r3, [pc, #268]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	4940      	ldr	r1, [pc, #256]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 8002978:	4313      	orrs	r3, r2
 800297a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	2b02      	cmp	r3, #2
 8002982:	d107      	bne.n	8002994 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002984:	4b3c      	ldr	r3, [pc, #240]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d121      	bne.n	80029d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e0f6      	b.n	8002b82 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2b03      	cmp	r3, #3
 800299a:	d107      	bne.n	80029ac <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800299c:	4b36      	ldr	r3, [pc, #216]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d115      	bne.n	80029d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e0ea      	b.n	8002b82 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d107      	bne.n	80029c4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029b4:	4b30      	ldr	r3, [pc, #192]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d109      	bne.n	80029d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e0de      	b.n	8002b82 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029c4:	4b2c      	ldr	r3, [pc, #176]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e0d6      	b.n	8002b82 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029d4:	4b28      	ldr	r3, [pc, #160]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	f023 0207 	bic.w	r2, r3, #7
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	4925      	ldr	r1, [pc, #148]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029e6:	f7fe fcc9 	bl	800137c <HAL_GetTick>
 80029ea:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ec:	e00a      	b.n	8002a04 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ee:	f7fe fcc5 	bl	800137c <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e0be      	b.n	8002b82 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a04:	4b1c      	ldr	r3, [pc, #112]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d1eb      	bne.n	80029ee <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d010      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	4b14      	ldr	r3, [pc, #80]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	f003 030f 	and.w	r3, r3, #15
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d208      	bcs.n	8002a44 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a32:	4b11      	ldr	r3, [pc, #68]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	f023 020f 	bic.w	r2, r3, #15
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	490e      	ldr	r1, [pc, #56]	; (8002a78 <HAL_RCC_ClockConfig+0x244>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a44:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <HAL_RCC_ClockConfig+0x240>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 030f 	and.w	r3, r3, #15
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d214      	bcs.n	8002a7c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a52:	4b08      	ldr	r3, [pc, #32]	; (8002a74 <HAL_RCC_ClockConfig+0x240>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f023 020f 	bic.w	r2, r3, #15
 8002a5a:	4906      	ldr	r1, [pc, #24]	; (8002a74 <HAL_RCC_ClockConfig+0x240>)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a62:	4b04      	ldr	r3, [pc, #16]	; (8002a74 <HAL_RCC_ClockConfig+0x240>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d005      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e086      	b.n	8002b82 <HAL_RCC_ClockConfig+0x34e>
 8002a74:	52002000 	.word	0x52002000
 8002a78:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d010      	beq.n	8002aaa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691a      	ldr	r2, [r3, #16]
 8002a8c:	4b3f      	ldr	r3, [pc, #252]	; (8002b8c <HAL_RCC_ClockConfig+0x358>)
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d208      	bcs.n	8002aaa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002a98:	4b3c      	ldr	r3, [pc, #240]	; (8002b8c <HAL_RCC_ClockConfig+0x358>)
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	4939      	ldr	r1, [pc, #228]	; (8002b8c <HAL_RCC_ClockConfig+0x358>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0308 	and.w	r3, r3, #8
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d010      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	695a      	ldr	r2, [r3, #20]
 8002aba:	4b34      	ldr	r3, [pc, #208]	; (8002b8c <HAL_RCC_ClockConfig+0x358>)
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d208      	bcs.n	8002ad8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ac6:	4b31      	ldr	r3, [pc, #196]	; (8002b8c <HAL_RCC_ClockConfig+0x358>)
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	492e      	ldr	r1, [pc, #184]	; (8002b8c <HAL_RCC_ClockConfig+0x358>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0310 	and.w	r3, r3, #16
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d010      	beq.n	8002b06 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	699a      	ldr	r2, [r3, #24]
 8002ae8:	4b28      	ldr	r3, [pc, #160]	; (8002b8c <HAL_RCC_ClockConfig+0x358>)
 8002aea:	69db      	ldr	r3, [r3, #28]
 8002aec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d208      	bcs.n	8002b06 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002af4:	4b25      	ldr	r3, [pc, #148]	; (8002b8c <HAL_RCC_ClockConfig+0x358>)
 8002af6:	69db      	ldr	r3, [r3, #28]
 8002af8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	4922      	ldr	r1, [pc, #136]	; (8002b8c <HAL_RCC_ClockConfig+0x358>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0320 	and.w	r3, r3, #32
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d010      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69da      	ldr	r2, [r3, #28]
 8002b16:	4b1d      	ldr	r3, [pc, #116]	; (8002b8c <HAL_RCC_ClockConfig+0x358>)
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d208      	bcs.n	8002b34 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002b22:	4b1a      	ldr	r3, [pc, #104]	; (8002b8c <HAL_RCC_ClockConfig+0x358>)
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	4917      	ldr	r1, [pc, #92]	; (8002b8c <HAL_RCC_ClockConfig+0x358>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b34:	f000 f834 	bl	8002ba0 <HAL_RCC_GetSysClockFreq>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	4b14      	ldr	r3, [pc, #80]	; (8002b8c <HAL_RCC_ClockConfig+0x358>)
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	0a1b      	lsrs	r3, r3, #8
 8002b40:	f003 030f 	and.w	r3, r3, #15
 8002b44:	4912      	ldr	r1, [pc, #72]	; (8002b90 <HAL_RCC_ClockConfig+0x35c>)
 8002b46:	5ccb      	ldrb	r3, [r1, r3]
 8002b48:	f003 031f 	and.w	r3, r3, #31
 8002b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b50:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b52:	4b0e      	ldr	r3, [pc, #56]	; (8002b8c <HAL_RCC_ClockConfig+0x358>)
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	4a0d      	ldr	r2, [pc, #52]	; (8002b90 <HAL_RCC_ClockConfig+0x35c>)
 8002b5c:	5cd3      	ldrb	r3, [r2, r3]
 8002b5e:	f003 031f 	and.w	r3, r3, #31
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	fa22 f303 	lsr.w	r3, r2, r3
 8002b68:	4a0a      	ldr	r2, [pc, #40]	; (8002b94 <HAL_RCC_ClockConfig+0x360>)
 8002b6a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b6c:	4a0a      	ldr	r2, [pc, #40]	; (8002b98 <HAL_RCC_ClockConfig+0x364>)
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002b72:	4b0a      	ldr	r3, [pc, #40]	; (8002b9c <HAL_RCC_ClockConfig+0x368>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe fbb6 	bl	80012e8 <HAL_InitTick>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	58024400 	.word	0x58024400
 8002b90:	08006884 	.word	0x08006884
 8002b94:	24000004 	.word	0x24000004
 8002b98:	24000000 	.word	0x24000000
 8002b9c:	24000008 	.word	0x24000008

08002ba0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b089      	sub	sp, #36	; 0x24
 8002ba4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ba6:	4bb3      	ldr	r3, [pc, #716]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bae:	2b18      	cmp	r3, #24
 8002bb0:	f200 8155 	bhi.w	8002e5e <HAL_RCC_GetSysClockFreq+0x2be>
 8002bb4:	a201      	add	r2, pc, #4	; (adr r2, 8002bbc <HAL_RCC_GetSysClockFreq+0x1c>)
 8002bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bba:	bf00      	nop
 8002bbc:	08002c21 	.word	0x08002c21
 8002bc0:	08002e5f 	.word	0x08002e5f
 8002bc4:	08002e5f 	.word	0x08002e5f
 8002bc8:	08002e5f 	.word	0x08002e5f
 8002bcc:	08002e5f 	.word	0x08002e5f
 8002bd0:	08002e5f 	.word	0x08002e5f
 8002bd4:	08002e5f 	.word	0x08002e5f
 8002bd8:	08002e5f 	.word	0x08002e5f
 8002bdc:	08002c47 	.word	0x08002c47
 8002be0:	08002e5f 	.word	0x08002e5f
 8002be4:	08002e5f 	.word	0x08002e5f
 8002be8:	08002e5f 	.word	0x08002e5f
 8002bec:	08002e5f 	.word	0x08002e5f
 8002bf0:	08002e5f 	.word	0x08002e5f
 8002bf4:	08002e5f 	.word	0x08002e5f
 8002bf8:	08002e5f 	.word	0x08002e5f
 8002bfc:	08002c4d 	.word	0x08002c4d
 8002c00:	08002e5f 	.word	0x08002e5f
 8002c04:	08002e5f 	.word	0x08002e5f
 8002c08:	08002e5f 	.word	0x08002e5f
 8002c0c:	08002e5f 	.word	0x08002e5f
 8002c10:	08002e5f 	.word	0x08002e5f
 8002c14:	08002e5f 	.word	0x08002e5f
 8002c18:	08002e5f 	.word	0x08002e5f
 8002c1c:	08002c53 	.word	0x08002c53
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c20:	4b94      	ldr	r3, [pc, #592]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0320 	and.w	r3, r3, #32
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d009      	beq.n	8002c40 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002c2c:	4b91      	ldr	r3, [pc, #580]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	08db      	lsrs	r3, r3, #3
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	4a90      	ldr	r2, [pc, #576]	; (8002e78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c38:	fa22 f303 	lsr.w	r3, r2, r3
 8002c3c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002c3e:	e111      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002c40:	4b8d      	ldr	r3, [pc, #564]	; (8002e78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c42:	61bb      	str	r3, [r7, #24]
      break;
 8002c44:	e10e      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002c46:	4b8d      	ldr	r3, [pc, #564]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002c48:	61bb      	str	r3, [r7, #24]
      break;
 8002c4a:	e10b      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002c4c:	4b8c      	ldr	r3, [pc, #560]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002c4e:	61bb      	str	r3, [r7, #24]
      break;
 8002c50:	e108      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002c52:	4b88      	ldr	r3, [pc, #544]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002c5c:	4b85      	ldr	r3, [pc, #532]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c60:	091b      	lsrs	r3, r3, #4
 8002c62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c66:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002c68:	4b82      	ldr	r3, [pc, #520]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002c72:	4b80      	ldr	r3, [pc, #512]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c76:	08db      	lsrs	r3, r3, #3
 8002c78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	fb02 f303 	mul.w	r3, r2, r3
 8002c82:	ee07 3a90 	vmov	s15, r3
 8002c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c8a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 80e1 	beq.w	8002e58 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	f000 8083 	beq.w	8002da4 <HAL_RCC_GetSysClockFreq+0x204>
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	f200 80a1 	bhi.w	8002de8 <HAL_RCC_GetSysClockFreq+0x248>
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x114>
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d056      	beq.n	8002d60 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002cb2:	e099      	b.n	8002de8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002cb4:	4b6f      	ldr	r3, [pc, #444]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0320 	and.w	r3, r3, #32
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d02d      	beq.n	8002d1c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002cc0:	4b6c      	ldr	r3, [pc, #432]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	08db      	lsrs	r3, r3, #3
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	4a6b      	ldr	r2, [pc, #428]	; (8002e78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	ee07 3a90 	vmov	s15, r3
 8002cd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	ee07 3a90 	vmov	s15, r3
 8002ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cea:	4b62      	ldr	r3, [pc, #392]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cf2:	ee07 3a90 	vmov	s15, r3
 8002cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cfa:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cfe:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002e84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d16:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002d1a:	e087      	b.n	8002e2c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	ee07 3a90 	vmov	s15, r3
 8002d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d26:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002e88 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d2e:	4b51      	ldr	r3, [pc, #324]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d36:	ee07 3a90 	vmov	s15, r3
 8002d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d42:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002e84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002d5e:	e065      	b.n	8002e2c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	ee07 3a90 	vmov	s15, r3
 8002d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d6a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002e8c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d72:	4b40      	ldr	r3, [pc, #256]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d7a:	ee07 3a90 	vmov	s15, r3
 8002d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d82:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d86:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002e84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002da2:	e043      	b.n	8002e2c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	ee07 3a90 	vmov	s15, r3
 8002daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dae:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002e90 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002db6:	4b2f      	ldr	r3, [pc, #188]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dbe:	ee07 3a90 	vmov	s15, r3
 8002dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002dca:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002e84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002de2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002de6:	e021      	b.n	8002e2c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	ee07 3a90 	vmov	s15, r3
 8002dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002df2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002e8c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dfa:	4b1e      	ldr	r3, [pc, #120]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e02:	ee07 3a90 	vmov	s15, r3
 8002e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e0e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002e84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e2a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002e2c:	4b11      	ldr	r3, [pc, #68]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e30:	0a5b      	lsrs	r3, r3, #9
 8002e32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e36:	3301      	adds	r3, #1
 8002e38:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	ee07 3a90 	vmov	s15, r3
 8002e40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e44:	edd7 6a07 	vldr	s13, [r7, #28]
 8002e48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e50:	ee17 3a90 	vmov	r3, s15
 8002e54:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002e56:	e005      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	61bb      	str	r3, [r7, #24]
      break;
 8002e5c:	e002      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002e5e:	4b07      	ldr	r3, [pc, #28]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002e60:	61bb      	str	r3, [r7, #24]
      break;
 8002e62:	bf00      	nop
  }

  return sysclockfreq;
 8002e64:	69bb      	ldr	r3, [r7, #24]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3724      	adds	r7, #36	; 0x24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	58024400 	.word	0x58024400
 8002e78:	03d09000 	.word	0x03d09000
 8002e7c:	003d0900 	.word	0x003d0900
 8002e80:	017d7840 	.word	0x017d7840
 8002e84:	46000000 	.word	0x46000000
 8002e88:	4c742400 	.word	0x4c742400
 8002e8c:	4a742400 	.word	0x4a742400
 8002e90:	4bbebc20 	.word	0x4bbebc20

08002e94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002e9a:	f7ff fe81 	bl	8002ba0 <HAL_RCC_GetSysClockFreq>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	4b10      	ldr	r3, [pc, #64]	; (8002ee4 <HAL_RCC_GetHCLKFreq+0x50>)
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	0a1b      	lsrs	r3, r3, #8
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	490f      	ldr	r1, [pc, #60]	; (8002ee8 <HAL_RCC_GetHCLKFreq+0x54>)
 8002eac:	5ccb      	ldrb	r3, [r1, r3]
 8002eae:	f003 031f 	and.w	r3, r3, #31
 8002eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002eb8:	4b0a      	ldr	r3, [pc, #40]	; (8002ee4 <HAL_RCC_GetHCLKFreq+0x50>)
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	f003 030f 	and.w	r3, r3, #15
 8002ec0:	4a09      	ldr	r2, [pc, #36]	; (8002ee8 <HAL_RCC_GetHCLKFreq+0x54>)
 8002ec2:	5cd3      	ldrb	r3, [r2, r3]
 8002ec4:	f003 031f 	and.w	r3, r3, #31
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	fa22 f303 	lsr.w	r3, r2, r3
 8002ece:	4a07      	ldr	r2, [pc, #28]	; (8002eec <HAL_RCC_GetHCLKFreq+0x58>)
 8002ed0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ed2:	4a07      	ldr	r2, [pc, #28]	; (8002ef0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002ed8:	4b04      	ldr	r3, [pc, #16]	; (8002eec <HAL_RCC_GetHCLKFreq+0x58>)
 8002eda:	681b      	ldr	r3, [r3, #0]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	58024400 	.word	0x58024400
 8002ee8:	08006884 	.word	0x08006884
 8002eec:	24000004 	.word	0x24000004
 8002ef0:	24000000 	.word	0x24000000

08002ef4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002ef8:	f7ff ffcc 	bl	8002e94 <HAL_RCC_GetHCLKFreq>
 8002efc:	4602      	mov	r2, r0
 8002efe:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	091b      	lsrs	r3, r3, #4
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	4904      	ldr	r1, [pc, #16]	; (8002f1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f0a:	5ccb      	ldrb	r3, [r1, r3]
 8002f0c:	f003 031f 	and.w	r3, r3, #31
 8002f10:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	58024400 	.word	0x58024400
 8002f1c:	08006884 	.word	0x08006884

08002f20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002f24:	f7ff ffb6 	bl	8002e94 <HAL_RCC_GetHCLKFreq>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	0a1b      	lsrs	r3, r3, #8
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	4904      	ldr	r1, [pc, #16]	; (8002f48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f36:	5ccb      	ldrb	r3, [r1, r3]
 8002f38:	f003 031f 	and.w	r3, r3, #31
 8002f3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	58024400 	.word	0x58024400
 8002f48:	08006884 	.word	0x08006884

08002f4c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f50:	b0ca      	sub	sp, #296	; 0x128
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f58:	2300      	movs	r3, #0
 8002f5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f5e:	2300      	movs	r3, #0
 8002f60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002f70:	2500      	movs	r5, #0
 8002f72:	ea54 0305 	orrs.w	r3, r4, r5
 8002f76:	d049      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f7e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002f82:	d02f      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002f84:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002f88:	d828      	bhi.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002f8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f8e:	d01a      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002f90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f94:	d822      	bhi.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002f9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f9e:	d007      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002fa0:	e01c      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fa2:	4bb8      	ldr	r3, [pc, #736]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa6:	4ab7      	ldr	r2, [pc, #732]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002fae:	e01a      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fb4:	3308      	adds	r3, #8
 8002fb6:	2102      	movs	r1, #2
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f001 fc8f 	bl	80048dc <RCCEx_PLL2_Config>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002fc4:	e00f      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fca:	3328      	adds	r3, #40	; 0x28
 8002fcc:	2102      	movs	r1, #2
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f001 fd36 	bl	8004a40 <RCCEx_PLL3_Config>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002fda:	e004      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002fe2:	e000      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002fe4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10a      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002fee:	4ba5      	ldr	r3, [pc, #660]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ff2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ffa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ffc:	4aa1      	ldr	r2, [pc, #644]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ffe:	430b      	orrs	r3, r1
 8003000:	6513      	str	r3, [r2, #80]	; 0x50
 8003002:	e003      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003004:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003008:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800300c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003014:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003018:	f04f 0900 	mov.w	r9, #0
 800301c:	ea58 0309 	orrs.w	r3, r8, r9
 8003020:	d047      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003022:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003028:	2b04      	cmp	r3, #4
 800302a:	d82a      	bhi.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800302c:	a201      	add	r2, pc, #4	; (adr r2, 8003034 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800302e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003032:	bf00      	nop
 8003034:	08003049 	.word	0x08003049
 8003038:	08003057 	.word	0x08003057
 800303c:	0800306d 	.word	0x0800306d
 8003040:	0800308b 	.word	0x0800308b
 8003044:	0800308b 	.word	0x0800308b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003048:	4b8e      	ldr	r3, [pc, #568]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800304a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304c:	4a8d      	ldr	r2, [pc, #564]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800304e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003052:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003054:	e01a      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003056:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800305a:	3308      	adds	r3, #8
 800305c:	2100      	movs	r1, #0
 800305e:	4618      	mov	r0, r3
 8003060:	f001 fc3c 	bl	80048dc <RCCEx_PLL2_Config>
 8003064:	4603      	mov	r3, r0
 8003066:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800306a:	e00f      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800306c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003070:	3328      	adds	r3, #40	; 0x28
 8003072:	2100      	movs	r1, #0
 8003074:	4618      	mov	r0, r3
 8003076:	f001 fce3 	bl	8004a40 <RCCEx_PLL3_Config>
 800307a:	4603      	mov	r3, r0
 800307c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003080:	e004      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003088:	e000      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800308a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800308c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10a      	bne.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003094:	4b7b      	ldr	r3, [pc, #492]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003098:	f023 0107 	bic.w	r1, r3, #7
 800309c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a2:	4a78      	ldr	r2, [pc, #480]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030a4:	430b      	orrs	r3, r1
 80030a6:	6513      	str	r3, [r2, #80]	; 0x50
 80030a8:	e003      	b.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80030b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ba:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80030be:	f04f 0b00 	mov.w	fp, #0
 80030c2:	ea5a 030b 	orrs.w	r3, sl, fp
 80030c6:	d04c      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80030c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030d2:	d030      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80030d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030d8:	d829      	bhi.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80030da:	2bc0      	cmp	r3, #192	; 0xc0
 80030dc:	d02d      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80030de:	2bc0      	cmp	r3, #192	; 0xc0
 80030e0:	d825      	bhi.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80030e2:	2b80      	cmp	r3, #128	; 0x80
 80030e4:	d018      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80030e6:	2b80      	cmp	r3, #128	; 0x80
 80030e8:	d821      	bhi.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d002      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80030ee:	2b40      	cmp	r3, #64	; 0x40
 80030f0:	d007      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80030f2:	e01c      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030f4:	4b63      	ldr	r3, [pc, #396]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f8:	4a62      	ldr	r2, [pc, #392]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003100:	e01c      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003102:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003106:	3308      	adds	r3, #8
 8003108:	2100      	movs	r1, #0
 800310a:	4618      	mov	r0, r3
 800310c:	f001 fbe6 	bl	80048dc <RCCEx_PLL2_Config>
 8003110:	4603      	mov	r3, r0
 8003112:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003116:	e011      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003118:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800311c:	3328      	adds	r3, #40	; 0x28
 800311e:	2100      	movs	r1, #0
 8003120:	4618      	mov	r0, r3
 8003122:	f001 fc8d 	bl	8004a40 <RCCEx_PLL3_Config>
 8003126:	4603      	mov	r3, r0
 8003128:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800312c:	e006      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003134:	e002      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003136:	bf00      	nop
 8003138:	e000      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800313a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800313c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10a      	bne.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003144:	4b4f      	ldr	r3, [pc, #316]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003148:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800314c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003152:	4a4c      	ldr	r2, [pc, #304]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003154:	430b      	orrs	r3, r1
 8003156:	6513      	str	r3, [r2, #80]	; 0x50
 8003158:	e003      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800315a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800315e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003162:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800316e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003172:	2300      	movs	r3, #0
 8003174:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003178:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800317c:	460b      	mov	r3, r1
 800317e:	4313      	orrs	r3, r2
 8003180:	d053      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003186:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800318a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800318e:	d035      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003190:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003194:	d82e      	bhi.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003196:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800319a:	d031      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800319c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80031a0:	d828      	bhi.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80031a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031a6:	d01a      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x292>
 80031a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ac:	d822      	bhi.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80031b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031b6:	d007      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80031b8:	e01c      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031ba:	4b32      	ldr	r3, [pc, #200]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031be:	4a31      	ldr	r2, [pc, #196]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031c6:	e01c      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031cc:	3308      	adds	r3, #8
 80031ce:	2100      	movs	r1, #0
 80031d0:	4618      	mov	r0, r3
 80031d2:	f001 fb83 	bl	80048dc <RCCEx_PLL2_Config>
 80031d6:	4603      	mov	r3, r0
 80031d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80031dc:	e011      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80031de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031e2:	3328      	adds	r3, #40	; 0x28
 80031e4:	2100      	movs	r1, #0
 80031e6:	4618      	mov	r0, r3
 80031e8:	f001 fc2a 	bl	8004a40 <RCCEx_PLL3_Config>
 80031ec:	4603      	mov	r3, r0
 80031ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031f2:	e006      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80031fa:	e002      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80031fc:	bf00      	nop
 80031fe:	e000      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003200:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003202:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10b      	bne.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800320a:	4b1e      	ldr	r3, [pc, #120]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800320c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003216:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800321a:	4a1a      	ldr	r2, [pc, #104]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800321c:	430b      	orrs	r3, r1
 800321e:	6593      	str	r3, [r2, #88]	; 0x58
 8003220:	e003      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003222:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003226:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800322a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800322e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003232:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003236:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800323a:	2300      	movs	r3, #0
 800323c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003240:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003244:	460b      	mov	r3, r1
 8003246:	4313      	orrs	r3, r2
 8003248:	d056      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800324a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800324e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003252:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003256:	d038      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003258:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800325c:	d831      	bhi.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800325e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003262:	d034      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003264:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003268:	d82b      	bhi.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800326a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800326e:	d01d      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003270:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003274:	d825      	bhi.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003276:	2b00      	cmp	r3, #0
 8003278:	d006      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800327a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800327e:	d00a      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003280:	e01f      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003282:	bf00      	nop
 8003284:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003288:	4ba2      	ldr	r3, [pc, #648]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800328a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328c:	4aa1      	ldr	r2, [pc, #644]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800328e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003292:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003294:	e01c      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003296:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800329a:	3308      	adds	r3, #8
 800329c:	2100      	movs	r1, #0
 800329e:	4618      	mov	r0, r3
 80032a0:	f001 fb1c 	bl	80048dc <RCCEx_PLL2_Config>
 80032a4:	4603      	mov	r3, r0
 80032a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80032aa:	e011      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80032ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032b0:	3328      	adds	r3, #40	; 0x28
 80032b2:	2100      	movs	r1, #0
 80032b4:	4618      	mov	r0, r3
 80032b6:	f001 fbc3 	bl	8004a40 <RCCEx_PLL3_Config>
 80032ba:	4603      	mov	r3, r0
 80032bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032c0:	e006      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80032c8:	e002      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80032ca:	bf00      	nop
 80032cc:	e000      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80032ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10b      	bne.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80032d8:	4b8e      	ldr	r3, [pc, #568]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032dc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80032e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80032e8:	4a8a      	ldr	r2, [pc, #552]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032ea:	430b      	orrs	r3, r1
 80032ec:	6593      	str	r3, [r2, #88]	; 0x58
 80032ee:	e003      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80032f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003300:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003304:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003308:	2300      	movs	r3, #0
 800330a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800330e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003312:	460b      	mov	r3, r1
 8003314:	4313      	orrs	r3, r2
 8003316:	d03a      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003318:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800331c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800331e:	2b30      	cmp	r3, #48	; 0x30
 8003320:	d01f      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003322:	2b30      	cmp	r3, #48	; 0x30
 8003324:	d819      	bhi.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003326:	2b20      	cmp	r3, #32
 8003328:	d00c      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800332a:	2b20      	cmp	r3, #32
 800332c:	d815      	bhi.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800332e:	2b00      	cmp	r3, #0
 8003330:	d019      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003332:	2b10      	cmp	r3, #16
 8003334:	d111      	bne.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003336:	4b77      	ldr	r3, [pc, #476]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333a:	4a76      	ldr	r2, [pc, #472]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800333c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003340:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003342:	e011      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003348:	3308      	adds	r3, #8
 800334a:	2102      	movs	r1, #2
 800334c:	4618      	mov	r0, r3
 800334e:	f001 fac5 	bl	80048dc <RCCEx_PLL2_Config>
 8003352:	4603      	mov	r3, r0
 8003354:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003358:	e006      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003360:	e002      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003362:	bf00      	nop
 8003364:	e000      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003366:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003368:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800336c:	2b00      	cmp	r3, #0
 800336e:	d10a      	bne.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003370:	4b68      	ldr	r3, [pc, #416]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003374:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003378:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800337c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800337e:	4a65      	ldr	r2, [pc, #404]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003380:	430b      	orrs	r3, r1
 8003382:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003384:	e003      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003386:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800338a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800338e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003396:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800339a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800339e:	2300      	movs	r3, #0
 80033a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80033a4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80033a8:	460b      	mov	r3, r1
 80033aa:	4313      	orrs	r3, r2
 80033ac:	d051      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80033ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033b8:	d035      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80033ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033be:	d82e      	bhi.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80033c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033c4:	d031      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80033c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033ca:	d828      	bhi.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80033cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033d0:	d01a      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80033d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033d6:	d822      	bhi.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d003      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80033dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033e0:	d007      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80033e2:	e01c      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033e4:	4b4b      	ldr	r3, [pc, #300]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e8:	4a4a      	ldr	r2, [pc, #296]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80033f0:	e01c      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033f6:	3308      	adds	r3, #8
 80033f8:	2100      	movs	r1, #0
 80033fa:	4618      	mov	r0, r3
 80033fc:	f001 fa6e 	bl	80048dc <RCCEx_PLL2_Config>
 8003400:	4603      	mov	r3, r0
 8003402:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003406:	e011      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003408:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800340c:	3328      	adds	r3, #40	; 0x28
 800340e:	2100      	movs	r1, #0
 8003410:	4618      	mov	r0, r3
 8003412:	f001 fb15 	bl	8004a40 <RCCEx_PLL3_Config>
 8003416:	4603      	mov	r3, r0
 8003418:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800341c:	e006      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003424:	e002      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003426:	bf00      	nop
 8003428:	e000      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800342a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800342c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10a      	bne.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003434:	4b37      	ldr	r3, [pc, #220]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003438:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800343c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003442:	4a34      	ldr	r2, [pc, #208]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003444:	430b      	orrs	r3, r1
 8003446:	6513      	str	r3, [r2, #80]	; 0x50
 8003448:	e003      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800344a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800344e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800345e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003462:	2300      	movs	r3, #0
 8003464:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003468:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800346c:	460b      	mov	r3, r1
 800346e:	4313      	orrs	r3, r2
 8003470:	d056      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003472:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003476:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003478:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800347c:	d033      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800347e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003482:	d82c      	bhi.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003484:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003488:	d02f      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800348a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800348e:	d826      	bhi.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003490:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003494:	d02b      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003496:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800349a:	d820      	bhi.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x592>
 800349c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034a0:	d012      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80034a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034a6:	d81a      	bhi.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x592>
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d022      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80034ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b0:	d115      	bne.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80034b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034b6:	3308      	adds	r3, #8
 80034b8:	2101      	movs	r1, #1
 80034ba:	4618      	mov	r0, r3
 80034bc:	f001 fa0e 	bl	80048dc <RCCEx_PLL2_Config>
 80034c0:	4603      	mov	r3, r0
 80034c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80034c6:	e015      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80034c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034cc:	3328      	adds	r3, #40	; 0x28
 80034ce:	2101      	movs	r1, #1
 80034d0:	4618      	mov	r0, r3
 80034d2:	f001 fab5 	bl	8004a40 <RCCEx_PLL3_Config>
 80034d6:	4603      	mov	r3, r0
 80034d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80034dc:	e00a      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80034e4:	e006      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80034e6:	bf00      	nop
 80034e8:	e004      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80034ea:	bf00      	nop
 80034ec:	e002      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80034ee:	bf00      	nop
 80034f0:	e000      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80034f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10d      	bne.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80034fc:	4b05      	ldr	r3, [pc, #20]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003500:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003508:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800350a:	4a02      	ldr	r2, [pc, #8]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800350c:	430b      	orrs	r3, r1
 800350e:	6513      	str	r3, [r2, #80]	; 0x50
 8003510:	e006      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003512:	bf00      	nop
 8003514:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003518:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800351c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003528:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800352c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003530:	2300      	movs	r3, #0
 8003532:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003536:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800353a:	460b      	mov	r3, r1
 800353c:	4313      	orrs	r3, r2
 800353e:	d055      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003540:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003544:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003548:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800354c:	d033      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800354e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003552:	d82c      	bhi.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003558:	d02f      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800355a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800355e:	d826      	bhi.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003560:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003564:	d02b      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003566:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800356a:	d820      	bhi.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 800356c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003570:	d012      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003572:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003576:	d81a      	bhi.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003578:	2b00      	cmp	r3, #0
 800357a:	d022      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800357c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003580:	d115      	bne.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003582:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003586:	3308      	adds	r3, #8
 8003588:	2101      	movs	r1, #1
 800358a:	4618      	mov	r0, r3
 800358c:	f001 f9a6 	bl	80048dc <RCCEx_PLL2_Config>
 8003590:	4603      	mov	r3, r0
 8003592:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003596:	e015      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800359c:	3328      	adds	r3, #40	; 0x28
 800359e:	2101      	movs	r1, #1
 80035a0:	4618      	mov	r0, r3
 80035a2:	f001 fa4d 	bl	8004a40 <RCCEx_PLL3_Config>
 80035a6:	4603      	mov	r3, r0
 80035a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80035ac:	e00a      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80035b4:	e006      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80035b6:	bf00      	nop
 80035b8:	e004      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80035ba:	bf00      	nop
 80035bc:	e002      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80035be:	bf00      	nop
 80035c0:	e000      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80035c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10b      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80035cc:	4ba3      	ldr	r3, [pc, #652]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80035d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80035dc:	4a9f      	ldr	r2, [pc, #636]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035de:	430b      	orrs	r3, r1
 80035e0:	6593      	str	r3, [r2, #88]	; 0x58
 80035e2:	e003      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80035ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80035f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80035fc:	2300      	movs	r3, #0
 80035fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003602:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003606:	460b      	mov	r3, r1
 8003608:	4313      	orrs	r3, r2
 800360a:	d037      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800360c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003612:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003616:	d00e      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003618:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800361c:	d816      	bhi.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800361e:	2b00      	cmp	r3, #0
 8003620:	d018      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003622:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003626:	d111      	bne.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003628:	4b8c      	ldr	r3, [pc, #560]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800362a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362c:	4a8b      	ldr	r2, [pc, #556]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800362e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003632:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003634:	e00f      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003636:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800363a:	3308      	adds	r3, #8
 800363c:	2101      	movs	r1, #1
 800363e:	4618      	mov	r0, r3
 8003640:	f001 f94c 	bl	80048dc <RCCEx_PLL2_Config>
 8003644:	4603      	mov	r3, r0
 8003646:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800364a:	e004      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003652:	e000      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003654:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003656:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10a      	bne.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800365e:	4b7f      	ldr	r3, [pc, #508]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003662:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800366a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366c:	4a7b      	ldr	r2, [pc, #492]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800366e:	430b      	orrs	r3, r1
 8003670:	6513      	str	r3, [r2, #80]	; 0x50
 8003672:	e003      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003674:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003678:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800367c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003684:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003688:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800368c:	2300      	movs	r3, #0
 800368e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003692:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003696:	460b      	mov	r3, r1
 8003698:	4313      	orrs	r3, r2
 800369a:	d039      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800369c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036a2:	2b03      	cmp	r3, #3
 80036a4:	d81c      	bhi.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80036a6:	a201      	add	r2, pc, #4	; (adr r2, 80036ac <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80036a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ac:	080036e9 	.word	0x080036e9
 80036b0:	080036bd 	.word	0x080036bd
 80036b4:	080036cb 	.word	0x080036cb
 80036b8:	080036e9 	.word	0x080036e9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036bc:	4b67      	ldr	r3, [pc, #412]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c0:	4a66      	ldr	r2, [pc, #408]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80036c8:	e00f      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ce:	3308      	adds	r3, #8
 80036d0:	2102      	movs	r1, #2
 80036d2:	4618      	mov	r0, r3
 80036d4:	f001 f902 	bl	80048dc <RCCEx_PLL2_Config>
 80036d8:	4603      	mov	r3, r0
 80036da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80036de:	e004      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80036e6:	e000      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80036e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10a      	bne.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80036f2:	4b5a      	ldr	r3, [pc, #360]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036f6:	f023 0103 	bic.w	r1, r3, #3
 80036fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003700:	4a56      	ldr	r2, [pc, #344]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003702:	430b      	orrs	r3, r1
 8003704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003706:	e003      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003708:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800370c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003710:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003718:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800371c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003720:	2300      	movs	r3, #0
 8003722:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003726:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800372a:	460b      	mov	r3, r1
 800372c:	4313      	orrs	r3, r2
 800372e:	f000 809f 	beq.w	8003870 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003732:	4b4b      	ldr	r3, [pc, #300]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a4a      	ldr	r2, [pc, #296]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800373c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800373e:	f7fd fe1d 	bl	800137c <HAL_GetTick>
 8003742:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003746:	e00b      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003748:	f7fd fe18 	bl	800137c <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b64      	cmp	r3, #100	; 0x64
 8003756:	d903      	bls.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800375e:	e005      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003760:	4b3f      	ldr	r3, [pc, #252]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0ed      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800376c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003770:	2b00      	cmp	r3, #0
 8003772:	d179      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003774:	4b39      	ldr	r3, [pc, #228]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003776:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003778:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800377c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003780:	4053      	eors	r3, r2
 8003782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003786:	2b00      	cmp	r3, #0
 8003788:	d015      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800378a:	4b34      	ldr	r3, [pc, #208]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800378c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003792:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003796:	4b31      	ldr	r3, [pc, #196]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379a:	4a30      	ldr	r2, [pc, #192]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800379c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037a2:	4b2e      	ldr	r3, [pc, #184]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a6:	4a2d      	ldr	r2, [pc, #180]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ac:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80037ae:	4a2b      	ldr	r2, [pc, #172]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037b4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80037b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80037be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037c2:	d118      	bne.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c4:	f7fd fdda 	bl	800137c <HAL_GetTick>
 80037c8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037cc:	e00d      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ce:	f7fd fdd5 	bl	800137c <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80037d8:	1ad2      	subs	r2, r2, r3
 80037da:	f241 3388 	movw	r3, #5000	; 0x1388
 80037de:	429a      	cmp	r2, r3
 80037e0:	d903      	bls.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80037e8:	e005      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037ea:	4b1c      	ldr	r3, [pc, #112]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0eb      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80037f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d129      	bne.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003802:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800380a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800380e:	d10e      	bne.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003810:	4b12      	ldr	r3, [pc, #72]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003818:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800381c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003820:	091a      	lsrs	r2, r3, #4
 8003822:	4b10      	ldr	r3, [pc, #64]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003824:	4013      	ands	r3, r2
 8003826:	4a0d      	ldr	r2, [pc, #52]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003828:	430b      	orrs	r3, r1
 800382a:	6113      	str	r3, [r2, #16]
 800382c:	e005      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800382e:	4b0b      	ldr	r3, [pc, #44]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	4a0a      	ldr	r2, [pc, #40]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003834:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003838:	6113      	str	r3, [r2, #16]
 800383a:	4b08      	ldr	r3, [pc, #32]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800383c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800383e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003842:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003846:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800384a:	4a04      	ldr	r2, [pc, #16]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800384c:	430b      	orrs	r3, r1
 800384e:	6713      	str	r3, [r2, #112]	; 0x70
 8003850:	e00e      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003852:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003856:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800385a:	e009      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800385c:	58024400 	.word	0x58024400
 8003860:	58024800 	.word	0x58024800
 8003864:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003868:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800386c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003870:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003878:	f002 0301 	and.w	r3, r2, #1
 800387c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003880:	2300      	movs	r3, #0
 8003882:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003886:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800388a:	460b      	mov	r3, r1
 800388c:	4313      	orrs	r3, r2
 800388e:	f000 8089 	beq.w	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003896:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003898:	2b28      	cmp	r3, #40	; 0x28
 800389a:	d86b      	bhi.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800389c:	a201      	add	r2, pc, #4	; (adr r2, 80038a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800389e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a2:	bf00      	nop
 80038a4:	0800397d 	.word	0x0800397d
 80038a8:	08003975 	.word	0x08003975
 80038ac:	08003975 	.word	0x08003975
 80038b0:	08003975 	.word	0x08003975
 80038b4:	08003975 	.word	0x08003975
 80038b8:	08003975 	.word	0x08003975
 80038bc:	08003975 	.word	0x08003975
 80038c0:	08003975 	.word	0x08003975
 80038c4:	08003949 	.word	0x08003949
 80038c8:	08003975 	.word	0x08003975
 80038cc:	08003975 	.word	0x08003975
 80038d0:	08003975 	.word	0x08003975
 80038d4:	08003975 	.word	0x08003975
 80038d8:	08003975 	.word	0x08003975
 80038dc:	08003975 	.word	0x08003975
 80038e0:	08003975 	.word	0x08003975
 80038e4:	0800395f 	.word	0x0800395f
 80038e8:	08003975 	.word	0x08003975
 80038ec:	08003975 	.word	0x08003975
 80038f0:	08003975 	.word	0x08003975
 80038f4:	08003975 	.word	0x08003975
 80038f8:	08003975 	.word	0x08003975
 80038fc:	08003975 	.word	0x08003975
 8003900:	08003975 	.word	0x08003975
 8003904:	0800397d 	.word	0x0800397d
 8003908:	08003975 	.word	0x08003975
 800390c:	08003975 	.word	0x08003975
 8003910:	08003975 	.word	0x08003975
 8003914:	08003975 	.word	0x08003975
 8003918:	08003975 	.word	0x08003975
 800391c:	08003975 	.word	0x08003975
 8003920:	08003975 	.word	0x08003975
 8003924:	0800397d 	.word	0x0800397d
 8003928:	08003975 	.word	0x08003975
 800392c:	08003975 	.word	0x08003975
 8003930:	08003975 	.word	0x08003975
 8003934:	08003975 	.word	0x08003975
 8003938:	08003975 	.word	0x08003975
 800393c:	08003975 	.word	0x08003975
 8003940:	08003975 	.word	0x08003975
 8003944:	0800397d 	.word	0x0800397d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003948:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800394c:	3308      	adds	r3, #8
 800394e:	2101      	movs	r1, #1
 8003950:	4618      	mov	r0, r3
 8003952:	f000 ffc3 	bl	80048dc <RCCEx_PLL2_Config>
 8003956:	4603      	mov	r3, r0
 8003958:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800395c:	e00f      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800395e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003962:	3328      	adds	r3, #40	; 0x28
 8003964:	2101      	movs	r1, #1
 8003966:	4618      	mov	r0, r3
 8003968:	f001 f86a 	bl	8004a40 <RCCEx_PLL3_Config>
 800396c:	4603      	mov	r3, r0
 800396e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003972:	e004      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800397a:	e000      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800397c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800397e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10a      	bne.n	800399c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003986:	4bbf      	ldr	r3, [pc, #764]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800398e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003992:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003994:	4abb      	ldr	r2, [pc, #748]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003996:	430b      	orrs	r3, r1
 8003998:	6553      	str	r3, [r2, #84]	; 0x54
 800399a:	e003      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800399c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80039a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ac:	f002 0302 	and.w	r3, r2, #2
 80039b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039b4:	2300      	movs	r3, #0
 80039b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80039ba:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80039be:	460b      	mov	r3, r1
 80039c0:	4313      	orrs	r3, r2
 80039c2:	d041      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80039c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039ca:	2b05      	cmp	r3, #5
 80039cc:	d824      	bhi.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80039ce:	a201      	add	r2, pc, #4	; (adr r2, 80039d4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80039d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d4:	08003a21 	.word	0x08003a21
 80039d8:	080039ed 	.word	0x080039ed
 80039dc:	08003a03 	.word	0x08003a03
 80039e0:	08003a21 	.word	0x08003a21
 80039e4:	08003a21 	.word	0x08003a21
 80039e8:	08003a21 	.word	0x08003a21
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039f0:	3308      	adds	r3, #8
 80039f2:	2101      	movs	r1, #1
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 ff71 	bl	80048dc <RCCEx_PLL2_Config>
 80039fa:	4603      	mov	r3, r0
 80039fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003a00:	e00f      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a06:	3328      	adds	r3, #40	; 0x28
 8003a08:	2101      	movs	r1, #1
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f001 f818 	bl	8004a40 <RCCEx_PLL3_Config>
 8003a10:	4603      	mov	r3, r0
 8003a12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003a16:	e004      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a1e:	e000      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003a20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10a      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003a2a:	4b96      	ldr	r3, [pc, #600]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a2e:	f023 0107 	bic.w	r1, r3, #7
 8003a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a38:	4a92      	ldr	r2, [pc, #584]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a3a:	430b      	orrs	r3, r1
 8003a3c:	6553      	str	r3, [r2, #84]	; 0x54
 8003a3e:	e003      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a50:	f002 0304 	and.w	r3, r2, #4
 8003a54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a58:	2300      	movs	r3, #0
 8003a5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a5e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003a62:	460b      	mov	r3, r1
 8003a64:	4313      	orrs	r3, r2
 8003a66:	d044      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a70:	2b05      	cmp	r3, #5
 8003a72:	d825      	bhi.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003a74:	a201      	add	r2, pc, #4	; (adr r2, 8003a7c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7a:	bf00      	nop
 8003a7c:	08003ac9 	.word	0x08003ac9
 8003a80:	08003a95 	.word	0x08003a95
 8003a84:	08003aab 	.word	0x08003aab
 8003a88:	08003ac9 	.word	0x08003ac9
 8003a8c:	08003ac9 	.word	0x08003ac9
 8003a90:	08003ac9 	.word	0x08003ac9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a98:	3308      	adds	r3, #8
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 ff1d 	bl	80048dc <RCCEx_PLL2_Config>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003aa8:	e00f      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aae:	3328      	adds	r3, #40	; 0x28
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f000 ffc4 	bl	8004a40 <RCCEx_PLL3_Config>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003abe:	e004      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ac6:	e000      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003ac8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10b      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ad2:	4b6c      	ldr	r3, [pc, #432]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad6:	f023 0107 	bic.w	r1, r3, #7
 8003ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ae2:	4a68      	ldr	r2, [pc, #416]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ae4:	430b      	orrs	r3, r1
 8003ae6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ae8:	e003      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003aee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afa:	f002 0320 	and.w	r3, r2, #32
 8003afe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b02:	2300      	movs	r3, #0
 8003b04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	d055      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b1e:	d033      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003b20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b24:	d82c      	bhi.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b2a:	d02f      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b30:	d826      	bhi.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003b32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b36:	d02b      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003b38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b3c:	d820      	bhi.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003b3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b42:	d012      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003b44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b48:	d81a      	bhi.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d022      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003b4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b52:	d115      	bne.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b58:	3308      	adds	r3, #8
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f000 febd 	bl	80048dc <RCCEx_PLL2_Config>
 8003b62:	4603      	mov	r3, r0
 8003b64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003b68:	e015      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b6e:	3328      	adds	r3, #40	; 0x28
 8003b70:	2102      	movs	r1, #2
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 ff64 	bl	8004a40 <RCCEx_PLL3_Config>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003b7e:	e00a      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b86:	e006      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003b88:	bf00      	nop
 8003b8a:	e004      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003b8c:	bf00      	nop
 8003b8e:	e002      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003b90:	bf00      	nop
 8003b92:	e000      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003b94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10b      	bne.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b9e:	4b39      	ldr	r3, [pc, #228]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bae:	4a35      	ldr	r2, [pc, #212]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003bb0:	430b      	orrs	r3, r1
 8003bb2:	6553      	str	r3, [r2, #84]	; 0x54
 8003bb4:	e003      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003bca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003bce:	2300      	movs	r3, #0
 8003bd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003bd4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003bd8:	460b      	mov	r3, r1
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	d058      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003be2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003be6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003bea:	d033      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003bec:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003bf0:	d82c      	bhi.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bf6:	d02f      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bfc:	d826      	bhi.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003bfe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c02:	d02b      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003c04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c08:	d820      	bhi.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003c0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c0e:	d012      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003c10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c14:	d81a      	bhi.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d022      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003c1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c1e:	d115      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c24:	3308      	adds	r3, #8
 8003c26:	2100      	movs	r1, #0
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f000 fe57 	bl	80048dc <RCCEx_PLL2_Config>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003c34:	e015      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c3a:	3328      	adds	r3, #40	; 0x28
 8003c3c:	2102      	movs	r1, #2
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 fefe 	bl	8004a40 <RCCEx_PLL3_Config>
 8003c44:	4603      	mov	r3, r0
 8003c46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003c4a:	e00a      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c52:	e006      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003c54:	bf00      	nop
 8003c56:	e004      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003c58:	bf00      	nop
 8003c5a:	e002      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003c5c:	bf00      	nop
 8003c5e:	e000      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003c60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10e      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c6a:	4b06      	ldr	r3, [pc, #24]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c7a:	4a02      	ldr	r2, [pc, #8]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c7c:	430b      	orrs	r3, r1
 8003c7e:	6593      	str	r3, [r2, #88]	; 0x58
 8003c80:	e006      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003c82:	bf00      	nop
 8003c84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c98:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003c9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003ca6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003caa:	460b      	mov	r3, r1
 8003cac:	4313      	orrs	r3, r2
 8003cae:	d055      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cb4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003cb8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003cbc:	d033      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003cbe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003cc2:	d82c      	bhi.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003cc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cc8:	d02f      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003cca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cce:	d826      	bhi.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003cd0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003cd4:	d02b      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003cd6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003cda:	d820      	bhi.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003cdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ce0:	d012      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003ce2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ce6:	d81a      	bhi.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d022      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003cec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cf0:	d115      	bne.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cf6:	3308      	adds	r3, #8
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 fdee 	bl	80048dc <RCCEx_PLL2_Config>
 8003d00:	4603      	mov	r3, r0
 8003d02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003d06:	e015      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d0c:	3328      	adds	r3, #40	; 0x28
 8003d0e:	2102      	movs	r1, #2
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 fe95 	bl	8004a40 <RCCEx_PLL3_Config>
 8003d16:	4603      	mov	r3, r0
 8003d18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003d1c:	e00a      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d24:	e006      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003d26:	bf00      	nop
 8003d28:	e004      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003d2a:	bf00      	nop
 8003d2c:	e002      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003d2e:	bf00      	nop
 8003d30:	e000      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003d32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10b      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003d3c:	4ba1      	ldr	r3, [pc, #644]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d40:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d48:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d4c:	4a9d      	ldr	r2, [pc, #628]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d4e:	430b      	orrs	r3, r1
 8003d50:	6593      	str	r3, [r2, #88]	; 0x58
 8003d52:	e003      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d64:	f002 0308 	and.w	r3, r2, #8
 8003d68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d72:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003d76:	460b      	mov	r3, r1
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	d01e      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d88:	d10c      	bne.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d8e:	3328      	adds	r3, #40	; 0x28
 8003d90:	2102      	movs	r1, #2
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 fe54 	bl	8004a40 <RCCEx_PLL3_Config>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d002      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003da4:	4b87      	ldr	r3, [pc, #540]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003db4:	4a83      	ldr	r2, [pc, #524]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003db6:	430b      	orrs	r3, r1
 8003db8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc2:	f002 0310 	and.w	r3, r2, #16
 8003dc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003dca:	2300      	movs	r3, #0
 8003dcc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003dd0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	d01e      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003de6:	d10c      	bne.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dec:	3328      	adds	r3, #40	; 0x28
 8003dee:	2102      	movs	r1, #2
 8003df0:	4618      	mov	r0, r3
 8003df2:	f000 fe25 	bl	8004a40 <RCCEx_PLL3_Config>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d002      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e02:	4b70      	ldr	r3, [pc, #448]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e12:	4a6c      	ldr	r2, [pc, #432]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e14:	430b      	orrs	r3, r1
 8003e16:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e20:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003e24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e28:	2300      	movs	r3, #0
 8003e2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e2e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003e32:	460b      	mov	r3, r1
 8003e34:	4313      	orrs	r3, r2
 8003e36:	d03e      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e44:	d022      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003e46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e4a:	d81b      	bhi.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d003      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e54:	d00b      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003e56:	e015      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e5c:	3308      	adds	r3, #8
 8003e5e:	2100      	movs	r1, #0
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 fd3b 	bl	80048dc <RCCEx_PLL2_Config>
 8003e66:	4603      	mov	r3, r0
 8003e68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003e6c:	e00f      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e72:	3328      	adds	r3, #40	; 0x28
 8003e74:	2102      	movs	r1, #2
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 fde2 	bl	8004a40 <RCCEx_PLL3_Config>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003e82:	e004      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e8a:	e000      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003e8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10b      	bne.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e96:	4b4b      	ldr	r3, [pc, #300]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e9a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ea2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ea6:	4a47      	ldr	r2, [pc, #284]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ea8:	430b      	orrs	r3, r1
 8003eaa:	6593      	str	r3, [r2, #88]	; 0x58
 8003eac:	e003      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003eb2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ebe:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003ec2:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ec8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003ecc:	460b      	mov	r3, r1
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	d03b      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eda:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ede:	d01f      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003ee0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ee4:	d818      	bhi.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003ee6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eea:	d003      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003eec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ef0:	d007      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003ef2:	e011      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ef4:	4b33      	ldr	r3, [pc, #204]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef8:	4a32      	ldr	r2, [pc, #200]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003efa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003efe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003f00:	e00f      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f06:	3328      	adds	r3, #40	; 0x28
 8003f08:	2101      	movs	r1, #1
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 fd98 	bl	8004a40 <RCCEx_PLL3_Config>
 8003f10:	4603      	mov	r3, r0
 8003f12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003f16:	e004      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f1e:	e000      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003f20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10b      	bne.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f2a:	4b26      	ldr	r3, [pc, #152]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3a:	4a22      	ldr	r2, [pc, #136]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f3c:	430b      	orrs	r3, r1
 8003f3e:	6553      	str	r3, [r2, #84]	; 0x54
 8003f40:	e003      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f52:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003f56:	673b      	str	r3, [r7, #112]	; 0x70
 8003f58:	2300      	movs	r3, #0
 8003f5a:	677b      	str	r3, [r7, #116]	; 0x74
 8003f5c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003f60:	460b      	mov	r3, r1
 8003f62:	4313      	orrs	r3, r2
 8003f64:	d034      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d003      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f74:	d007      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003f76:	e011      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f78:	4b12      	ldr	r3, [pc, #72]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7c:	4a11      	ldr	r2, [pc, #68]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003f84:	e00e      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f8a:	3308      	adds	r3, #8
 8003f8c:	2102      	movs	r1, #2
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 fca4 	bl	80048dc <RCCEx_PLL2_Config>
 8003f94:	4603      	mov	r3, r0
 8003f96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003f9a:	e003      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003fa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fa4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10d      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003fac:	4b05      	ldr	r3, [pc, #20]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fba:	4a02      	ldr	r2, [pc, #8]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fbc:	430b      	orrs	r3, r1
 8003fbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fc0:	e006      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003fc2:	bf00      	nop
 8003fc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fcc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003fdc:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fde:	2300      	movs	r3, #0
 8003fe0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fe2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	d00c      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ff0:	3328      	adds	r3, #40	; 0x28
 8003ff2:	2102      	movs	r1, #2
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f000 fd23 	bl	8004a40 <RCCEx_PLL3_Config>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d002      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800400a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004012:	663b      	str	r3, [r7, #96]	; 0x60
 8004014:	2300      	movs	r3, #0
 8004016:	667b      	str	r3, [r7, #100]	; 0x64
 8004018:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800401c:	460b      	mov	r3, r1
 800401e:	4313      	orrs	r3, r2
 8004020:	d038      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004022:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004026:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800402a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800402e:	d018      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004030:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004034:	d811      	bhi.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004036:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800403a:	d014      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800403c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004040:	d80b      	bhi.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004042:	2b00      	cmp	r3, #0
 8004044:	d011      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004046:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800404a:	d106      	bne.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800404c:	4bc3      	ldr	r3, [pc, #780]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800404e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004050:	4ac2      	ldr	r2, [pc, #776]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004052:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004056:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004058:	e008      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004060:	e004      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004062:	bf00      	nop
 8004064:	e002      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004066:	bf00      	nop
 8004068:	e000      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800406a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800406c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10b      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004074:	4bb9      	ldr	r3, [pc, #740]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004078:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800407c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004080:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004084:	4ab5      	ldr	r2, [pc, #724]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004086:	430b      	orrs	r3, r1
 8004088:	6553      	str	r3, [r2, #84]	; 0x54
 800408a:	e003      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800408c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004090:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004094:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80040a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80040a2:	2300      	movs	r3, #0
 80040a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040a6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80040aa:	460b      	mov	r3, r1
 80040ac:	4313      	orrs	r3, r2
 80040ae:	d009      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040b0:	4baa      	ldr	r3, [pc, #680]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80040b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80040b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040be:	4aa7      	ldr	r2, [pc, #668]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80040c0:	430b      	orrs	r3, r1
 80040c2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80040c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040cc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80040d0:	653b      	str	r3, [r7, #80]	; 0x50
 80040d2:	2300      	movs	r3, #0
 80040d4:	657b      	str	r3, [r7, #84]	; 0x54
 80040d6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80040da:	460b      	mov	r3, r1
 80040dc:	4313      	orrs	r3, r2
 80040de:	d00a      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80040e0:	4b9e      	ldr	r3, [pc, #632]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80040e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80040f0:	4a9a      	ldr	r2, [pc, #616]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80040f2:	430b      	orrs	r3, r1
 80040f4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fe:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004102:	64bb      	str	r3, [r7, #72]	; 0x48
 8004104:	2300      	movs	r3, #0
 8004106:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004108:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800410c:	460b      	mov	r3, r1
 800410e:	4313      	orrs	r3, r2
 8004110:	d009      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004112:	4b92      	ldr	r3, [pc, #584]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004116:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800411a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800411e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004120:	4a8e      	ldr	r2, [pc, #568]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004122:	430b      	orrs	r3, r1
 8004124:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004126:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800412a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004132:	643b      	str	r3, [r7, #64]	; 0x40
 8004134:	2300      	movs	r3, #0
 8004136:	647b      	str	r3, [r7, #68]	; 0x44
 8004138:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800413c:	460b      	mov	r3, r1
 800413e:	4313      	orrs	r3, r2
 8004140:	d00e      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004142:	4b86      	ldr	r3, [pc, #536]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	4a85      	ldr	r2, [pc, #532]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004148:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800414c:	6113      	str	r3, [r2, #16]
 800414e:	4b83      	ldr	r3, [pc, #524]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004150:	6919      	ldr	r1, [r3, #16]
 8004152:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004156:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800415a:	4a80      	ldr	r2, [pc, #512]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800415c:	430b      	orrs	r3, r1
 800415e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004168:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800416c:	63bb      	str	r3, [r7, #56]	; 0x38
 800416e:	2300      	movs	r3, #0
 8004170:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004172:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004176:	460b      	mov	r3, r1
 8004178:	4313      	orrs	r3, r2
 800417a:	d009      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800417c:	4b77      	ldr	r3, [pc, #476]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800417e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004180:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004184:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418a:	4a74      	ldr	r2, [pc, #464]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800418c:	430b      	orrs	r3, r1
 800418e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004190:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004198:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800419c:	633b      	str	r3, [r7, #48]	; 0x30
 800419e:	2300      	movs	r3, #0
 80041a0:	637b      	str	r3, [r7, #52]	; 0x34
 80041a2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80041a6:	460b      	mov	r3, r1
 80041a8:	4313      	orrs	r3, r2
 80041aa:	d00a      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80041ac:	4b6b      	ldr	r3, [pc, #428]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80041b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041bc:	4a67      	ldr	r2, [pc, #412]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041be:	430b      	orrs	r3, r1
 80041c0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80041c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ca:	2100      	movs	r1, #0
 80041cc:	62b9      	str	r1, [r7, #40]	; 0x28
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041d4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80041d8:	460b      	mov	r3, r1
 80041da:	4313      	orrs	r3, r2
 80041dc:	d011      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041e2:	3308      	adds	r3, #8
 80041e4:	2100      	movs	r1, #0
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 fb78 	bl	80048dc <RCCEx_PLL2_Config>
 80041ec:	4603      	mov	r3, r0
 80041ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80041f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004202:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420a:	2100      	movs	r1, #0
 800420c:	6239      	str	r1, [r7, #32]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	627b      	str	r3, [r7, #36]	; 0x24
 8004214:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004218:	460b      	mov	r3, r1
 800421a:	4313      	orrs	r3, r2
 800421c:	d011      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800421e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004222:	3308      	adds	r3, #8
 8004224:	2101      	movs	r1, #1
 8004226:	4618      	mov	r0, r3
 8004228:	f000 fb58 	bl	80048dc <RCCEx_PLL2_Config>
 800422c:	4603      	mov	r3, r0
 800422e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004232:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800423a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800423e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424a:	2100      	movs	r1, #0
 800424c:	61b9      	str	r1, [r7, #24]
 800424e:	f003 0304 	and.w	r3, r3, #4
 8004252:	61fb      	str	r3, [r7, #28]
 8004254:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004258:	460b      	mov	r3, r1
 800425a:	4313      	orrs	r3, r2
 800425c:	d011      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800425e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004262:	3308      	adds	r3, #8
 8004264:	2102      	movs	r1, #2
 8004266:	4618      	mov	r0, r3
 8004268:	f000 fb38 	bl	80048dc <RCCEx_PLL2_Config>
 800426c:	4603      	mov	r3, r0
 800426e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004272:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800427a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800427e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004282:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428a:	2100      	movs	r1, #0
 800428c:	6139      	str	r1, [r7, #16]
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	617b      	str	r3, [r7, #20]
 8004294:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004298:	460b      	mov	r3, r1
 800429a:	4313      	orrs	r3, r2
 800429c:	d011      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800429e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042a2:	3328      	adds	r3, #40	; 0x28
 80042a4:	2100      	movs	r1, #0
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 fbca 	bl	8004a40 <RCCEx_PLL3_Config>
 80042ac:	4603      	mov	r3, r0
 80042ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80042b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d003      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80042c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ca:	2100      	movs	r1, #0
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	f003 0310 	and.w	r3, r3, #16
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80042d8:	460b      	mov	r3, r1
 80042da:	4313      	orrs	r3, r2
 80042dc:	d011      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042e2:	3328      	adds	r3, #40	; 0x28
 80042e4:	2101      	movs	r1, #1
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 fbaa 	bl	8004a40 <RCCEx_PLL3_Config>
 80042ec:	4603      	mov	r3, r0
 80042ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80042f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004302:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430a:	2100      	movs	r1, #0
 800430c:	6039      	str	r1, [r7, #0]
 800430e:	f003 0320 	and.w	r3, r3, #32
 8004312:	607b      	str	r3, [r7, #4]
 8004314:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004318:	460b      	mov	r3, r1
 800431a:	4313      	orrs	r3, r2
 800431c:	d011      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800431e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004322:	3328      	adds	r3, #40	; 0x28
 8004324:	2102      	movs	r1, #2
 8004326:	4618      	mov	r0, r3
 8004328:	f000 fb8a 	bl	8004a40 <RCCEx_PLL3_Config>
 800432c:	4603      	mov	r3, r0
 800432e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004332:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004336:	2b00      	cmp	r3, #0
 8004338:	d003      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800433a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800433e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004342:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800434a:	2300      	movs	r3, #0
 800434c:	e000      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
}
 8004350:	4618      	mov	r0, r3
 8004352:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004356:	46bd      	mov	sp, r7
 8004358:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800435c:	58024400 	.word	0x58024400

08004360 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004364:	f7fe fd96 	bl	8002e94 <HAL_RCC_GetHCLKFreq>
 8004368:	4602      	mov	r2, r0
 800436a:	4b06      	ldr	r3, [pc, #24]	; (8004384 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	091b      	lsrs	r3, r3, #4
 8004370:	f003 0307 	and.w	r3, r3, #7
 8004374:	4904      	ldr	r1, [pc, #16]	; (8004388 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004376:	5ccb      	ldrb	r3, [r1, r3]
 8004378:	f003 031f 	and.w	r3, r3, #31
 800437c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004380:	4618      	mov	r0, r3
 8004382:	bd80      	pop	{r7, pc}
 8004384:	58024400 	.word	0x58024400
 8004388:	08006884 	.word	0x08006884

0800438c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800438c:	b480      	push	{r7}
 800438e:	b089      	sub	sp, #36	; 0x24
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004394:	4ba1      	ldr	r3, [pc, #644]	; (800461c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004398:	f003 0303 	and.w	r3, r3, #3
 800439c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800439e:	4b9f      	ldr	r3, [pc, #636]	; (800461c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a2:	0b1b      	lsrs	r3, r3, #12
 80043a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043a8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80043aa:	4b9c      	ldr	r3, [pc, #624]	; (800461c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ae:	091b      	lsrs	r3, r3, #4
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80043b6:	4b99      	ldr	r3, [pc, #612]	; (800461c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ba:	08db      	lsrs	r3, r3, #3
 80043bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	fb02 f303 	mul.w	r3, r2, r3
 80043c6:	ee07 3a90 	vmov	s15, r3
 80043ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 8111 	beq.w	80045fc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	2b02      	cmp	r3, #2
 80043de:	f000 8083 	beq.w	80044e8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	f200 80a1 	bhi.w	800452c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d003      	beq.n	80043f8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d056      	beq.n	80044a4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80043f6:	e099      	b.n	800452c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043f8:	4b88      	ldr	r3, [pc, #544]	; (800461c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0320 	and.w	r3, r3, #32
 8004400:	2b00      	cmp	r3, #0
 8004402:	d02d      	beq.n	8004460 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004404:	4b85      	ldr	r3, [pc, #532]	; (800461c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	08db      	lsrs	r3, r3, #3
 800440a:	f003 0303 	and.w	r3, r3, #3
 800440e:	4a84      	ldr	r2, [pc, #528]	; (8004620 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004410:	fa22 f303 	lsr.w	r3, r2, r3
 8004414:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	ee07 3a90 	vmov	s15, r3
 800441c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	ee07 3a90 	vmov	s15, r3
 8004426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800442a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800442e:	4b7b      	ldr	r3, [pc, #492]	; (800461c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004436:	ee07 3a90 	vmov	s15, r3
 800443a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800443e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004442:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004624 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800444a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800444e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800445a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800445e:	e087      	b.n	8004570 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	ee07 3a90 	vmov	s15, r3
 8004466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800446a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004628 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800446e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004472:	4b6a      	ldr	r3, [pc, #424]	; (800461c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800447a:	ee07 3a90 	vmov	s15, r3
 800447e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004482:	ed97 6a03 	vldr	s12, [r7, #12]
 8004486:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004624 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800448a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800448e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004492:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800449a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800449e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044a2:	e065      	b.n	8004570 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	ee07 3a90 	vmov	s15, r3
 80044aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800462c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80044b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044b6:	4b59      	ldr	r3, [pc, #356]	; (800461c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044be:	ee07 3a90 	vmov	s15, r3
 80044c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80044ca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004624 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044e6:	e043      	b.n	8004570 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	ee07 3a90 	vmov	s15, r3
 80044ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044f2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004630 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80044f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044fa:	4b48      	ldr	r3, [pc, #288]	; (800461c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004502:	ee07 3a90 	vmov	s15, r3
 8004506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800450a:	ed97 6a03 	vldr	s12, [r7, #12]
 800450e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004624 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800451a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800451e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004526:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800452a:	e021      	b.n	8004570 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	ee07 3a90 	vmov	s15, r3
 8004532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004536:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800462c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800453a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800453e:	4b37      	ldr	r3, [pc, #220]	; (800461c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004546:	ee07 3a90 	vmov	s15, r3
 800454a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800454e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004552:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004624 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800455a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800455e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800456a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800456e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004570:	4b2a      	ldr	r3, [pc, #168]	; (800461c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004574:	0a5b      	lsrs	r3, r3, #9
 8004576:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800457a:	ee07 3a90 	vmov	s15, r3
 800457e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004582:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004586:	ee37 7a87 	vadd.f32	s14, s15, s14
 800458a:	edd7 6a07 	vldr	s13, [r7, #28]
 800458e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004592:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004596:	ee17 2a90 	vmov	r2, s15
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800459e:	4b1f      	ldr	r3, [pc, #124]	; (800461c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a2:	0c1b      	lsrs	r3, r3, #16
 80045a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045a8:	ee07 3a90 	vmov	s15, r3
 80045ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80045bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045c4:	ee17 2a90 	vmov	r2, s15
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80045cc:	4b13      	ldr	r3, [pc, #76]	; (800461c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d0:	0e1b      	lsrs	r3, r3, #24
 80045d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045d6:	ee07 3a90 	vmov	s15, r3
 80045da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80045ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045f2:	ee17 2a90 	vmov	r2, s15
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80045fa:	e008      	b.n	800460e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	609a      	str	r2, [r3, #8]
}
 800460e:	bf00      	nop
 8004610:	3724      	adds	r7, #36	; 0x24
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	58024400 	.word	0x58024400
 8004620:	03d09000 	.word	0x03d09000
 8004624:	46000000 	.word	0x46000000
 8004628:	4c742400 	.word	0x4c742400
 800462c:	4a742400 	.word	0x4a742400
 8004630:	4bbebc20 	.word	0x4bbebc20

08004634 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004634:	b480      	push	{r7}
 8004636:	b089      	sub	sp, #36	; 0x24
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800463c:	4ba1      	ldr	r3, [pc, #644]	; (80048c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800463e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004640:	f003 0303 	and.w	r3, r3, #3
 8004644:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004646:	4b9f      	ldr	r3, [pc, #636]	; (80048c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464a:	0d1b      	lsrs	r3, r3, #20
 800464c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004650:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004652:	4b9c      	ldr	r3, [pc, #624]	; (80048c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004656:	0a1b      	lsrs	r3, r3, #8
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800465e:	4b99      	ldr	r3, [pc, #612]	; (80048c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004662:	08db      	lsrs	r3, r3, #3
 8004664:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	fb02 f303 	mul.w	r3, r2, r3
 800466e:	ee07 3a90 	vmov	s15, r3
 8004672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004676:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 8111 	beq.w	80048a4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	2b02      	cmp	r3, #2
 8004686:	f000 8083 	beq.w	8004790 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	2b02      	cmp	r3, #2
 800468e:	f200 80a1 	bhi.w	80047d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d003      	beq.n	80046a0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d056      	beq.n	800474c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800469e:	e099      	b.n	80047d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046a0:	4b88      	ldr	r3, [pc, #544]	; (80048c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d02d      	beq.n	8004708 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80046ac:	4b85      	ldr	r3, [pc, #532]	; (80048c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	08db      	lsrs	r3, r3, #3
 80046b2:	f003 0303 	and.w	r3, r3, #3
 80046b6:	4a84      	ldr	r2, [pc, #528]	; (80048c8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80046b8:	fa22 f303 	lsr.w	r3, r2, r3
 80046bc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	ee07 3a90 	vmov	s15, r3
 80046c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	ee07 3a90 	vmov	s15, r3
 80046ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046d6:	4b7b      	ldr	r3, [pc, #492]	; (80048c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046de:	ee07 3a90 	vmov	s15, r3
 80046e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80046ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 80048cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004702:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004706:	e087      	b.n	8004818 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	ee07 3a90 	vmov	s15, r3
 800470e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004712:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80048d0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800471a:	4b6a      	ldr	r3, [pc, #424]	; (80048c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004722:	ee07 3a90 	vmov	s15, r3
 8004726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800472a:	ed97 6a03 	vldr	s12, [r7, #12]
 800472e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80048cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800473a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800473e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004746:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800474a:	e065      	b.n	8004818 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	ee07 3a90 	vmov	s15, r3
 8004752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004756:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80048d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800475a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800475e:	4b59      	ldr	r3, [pc, #356]	; (80048c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004766:	ee07 3a90 	vmov	s15, r3
 800476a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800476e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004772:	eddf 5a56 	vldr	s11, [pc, #344]	; 80048cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800477a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800477e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800478a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800478e:	e043      	b.n	8004818 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	ee07 3a90 	vmov	s15, r3
 8004796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800479a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80048d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800479e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047a2:	4b48      	ldr	r3, [pc, #288]	; (80048c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047aa:	ee07 3a90 	vmov	s15, r3
 80047ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80047b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80048cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047d2:	e021      	b.n	8004818 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	ee07 3a90 	vmov	s15, r3
 80047da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80048d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80047e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047e6:	4b37      	ldr	r3, [pc, #220]	; (80048c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ee:	ee07 3a90 	vmov	s15, r3
 80047f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80047fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 80048cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800480a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800480e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004812:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004816:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004818:	4b2a      	ldr	r3, [pc, #168]	; (80048c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800481a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481c:	0a5b      	lsrs	r3, r3, #9
 800481e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004822:	ee07 3a90 	vmov	s15, r3
 8004826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800482a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800482e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004832:	edd7 6a07 	vldr	s13, [r7, #28]
 8004836:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800483a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800483e:	ee17 2a90 	vmov	r2, s15
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004846:	4b1f      	ldr	r3, [pc, #124]	; (80048c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	0c1b      	lsrs	r3, r3, #16
 800484c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004850:	ee07 3a90 	vmov	s15, r3
 8004854:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004858:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800485c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004860:	edd7 6a07 	vldr	s13, [r7, #28]
 8004864:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004868:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800486c:	ee17 2a90 	vmov	r2, s15
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004874:	4b13      	ldr	r3, [pc, #76]	; (80048c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004878:	0e1b      	lsrs	r3, r3, #24
 800487a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800487e:	ee07 3a90 	vmov	s15, r3
 8004882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004886:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800488a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800488e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004892:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004896:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800489a:	ee17 2a90 	vmov	r2, s15
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80048a2:	e008      	b.n	80048b6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	609a      	str	r2, [r3, #8]
}
 80048b6:	bf00      	nop
 80048b8:	3724      	adds	r7, #36	; 0x24
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	58024400 	.word	0x58024400
 80048c8:	03d09000 	.word	0x03d09000
 80048cc:	46000000 	.word	0x46000000
 80048d0:	4c742400 	.word	0x4c742400
 80048d4:	4a742400 	.word	0x4a742400
 80048d8:	4bbebc20 	.word	0x4bbebc20

080048dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048e6:	2300      	movs	r3, #0
 80048e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80048ea:	4b53      	ldr	r3, [pc, #332]	; (8004a38 <RCCEx_PLL2_Config+0x15c>)
 80048ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ee:	f003 0303 	and.w	r3, r3, #3
 80048f2:	2b03      	cmp	r3, #3
 80048f4:	d101      	bne.n	80048fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e099      	b.n	8004a2e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80048fa:	4b4f      	ldr	r3, [pc, #316]	; (8004a38 <RCCEx_PLL2_Config+0x15c>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a4e      	ldr	r2, [pc, #312]	; (8004a38 <RCCEx_PLL2_Config+0x15c>)
 8004900:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004904:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004906:	f7fc fd39 	bl	800137c <HAL_GetTick>
 800490a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800490c:	e008      	b.n	8004920 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800490e:	f7fc fd35 	bl	800137c <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d901      	bls.n	8004920 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e086      	b.n	8004a2e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004920:	4b45      	ldr	r3, [pc, #276]	; (8004a38 <RCCEx_PLL2_Config+0x15c>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1f0      	bne.n	800490e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800492c:	4b42      	ldr	r3, [pc, #264]	; (8004a38 <RCCEx_PLL2_Config+0x15c>)
 800492e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004930:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	031b      	lsls	r3, r3, #12
 800493a:	493f      	ldr	r1, [pc, #252]	; (8004a38 <RCCEx_PLL2_Config+0x15c>)
 800493c:	4313      	orrs	r3, r2
 800493e:	628b      	str	r3, [r1, #40]	; 0x28
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	3b01      	subs	r3, #1
 8004946:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	3b01      	subs	r3, #1
 8004950:	025b      	lsls	r3, r3, #9
 8004952:	b29b      	uxth	r3, r3
 8004954:	431a      	orrs	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	3b01      	subs	r3, #1
 800495c:	041b      	lsls	r3, r3, #16
 800495e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	3b01      	subs	r3, #1
 800496a:	061b      	lsls	r3, r3, #24
 800496c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004970:	4931      	ldr	r1, [pc, #196]	; (8004a38 <RCCEx_PLL2_Config+0x15c>)
 8004972:	4313      	orrs	r3, r2
 8004974:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004976:	4b30      	ldr	r3, [pc, #192]	; (8004a38 <RCCEx_PLL2_Config+0x15c>)
 8004978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	492d      	ldr	r1, [pc, #180]	; (8004a38 <RCCEx_PLL2_Config+0x15c>)
 8004984:	4313      	orrs	r3, r2
 8004986:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004988:	4b2b      	ldr	r3, [pc, #172]	; (8004a38 <RCCEx_PLL2_Config+0x15c>)
 800498a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498c:	f023 0220 	bic.w	r2, r3, #32
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	4928      	ldr	r1, [pc, #160]	; (8004a38 <RCCEx_PLL2_Config+0x15c>)
 8004996:	4313      	orrs	r3, r2
 8004998:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800499a:	4b27      	ldr	r3, [pc, #156]	; (8004a38 <RCCEx_PLL2_Config+0x15c>)
 800499c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499e:	4a26      	ldr	r2, [pc, #152]	; (8004a38 <RCCEx_PLL2_Config+0x15c>)
 80049a0:	f023 0310 	bic.w	r3, r3, #16
 80049a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80049a6:	4b24      	ldr	r3, [pc, #144]	; (8004a38 <RCCEx_PLL2_Config+0x15c>)
 80049a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049aa:	4b24      	ldr	r3, [pc, #144]	; (8004a3c <RCCEx_PLL2_Config+0x160>)
 80049ac:	4013      	ands	r3, r2
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	69d2      	ldr	r2, [r2, #28]
 80049b2:	00d2      	lsls	r2, r2, #3
 80049b4:	4920      	ldr	r1, [pc, #128]	; (8004a38 <RCCEx_PLL2_Config+0x15c>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80049ba:	4b1f      	ldr	r3, [pc, #124]	; (8004a38 <RCCEx_PLL2_Config+0x15c>)
 80049bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049be:	4a1e      	ldr	r2, [pc, #120]	; (8004a38 <RCCEx_PLL2_Config+0x15c>)
 80049c0:	f043 0310 	orr.w	r3, r3, #16
 80049c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d106      	bne.n	80049da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80049cc:	4b1a      	ldr	r3, [pc, #104]	; (8004a38 <RCCEx_PLL2_Config+0x15c>)
 80049ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d0:	4a19      	ldr	r2, [pc, #100]	; (8004a38 <RCCEx_PLL2_Config+0x15c>)
 80049d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049d8:	e00f      	b.n	80049fa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d106      	bne.n	80049ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80049e0:	4b15      	ldr	r3, [pc, #84]	; (8004a38 <RCCEx_PLL2_Config+0x15c>)
 80049e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e4:	4a14      	ldr	r2, [pc, #80]	; (8004a38 <RCCEx_PLL2_Config+0x15c>)
 80049e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049ec:	e005      	b.n	80049fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80049ee:	4b12      	ldr	r3, [pc, #72]	; (8004a38 <RCCEx_PLL2_Config+0x15c>)
 80049f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f2:	4a11      	ldr	r2, [pc, #68]	; (8004a38 <RCCEx_PLL2_Config+0x15c>)
 80049f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80049fa:	4b0f      	ldr	r3, [pc, #60]	; (8004a38 <RCCEx_PLL2_Config+0x15c>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a0e      	ldr	r2, [pc, #56]	; (8004a38 <RCCEx_PLL2_Config+0x15c>)
 8004a00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a06:	f7fc fcb9 	bl	800137c <HAL_GetTick>
 8004a0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004a0c:	e008      	b.n	8004a20 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004a0e:	f7fc fcb5 	bl	800137c <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d901      	bls.n	8004a20 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e006      	b.n	8004a2e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004a20:	4b05      	ldr	r3, [pc, #20]	; (8004a38 <RCCEx_PLL2_Config+0x15c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d0f0      	beq.n	8004a0e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	58024400 	.word	0x58024400
 8004a3c:	ffff0007 	.word	0xffff0007

08004a40 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a4e:	4b53      	ldr	r3, [pc, #332]	; (8004b9c <RCCEx_PLL3_Config+0x15c>)
 8004a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a52:	f003 0303 	and.w	r3, r3, #3
 8004a56:	2b03      	cmp	r3, #3
 8004a58:	d101      	bne.n	8004a5e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e099      	b.n	8004b92 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004a5e:	4b4f      	ldr	r3, [pc, #316]	; (8004b9c <RCCEx_PLL3_Config+0x15c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a4e      	ldr	r2, [pc, #312]	; (8004b9c <RCCEx_PLL3_Config+0x15c>)
 8004a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a6a:	f7fc fc87 	bl	800137c <HAL_GetTick>
 8004a6e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a70:	e008      	b.n	8004a84 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004a72:	f7fc fc83 	bl	800137c <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d901      	bls.n	8004a84 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e086      	b.n	8004b92 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a84:	4b45      	ldr	r3, [pc, #276]	; (8004b9c <RCCEx_PLL3_Config+0x15c>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1f0      	bne.n	8004a72 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004a90:	4b42      	ldr	r3, [pc, #264]	; (8004b9c <RCCEx_PLL3_Config+0x15c>)
 8004a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a94:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	051b      	lsls	r3, r3, #20
 8004a9e:	493f      	ldr	r1, [pc, #252]	; (8004b9c <RCCEx_PLL3_Config+0x15c>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	628b      	str	r3, [r1, #40]	; 0x28
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	025b      	lsls	r3, r3, #9
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	041b      	lsls	r3, r3, #16
 8004ac2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	3b01      	subs	r3, #1
 8004ace:	061b      	lsls	r3, r3, #24
 8004ad0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ad4:	4931      	ldr	r1, [pc, #196]	; (8004b9c <RCCEx_PLL3_Config+0x15c>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004ada:	4b30      	ldr	r3, [pc, #192]	; (8004b9c <RCCEx_PLL3_Config+0x15c>)
 8004adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ade:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	492d      	ldr	r1, [pc, #180]	; (8004b9c <RCCEx_PLL3_Config+0x15c>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004aec:	4b2b      	ldr	r3, [pc, #172]	; (8004b9c <RCCEx_PLL3_Config+0x15c>)
 8004aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	4928      	ldr	r1, [pc, #160]	; (8004b9c <RCCEx_PLL3_Config+0x15c>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004afe:	4b27      	ldr	r3, [pc, #156]	; (8004b9c <RCCEx_PLL3_Config+0x15c>)
 8004b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b02:	4a26      	ldr	r2, [pc, #152]	; (8004b9c <RCCEx_PLL3_Config+0x15c>)
 8004b04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004b0a:	4b24      	ldr	r3, [pc, #144]	; (8004b9c <RCCEx_PLL3_Config+0x15c>)
 8004b0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b0e:	4b24      	ldr	r3, [pc, #144]	; (8004ba0 <RCCEx_PLL3_Config+0x160>)
 8004b10:	4013      	ands	r3, r2
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	69d2      	ldr	r2, [r2, #28]
 8004b16:	00d2      	lsls	r2, r2, #3
 8004b18:	4920      	ldr	r1, [pc, #128]	; (8004b9c <RCCEx_PLL3_Config+0x15c>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004b1e:	4b1f      	ldr	r3, [pc, #124]	; (8004b9c <RCCEx_PLL3_Config+0x15c>)
 8004b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b22:	4a1e      	ldr	r2, [pc, #120]	; (8004b9c <RCCEx_PLL3_Config+0x15c>)
 8004b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d106      	bne.n	8004b3e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004b30:	4b1a      	ldr	r3, [pc, #104]	; (8004b9c <RCCEx_PLL3_Config+0x15c>)
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	4a19      	ldr	r2, [pc, #100]	; (8004b9c <RCCEx_PLL3_Config+0x15c>)
 8004b36:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b3c:	e00f      	b.n	8004b5e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d106      	bne.n	8004b52 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004b44:	4b15      	ldr	r3, [pc, #84]	; (8004b9c <RCCEx_PLL3_Config+0x15c>)
 8004b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b48:	4a14      	ldr	r2, [pc, #80]	; (8004b9c <RCCEx_PLL3_Config+0x15c>)
 8004b4a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b50:	e005      	b.n	8004b5e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004b52:	4b12      	ldr	r3, [pc, #72]	; (8004b9c <RCCEx_PLL3_Config+0x15c>)
 8004b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b56:	4a11      	ldr	r2, [pc, #68]	; (8004b9c <RCCEx_PLL3_Config+0x15c>)
 8004b58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b5c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004b5e:	4b0f      	ldr	r3, [pc, #60]	; (8004b9c <RCCEx_PLL3_Config+0x15c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a0e      	ldr	r2, [pc, #56]	; (8004b9c <RCCEx_PLL3_Config+0x15c>)
 8004b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b6a:	f7fc fc07 	bl	800137c <HAL_GetTick>
 8004b6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b70:	e008      	b.n	8004b84 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004b72:	f7fc fc03 	bl	800137c <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d901      	bls.n	8004b84 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e006      	b.n	8004b92 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b84:	4b05      	ldr	r3, [pc, #20]	; (8004b9c <RCCEx_PLL3_Config+0x15c>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d0f0      	beq.n	8004b72 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	58024400 	.word	0x58024400
 8004ba0:	ffff0007 	.word	0xffff0007

08004ba4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e042      	b.n	8004c3c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d106      	bne.n	8004bce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f7fc f9a7 	bl	8000f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2224      	movs	r2, #36	; 0x24
 8004bd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 0201 	bic.w	r2, r2, #1
 8004be4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 f8ba 	bl	8004d60 <UART_SetConfig>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d101      	bne.n	8004bf6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e022      	b.n	8004c3c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d002      	beq.n	8004c04 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 fe16 	bl	8005830 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689a      	ldr	r2, [r3, #8]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f042 0201 	orr.w	r2, r2, #1
 8004c32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 fe9d 	bl	8005974 <UART_CheckIdleState>
 8004c3a:	4603      	mov	r3, r0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b08a      	sub	sp, #40	; 0x28
 8004c48:	af02      	add	r7, sp, #8
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	603b      	str	r3, [r7, #0]
 8004c50:	4613      	mov	r3, r2
 8004c52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5a:	2b20      	cmp	r3, #32
 8004c5c:	d17b      	bne.n	8004d56 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d002      	beq.n	8004c6a <HAL_UART_Transmit+0x26>
 8004c64:	88fb      	ldrh	r3, [r7, #6]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e074      	b.n	8004d58 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2221      	movs	r2, #33	; 0x21
 8004c7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c7e:	f7fc fb7d 	bl	800137c <HAL_GetTick>
 8004c82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	88fa      	ldrh	r2, [r7, #6]
 8004c88:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	88fa      	ldrh	r2, [r7, #6]
 8004c90:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c9c:	d108      	bne.n	8004cb0 <HAL_UART_Transmit+0x6c>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d104      	bne.n	8004cb0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	61bb      	str	r3, [r7, #24]
 8004cae:	e003      	b.n	8004cb8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004cb8:	e030      	b.n	8004d1c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	2180      	movs	r1, #128	; 0x80
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f000 feff 	bl	8005ac8 <UART_WaitOnFlagUntilTimeout>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d005      	beq.n	8004cdc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e03d      	b.n	8004d58 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10b      	bne.n	8004cfa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	881b      	ldrh	r3, [r3, #0]
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cf0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	3302      	adds	r3, #2
 8004cf6:	61bb      	str	r3, [r7, #24]
 8004cf8:	e007      	b.n	8004d0a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	781a      	ldrb	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	3301      	adds	r3, #1
 8004d08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	3b01      	subs	r3, #1
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1c8      	bne.n	8004cba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	9300      	str	r3, [sp, #0]
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	2140      	movs	r1, #64	; 0x40
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f000 fec8 	bl	8005ac8 <UART_WaitOnFlagUntilTimeout>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d005      	beq.n	8004d4a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2220      	movs	r2, #32
 8004d42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e006      	b.n	8004d58 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004d52:	2300      	movs	r3, #0
 8004d54:	e000      	b.n	8004d58 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004d56:	2302      	movs	r3, #2
  }
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3720      	adds	r7, #32
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d64:	b092      	sub	sp, #72	; 0x48
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	689a      	ldr	r2, [r3, #8]
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	431a      	orrs	r2, r3
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	69db      	ldr	r3, [r3, #28]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	4bbe      	ldr	r3, [pc, #760]	; (8005088 <UART_SetConfig+0x328>)
 8004d90:	4013      	ands	r3, r2
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	6812      	ldr	r2, [r2, #0]
 8004d96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d98:	430b      	orrs	r3, r1
 8004d9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	68da      	ldr	r2, [r3, #12]
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4ab3      	ldr	r2, [pc, #716]	; (800508c <UART_SetConfig+0x32c>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d004      	beq.n	8004dcc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689a      	ldr	r2, [r3, #8]
 8004dd2:	4baf      	ldr	r3, [pc, #700]	; (8005090 <UART_SetConfig+0x330>)
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	6812      	ldr	r2, [r2, #0]
 8004dda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ddc:	430b      	orrs	r3, r1
 8004dde:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de6:	f023 010f 	bic.w	r1, r3, #15
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4aa6      	ldr	r2, [pc, #664]	; (8005094 <UART_SetConfig+0x334>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d177      	bne.n	8004ef0 <UART_SetConfig+0x190>
 8004e00:	4ba5      	ldr	r3, [pc, #660]	; (8005098 <UART_SetConfig+0x338>)
 8004e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e08:	2b28      	cmp	r3, #40	; 0x28
 8004e0a:	d86d      	bhi.n	8004ee8 <UART_SetConfig+0x188>
 8004e0c:	a201      	add	r2, pc, #4	; (adr r2, 8004e14 <UART_SetConfig+0xb4>)
 8004e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e12:	bf00      	nop
 8004e14:	08004eb9 	.word	0x08004eb9
 8004e18:	08004ee9 	.word	0x08004ee9
 8004e1c:	08004ee9 	.word	0x08004ee9
 8004e20:	08004ee9 	.word	0x08004ee9
 8004e24:	08004ee9 	.word	0x08004ee9
 8004e28:	08004ee9 	.word	0x08004ee9
 8004e2c:	08004ee9 	.word	0x08004ee9
 8004e30:	08004ee9 	.word	0x08004ee9
 8004e34:	08004ec1 	.word	0x08004ec1
 8004e38:	08004ee9 	.word	0x08004ee9
 8004e3c:	08004ee9 	.word	0x08004ee9
 8004e40:	08004ee9 	.word	0x08004ee9
 8004e44:	08004ee9 	.word	0x08004ee9
 8004e48:	08004ee9 	.word	0x08004ee9
 8004e4c:	08004ee9 	.word	0x08004ee9
 8004e50:	08004ee9 	.word	0x08004ee9
 8004e54:	08004ec9 	.word	0x08004ec9
 8004e58:	08004ee9 	.word	0x08004ee9
 8004e5c:	08004ee9 	.word	0x08004ee9
 8004e60:	08004ee9 	.word	0x08004ee9
 8004e64:	08004ee9 	.word	0x08004ee9
 8004e68:	08004ee9 	.word	0x08004ee9
 8004e6c:	08004ee9 	.word	0x08004ee9
 8004e70:	08004ee9 	.word	0x08004ee9
 8004e74:	08004ed1 	.word	0x08004ed1
 8004e78:	08004ee9 	.word	0x08004ee9
 8004e7c:	08004ee9 	.word	0x08004ee9
 8004e80:	08004ee9 	.word	0x08004ee9
 8004e84:	08004ee9 	.word	0x08004ee9
 8004e88:	08004ee9 	.word	0x08004ee9
 8004e8c:	08004ee9 	.word	0x08004ee9
 8004e90:	08004ee9 	.word	0x08004ee9
 8004e94:	08004ed9 	.word	0x08004ed9
 8004e98:	08004ee9 	.word	0x08004ee9
 8004e9c:	08004ee9 	.word	0x08004ee9
 8004ea0:	08004ee9 	.word	0x08004ee9
 8004ea4:	08004ee9 	.word	0x08004ee9
 8004ea8:	08004ee9 	.word	0x08004ee9
 8004eac:	08004ee9 	.word	0x08004ee9
 8004eb0:	08004ee9 	.word	0x08004ee9
 8004eb4:	08004ee1 	.word	0x08004ee1
 8004eb8:	2301      	movs	r3, #1
 8004eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ebe:	e222      	b.n	8005306 <UART_SetConfig+0x5a6>
 8004ec0:	2304      	movs	r3, #4
 8004ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ec6:	e21e      	b.n	8005306 <UART_SetConfig+0x5a6>
 8004ec8:	2308      	movs	r3, #8
 8004eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ece:	e21a      	b.n	8005306 <UART_SetConfig+0x5a6>
 8004ed0:	2310      	movs	r3, #16
 8004ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ed6:	e216      	b.n	8005306 <UART_SetConfig+0x5a6>
 8004ed8:	2320      	movs	r3, #32
 8004eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ede:	e212      	b.n	8005306 <UART_SetConfig+0x5a6>
 8004ee0:	2340      	movs	r3, #64	; 0x40
 8004ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ee6:	e20e      	b.n	8005306 <UART_SetConfig+0x5a6>
 8004ee8:	2380      	movs	r3, #128	; 0x80
 8004eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eee:	e20a      	b.n	8005306 <UART_SetConfig+0x5a6>
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a69      	ldr	r2, [pc, #420]	; (800509c <UART_SetConfig+0x33c>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d130      	bne.n	8004f5c <UART_SetConfig+0x1fc>
 8004efa:	4b67      	ldr	r3, [pc, #412]	; (8005098 <UART_SetConfig+0x338>)
 8004efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004efe:	f003 0307 	and.w	r3, r3, #7
 8004f02:	2b05      	cmp	r3, #5
 8004f04:	d826      	bhi.n	8004f54 <UART_SetConfig+0x1f4>
 8004f06:	a201      	add	r2, pc, #4	; (adr r2, 8004f0c <UART_SetConfig+0x1ac>)
 8004f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0c:	08004f25 	.word	0x08004f25
 8004f10:	08004f2d 	.word	0x08004f2d
 8004f14:	08004f35 	.word	0x08004f35
 8004f18:	08004f3d 	.word	0x08004f3d
 8004f1c:	08004f45 	.word	0x08004f45
 8004f20:	08004f4d 	.word	0x08004f4d
 8004f24:	2300      	movs	r3, #0
 8004f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f2a:	e1ec      	b.n	8005306 <UART_SetConfig+0x5a6>
 8004f2c:	2304      	movs	r3, #4
 8004f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f32:	e1e8      	b.n	8005306 <UART_SetConfig+0x5a6>
 8004f34:	2308      	movs	r3, #8
 8004f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f3a:	e1e4      	b.n	8005306 <UART_SetConfig+0x5a6>
 8004f3c:	2310      	movs	r3, #16
 8004f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f42:	e1e0      	b.n	8005306 <UART_SetConfig+0x5a6>
 8004f44:	2320      	movs	r3, #32
 8004f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f4a:	e1dc      	b.n	8005306 <UART_SetConfig+0x5a6>
 8004f4c:	2340      	movs	r3, #64	; 0x40
 8004f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f52:	e1d8      	b.n	8005306 <UART_SetConfig+0x5a6>
 8004f54:	2380      	movs	r3, #128	; 0x80
 8004f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f5a:	e1d4      	b.n	8005306 <UART_SetConfig+0x5a6>
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a4f      	ldr	r2, [pc, #316]	; (80050a0 <UART_SetConfig+0x340>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d130      	bne.n	8004fc8 <UART_SetConfig+0x268>
 8004f66:	4b4c      	ldr	r3, [pc, #304]	; (8005098 <UART_SetConfig+0x338>)
 8004f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f6a:	f003 0307 	and.w	r3, r3, #7
 8004f6e:	2b05      	cmp	r3, #5
 8004f70:	d826      	bhi.n	8004fc0 <UART_SetConfig+0x260>
 8004f72:	a201      	add	r2, pc, #4	; (adr r2, 8004f78 <UART_SetConfig+0x218>)
 8004f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f78:	08004f91 	.word	0x08004f91
 8004f7c:	08004f99 	.word	0x08004f99
 8004f80:	08004fa1 	.word	0x08004fa1
 8004f84:	08004fa9 	.word	0x08004fa9
 8004f88:	08004fb1 	.word	0x08004fb1
 8004f8c:	08004fb9 	.word	0x08004fb9
 8004f90:	2300      	movs	r3, #0
 8004f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f96:	e1b6      	b.n	8005306 <UART_SetConfig+0x5a6>
 8004f98:	2304      	movs	r3, #4
 8004f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f9e:	e1b2      	b.n	8005306 <UART_SetConfig+0x5a6>
 8004fa0:	2308      	movs	r3, #8
 8004fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fa6:	e1ae      	b.n	8005306 <UART_SetConfig+0x5a6>
 8004fa8:	2310      	movs	r3, #16
 8004faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fae:	e1aa      	b.n	8005306 <UART_SetConfig+0x5a6>
 8004fb0:	2320      	movs	r3, #32
 8004fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fb6:	e1a6      	b.n	8005306 <UART_SetConfig+0x5a6>
 8004fb8:	2340      	movs	r3, #64	; 0x40
 8004fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fbe:	e1a2      	b.n	8005306 <UART_SetConfig+0x5a6>
 8004fc0:	2380      	movs	r3, #128	; 0x80
 8004fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fc6:	e19e      	b.n	8005306 <UART_SetConfig+0x5a6>
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a35      	ldr	r2, [pc, #212]	; (80050a4 <UART_SetConfig+0x344>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d130      	bne.n	8005034 <UART_SetConfig+0x2d4>
 8004fd2:	4b31      	ldr	r3, [pc, #196]	; (8005098 <UART_SetConfig+0x338>)
 8004fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd6:	f003 0307 	and.w	r3, r3, #7
 8004fda:	2b05      	cmp	r3, #5
 8004fdc:	d826      	bhi.n	800502c <UART_SetConfig+0x2cc>
 8004fde:	a201      	add	r2, pc, #4	; (adr r2, 8004fe4 <UART_SetConfig+0x284>)
 8004fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe4:	08004ffd 	.word	0x08004ffd
 8004fe8:	08005005 	.word	0x08005005
 8004fec:	0800500d 	.word	0x0800500d
 8004ff0:	08005015 	.word	0x08005015
 8004ff4:	0800501d 	.word	0x0800501d
 8004ff8:	08005025 	.word	0x08005025
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005002:	e180      	b.n	8005306 <UART_SetConfig+0x5a6>
 8005004:	2304      	movs	r3, #4
 8005006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800500a:	e17c      	b.n	8005306 <UART_SetConfig+0x5a6>
 800500c:	2308      	movs	r3, #8
 800500e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005012:	e178      	b.n	8005306 <UART_SetConfig+0x5a6>
 8005014:	2310      	movs	r3, #16
 8005016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800501a:	e174      	b.n	8005306 <UART_SetConfig+0x5a6>
 800501c:	2320      	movs	r3, #32
 800501e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005022:	e170      	b.n	8005306 <UART_SetConfig+0x5a6>
 8005024:	2340      	movs	r3, #64	; 0x40
 8005026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800502a:	e16c      	b.n	8005306 <UART_SetConfig+0x5a6>
 800502c:	2380      	movs	r3, #128	; 0x80
 800502e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005032:	e168      	b.n	8005306 <UART_SetConfig+0x5a6>
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a1b      	ldr	r2, [pc, #108]	; (80050a8 <UART_SetConfig+0x348>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d142      	bne.n	80050c4 <UART_SetConfig+0x364>
 800503e:	4b16      	ldr	r3, [pc, #88]	; (8005098 <UART_SetConfig+0x338>)
 8005040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005042:	f003 0307 	and.w	r3, r3, #7
 8005046:	2b05      	cmp	r3, #5
 8005048:	d838      	bhi.n	80050bc <UART_SetConfig+0x35c>
 800504a:	a201      	add	r2, pc, #4	; (adr r2, 8005050 <UART_SetConfig+0x2f0>)
 800504c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005050:	08005069 	.word	0x08005069
 8005054:	08005071 	.word	0x08005071
 8005058:	08005079 	.word	0x08005079
 800505c:	08005081 	.word	0x08005081
 8005060:	080050ad 	.word	0x080050ad
 8005064:	080050b5 	.word	0x080050b5
 8005068:	2300      	movs	r3, #0
 800506a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800506e:	e14a      	b.n	8005306 <UART_SetConfig+0x5a6>
 8005070:	2304      	movs	r3, #4
 8005072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005076:	e146      	b.n	8005306 <UART_SetConfig+0x5a6>
 8005078:	2308      	movs	r3, #8
 800507a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800507e:	e142      	b.n	8005306 <UART_SetConfig+0x5a6>
 8005080:	2310      	movs	r3, #16
 8005082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005086:	e13e      	b.n	8005306 <UART_SetConfig+0x5a6>
 8005088:	cfff69f3 	.word	0xcfff69f3
 800508c:	58000c00 	.word	0x58000c00
 8005090:	11fff4ff 	.word	0x11fff4ff
 8005094:	40011000 	.word	0x40011000
 8005098:	58024400 	.word	0x58024400
 800509c:	40004400 	.word	0x40004400
 80050a0:	40004800 	.word	0x40004800
 80050a4:	40004c00 	.word	0x40004c00
 80050a8:	40005000 	.word	0x40005000
 80050ac:	2320      	movs	r3, #32
 80050ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050b2:	e128      	b.n	8005306 <UART_SetConfig+0x5a6>
 80050b4:	2340      	movs	r3, #64	; 0x40
 80050b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ba:	e124      	b.n	8005306 <UART_SetConfig+0x5a6>
 80050bc:	2380      	movs	r3, #128	; 0x80
 80050be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050c2:	e120      	b.n	8005306 <UART_SetConfig+0x5a6>
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4acb      	ldr	r2, [pc, #812]	; (80053f8 <UART_SetConfig+0x698>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d176      	bne.n	80051bc <UART_SetConfig+0x45c>
 80050ce:	4bcb      	ldr	r3, [pc, #812]	; (80053fc <UART_SetConfig+0x69c>)
 80050d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050d6:	2b28      	cmp	r3, #40	; 0x28
 80050d8:	d86c      	bhi.n	80051b4 <UART_SetConfig+0x454>
 80050da:	a201      	add	r2, pc, #4	; (adr r2, 80050e0 <UART_SetConfig+0x380>)
 80050dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e0:	08005185 	.word	0x08005185
 80050e4:	080051b5 	.word	0x080051b5
 80050e8:	080051b5 	.word	0x080051b5
 80050ec:	080051b5 	.word	0x080051b5
 80050f0:	080051b5 	.word	0x080051b5
 80050f4:	080051b5 	.word	0x080051b5
 80050f8:	080051b5 	.word	0x080051b5
 80050fc:	080051b5 	.word	0x080051b5
 8005100:	0800518d 	.word	0x0800518d
 8005104:	080051b5 	.word	0x080051b5
 8005108:	080051b5 	.word	0x080051b5
 800510c:	080051b5 	.word	0x080051b5
 8005110:	080051b5 	.word	0x080051b5
 8005114:	080051b5 	.word	0x080051b5
 8005118:	080051b5 	.word	0x080051b5
 800511c:	080051b5 	.word	0x080051b5
 8005120:	08005195 	.word	0x08005195
 8005124:	080051b5 	.word	0x080051b5
 8005128:	080051b5 	.word	0x080051b5
 800512c:	080051b5 	.word	0x080051b5
 8005130:	080051b5 	.word	0x080051b5
 8005134:	080051b5 	.word	0x080051b5
 8005138:	080051b5 	.word	0x080051b5
 800513c:	080051b5 	.word	0x080051b5
 8005140:	0800519d 	.word	0x0800519d
 8005144:	080051b5 	.word	0x080051b5
 8005148:	080051b5 	.word	0x080051b5
 800514c:	080051b5 	.word	0x080051b5
 8005150:	080051b5 	.word	0x080051b5
 8005154:	080051b5 	.word	0x080051b5
 8005158:	080051b5 	.word	0x080051b5
 800515c:	080051b5 	.word	0x080051b5
 8005160:	080051a5 	.word	0x080051a5
 8005164:	080051b5 	.word	0x080051b5
 8005168:	080051b5 	.word	0x080051b5
 800516c:	080051b5 	.word	0x080051b5
 8005170:	080051b5 	.word	0x080051b5
 8005174:	080051b5 	.word	0x080051b5
 8005178:	080051b5 	.word	0x080051b5
 800517c:	080051b5 	.word	0x080051b5
 8005180:	080051ad 	.word	0x080051ad
 8005184:	2301      	movs	r3, #1
 8005186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800518a:	e0bc      	b.n	8005306 <UART_SetConfig+0x5a6>
 800518c:	2304      	movs	r3, #4
 800518e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005192:	e0b8      	b.n	8005306 <UART_SetConfig+0x5a6>
 8005194:	2308      	movs	r3, #8
 8005196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800519a:	e0b4      	b.n	8005306 <UART_SetConfig+0x5a6>
 800519c:	2310      	movs	r3, #16
 800519e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051a2:	e0b0      	b.n	8005306 <UART_SetConfig+0x5a6>
 80051a4:	2320      	movs	r3, #32
 80051a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051aa:	e0ac      	b.n	8005306 <UART_SetConfig+0x5a6>
 80051ac:	2340      	movs	r3, #64	; 0x40
 80051ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051b2:	e0a8      	b.n	8005306 <UART_SetConfig+0x5a6>
 80051b4:	2380      	movs	r3, #128	; 0x80
 80051b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ba:	e0a4      	b.n	8005306 <UART_SetConfig+0x5a6>
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a8f      	ldr	r2, [pc, #572]	; (8005400 <UART_SetConfig+0x6a0>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d130      	bne.n	8005228 <UART_SetConfig+0x4c8>
 80051c6:	4b8d      	ldr	r3, [pc, #564]	; (80053fc <UART_SetConfig+0x69c>)
 80051c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ca:	f003 0307 	and.w	r3, r3, #7
 80051ce:	2b05      	cmp	r3, #5
 80051d0:	d826      	bhi.n	8005220 <UART_SetConfig+0x4c0>
 80051d2:	a201      	add	r2, pc, #4	; (adr r2, 80051d8 <UART_SetConfig+0x478>)
 80051d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d8:	080051f1 	.word	0x080051f1
 80051dc:	080051f9 	.word	0x080051f9
 80051e0:	08005201 	.word	0x08005201
 80051e4:	08005209 	.word	0x08005209
 80051e8:	08005211 	.word	0x08005211
 80051ec:	08005219 	.word	0x08005219
 80051f0:	2300      	movs	r3, #0
 80051f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051f6:	e086      	b.n	8005306 <UART_SetConfig+0x5a6>
 80051f8:	2304      	movs	r3, #4
 80051fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051fe:	e082      	b.n	8005306 <UART_SetConfig+0x5a6>
 8005200:	2308      	movs	r3, #8
 8005202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005206:	e07e      	b.n	8005306 <UART_SetConfig+0x5a6>
 8005208:	2310      	movs	r3, #16
 800520a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800520e:	e07a      	b.n	8005306 <UART_SetConfig+0x5a6>
 8005210:	2320      	movs	r3, #32
 8005212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005216:	e076      	b.n	8005306 <UART_SetConfig+0x5a6>
 8005218:	2340      	movs	r3, #64	; 0x40
 800521a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800521e:	e072      	b.n	8005306 <UART_SetConfig+0x5a6>
 8005220:	2380      	movs	r3, #128	; 0x80
 8005222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005226:	e06e      	b.n	8005306 <UART_SetConfig+0x5a6>
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a75      	ldr	r2, [pc, #468]	; (8005404 <UART_SetConfig+0x6a4>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d130      	bne.n	8005294 <UART_SetConfig+0x534>
 8005232:	4b72      	ldr	r3, [pc, #456]	; (80053fc <UART_SetConfig+0x69c>)
 8005234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005236:	f003 0307 	and.w	r3, r3, #7
 800523a:	2b05      	cmp	r3, #5
 800523c:	d826      	bhi.n	800528c <UART_SetConfig+0x52c>
 800523e:	a201      	add	r2, pc, #4	; (adr r2, 8005244 <UART_SetConfig+0x4e4>)
 8005240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005244:	0800525d 	.word	0x0800525d
 8005248:	08005265 	.word	0x08005265
 800524c:	0800526d 	.word	0x0800526d
 8005250:	08005275 	.word	0x08005275
 8005254:	0800527d 	.word	0x0800527d
 8005258:	08005285 	.word	0x08005285
 800525c:	2300      	movs	r3, #0
 800525e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005262:	e050      	b.n	8005306 <UART_SetConfig+0x5a6>
 8005264:	2304      	movs	r3, #4
 8005266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800526a:	e04c      	b.n	8005306 <UART_SetConfig+0x5a6>
 800526c:	2308      	movs	r3, #8
 800526e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005272:	e048      	b.n	8005306 <UART_SetConfig+0x5a6>
 8005274:	2310      	movs	r3, #16
 8005276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800527a:	e044      	b.n	8005306 <UART_SetConfig+0x5a6>
 800527c:	2320      	movs	r3, #32
 800527e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005282:	e040      	b.n	8005306 <UART_SetConfig+0x5a6>
 8005284:	2340      	movs	r3, #64	; 0x40
 8005286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800528a:	e03c      	b.n	8005306 <UART_SetConfig+0x5a6>
 800528c:	2380      	movs	r3, #128	; 0x80
 800528e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005292:	e038      	b.n	8005306 <UART_SetConfig+0x5a6>
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a5b      	ldr	r2, [pc, #364]	; (8005408 <UART_SetConfig+0x6a8>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d130      	bne.n	8005300 <UART_SetConfig+0x5a0>
 800529e:	4b57      	ldr	r3, [pc, #348]	; (80053fc <UART_SetConfig+0x69c>)
 80052a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a2:	f003 0307 	and.w	r3, r3, #7
 80052a6:	2b05      	cmp	r3, #5
 80052a8:	d826      	bhi.n	80052f8 <UART_SetConfig+0x598>
 80052aa:	a201      	add	r2, pc, #4	; (adr r2, 80052b0 <UART_SetConfig+0x550>)
 80052ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b0:	080052c9 	.word	0x080052c9
 80052b4:	080052d1 	.word	0x080052d1
 80052b8:	080052d9 	.word	0x080052d9
 80052bc:	080052e1 	.word	0x080052e1
 80052c0:	080052e9 	.word	0x080052e9
 80052c4:	080052f1 	.word	0x080052f1
 80052c8:	2302      	movs	r3, #2
 80052ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ce:	e01a      	b.n	8005306 <UART_SetConfig+0x5a6>
 80052d0:	2304      	movs	r3, #4
 80052d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052d6:	e016      	b.n	8005306 <UART_SetConfig+0x5a6>
 80052d8:	2308      	movs	r3, #8
 80052da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052de:	e012      	b.n	8005306 <UART_SetConfig+0x5a6>
 80052e0:	2310      	movs	r3, #16
 80052e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052e6:	e00e      	b.n	8005306 <UART_SetConfig+0x5a6>
 80052e8:	2320      	movs	r3, #32
 80052ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ee:	e00a      	b.n	8005306 <UART_SetConfig+0x5a6>
 80052f0:	2340      	movs	r3, #64	; 0x40
 80052f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052f6:	e006      	b.n	8005306 <UART_SetConfig+0x5a6>
 80052f8:	2380      	movs	r3, #128	; 0x80
 80052fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052fe:	e002      	b.n	8005306 <UART_SetConfig+0x5a6>
 8005300:	2380      	movs	r3, #128	; 0x80
 8005302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a3f      	ldr	r2, [pc, #252]	; (8005408 <UART_SetConfig+0x6a8>)
 800530c:	4293      	cmp	r3, r2
 800530e:	f040 80f8 	bne.w	8005502 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005312:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005316:	2b20      	cmp	r3, #32
 8005318:	dc46      	bgt.n	80053a8 <UART_SetConfig+0x648>
 800531a:	2b02      	cmp	r3, #2
 800531c:	f2c0 8082 	blt.w	8005424 <UART_SetConfig+0x6c4>
 8005320:	3b02      	subs	r3, #2
 8005322:	2b1e      	cmp	r3, #30
 8005324:	d87e      	bhi.n	8005424 <UART_SetConfig+0x6c4>
 8005326:	a201      	add	r2, pc, #4	; (adr r2, 800532c <UART_SetConfig+0x5cc>)
 8005328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800532c:	080053af 	.word	0x080053af
 8005330:	08005425 	.word	0x08005425
 8005334:	080053b7 	.word	0x080053b7
 8005338:	08005425 	.word	0x08005425
 800533c:	08005425 	.word	0x08005425
 8005340:	08005425 	.word	0x08005425
 8005344:	080053c7 	.word	0x080053c7
 8005348:	08005425 	.word	0x08005425
 800534c:	08005425 	.word	0x08005425
 8005350:	08005425 	.word	0x08005425
 8005354:	08005425 	.word	0x08005425
 8005358:	08005425 	.word	0x08005425
 800535c:	08005425 	.word	0x08005425
 8005360:	08005425 	.word	0x08005425
 8005364:	080053d7 	.word	0x080053d7
 8005368:	08005425 	.word	0x08005425
 800536c:	08005425 	.word	0x08005425
 8005370:	08005425 	.word	0x08005425
 8005374:	08005425 	.word	0x08005425
 8005378:	08005425 	.word	0x08005425
 800537c:	08005425 	.word	0x08005425
 8005380:	08005425 	.word	0x08005425
 8005384:	08005425 	.word	0x08005425
 8005388:	08005425 	.word	0x08005425
 800538c:	08005425 	.word	0x08005425
 8005390:	08005425 	.word	0x08005425
 8005394:	08005425 	.word	0x08005425
 8005398:	08005425 	.word	0x08005425
 800539c:	08005425 	.word	0x08005425
 80053a0:	08005425 	.word	0x08005425
 80053a4:	08005417 	.word	0x08005417
 80053a8:	2b40      	cmp	r3, #64	; 0x40
 80053aa:	d037      	beq.n	800541c <UART_SetConfig+0x6bc>
 80053ac:	e03a      	b.n	8005424 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80053ae:	f7fe ffd7 	bl	8004360 <HAL_RCCEx_GetD3PCLK1Freq>
 80053b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80053b4:	e03c      	b.n	8005430 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7fe ffe6 	bl	800438c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80053c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053c4:	e034      	b.n	8005430 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053c6:	f107 0318 	add.w	r3, r7, #24
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7ff f932 	bl	8004634 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053d4:	e02c      	b.n	8005430 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053d6:	4b09      	ldr	r3, [pc, #36]	; (80053fc <UART_SetConfig+0x69c>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0320 	and.w	r3, r3, #32
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d016      	beq.n	8005410 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80053e2:	4b06      	ldr	r3, [pc, #24]	; (80053fc <UART_SetConfig+0x69c>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	08db      	lsrs	r3, r3, #3
 80053e8:	f003 0303 	and.w	r3, r3, #3
 80053ec:	4a07      	ldr	r2, [pc, #28]	; (800540c <UART_SetConfig+0x6ac>)
 80053ee:	fa22 f303 	lsr.w	r3, r2, r3
 80053f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80053f4:	e01c      	b.n	8005430 <UART_SetConfig+0x6d0>
 80053f6:	bf00      	nop
 80053f8:	40011400 	.word	0x40011400
 80053fc:	58024400 	.word	0x58024400
 8005400:	40007800 	.word	0x40007800
 8005404:	40007c00 	.word	0x40007c00
 8005408:	58000c00 	.word	0x58000c00
 800540c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005410:	4b9d      	ldr	r3, [pc, #628]	; (8005688 <UART_SetConfig+0x928>)
 8005412:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005414:	e00c      	b.n	8005430 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005416:	4b9d      	ldr	r3, [pc, #628]	; (800568c <UART_SetConfig+0x92c>)
 8005418:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800541a:	e009      	b.n	8005430 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800541c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005420:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005422:	e005      	b.n	8005430 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005424:	2300      	movs	r3, #0
 8005426:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800542e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 81de 	beq.w	80057f4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543c:	4a94      	ldr	r2, [pc, #592]	; (8005690 <UART_SetConfig+0x930>)
 800543e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005442:	461a      	mov	r2, r3
 8005444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005446:	fbb3 f3f2 	udiv	r3, r3, r2
 800544a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	4613      	mov	r3, r2
 8005452:	005b      	lsls	r3, r3, #1
 8005454:	4413      	add	r3, r2
 8005456:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005458:	429a      	cmp	r2, r3
 800545a:	d305      	bcc.n	8005468 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005462:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005464:	429a      	cmp	r2, r3
 8005466:	d903      	bls.n	8005470 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800546e:	e1c1      	b.n	80057f4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005472:	2200      	movs	r2, #0
 8005474:	60bb      	str	r3, [r7, #8]
 8005476:	60fa      	str	r2, [r7, #12]
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547c:	4a84      	ldr	r2, [pc, #528]	; (8005690 <UART_SetConfig+0x930>)
 800547e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005482:	b29b      	uxth	r3, r3
 8005484:	2200      	movs	r2, #0
 8005486:	603b      	str	r3, [r7, #0]
 8005488:	607a      	str	r2, [r7, #4]
 800548a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800548e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005492:	f7fa ff75 	bl	8000380 <__aeabi_uldivmod>
 8005496:	4602      	mov	r2, r0
 8005498:	460b      	mov	r3, r1
 800549a:	4610      	mov	r0, r2
 800549c:	4619      	mov	r1, r3
 800549e:	f04f 0200 	mov.w	r2, #0
 80054a2:	f04f 0300 	mov.w	r3, #0
 80054a6:	020b      	lsls	r3, r1, #8
 80054a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80054ac:	0202      	lsls	r2, r0, #8
 80054ae:	6979      	ldr	r1, [r7, #20]
 80054b0:	6849      	ldr	r1, [r1, #4]
 80054b2:	0849      	lsrs	r1, r1, #1
 80054b4:	2000      	movs	r0, #0
 80054b6:	460c      	mov	r4, r1
 80054b8:	4605      	mov	r5, r0
 80054ba:	eb12 0804 	adds.w	r8, r2, r4
 80054be:	eb43 0905 	adc.w	r9, r3, r5
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	469a      	mov	sl, r3
 80054ca:	4693      	mov	fp, r2
 80054cc:	4652      	mov	r2, sl
 80054ce:	465b      	mov	r3, fp
 80054d0:	4640      	mov	r0, r8
 80054d2:	4649      	mov	r1, r9
 80054d4:	f7fa ff54 	bl	8000380 <__aeabi_uldivmod>
 80054d8:	4602      	mov	r2, r0
 80054da:	460b      	mov	r3, r1
 80054dc:	4613      	mov	r3, r2
 80054de:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80054e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054e6:	d308      	bcc.n	80054fa <UART_SetConfig+0x79a>
 80054e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054ee:	d204      	bcs.n	80054fa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054f6:	60da      	str	r2, [r3, #12]
 80054f8:	e17c      	b.n	80057f4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005500:	e178      	b.n	80057f4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800550a:	f040 80c5 	bne.w	8005698 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800550e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005512:	2b20      	cmp	r3, #32
 8005514:	dc48      	bgt.n	80055a8 <UART_SetConfig+0x848>
 8005516:	2b00      	cmp	r3, #0
 8005518:	db7b      	blt.n	8005612 <UART_SetConfig+0x8b2>
 800551a:	2b20      	cmp	r3, #32
 800551c:	d879      	bhi.n	8005612 <UART_SetConfig+0x8b2>
 800551e:	a201      	add	r2, pc, #4	; (adr r2, 8005524 <UART_SetConfig+0x7c4>)
 8005520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005524:	080055af 	.word	0x080055af
 8005528:	080055b7 	.word	0x080055b7
 800552c:	08005613 	.word	0x08005613
 8005530:	08005613 	.word	0x08005613
 8005534:	080055bf 	.word	0x080055bf
 8005538:	08005613 	.word	0x08005613
 800553c:	08005613 	.word	0x08005613
 8005540:	08005613 	.word	0x08005613
 8005544:	080055cf 	.word	0x080055cf
 8005548:	08005613 	.word	0x08005613
 800554c:	08005613 	.word	0x08005613
 8005550:	08005613 	.word	0x08005613
 8005554:	08005613 	.word	0x08005613
 8005558:	08005613 	.word	0x08005613
 800555c:	08005613 	.word	0x08005613
 8005560:	08005613 	.word	0x08005613
 8005564:	080055df 	.word	0x080055df
 8005568:	08005613 	.word	0x08005613
 800556c:	08005613 	.word	0x08005613
 8005570:	08005613 	.word	0x08005613
 8005574:	08005613 	.word	0x08005613
 8005578:	08005613 	.word	0x08005613
 800557c:	08005613 	.word	0x08005613
 8005580:	08005613 	.word	0x08005613
 8005584:	08005613 	.word	0x08005613
 8005588:	08005613 	.word	0x08005613
 800558c:	08005613 	.word	0x08005613
 8005590:	08005613 	.word	0x08005613
 8005594:	08005613 	.word	0x08005613
 8005598:	08005613 	.word	0x08005613
 800559c:	08005613 	.word	0x08005613
 80055a0:	08005613 	.word	0x08005613
 80055a4:	08005605 	.word	0x08005605
 80055a8:	2b40      	cmp	r3, #64	; 0x40
 80055aa:	d02e      	beq.n	800560a <UART_SetConfig+0x8aa>
 80055ac:	e031      	b.n	8005612 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055ae:	f7fd fca1 	bl	8002ef4 <HAL_RCC_GetPCLK1Freq>
 80055b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80055b4:	e033      	b.n	800561e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055b6:	f7fd fcb3 	bl	8002f20 <HAL_RCC_GetPCLK2Freq>
 80055ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80055bc:	e02f      	b.n	800561e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7fe fee2 	bl	800438c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80055c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055cc:	e027      	b.n	800561e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055ce:	f107 0318 	add.w	r3, r7, #24
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7ff f82e 	bl	8004634 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055dc:	e01f      	b.n	800561e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055de:	4b2d      	ldr	r3, [pc, #180]	; (8005694 <UART_SetConfig+0x934>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0320 	and.w	r3, r3, #32
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d009      	beq.n	80055fe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80055ea:	4b2a      	ldr	r3, [pc, #168]	; (8005694 <UART_SetConfig+0x934>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	08db      	lsrs	r3, r3, #3
 80055f0:	f003 0303 	and.w	r3, r3, #3
 80055f4:	4a24      	ldr	r2, [pc, #144]	; (8005688 <UART_SetConfig+0x928>)
 80055f6:	fa22 f303 	lsr.w	r3, r2, r3
 80055fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80055fc:	e00f      	b.n	800561e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80055fe:	4b22      	ldr	r3, [pc, #136]	; (8005688 <UART_SetConfig+0x928>)
 8005600:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005602:	e00c      	b.n	800561e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005604:	4b21      	ldr	r3, [pc, #132]	; (800568c <UART_SetConfig+0x92c>)
 8005606:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005608:	e009      	b.n	800561e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800560a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800560e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005610:	e005      	b.n	800561e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005612:	2300      	movs	r3, #0
 8005614:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800561c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800561e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005620:	2b00      	cmp	r3, #0
 8005622:	f000 80e7 	beq.w	80057f4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562a:	4a19      	ldr	r2, [pc, #100]	; (8005690 <UART_SetConfig+0x930>)
 800562c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005630:	461a      	mov	r2, r3
 8005632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005634:	fbb3 f3f2 	udiv	r3, r3, r2
 8005638:	005a      	lsls	r2, r3, #1
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	085b      	lsrs	r3, r3, #1
 8005640:	441a      	add	r2, r3
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	fbb2 f3f3 	udiv	r3, r2, r3
 800564a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800564c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564e:	2b0f      	cmp	r3, #15
 8005650:	d916      	bls.n	8005680 <UART_SetConfig+0x920>
 8005652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005658:	d212      	bcs.n	8005680 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800565a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565c:	b29b      	uxth	r3, r3
 800565e:	f023 030f 	bic.w	r3, r3, #15
 8005662:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005666:	085b      	lsrs	r3, r3, #1
 8005668:	b29b      	uxth	r3, r3
 800566a:	f003 0307 	and.w	r3, r3, #7
 800566e:	b29a      	uxth	r2, r3
 8005670:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005672:	4313      	orrs	r3, r2
 8005674:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800567c:	60da      	str	r2, [r3, #12]
 800567e:	e0b9      	b.n	80057f4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005686:	e0b5      	b.n	80057f4 <UART_SetConfig+0xa94>
 8005688:	03d09000 	.word	0x03d09000
 800568c:	003d0900 	.word	0x003d0900
 8005690:	08006894 	.word	0x08006894
 8005694:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005698:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800569c:	2b20      	cmp	r3, #32
 800569e:	dc49      	bgt.n	8005734 <UART_SetConfig+0x9d4>
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	db7c      	blt.n	800579e <UART_SetConfig+0xa3e>
 80056a4:	2b20      	cmp	r3, #32
 80056a6:	d87a      	bhi.n	800579e <UART_SetConfig+0xa3e>
 80056a8:	a201      	add	r2, pc, #4	; (adr r2, 80056b0 <UART_SetConfig+0x950>)
 80056aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ae:	bf00      	nop
 80056b0:	0800573b 	.word	0x0800573b
 80056b4:	08005743 	.word	0x08005743
 80056b8:	0800579f 	.word	0x0800579f
 80056bc:	0800579f 	.word	0x0800579f
 80056c0:	0800574b 	.word	0x0800574b
 80056c4:	0800579f 	.word	0x0800579f
 80056c8:	0800579f 	.word	0x0800579f
 80056cc:	0800579f 	.word	0x0800579f
 80056d0:	0800575b 	.word	0x0800575b
 80056d4:	0800579f 	.word	0x0800579f
 80056d8:	0800579f 	.word	0x0800579f
 80056dc:	0800579f 	.word	0x0800579f
 80056e0:	0800579f 	.word	0x0800579f
 80056e4:	0800579f 	.word	0x0800579f
 80056e8:	0800579f 	.word	0x0800579f
 80056ec:	0800579f 	.word	0x0800579f
 80056f0:	0800576b 	.word	0x0800576b
 80056f4:	0800579f 	.word	0x0800579f
 80056f8:	0800579f 	.word	0x0800579f
 80056fc:	0800579f 	.word	0x0800579f
 8005700:	0800579f 	.word	0x0800579f
 8005704:	0800579f 	.word	0x0800579f
 8005708:	0800579f 	.word	0x0800579f
 800570c:	0800579f 	.word	0x0800579f
 8005710:	0800579f 	.word	0x0800579f
 8005714:	0800579f 	.word	0x0800579f
 8005718:	0800579f 	.word	0x0800579f
 800571c:	0800579f 	.word	0x0800579f
 8005720:	0800579f 	.word	0x0800579f
 8005724:	0800579f 	.word	0x0800579f
 8005728:	0800579f 	.word	0x0800579f
 800572c:	0800579f 	.word	0x0800579f
 8005730:	08005791 	.word	0x08005791
 8005734:	2b40      	cmp	r3, #64	; 0x40
 8005736:	d02e      	beq.n	8005796 <UART_SetConfig+0xa36>
 8005738:	e031      	b.n	800579e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800573a:	f7fd fbdb 	bl	8002ef4 <HAL_RCC_GetPCLK1Freq>
 800573e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005740:	e033      	b.n	80057aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005742:	f7fd fbed 	bl	8002f20 <HAL_RCC_GetPCLK2Freq>
 8005746:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005748:	e02f      	b.n	80057aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800574a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800574e:	4618      	mov	r0, r3
 8005750:	f7fe fe1c 	bl	800438c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005756:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005758:	e027      	b.n	80057aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800575a:	f107 0318 	add.w	r3, r7, #24
 800575e:	4618      	mov	r0, r3
 8005760:	f7fe ff68 	bl	8004634 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005768:	e01f      	b.n	80057aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800576a:	4b2d      	ldr	r3, [pc, #180]	; (8005820 <UART_SetConfig+0xac0>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0320 	and.w	r3, r3, #32
 8005772:	2b00      	cmp	r3, #0
 8005774:	d009      	beq.n	800578a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005776:	4b2a      	ldr	r3, [pc, #168]	; (8005820 <UART_SetConfig+0xac0>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	08db      	lsrs	r3, r3, #3
 800577c:	f003 0303 	and.w	r3, r3, #3
 8005780:	4a28      	ldr	r2, [pc, #160]	; (8005824 <UART_SetConfig+0xac4>)
 8005782:	fa22 f303 	lsr.w	r3, r2, r3
 8005786:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005788:	e00f      	b.n	80057aa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800578a:	4b26      	ldr	r3, [pc, #152]	; (8005824 <UART_SetConfig+0xac4>)
 800578c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800578e:	e00c      	b.n	80057aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005790:	4b25      	ldr	r3, [pc, #148]	; (8005828 <UART_SetConfig+0xac8>)
 8005792:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005794:	e009      	b.n	80057aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800579a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800579c:	e005      	b.n	80057aa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800579e:	2300      	movs	r3, #0
 80057a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80057a8:	bf00      	nop
    }

    if (pclk != 0U)
 80057aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d021      	beq.n	80057f4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b4:	4a1d      	ldr	r2, [pc, #116]	; (800582c <UART_SetConfig+0xacc>)
 80057b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057ba:	461a      	mov	r2, r3
 80057bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057be:	fbb3 f2f2 	udiv	r2, r3, r2
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	085b      	lsrs	r3, r3, #1
 80057c8:	441a      	add	r2, r3
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d6:	2b0f      	cmp	r3, #15
 80057d8:	d909      	bls.n	80057ee <UART_SetConfig+0xa8e>
 80057da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057e0:	d205      	bcs.n	80057ee <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	60da      	str	r2, [r3, #12]
 80057ec:	e002      	b.n	80057f4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	2201      	movs	r2, #1
 8005800:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	2200      	movs	r2, #0
 8005808:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	2200      	movs	r2, #0
 800580e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005810:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005814:	4618      	mov	r0, r3
 8005816:	3748      	adds	r7, #72	; 0x48
 8005818:	46bd      	mov	sp, r7
 800581a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800581e:	bf00      	nop
 8005820:	58024400 	.word	0x58024400
 8005824:	03d09000 	.word	0x03d09000
 8005828:	003d0900 	.word	0x003d0900
 800582c:	08006894 	.word	0x08006894

08005830 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00a      	beq.n	800585a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	430a      	orrs	r2, r1
 8005858:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00a      	beq.n	800587c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	430a      	orrs	r2, r1
 800587a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005880:	f003 0304 	and.w	r3, r3, #4
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00a      	beq.n	800589e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a2:	f003 0308 	and.w	r3, r3, #8
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00a      	beq.n	80058c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	430a      	orrs	r2, r1
 80058be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c4:	f003 0310 	and.w	r3, r3, #16
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00a      	beq.n	80058e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e6:	f003 0320 	and.w	r3, r3, #32
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00a      	beq.n	8005904 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	430a      	orrs	r2, r1
 8005902:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800590c:	2b00      	cmp	r3, #0
 800590e:	d01a      	beq.n	8005946 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	430a      	orrs	r2, r1
 8005924:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800592a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800592e:	d10a      	bne.n	8005946 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	430a      	orrs	r2, r1
 8005944:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00a      	beq.n	8005968 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	430a      	orrs	r2, r1
 8005966:	605a      	str	r2, [r3, #4]
  }
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b098      	sub	sp, #96	; 0x60
 8005978:	af02      	add	r7, sp, #8
 800597a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005984:	f7fb fcfa 	bl	800137c <HAL_GetTick>
 8005988:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0308 	and.w	r3, r3, #8
 8005994:	2b08      	cmp	r3, #8
 8005996:	d12f      	bne.n	80059f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005998:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059a0:	2200      	movs	r2, #0
 80059a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 f88e 	bl	8005ac8 <UART_WaitOnFlagUntilTimeout>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d022      	beq.n	80059f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ba:	e853 3f00 	ldrex	r3, [r3]
 80059be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059c6:	653b      	str	r3, [r7, #80]	; 0x50
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	461a      	mov	r2, r3
 80059ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059d0:	647b      	str	r3, [r7, #68]	; 0x44
 80059d2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059d8:	e841 2300 	strex	r3, r2, [r1]
 80059dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80059de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1e6      	bne.n	80059b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2220      	movs	r2, #32
 80059e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e063      	b.n	8005ac0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0304 	and.w	r3, r3, #4
 8005a02:	2b04      	cmp	r3, #4
 8005a04:	d149      	bne.n	8005a9a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a0a:	9300      	str	r3, [sp, #0]
 8005a0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 f857 	bl	8005ac8 <UART_WaitOnFlagUntilTimeout>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d03c      	beq.n	8005a9a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	e853 3f00 	ldrex	r3, [r3]
 8005a2c:	623b      	str	r3, [r7, #32]
   return(result);
 8005a2e:	6a3b      	ldr	r3, [r7, #32]
 8005a30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a3e:	633b      	str	r3, [r7, #48]	; 0x30
 8005a40:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a46:	e841 2300 	strex	r3, r2, [r1]
 8005a4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1e6      	bne.n	8005a20 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	3308      	adds	r3, #8
 8005a58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	e853 3f00 	ldrex	r3, [r3]
 8005a60:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f023 0301 	bic.w	r3, r3, #1
 8005a68:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	3308      	adds	r3, #8
 8005a70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a72:	61fa      	str	r2, [r7, #28]
 8005a74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a76:	69b9      	ldr	r1, [r7, #24]
 8005a78:	69fa      	ldr	r2, [r7, #28]
 8005a7a:	e841 2300 	strex	r3, r2, [r1]
 8005a7e:	617b      	str	r3, [r7, #20]
   return(result);
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1e5      	bne.n	8005a52 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2220      	movs	r2, #32
 8005a8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e012      	b.n	8005ac0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2220      	movs	r2, #32
 8005a9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3758      	adds	r7, #88	; 0x58
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	603b      	str	r3, [r7, #0]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ad8:	e049      	b.n	8005b6e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ae0:	d045      	beq.n	8005b6e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ae2:	f7fb fc4b 	bl	800137c <HAL_GetTick>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d302      	bcc.n	8005af8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d101      	bne.n	8005afc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e048      	b.n	8005b8e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0304 	and.w	r3, r3, #4
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d031      	beq.n	8005b6e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	69db      	ldr	r3, [r3, #28]
 8005b10:	f003 0308 	and.w	r3, r3, #8
 8005b14:	2b08      	cmp	r3, #8
 8005b16:	d110      	bne.n	8005b3a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2208      	movs	r2, #8
 8005b1e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f000 f839 	bl	8005b98 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2208      	movs	r2, #8
 8005b2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e029      	b.n	8005b8e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	69db      	ldr	r3, [r3, #28]
 8005b40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b48:	d111      	bne.n	8005b6e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f000 f81f 	bl	8005b98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2220      	movs	r2, #32
 8005b5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e00f      	b.n	8005b8e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	69da      	ldr	r2, [r3, #28]
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	4013      	ands	r3, r2
 8005b78:	68ba      	ldr	r2, [r7, #8]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	bf0c      	ite	eq
 8005b7e:	2301      	moveq	r3, #1
 8005b80:	2300      	movne	r3, #0
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	461a      	mov	r2, r3
 8005b86:	79fb      	ldrb	r3, [r7, #7]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d0a6      	beq.n	8005ada <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
	...

08005b98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b095      	sub	sp, #84	; 0x54
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ba8:	e853 3f00 	ldrex	r3, [r3]
 8005bac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bbe:	643b      	str	r3, [r7, #64]	; 0x40
 8005bc0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bc6:	e841 2300 	strex	r3, r2, [r1]
 8005bca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1e6      	bne.n	8005ba0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	3308      	adds	r3, #8
 8005bd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	e853 3f00 	ldrex	r3, [r3]
 8005be0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005be2:	69fa      	ldr	r2, [r7, #28]
 8005be4:	4b1e      	ldr	r3, [pc, #120]	; (8005c60 <UART_EndRxTransfer+0xc8>)
 8005be6:	4013      	ands	r3, r2
 8005be8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	3308      	adds	r3, #8
 8005bf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bf4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bfa:	e841 2300 	strex	r3, r2, [r1]
 8005bfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1e5      	bne.n	8005bd2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d118      	bne.n	8005c40 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	e853 3f00 	ldrex	r3, [r3]
 8005c1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	f023 0310 	bic.w	r3, r3, #16
 8005c22:	647b      	str	r3, [r7, #68]	; 0x44
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	461a      	mov	r2, r3
 8005c2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c2c:	61bb      	str	r3, [r7, #24]
 8005c2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c30:	6979      	ldr	r1, [r7, #20]
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	e841 2300 	strex	r3, r2, [r1]
 8005c38:	613b      	str	r3, [r7, #16]
   return(result);
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1e6      	bne.n	8005c0e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2220      	movs	r2, #32
 8005c44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005c54:	bf00      	nop
 8005c56:	3754      	adds	r7, #84	; 0x54
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr
 8005c60:	effffffe 	.word	0xeffffffe

08005c64 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d101      	bne.n	8005c7a <HAL_UARTEx_DisableFifoMode+0x16>
 8005c76:	2302      	movs	r3, #2
 8005c78:	e027      	b.n	8005cca <HAL_UARTEx_DisableFifoMode+0x66>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2224      	movs	r2, #36	; 0x24
 8005c86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 0201 	bic.w	r2, r2, #1
 8005ca0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005ca8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2220      	movs	r2, #32
 8005cbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b084      	sub	sp, #16
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
 8005cde:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d101      	bne.n	8005cee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005cea:	2302      	movs	r3, #2
 8005cec:	e02d      	b.n	8005d4a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2224      	movs	r2, #36	; 0x24
 8005cfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 0201 	bic.w	r2, r2, #1
 8005d14:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	430a      	orrs	r2, r1
 8005d28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f850 	bl	8005dd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b084      	sub	sp, #16
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
 8005d5a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d101      	bne.n	8005d6a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005d66:	2302      	movs	r3, #2
 8005d68:	e02d      	b.n	8005dc6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2224      	movs	r2, #36	; 0x24
 8005d76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 0201 	bic.w	r2, r2, #1
 8005d90:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	683a      	ldr	r2, [r7, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f812 	bl	8005dd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2220      	movs	r2, #32
 8005db8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
	...

08005dd0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d108      	bne.n	8005df2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005df0:	e031      	b.n	8005e56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005df2:	2310      	movs	r3, #16
 8005df4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005df6:	2310      	movs	r3, #16
 8005df8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	0e5b      	lsrs	r3, r3, #25
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	f003 0307 	and.w	r3, r3, #7
 8005e08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	0f5b      	lsrs	r3, r3, #29
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	f003 0307 	and.w	r3, r3, #7
 8005e18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e1a:	7bbb      	ldrb	r3, [r7, #14]
 8005e1c:	7b3a      	ldrb	r2, [r7, #12]
 8005e1e:	4911      	ldr	r1, [pc, #68]	; (8005e64 <UARTEx_SetNbDataToProcess+0x94>)
 8005e20:	5c8a      	ldrb	r2, [r1, r2]
 8005e22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005e26:	7b3a      	ldrb	r2, [r7, #12]
 8005e28:	490f      	ldr	r1, [pc, #60]	; (8005e68 <UARTEx_SetNbDataToProcess+0x98>)
 8005e2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e38:	7bfb      	ldrb	r3, [r7, #15]
 8005e3a:	7b7a      	ldrb	r2, [r7, #13]
 8005e3c:	4909      	ldr	r1, [pc, #36]	; (8005e64 <UARTEx_SetNbDataToProcess+0x94>)
 8005e3e:	5c8a      	ldrb	r2, [r1, r2]
 8005e40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005e44:	7b7a      	ldrb	r2, [r7, #13]
 8005e46:	4908      	ldr	r1, [pc, #32]	; (8005e68 <UARTEx_SetNbDataToProcess+0x98>)
 8005e48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005e56:	bf00      	nop
 8005e58:	3714      	adds	r7, #20
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	080068ac 	.word	0x080068ac
 8005e68:	080068b4 	.word	0x080068b4

08005e6c <siprintf>:
 8005e6c:	b40e      	push	{r1, r2, r3}
 8005e6e:	b500      	push	{lr}
 8005e70:	b09c      	sub	sp, #112	; 0x70
 8005e72:	ab1d      	add	r3, sp, #116	; 0x74
 8005e74:	9002      	str	r0, [sp, #8]
 8005e76:	9006      	str	r0, [sp, #24]
 8005e78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e7c:	4809      	ldr	r0, [pc, #36]	; (8005ea4 <siprintf+0x38>)
 8005e7e:	9107      	str	r1, [sp, #28]
 8005e80:	9104      	str	r1, [sp, #16]
 8005e82:	4909      	ldr	r1, [pc, #36]	; (8005ea8 <siprintf+0x3c>)
 8005e84:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e88:	9105      	str	r1, [sp, #20]
 8005e8a:	6800      	ldr	r0, [r0, #0]
 8005e8c:	9301      	str	r3, [sp, #4]
 8005e8e:	a902      	add	r1, sp, #8
 8005e90:	f000 f992 	bl	80061b8 <_svfiprintf_r>
 8005e94:	9b02      	ldr	r3, [sp, #8]
 8005e96:	2200      	movs	r2, #0
 8005e98:	701a      	strb	r2, [r3, #0]
 8005e9a:	b01c      	add	sp, #112	; 0x70
 8005e9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ea0:	b003      	add	sp, #12
 8005ea2:	4770      	bx	lr
 8005ea4:	2400005c 	.word	0x2400005c
 8005ea8:	ffff0208 	.word	0xffff0208

08005eac <memset>:
 8005eac:	4402      	add	r2, r0
 8005eae:	4603      	mov	r3, r0
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d100      	bne.n	8005eb6 <memset+0xa>
 8005eb4:	4770      	bx	lr
 8005eb6:	f803 1b01 	strb.w	r1, [r3], #1
 8005eba:	e7f9      	b.n	8005eb0 <memset+0x4>

08005ebc <__errno>:
 8005ebc:	4b01      	ldr	r3, [pc, #4]	; (8005ec4 <__errno+0x8>)
 8005ebe:	6818      	ldr	r0, [r3, #0]
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	2400005c 	.word	0x2400005c

08005ec8 <__libc_init_array>:
 8005ec8:	b570      	push	{r4, r5, r6, lr}
 8005eca:	4d0d      	ldr	r5, [pc, #52]	; (8005f00 <__libc_init_array+0x38>)
 8005ecc:	4c0d      	ldr	r4, [pc, #52]	; (8005f04 <__libc_init_array+0x3c>)
 8005ece:	1b64      	subs	r4, r4, r5
 8005ed0:	10a4      	asrs	r4, r4, #2
 8005ed2:	2600      	movs	r6, #0
 8005ed4:	42a6      	cmp	r6, r4
 8005ed6:	d109      	bne.n	8005eec <__libc_init_array+0x24>
 8005ed8:	4d0b      	ldr	r5, [pc, #44]	; (8005f08 <__libc_init_array+0x40>)
 8005eda:	4c0c      	ldr	r4, [pc, #48]	; (8005f0c <__libc_init_array+0x44>)
 8005edc:	f000 fc6a 	bl	80067b4 <_init>
 8005ee0:	1b64      	subs	r4, r4, r5
 8005ee2:	10a4      	asrs	r4, r4, #2
 8005ee4:	2600      	movs	r6, #0
 8005ee6:	42a6      	cmp	r6, r4
 8005ee8:	d105      	bne.n	8005ef6 <__libc_init_array+0x2e>
 8005eea:	bd70      	pop	{r4, r5, r6, pc}
 8005eec:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ef0:	4798      	blx	r3
 8005ef2:	3601      	adds	r6, #1
 8005ef4:	e7ee      	b.n	8005ed4 <__libc_init_array+0xc>
 8005ef6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005efa:	4798      	blx	r3
 8005efc:	3601      	adds	r6, #1
 8005efe:	e7f2      	b.n	8005ee6 <__libc_init_array+0x1e>
 8005f00:	080068f8 	.word	0x080068f8
 8005f04:	080068f8 	.word	0x080068f8
 8005f08:	080068f8 	.word	0x080068f8
 8005f0c:	080068fc 	.word	0x080068fc

08005f10 <__retarget_lock_acquire_recursive>:
 8005f10:	4770      	bx	lr

08005f12 <__retarget_lock_release_recursive>:
 8005f12:	4770      	bx	lr

08005f14 <_free_r>:
 8005f14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f16:	2900      	cmp	r1, #0
 8005f18:	d044      	beq.n	8005fa4 <_free_r+0x90>
 8005f1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f1e:	9001      	str	r0, [sp, #4]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f1a1 0404 	sub.w	r4, r1, #4
 8005f26:	bfb8      	it	lt
 8005f28:	18e4      	addlt	r4, r4, r3
 8005f2a:	f000 f8df 	bl	80060ec <__malloc_lock>
 8005f2e:	4a1e      	ldr	r2, [pc, #120]	; (8005fa8 <_free_r+0x94>)
 8005f30:	9801      	ldr	r0, [sp, #4]
 8005f32:	6813      	ldr	r3, [r2, #0]
 8005f34:	b933      	cbnz	r3, 8005f44 <_free_r+0x30>
 8005f36:	6063      	str	r3, [r4, #4]
 8005f38:	6014      	str	r4, [r2, #0]
 8005f3a:	b003      	add	sp, #12
 8005f3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f40:	f000 b8da 	b.w	80060f8 <__malloc_unlock>
 8005f44:	42a3      	cmp	r3, r4
 8005f46:	d908      	bls.n	8005f5a <_free_r+0x46>
 8005f48:	6825      	ldr	r5, [r4, #0]
 8005f4a:	1961      	adds	r1, r4, r5
 8005f4c:	428b      	cmp	r3, r1
 8005f4e:	bf01      	itttt	eq
 8005f50:	6819      	ldreq	r1, [r3, #0]
 8005f52:	685b      	ldreq	r3, [r3, #4]
 8005f54:	1949      	addeq	r1, r1, r5
 8005f56:	6021      	streq	r1, [r4, #0]
 8005f58:	e7ed      	b.n	8005f36 <_free_r+0x22>
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	b10b      	cbz	r3, 8005f64 <_free_r+0x50>
 8005f60:	42a3      	cmp	r3, r4
 8005f62:	d9fa      	bls.n	8005f5a <_free_r+0x46>
 8005f64:	6811      	ldr	r1, [r2, #0]
 8005f66:	1855      	adds	r5, r2, r1
 8005f68:	42a5      	cmp	r5, r4
 8005f6a:	d10b      	bne.n	8005f84 <_free_r+0x70>
 8005f6c:	6824      	ldr	r4, [r4, #0]
 8005f6e:	4421      	add	r1, r4
 8005f70:	1854      	adds	r4, r2, r1
 8005f72:	42a3      	cmp	r3, r4
 8005f74:	6011      	str	r1, [r2, #0]
 8005f76:	d1e0      	bne.n	8005f3a <_free_r+0x26>
 8005f78:	681c      	ldr	r4, [r3, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	6053      	str	r3, [r2, #4]
 8005f7e:	440c      	add	r4, r1
 8005f80:	6014      	str	r4, [r2, #0]
 8005f82:	e7da      	b.n	8005f3a <_free_r+0x26>
 8005f84:	d902      	bls.n	8005f8c <_free_r+0x78>
 8005f86:	230c      	movs	r3, #12
 8005f88:	6003      	str	r3, [r0, #0]
 8005f8a:	e7d6      	b.n	8005f3a <_free_r+0x26>
 8005f8c:	6825      	ldr	r5, [r4, #0]
 8005f8e:	1961      	adds	r1, r4, r5
 8005f90:	428b      	cmp	r3, r1
 8005f92:	bf04      	itt	eq
 8005f94:	6819      	ldreq	r1, [r3, #0]
 8005f96:	685b      	ldreq	r3, [r3, #4]
 8005f98:	6063      	str	r3, [r4, #4]
 8005f9a:	bf04      	itt	eq
 8005f9c:	1949      	addeq	r1, r1, r5
 8005f9e:	6021      	streq	r1, [r4, #0]
 8005fa0:	6054      	str	r4, [r2, #4]
 8005fa2:	e7ca      	b.n	8005f3a <_free_r+0x26>
 8005fa4:	b003      	add	sp, #12
 8005fa6:	bd30      	pop	{r4, r5, pc}
 8005fa8:	24000300 	.word	0x24000300

08005fac <sbrk_aligned>:
 8005fac:	b570      	push	{r4, r5, r6, lr}
 8005fae:	4e0e      	ldr	r6, [pc, #56]	; (8005fe8 <sbrk_aligned+0x3c>)
 8005fb0:	460c      	mov	r4, r1
 8005fb2:	6831      	ldr	r1, [r6, #0]
 8005fb4:	4605      	mov	r5, r0
 8005fb6:	b911      	cbnz	r1, 8005fbe <sbrk_aligned+0x12>
 8005fb8:	f000 fba6 	bl	8006708 <_sbrk_r>
 8005fbc:	6030      	str	r0, [r6, #0]
 8005fbe:	4621      	mov	r1, r4
 8005fc0:	4628      	mov	r0, r5
 8005fc2:	f000 fba1 	bl	8006708 <_sbrk_r>
 8005fc6:	1c43      	adds	r3, r0, #1
 8005fc8:	d00a      	beq.n	8005fe0 <sbrk_aligned+0x34>
 8005fca:	1cc4      	adds	r4, r0, #3
 8005fcc:	f024 0403 	bic.w	r4, r4, #3
 8005fd0:	42a0      	cmp	r0, r4
 8005fd2:	d007      	beq.n	8005fe4 <sbrk_aligned+0x38>
 8005fd4:	1a21      	subs	r1, r4, r0
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	f000 fb96 	bl	8006708 <_sbrk_r>
 8005fdc:	3001      	adds	r0, #1
 8005fde:	d101      	bne.n	8005fe4 <sbrk_aligned+0x38>
 8005fe0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	bd70      	pop	{r4, r5, r6, pc}
 8005fe8:	24000304 	.word	0x24000304

08005fec <_malloc_r>:
 8005fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ff0:	1ccd      	adds	r5, r1, #3
 8005ff2:	f025 0503 	bic.w	r5, r5, #3
 8005ff6:	3508      	adds	r5, #8
 8005ff8:	2d0c      	cmp	r5, #12
 8005ffa:	bf38      	it	cc
 8005ffc:	250c      	movcc	r5, #12
 8005ffe:	2d00      	cmp	r5, #0
 8006000:	4607      	mov	r7, r0
 8006002:	db01      	blt.n	8006008 <_malloc_r+0x1c>
 8006004:	42a9      	cmp	r1, r5
 8006006:	d905      	bls.n	8006014 <_malloc_r+0x28>
 8006008:	230c      	movs	r3, #12
 800600a:	603b      	str	r3, [r7, #0]
 800600c:	2600      	movs	r6, #0
 800600e:	4630      	mov	r0, r6
 8006010:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006014:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80060e8 <_malloc_r+0xfc>
 8006018:	f000 f868 	bl	80060ec <__malloc_lock>
 800601c:	f8d8 3000 	ldr.w	r3, [r8]
 8006020:	461c      	mov	r4, r3
 8006022:	bb5c      	cbnz	r4, 800607c <_malloc_r+0x90>
 8006024:	4629      	mov	r1, r5
 8006026:	4638      	mov	r0, r7
 8006028:	f7ff ffc0 	bl	8005fac <sbrk_aligned>
 800602c:	1c43      	adds	r3, r0, #1
 800602e:	4604      	mov	r4, r0
 8006030:	d155      	bne.n	80060de <_malloc_r+0xf2>
 8006032:	f8d8 4000 	ldr.w	r4, [r8]
 8006036:	4626      	mov	r6, r4
 8006038:	2e00      	cmp	r6, #0
 800603a:	d145      	bne.n	80060c8 <_malloc_r+0xdc>
 800603c:	2c00      	cmp	r4, #0
 800603e:	d048      	beq.n	80060d2 <_malloc_r+0xe6>
 8006040:	6823      	ldr	r3, [r4, #0]
 8006042:	4631      	mov	r1, r6
 8006044:	4638      	mov	r0, r7
 8006046:	eb04 0903 	add.w	r9, r4, r3
 800604a:	f000 fb5d 	bl	8006708 <_sbrk_r>
 800604e:	4581      	cmp	r9, r0
 8006050:	d13f      	bne.n	80060d2 <_malloc_r+0xe6>
 8006052:	6821      	ldr	r1, [r4, #0]
 8006054:	1a6d      	subs	r5, r5, r1
 8006056:	4629      	mov	r1, r5
 8006058:	4638      	mov	r0, r7
 800605a:	f7ff ffa7 	bl	8005fac <sbrk_aligned>
 800605e:	3001      	adds	r0, #1
 8006060:	d037      	beq.n	80060d2 <_malloc_r+0xe6>
 8006062:	6823      	ldr	r3, [r4, #0]
 8006064:	442b      	add	r3, r5
 8006066:	6023      	str	r3, [r4, #0]
 8006068:	f8d8 3000 	ldr.w	r3, [r8]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d038      	beq.n	80060e2 <_malloc_r+0xf6>
 8006070:	685a      	ldr	r2, [r3, #4]
 8006072:	42a2      	cmp	r2, r4
 8006074:	d12b      	bne.n	80060ce <_malloc_r+0xe2>
 8006076:	2200      	movs	r2, #0
 8006078:	605a      	str	r2, [r3, #4]
 800607a:	e00f      	b.n	800609c <_malloc_r+0xb0>
 800607c:	6822      	ldr	r2, [r4, #0]
 800607e:	1b52      	subs	r2, r2, r5
 8006080:	d41f      	bmi.n	80060c2 <_malloc_r+0xd6>
 8006082:	2a0b      	cmp	r2, #11
 8006084:	d917      	bls.n	80060b6 <_malloc_r+0xca>
 8006086:	1961      	adds	r1, r4, r5
 8006088:	42a3      	cmp	r3, r4
 800608a:	6025      	str	r5, [r4, #0]
 800608c:	bf18      	it	ne
 800608e:	6059      	strne	r1, [r3, #4]
 8006090:	6863      	ldr	r3, [r4, #4]
 8006092:	bf08      	it	eq
 8006094:	f8c8 1000 	streq.w	r1, [r8]
 8006098:	5162      	str	r2, [r4, r5]
 800609a:	604b      	str	r3, [r1, #4]
 800609c:	4638      	mov	r0, r7
 800609e:	f104 060b 	add.w	r6, r4, #11
 80060a2:	f000 f829 	bl	80060f8 <__malloc_unlock>
 80060a6:	f026 0607 	bic.w	r6, r6, #7
 80060aa:	1d23      	adds	r3, r4, #4
 80060ac:	1af2      	subs	r2, r6, r3
 80060ae:	d0ae      	beq.n	800600e <_malloc_r+0x22>
 80060b0:	1b9b      	subs	r3, r3, r6
 80060b2:	50a3      	str	r3, [r4, r2]
 80060b4:	e7ab      	b.n	800600e <_malloc_r+0x22>
 80060b6:	42a3      	cmp	r3, r4
 80060b8:	6862      	ldr	r2, [r4, #4]
 80060ba:	d1dd      	bne.n	8006078 <_malloc_r+0x8c>
 80060bc:	f8c8 2000 	str.w	r2, [r8]
 80060c0:	e7ec      	b.n	800609c <_malloc_r+0xb0>
 80060c2:	4623      	mov	r3, r4
 80060c4:	6864      	ldr	r4, [r4, #4]
 80060c6:	e7ac      	b.n	8006022 <_malloc_r+0x36>
 80060c8:	4634      	mov	r4, r6
 80060ca:	6876      	ldr	r6, [r6, #4]
 80060cc:	e7b4      	b.n	8006038 <_malloc_r+0x4c>
 80060ce:	4613      	mov	r3, r2
 80060d0:	e7cc      	b.n	800606c <_malloc_r+0x80>
 80060d2:	230c      	movs	r3, #12
 80060d4:	603b      	str	r3, [r7, #0]
 80060d6:	4638      	mov	r0, r7
 80060d8:	f000 f80e 	bl	80060f8 <__malloc_unlock>
 80060dc:	e797      	b.n	800600e <_malloc_r+0x22>
 80060de:	6025      	str	r5, [r4, #0]
 80060e0:	e7dc      	b.n	800609c <_malloc_r+0xb0>
 80060e2:	605b      	str	r3, [r3, #4]
 80060e4:	deff      	udf	#255	; 0xff
 80060e6:	bf00      	nop
 80060e8:	24000300 	.word	0x24000300

080060ec <__malloc_lock>:
 80060ec:	4801      	ldr	r0, [pc, #4]	; (80060f4 <__malloc_lock+0x8>)
 80060ee:	f7ff bf0f 	b.w	8005f10 <__retarget_lock_acquire_recursive>
 80060f2:	bf00      	nop
 80060f4:	240002fc 	.word	0x240002fc

080060f8 <__malloc_unlock>:
 80060f8:	4801      	ldr	r0, [pc, #4]	; (8006100 <__malloc_unlock+0x8>)
 80060fa:	f7ff bf0a 	b.w	8005f12 <__retarget_lock_release_recursive>
 80060fe:	bf00      	nop
 8006100:	240002fc 	.word	0x240002fc

08006104 <__ssputs_r>:
 8006104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006108:	688e      	ldr	r6, [r1, #8]
 800610a:	461f      	mov	r7, r3
 800610c:	42be      	cmp	r6, r7
 800610e:	680b      	ldr	r3, [r1, #0]
 8006110:	4682      	mov	sl, r0
 8006112:	460c      	mov	r4, r1
 8006114:	4690      	mov	r8, r2
 8006116:	d82c      	bhi.n	8006172 <__ssputs_r+0x6e>
 8006118:	898a      	ldrh	r2, [r1, #12]
 800611a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800611e:	d026      	beq.n	800616e <__ssputs_r+0x6a>
 8006120:	6965      	ldr	r5, [r4, #20]
 8006122:	6909      	ldr	r1, [r1, #16]
 8006124:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006128:	eba3 0901 	sub.w	r9, r3, r1
 800612c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006130:	1c7b      	adds	r3, r7, #1
 8006132:	444b      	add	r3, r9
 8006134:	106d      	asrs	r5, r5, #1
 8006136:	429d      	cmp	r5, r3
 8006138:	bf38      	it	cc
 800613a:	461d      	movcc	r5, r3
 800613c:	0553      	lsls	r3, r2, #21
 800613e:	d527      	bpl.n	8006190 <__ssputs_r+0x8c>
 8006140:	4629      	mov	r1, r5
 8006142:	f7ff ff53 	bl	8005fec <_malloc_r>
 8006146:	4606      	mov	r6, r0
 8006148:	b360      	cbz	r0, 80061a4 <__ssputs_r+0xa0>
 800614a:	6921      	ldr	r1, [r4, #16]
 800614c:	464a      	mov	r2, r9
 800614e:	f000 faeb 	bl	8006728 <memcpy>
 8006152:	89a3      	ldrh	r3, [r4, #12]
 8006154:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800615c:	81a3      	strh	r3, [r4, #12]
 800615e:	6126      	str	r6, [r4, #16]
 8006160:	6165      	str	r5, [r4, #20]
 8006162:	444e      	add	r6, r9
 8006164:	eba5 0509 	sub.w	r5, r5, r9
 8006168:	6026      	str	r6, [r4, #0]
 800616a:	60a5      	str	r5, [r4, #8]
 800616c:	463e      	mov	r6, r7
 800616e:	42be      	cmp	r6, r7
 8006170:	d900      	bls.n	8006174 <__ssputs_r+0x70>
 8006172:	463e      	mov	r6, r7
 8006174:	6820      	ldr	r0, [r4, #0]
 8006176:	4632      	mov	r2, r6
 8006178:	4641      	mov	r1, r8
 800617a:	f000 faab 	bl	80066d4 <memmove>
 800617e:	68a3      	ldr	r3, [r4, #8]
 8006180:	1b9b      	subs	r3, r3, r6
 8006182:	60a3      	str	r3, [r4, #8]
 8006184:	6823      	ldr	r3, [r4, #0]
 8006186:	4433      	add	r3, r6
 8006188:	6023      	str	r3, [r4, #0]
 800618a:	2000      	movs	r0, #0
 800618c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006190:	462a      	mov	r2, r5
 8006192:	f000 fad7 	bl	8006744 <_realloc_r>
 8006196:	4606      	mov	r6, r0
 8006198:	2800      	cmp	r0, #0
 800619a:	d1e0      	bne.n	800615e <__ssputs_r+0x5a>
 800619c:	6921      	ldr	r1, [r4, #16]
 800619e:	4650      	mov	r0, sl
 80061a0:	f7ff feb8 	bl	8005f14 <_free_r>
 80061a4:	230c      	movs	r3, #12
 80061a6:	f8ca 3000 	str.w	r3, [sl]
 80061aa:	89a3      	ldrh	r3, [r4, #12]
 80061ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061b0:	81a3      	strh	r3, [r4, #12]
 80061b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061b6:	e7e9      	b.n	800618c <__ssputs_r+0x88>

080061b8 <_svfiprintf_r>:
 80061b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061bc:	4698      	mov	r8, r3
 80061be:	898b      	ldrh	r3, [r1, #12]
 80061c0:	061b      	lsls	r3, r3, #24
 80061c2:	b09d      	sub	sp, #116	; 0x74
 80061c4:	4607      	mov	r7, r0
 80061c6:	460d      	mov	r5, r1
 80061c8:	4614      	mov	r4, r2
 80061ca:	d50e      	bpl.n	80061ea <_svfiprintf_r+0x32>
 80061cc:	690b      	ldr	r3, [r1, #16]
 80061ce:	b963      	cbnz	r3, 80061ea <_svfiprintf_r+0x32>
 80061d0:	2140      	movs	r1, #64	; 0x40
 80061d2:	f7ff ff0b 	bl	8005fec <_malloc_r>
 80061d6:	6028      	str	r0, [r5, #0]
 80061d8:	6128      	str	r0, [r5, #16]
 80061da:	b920      	cbnz	r0, 80061e6 <_svfiprintf_r+0x2e>
 80061dc:	230c      	movs	r3, #12
 80061de:	603b      	str	r3, [r7, #0]
 80061e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061e4:	e0d0      	b.n	8006388 <_svfiprintf_r+0x1d0>
 80061e6:	2340      	movs	r3, #64	; 0x40
 80061e8:	616b      	str	r3, [r5, #20]
 80061ea:	2300      	movs	r3, #0
 80061ec:	9309      	str	r3, [sp, #36]	; 0x24
 80061ee:	2320      	movs	r3, #32
 80061f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80061f8:	2330      	movs	r3, #48	; 0x30
 80061fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80063a0 <_svfiprintf_r+0x1e8>
 80061fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006202:	f04f 0901 	mov.w	r9, #1
 8006206:	4623      	mov	r3, r4
 8006208:	469a      	mov	sl, r3
 800620a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800620e:	b10a      	cbz	r2, 8006214 <_svfiprintf_r+0x5c>
 8006210:	2a25      	cmp	r2, #37	; 0x25
 8006212:	d1f9      	bne.n	8006208 <_svfiprintf_r+0x50>
 8006214:	ebba 0b04 	subs.w	fp, sl, r4
 8006218:	d00b      	beq.n	8006232 <_svfiprintf_r+0x7a>
 800621a:	465b      	mov	r3, fp
 800621c:	4622      	mov	r2, r4
 800621e:	4629      	mov	r1, r5
 8006220:	4638      	mov	r0, r7
 8006222:	f7ff ff6f 	bl	8006104 <__ssputs_r>
 8006226:	3001      	adds	r0, #1
 8006228:	f000 80a9 	beq.w	800637e <_svfiprintf_r+0x1c6>
 800622c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800622e:	445a      	add	r2, fp
 8006230:	9209      	str	r2, [sp, #36]	; 0x24
 8006232:	f89a 3000 	ldrb.w	r3, [sl]
 8006236:	2b00      	cmp	r3, #0
 8006238:	f000 80a1 	beq.w	800637e <_svfiprintf_r+0x1c6>
 800623c:	2300      	movs	r3, #0
 800623e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006242:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006246:	f10a 0a01 	add.w	sl, sl, #1
 800624a:	9304      	str	r3, [sp, #16]
 800624c:	9307      	str	r3, [sp, #28]
 800624e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006252:	931a      	str	r3, [sp, #104]	; 0x68
 8006254:	4654      	mov	r4, sl
 8006256:	2205      	movs	r2, #5
 8006258:	f814 1b01 	ldrb.w	r1, [r4], #1
 800625c:	4850      	ldr	r0, [pc, #320]	; (80063a0 <_svfiprintf_r+0x1e8>)
 800625e:	f7fa f83f 	bl	80002e0 <memchr>
 8006262:	9a04      	ldr	r2, [sp, #16]
 8006264:	b9d8      	cbnz	r0, 800629e <_svfiprintf_r+0xe6>
 8006266:	06d0      	lsls	r0, r2, #27
 8006268:	bf44      	itt	mi
 800626a:	2320      	movmi	r3, #32
 800626c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006270:	0711      	lsls	r1, r2, #28
 8006272:	bf44      	itt	mi
 8006274:	232b      	movmi	r3, #43	; 0x2b
 8006276:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800627a:	f89a 3000 	ldrb.w	r3, [sl]
 800627e:	2b2a      	cmp	r3, #42	; 0x2a
 8006280:	d015      	beq.n	80062ae <_svfiprintf_r+0xf6>
 8006282:	9a07      	ldr	r2, [sp, #28]
 8006284:	4654      	mov	r4, sl
 8006286:	2000      	movs	r0, #0
 8006288:	f04f 0c0a 	mov.w	ip, #10
 800628c:	4621      	mov	r1, r4
 800628e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006292:	3b30      	subs	r3, #48	; 0x30
 8006294:	2b09      	cmp	r3, #9
 8006296:	d94d      	bls.n	8006334 <_svfiprintf_r+0x17c>
 8006298:	b1b0      	cbz	r0, 80062c8 <_svfiprintf_r+0x110>
 800629a:	9207      	str	r2, [sp, #28]
 800629c:	e014      	b.n	80062c8 <_svfiprintf_r+0x110>
 800629e:	eba0 0308 	sub.w	r3, r0, r8
 80062a2:	fa09 f303 	lsl.w	r3, r9, r3
 80062a6:	4313      	orrs	r3, r2
 80062a8:	9304      	str	r3, [sp, #16]
 80062aa:	46a2      	mov	sl, r4
 80062ac:	e7d2      	b.n	8006254 <_svfiprintf_r+0x9c>
 80062ae:	9b03      	ldr	r3, [sp, #12]
 80062b0:	1d19      	adds	r1, r3, #4
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	9103      	str	r1, [sp, #12]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	bfbb      	ittet	lt
 80062ba:	425b      	neglt	r3, r3
 80062bc:	f042 0202 	orrlt.w	r2, r2, #2
 80062c0:	9307      	strge	r3, [sp, #28]
 80062c2:	9307      	strlt	r3, [sp, #28]
 80062c4:	bfb8      	it	lt
 80062c6:	9204      	strlt	r2, [sp, #16]
 80062c8:	7823      	ldrb	r3, [r4, #0]
 80062ca:	2b2e      	cmp	r3, #46	; 0x2e
 80062cc:	d10c      	bne.n	80062e8 <_svfiprintf_r+0x130>
 80062ce:	7863      	ldrb	r3, [r4, #1]
 80062d0:	2b2a      	cmp	r3, #42	; 0x2a
 80062d2:	d134      	bne.n	800633e <_svfiprintf_r+0x186>
 80062d4:	9b03      	ldr	r3, [sp, #12]
 80062d6:	1d1a      	adds	r2, r3, #4
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	9203      	str	r2, [sp, #12]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	bfb8      	it	lt
 80062e0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80062e4:	3402      	adds	r4, #2
 80062e6:	9305      	str	r3, [sp, #20]
 80062e8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80063b0 <_svfiprintf_r+0x1f8>
 80062ec:	7821      	ldrb	r1, [r4, #0]
 80062ee:	2203      	movs	r2, #3
 80062f0:	4650      	mov	r0, sl
 80062f2:	f7f9 fff5 	bl	80002e0 <memchr>
 80062f6:	b138      	cbz	r0, 8006308 <_svfiprintf_r+0x150>
 80062f8:	9b04      	ldr	r3, [sp, #16]
 80062fa:	eba0 000a 	sub.w	r0, r0, sl
 80062fe:	2240      	movs	r2, #64	; 0x40
 8006300:	4082      	lsls	r2, r0
 8006302:	4313      	orrs	r3, r2
 8006304:	3401      	adds	r4, #1
 8006306:	9304      	str	r3, [sp, #16]
 8006308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800630c:	4825      	ldr	r0, [pc, #148]	; (80063a4 <_svfiprintf_r+0x1ec>)
 800630e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006312:	2206      	movs	r2, #6
 8006314:	f7f9 ffe4 	bl	80002e0 <memchr>
 8006318:	2800      	cmp	r0, #0
 800631a:	d038      	beq.n	800638e <_svfiprintf_r+0x1d6>
 800631c:	4b22      	ldr	r3, [pc, #136]	; (80063a8 <_svfiprintf_r+0x1f0>)
 800631e:	bb1b      	cbnz	r3, 8006368 <_svfiprintf_r+0x1b0>
 8006320:	9b03      	ldr	r3, [sp, #12]
 8006322:	3307      	adds	r3, #7
 8006324:	f023 0307 	bic.w	r3, r3, #7
 8006328:	3308      	adds	r3, #8
 800632a:	9303      	str	r3, [sp, #12]
 800632c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800632e:	4433      	add	r3, r6
 8006330:	9309      	str	r3, [sp, #36]	; 0x24
 8006332:	e768      	b.n	8006206 <_svfiprintf_r+0x4e>
 8006334:	fb0c 3202 	mla	r2, ip, r2, r3
 8006338:	460c      	mov	r4, r1
 800633a:	2001      	movs	r0, #1
 800633c:	e7a6      	b.n	800628c <_svfiprintf_r+0xd4>
 800633e:	2300      	movs	r3, #0
 8006340:	3401      	adds	r4, #1
 8006342:	9305      	str	r3, [sp, #20]
 8006344:	4619      	mov	r1, r3
 8006346:	f04f 0c0a 	mov.w	ip, #10
 800634a:	4620      	mov	r0, r4
 800634c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006350:	3a30      	subs	r2, #48	; 0x30
 8006352:	2a09      	cmp	r2, #9
 8006354:	d903      	bls.n	800635e <_svfiprintf_r+0x1a6>
 8006356:	2b00      	cmp	r3, #0
 8006358:	d0c6      	beq.n	80062e8 <_svfiprintf_r+0x130>
 800635a:	9105      	str	r1, [sp, #20]
 800635c:	e7c4      	b.n	80062e8 <_svfiprintf_r+0x130>
 800635e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006362:	4604      	mov	r4, r0
 8006364:	2301      	movs	r3, #1
 8006366:	e7f0      	b.n	800634a <_svfiprintf_r+0x192>
 8006368:	ab03      	add	r3, sp, #12
 800636a:	9300      	str	r3, [sp, #0]
 800636c:	462a      	mov	r2, r5
 800636e:	4b0f      	ldr	r3, [pc, #60]	; (80063ac <_svfiprintf_r+0x1f4>)
 8006370:	a904      	add	r1, sp, #16
 8006372:	4638      	mov	r0, r7
 8006374:	f3af 8000 	nop.w
 8006378:	1c42      	adds	r2, r0, #1
 800637a:	4606      	mov	r6, r0
 800637c:	d1d6      	bne.n	800632c <_svfiprintf_r+0x174>
 800637e:	89ab      	ldrh	r3, [r5, #12]
 8006380:	065b      	lsls	r3, r3, #25
 8006382:	f53f af2d 	bmi.w	80061e0 <_svfiprintf_r+0x28>
 8006386:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006388:	b01d      	add	sp, #116	; 0x74
 800638a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800638e:	ab03      	add	r3, sp, #12
 8006390:	9300      	str	r3, [sp, #0]
 8006392:	462a      	mov	r2, r5
 8006394:	4b05      	ldr	r3, [pc, #20]	; (80063ac <_svfiprintf_r+0x1f4>)
 8006396:	a904      	add	r1, sp, #16
 8006398:	4638      	mov	r0, r7
 800639a:	f000 f879 	bl	8006490 <_printf_i>
 800639e:	e7eb      	b.n	8006378 <_svfiprintf_r+0x1c0>
 80063a0:	080068bc 	.word	0x080068bc
 80063a4:	080068c6 	.word	0x080068c6
 80063a8:	00000000 	.word	0x00000000
 80063ac:	08006105 	.word	0x08006105
 80063b0:	080068c2 	.word	0x080068c2

080063b4 <_printf_common>:
 80063b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063b8:	4616      	mov	r6, r2
 80063ba:	4699      	mov	r9, r3
 80063bc:	688a      	ldr	r2, [r1, #8]
 80063be:	690b      	ldr	r3, [r1, #16]
 80063c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063c4:	4293      	cmp	r3, r2
 80063c6:	bfb8      	it	lt
 80063c8:	4613      	movlt	r3, r2
 80063ca:	6033      	str	r3, [r6, #0]
 80063cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063d0:	4607      	mov	r7, r0
 80063d2:	460c      	mov	r4, r1
 80063d4:	b10a      	cbz	r2, 80063da <_printf_common+0x26>
 80063d6:	3301      	adds	r3, #1
 80063d8:	6033      	str	r3, [r6, #0]
 80063da:	6823      	ldr	r3, [r4, #0]
 80063dc:	0699      	lsls	r1, r3, #26
 80063de:	bf42      	ittt	mi
 80063e0:	6833      	ldrmi	r3, [r6, #0]
 80063e2:	3302      	addmi	r3, #2
 80063e4:	6033      	strmi	r3, [r6, #0]
 80063e6:	6825      	ldr	r5, [r4, #0]
 80063e8:	f015 0506 	ands.w	r5, r5, #6
 80063ec:	d106      	bne.n	80063fc <_printf_common+0x48>
 80063ee:	f104 0a19 	add.w	sl, r4, #25
 80063f2:	68e3      	ldr	r3, [r4, #12]
 80063f4:	6832      	ldr	r2, [r6, #0]
 80063f6:	1a9b      	subs	r3, r3, r2
 80063f8:	42ab      	cmp	r3, r5
 80063fa:	dc26      	bgt.n	800644a <_printf_common+0x96>
 80063fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006400:	1e13      	subs	r3, r2, #0
 8006402:	6822      	ldr	r2, [r4, #0]
 8006404:	bf18      	it	ne
 8006406:	2301      	movne	r3, #1
 8006408:	0692      	lsls	r2, r2, #26
 800640a:	d42b      	bmi.n	8006464 <_printf_common+0xb0>
 800640c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006410:	4649      	mov	r1, r9
 8006412:	4638      	mov	r0, r7
 8006414:	47c0      	blx	r8
 8006416:	3001      	adds	r0, #1
 8006418:	d01e      	beq.n	8006458 <_printf_common+0xa4>
 800641a:	6823      	ldr	r3, [r4, #0]
 800641c:	6922      	ldr	r2, [r4, #16]
 800641e:	f003 0306 	and.w	r3, r3, #6
 8006422:	2b04      	cmp	r3, #4
 8006424:	bf02      	ittt	eq
 8006426:	68e5      	ldreq	r5, [r4, #12]
 8006428:	6833      	ldreq	r3, [r6, #0]
 800642a:	1aed      	subeq	r5, r5, r3
 800642c:	68a3      	ldr	r3, [r4, #8]
 800642e:	bf0c      	ite	eq
 8006430:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006434:	2500      	movne	r5, #0
 8006436:	4293      	cmp	r3, r2
 8006438:	bfc4      	itt	gt
 800643a:	1a9b      	subgt	r3, r3, r2
 800643c:	18ed      	addgt	r5, r5, r3
 800643e:	2600      	movs	r6, #0
 8006440:	341a      	adds	r4, #26
 8006442:	42b5      	cmp	r5, r6
 8006444:	d11a      	bne.n	800647c <_printf_common+0xc8>
 8006446:	2000      	movs	r0, #0
 8006448:	e008      	b.n	800645c <_printf_common+0xa8>
 800644a:	2301      	movs	r3, #1
 800644c:	4652      	mov	r2, sl
 800644e:	4649      	mov	r1, r9
 8006450:	4638      	mov	r0, r7
 8006452:	47c0      	blx	r8
 8006454:	3001      	adds	r0, #1
 8006456:	d103      	bne.n	8006460 <_printf_common+0xac>
 8006458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800645c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006460:	3501      	adds	r5, #1
 8006462:	e7c6      	b.n	80063f2 <_printf_common+0x3e>
 8006464:	18e1      	adds	r1, r4, r3
 8006466:	1c5a      	adds	r2, r3, #1
 8006468:	2030      	movs	r0, #48	; 0x30
 800646a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800646e:	4422      	add	r2, r4
 8006470:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006474:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006478:	3302      	adds	r3, #2
 800647a:	e7c7      	b.n	800640c <_printf_common+0x58>
 800647c:	2301      	movs	r3, #1
 800647e:	4622      	mov	r2, r4
 8006480:	4649      	mov	r1, r9
 8006482:	4638      	mov	r0, r7
 8006484:	47c0      	blx	r8
 8006486:	3001      	adds	r0, #1
 8006488:	d0e6      	beq.n	8006458 <_printf_common+0xa4>
 800648a:	3601      	adds	r6, #1
 800648c:	e7d9      	b.n	8006442 <_printf_common+0x8e>
	...

08006490 <_printf_i>:
 8006490:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006494:	7e0f      	ldrb	r7, [r1, #24]
 8006496:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006498:	2f78      	cmp	r7, #120	; 0x78
 800649a:	4691      	mov	r9, r2
 800649c:	4680      	mov	r8, r0
 800649e:	460c      	mov	r4, r1
 80064a0:	469a      	mov	sl, r3
 80064a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80064a6:	d807      	bhi.n	80064b8 <_printf_i+0x28>
 80064a8:	2f62      	cmp	r7, #98	; 0x62
 80064aa:	d80a      	bhi.n	80064c2 <_printf_i+0x32>
 80064ac:	2f00      	cmp	r7, #0
 80064ae:	f000 80d4 	beq.w	800665a <_printf_i+0x1ca>
 80064b2:	2f58      	cmp	r7, #88	; 0x58
 80064b4:	f000 80c0 	beq.w	8006638 <_printf_i+0x1a8>
 80064b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064c0:	e03a      	b.n	8006538 <_printf_i+0xa8>
 80064c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064c6:	2b15      	cmp	r3, #21
 80064c8:	d8f6      	bhi.n	80064b8 <_printf_i+0x28>
 80064ca:	a101      	add	r1, pc, #4	; (adr r1, 80064d0 <_printf_i+0x40>)
 80064cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064d0:	08006529 	.word	0x08006529
 80064d4:	0800653d 	.word	0x0800653d
 80064d8:	080064b9 	.word	0x080064b9
 80064dc:	080064b9 	.word	0x080064b9
 80064e0:	080064b9 	.word	0x080064b9
 80064e4:	080064b9 	.word	0x080064b9
 80064e8:	0800653d 	.word	0x0800653d
 80064ec:	080064b9 	.word	0x080064b9
 80064f0:	080064b9 	.word	0x080064b9
 80064f4:	080064b9 	.word	0x080064b9
 80064f8:	080064b9 	.word	0x080064b9
 80064fc:	08006641 	.word	0x08006641
 8006500:	08006569 	.word	0x08006569
 8006504:	080065fb 	.word	0x080065fb
 8006508:	080064b9 	.word	0x080064b9
 800650c:	080064b9 	.word	0x080064b9
 8006510:	08006663 	.word	0x08006663
 8006514:	080064b9 	.word	0x080064b9
 8006518:	08006569 	.word	0x08006569
 800651c:	080064b9 	.word	0x080064b9
 8006520:	080064b9 	.word	0x080064b9
 8006524:	08006603 	.word	0x08006603
 8006528:	682b      	ldr	r3, [r5, #0]
 800652a:	1d1a      	adds	r2, r3, #4
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	602a      	str	r2, [r5, #0]
 8006530:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006534:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006538:	2301      	movs	r3, #1
 800653a:	e09f      	b.n	800667c <_printf_i+0x1ec>
 800653c:	6820      	ldr	r0, [r4, #0]
 800653e:	682b      	ldr	r3, [r5, #0]
 8006540:	0607      	lsls	r7, r0, #24
 8006542:	f103 0104 	add.w	r1, r3, #4
 8006546:	6029      	str	r1, [r5, #0]
 8006548:	d501      	bpl.n	800654e <_printf_i+0xbe>
 800654a:	681e      	ldr	r6, [r3, #0]
 800654c:	e003      	b.n	8006556 <_printf_i+0xc6>
 800654e:	0646      	lsls	r6, r0, #25
 8006550:	d5fb      	bpl.n	800654a <_printf_i+0xba>
 8006552:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006556:	2e00      	cmp	r6, #0
 8006558:	da03      	bge.n	8006562 <_printf_i+0xd2>
 800655a:	232d      	movs	r3, #45	; 0x2d
 800655c:	4276      	negs	r6, r6
 800655e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006562:	485a      	ldr	r0, [pc, #360]	; (80066cc <_printf_i+0x23c>)
 8006564:	230a      	movs	r3, #10
 8006566:	e012      	b.n	800658e <_printf_i+0xfe>
 8006568:	682b      	ldr	r3, [r5, #0]
 800656a:	6820      	ldr	r0, [r4, #0]
 800656c:	1d19      	adds	r1, r3, #4
 800656e:	6029      	str	r1, [r5, #0]
 8006570:	0605      	lsls	r5, r0, #24
 8006572:	d501      	bpl.n	8006578 <_printf_i+0xe8>
 8006574:	681e      	ldr	r6, [r3, #0]
 8006576:	e002      	b.n	800657e <_printf_i+0xee>
 8006578:	0641      	lsls	r1, r0, #25
 800657a:	d5fb      	bpl.n	8006574 <_printf_i+0xe4>
 800657c:	881e      	ldrh	r6, [r3, #0]
 800657e:	4853      	ldr	r0, [pc, #332]	; (80066cc <_printf_i+0x23c>)
 8006580:	2f6f      	cmp	r7, #111	; 0x6f
 8006582:	bf0c      	ite	eq
 8006584:	2308      	moveq	r3, #8
 8006586:	230a      	movne	r3, #10
 8006588:	2100      	movs	r1, #0
 800658a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800658e:	6865      	ldr	r5, [r4, #4]
 8006590:	60a5      	str	r5, [r4, #8]
 8006592:	2d00      	cmp	r5, #0
 8006594:	bfa2      	ittt	ge
 8006596:	6821      	ldrge	r1, [r4, #0]
 8006598:	f021 0104 	bicge.w	r1, r1, #4
 800659c:	6021      	strge	r1, [r4, #0]
 800659e:	b90e      	cbnz	r6, 80065a4 <_printf_i+0x114>
 80065a0:	2d00      	cmp	r5, #0
 80065a2:	d04b      	beq.n	800663c <_printf_i+0x1ac>
 80065a4:	4615      	mov	r5, r2
 80065a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80065aa:	fb03 6711 	mls	r7, r3, r1, r6
 80065ae:	5dc7      	ldrb	r7, [r0, r7]
 80065b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80065b4:	4637      	mov	r7, r6
 80065b6:	42bb      	cmp	r3, r7
 80065b8:	460e      	mov	r6, r1
 80065ba:	d9f4      	bls.n	80065a6 <_printf_i+0x116>
 80065bc:	2b08      	cmp	r3, #8
 80065be:	d10b      	bne.n	80065d8 <_printf_i+0x148>
 80065c0:	6823      	ldr	r3, [r4, #0]
 80065c2:	07de      	lsls	r6, r3, #31
 80065c4:	d508      	bpl.n	80065d8 <_printf_i+0x148>
 80065c6:	6923      	ldr	r3, [r4, #16]
 80065c8:	6861      	ldr	r1, [r4, #4]
 80065ca:	4299      	cmp	r1, r3
 80065cc:	bfde      	ittt	le
 80065ce:	2330      	movle	r3, #48	; 0x30
 80065d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065d4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80065d8:	1b52      	subs	r2, r2, r5
 80065da:	6122      	str	r2, [r4, #16]
 80065dc:	f8cd a000 	str.w	sl, [sp]
 80065e0:	464b      	mov	r3, r9
 80065e2:	aa03      	add	r2, sp, #12
 80065e4:	4621      	mov	r1, r4
 80065e6:	4640      	mov	r0, r8
 80065e8:	f7ff fee4 	bl	80063b4 <_printf_common>
 80065ec:	3001      	adds	r0, #1
 80065ee:	d14a      	bne.n	8006686 <_printf_i+0x1f6>
 80065f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065f4:	b004      	add	sp, #16
 80065f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065fa:	6823      	ldr	r3, [r4, #0]
 80065fc:	f043 0320 	orr.w	r3, r3, #32
 8006600:	6023      	str	r3, [r4, #0]
 8006602:	4833      	ldr	r0, [pc, #204]	; (80066d0 <_printf_i+0x240>)
 8006604:	2778      	movs	r7, #120	; 0x78
 8006606:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800660a:	6823      	ldr	r3, [r4, #0]
 800660c:	6829      	ldr	r1, [r5, #0]
 800660e:	061f      	lsls	r7, r3, #24
 8006610:	f851 6b04 	ldr.w	r6, [r1], #4
 8006614:	d402      	bmi.n	800661c <_printf_i+0x18c>
 8006616:	065f      	lsls	r7, r3, #25
 8006618:	bf48      	it	mi
 800661a:	b2b6      	uxthmi	r6, r6
 800661c:	07df      	lsls	r7, r3, #31
 800661e:	bf48      	it	mi
 8006620:	f043 0320 	orrmi.w	r3, r3, #32
 8006624:	6029      	str	r1, [r5, #0]
 8006626:	bf48      	it	mi
 8006628:	6023      	strmi	r3, [r4, #0]
 800662a:	b91e      	cbnz	r6, 8006634 <_printf_i+0x1a4>
 800662c:	6823      	ldr	r3, [r4, #0]
 800662e:	f023 0320 	bic.w	r3, r3, #32
 8006632:	6023      	str	r3, [r4, #0]
 8006634:	2310      	movs	r3, #16
 8006636:	e7a7      	b.n	8006588 <_printf_i+0xf8>
 8006638:	4824      	ldr	r0, [pc, #144]	; (80066cc <_printf_i+0x23c>)
 800663a:	e7e4      	b.n	8006606 <_printf_i+0x176>
 800663c:	4615      	mov	r5, r2
 800663e:	e7bd      	b.n	80065bc <_printf_i+0x12c>
 8006640:	682b      	ldr	r3, [r5, #0]
 8006642:	6826      	ldr	r6, [r4, #0]
 8006644:	6961      	ldr	r1, [r4, #20]
 8006646:	1d18      	adds	r0, r3, #4
 8006648:	6028      	str	r0, [r5, #0]
 800664a:	0635      	lsls	r5, r6, #24
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	d501      	bpl.n	8006654 <_printf_i+0x1c4>
 8006650:	6019      	str	r1, [r3, #0]
 8006652:	e002      	b.n	800665a <_printf_i+0x1ca>
 8006654:	0670      	lsls	r0, r6, #25
 8006656:	d5fb      	bpl.n	8006650 <_printf_i+0x1c0>
 8006658:	8019      	strh	r1, [r3, #0]
 800665a:	2300      	movs	r3, #0
 800665c:	6123      	str	r3, [r4, #16]
 800665e:	4615      	mov	r5, r2
 8006660:	e7bc      	b.n	80065dc <_printf_i+0x14c>
 8006662:	682b      	ldr	r3, [r5, #0]
 8006664:	1d1a      	adds	r2, r3, #4
 8006666:	602a      	str	r2, [r5, #0]
 8006668:	681d      	ldr	r5, [r3, #0]
 800666a:	6862      	ldr	r2, [r4, #4]
 800666c:	2100      	movs	r1, #0
 800666e:	4628      	mov	r0, r5
 8006670:	f7f9 fe36 	bl	80002e0 <memchr>
 8006674:	b108      	cbz	r0, 800667a <_printf_i+0x1ea>
 8006676:	1b40      	subs	r0, r0, r5
 8006678:	6060      	str	r0, [r4, #4]
 800667a:	6863      	ldr	r3, [r4, #4]
 800667c:	6123      	str	r3, [r4, #16]
 800667e:	2300      	movs	r3, #0
 8006680:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006684:	e7aa      	b.n	80065dc <_printf_i+0x14c>
 8006686:	6923      	ldr	r3, [r4, #16]
 8006688:	462a      	mov	r2, r5
 800668a:	4649      	mov	r1, r9
 800668c:	4640      	mov	r0, r8
 800668e:	47d0      	blx	sl
 8006690:	3001      	adds	r0, #1
 8006692:	d0ad      	beq.n	80065f0 <_printf_i+0x160>
 8006694:	6823      	ldr	r3, [r4, #0]
 8006696:	079b      	lsls	r3, r3, #30
 8006698:	d413      	bmi.n	80066c2 <_printf_i+0x232>
 800669a:	68e0      	ldr	r0, [r4, #12]
 800669c:	9b03      	ldr	r3, [sp, #12]
 800669e:	4298      	cmp	r0, r3
 80066a0:	bfb8      	it	lt
 80066a2:	4618      	movlt	r0, r3
 80066a4:	e7a6      	b.n	80065f4 <_printf_i+0x164>
 80066a6:	2301      	movs	r3, #1
 80066a8:	4632      	mov	r2, r6
 80066aa:	4649      	mov	r1, r9
 80066ac:	4640      	mov	r0, r8
 80066ae:	47d0      	blx	sl
 80066b0:	3001      	adds	r0, #1
 80066b2:	d09d      	beq.n	80065f0 <_printf_i+0x160>
 80066b4:	3501      	adds	r5, #1
 80066b6:	68e3      	ldr	r3, [r4, #12]
 80066b8:	9903      	ldr	r1, [sp, #12]
 80066ba:	1a5b      	subs	r3, r3, r1
 80066bc:	42ab      	cmp	r3, r5
 80066be:	dcf2      	bgt.n	80066a6 <_printf_i+0x216>
 80066c0:	e7eb      	b.n	800669a <_printf_i+0x20a>
 80066c2:	2500      	movs	r5, #0
 80066c4:	f104 0619 	add.w	r6, r4, #25
 80066c8:	e7f5      	b.n	80066b6 <_printf_i+0x226>
 80066ca:	bf00      	nop
 80066cc:	080068cd 	.word	0x080068cd
 80066d0:	080068de 	.word	0x080068de

080066d4 <memmove>:
 80066d4:	4288      	cmp	r0, r1
 80066d6:	b510      	push	{r4, lr}
 80066d8:	eb01 0402 	add.w	r4, r1, r2
 80066dc:	d902      	bls.n	80066e4 <memmove+0x10>
 80066de:	4284      	cmp	r4, r0
 80066e0:	4623      	mov	r3, r4
 80066e2:	d807      	bhi.n	80066f4 <memmove+0x20>
 80066e4:	1e43      	subs	r3, r0, #1
 80066e6:	42a1      	cmp	r1, r4
 80066e8:	d008      	beq.n	80066fc <memmove+0x28>
 80066ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066f2:	e7f8      	b.n	80066e6 <memmove+0x12>
 80066f4:	4402      	add	r2, r0
 80066f6:	4601      	mov	r1, r0
 80066f8:	428a      	cmp	r2, r1
 80066fa:	d100      	bne.n	80066fe <memmove+0x2a>
 80066fc:	bd10      	pop	{r4, pc}
 80066fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006702:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006706:	e7f7      	b.n	80066f8 <memmove+0x24>

08006708 <_sbrk_r>:
 8006708:	b538      	push	{r3, r4, r5, lr}
 800670a:	4d06      	ldr	r5, [pc, #24]	; (8006724 <_sbrk_r+0x1c>)
 800670c:	2300      	movs	r3, #0
 800670e:	4604      	mov	r4, r0
 8006710:	4608      	mov	r0, r1
 8006712:	602b      	str	r3, [r5, #0]
 8006714:	f7fa fcc4 	bl	80010a0 <_sbrk>
 8006718:	1c43      	adds	r3, r0, #1
 800671a:	d102      	bne.n	8006722 <_sbrk_r+0x1a>
 800671c:	682b      	ldr	r3, [r5, #0]
 800671e:	b103      	cbz	r3, 8006722 <_sbrk_r+0x1a>
 8006720:	6023      	str	r3, [r4, #0]
 8006722:	bd38      	pop	{r3, r4, r5, pc}
 8006724:	240002f8 	.word	0x240002f8

08006728 <memcpy>:
 8006728:	440a      	add	r2, r1
 800672a:	4291      	cmp	r1, r2
 800672c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006730:	d100      	bne.n	8006734 <memcpy+0xc>
 8006732:	4770      	bx	lr
 8006734:	b510      	push	{r4, lr}
 8006736:	f811 4b01 	ldrb.w	r4, [r1], #1
 800673a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800673e:	4291      	cmp	r1, r2
 8006740:	d1f9      	bne.n	8006736 <memcpy+0xe>
 8006742:	bd10      	pop	{r4, pc}

08006744 <_realloc_r>:
 8006744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006748:	4680      	mov	r8, r0
 800674a:	4614      	mov	r4, r2
 800674c:	460e      	mov	r6, r1
 800674e:	b921      	cbnz	r1, 800675a <_realloc_r+0x16>
 8006750:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006754:	4611      	mov	r1, r2
 8006756:	f7ff bc49 	b.w	8005fec <_malloc_r>
 800675a:	b92a      	cbnz	r2, 8006768 <_realloc_r+0x24>
 800675c:	f7ff fbda 	bl	8005f14 <_free_r>
 8006760:	4625      	mov	r5, r4
 8006762:	4628      	mov	r0, r5
 8006764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006768:	f000 f81b 	bl	80067a2 <_malloc_usable_size_r>
 800676c:	4284      	cmp	r4, r0
 800676e:	4607      	mov	r7, r0
 8006770:	d802      	bhi.n	8006778 <_realloc_r+0x34>
 8006772:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006776:	d812      	bhi.n	800679e <_realloc_r+0x5a>
 8006778:	4621      	mov	r1, r4
 800677a:	4640      	mov	r0, r8
 800677c:	f7ff fc36 	bl	8005fec <_malloc_r>
 8006780:	4605      	mov	r5, r0
 8006782:	2800      	cmp	r0, #0
 8006784:	d0ed      	beq.n	8006762 <_realloc_r+0x1e>
 8006786:	42bc      	cmp	r4, r7
 8006788:	4622      	mov	r2, r4
 800678a:	4631      	mov	r1, r6
 800678c:	bf28      	it	cs
 800678e:	463a      	movcs	r2, r7
 8006790:	f7ff ffca 	bl	8006728 <memcpy>
 8006794:	4631      	mov	r1, r6
 8006796:	4640      	mov	r0, r8
 8006798:	f7ff fbbc 	bl	8005f14 <_free_r>
 800679c:	e7e1      	b.n	8006762 <_realloc_r+0x1e>
 800679e:	4635      	mov	r5, r6
 80067a0:	e7df      	b.n	8006762 <_realloc_r+0x1e>

080067a2 <_malloc_usable_size_r>:
 80067a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067a6:	1f18      	subs	r0, r3, #4
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	bfbc      	itt	lt
 80067ac:	580b      	ldrlt	r3, [r1, r0]
 80067ae:	18c0      	addlt	r0, r0, r3
 80067b0:	4770      	bx	lr
	...

080067b4 <_init>:
 80067b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b6:	bf00      	nop
 80067b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ba:	bc08      	pop	{r3}
 80067bc:	469e      	mov	lr, r3
 80067be:	4770      	bx	lr

080067c0 <_fini>:
 80067c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c2:	bf00      	nop
 80067c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067c6:	bc08      	pop	{r3}
 80067c8:	469e      	mov	lr, r3
 80067ca:	4770      	bx	lr
