
h750_bno_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087a8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  08008a48  08008a48  00018a48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008efc  08008efc  00018efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008f04  08008f04  00018f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008f08  08008f08  00018f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001d8  24000000  08008f0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002ac  240001d8  080090e4  000201d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000484  080090e4  00020484  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020206  2**0
                  CONTENTS, READONLY
 11 .debug_info   00013810  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000023ef  00000000  00000000  00033a59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000df8  00000000  00000000  00035e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000ad9  00000000  00000000  00036c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000037ce  00000000  00000000  00037719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00012b0b  00000000  00000000  0003aee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0015b2b7  00000000  00000000  0004d9f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00004984  00000000  00000000  001a8cac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005b  00000000  00000000  001ad630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008a30 	.word	0x08008a30

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	08008a30 	.word	0x08008a30

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <DWT_Init>:

#define MIN(a,b) (((a)<(b))?(a):(b))
#define MAX(a,b) (((a)>(b))?(a):(b))

static inline void DWT_Init(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; //
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <DWT_Init+0x28>)
 8000692:	68db      	ldr	r3, [r3, #12]
 8000694:	4a07      	ldr	r2, [pc, #28]	; (80006b4 <DWT_Init+0x28>)
 8000696:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800069a:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   //
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <DWT_Init+0x2c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a05      	ldr	r2, [pc, #20]	; (80006b8 <DWT_Init+0x2c>)
 80006a2:	f043 0301 	orr.w	r3, r3, #1
 80006a6:	6013      	str	r3, [r2, #0]
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	e000edf0 	.word	0xe000edf0
 80006b8:	e0001000 	.word	0xe0001000

080006bc <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart7, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80006c4:	1d39      	adds	r1, r7, #4
 80006c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006ca:	2201      	movs	r2, #1
 80006cc:	4803      	ldr	r0, [pc, #12]	; (80006dc <__io_putchar+0x20>)
 80006ce:	f004 fac5 	bl	8004c5c <HAL_UART_Transmit>
  return ch;
 80006d2:	687b      	ldr	r3, [r7, #4]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	2400029c 	.word	0x2400029c

080006e0 <test_i2c>:
	return 1;

}


void test_i2c(){
 80006e0:	b590      	push	{r4, r7, lr}
 80006e2:	b091      	sub	sp, #68	; 0x44
 80006e4:	af00      	add	r7, sp, #0

    uint8_t i;
    HAL_StatusTypeDef ret;
    uint8_t address[10];
    uint8_t length=0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    for(i=1; i<128; i++)
 80006ec:	2301      	movs	r3, #1
 80006ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80006f2:	e020      	b.n	8000736 <test_i2c+0x56>
    {
        ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
 80006f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80006f8:	b29b      	uxth	r3, r3
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	b299      	uxth	r1, r3
 80006fe:	2305      	movs	r3, #5
 8000700:	2203      	movs	r2, #3
 8000702:	4865      	ldr	r0, [pc, #404]	; (8000898 <test_i2c+0x1b8>)
 8000704:	f001 fa20 	bl	8001b48 <HAL_I2C_IsDeviceReady>
 8000708:	4603      	mov	r3, r0
 800070a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        if(ret == HAL_OK)
 800070e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000712:	2b00      	cmp	r3, #0
 8000714:	d10a      	bne.n	800072c <test_i2c+0x4c>
        {
            address[length++]=i;
 8000716:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800071a:	1c5a      	adds	r2, r3, #1
 800071c:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
 8000720:	3340      	adds	r3, #64	; 0x40
 8000722:	443b      	add	r3, r7
 8000724:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000728:	f803 2c10 	strb.w	r2, [r3, #-16]
    for(i=1; i<128; i++)
 800072c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000730:	3301      	adds	r3, #1
 8000732:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000736:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800073a:	2b00      	cmp	r3, #0
 800073c:	dada      	bge.n	80006f4 <test_i2c+0x14>
        }
    }
    uint8_t i2c_start_msg1[] = "I2C Scanning:\n";
 800073e:	4b57      	ldr	r3, [pc, #348]	; (800089c <test_i2c+0x1bc>)
 8000740:	f107 0420 	add.w	r4, r7, #32
 8000744:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000746:	c407      	stmia	r4!, {r0, r1, r2}
 8000748:	8023      	strh	r3, [r4, #0]
 800074a:	3402      	adds	r4, #2
 800074c:	0c1b      	lsrs	r3, r3, #16
 800074e:	7023      	strb	r3, [r4, #0]

	char buffer[25] = {0};
 8000750:	2300      	movs	r3, #0
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	f107 0308 	add.w	r3, r7, #8
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]
 8000764:	751a      	strb	r2, [r3, #20]
	HAL_UART_Transmit(&huart7, i2c_start_msg1, sizeof(i2c_start_msg1)-1, 10);
 8000766:	f107 0120 	add.w	r1, r7, #32
 800076a:	230a      	movs	r3, #10
 800076c:	220e      	movs	r2, #14
 800076e:	484c      	ldr	r0, [pc, #304]	; (80008a0 <test_i2c+0x1c0>)
 8000770:	f004 fa74 	bl	8004c5c <HAL_UART_Transmit>

	if(length==2){
 8000774:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000778:	2b02      	cmp	r3, #2
 800077a:	d10f      	bne.n	800079c <test_i2c+0xbc>
		sprintf(buffer, "\tI2C1 Address:0x%02X,0x%02X\n", address[0],address[1]);
 800077c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000780:	461a      	mov	r2, r3
 8000782:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000786:	1d38      	adds	r0, r7, #4
 8000788:	4946      	ldr	r1, [pc, #280]	; (80008a4 <test_i2c+0x1c4>)
 800078a:	f006 f879 	bl	8006880 <siprintf>
		HAL_UART_Transmit(&huart7, (uint8_t*)buffer, 24, 10);
 800078e:	1d39      	adds	r1, r7, #4
 8000790:	230a      	movs	r3, #10
 8000792:	2218      	movs	r2, #24
 8000794:	4842      	ldr	r0, [pc, #264]	; (80008a0 <test_i2c+0x1c0>)
 8000796:	f004 fa61 	bl	8004c5c <HAL_UART_Transmit>
 800079a:	e01c      	b.n	80007d6 <test_i2c+0xf6>
	}else if(length==1){
 800079c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d10e      	bne.n	80007c2 <test_i2c+0xe2>
		sprintf(buffer, "\tI2C1 Address:0x%02X\n", address[0]);
 80007a4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80007a8:	461a      	mov	r2, r3
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	493e      	ldr	r1, [pc, #248]	; (80008a8 <test_i2c+0x1c8>)
 80007ae:	4618      	mov	r0, r3
 80007b0:	f006 f866 	bl	8006880 <siprintf>
		HAL_UART_Transmit(&huart7, (uint8_t*)buffer, 19, 10);
 80007b4:	1d39      	adds	r1, r7, #4
 80007b6:	230a      	movs	r3, #10
 80007b8:	2213      	movs	r2, #19
 80007ba:	4839      	ldr	r0, [pc, #228]	; (80008a0 <test_i2c+0x1c0>)
 80007bc:	f004 fa4e 	bl	8004c5c <HAL_UART_Transmit>
 80007c0:	e009      	b.n	80007d6 <test_i2c+0xf6>
	}else if(length==0){
 80007c2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d105      	bne.n	80007d6 <test_i2c+0xf6>
		HAL_UART_Transmit(&huart7, (uint8_t*)"\tNo Device Found In I2C1\n", 25, 10);
 80007ca:	230a      	movs	r3, #10
 80007cc:	2219      	movs	r2, #25
 80007ce:	4937      	ldr	r1, [pc, #220]	; (80008ac <test_i2c+0x1cc>)
 80007d0:	4833      	ldr	r0, [pc, #204]	; (80008a0 <test_i2c+0x1c0>)
 80007d2:	f004 fa43 	bl	8004c5c <HAL_UART_Transmit>
	}

    length=0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    for(i=1; i<128; i++)
 80007dc:	2301      	movs	r3, #1
 80007de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80007e2:	e020      	b.n	8000826 <test_i2c+0x146>
	{
		ret = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i<<1), 3, 5);
 80007e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	b299      	uxth	r1, r3
 80007ee:	2305      	movs	r3, #5
 80007f0:	2203      	movs	r2, #3
 80007f2:	482f      	ldr	r0, [pc, #188]	; (80008b0 <test_i2c+0x1d0>)
 80007f4:	f001 f9a8 	bl	8001b48 <HAL_I2C_IsDeviceReady>
 80007f8:	4603      	mov	r3, r0
 80007fa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		if(ret == HAL_OK)
 80007fe:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000802:	2b00      	cmp	r3, #0
 8000804:	d10a      	bne.n	800081c <test_i2c+0x13c>
		{
			address[length++]=i;
 8000806:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800080a:	1c5a      	adds	r2, r3, #1
 800080c:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
 8000810:	3340      	adds	r3, #64	; 0x40
 8000812:	443b      	add	r3, r7
 8000814:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000818:	f803 2c10 	strb.w	r2, [r3, #-16]
    for(i=1; i<128; i++)
 800081c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000820:	3301      	adds	r3, #1
 8000822:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000826:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800082a:	2b00      	cmp	r3, #0
 800082c:	dada      	bge.n	80007e4 <test_i2c+0x104>
		}
	}
    if(length==2){
 800082e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000832:	2b02      	cmp	r3, #2
 8000834:	d10f      	bne.n	8000856 <test_i2c+0x176>
		sprintf(buffer, "\tI2C2 Address:0x%02X,0x%02X\n", address[0],address[1]);
 8000836:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800083a:	461a      	mov	r2, r3
 800083c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000840:	1d38      	adds	r0, r7, #4
 8000842:	491c      	ldr	r1, [pc, #112]	; (80008b4 <test_i2c+0x1d4>)
 8000844:	f006 f81c 	bl	8006880 <siprintf>
		HAL_UART_Transmit(&huart7, (uint8_t*)buffer, 24, 10);
 8000848:	1d39      	adds	r1, r7, #4
 800084a:	230a      	movs	r3, #10
 800084c:	2218      	movs	r2, #24
 800084e:	4814      	ldr	r0, [pc, #80]	; (80008a0 <test_i2c+0x1c0>)
 8000850:	f004 fa04 	bl	8004c5c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart7, (uint8_t*)buffer, 19, 10);
	}else if(length==0){
		HAL_UART_Transmit(&huart7, (uint8_t*)"\tNo Device Found In I2C2\n", 25, 10);
	}

}
 8000854:	e01c      	b.n	8000890 <test_i2c+0x1b0>
	}else if(length==1){
 8000856:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800085a:	2b01      	cmp	r3, #1
 800085c:	d10e      	bne.n	800087c <test_i2c+0x19c>
		sprintf(buffer, "\tI2C2 Address:0x%02X\n", address[0]);
 800085e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000862:	461a      	mov	r2, r3
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	4914      	ldr	r1, [pc, #80]	; (80008b8 <test_i2c+0x1d8>)
 8000868:	4618      	mov	r0, r3
 800086a:	f006 f809 	bl	8006880 <siprintf>
		HAL_UART_Transmit(&huart7, (uint8_t*)buffer, 19, 10);
 800086e:	1d39      	adds	r1, r7, #4
 8000870:	230a      	movs	r3, #10
 8000872:	2213      	movs	r2, #19
 8000874:	480a      	ldr	r0, [pc, #40]	; (80008a0 <test_i2c+0x1c0>)
 8000876:	f004 f9f1 	bl	8004c5c <HAL_UART_Transmit>
}
 800087a:	e009      	b.n	8000890 <test_i2c+0x1b0>
	}else if(length==0){
 800087c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000880:	2b00      	cmp	r3, #0
 8000882:	d105      	bne.n	8000890 <test_i2c+0x1b0>
		HAL_UART_Transmit(&huart7, (uint8_t*)"\tNo Device Found In I2C2\n", 25, 10);
 8000884:	230a      	movs	r3, #10
 8000886:	2219      	movs	r2, #25
 8000888:	490c      	ldr	r1, [pc, #48]	; (80008bc <test_i2c+0x1dc>)
 800088a:	4805      	ldr	r0, [pc, #20]	; (80008a0 <test_i2c+0x1c0>)
 800088c:	f004 f9e6 	bl	8004c5c <HAL_UART_Transmit>
}
 8000890:	bf00      	nop
 8000892:	3744      	adds	r7, #68	; 0x44
 8000894:	46bd      	mov	sp, r7
 8000896:	bd90      	pop	{r4, r7, pc}
 8000898:	240001f4 	.word	0x240001f4
 800089c:	08008b44 	.word	0x08008b44
 80008a0:	2400029c 	.word	0x2400029c
 80008a4:	08008a9c 	.word	0x08008a9c
 80008a8:	08008abc 	.word	0x08008abc
 80008ac:	08008ad4 	.word	0x08008ad4
 80008b0:	24000248 	.word	0x24000248
 80008b4:	08008af0 	.word	0x08008af0
 80008b8:	08008b10 	.word	0x08008b10
 80008bc:	08008b28 	.word	0x08008b28

080008c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c6:	f000 fd25 	bl	8001314 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ca:	f000 f821 	bl	8000910 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80008ce:	f000 f899 	bl	8000a04 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d2:	f000 f995 	bl	8000c00 <MX_GPIO_Init>
  MX_I2C1_Init();
 80008d6:	f000 f8c7 	bl	8000a68 <MX_I2C1_Init>
  MX_UART7_Init();
 80008da:	f000 f945 	bl	8000b68 <MX_UART7_Init>
  MX_I2C2_Init();
 80008de:	f000 f903 	bl	8000ae8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  DWT_Init();
 80008e2:	f7ff fed3 	bl	800068c <DWT_Init>

  //HAL_Delay(200);
  //prodid prodids[2];
  //bno08x_get_prodid(&bno, prodids);

  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2108      	movs	r1, #8
 80008ea:	4808      	ldr	r0, [pc, #32]	; (800090c <main+0x4c>)
 80008ec:	f001 f868 	bl	80019c0 <HAL_GPIO_WritePin>

   HAL_Delay(100);
 80008f0:	2064      	movs	r0, #100	; 0x64
 80008f2:	f000 fda1 	bl	8001438 <HAL_Delay>
  {




	  HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 80008f6:	2108      	movs	r1, #8
 80008f8:	4804      	ldr	r0, [pc, #16]	; (800090c <main+0x4c>)
 80008fa:	f001 f87a 	bl	80019f2 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80008fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000902:	f000 fd99 	bl	8001438 <HAL_Delay>
	  test_i2c();
 8000906:	f7ff feeb 	bl	80006e0 <test_i2c>
	  HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 800090a:	e7f4      	b.n	80008f6 <main+0x36>
 800090c:	58020c00 	.word	0x58020c00

08000910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b09c      	sub	sp, #112	; 0x70
 8000914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091a:	224c      	movs	r2, #76	; 0x4c
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f006 f8a6 	bl	8006a70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2220      	movs	r2, #32
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f006 f8a0 	bl	8006a70 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000930:	2002      	movs	r0, #2
 8000932:	f001 faf7 	bl	8001f24 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000936:	2300      	movs	r3, #0
 8000938:	603b      	str	r3, [r7, #0]
 800093a:	4b30      	ldr	r3, [pc, #192]	; (80009fc <SystemClock_Config+0xec>)
 800093c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800093e:	4a2f      	ldr	r2, [pc, #188]	; (80009fc <SystemClock_Config+0xec>)
 8000940:	f023 0301 	bic.w	r3, r3, #1
 8000944:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000946:	4b2d      	ldr	r3, [pc, #180]	; (80009fc <SystemClock_Config+0xec>)
 8000948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	4b2b      	ldr	r3, [pc, #172]	; (8000a00 <SystemClock_Config+0xf0>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	4a2a      	ldr	r2, [pc, #168]	; (8000a00 <SystemClock_Config+0xf0>)
 8000956:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800095a:	6193      	str	r3, [r2, #24]
 800095c:	4b28      	ldr	r3, [pc, #160]	; (8000a00 <SystemClock_Config+0xf0>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000964:	603b      	str	r3, [r7, #0]
 8000966:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000968:	bf00      	nop
 800096a:	4b25      	ldr	r3, [pc, #148]	; (8000a00 <SystemClock_Config+0xf0>)
 800096c:	699b      	ldr	r3, [r3, #24]
 800096e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000976:	d1f8      	bne.n	800096a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000978:	2301      	movs	r3, #1
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800097c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000980:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000982:	2302      	movs	r3, #2
 8000984:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000986:	2302      	movs	r3, #2
 8000988:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800098a:	2305      	movs	r3, #5
 800098c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 800098e:	23a0      	movs	r3, #160	; 0xa0
 8000990:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000992:	2302      	movs	r3, #2
 8000994:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000996:	2302      	movs	r3, #2
 8000998:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800099a:	2302      	movs	r3, #2
 800099c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800099e:	2308      	movs	r3, #8
 80009a0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009a2:	2300      	movs	r3, #0
 80009a4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ae:	4618      	mov	r0, r3
 80009b0:	f001 faf2 	bl	8001f98 <HAL_RCC_OscConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <SystemClock_Config+0xae>
  {
    Error_Handler();
 80009ba:	f000 f9d7 	bl	8000d6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009be:	233f      	movs	r3, #63	; 0x3f
 80009c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c2:	2303      	movs	r3, #3
 80009c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 80009ca:	2309      	movs	r3, #9
 80009cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009da:	2300      	movs	r3, #0
 80009dc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	2101      	movs	r1, #1
 80009e2:	4618      	mov	r0, r3
 80009e4:	f001 ff32 	bl	800284c <HAL_RCC_ClockConfig>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80009ee:	f000 f9bd 	bl	8000d6c <Error_Handler>
  }
}
 80009f2:	bf00      	nop
 80009f4:	3770      	adds	r7, #112	; 0x70
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	58000400 	.word	0x58000400
 8000a00:	58024800 	.word	0x58024800

08000a04 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b0b0      	sub	sp, #192	; 0xc0
 8000a08:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	22c0      	movs	r2, #192	; 0xc0
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f006 f82d 	bl	8006a70 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C1;
 8000a16:	f04f 0208 	mov.w	r2, #8
 8000a1a:	f04f 0300 	mov.w	r3, #0
 8000a1e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 25;
 8000a22:	2319      	movs	r3, #25
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 160;
 8000a26:	23a0      	movs	r3, #160	; 0xa0
 8000a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 8;
 8000a2e:	2308      	movs	r3, #8
 8000a30:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 8;
 8000a32:	2308      	movs	r3, #8
 8000a34:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000a3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a3e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 8000a44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a4c:	463b      	mov	r3, r7
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f002 fa88 	bl	8002f64 <HAL_RCCEx_PeriphCLKConfig>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8000a5a:	f000 f987 	bl	8000d6c <Error_Handler>
  }
}
 8000a5e:	bf00      	nop
 8000a60:	37c0      	adds	r7, #192	; 0xc0
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a6e:	4a1c      	ldr	r2, [pc, #112]	; (8000ae0 <MX_I2C1_Init+0x78>)
 8000a70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00404C74;
 8000a72:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a74:	4a1b      	ldr	r2, [pc, #108]	; (8000ae4 <MX_I2C1_Init+0x7c>)
 8000a76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a78:	4b18      	ldr	r3, [pc, #96]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a7e:	4b17      	ldr	r3, [pc, #92]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a84:	4b15      	ldr	r3, [pc, #84]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a8a:	4b14      	ldr	r3, [pc, #80]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <MX_I2C1_Init+0x74>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aa2:	480e      	ldr	r0, [pc, #56]	; (8000adc <MX_I2C1_Init+0x74>)
 8000aa4:	f000 ffc0 	bl	8001a28 <HAL_I2C_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000aae:	f000 f95d 	bl	8000d6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4809      	ldr	r0, [pc, #36]	; (8000adc <MX_I2C1_Init+0x74>)
 8000ab6:	f001 f99e 	bl	8001df6 <HAL_I2CEx_ConfigAnalogFilter>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ac0:	f000 f954 	bl	8000d6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_I2C1_Init+0x74>)
 8000ac8:	f001 f9e0 	bl	8001e8c <HAL_I2CEx_ConfigDigitalFilter>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ad2:	f000 f94b 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	240001f4 	.word	0x240001f4
 8000ae0:	40005400 	.word	0x40005400
 8000ae4:	00404c74 	.word	0x00404c74

08000ae8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000aec:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <MX_I2C2_Init+0x74>)
 8000aee:	4a1c      	ldr	r2, [pc, #112]	; (8000b60 <MX_I2C2_Init+0x78>)
 8000af0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00100822;
 8000af2:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <MX_I2C2_Init+0x74>)
 8000af4:	4a1b      	ldr	r2, [pc, #108]	; (8000b64 <MX_I2C2_Init+0x7c>)
 8000af6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000af8:	4b18      	ldr	r3, [pc, #96]	; (8000b5c <MX_I2C2_Init+0x74>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000afe:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <MX_I2C2_Init+0x74>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b04:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <MX_I2C2_Init+0x74>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b0a:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <MX_I2C2_Init+0x74>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b10:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <MX_I2C2_Init+0x74>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <MX_I2C2_Init+0x74>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <MX_I2C2_Init+0x74>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b22:	480e      	ldr	r0, [pc, #56]	; (8000b5c <MX_I2C2_Init+0x74>)
 8000b24:	f000 ff80 	bl	8001a28 <HAL_I2C_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b2e:	f000 f91d 	bl	8000d6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b32:	2100      	movs	r1, #0
 8000b34:	4809      	ldr	r0, [pc, #36]	; (8000b5c <MX_I2C2_Init+0x74>)
 8000b36:	f001 f95e 	bl	8001df6 <HAL_I2CEx_ConfigAnalogFilter>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b40:	f000 f914 	bl	8000d6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b44:	2100      	movs	r1, #0
 8000b46:	4805      	ldr	r0, [pc, #20]	; (8000b5c <MX_I2C2_Init+0x74>)
 8000b48:	f001 f9a0 	bl	8001e8c <HAL_I2CEx_ConfigDigitalFilter>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b52:	f000 f90b 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	24000248 	.word	0x24000248
 8000b60:	40005800 	.word	0x40005800
 8000b64:	00100822 	.word	0x00100822

08000b68 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000b6c:	4b22      	ldr	r3, [pc, #136]	; (8000bf8 <MX_UART7_Init+0x90>)
 8000b6e:	4a23      	ldr	r2, [pc, #140]	; (8000bfc <MX_UART7_Init+0x94>)
 8000b70:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000b72:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <MX_UART7_Init+0x90>)
 8000b74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b78:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7a:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <MX_UART7_Init+0x90>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000b80:	4b1d      	ldr	r3, [pc, #116]	; (8000bf8 <MX_UART7_Init+0x90>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000b86:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <MX_UART7_Init+0x90>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <MX_UART7_Init+0x90>)
 8000b8e:	220c      	movs	r2, #12
 8000b90:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b92:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <MX_UART7_Init+0x90>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b98:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <MX_UART7_Init+0x90>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b9e:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <MX_UART7_Init+0x90>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ba4:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <MX_UART7_Init+0x90>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000baa:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <MX_UART7_Init+0x90>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000bb0:	4811      	ldr	r0, [pc, #68]	; (8000bf8 <MX_UART7_Init+0x90>)
 8000bb2:	f004 f803 	bl	8004bbc <HAL_UART_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8000bbc:	f000 f8d6 	bl	8000d6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <MX_UART7_Init+0x90>)
 8000bc4:	f005 f893 	bl	8005cee <HAL_UARTEx_SetTxFifoThreshold>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8000bce:	f000 f8cd 	bl	8000d6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4808      	ldr	r0, [pc, #32]	; (8000bf8 <MX_UART7_Init+0x90>)
 8000bd6:	f005 f8c8 	bl	8005d6a <HAL_UARTEx_SetRxFifoThreshold>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000be0:	f000 f8c4 	bl	8000d6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000be4:	4804      	ldr	r0, [pc, #16]	; (8000bf8 <MX_UART7_Init+0x90>)
 8000be6:	f005 f849 	bl	8005c7c <HAL_UARTEx_DisableFifoMode>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000bf0:	f000 f8bc 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	2400029c 	.word	0x2400029c
 8000bfc:	40007800 	.word	0x40007800

08000c00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08c      	sub	sp, #48	; 0x30
 8000c04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c16:	4b51      	ldr	r3, [pc, #324]	; (8000d5c <MX_GPIO_Init+0x15c>)
 8000c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1c:	4a4f      	ldr	r2, [pc, #316]	; (8000d5c <MX_GPIO_Init+0x15c>)
 8000c1e:	f043 0304 	orr.w	r3, r3, #4
 8000c22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c26:	4b4d      	ldr	r3, [pc, #308]	; (8000d5c <MX_GPIO_Init+0x15c>)
 8000c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2c:	f003 0304 	and.w	r3, r3, #4
 8000c30:	61bb      	str	r3, [r7, #24]
 8000c32:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c34:	4b49      	ldr	r3, [pc, #292]	; (8000d5c <MX_GPIO_Init+0x15c>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	4a48      	ldr	r2, [pc, #288]	; (8000d5c <MX_GPIO_Init+0x15c>)
 8000c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c44:	4b45      	ldr	r3, [pc, #276]	; (8000d5c <MX_GPIO_Init+0x15c>)
 8000c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c4e:	617b      	str	r3, [r7, #20]
 8000c50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c52:	4b42      	ldr	r3, [pc, #264]	; (8000d5c <MX_GPIO_Init+0x15c>)
 8000c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c58:	4a40      	ldr	r2, [pc, #256]	; (8000d5c <MX_GPIO_Init+0x15c>)
 8000c5a:	f043 0310 	orr.w	r3, r3, #16
 8000c5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c62:	4b3e      	ldr	r3, [pc, #248]	; (8000d5c <MX_GPIO_Init+0x15c>)
 8000c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c68:	f003 0310 	and.w	r3, r3, #16
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c70:	4b3a      	ldr	r3, [pc, #232]	; (8000d5c <MX_GPIO_Init+0x15c>)
 8000c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c76:	4a39      	ldr	r2, [pc, #228]	; (8000d5c <MX_GPIO_Init+0x15c>)
 8000c78:	f043 0302 	orr.w	r3, r3, #2
 8000c7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c80:	4b36      	ldr	r3, [pc, #216]	; (8000d5c <MX_GPIO_Init+0x15c>)
 8000c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c8e:	4b33      	ldr	r3, [pc, #204]	; (8000d5c <MX_GPIO_Init+0x15c>)
 8000c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c94:	4a31      	ldr	r2, [pc, #196]	; (8000d5c <MX_GPIO_Init+0x15c>)
 8000c96:	f043 0308 	orr.w	r3, r3, #8
 8000c9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c9e:	4b2f      	ldr	r3, [pc, #188]	; (8000d5c <MX_GPIO_Init+0x15c>)
 8000ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca4:	f003 0308 	and.w	r3, r3, #8
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cac:	4b2b      	ldr	r3, [pc, #172]	; (8000d5c <MX_GPIO_Init+0x15c>)
 8000cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb2:	4a2a      	ldr	r2, [pc, #168]	; (8000d5c <MX_GPIO_Init+0x15c>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cbc:	4b27      	ldr	r3, [pc, #156]	; (8000d5c <MX_GPIO_Init+0x15c>)
 8000cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BNO_NRST_Pin|BNO_BOOTN_Pin, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000cd0:	4823      	ldr	r0, [pc, #140]	; (8000d60 <MX_GPIO_Init+0x160>)
 8000cd2:	f000 fe75 	bl	80019c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BNO_P0_Pin|BNO_P1_Pin|LED_BLUE_Pin|LED_YELLOW_Pin
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f44f 715a 	mov.w	r1, #872	; 0x368
 8000cdc:	4821      	ldr	r0, [pc, #132]	; (8000d64 <MX_GPIO_Init+0x164>)
 8000cde:	f000 fe6f 	bl	80019c0 <HAL_GPIO_WritePin>
                          |LED_RED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : BNO_INT_Pin */
  GPIO_InitStruct.Pin = BNO_INT_Pin;
 8000ce2:	2380      	movs	r3, #128	; 0x80
 8000ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BNO_INT_GPIO_Port, &GPIO_InitStruct);
 8000cee:	f107 031c 	add.w	r3, r7, #28
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	481c      	ldr	r0, [pc, #112]	; (8000d68 <MX_GPIO_Init+0x168>)
 8000cf6:	f000 fcb3 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pins : BNO_NRST_Pin BNO_BOOTN_Pin */
  GPIO_InitStruct.Pin = BNO_NRST_Pin|BNO_BOOTN_Pin;
 8000cfa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d00:	2301      	movs	r3, #1
 8000d02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0c:	f107 031c 	add.w	r3, r7, #28
 8000d10:	4619      	mov	r1, r3
 8000d12:	4813      	ldr	r0, [pc, #76]	; (8000d60 <MX_GPIO_Init+0x160>)
 8000d14:	f000 fca4 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pins : BNO_P0_Pin BNO_P1_Pin */
  GPIO_InitStruct.Pin = BNO_P0_Pin|BNO_P1_Pin;
 8000d18:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d22:	2302      	movs	r3, #2
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d2a:	f107 031c 	add.w	r3, r7, #28
 8000d2e:	4619      	mov	r1, r3
 8000d30:	480c      	ldr	r0, [pc, #48]	; (8000d64 <MX_GPIO_Init+0x164>)
 8000d32:	f000 fc95 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_BLUE_Pin LED_YELLOW_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_YELLOW_Pin|LED_RED_Pin;
 8000d36:	2368      	movs	r3, #104	; 0x68
 8000d38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4805      	ldr	r0, [pc, #20]	; (8000d64 <MX_GPIO_Init+0x164>)
 8000d4e:	f000 fc87 	bl	8001660 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d52:	bf00      	nop
 8000d54:	3730      	adds	r7, #48	; 0x30
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	58024400 	.word	0x58024400
 8000d60:	58020400 	.word	0x58020400
 8000d64:	58020c00 	.word	0x58020c00
 8000d68:	58021000 	.word	0x58021000

08000d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d70:	b672      	cpsid	i
}
 8000d72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <Error_Handler+0x8>
	...

08000d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <HAL_MspInit+0x30>)
 8000d80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d84:	4a08      	ldr	r2, [pc, #32]	; (8000da8 <HAL_MspInit+0x30>)
 8000d86:	f043 0302 	orr.w	r3, r3, #2
 8000d8a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_MspInit+0x30>)
 8000d90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d94:	f003 0302 	and.w	r3, r3, #2
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	58024400 	.word	0x58024400

08000dac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08c      	sub	sp, #48	; 0x30
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 031c 	add.w	r3, r7, #28
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a35      	ldr	r2, [pc, #212]	; (8000ea0 <HAL_I2C_MspInit+0xf4>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d12f      	bne.n	8000e2e <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dce:	4b35      	ldr	r3, [pc, #212]	; (8000ea4 <HAL_I2C_MspInit+0xf8>)
 8000dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd4:	4a33      	ldr	r2, [pc, #204]	; (8000ea4 <HAL_I2C_MspInit+0xf8>)
 8000dd6:	f043 0302 	orr.w	r3, r3, #2
 8000dda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dde:	4b31      	ldr	r3, [pc, #196]	; (8000ea4 <HAL_I2C_MspInit+0xf8>)
 8000de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de4:	f003 0302 	and.w	r3, r3, #2
 8000de8:	61bb      	str	r3, [r7, #24]
 8000dea:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dec:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000df2:	2312      	movs	r3, #18
 8000df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dfe:	2304      	movs	r3, #4
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	4619      	mov	r1, r3
 8000e08:	4827      	ldr	r0, [pc, #156]	; (8000ea8 <HAL_I2C_MspInit+0xfc>)
 8000e0a:	f000 fc29 	bl	8001660 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e0e:	4b25      	ldr	r3, [pc, #148]	; (8000ea4 <HAL_I2C_MspInit+0xf8>)
 8000e10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e14:	4a23      	ldr	r2, [pc, #140]	; (8000ea4 <HAL_I2C_MspInit+0xf8>)
 8000e16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e1a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e1e:	4b21      	ldr	r3, [pc, #132]	; (8000ea4 <HAL_I2C_MspInit+0xf8>)
 8000e20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e2c:	e033      	b.n	8000e96 <HAL_I2C_MspInit+0xea>
  else if(hi2c->Instance==I2C2)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a1e      	ldr	r2, [pc, #120]	; (8000eac <HAL_I2C_MspInit+0x100>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d12e      	bne.n	8000e96 <HAL_I2C_MspInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e38:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <HAL_I2C_MspInit+0xf8>)
 8000e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3e:	4a19      	ldr	r2, [pc, #100]	; (8000ea4 <HAL_I2C_MspInit+0xf8>)
 8000e40:	f043 0302 	orr.w	r3, r3, #2
 8000e44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e48:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <HAL_I2C_MspInit+0xf8>)
 8000e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e56:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e5c:	2312      	movs	r3, #18
 8000e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e68:	2304      	movs	r3, #4
 8000e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6c:	f107 031c 	add.w	r3, r7, #28
 8000e70:	4619      	mov	r1, r3
 8000e72:	480d      	ldr	r0, [pc, #52]	; (8000ea8 <HAL_I2C_MspInit+0xfc>)
 8000e74:	f000 fbf4 	bl	8001660 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e78:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <HAL_I2C_MspInit+0xf8>)
 8000e7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e7e:	4a09      	ldr	r2, [pc, #36]	; (8000ea4 <HAL_I2C_MspInit+0xf8>)
 8000e80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e84:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_I2C_MspInit+0xf8>)
 8000e8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
}
 8000e96:	bf00      	nop
 8000e98:	3730      	adds	r7, #48	; 0x30
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40005400 	.word	0x40005400
 8000ea4:	58024400 	.word	0x58024400
 8000ea8:	58020400 	.word	0x58020400
 8000eac:	40005800 	.word	0x40005800

08000eb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b0bc      	sub	sp, #240	; 0xf0
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ec8:	f107 0318 	add.w	r3, r7, #24
 8000ecc:	22c0      	movs	r2, #192	; 0xc0
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f005 fdcd 	bl	8006a70 <memset>
  if(huart->Instance==UART7)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a39      	ldr	r2, [pc, #228]	; (8000fc0 <HAL_UART_MspInit+0x110>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d16b      	bne.n	8000fb8 <HAL_UART_MspInit+0x108>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8000ee0:	f04f 0202 	mov.w	r2, #2
 8000ee4:	f04f 0300 	mov.w	r3, #0
 8000ee8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000eec:	2300      	movs	r3, #0
 8000eee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ef2:	f107 0318 	add.w	r3, r7, #24
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f002 f834 	bl	8002f64 <HAL_RCCEx_PeriphCLKConfig>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f02:	f7ff ff33 	bl	8000d6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8000f06:	4b2f      	ldr	r3, [pc, #188]	; (8000fc4 <HAL_UART_MspInit+0x114>)
 8000f08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f0c:	4a2d      	ldr	r2, [pc, #180]	; (8000fc4 <HAL_UART_MspInit+0x114>)
 8000f0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000f12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f16:	4b2b      	ldr	r3, [pc, #172]	; (8000fc4 <HAL_UART_MspInit+0x114>)
 8000f18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000f20:	617b      	str	r3, [r7, #20]
 8000f22:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f24:	4b27      	ldr	r3, [pc, #156]	; (8000fc4 <HAL_UART_MspInit+0x114>)
 8000f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2a:	4a26      	ldr	r2, [pc, #152]	; (8000fc4 <HAL_UART_MspInit+0x114>)
 8000f2c:	f043 0310 	orr.w	r3, r3, #16
 8000f30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f34:	4b23      	ldr	r3, [pc, #140]	; (8000fc4 <HAL_UART_MspInit+0x114>)
 8000f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3a:	f003 0310 	and.w	r3, r3, #16
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f42:	4b20      	ldr	r3, [pc, #128]	; (8000fc4 <HAL_UART_MspInit+0x114>)
 8000f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f48:	4a1e      	ldr	r2, [pc, #120]	; (8000fc4 <HAL_UART_MspInit+0x114>)
 8000f4a:	f043 0301 	orr.w	r3, r3, #1
 8000f4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f52:	4b1c      	ldr	r3, [pc, #112]	; (8000fc4 <HAL_UART_MspInit+0x114>)
 8000f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PE8     ------> UART7_TX
    PA8     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f64:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f74:	2300      	movs	r3, #0
 8000f76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8000f7a:	2307      	movs	r3, #7
 8000f7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f80:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f84:	4619      	mov	r1, r3
 8000f86:	4810      	ldr	r0, [pc, #64]	; (8000fc8 <HAL_UART_MspInit+0x118>)
 8000f88:	f000 fb6a 	bl	8001660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
 8000fa6:	230b      	movs	r3, #11
 8000fa8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4806      	ldr	r0, [pc, #24]	; (8000fcc <HAL_UART_MspInit+0x11c>)
 8000fb4:	f000 fb54 	bl	8001660 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8000fb8:	bf00      	nop
 8000fba:	37f0      	adds	r7, #240	; 0xf0
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40007800 	.word	0x40007800
 8000fc4:	58024400 	.word	0x58024400
 8000fc8:	58021000 	.word	0x58021000
 8000fcc:	58020000 	.word	0x58020000

08000fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <NMI_Handler+0x4>

08000fd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <HardFault_Handler+0x4>

08000fdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <MemManage_Handler+0x4>

08000fe2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe6:	e7fe      	b.n	8000fe6 <BusFault_Handler+0x4>

08000fe8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fec:	e7fe      	b.n	8000fec <UsageFault_Handler+0x4>

08000fee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800101c:	f000 f9ec 	bl	80013f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}

08001024 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return 1;
 8001028:	2301      	movs	r3, #1
}
 800102a:	4618      	mov	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <_kill>:

int _kill(int pid, int sig)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800103e:	f005 fd69 	bl	8006b14 <__errno>
 8001042:	4603      	mov	r3, r0
 8001044:	2216      	movs	r2, #22
 8001046:	601a      	str	r2, [r3, #0]
  return -1;
 8001048:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <_exit>:

void _exit (int status)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800105c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff ffe7 	bl	8001034 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001066:	e7fe      	b.n	8001066 <_exit+0x12>

08001068 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	e00a      	b.n	8001090 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800107a:	f3af 8000 	nop.w
 800107e:	4601      	mov	r1, r0
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	1c5a      	adds	r2, r3, #1
 8001084:	60ba      	str	r2, [r7, #8]
 8001086:	b2ca      	uxtb	r2, r1
 8001088:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	3301      	adds	r3, #1
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	697a      	ldr	r2, [r7, #20]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	429a      	cmp	r2, r3
 8001096:	dbf0      	blt.n	800107a <_read+0x12>
  }

  return len;
 8001098:	687b      	ldr	r3, [r7, #4]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b086      	sub	sp, #24
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	60f8      	str	r0, [r7, #12]
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
 80010b2:	e009      	b.n	80010c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	1c5a      	adds	r2, r3, #1
 80010b8:	60ba      	str	r2, [r7, #8]
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fafd 	bl	80006bc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	3301      	adds	r3, #1
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	697a      	ldr	r2, [r7, #20]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	dbf1      	blt.n	80010b4 <_write+0x12>
  }
  return len;
 80010d0:	687b      	ldr	r3, [r7, #4]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <_close>:

int _close(int file)
{
 80010da:	b480      	push	{r7}
 80010dc:	b083      	sub	sp, #12
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
 80010fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001102:	605a      	str	r2, [r3, #4]
  return 0;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <_isatty>:

int _isatty(int file)
{
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800111a:	2301      	movs	r3, #1
}
 800111c:	4618      	mov	r0, r3
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800114c:	4a14      	ldr	r2, [pc, #80]	; (80011a0 <_sbrk+0x5c>)
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <_sbrk+0x60>)
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <_sbrk+0x64>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d102      	bne.n	8001166 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <_sbrk+0x64>)
 8001162:	4a12      	ldr	r2, [pc, #72]	; (80011ac <_sbrk+0x68>)
 8001164:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <_sbrk+0x64>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4413      	add	r3, r2
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	429a      	cmp	r2, r3
 8001172:	d207      	bcs.n	8001184 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001174:	f005 fcce 	bl	8006b14 <__errno>
 8001178:	4603      	mov	r3, r0
 800117a:	220c      	movs	r2, #12
 800117c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800117e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001182:	e009      	b.n	8001198 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001184:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <_sbrk+0x64>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <_sbrk+0x64>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4413      	add	r3, r2
 8001192:	4a05      	ldr	r2, [pc, #20]	; (80011a8 <_sbrk+0x64>)
 8001194:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001196:	68fb      	ldr	r3, [r7, #12]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	24080000 	.word	0x24080000
 80011a4:	00000400 	.word	0x00000400
 80011a8:	24000330 	.word	0x24000330
 80011ac:	24000488 	.word	0x24000488

080011b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011b4:	4b37      	ldr	r3, [pc, #220]	; (8001294 <SystemInit+0xe4>)
 80011b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ba:	4a36      	ldr	r2, [pc, #216]	; (8001294 <SystemInit+0xe4>)
 80011bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011c4:	4b34      	ldr	r3, [pc, #208]	; (8001298 <SystemInit+0xe8>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 030f 	and.w	r3, r3, #15
 80011cc:	2b06      	cmp	r3, #6
 80011ce:	d807      	bhi.n	80011e0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011d0:	4b31      	ldr	r3, [pc, #196]	; (8001298 <SystemInit+0xe8>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f023 030f 	bic.w	r3, r3, #15
 80011d8:	4a2f      	ldr	r2, [pc, #188]	; (8001298 <SystemInit+0xe8>)
 80011da:	f043 0307 	orr.w	r3, r3, #7
 80011de:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011e0:	4b2e      	ldr	r3, [pc, #184]	; (800129c <SystemInit+0xec>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a2d      	ldr	r2, [pc, #180]	; (800129c <SystemInit+0xec>)
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011ec:	4b2b      	ldr	r3, [pc, #172]	; (800129c <SystemInit+0xec>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011f2:	4b2a      	ldr	r3, [pc, #168]	; (800129c <SystemInit+0xec>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	4929      	ldr	r1, [pc, #164]	; (800129c <SystemInit+0xec>)
 80011f8:	4b29      	ldr	r3, [pc, #164]	; (80012a0 <SystemInit+0xf0>)
 80011fa:	4013      	ands	r3, r2
 80011fc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011fe:	4b26      	ldr	r3, [pc, #152]	; (8001298 <SystemInit+0xe8>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0308 	and.w	r3, r3, #8
 8001206:	2b00      	cmp	r3, #0
 8001208:	d007      	beq.n	800121a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800120a:	4b23      	ldr	r3, [pc, #140]	; (8001298 <SystemInit+0xe8>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f023 030f 	bic.w	r3, r3, #15
 8001212:	4a21      	ldr	r2, [pc, #132]	; (8001298 <SystemInit+0xe8>)
 8001214:	f043 0307 	orr.w	r3, r3, #7
 8001218:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800121a:	4b20      	ldr	r3, [pc, #128]	; (800129c <SystemInit+0xec>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001220:	4b1e      	ldr	r3, [pc, #120]	; (800129c <SystemInit+0xec>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001226:	4b1d      	ldr	r3, [pc, #116]	; (800129c <SystemInit+0xec>)
 8001228:	2200      	movs	r2, #0
 800122a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800122c:	4b1b      	ldr	r3, [pc, #108]	; (800129c <SystemInit+0xec>)
 800122e:	4a1d      	ldr	r2, [pc, #116]	; (80012a4 <SystemInit+0xf4>)
 8001230:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001232:	4b1a      	ldr	r3, [pc, #104]	; (800129c <SystemInit+0xec>)
 8001234:	4a1c      	ldr	r2, [pc, #112]	; (80012a8 <SystemInit+0xf8>)
 8001236:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001238:	4b18      	ldr	r3, [pc, #96]	; (800129c <SystemInit+0xec>)
 800123a:	4a1c      	ldr	r2, [pc, #112]	; (80012ac <SystemInit+0xfc>)
 800123c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800123e:	4b17      	ldr	r3, [pc, #92]	; (800129c <SystemInit+0xec>)
 8001240:	2200      	movs	r2, #0
 8001242:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001244:	4b15      	ldr	r3, [pc, #84]	; (800129c <SystemInit+0xec>)
 8001246:	4a19      	ldr	r2, [pc, #100]	; (80012ac <SystemInit+0xfc>)
 8001248:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800124a:	4b14      	ldr	r3, [pc, #80]	; (800129c <SystemInit+0xec>)
 800124c:	2200      	movs	r2, #0
 800124e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <SystemInit+0xec>)
 8001252:	4a16      	ldr	r2, [pc, #88]	; (80012ac <SystemInit+0xfc>)
 8001254:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001256:	4b11      	ldr	r3, [pc, #68]	; (800129c <SystemInit+0xec>)
 8001258:	2200      	movs	r2, #0
 800125a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <SystemInit+0xec>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a0e      	ldr	r2, [pc, #56]	; (800129c <SystemInit+0xec>)
 8001262:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001266:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <SystemInit+0xec>)
 800126a:	2200      	movs	r2, #0
 800126c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800126e:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <SystemInit+0x100>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <SystemInit+0x104>)
 8001274:	4013      	ands	r3, r2
 8001276:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800127a:	d202      	bcs.n	8001282 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800127c:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <SystemInit+0x108>)
 800127e:	2201      	movs	r2, #1
 8001280:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001282:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <SystemInit+0x10c>)
 8001284:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001288:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000ed00 	.word	0xe000ed00
 8001298:	52002000 	.word	0x52002000
 800129c:	58024400 	.word	0x58024400
 80012a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80012a4:	02020200 	.word	0x02020200
 80012a8:	01ff0000 	.word	0x01ff0000
 80012ac:	01010280 	.word	0x01010280
 80012b0:	5c001000 	.word	0x5c001000
 80012b4:	ffff0000 	.word	0xffff0000
 80012b8:	51008108 	.word	0x51008108
 80012bc:	52004000 	.word	0x52004000

080012c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012c4:	f7ff ff74 	bl	80011b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012c8:	480c      	ldr	r0, [pc, #48]	; (80012fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012ca:	490d      	ldr	r1, [pc, #52]	; (8001300 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012cc:	4a0d      	ldr	r2, [pc, #52]	; (8001304 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012d0:	e002      	b.n	80012d8 <LoopCopyDataInit>

080012d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012d6:	3304      	adds	r3, #4

080012d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012dc:	d3f9      	bcc.n	80012d2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012de:	4a0a      	ldr	r2, [pc, #40]	; (8001308 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012e0:	4c0a      	ldr	r4, [pc, #40]	; (800130c <LoopFillZerobss+0x22>)
  movs r3, #0
 80012e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e4:	e001      	b.n	80012ea <LoopFillZerobss>

080012e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e8:	3204      	adds	r2, #4

080012ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012ec:	d3fb      	bcc.n	80012e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ee:	f005 fc17 	bl	8006b20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012f2:	f7ff fae5 	bl	80008c0 <main>
  bx  lr
 80012f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012f8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80012fc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001300:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001304:	08008f0c 	.word	0x08008f0c
  ldr r2, =_sbss
 8001308:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 800130c:	24000484 	.word	0x24000484

08001310 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001310:	e7fe      	b.n	8001310 <ADC3_IRQHandler>
	...

08001314 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800131a:	2003      	movs	r0, #3
 800131c:	f000 f96e 	bl	80015fc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001320:	f001 fc4a 	bl	8002bb8 <HAL_RCC_GetSysClockFreq>
 8001324:	4602      	mov	r2, r0
 8001326:	4b15      	ldr	r3, [pc, #84]	; (800137c <HAL_Init+0x68>)
 8001328:	699b      	ldr	r3, [r3, #24]
 800132a:	0a1b      	lsrs	r3, r3, #8
 800132c:	f003 030f 	and.w	r3, r3, #15
 8001330:	4913      	ldr	r1, [pc, #76]	; (8001380 <HAL_Init+0x6c>)
 8001332:	5ccb      	ldrb	r3, [r1, r3]
 8001334:	f003 031f 	and.w	r3, r3, #31
 8001338:	fa22 f303 	lsr.w	r3, r2, r3
 800133c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800133e:	4b0f      	ldr	r3, [pc, #60]	; (800137c <HAL_Init+0x68>)
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	4a0e      	ldr	r2, [pc, #56]	; (8001380 <HAL_Init+0x6c>)
 8001348:	5cd3      	ldrb	r3, [r2, r3]
 800134a:	f003 031f 	and.w	r3, r3, #31
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	fa22 f303 	lsr.w	r3, r2, r3
 8001354:	4a0b      	ldr	r2, [pc, #44]	; (8001384 <HAL_Init+0x70>)
 8001356:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001358:	4a0b      	ldr	r2, [pc, #44]	; (8001388 <HAL_Init+0x74>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800135e:	200f      	movs	r0, #15
 8001360:	f000 f814 	bl	800138c <HAL_InitTick>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e002      	b.n	8001374 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800136e:	f7ff fd03 	bl	8000d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	58024400 	.word	0x58024400
 8001380:	08008b54 	.word	0x08008b54
 8001384:	24000004 	.word	0x24000004
 8001388:	24000000 	.word	0x24000000

0800138c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001394:	4b15      	ldr	r3, [pc, #84]	; (80013ec <HAL_InitTick+0x60>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d101      	bne.n	80013a0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e021      	b.n	80013e4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80013a0:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <HAL_InitTick+0x64>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <HAL_InitTick+0x60>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4619      	mov	r1, r3
 80013aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80013b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 f945 	bl	8001646 <HAL_SYSTICK_Config>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e00e      	b.n	80013e4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2b0f      	cmp	r3, #15
 80013ca:	d80a      	bhi.n	80013e2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013cc:	2200      	movs	r2, #0
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013d4:	f000 f91d 	bl	8001612 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d8:	4a06      	ldr	r2, [pc, #24]	; (80013f4 <HAL_InitTick+0x68>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013de:	2300      	movs	r3, #0
 80013e0:	e000      	b.n	80013e4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	2400000c 	.word	0x2400000c
 80013f0:	24000000 	.word	0x24000000
 80013f4:	24000008 	.word	0x24000008

080013f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <HAL_IncTick+0x20>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <HAL_IncTick+0x24>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4413      	add	r3, r2
 8001408:	4a04      	ldr	r2, [pc, #16]	; (800141c <HAL_IncTick+0x24>)
 800140a:	6013      	str	r3, [r2, #0]
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	2400000c 	.word	0x2400000c
 800141c:	24000334 	.word	0x24000334

08001420 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return uwTick;
 8001424:	4b03      	ldr	r3, [pc, #12]	; (8001434 <HAL_GetTick+0x14>)
 8001426:	681b      	ldr	r3, [r3, #0]
}
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	24000334 	.word	0x24000334

08001438 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001440:	f7ff ffee 	bl	8001420 <HAL_GetTick>
 8001444:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001450:	d005      	beq.n	800145e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001452:	4b0a      	ldr	r3, [pc, #40]	; (800147c <HAL_Delay+0x44>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	461a      	mov	r2, r3
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	4413      	add	r3, r2
 800145c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800145e:	bf00      	nop
 8001460:	f7ff ffde 	bl	8001420 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	429a      	cmp	r2, r3
 800146e:	d8f7      	bhi.n	8001460 <HAL_Delay+0x28>
  {
  }
}
 8001470:	bf00      	nop
 8001472:	bf00      	nop
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	2400000c 	.word	0x2400000c

08001480 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001484:	4b03      	ldr	r3, [pc, #12]	; (8001494 <HAL_GetREVID+0x14>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	0c1b      	lsrs	r3, r3, #16
}
 800148a:	4618      	mov	r0, r3
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	5c001000 	.word	0x5c001000

08001498 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a8:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <__NVIC_SetPriorityGrouping+0x40>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ae:	68ba      	ldr	r2, [r7, #8]
 80014b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014b4:	4013      	ands	r3, r2
 80014b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <__NVIC_SetPriorityGrouping+0x44>)
 80014c2:	4313      	orrs	r3, r2
 80014c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014c6:	4a04      	ldr	r2, [pc, #16]	; (80014d8 <__NVIC_SetPriorityGrouping+0x40>)
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	60d3      	str	r3, [r2, #12]
}
 80014cc:	bf00      	nop
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000ed00 	.word	0xe000ed00
 80014dc:	05fa0000 	.word	0x05fa0000

080014e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e4:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <__NVIC_GetPriorityGrouping+0x18>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	0a1b      	lsrs	r3, r3, #8
 80014ea:	f003 0307 	and.w	r3, r3, #7
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	6039      	str	r1, [r7, #0]
 8001506:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001508:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800150c:	2b00      	cmp	r3, #0
 800150e:	db0a      	blt.n	8001526 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	b2da      	uxtb	r2, r3
 8001514:	490c      	ldr	r1, [pc, #48]	; (8001548 <__NVIC_SetPriority+0x4c>)
 8001516:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800151a:	0112      	lsls	r2, r2, #4
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	440b      	add	r3, r1
 8001520:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001524:	e00a      	b.n	800153c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	b2da      	uxtb	r2, r3
 800152a:	4908      	ldr	r1, [pc, #32]	; (800154c <__NVIC_SetPriority+0x50>)
 800152c:	88fb      	ldrh	r3, [r7, #6]
 800152e:	f003 030f 	and.w	r3, r3, #15
 8001532:	3b04      	subs	r3, #4
 8001534:	0112      	lsls	r2, r2, #4
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	440b      	add	r3, r1
 800153a:	761a      	strb	r2, [r3, #24]
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	e000e100 	.word	0xe000e100
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001550:	b480      	push	{r7}
 8001552:	b089      	sub	sp, #36	; 0x24
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f1c3 0307 	rsb	r3, r3, #7
 800156a:	2b04      	cmp	r3, #4
 800156c:	bf28      	it	cs
 800156e:	2304      	movcs	r3, #4
 8001570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3304      	adds	r3, #4
 8001576:	2b06      	cmp	r3, #6
 8001578:	d902      	bls.n	8001580 <NVIC_EncodePriority+0x30>
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3b03      	subs	r3, #3
 800157e:	e000      	b.n	8001582 <NVIC_EncodePriority+0x32>
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001584:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43da      	mvns	r2, r3
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	401a      	ands	r2, r3
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001598:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	fa01 f303 	lsl.w	r3, r1, r3
 80015a2:	43d9      	mvns	r1, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	4313      	orrs	r3, r2
         );
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3724      	adds	r7, #36	; 0x24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
	...

080015b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015c8:	d301      	bcc.n	80015ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ca:	2301      	movs	r3, #1
 80015cc:	e00f      	b.n	80015ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ce:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <SysTick_Config+0x40>)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015d6:	210f      	movs	r1, #15
 80015d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015dc:	f7ff ff8e 	bl	80014fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e0:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <SysTick_Config+0x40>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015e6:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <SysTick_Config+0x40>)
 80015e8:	2207      	movs	r2, #7
 80015ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	e000e010 	.word	0xe000e010

080015fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff ff47 	bl	8001498 <__NVIC_SetPriorityGrouping>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b086      	sub	sp, #24
 8001616:	af00      	add	r7, sp, #0
 8001618:	4603      	mov	r3, r0
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	607a      	str	r2, [r7, #4]
 800161e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001620:	f7ff ff5e 	bl	80014e0 <__NVIC_GetPriorityGrouping>
 8001624:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	68b9      	ldr	r1, [r7, #8]
 800162a:	6978      	ldr	r0, [r7, #20]
 800162c:	f7ff ff90 	bl	8001550 <NVIC_EncodePriority>
 8001630:	4602      	mov	r2, r0
 8001632:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001636:	4611      	mov	r1, r2
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ff5f 	bl	80014fc <__NVIC_SetPriority>
}
 800163e:	bf00      	nop
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff ffb2 	bl	80015b8 <SysTick_Config>
 8001654:	4603      	mov	r3, r0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001660:	b480      	push	{r7}
 8001662:	b089      	sub	sp, #36	; 0x24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800166a:	2300      	movs	r3, #0
 800166c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800166e:	4b89      	ldr	r3, [pc, #548]	; (8001894 <HAL_GPIO_Init+0x234>)
 8001670:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001672:	e194      	b.n	800199e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	2101      	movs	r1, #1
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	fa01 f303 	lsl.w	r3, r1, r3
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	2b00      	cmp	r3, #0
 8001688:	f000 8186 	beq.w	8001998 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f003 0303 	and.w	r3, r3, #3
 8001694:	2b01      	cmp	r3, #1
 8001696:	d005      	beq.n	80016a4 <HAL_GPIO_Init+0x44>
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d130      	bne.n	8001706 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	2203      	movs	r2, #3
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4013      	ands	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	68da      	ldr	r2, [r3, #12]
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016da:	2201      	movs	r2, #1
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43db      	mvns	r3, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4013      	ands	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	091b      	lsrs	r3, r3, #4
 80016f0:	f003 0201 	and.w	r2, r3, #1
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f003 0303 	and.w	r3, r3, #3
 800170e:	2b03      	cmp	r3, #3
 8001710:	d017      	beq.n	8001742 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	2203      	movs	r2, #3
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43db      	mvns	r3, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4013      	ands	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	689a      	ldr	r2, [r3, #8]
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4313      	orrs	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f003 0303 	and.w	r3, r3, #3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d123      	bne.n	8001796 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	08da      	lsrs	r2, r3, #3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3208      	adds	r2, #8
 8001756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800175a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	220f      	movs	r2, #15
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	43db      	mvns	r3, r3
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4013      	ands	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	691a      	ldr	r2, [r3, #16]
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4313      	orrs	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	08da      	lsrs	r2, r3, #3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3208      	adds	r2, #8
 8001790:	69b9      	ldr	r1, [r7, #24]
 8001792:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	2203      	movs	r2, #3
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43db      	mvns	r3, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4013      	ands	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f003 0203 	and.w	r2, r3, #3
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f000 80e0 	beq.w	8001998 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d8:	4b2f      	ldr	r3, [pc, #188]	; (8001898 <HAL_GPIO_Init+0x238>)
 80017da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017de:	4a2e      	ldr	r2, [pc, #184]	; (8001898 <HAL_GPIO_Init+0x238>)
 80017e0:	f043 0302 	orr.w	r3, r3, #2
 80017e4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80017e8:	4b2b      	ldr	r3, [pc, #172]	; (8001898 <HAL_GPIO_Init+0x238>)
 80017ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017f6:	4a29      	ldr	r2, [pc, #164]	; (800189c <HAL_GPIO_Init+0x23c>)
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	089b      	lsrs	r3, r3, #2
 80017fc:	3302      	adds	r3, #2
 80017fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001802:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f003 0303 	and.w	r3, r3, #3
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	220f      	movs	r2, #15
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4013      	ands	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a20      	ldr	r2, [pc, #128]	; (80018a0 <HAL_GPIO_Init+0x240>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d052      	beq.n	80018c8 <HAL_GPIO_Init+0x268>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a1f      	ldr	r2, [pc, #124]	; (80018a4 <HAL_GPIO_Init+0x244>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d031      	beq.n	800188e <HAL_GPIO_Init+0x22e>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a1e      	ldr	r2, [pc, #120]	; (80018a8 <HAL_GPIO_Init+0x248>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d02b      	beq.n	800188a <HAL_GPIO_Init+0x22a>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a1d      	ldr	r2, [pc, #116]	; (80018ac <HAL_GPIO_Init+0x24c>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d025      	beq.n	8001886 <HAL_GPIO_Init+0x226>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a1c      	ldr	r2, [pc, #112]	; (80018b0 <HAL_GPIO_Init+0x250>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d01f      	beq.n	8001882 <HAL_GPIO_Init+0x222>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a1b      	ldr	r2, [pc, #108]	; (80018b4 <HAL_GPIO_Init+0x254>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d019      	beq.n	800187e <HAL_GPIO_Init+0x21e>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a1a      	ldr	r2, [pc, #104]	; (80018b8 <HAL_GPIO_Init+0x258>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d013      	beq.n	800187a <HAL_GPIO_Init+0x21a>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a19      	ldr	r2, [pc, #100]	; (80018bc <HAL_GPIO_Init+0x25c>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d00d      	beq.n	8001876 <HAL_GPIO_Init+0x216>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a18      	ldr	r2, [pc, #96]	; (80018c0 <HAL_GPIO_Init+0x260>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d007      	beq.n	8001872 <HAL_GPIO_Init+0x212>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a17      	ldr	r2, [pc, #92]	; (80018c4 <HAL_GPIO_Init+0x264>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d101      	bne.n	800186e <HAL_GPIO_Init+0x20e>
 800186a:	2309      	movs	r3, #9
 800186c:	e02d      	b.n	80018ca <HAL_GPIO_Init+0x26a>
 800186e:	230a      	movs	r3, #10
 8001870:	e02b      	b.n	80018ca <HAL_GPIO_Init+0x26a>
 8001872:	2308      	movs	r3, #8
 8001874:	e029      	b.n	80018ca <HAL_GPIO_Init+0x26a>
 8001876:	2307      	movs	r3, #7
 8001878:	e027      	b.n	80018ca <HAL_GPIO_Init+0x26a>
 800187a:	2306      	movs	r3, #6
 800187c:	e025      	b.n	80018ca <HAL_GPIO_Init+0x26a>
 800187e:	2305      	movs	r3, #5
 8001880:	e023      	b.n	80018ca <HAL_GPIO_Init+0x26a>
 8001882:	2304      	movs	r3, #4
 8001884:	e021      	b.n	80018ca <HAL_GPIO_Init+0x26a>
 8001886:	2303      	movs	r3, #3
 8001888:	e01f      	b.n	80018ca <HAL_GPIO_Init+0x26a>
 800188a:	2302      	movs	r3, #2
 800188c:	e01d      	b.n	80018ca <HAL_GPIO_Init+0x26a>
 800188e:	2301      	movs	r3, #1
 8001890:	e01b      	b.n	80018ca <HAL_GPIO_Init+0x26a>
 8001892:	bf00      	nop
 8001894:	58000080 	.word	0x58000080
 8001898:	58024400 	.word	0x58024400
 800189c:	58000400 	.word	0x58000400
 80018a0:	58020000 	.word	0x58020000
 80018a4:	58020400 	.word	0x58020400
 80018a8:	58020800 	.word	0x58020800
 80018ac:	58020c00 	.word	0x58020c00
 80018b0:	58021000 	.word	0x58021000
 80018b4:	58021400 	.word	0x58021400
 80018b8:	58021800 	.word	0x58021800
 80018bc:	58021c00 	.word	0x58021c00
 80018c0:	58022000 	.word	0x58022000
 80018c4:	58022400 	.word	0x58022400
 80018c8:	2300      	movs	r3, #0
 80018ca:	69fa      	ldr	r2, [r7, #28]
 80018cc:	f002 0203 	and.w	r2, r2, #3
 80018d0:	0092      	lsls	r2, r2, #2
 80018d2:	4093      	lsls	r3, r2
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018da:	4938      	ldr	r1, [pc, #224]	; (80019bc <HAL_GPIO_Init+0x35c>)
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	089b      	lsrs	r3, r3, #2
 80018e0:	3302      	adds	r3, #2
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	43db      	mvns	r3, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4013      	ands	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d003      	beq.n	800190e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800190e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	43db      	mvns	r3, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4013      	ands	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	4313      	orrs	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800193c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	43db      	mvns	r3, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4013      	ands	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d003      	beq.n	8001968 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	4313      	orrs	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	43db      	mvns	r3, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4013      	ands	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	4313      	orrs	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	3301      	adds	r3, #1
 800199c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	fa22 f303 	lsr.w	r3, r2, r3
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f47f ae63 	bne.w	8001674 <HAL_GPIO_Init+0x14>
  }
}
 80019ae:	bf00      	nop
 80019b0:	bf00      	nop
 80019b2:	3724      	adds	r7, #36	; 0x24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	58000400 	.word	0x58000400

080019c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	460b      	mov	r3, r1
 80019ca:	807b      	strh	r3, [r7, #2]
 80019cc:	4613      	mov	r3, r2
 80019ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019d0:	787b      	ldrb	r3, [r7, #1]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019d6:	887a      	ldrh	r2, [r7, #2]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80019dc:	e003      	b.n	80019e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80019de:	887b      	ldrh	r3, [r7, #2]
 80019e0:	041a      	lsls	r2, r3, #16
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	619a      	str	r2, [r3, #24]
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b085      	sub	sp, #20
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
 80019fa:	460b      	mov	r3, r1
 80019fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a04:	887a      	ldrh	r2, [r7, #2]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	041a      	lsls	r2, r3, #16
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	43d9      	mvns	r1, r3
 8001a10:	887b      	ldrh	r3, [r7, #2]
 8001a12:	400b      	ands	r3, r1
 8001a14:	431a      	orrs	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	619a      	str	r2, [r3, #24]
}
 8001a1a:	bf00      	nop
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e07f      	b.n	8001b3a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d106      	bne.n	8001a54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7ff f9ac 	bl	8000dac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2224      	movs	r2, #36	; 0x24
 8001a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0201 	bic.w	r2, r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a78:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a88:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d107      	bne.n	8001aa2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	e006      	b.n	8001ab0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001aae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d104      	bne.n	8001ac2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ac0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6859      	ldr	r1, [r3, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4b1d      	ldr	r3, [pc, #116]	; (8001b44 <HAL_I2C_Init+0x11c>)
 8001ace:	430b      	orrs	r3, r1
 8001ad0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68da      	ldr	r2, [r3, #12]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ae0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691a      	ldr	r2, [r3, #16]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	430a      	orrs	r2, r1
 8001afa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69d9      	ldr	r1, [r3, #28]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a1a      	ldr	r2, [r3, #32]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f042 0201 	orr.w	r2, r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2220      	movs	r2, #32
 8001b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	02008000 	.word	0x02008000

08001b48 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08a      	sub	sp, #40	; 0x28
 8001b4c:	af02      	add	r7, sp, #8
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	607a      	str	r2, [r7, #4]
 8001b52:	603b      	str	r3, [r7, #0]
 8001b54:	460b      	mov	r3, r1
 8001b56:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b20      	cmp	r3, #32
 8001b66:	f040 80ef 	bne.w	8001d48 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b78:	d101      	bne.n	8001b7e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	e0e5      	b.n	8001d4a <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d101      	bne.n	8001b8c <HAL_I2C_IsDeviceReady+0x44>
 8001b88:	2302      	movs	r3, #2
 8001b8a:	e0de      	b.n	8001d4a <HAL_I2C_IsDeviceReady+0x202>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2224      	movs	r2, #36	; 0x24
 8001b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d105      	bne.n	8001bb6 <HAL_I2C_IsDeviceReady+0x6e>
 8001baa:	897b      	ldrh	r3, [r7, #10]
 8001bac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001bb0:	4b68      	ldr	r3, [pc, #416]	; (8001d54 <HAL_I2C_IsDeviceReady+0x20c>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	e004      	b.n	8001bc0 <HAL_I2C_IsDeviceReady+0x78>
 8001bb6:	897b      	ldrh	r3, [r7, #10]
 8001bb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bbc:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	6812      	ldr	r2, [r2, #0]
 8001bc4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001bc6:	f7ff fc2b 	bl	8001420 <HAL_GetTick>
 8001bca:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	f003 0320 	and.w	r3, r3, #32
 8001bd6:	2b20      	cmp	r3, #32
 8001bd8:	bf0c      	ite	eq
 8001bda:	2301      	moveq	r3, #1
 8001bdc:	2300      	movne	r3, #0
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	f003 0310 	and.w	r3, r3, #16
 8001bec:	2b10      	cmp	r3, #16
 8001bee:	bf0c      	ite	eq
 8001bf0:	2301      	moveq	r3, #1
 8001bf2:	2300      	movne	r3, #0
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001bf8:	e034      	b.n	8001c64 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c00:	d01a      	beq.n	8001c38 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c02:	f7ff fc0d 	bl	8001420 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d302      	bcc.n	8001c18 <HAL_I2C_IsDeviceReady+0xd0>
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d10f      	bne.n	8001c38 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c24:	f043 0220 	orr.w	r2, r3, #32
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e088      	b.n	8001d4a <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	f003 0320 	and.w	r3, r3, #32
 8001c42:	2b20      	cmp	r3, #32
 8001c44:	bf0c      	ite	eq
 8001c46:	2301      	moveq	r3, #1
 8001c48:	2300      	movne	r3, #0
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	f003 0310 	and.w	r3, r3, #16
 8001c58:	2b10      	cmp	r3, #16
 8001c5a:	bf0c      	ite	eq
 8001c5c:	2301      	moveq	r3, #1
 8001c5e:	2300      	movne	r3, #0
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001c64:	7ffb      	ldrb	r3, [r7, #31]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d102      	bne.n	8001c70 <HAL_I2C_IsDeviceReady+0x128>
 8001c6a:	7fbb      	ldrb	r3, [r7, #30]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0c4      	beq.n	8001bfa <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	f003 0310 	and.w	r3, r3, #16
 8001c7a:	2b10      	cmp	r3, #16
 8001c7c:	d01a      	beq.n	8001cb4 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	2200      	movs	r2, #0
 8001c86:	2120      	movs	r1, #32
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f000 f865 	bl	8001d58 <I2C_WaitOnFlagUntilTimeout>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e058      	b.n	8001d4a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2220      	movs	r2, #32
 8001c9e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	e04a      	b.n	8001d4a <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2120      	movs	r1, #32
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f000 f84a 	bl	8001d58 <I2C_WaitOnFlagUntilTimeout>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e03d      	b.n	8001d4a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2210      	movs	r2, #16
 8001cd4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2220      	movs	r2, #32
 8001cdc:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d118      	bne.n	8001d18 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cf4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2120      	movs	r1, #32
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f000 f829 	bl	8001d58 <I2C_WaitOnFlagUntilTimeout>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e01c      	b.n	8001d4a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2220      	movs	r2, #32
 8001d16:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	f63f af3d 	bhi.w	8001ba2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2220      	movs	r2, #32
 8001d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d34:	f043 0220 	orr.w	r2, r3, #32
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e000      	b.n	8001d4a <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8001d48:	2302      	movs	r3, #2
  }
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3720      	adds	r7, #32
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	02002000 	.word	0x02002000

08001d58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	603b      	str	r3, [r7, #0]
 8001d64:	4613      	mov	r3, r2
 8001d66:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d68:	e031      	b.n	8001dce <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d70:	d02d      	beq.n	8001dce <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d72:	f7ff fb55 	bl	8001420 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d302      	bcc.n	8001d88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d122      	bne.n	8001dce <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	699a      	ldr	r2, [r3, #24]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	4013      	ands	r3, r2
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	bf0c      	ite	eq
 8001d98:	2301      	moveq	r3, #1
 8001d9a:	2300      	movne	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	461a      	mov	r2, r3
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d113      	bne.n	8001dce <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001daa:	f043 0220 	orr.w	r2, r3, #32
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2220      	movs	r2, #32
 8001db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e00f      	b.n	8001dee <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	699a      	ldr	r2, [r3, #24]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	bf0c      	ite	eq
 8001dde:	2301      	moveq	r3, #1
 8001de0:	2300      	movne	r3, #0
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	461a      	mov	r2, r3
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d0be      	beq.n	8001d6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
 8001dfe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b20      	cmp	r3, #32
 8001e0a:	d138      	bne.n	8001e7e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d101      	bne.n	8001e1a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e032      	b.n	8001e80 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2224      	movs	r2, #36	; 0x24
 8001e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 0201 	bic.w	r2, r2, #1
 8001e38:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e48:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6819      	ldr	r1, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f042 0201 	orr.w	r2, r2, #1
 8001e68:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2220      	movs	r2, #32
 8001e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	e000      	b.n	8001e80 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e7e:	2302      	movs	r3, #2
  }
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b20      	cmp	r3, #32
 8001ea0:	d139      	bne.n	8001f16 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d101      	bne.n	8001eb0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001eac:	2302      	movs	r3, #2
 8001eae:	e033      	b.n	8001f18 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2224      	movs	r2, #36	; 0x24
 8001ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 0201 	bic.w	r2, r2, #1
 8001ece:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ede:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	021b      	lsls	r3, r3, #8
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f042 0201 	orr.w	r2, r2, #1
 8001f00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2220      	movs	r2, #32
 8001f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f12:	2300      	movs	r3, #0
 8001f14:	e000      	b.n	8001f18 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f16:	2302      	movs	r3, #2
  }
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001f2c:	4b19      	ldr	r3, [pc, #100]	; (8001f94 <HAL_PWREx_ConfigSupply+0x70>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b04      	cmp	r3, #4
 8001f36:	d00a      	beq.n	8001f4e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001f38:	4b16      	ldr	r3, [pc, #88]	; (8001f94 <HAL_PWREx_ConfigSupply+0x70>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d001      	beq.n	8001f4a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e01f      	b.n	8001f8a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	e01d      	b.n	8001f8a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001f4e:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <HAL_PWREx_ConfigSupply+0x70>)
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	f023 0207 	bic.w	r2, r3, #7
 8001f56:	490f      	ldr	r1, [pc, #60]	; (8001f94 <HAL_PWREx_ConfigSupply+0x70>)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001f5e:	f7ff fa5f 	bl	8001420 <HAL_GetTick>
 8001f62:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001f64:	e009      	b.n	8001f7a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001f66:	f7ff fa5b 	bl	8001420 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f74:	d901      	bls.n	8001f7a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e007      	b.n	8001f8a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001f7a:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_PWREx_ConfigSupply+0x70>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f86:	d1ee      	bne.n	8001f66 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	58024800 	.word	0x58024800

08001f98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08c      	sub	sp, #48	; 0x30
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d102      	bne.n	8001fac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	f000 bc48 	b.w	800283c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 8088 	beq.w	80020ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fba:	4b99      	ldr	r3, [pc, #612]	; (8002220 <HAL_RCC_OscConfig+0x288>)
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001fc4:	4b96      	ldr	r3, [pc, #600]	; (8002220 <HAL_RCC_OscConfig+0x288>)
 8001fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fcc:	2b10      	cmp	r3, #16
 8001fce:	d007      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x48>
 8001fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd2:	2b18      	cmp	r3, #24
 8001fd4:	d111      	bne.n	8001ffa <HAL_RCC_OscConfig+0x62>
 8001fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd8:	f003 0303 	and.w	r3, r3, #3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d10c      	bne.n	8001ffa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe0:	4b8f      	ldr	r3, [pc, #572]	; (8002220 <HAL_RCC_OscConfig+0x288>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d06d      	beq.n	80020c8 <HAL_RCC_OscConfig+0x130>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d169      	bne.n	80020c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	f000 bc21 	b.w	800283c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002002:	d106      	bne.n	8002012 <HAL_RCC_OscConfig+0x7a>
 8002004:	4b86      	ldr	r3, [pc, #536]	; (8002220 <HAL_RCC_OscConfig+0x288>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a85      	ldr	r2, [pc, #532]	; (8002220 <HAL_RCC_OscConfig+0x288>)
 800200a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800200e:	6013      	str	r3, [r2, #0]
 8002010:	e02e      	b.n	8002070 <HAL_RCC_OscConfig+0xd8>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10c      	bne.n	8002034 <HAL_RCC_OscConfig+0x9c>
 800201a:	4b81      	ldr	r3, [pc, #516]	; (8002220 <HAL_RCC_OscConfig+0x288>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a80      	ldr	r2, [pc, #512]	; (8002220 <HAL_RCC_OscConfig+0x288>)
 8002020:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	4b7e      	ldr	r3, [pc, #504]	; (8002220 <HAL_RCC_OscConfig+0x288>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a7d      	ldr	r2, [pc, #500]	; (8002220 <HAL_RCC_OscConfig+0x288>)
 800202c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	e01d      	b.n	8002070 <HAL_RCC_OscConfig+0xd8>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800203c:	d10c      	bne.n	8002058 <HAL_RCC_OscConfig+0xc0>
 800203e:	4b78      	ldr	r3, [pc, #480]	; (8002220 <HAL_RCC_OscConfig+0x288>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a77      	ldr	r2, [pc, #476]	; (8002220 <HAL_RCC_OscConfig+0x288>)
 8002044:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002048:	6013      	str	r3, [r2, #0]
 800204a:	4b75      	ldr	r3, [pc, #468]	; (8002220 <HAL_RCC_OscConfig+0x288>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a74      	ldr	r2, [pc, #464]	; (8002220 <HAL_RCC_OscConfig+0x288>)
 8002050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	e00b      	b.n	8002070 <HAL_RCC_OscConfig+0xd8>
 8002058:	4b71      	ldr	r3, [pc, #452]	; (8002220 <HAL_RCC_OscConfig+0x288>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a70      	ldr	r2, [pc, #448]	; (8002220 <HAL_RCC_OscConfig+0x288>)
 800205e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002062:	6013      	str	r3, [r2, #0]
 8002064:	4b6e      	ldr	r3, [pc, #440]	; (8002220 <HAL_RCC_OscConfig+0x288>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a6d      	ldr	r2, [pc, #436]	; (8002220 <HAL_RCC_OscConfig+0x288>)
 800206a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800206e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d013      	beq.n	80020a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002078:	f7ff f9d2 	bl	8001420 <HAL_GetTick>
 800207c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002080:	f7ff f9ce 	bl	8001420 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b64      	cmp	r3, #100	; 0x64
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e3d4      	b.n	800283c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002092:	4b63      	ldr	r3, [pc, #396]	; (8002220 <HAL_RCC_OscConfig+0x288>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0f0      	beq.n	8002080 <HAL_RCC_OscConfig+0xe8>
 800209e:	e014      	b.n	80020ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a0:	f7ff f9be 	bl	8001420 <HAL_GetTick>
 80020a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020a8:	f7ff f9ba 	bl	8001420 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b64      	cmp	r3, #100	; 0x64
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e3c0      	b.n	800283c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80020ba:	4b59      	ldr	r3, [pc, #356]	; (8002220 <HAL_RCC_OscConfig+0x288>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1f0      	bne.n	80020a8 <HAL_RCC_OscConfig+0x110>
 80020c6:	e000      	b.n	80020ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 80ca 	beq.w	800226c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020d8:	4b51      	ldr	r3, [pc, #324]	; (8002220 <HAL_RCC_OscConfig+0x288>)
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020e0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80020e2:	4b4f      	ldr	r3, [pc, #316]	; (8002220 <HAL_RCC_OscConfig+0x288>)
 80020e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80020e8:	6a3b      	ldr	r3, [r7, #32]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d007      	beq.n	80020fe <HAL_RCC_OscConfig+0x166>
 80020ee:	6a3b      	ldr	r3, [r7, #32]
 80020f0:	2b18      	cmp	r3, #24
 80020f2:	d156      	bne.n	80021a2 <HAL_RCC_OscConfig+0x20a>
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d151      	bne.n	80021a2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020fe:	4b48      	ldr	r3, [pc, #288]	; (8002220 <HAL_RCC_OscConfig+0x288>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0304 	and.w	r3, r3, #4
 8002106:	2b00      	cmp	r3, #0
 8002108:	d005      	beq.n	8002116 <HAL_RCC_OscConfig+0x17e>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e392      	b.n	800283c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002116:	4b42      	ldr	r3, [pc, #264]	; (8002220 <HAL_RCC_OscConfig+0x288>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f023 0219 	bic.w	r2, r3, #25
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	493f      	ldr	r1, [pc, #252]	; (8002220 <HAL_RCC_OscConfig+0x288>)
 8002124:	4313      	orrs	r3, r2
 8002126:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002128:	f7ff f97a 	bl	8001420 <HAL_GetTick>
 800212c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002130:	f7ff f976 	bl	8001420 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e37c      	b.n	800283c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002142:	4b37      	ldr	r3, [pc, #220]	; (8002220 <HAL_RCC_OscConfig+0x288>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0304 	and.w	r3, r3, #4
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0f0      	beq.n	8002130 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800214e:	f7ff f997 	bl	8001480 <HAL_GetREVID>
 8002152:	4603      	mov	r3, r0
 8002154:	f241 0203 	movw	r2, #4099	; 0x1003
 8002158:	4293      	cmp	r3, r2
 800215a:	d817      	bhi.n	800218c <HAL_RCC_OscConfig+0x1f4>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	2b40      	cmp	r3, #64	; 0x40
 8002162:	d108      	bne.n	8002176 <HAL_RCC_OscConfig+0x1de>
 8002164:	4b2e      	ldr	r3, [pc, #184]	; (8002220 <HAL_RCC_OscConfig+0x288>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800216c:	4a2c      	ldr	r2, [pc, #176]	; (8002220 <HAL_RCC_OscConfig+0x288>)
 800216e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002172:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002174:	e07a      	b.n	800226c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002176:	4b2a      	ldr	r3, [pc, #168]	; (8002220 <HAL_RCC_OscConfig+0x288>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	031b      	lsls	r3, r3, #12
 8002184:	4926      	ldr	r1, [pc, #152]	; (8002220 <HAL_RCC_OscConfig+0x288>)
 8002186:	4313      	orrs	r3, r2
 8002188:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800218a:	e06f      	b.n	800226c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218c:	4b24      	ldr	r3, [pc, #144]	; (8002220 <HAL_RCC_OscConfig+0x288>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	061b      	lsls	r3, r3, #24
 800219a:	4921      	ldr	r1, [pc, #132]	; (8002220 <HAL_RCC_OscConfig+0x288>)
 800219c:	4313      	orrs	r3, r2
 800219e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021a0:	e064      	b.n	800226c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d047      	beq.n	800223a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80021aa:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <HAL_RCC_OscConfig+0x288>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f023 0219 	bic.w	r2, r3, #25
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	491a      	ldr	r1, [pc, #104]	; (8002220 <HAL_RCC_OscConfig+0x288>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021bc:	f7ff f930 	bl	8001420 <HAL_GetTick>
 80021c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021c4:	f7ff f92c 	bl	8001420 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e332      	b.n	800283c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021d6:	4b12      	ldr	r3, [pc, #72]	; (8002220 <HAL_RCC_OscConfig+0x288>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0304 	and.w	r3, r3, #4
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0f0      	beq.n	80021c4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e2:	f7ff f94d 	bl	8001480 <HAL_GetREVID>
 80021e6:	4603      	mov	r3, r0
 80021e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d819      	bhi.n	8002224 <HAL_RCC_OscConfig+0x28c>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	2b40      	cmp	r3, #64	; 0x40
 80021f6:	d108      	bne.n	800220a <HAL_RCC_OscConfig+0x272>
 80021f8:	4b09      	ldr	r3, [pc, #36]	; (8002220 <HAL_RCC_OscConfig+0x288>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002200:	4a07      	ldr	r2, [pc, #28]	; (8002220 <HAL_RCC_OscConfig+0x288>)
 8002202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002206:	6053      	str	r3, [r2, #4]
 8002208:	e030      	b.n	800226c <HAL_RCC_OscConfig+0x2d4>
 800220a:	4b05      	ldr	r3, [pc, #20]	; (8002220 <HAL_RCC_OscConfig+0x288>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	031b      	lsls	r3, r3, #12
 8002218:	4901      	ldr	r1, [pc, #4]	; (8002220 <HAL_RCC_OscConfig+0x288>)
 800221a:	4313      	orrs	r3, r2
 800221c:	604b      	str	r3, [r1, #4]
 800221e:	e025      	b.n	800226c <HAL_RCC_OscConfig+0x2d4>
 8002220:	58024400 	.word	0x58024400
 8002224:	4b9a      	ldr	r3, [pc, #616]	; (8002490 <HAL_RCC_OscConfig+0x4f8>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	061b      	lsls	r3, r3, #24
 8002232:	4997      	ldr	r1, [pc, #604]	; (8002490 <HAL_RCC_OscConfig+0x4f8>)
 8002234:	4313      	orrs	r3, r2
 8002236:	604b      	str	r3, [r1, #4]
 8002238:	e018      	b.n	800226c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800223a:	4b95      	ldr	r3, [pc, #596]	; (8002490 <HAL_RCC_OscConfig+0x4f8>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a94      	ldr	r2, [pc, #592]	; (8002490 <HAL_RCC_OscConfig+0x4f8>)
 8002240:	f023 0301 	bic.w	r3, r3, #1
 8002244:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002246:	f7ff f8eb 	bl	8001420 <HAL_GetTick>
 800224a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800224c:	e008      	b.n	8002260 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800224e:	f7ff f8e7 	bl	8001420 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e2ed      	b.n	800283c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002260:	4b8b      	ldr	r3, [pc, #556]	; (8002490 <HAL_RCC_OscConfig+0x4f8>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1f0      	bne.n	800224e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0310 	and.w	r3, r3, #16
 8002274:	2b00      	cmp	r3, #0
 8002276:	f000 80a9 	beq.w	80023cc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800227a:	4b85      	ldr	r3, [pc, #532]	; (8002490 <HAL_RCC_OscConfig+0x4f8>)
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002282:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002284:	4b82      	ldr	r3, [pc, #520]	; (8002490 <HAL_RCC_OscConfig+0x4f8>)
 8002286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002288:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	2b08      	cmp	r3, #8
 800228e:	d007      	beq.n	80022a0 <HAL_RCC_OscConfig+0x308>
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	2b18      	cmp	r3, #24
 8002294:	d13a      	bne.n	800230c <HAL_RCC_OscConfig+0x374>
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	f003 0303 	and.w	r3, r3, #3
 800229c:	2b01      	cmp	r3, #1
 800229e:	d135      	bne.n	800230c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80022a0:	4b7b      	ldr	r3, [pc, #492]	; (8002490 <HAL_RCC_OscConfig+0x4f8>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d005      	beq.n	80022b8 <HAL_RCC_OscConfig+0x320>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69db      	ldr	r3, [r3, #28]
 80022b0:	2b80      	cmp	r3, #128	; 0x80
 80022b2:	d001      	beq.n	80022b8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e2c1      	b.n	800283c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80022b8:	f7ff f8e2 	bl	8001480 <HAL_GetREVID>
 80022bc:	4603      	mov	r3, r0
 80022be:	f241 0203 	movw	r2, #4099	; 0x1003
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d817      	bhi.n	80022f6 <HAL_RCC_OscConfig+0x35e>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	2b20      	cmp	r3, #32
 80022cc:	d108      	bne.n	80022e0 <HAL_RCC_OscConfig+0x348>
 80022ce:	4b70      	ldr	r3, [pc, #448]	; (8002490 <HAL_RCC_OscConfig+0x4f8>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80022d6:	4a6e      	ldr	r2, [pc, #440]	; (8002490 <HAL_RCC_OscConfig+0x4f8>)
 80022d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80022dc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80022de:	e075      	b.n	80023cc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80022e0:	4b6b      	ldr	r3, [pc, #428]	; (8002490 <HAL_RCC_OscConfig+0x4f8>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	069b      	lsls	r3, r3, #26
 80022ee:	4968      	ldr	r1, [pc, #416]	; (8002490 <HAL_RCC_OscConfig+0x4f8>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80022f4:	e06a      	b.n	80023cc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80022f6:	4b66      	ldr	r3, [pc, #408]	; (8002490 <HAL_RCC_OscConfig+0x4f8>)
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	061b      	lsls	r3, r3, #24
 8002304:	4962      	ldr	r1, [pc, #392]	; (8002490 <HAL_RCC_OscConfig+0x4f8>)
 8002306:	4313      	orrs	r3, r2
 8002308:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800230a:	e05f      	b.n	80023cc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d042      	beq.n	800239a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002314:	4b5e      	ldr	r3, [pc, #376]	; (8002490 <HAL_RCC_OscConfig+0x4f8>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a5d      	ldr	r2, [pc, #372]	; (8002490 <HAL_RCC_OscConfig+0x4f8>)
 800231a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800231e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002320:	f7ff f87e 	bl	8001420 <HAL_GetTick>
 8002324:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002328:	f7ff f87a 	bl	8001420 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e280      	b.n	800283c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800233a:	4b55      	ldr	r3, [pc, #340]	; (8002490 <HAL_RCC_OscConfig+0x4f8>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0f0      	beq.n	8002328 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002346:	f7ff f89b 	bl	8001480 <HAL_GetREVID>
 800234a:	4603      	mov	r3, r0
 800234c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002350:	4293      	cmp	r3, r2
 8002352:	d817      	bhi.n	8002384 <HAL_RCC_OscConfig+0x3ec>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	2b20      	cmp	r3, #32
 800235a:	d108      	bne.n	800236e <HAL_RCC_OscConfig+0x3d6>
 800235c:	4b4c      	ldr	r3, [pc, #304]	; (8002490 <HAL_RCC_OscConfig+0x4f8>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002364:	4a4a      	ldr	r2, [pc, #296]	; (8002490 <HAL_RCC_OscConfig+0x4f8>)
 8002366:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800236a:	6053      	str	r3, [r2, #4]
 800236c:	e02e      	b.n	80023cc <HAL_RCC_OscConfig+0x434>
 800236e:	4b48      	ldr	r3, [pc, #288]	; (8002490 <HAL_RCC_OscConfig+0x4f8>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	069b      	lsls	r3, r3, #26
 800237c:	4944      	ldr	r1, [pc, #272]	; (8002490 <HAL_RCC_OscConfig+0x4f8>)
 800237e:	4313      	orrs	r3, r2
 8002380:	604b      	str	r3, [r1, #4]
 8002382:	e023      	b.n	80023cc <HAL_RCC_OscConfig+0x434>
 8002384:	4b42      	ldr	r3, [pc, #264]	; (8002490 <HAL_RCC_OscConfig+0x4f8>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	061b      	lsls	r3, r3, #24
 8002392:	493f      	ldr	r1, [pc, #252]	; (8002490 <HAL_RCC_OscConfig+0x4f8>)
 8002394:	4313      	orrs	r3, r2
 8002396:	60cb      	str	r3, [r1, #12]
 8002398:	e018      	b.n	80023cc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800239a:	4b3d      	ldr	r3, [pc, #244]	; (8002490 <HAL_RCC_OscConfig+0x4f8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a3c      	ldr	r2, [pc, #240]	; (8002490 <HAL_RCC_OscConfig+0x4f8>)
 80023a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a6:	f7ff f83b 	bl	8001420 <HAL_GetTick>
 80023aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80023ae:	f7ff f837 	bl	8001420 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e23d      	b.n	800283c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80023c0:	4b33      	ldr	r3, [pc, #204]	; (8002490 <HAL_RCC_OscConfig+0x4f8>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1f0      	bne.n	80023ae <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0308 	and.w	r3, r3, #8
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d036      	beq.n	8002446 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d019      	beq.n	8002414 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023e0:	4b2b      	ldr	r3, [pc, #172]	; (8002490 <HAL_RCC_OscConfig+0x4f8>)
 80023e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023e4:	4a2a      	ldr	r2, [pc, #168]	; (8002490 <HAL_RCC_OscConfig+0x4f8>)
 80023e6:	f043 0301 	orr.w	r3, r3, #1
 80023ea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ec:	f7ff f818 	bl	8001420 <HAL_GetTick>
 80023f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023f4:	f7ff f814 	bl	8001420 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e21a      	b.n	800283c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002406:	4b22      	ldr	r3, [pc, #136]	; (8002490 <HAL_RCC_OscConfig+0x4f8>)
 8002408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0f0      	beq.n	80023f4 <HAL_RCC_OscConfig+0x45c>
 8002412:	e018      	b.n	8002446 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002414:	4b1e      	ldr	r3, [pc, #120]	; (8002490 <HAL_RCC_OscConfig+0x4f8>)
 8002416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002418:	4a1d      	ldr	r2, [pc, #116]	; (8002490 <HAL_RCC_OscConfig+0x4f8>)
 800241a:	f023 0301 	bic.w	r3, r3, #1
 800241e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002420:	f7fe fffe 	bl	8001420 <HAL_GetTick>
 8002424:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002428:	f7fe fffa 	bl	8001420 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e200      	b.n	800283c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800243a:	4b15      	ldr	r3, [pc, #84]	; (8002490 <HAL_RCC_OscConfig+0x4f8>)
 800243c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f0      	bne.n	8002428 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0320 	and.w	r3, r3, #32
 800244e:	2b00      	cmp	r3, #0
 8002450:	d039      	beq.n	80024c6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d01c      	beq.n	8002494 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800245a:	4b0d      	ldr	r3, [pc, #52]	; (8002490 <HAL_RCC_OscConfig+0x4f8>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a0c      	ldr	r2, [pc, #48]	; (8002490 <HAL_RCC_OscConfig+0x4f8>)
 8002460:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002464:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002466:	f7fe ffdb 	bl	8001420 <HAL_GetTick>
 800246a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800246e:	f7fe ffd7 	bl	8001420 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e1dd      	b.n	800283c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002480:	4b03      	ldr	r3, [pc, #12]	; (8002490 <HAL_RCC_OscConfig+0x4f8>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0f0      	beq.n	800246e <HAL_RCC_OscConfig+0x4d6>
 800248c:	e01b      	b.n	80024c6 <HAL_RCC_OscConfig+0x52e>
 800248e:	bf00      	nop
 8002490:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002494:	4b9b      	ldr	r3, [pc, #620]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a9a      	ldr	r2, [pc, #616]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 800249a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800249e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80024a0:	f7fe ffbe 	bl	8001420 <HAL_GetTick>
 80024a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024a8:	f7fe ffba 	bl	8001420 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e1c0      	b.n	800283c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80024ba:	4b92      	ldr	r3, [pc, #584]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f0      	bne.n	80024a8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0304 	and.w	r3, r3, #4
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 8081 	beq.w	80025d6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80024d4:	4b8c      	ldr	r3, [pc, #560]	; (8002708 <HAL_RCC_OscConfig+0x770>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a8b      	ldr	r2, [pc, #556]	; (8002708 <HAL_RCC_OscConfig+0x770>)
 80024da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024e0:	f7fe ff9e 	bl	8001420 <HAL_GetTick>
 80024e4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e8:	f7fe ff9a 	bl	8001420 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b64      	cmp	r3, #100	; 0x64
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e1a0      	b.n	800283c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024fa:	4b83      	ldr	r3, [pc, #524]	; (8002708 <HAL_RCC_OscConfig+0x770>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d106      	bne.n	800251c <HAL_RCC_OscConfig+0x584>
 800250e:	4b7d      	ldr	r3, [pc, #500]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 8002510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002512:	4a7c      	ldr	r2, [pc, #496]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	6713      	str	r3, [r2, #112]	; 0x70
 800251a:	e02d      	b.n	8002578 <HAL_RCC_OscConfig+0x5e0>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10c      	bne.n	800253e <HAL_RCC_OscConfig+0x5a6>
 8002524:	4b77      	ldr	r3, [pc, #476]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 8002526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002528:	4a76      	ldr	r2, [pc, #472]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 800252a:	f023 0301 	bic.w	r3, r3, #1
 800252e:	6713      	str	r3, [r2, #112]	; 0x70
 8002530:	4b74      	ldr	r3, [pc, #464]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 8002532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002534:	4a73      	ldr	r2, [pc, #460]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 8002536:	f023 0304 	bic.w	r3, r3, #4
 800253a:	6713      	str	r3, [r2, #112]	; 0x70
 800253c:	e01c      	b.n	8002578 <HAL_RCC_OscConfig+0x5e0>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	2b05      	cmp	r3, #5
 8002544:	d10c      	bne.n	8002560 <HAL_RCC_OscConfig+0x5c8>
 8002546:	4b6f      	ldr	r3, [pc, #444]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 8002548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254a:	4a6e      	ldr	r2, [pc, #440]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 800254c:	f043 0304 	orr.w	r3, r3, #4
 8002550:	6713      	str	r3, [r2, #112]	; 0x70
 8002552:	4b6c      	ldr	r3, [pc, #432]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 8002554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002556:	4a6b      	ldr	r2, [pc, #428]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	6713      	str	r3, [r2, #112]	; 0x70
 800255e:	e00b      	b.n	8002578 <HAL_RCC_OscConfig+0x5e0>
 8002560:	4b68      	ldr	r3, [pc, #416]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 8002562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002564:	4a67      	ldr	r2, [pc, #412]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 8002566:	f023 0301 	bic.w	r3, r3, #1
 800256a:	6713      	str	r3, [r2, #112]	; 0x70
 800256c:	4b65      	ldr	r3, [pc, #404]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 800256e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002570:	4a64      	ldr	r2, [pc, #400]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 8002572:	f023 0304 	bic.w	r3, r3, #4
 8002576:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d015      	beq.n	80025ac <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002580:	f7fe ff4e 	bl	8001420 <HAL_GetTick>
 8002584:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002586:	e00a      	b.n	800259e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002588:	f7fe ff4a 	bl	8001420 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	f241 3288 	movw	r2, #5000	; 0x1388
 8002596:	4293      	cmp	r3, r2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e14e      	b.n	800283c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800259e:	4b59      	ldr	r3, [pc, #356]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 80025a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0ee      	beq.n	8002588 <HAL_RCC_OscConfig+0x5f0>
 80025aa:	e014      	b.n	80025d6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ac:	f7fe ff38 	bl	8001420 <HAL_GetTick>
 80025b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80025b2:	e00a      	b.n	80025ca <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b4:	f7fe ff34 	bl	8001420 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e138      	b.n	800283c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80025ca:	4b4e      	ldr	r3, [pc, #312]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 80025cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1ee      	bne.n	80025b4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 812d 	beq.w	800283a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80025e0:	4b48      	ldr	r3, [pc, #288]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025e8:	2b18      	cmp	r3, #24
 80025ea:	f000 80bd 	beq.w	8002768 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	f040 809e 	bne.w	8002734 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f8:	4b42      	ldr	r3, [pc, #264]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a41      	ldr	r2, [pc, #260]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 80025fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002602:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002604:	f7fe ff0c 	bl	8001420 <HAL_GetTick>
 8002608:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800260c:	f7fe ff08 	bl	8001420 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e10e      	b.n	800283c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800261e:	4b39      	ldr	r3, [pc, #228]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1f0      	bne.n	800260c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800262a:	4b36      	ldr	r3, [pc, #216]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 800262c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800262e:	4b37      	ldr	r3, [pc, #220]	; (800270c <HAL_RCC_OscConfig+0x774>)
 8002630:	4013      	ands	r3, r2
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800263a:	0112      	lsls	r2, r2, #4
 800263c:	430a      	orrs	r2, r1
 800263e:	4931      	ldr	r1, [pc, #196]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 8002640:	4313      	orrs	r3, r2
 8002642:	628b      	str	r3, [r1, #40]	; 0x28
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002648:	3b01      	subs	r3, #1
 800264a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002652:	3b01      	subs	r3, #1
 8002654:	025b      	lsls	r3, r3, #9
 8002656:	b29b      	uxth	r3, r3
 8002658:	431a      	orrs	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800265e:	3b01      	subs	r3, #1
 8002660:	041b      	lsls	r3, r3, #16
 8002662:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266c:	3b01      	subs	r3, #1
 800266e:	061b      	lsls	r3, r3, #24
 8002670:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002674:	4923      	ldr	r1, [pc, #140]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 8002676:	4313      	orrs	r3, r2
 8002678:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800267a:	4b22      	ldr	r3, [pc, #136]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 800267c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267e:	4a21      	ldr	r2, [pc, #132]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 8002680:	f023 0301 	bic.w	r3, r3, #1
 8002684:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002686:	4b1f      	ldr	r3, [pc, #124]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 8002688:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800268a:	4b21      	ldr	r3, [pc, #132]	; (8002710 <HAL_RCC_OscConfig+0x778>)
 800268c:	4013      	ands	r3, r2
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002692:	00d2      	lsls	r2, r2, #3
 8002694:	491b      	ldr	r1, [pc, #108]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 8002696:	4313      	orrs	r3, r2
 8002698:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800269a:	4b1a      	ldr	r3, [pc, #104]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 800269c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269e:	f023 020c 	bic.w	r2, r3, #12
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	4917      	ldr	r1, [pc, #92]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80026ac:	4b15      	ldr	r3, [pc, #84]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 80026ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b0:	f023 0202 	bic.w	r2, r3, #2
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b8:	4912      	ldr	r1, [pc, #72]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80026be:	4b11      	ldr	r3, [pc, #68]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 80026c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c2:	4a10      	ldr	r2, [pc, #64]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 80026c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026ca:	4b0e      	ldr	r3, [pc, #56]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 80026cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ce:	4a0d      	ldr	r2, [pc, #52]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 80026d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80026d6:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 80026d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026da:	4a0a      	ldr	r2, [pc, #40]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 80026dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80026e2:	4b08      	ldr	r3, [pc, #32]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 80026e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e6:	4a07      	ldr	r2, [pc, #28]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026ee:	4b05      	ldr	r3, [pc, #20]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a04      	ldr	r2, [pc, #16]	; (8002704 <HAL_RCC_OscConfig+0x76c>)
 80026f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fa:	f7fe fe91 	bl	8001420 <HAL_GetTick>
 80026fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002700:	e011      	b.n	8002726 <HAL_RCC_OscConfig+0x78e>
 8002702:	bf00      	nop
 8002704:	58024400 	.word	0x58024400
 8002708:	58024800 	.word	0x58024800
 800270c:	fffffc0c 	.word	0xfffffc0c
 8002710:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002714:	f7fe fe84 	bl	8001420 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e08a      	b.n	800283c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002726:	4b47      	ldr	r3, [pc, #284]	; (8002844 <HAL_RCC_OscConfig+0x8ac>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0f0      	beq.n	8002714 <HAL_RCC_OscConfig+0x77c>
 8002732:	e082      	b.n	800283a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002734:	4b43      	ldr	r3, [pc, #268]	; (8002844 <HAL_RCC_OscConfig+0x8ac>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a42      	ldr	r2, [pc, #264]	; (8002844 <HAL_RCC_OscConfig+0x8ac>)
 800273a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800273e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002740:	f7fe fe6e 	bl	8001420 <HAL_GetTick>
 8002744:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002748:	f7fe fe6a 	bl	8001420 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e070      	b.n	800283c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800275a:	4b3a      	ldr	r3, [pc, #232]	; (8002844 <HAL_RCC_OscConfig+0x8ac>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1f0      	bne.n	8002748 <HAL_RCC_OscConfig+0x7b0>
 8002766:	e068      	b.n	800283a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002768:	4b36      	ldr	r3, [pc, #216]	; (8002844 <HAL_RCC_OscConfig+0x8ac>)
 800276a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800276e:	4b35      	ldr	r3, [pc, #212]	; (8002844 <HAL_RCC_OscConfig+0x8ac>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002778:	2b01      	cmp	r3, #1
 800277a:	d031      	beq.n	80027e0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	f003 0203 	and.w	r2, r3, #3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002786:	429a      	cmp	r2, r3
 8002788:	d12a      	bne.n	80027e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	091b      	lsrs	r3, r3, #4
 800278e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002796:	429a      	cmp	r2, r3
 8002798:	d122      	bne.n	80027e0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d11a      	bne.n	80027e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	0a5b      	lsrs	r3, r3, #9
 80027ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d111      	bne.n	80027e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	0c1b      	lsrs	r3, r3, #16
 80027c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d108      	bne.n	80027e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	0e1b      	lsrs	r3, r3, #24
 80027d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027da:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80027dc:	429a      	cmp	r2, r3
 80027de:	d001      	beq.n	80027e4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e02b      	b.n	800283c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80027e4:	4b17      	ldr	r3, [pc, #92]	; (8002844 <HAL_RCC_OscConfig+0x8ac>)
 80027e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e8:	08db      	lsrs	r3, r3, #3
 80027ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80027ee:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d01f      	beq.n	800283a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80027fa:	4b12      	ldr	r3, [pc, #72]	; (8002844 <HAL_RCC_OscConfig+0x8ac>)
 80027fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fe:	4a11      	ldr	r2, [pc, #68]	; (8002844 <HAL_RCC_OscConfig+0x8ac>)
 8002800:	f023 0301 	bic.w	r3, r3, #1
 8002804:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002806:	f7fe fe0b 	bl	8001420 <HAL_GetTick>
 800280a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800280c:	bf00      	nop
 800280e:	f7fe fe07 	bl	8001420 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	4293      	cmp	r3, r2
 8002818:	d0f9      	beq.n	800280e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800281a:	4b0a      	ldr	r3, [pc, #40]	; (8002844 <HAL_RCC_OscConfig+0x8ac>)
 800281c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800281e:	4b0a      	ldr	r3, [pc, #40]	; (8002848 <HAL_RCC_OscConfig+0x8b0>)
 8002820:	4013      	ands	r3, r2
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002826:	00d2      	lsls	r2, r2, #3
 8002828:	4906      	ldr	r1, [pc, #24]	; (8002844 <HAL_RCC_OscConfig+0x8ac>)
 800282a:	4313      	orrs	r3, r2
 800282c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800282e:	4b05      	ldr	r3, [pc, #20]	; (8002844 <HAL_RCC_OscConfig+0x8ac>)
 8002830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002832:	4a04      	ldr	r2, [pc, #16]	; (8002844 <HAL_RCC_OscConfig+0x8ac>)
 8002834:	f043 0301 	orr.w	r3, r3, #1
 8002838:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3730      	adds	r7, #48	; 0x30
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	58024400 	.word	0x58024400
 8002848:	ffff0007 	.word	0xffff0007

0800284c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e19c      	b.n	8002b9a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002860:	4b8a      	ldr	r3, [pc, #552]	; (8002a8c <HAL_RCC_ClockConfig+0x240>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 030f 	and.w	r3, r3, #15
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	429a      	cmp	r2, r3
 800286c:	d910      	bls.n	8002890 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800286e:	4b87      	ldr	r3, [pc, #540]	; (8002a8c <HAL_RCC_ClockConfig+0x240>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f023 020f 	bic.w	r2, r3, #15
 8002876:	4985      	ldr	r1, [pc, #532]	; (8002a8c <HAL_RCC_ClockConfig+0x240>)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	4313      	orrs	r3, r2
 800287c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800287e:	4b83      	ldr	r3, [pc, #524]	; (8002a8c <HAL_RCC_ClockConfig+0x240>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d001      	beq.n	8002890 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e184      	b.n	8002b9a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b00      	cmp	r3, #0
 800289a:	d010      	beq.n	80028be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691a      	ldr	r2, [r3, #16]
 80028a0:	4b7b      	ldr	r3, [pc, #492]	; (8002a90 <HAL_RCC_ClockConfig+0x244>)
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d908      	bls.n	80028be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80028ac:	4b78      	ldr	r3, [pc, #480]	; (8002a90 <HAL_RCC_ClockConfig+0x244>)
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	4975      	ldr	r1, [pc, #468]	; (8002a90 <HAL_RCC_ClockConfig+0x244>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0308 	and.w	r3, r3, #8
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d010      	beq.n	80028ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	695a      	ldr	r2, [r3, #20]
 80028ce:	4b70      	ldr	r3, [pc, #448]	; (8002a90 <HAL_RCC_ClockConfig+0x244>)
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d908      	bls.n	80028ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80028da:	4b6d      	ldr	r3, [pc, #436]	; (8002a90 <HAL_RCC_ClockConfig+0x244>)
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	496a      	ldr	r1, [pc, #424]	; (8002a90 <HAL_RCC_ClockConfig+0x244>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0310 	and.w	r3, r3, #16
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d010      	beq.n	800291a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699a      	ldr	r2, [r3, #24]
 80028fc:	4b64      	ldr	r3, [pc, #400]	; (8002a90 <HAL_RCC_ClockConfig+0x244>)
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002904:	429a      	cmp	r2, r3
 8002906:	d908      	bls.n	800291a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002908:	4b61      	ldr	r3, [pc, #388]	; (8002a90 <HAL_RCC_ClockConfig+0x244>)
 800290a:	69db      	ldr	r3, [r3, #28]
 800290c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	495e      	ldr	r1, [pc, #376]	; (8002a90 <HAL_RCC_ClockConfig+0x244>)
 8002916:	4313      	orrs	r3, r2
 8002918:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d010      	beq.n	8002948 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69da      	ldr	r2, [r3, #28]
 800292a:	4b59      	ldr	r3, [pc, #356]	; (8002a90 <HAL_RCC_ClockConfig+0x244>)
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002932:	429a      	cmp	r2, r3
 8002934:	d908      	bls.n	8002948 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002936:	4b56      	ldr	r3, [pc, #344]	; (8002a90 <HAL_RCC_ClockConfig+0x244>)
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	4953      	ldr	r1, [pc, #332]	; (8002a90 <HAL_RCC_ClockConfig+0x244>)
 8002944:	4313      	orrs	r3, r2
 8002946:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d010      	beq.n	8002976 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68da      	ldr	r2, [r3, #12]
 8002958:	4b4d      	ldr	r3, [pc, #308]	; (8002a90 <HAL_RCC_ClockConfig+0x244>)
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	f003 030f 	and.w	r3, r3, #15
 8002960:	429a      	cmp	r2, r3
 8002962:	d908      	bls.n	8002976 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002964:	4b4a      	ldr	r3, [pc, #296]	; (8002a90 <HAL_RCC_ClockConfig+0x244>)
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	f023 020f 	bic.w	r2, r3, #15
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	4947      	ldr	r1, [pc, #284]	; (8002a90 <HAL_RCC_ClockConfig+0x244>)
 8002972:	4313      	orrs	r3, r2
 8002974:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d055      	beq.n	8002a2e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002982:	4b43      	ldr	r3, [pc, #268]	; (8002a90 <HAL_RCC_ClockConfig+0x244>)
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	4940      	ldr	r1, [pc, #256]	; (8002a90 <HAL_RCC_ClockConfig+0x244>)
 8002990:	4313      	orrs	r3, r2
 8002992:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2b02      	cmp	r3, #2
 800299a:	d107      	bne.n	80029ac <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800299c:	4b3c      	ldr	r3, [pc, #240]	; (8002a90 <HAL_RCC_ClockConfig+0x244>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d121      	bne.n	80029ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e0f6      	b.n	8002b9a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b03      	cmp	r3, #3
 80029b2:	d107      	bne.n	80029c4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029b4:	4b36      	ldr	r3, [pc, #216]	; (8002a90 <HAL_RCC_ClockConfig+0x244>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d115      	bne.n	80029ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e0ea      	b.n	8002b9a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d107      	bne.n	80029dc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029cc:	4b30      	ldr	r3, [pc, #192]	; (8002a90 <HAL_RCC_ClockConfig+0x244>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d109      	bne.n	80029ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e0de      	b.n	8002b9a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029dc:	4b2c      	ldr	r3, [pc, #176]	; (8002a90 <HAL_RCC_ClockConfig+0x244>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d101      	bne.n	80029ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e0d6      	b.n	8002b9a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029ec:	4b28      	ldr	r3, [pc, #160]	; (8002a90 <HAL_RCC_ClockConfig+0x244>)
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	f023 0207 	bic.w	r2, r3, #7
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	4925      	ldr	r1, [pc, #148]	; (8002a90 <HAL_RCC_ClockConfig+0x244>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029fe:	f7fe fd0f 	bl	8001420 <HAL_GetTick>
 8002a02:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a04:	e00a      	b.n	8002a1c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a06:	f7fe fd0b 	bl	8001420 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e0be      	b.n	8002b9a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1c:	4b1c      	ldr	r3, [pc, #112]	; (8002a90 <HAL_RCC_ClockConfig+0x244>)
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d1eb      	bne.n	8002a06 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d010      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68da      	ldr	r2, [r3, #12]
 8002a3e:	4b14      	ldr	r3, [pc, #80]	; (8002a90 <HAL_RCC_ClockConfig+0x244>)
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d208      	bcs.n	8002a5c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a4a:	4b11      	ldr	r3, [pc, #68]	; (8002a90 <HAL_RCC_ClockConfig+0x244>)
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	f023 020f 	bic.w	r2, r3, #15
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	490e      	ldr	r1, [pc, #56]	; (8002a90 <HAL_RCC_ClockConfig+0x244>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a5c:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <HAL_RCC_ClockConfig+0x240>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 030f 	and.w	r3, r3, #15
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d214      	bcs.n	8002a94 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6a:	4b08      	ldr	r3, [pc, #32]	; (8002a8c <HAL_RCC_ClockConfig+0x240>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f023 020f 	bic.w	r2, r3, #15
 8002a72:	4906      	ldr	r1, [pc, #24]	; (8002a8c <HAL_RCC_ClockConfig+0x240>)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7a:	4b04      	ldr	r3, [pc, #16]	; (8002a8c <HAL_RCC_ClockConfig+0x240>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d005      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e086      	b.n	8002b9a <HAL_RCC_ClockConfig+0x34e>
 8002a8c:	52002000 	.word	0x52002000
 8002a90:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d010      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691a      	ldr	r2, [r3, #16]
 8002aa4:	4b3f      	ldr	r3, [pc, #252]	; (8002ba4 <HAL_RCC_ClockConfig+0x358>)
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d208      	bcs.n	8002ac2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ab0:	4b3c      	ldr	r3, [pc, #240]	; (8002ba4 <HAL_RCC_ClockConfig+0x358>)
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	4939      	ldr	r1, [pc, #228]	; (8002ba4 <HAL_RCC_ClockConfig+0x358>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0308 	and.w	r3, r3, #8
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d010      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	695a      	ldr	r2, [r3, #20]
 8002ad2:	4b34      	ldr	r3, [pc, #208]	; (8002ba4 <HAL_RCC_ClockConfig+0x358>)
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d208      	bcs.n	8002af0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ade:	4b31      	ldr	r3, [pc, #196]	; (8002ba4 <HAL_RCC_ClockConfig+0x358>)
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	492e      	ldr	r1, [pc, #184]	; (8002ba4 <HAL_RCC_ClockConfig+0x358>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0310 	and.w	r3, r3, #16
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d010      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	699a      	ldr	r2, [r3, #24]
 8002b00:	4b28      	ldr	r3, [pc, #160]	; (8002ba4 <HAL_RCC_ClockConfig+0x358>)
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d208      	bcs.n	8002b1e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b0c:	4b25      	ldr	r3, [pc, #148]	; (8002ba4 <HAL_RCC_ClockConfig+0x358>)
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	4922      	ldr	r1, [pc, #136]	; (8002ba4 <HAL_RCC_ClockConfig+0x358>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0320 	and.w	r3, r3, #32
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d010      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69da      	ldr	r2, [r3, #28]
 8002b2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ba4 <HAL_RCC_ClockConfig+0x358>)
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d208      	bcs.n	8002b4c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002b3a:	4b1a      	ldr	r3, [pc, #104]	; (8002ba4 <HAL_RCC_ClockConfig+0x358>)
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	4917      	ldr	r1, [pc, #92]	; (8002ba4 <HAL_RCC_ClockConfig+0x358>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b4c:	f000 f834 	bl	8002bb8 <HAL_RCC_GetSysClockFreq>
 8002b50:	4602      	mov	r2, r0
 8002b52:	4b14      	ldr	r3, [pc, #80]	; (8002ba4 <HAL_RCC_ClockConfig+0x358>)
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	0a1b      	lsrs	r3, r3, #8
 8002b58:	f003 030f 	and.w	r3, r3, #15
 8002b5c:	4912      	ldr	r1, [pc, #72]	; (8002ba8 <HAL_RCC_ClockConfig+0x35c>)
 8002b5e:	5ccb      	ldrb	r3, [r1, r3]
 8002b60:	f003 031f 	and.w	r3, r3, #31
 8002b64:	fa22 f303 	lsr.w	r3, r2, r3
 8002b68:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ba4 <HAL_RCC_ClockConfig+0x358>)
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	4a0d      	ldr	r2, [pc, #52]	; (8002ba8 <HAL_RCC_ClockConfig+0x35c>)
 8002b74:	5cd3      	ldrb	r3, [r2, r3]
 8002b76:	f003 031f 	and.w	r3, r3, #31
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b80:	4a0a      	ldr	r2, [pc, #40]	; (8002bac <HAL_RCC_ClockConfig+0x360>)
 8002b82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b84:	4a0a      	ldr	r2, [pc, #40]	; (8002bb0 <HAL_RCC_ClockConfig+0x364>)
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002b8a:	4b0a      	ldr	r3, [pc, #40]	; (8002bb4 <HAL_RCC_ClockConfig+0x368>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fe fbfc 	bl	800138c <HAL_InitTick>
 8002b94:	4603      	mov	r3, r0
 8002b96:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3718      	adds	r7, #24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	58024400 	.word	0x58024400
 8002ba8:	08008b54 	.word	0x08008b54
 8002bac:	24000004 	.word	0x24000004
 8002bb0:	24000000 	.word	0x24000000
 8002bb4:	24000008 	.word	0x24000008

08002bb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b089      	sub	sp, #36	; 0x24
 8002bbc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bbe:	4bb3      	ldr	r3, [pc, #716]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bc6:	2b18      	cmp	r3, #24
 8002bc8:	f200 8155 	bhi.w	8002e76 <HAL_RCC_GetSysClockFreq+0x2be>
 8002bcc:	a201      	add	r2, pc, #4	; (adr r2, 8002bd4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd2:	bf00      	nop
 8002bd4:	08002c39 	.word	0x08002c39
 8002bd8:	08002e77 	.word	0x08002e77
 8002bdc:	08002e77 	.word	0x08002e77
 8002be0:	08002e77 	.word	0x08002e77
 8002be4:	08002e77 	.word	0x08002e77
 8002be8:	08002e77 	.word	0x08002e77
 8002bec:	08002e77 	.word	0x08002e77
 8002bf0:	08002e77 	.word	0x08002e77
 8002bf4:	08002c5f 	.word	0x08002c5f
 8002bf8:	08002e77 	.word	0x08002e77
 8002bfc:	08002e77 	.word	0x08002e77
 8002c00:	08002e77 	.word	0x08002e77
 8002c04:	08002e77 	.word	0x08002e77
 8002c08:	08002e77 	.word	0x08002e77
 8002c0c:	08002e77 	.word	0x08002e77
 8002c10:	08002e77 	.word	0x08002e77
 8002c14:	08002c65 	.word	0x08002c65
 8002c18:	08002e77 	.word	0x08002e77
 8002c1c:	08002e77 	.word	0x08002e77
 8002c20:	08002e77 	.word	0x08002e77
 8002c24:	08002e77 	.word	0x08002e77
 8002c28:	08002e77 	.word	0x08002e77
 8002c2c:	08002e77 	.word	0x08002e77
 8002c30:	08002e77 	.word	0x08002e77
 8002c34:	08002c6b 	.word	0x08002c6b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c38:	4b94      	ldr	r3, [pc, #592]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0320 	and.w	r3, r3, #32
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d009      	beq.n	8002c58 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002c44:	4b91      	ldr	r3, [pc, #580]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	08db      	lsrs	r3, r3, #3
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	4a90      	ldr	r2, [pc, #576]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c50:	fa22 f303 	lsr.w	r3, r2, r3
 8002c54:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002c56:	e111      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002c58:	4b8d      	ldr	r3, [pc, #564]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c5a:	61bb      	str	r3, [r7, #24]
      break;
 8002c5c:	e10e      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002c5e:	4b8d      	ldr	r3, [pc, #564]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002c60:	61bb      	str	r3, [r7, #24]
      break;
 8002c62:	e10b      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002c64:	4b8c      	ldr	r3, [pc, #560]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002c66:	61bb      	str	r3, [r7, #24]
      break;
 8002c68:	e108      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002c6a:	4b88      	ldr	r3, [pc, #544]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6e:	f003 0303 	and.w	r3, r3, #3
 8002c72:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002c74:	4b85      	ldr	r3, [pc, #532]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c78:	091b      	lsrs	r3, r3, #4
 8002c7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c7e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002c80:	4b82      	ldr	r3, [pc, #520]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002c8a:	4b80      	ldr	r3, [pc, #512]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c8e:	08db      	lsrs	r3, r3, #3
 8002c90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	fb02 f303 	mul.w	r3, r2, r3
 8002c9a:	ee07 3a90 	vmov	s15, r3
 8002c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ca2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f000 80e1 	beq.w	8002e70 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	f000 8083 	beq.w	8002dbc <HAL_RCC_GetSysClockFreq+0x204>
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	f200 80a1 	bhi.w	8002e00 <HAL_RCC_GetSysClockFreq+0x248>
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <HAL_RCC_GetSysClockFreq+0x114>
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d056      	beq.n	8002d78 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002cca:	e099      	b.n	8002e00 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ccc:	4b6f      	ldr	r3, [pc, #444]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0320 	and.w	r3, r3, #32
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d02d      	beq.n	8002d34 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002cd8:	4b6c      	ldr	r3, [pc, #432]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	08db      	lsrs	r3, r3, #3
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	4a6b      	ldr	r2, [pc, #428]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	ee07 3a90 	vmov	s15, r3
 8002cf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	ee07 3a90 	vmov	s15, r3
 8002cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d02:	4b62      	ldr	r3, [pc, #392]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d0a:	ee07 3a90 	vmov	s15, r3
 8002d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d12:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d16:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002e9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d2e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002d32:	e087      	b.n	8002e44 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	ee07 3a90 	vmov	s15, r3
 8002d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d3e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002ea0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d46:	4b51      	ldr	r3, [pc, #324]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d4e:	ee07 3a90 	vmov	s15, r3
 8002d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d56:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d5a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002e9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002d76:	e065      	b.n	8002e44 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	ee07 3a90 	vmov	s15, r3
 8002d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d82:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002ea4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002d86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d8a:	4b40      	ldr	r3, [pc, #256]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d92:	ee07 3a90 	vmov	s15, r3
 8002d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d9e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002e9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002da2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002daa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002db6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002dba:	e043      	b.n	8002e44 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	ee07 3a90 	vmov	s15, r3
 8002dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dc6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002ea8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dce:	4b2f      	ldr	r3, [pc, #188]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dd6:	ee07 3a90 	vmov	s15, r3
 8002dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dde:	ed97 6a02 	vldr	s12, [r7, #8]
 8002de2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002e9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002dfe:	e021      	b.n	8002e44 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	ee07 3a90 	vmov	s15, r3
 8002e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e0a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002ea4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e12:	4b1e      	ldr	r3, [pc, #120]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e1a:	ee07 3a90 	vmov	s15, r3
 8002e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e22:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e26:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002e9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e42:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002e44:	4b11      	ldr	r3, [pc, #68]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e48:	0a5b      	lsrs	r3, r3, #9
 8002e4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e4e:	3301      	adds	r3, #1
 8002e50:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	ee07 3a90 	vmov	s15, r3
 8002e58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002e60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e68:	ee17 3a90 	vmov	r3, s15
 8002e6c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002e6e:	e005      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	61bb      	str	r3, [r7, #24]
      break;
 8002e74:	e002      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002e76:	4b07      	ldr	r3, [pc, #28]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002e78:	61bb      	str	r3, [r7, #24]
      break;
 8002e7a:	bf00      	nop
  }

  return sysclockfreq;
 8002e7c:	69bb      	ldr	r3, [r7, #24]
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3724      	adds	r7, #36	; 0x24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	58024400 	.word	0x58024400
 8002e90:	03d09000 	.word	0x03d09000
 8002e94:	003d0900 	.word	0x003d0900
 8002e98:	017d7840 	.word	0x017d7840
 8002e9c:	46000000 	.word	0x46000000
 8002ea0:	4c742400 	.word	0x4c742400
 8002ea4:	4a742400 	.word	0x4a742400
 8002ea8:	4bbebc20 	.word	0x4bbebc20

08002eac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002eb2:	f7ff fe81 	bl	8002bb8 <HAL_RCC_GetSysClockFreq>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	4b10      	ldr	r3, [pc, #64]	; (8002efc <HAL_RCC_GetHCLKFreq+0x50>)
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	0a1b      	lsrs	r3, r3, #8
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	490f      	ldr	r1, [pc, #60]	; (8002f00 <HAL_RCC_GetHCLKFreq+0x54>)
 8002ec4:	5ccb      	ldrb	r3, [r1, r3]
 8002ec6:	f003 031f 	and.w	r3, r3, #31
 8002eca:	fa22 f303 	lsr.w	r3, r2, r3
 8002ece:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ed0:	4b0a      	ldr	r3, [pc, #40]	; (8002efc <HAL_RCC_GetHCLKFreq+0x50>)
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	f003 030f 	and.w	r3, r3, #15
 8002ed8:	4a09      	ldr	r2, [pc, #36]	; (8002f00 <HAL_RCC_GetHCLKFreq+0x54>)
 8002eda:	5cd3      	ldrb	r3, [r2, r3]
 8002edc:	f003 031f 	and.w	r3, r3, #31
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee6:	4a07      	ldr	r2, [pc, #28]	; (8002f04 <HAL_RCC_GetHCLKFreq+0x58>)
 8002ee8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002eea:	4a07      	ldr	r2, [pc, #28]	; (8002f08 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002ef0:	4b04      	ldr	r3, [pc, #16]	; (8002f04 <HAL_RCC_GetHCLKFreq+0x58>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	58024400 	.word	0x58024400
 8002f00:	08008b54 	.word	0x08008b54
 8002f04:	24000004 	.word	0x24000004
 8002f08:	24000000 	.word	0x24000000

08002f0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002f10:	f7ff ffcc 	bl	8002eac <HAL_RCC_GetHCLKFreq>
 8002f14:	4602      	mov	r2, r0
 8002f16:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	091b      	lsrs	r3, r3, #4
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	4904      	ldr	r1, [pc, #16]	; (8002f34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f22:	5ccb      	ldrb	r3, [r1, r3]
 8002f24:	f003 031f 	and.w	r3, r3, #31
 8002f28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	58024400 	.word	0x58024400
 8002f34:	08008b54 	.word	0x08008b54

08002f38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002f3c:	f7ff ffb6 	bl	8002eac <HAL_RCC_GetHCLKFreq>
 8002f40:	4602      	mov	r2, r0
 8002f42:	4b06      	ldr	r3, [pc, #24]	; (8002f5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	0a1b      	lsrs	r3, r3, #8
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	4904      	ldr	r1, [pc, #16]	; (8002f60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f4e:	5ccb      	ldrb	r3, [r1, r3]
 8002f50:	f003 031f 	and.w	r3, r3, #31
 8002f54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	58024400 	.word	0x58024400
 8002f60:	08008b54 	.word	0x08008b54

08002f64 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f68:	b0ca      	sub	sp, #296	; 0x128
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f70:	2300      	movs	r3, #0
 8002f72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f76:	2300      	movs	r3, #0
 8002f78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f84:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002f88:	2500      	movs	r5, #0
 8002f8a:	ea54 0305 	orrs.w	r3, r4, r5
 8002f8e:	d049      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f96:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002f9a:	d02f      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002f9c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fa0:	d828      	bhi.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002fa2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fa6:	d01a      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002fa8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fac:	d822      	bhi.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002fb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fb6:	d007      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002fb8:	e01c      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fba:	4bb8      	ldr	r3, [pc, #736]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbe:	4ab7      	ldr	r2, [pc, #732]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fc4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002fc6:	e01a      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fcc:	3308      	adds	r3, #8
 8002fce:	2102      	movs	r1, #2
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f001 fc8f 	bl	80048f4 <RCCEx_PLL2_Config>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002fdc:	e00f      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fe2:	3328      	adds	r3, #40	; 0x28
 8002fe4:	2102      	movs	r1, #2
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f001 fd36 	bl	8004a58 <RCCEx_PLL3_Config>
 8002fec:	4603      	mov	r3, r0
 8002fee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002ff2:	e004      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002ffa:	e000      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002ffc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ffe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10a      	bne.n	800301c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003006:	4ba5      	ldr	r3, [pc, #660]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800300a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800300e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003012:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003014:	4aa1      	ldr	r2, [pc, #644]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003016:	430b      	orrs	r3, r1
 8003018:	6513      	str	r3, [r2, #80]	; 0x50
 800301a:	e003      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800301c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003020:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003030:	f04f 0900 	mov.w	r9, #0
 8003034:	ea58 0309 	orrs.w	r3, r8, r9
 8003038:	d047      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800303a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800303e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003040:	2b04      	cmp	r3, #4
 8003042:	d82a      	bhi.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003044:	a201      	add	r2, pc, #4	; (adr r2, 800304c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304a:	bf00      	nop
 800304c:	08003061 	.word	0x08003061
 8003050:	0800306f 	.word	0x0800306f
 8003054:	08003085 	.word	0x08003085
 8003058:	080030a3 	.word	0x080030a3
 800305c:	080030a3 	.word	0x080030a3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003060:	4b8e      	ldr	r3, [pc, #568]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003064:	4a8d      	ldr	r2, [pc, #564]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003066:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800306a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800306c:	e01a      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800306e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003072:	3308      	adds	r3, #8
 8003074:	2100      	movs	r1, #0
 8003076:	4618      	mov	r0, r3
 8003078:	f001 fc3c 	bl	80048f4 <RCCEx_PLL2_Config>
 800307c:	4603      	mov	r3, r0
 800307e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003082:	e00f      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003084:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003088:	3328      	adds	r3, #40	; 0x28
 800308a:	2100      	movs	r1, #0
 800308c:	4618      	mov	r0, r3
 800308e:	f001 fce3 	bl	8004a58 <RCCEx_PLL3_Config>
 8003092:	4603      	mov	r3, r0
 8003094:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003098:	e004      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80030a0:	e000      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80030a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10a      	bne.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030ac:	4b7b      	ldr	r3, [pc, #492]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030b0:	f023 0107 	bic.w	r1, r3, #7
 80030b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ba:	4a78      	ldr	r2, [pc, #480]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030bc:	430b      	orrs	r3, r1
 80030be:	6513      	str	r3, [r2, #80]	; 0x50
 80030c0:	e003      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80030ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80030d6:	f04f 0b00 	mov.w	fp, #0
 80030da:	ea5a 030b 	orrs.w	r3, sl, fp
 80030de:	d04c      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80030e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030ea:	d030      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80030ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030f0:	d829      	bhi.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80030f2:	2bc0      	cmp	r3, #192	; 0xc0
 80030f4:	d02d      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80030f6:	2bc0      	cmp	r3, #192	; 0xc0
 80030f8:	d825      	bhi.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80030fa:	2b80      	cmp	r3, #128	; 0x80
 80030fc:	d018      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80030fe:	2b80      	cmp	r3, #128	; 0x80
 8003100:	d821      	bhi.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003102:	2b00      	cmp	r3, #0
 8003104:	d002      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003106:	2b40      	cmp	r3, #64	; 0x40
 8003108:	d007      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800310a:	e01c      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800310c:	4b63      	ldr	r3, [pc, #396]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800310e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003110:	4a62      	ldr	r2, [pc, #392]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003112:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003116:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003118:	e01c      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800311a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800311e:	3308      	adds	r3, #8
 8003120:	2100      	movs	r1, #0
 8003122:	4618      	mov	r0, r3
 8003124:	f001 fbe6 	bl	80048f4 <RCCEx_PLL2_Config>
 8003128:	4603      	mov	r3, r0
 800312a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800312e:	e011      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003134:	3328      	adds	r3, #40	; 0x28
 8003136:	2100      	movs	r1, #0
 8003138:	4618      	mov	r0, r3
 800313a:	f001 fc8d 	bl	8004a58 <RCCEx_PLL3_Config>
 800313e:	4603      	mov	r3, r0
 8003140:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003144:	e006      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800314c:	e002      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800314e:	bf00      	nop
 8003150:	e000      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003152:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003154:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003158:	2b00      	cmp	r3, #0
 800315a:	d10a      	bne.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800315c:	4b4f      	ldr	r3, [pc, #316]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800315e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003160:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003164:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800316a:	4a4c      	ldr	r2, [pc, #304]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800316c:	430b      	orrs	r3, r1
 800316e:	6513      	str	r3, [r2, #80]	; 0x50
 8003170:	e003      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003172:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003176:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800317a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800317e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003182:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003186:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800318a:	2300      	movs	r3, #0
 800318c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003190:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003194:	460b      	mov	r3, r1
 8003196:	4313      	orrs	r3, r2
 8003198:	d053      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800319a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800319e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80031a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031a6:	d035      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80031a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031ac:	d82e      	bhi.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80031ae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80031b2:	d031      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80031b4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80031b8:	d828      	bhi.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80031ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031be:	d01a      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80031c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031c4:	d822      	bhi.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80031ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031ce:	d007      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80031d0:	e01c      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031d2:	4b32      	ldr	r3, [pc, #200]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d6:	4a31      	ldr	r2, [pc, #196]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031de:	e01c      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031e4:	3308      	adds	r3, #8
 80031e6:	2100      	movs	r1, #0
 80031e8:	4618      	mov	r0, r3
 80031ea:	f001 fb83 	bl	80048f4 <RCCEx_PLL2_Config>
 80031ee:	4603      	mov	r3, r0
 80031f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80031f4:	e011      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80031f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031fa:	3328      	adds	r3, #40	; 0x28
 80031fc:	2100      	movs	r1, #0
 80031fe:	4618      	mov	r0, r3
 8003200:	f001 fc2a 	bl	8004a58 <RCCEx_PLL3_Config>
 8003204:	4603      	mov	r3, r0
 8003206:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800320a:	e006      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003212:	e002      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003214:	bf00      	nop
 8003216:	e000      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003218:	bf00      	nop
    }

    if (ret == HAL_OK)
 800321a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10b      	bne.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003222:	4b1e      	ldr	r3, [pc, #120]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003226:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800322a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800322e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003232:	4a1a      	ldr	r2, [pc, #104]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003234:	430b      	orrs	r3, r1
 8003236:	6593      	str	r3, [r2, #88]	; 0x58
 8003238:	e003      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800323a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800323e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800324e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003252:	2300      	movs	r3, #0
 8003254:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003258:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800325c:	460b      	mov	r3, r1
 800325e:	4313      	orrs	r3, r2
 8003260:	d056      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003266:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800326a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800326e:	d038      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003270:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003274:	d831      	bhi.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003276:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800327a:	d034      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800327c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003280:	d82b      	bhi.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003282:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003286:	d01d      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003288:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800328c:	d825      	bhi.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x376>
 800328e:	2b00      	cmp	r3, #0
 8003290:	d006      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003292:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003296:	d00a      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003298:	e01f      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x376>
 800329a:	bf00      	nop
 800329c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032a0:	4ba2      	ldr	r3, [pc, #648]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a4:	4aa1      	ldr	r2, [pc, #644]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032ac:	e01c      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032b2:	3308      	adds	r3, #8
 80032b4:	2100      	movs	r1, #0
 80032b6:	4618      	mov	r0, r3
 80032b8:	f001 fb1c 	bl	80048f4 <RCCEx_PLL2_Config>
 80032bc:	4603      	mov	r3, r0
 80032be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80032c2:	e011      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80032c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032c8:	3328      	adds	r3, #40	; 0x28
 80032ca:	2100      	movs	r1, #0
 80032cc:	4618      	mov	r0, r3
 80032ce:	f001 fbc3 	bl	8004a58 <RCCEx_PLL3_Config>
 80032d2:	4603      	mov	r3, r0
 80032d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032d8:	e006      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80032e0:	e002      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80032e2:	bf00      	nop
 80032e4:	e000      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80032e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10b      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80032f0:	4b8e      	ldr	r3, [pc, #568]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80032f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003300:	4a8a      	ldr	r2, [pc, #552]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003302:	430b      	orrs	r3, r1
 8003304:	6593      	str	r3, [r2, #88]	; 0x58
 8003306:	e003      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003308:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800330c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003310:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003318:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800331c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003320:	2300      	movs	r3, #0
 8003322:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003326:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800332a:	460b      	mov	r3, r1
 800332c:	4313      	orrs	r3, r2
 800332e:	d03a      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003330:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003336:	2b30      	cmp	r3, #48	; 0x30
 8003338:	d01f      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800333a:	2b30      	cmp	r3, #48	; 0x30
 800333c:	d819      	bhi.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800333e:	2b20      	cmp	r3, #32
 8003340:	d00c      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003342:	2b20      	cmp	r3, #32
 8003344:	d815      	bhi.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003346:	2b00      	cmp	r3, #0
 8003348:	d019      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800334a:	2b10      	cmp	r3, #16
 800334c:	d111      	bne.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800334e:	4b77      	ldr	r3, [pc, #476]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003352:	4a76      	ldr	r2, [pc, #472]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003358:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800335a:	e011      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800335c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003360:	3308      	adds	r3, #8
 8003362:	2102      	movs	r1, #2
 8003364:	4618      	mov	r0, r3
 8003366:	f001 fac5 	bl	80048f4 <RCCEx_PLL2_Config>
 800336a:	4603      	mov	r3, r0
 800336c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003370:	e006      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003378:	e002      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800337a:	bf00      	nop
 800337c:	e000      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800337e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003380:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10a      	bne.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003388:	4b68      	ldr	r3, [pc, #416]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800338a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800338c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003396:	4a65      	ldr	r2, [pc, #404]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003398:	430b      	orrs	r3, r1
 800339a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800339c:	e003      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800339e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80033a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ae:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80033b2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80033b6:	2300      	movs	r3, #0
 80033b8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80033bc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80033c0:	460b      	mov	r3, r1
 80033c2:	4313      	orrs	r3, r2
 80033c4:	d051      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80033c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033d0:	d035      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80033d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033d6:	d82e      	bhi.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80033d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033dc:	d031      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80033de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033e2:	d828      	bhi.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80033e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033e8:	d01a      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80033ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ee:	d822      	bhi.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80033f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033f8:	d007      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80033fa:	e01c      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033fc:	4b4b      	ldr	r3, [pc, #300]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003400:	4a4a      	ldr	r2, [pc, #296]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003406:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003408:	e01c      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800340a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800340e:	3308      	adds	r3, #8
 8003410:	2100      	movs	r1, #0
 8003412:	4618      	mov	r0, r3
 8003414:	f001 fa6e 	bl	80048f4 <RCCEx_PLL2_Config>
 8003418:	4603      	mov	r3, r0
 800341a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800341e:	e011      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003420:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003424:	3328      	adds	r3, #40	; 0x28
 8003426:	2100      	movs	r1, #0
 8003428:	4618      	mov	r0, r3
 800342a:	f001 fb15 	bl	8004a58 <RCCEx_PLL3_Config>
 800342e:	4603      	mov	r3, r0
 8003430:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003434:	e006      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800343c:	e002      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800343e:	bf00      	nop
 8003440:	e000      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003442:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003444:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10a      	bne.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800344c:	4b37      	ldr	r3, [pc, #220]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800344e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003450:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003454:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800345a:	4a34      	ldr	r2, [pc, #208]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800345c:	430b      	orrs	r3, r1
 800345e:	6513      	str	r3, [r2, #80]	; 0x50
 8003460:	e003      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003462:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003466:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800346a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800346e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003472:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003476:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800347a:	2300      	movs	r3, #0
 800347c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003480:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003484:	460b      	mov	r3, r1
 8003486:	4313      	orrs	r3, r2
 8003488:	d056      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800348a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800348e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003490:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003494:	d033      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003496:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800349a:	d82c      	bhi.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800349c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034a0:	d02f      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80034a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034a6:	d826      	bhi.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80034a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80034ac:	d02b      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80034ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80034b2:	d820      	bhi.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80034b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034b8:	d012      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80034ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034be:	d81a      	bhi.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d022      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80034c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034c8:	d115      	bne.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80034ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034ce:	3308      	adds	r3, #8
 80034d0:	2101      	movs	r1, #1
 80034d2:	4618      	mov	r0, r3
 80034d4:	f001 fa0e 	bl	80048f4 <RCCEx_PLL2_Config>
 80034d8:	4603      	mov	r3, r0
 80034da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80034de:	e015      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80034e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034e4:	3328      	adds	r3, #40	; 0x28
 80034e6:	2101      	movs	r1, #1
 80034e8:	4618      	mov	r0, r3
 80034ea:	f001 fab5 	bl	8004a58 <RCCEx_PLL3_Config>
 80034ee:	4603      	mov	r3, r0
 80034f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80034f4:	e00a      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80034fc:	e006      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80034fe:	bf00      	nop
 8003500:	e004      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003502:	bf00      	nop
 8003504:	e002      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003506:	bf00      	nop
 8003508:	e000      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800350a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800350c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10d      	bne.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003514:	4b05      	ldr	r3, [pc, #20]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003518:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800351c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003520:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003522:	4a02      	ldr	r2, [pc, #8]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003524:	430b      	orrs	r3, r1
 8003526:	6513      	str	r3, [r2, #80]	; 0x50
 8003528:	e006      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800352a:	bf00      	nop
 800352c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003530:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003534:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800353c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003540:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003544:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003548:	2300      	movs	r3, #0
 800354a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800354e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003552:	460b      	mov	r3, r1
 8003554:	4313      	orrs	r3, r2
 8003556:	d055      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800355c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003560:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003564:	d033      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003566:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800356a:	d82c      	bhi.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800356c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003570:	d02f      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003576:	d826      	bhi.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003578:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800357c:	d02b      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800357e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003582:	d820      	bhi.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003584:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003588:	d012      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800358a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800358e:	d81a      	bhi.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003590:	2b00      	cmp	r3, #0
 8003592:	d022      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003594:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003598:	d115      	bne.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800359a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800359e:	3308      	adds	r3, #8
 80035a0:	2101      	movs	r1, #1
 80035a2:	4618      	mov	r0, r3
 80035a4:	f001 f9a6 	bl	80048f4 <RCCEx_PLL2_Config>
 80035a8:	4603      	mov	r3, r0
 80035aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80035ae:	e015      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80035b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035b4:	3328      	adds	r3, #40	; 0x28
 80035b6:	2101      	movs	r1, #1
 80035b8:	4618      	mov	r0, r3
 80035ba:	f001 fa4d 	bl	8004a58 <RCCEx_PLL3_Config>
 80035be:	4603      	mov	r3, r0
 80035c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80035c4:	e00a      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80035cc:	e006      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80035ce:	bf00      	nop
 80035d0:	e004      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80035d2:	bf00      	nop
 80035d4:	e002      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80035d6:	bf00      	nop
 80035d8:	e000      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80035da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10b      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80035e4:	4ba3      	ldr	r3, [pc, #652]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80035ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80035f4:	4a9f      	ldr	r2, [pc, #636]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035f6:	430b      	orrs	r3, r1
 80035f8:	6593      	str	r3, [r2, #88]	; 0x58
 80035fa:	e003      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003600:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003610:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003614:	2300      	movs	r3, #0
 8003616:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800361a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800361e:	460b      	mov	r3, r1
 8003620:	4313      	orrs	r3, r2
 8003622:	d037      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003624:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800362e:	d00e      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003630:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003634:	d816      	bhi.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003636:	2b00      	cmp	r3, #0
 8003638:	d018      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800363a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800363e:	d111      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003640:	4b8c      	ldr	r3, [pc, #560]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003644:	4a8b      	ldr	r2, [pc, #556]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003646:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800364a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800364c:	e00f      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800364e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003652:	3308      	adds	r3, #8
 8003654:	2101      	movs	r1, #1
 8003656:	4618      	mov	r0, r3
 8003658:	f001 f94c 	bl	80048f4 <RCCEx_PLL2_Config>
 800365c:	4603      	mov	r3, r0
 800365e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003662:	e004      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800366a:	e000      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800366c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800366e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10a      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003676:	4b7f      	ldr	r3, [pc, #508]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800367a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800367e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003684:	4a7b      	ldr	r2, [pc, #492]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003686:	430b      	orrs	r3, r1
 8003688:	6513      	str	r3, [r2, #80]	; 0x50
 800368a:	e003      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800368c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003690:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003694:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80036a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80036a4:	2300      	movs	r3, #0
 80036a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80036aa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80036ae:	460b      	mov	r3, r1
 80036b0:	4313      	orrs	r3, r2
 80036b2:	d039      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80036b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ba:	2b03      	cmp	r3, #3
 80036bc:	d81c      	bhi.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80036be:	a201      	add	r2, pc, #4	; (adr r2, 80036c4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80036c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c4:	08003701 	.word	0x08003701
 80036c8:	080036d5 	.word	0x080036d5
 80036cc:	080036e3 	.word	0x080036e3
 80036d0:	08003701 	.word	0x08003701
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036d4:	4b67      	ldr	r3, [pc, #412]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d8:	4a66      	ldr	r2, [pc, #408]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80036e0:	e00f      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036e6:	3308      	adds	r3, #8
 80036e8:	2102      	movs	r1, #2
 80036ea:	4618      	mov	r0, r3
 80036ec:	f001 f902 	bl	80048f4 <RCCEx_PLL2_Config>
 80036f0:	4603      	mov	r3, r0
 80036f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80036f6:	e004      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80036fe:	e000      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003700:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003702:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10a      	bne.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800370a:	4b5a      	ldr	r3, [pc, #360]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800370c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800370e:	f023 0103 	bic.w	r1, r3, #3
 8003712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003718:	4a56      	ldr	r2, [pc, #344]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800371a:	430b      	orrs	r3, r1
 800371c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800371e:	e003      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003720:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003724:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003728:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800372c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003730:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003734:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003738:	2300      	movs	r3, #0
 800373a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800373e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003742:	460b      	mov	r3, r1
 8003744:	4313      	orrs	r3, r2
 8003746:	f000 809f 	beq.w	8003888 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800374a:	4b4b      	ldr	r3, [pc, #300]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a4a      	ldr	r2, [pc, #296]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003754:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003756:	f7fd fe63 	bl	8001420 <HAL_GetTick>
 800375a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800375e:	e00b      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003760:	f7fd fe5e 	bl	8001420 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b64      	cmp	r3, #100	; 0x64
 800376e:	d903      	bls.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003776:	e005      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003778:	4b3f      	ldr	r3, [pc, #252]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0ed      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003784:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003788:	2b00      	cmp	r3, #0
 800378a:	d179      	bne.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800378c:	4b39      	ldr	r3, [pc, #228]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800378e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003794:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003798:	4053      	eors	r3, r2
 800379a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d015      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037a2:	4b34      	ldr	r3, [pc, #208]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037aa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037ae:	4b31      	ldr	r3, [pc, #196]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b2:	4a30      	ldr	r2, [pc, #192]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037ba:	4b2e      	ldr	r3, [pc, #184]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037be:	4a2d      	ldr	r2, [pc, #180]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037c4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80037c6:	4a2b      	ldr	r2, [pc, #172]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037cc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80037ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80037d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037da:	d118      	bne.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037dc:	f7fd fe20 	bl	8001420 <HAL_GetTick>
 80037e0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037e4:	e00d      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e6:	f7fd fe1b 	bl	8001420 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80037f0:	1ad2      	subs	r2, r2, r3
 80037f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d903      	bls.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003800:	e005      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003802:	4b1c      	ldr	r3, [pc, #112]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d0eb      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800380e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003812:	2b00      	cmp	r3, #0
 8003814:	d129      	bne.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800381a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800381e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003822:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003826:	d10e      	bne.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003828:	4b12      	ldr	r3, [pc, #72]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003834:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003838:	091a      	lsrs	r2, r3, #4
 800383a:	4b10      	ldr	r3, [pc, #64]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800383c:	4013      	ands	r3, r2
 800383e:	4a0d      	ldr	r2, [pc, #52]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003840:	430b      	orrs	r3, r1
 8003842:	6113      	str	r3, [r2, #16]
 8003844:	e005      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003846:	4b0b      	ldr	r3, [pc, #44]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	4a0a      	ldr	r2, [pc, #40]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800384c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003850:	6113      	str	r3, [r2, #16]
 8003852:	4b08      	ldr	r3, [pc, #32]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003854:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800385a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800385e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003862:	4a04      	ldr	r2, [pc, #16]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003864:	430b      	orrs	r3, r1
 8003866:	6713      	str	r3, [r2, #112]	; 0x70
 8003868:	e00e      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800386a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800386e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003872:	e009      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003874:	58024400 	.word	0x58024400
 8003878:	58024800 	.word	0x58024800
 800387c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003880:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003884:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003888:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800388c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003890:	f002 0301 	and.w	r3, r2, #1
 8003894:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003898:	2300      	movs	r3, #0
 800389a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800389e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80038a2:	460b      	mov	r3, r1
 80038a4:	4313      	orrs	r3, r2
 80038a6:	f000 8089 	beq.w	80039bc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80038aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038b0:	2b28      	cmp	r3, #40	; 0x28
 80038b2:	d86b      	bhi.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80038b4:	a201      	add	r2, pc, #4	; (adr r2, 80038bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80038b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ba:	bf00      	nop
 80038bc:	08003995 	.word	0x08003995
 80038c0:	0800398d 	.word	0x0800398d
 80038c4:	0800398d 	.word	0x0800398d
 80038c8:	0800398d 	.word	0x0800398d
 80038cc:	0800398d 	.word	0x0800398d
 80038d0:	0800398d 	.word	0x0800398d
 80038d4:	0800398d 	.word	0x0800398d
 80038d8:	0800398d 	.word	0x0800398d
 80038dc:	08003961 	.word	0x08003961
 80038e0:	0800398d 	.word	0x0800398d
 80038e4:	0800398d 	.word	0x0800398d
 80038e8:	0800398d 	.word	0x0800398d
 80038ec:	0800398d 	.word	0x0800398d
 80038f0:	0800398d 	.word	0x0800398d
 80038f4:	0800398d 	.word	0x0800398d
 80038f8:	0800398d 	.word	0x0800398d
 80038fc:	08003977 	.word	0x08003977
 8003900:	0800398d 	.word	0x0800398d
 8003904:	0800398d 	.word	0x0800398d
 8003908:	0800398d 	.word	0x0800398d
 800390c:	0800398d 	.word	0x0800398d
 8003910:	0800398d 	.word	0x0800398d
 8003914:	0800398d 	.word	0x0800398d
 8003918:	0800398d 	.word	0x0800398d
 800391c:	08003995 	.word	0x08003995
 8003920:	0800398d 	.word	0x0800398d
 8003924:	0800398d 	.word	0x0800398d
 8003928:	0800398d 	.word	0x0800398d
 800392c:	0800398d 	.word	0x0800398d
 8003930:	0800398d 	.word	0x0800398d
 8003934:	0800398d 	.word	0x0800398d
 8003938:	0800398d 	.word	0x0800398d
 800393c:	08003995 	.word	0x08003995
 8003940:	0800398d 	.word	0x0800398d
 8003944:	0800398d 	.word	0x0800398d
 8003948:	0800398d 	.word	0x0800398d
 800394c:	0800398d 	.word	0x0800398d
 8003950:	0800398d 	.word	0x0800398d
 8003954:	0800398d 	.word	0x0800398d
 8003958:	0800398d 	.word	0x0800398d
 800395c:	08003995 	.word	0x08003995
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003960:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003964:	3308      	adds	r3, #8
 8003966:	2101      	movs	r1, #1
 8003968:	4618      	mov	r0, r3
 800396a:	f000 ffc3 	bl	80048f4 <RCCEx_PLL2_Config>
 800396e:	4603      	mov	r3, r0
 8003970:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003974:	e00f      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003976:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800397a:	3328      	adds	r3, #40	; 0x28
 800397c:	2101      	movs	r1, #1
 800397e:	4618      	mov	r0, r3
 8003980:	f001 f86a 	bl	8004a58 <RCCEx_PLL3_Config>
 8003984:	4603      	mov	r3, r0
 8003986:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800398a:	e004      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003992:	e000      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003994:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003996:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10a      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800399e:	4bbf      	ldr	r3, [pc, #764]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80039a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80039a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039ac:	4abb      	ldr	r2, [pc, #748]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80039ae:	430b      	orrs	r3, r1
 80039b0:	6553      	str	r3, [r2, #84]	; 0x54
 80039b2:	e003      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80039bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c4:	f002 0302 	and.w	r3, r2, #2
 80039c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039cc:	2300      	movs	r3, #0
 80039ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80039d2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80039d6:	460b      	mov	r3, r1
 80039d8:	4313      	orrs	r3, r2
 80039da:	d041      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80039dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039e2:	2b05      	cmp	r3, #5
 80039e4:	d824      	bhi.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80039e6:	a201      	add	r2, pc, #4	; (adr r2, 80039ec <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80039e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ec:	08003a39 	.word	0x08003a39
 80039f0:	08003a05 	.word	0x08003a05
 80039f4:	08003a1b 	.word	0x08003a1b
 80039f8:	08003a39 	.word	0x08003a39
 80039fc:	08003a39 	.word	0x08003a39
 8003a00:	08003a39 	.word	0x08003a39
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a08:	3308      	adds	r3, #8
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 ff71 	bl	80048f4 <RCCEx_PLL2_Config>
 8003a12:	4603      	mov	r3, r0
 8003a14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003a18:	e00f      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a1e:	3328      	adds	r3, #40	; 0x28
 8003a20:	2101      	movs	r1, #1
 8003a22:	4618      	mov	r0, r3
 8003a24:	f001 f818 	bl	8004a58 <RCCEx_PLL3_Config>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003a2e:	e004      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a36:	e000      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003a38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10a      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003a42:	4b96      	ldr	r3, [pc, #600]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a46:	f023 0107 	bic.w	r1, r3, #7
 8003a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a50:	4a92      	ldr	r2, [pc, #584]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a52:	430b      	orrs	r3, r1
 8003a54:	6553      	str	r3, [r2, #84]	; 0x54
 8003a56:	e003      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a68:	f002 0304 	and.w	r3, r2, #4
 8003a6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a70:	2300      	movs	r3, #0
 8003a72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a76:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	d044      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a88:	2b05      	cmp	r3, #5
 8003a8a:	d825      	bhi.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003a8c:	a201      	add	r2, pc, #4	; (adr r2, 8003a94 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a92:	bf00      	nop
 8003a94:	08003ae1 	.word	0x08003ae1
 8003a98:	08003aad 	.word	0x08003aad
 8003a9c:	08003ac3 	.word	0x08003ac3
 8003aa0:	08003ae1 	.word	0x08003ae1
 8003aa4:	08003ae1 	.word	0x08003ae1
 8003aa8:	08003ae1 	.word	0x08003ae1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ab0:	3308      	adds	r3, #8
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 ff1d 	bl	80048f4 <RCCEx_PLL2_Config>
 8003aba:	4603      	mov	r3, r0
 8003abc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003ac0:	e00f      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ac6:	3328      	adds	r3, #40	; 0x28
 8003ac8:	2101      	movs	r1, #1
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 ffc4 	bl	8004a58 <RCCEx_PLL3_Config>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003ad6:	e004      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ade:	e000      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003ae0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ae2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10b      	bne.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003aea:	4b6c      	ldr	r3, [pc, #432]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aee:	f023 0107 	bic.w	r1, r3, #7
 8003af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003afa:	4a68      	ldr	r2, [pc, #416]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003afc:	430b      	orrs	r3, r1
 8003afe:	6593      	str	r3, [r2, #88]	; 0x58
 8003b00:	e003      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b12:	f002 0320 	and.w	r3, r2, #32
 8003b16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b24:	460b      	mov	r3, r1
 8003b26:	4313      	orrs	r3, r2
 8003b28:	d055      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b36:	d033      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003b38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b3c:	d82c      	bhi.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b42:	d02f      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b48:	d826      	bhi.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003b4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b4e:	d02b      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003b50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b54:	d820      	bhi.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003b56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b5a:	d012      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003b5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b60:	d81a      	bhi.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d022      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003b66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b6a:	d115      	bne.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b70:	3308      	adds	r3, #8
 8003b72:	2100      	movs	r1, #0
 8003b74:	4618      	mov	r0, r3
 8003b76:	f000 febd 	bl	80048f4 <RCCEx_PLL2_Config>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003b80:	e015      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b86:	3328      	adds	r3, #40	; 0x28
 8003b88:	2102      	movs	r1, #2
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 ff64 	bl	8004a58 <RCCEx_PLL3_Config>
 8003b90:	4603      	mov	r3, r0
 8003b92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003b96:	e00a      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b9e:	e006      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003ba0:	bf00      	nop
 8003ba2:	e004      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003ba4:	bf00      	nop
 8003ba6:	e002      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003ba8:	bf00      	nop
 8003baa:	e000      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003bac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10b      	bne.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bb6:	4b39      	ldr	r3, [pc, #228]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bba:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc6:	4a35      	ldr	r2, [pc, #212]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003bc8:	430b      	orrs	r3, r1
 8003bca:	6553      	str	r3, [r2, #84]	; 0x54
 8003bcc:	e003      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bd2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bde:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003be2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003be6:	2300      	movs	r3, #0
 8003be8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003bec:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	d058      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bfe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003c02:	d033      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003c04:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003c08:	d82c      	bhi.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c0e:	d02f      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003c10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c14:	d826      	bhi.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003c16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c1a:	d02b      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003c1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c20:	d820      	bhi.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003c22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c26:	d012      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003c28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c2c:	d81a      	bhi.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d022      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c36:	d115      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c3c:	3308      	adds	r3, #8
 8003c3e:	2100      	movs	r1, #0
 8003c40:	4618      	mov	r0, r3
 8003c42:	f000 fe57 	bl	80048f4 <RCCEx_PLL2_Config>
 8003c46:	4603      	mov	r3, r0
 8003c48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003c4c:	e015      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c52:	3328      	adds	r3, #40	; 0x28
 8003c54:	2102      	movs	r1, #2
 8003c56:	4618      	mov	r0, r3
 8003c58:	f000 fefe 	bl	8004a58 <RCCEx_PLL3_Config>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003c62:	e00a      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c6a:	e006      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003c6c:	bf00      	nop
 8003c6e:	e004      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003c70:	bf00      	nop
 8003c72:	e002      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003c74:	bf00      	nop
 8003c76:	e000      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003c78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10e      	bne.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c82:	4b06      	ldr	r3, [pc, #24]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c86:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c92:	4a02      	ldr	r2, [pc, #8]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c94:	430b      	orrs	r3, r1
 8003c96:	6593      	str	r3, [r2, #88]	; 0x58
 8003c98:	e006      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003c9a:	bf00      	nop
 8003c9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ca4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003cb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003cb8:	2300      	movs	r3, #0
 8003cba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003cbe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	d055      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ccc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003cd0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003cd4:	d033      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003cd6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003cda:	d82c      	bhi.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003cdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ce0:	d02f      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003ce2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ce6:	d826      	bhi.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003ce8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003cec:	d02b      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003cee:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003cf2:	d820      	bhi.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003cf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cf8:	d012      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003cfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cfe:	d81a      	bhi.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d022      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003d04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d08:	d115      	bne.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d0e:	3308      	adds	r3, #8
 8003d10:	2100      	movs	r1, #0
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 fdee 	bl	80048f4 <RCCEx_PLL2_Config>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003d1e:	e015      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d24:	3328      	adds	r3, #40	; 0x28
 8003d26:	2102      	movs	r1, #2
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f000 fe95 	bl	8004a58 <RCCEx_PLL3_Config>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003d34:	e00a      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d3c:	e006      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003d3e:	bf00      	nop
 8003d40:	e004      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003d42:	bf00      	nop
 8003d44:	e002      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003d46:	bf00      	nop
 8003d48:	e000      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003d4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10b      	bne.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003d54:	4ba1      	ldr	r3, [pc, #644]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d58:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d64:	4a9d      	ldr	r2, [pc, #628]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d66:	430b      	orrs	r3, r1
 8003d68:	6593      	str	r3, [r2, #88]	; 0x58
 8003d6a:	e003      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7c:	f002 0308 	and.w	r3, r2, #8
 8003d80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d84:	2300      	movs	r3, #0
 8003d86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d8a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003d8e:	460b      	mov	r3, r1
 8003d90:	4313      	orrs	r3, r2
 8003d92:	d01e      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da0:	d10c      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003da6:	3328      	adds	r3, #40	; 0x28
 8003da8:	2102      	movs	r1, #2
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 fe54 	bl	8004a58 <RCCEx_PLL3_Config>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003dbc:	4b87      	ldr	r3, [pc, #540]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dcc:	4a83      	ldr	r2, [pc, #524]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003dce:	430b      	orrs	r3, r1
 8003dd0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dda:	f002 0310 	and.w	r3, r2, #16
 8003dde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003de2:	2300      	movs	r3, #0
 8003de4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003de8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003dec:	460b      	mov	r3, r1
 8003dee:	4313      	orrs	r3, r2
 8003df0:	d01e      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003df6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dfe:	d10c      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e04:	3328      	adds	r3, #40	; 0x28
 8003e06:	2102      	movs	r1, #2
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f000 fe25 	bl	8004a58 <RCCEx_PLL3_Config>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d002      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e1a:	4b70      	ldr	r3, [pc, #448]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e2a:	4a6c      	ldr	r2, [pc, #432]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e2c:	430b      	orrs	r3, r1
 8003e2e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e38:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003e3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e40:	2300      	movs	r3, #0
 8003e42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e46:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	d03e      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e5c:	d022      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003e5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e62:	d81b      	bhi.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d003      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e6c:	d00b      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003e6e:	e015      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e74:	3308      	adds	r3, #8
 8003e76:	2100      	movs	r1, #0
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f000 fd3b 	bl	80048f4 <RCCEx_PLL2_Config>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003e84:	e00f      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e8a:	3328      	adds	r3, #40	; 0x28
 8003e8c:	2102      	movs	r1, #2
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 fde2 	bl	8004a58 <RCCEx_PLL3_Config>
 8003e94:	4603      	mov	r3, r0
 8003e96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003e9a:	e004      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ea2:	e000      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003ea4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10b      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003eae:	4b4b      	ldr	r3, [pc, #300]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ebe:	4a47      	ldr	r2, [pc, #284]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ec0:	430b      	orrs	r3, r1
 8003ec2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ec4:	e003      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003eca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003eda:	67bb      	str	r3, [r7, #120]	; 0x78
 8003edc:	2300      	movs	r3, #0
 8003ede:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ee0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	d03b      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ef6:	d01f      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003ef8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003efc:	d818      	bhi.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003efe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f02:	d003      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003f04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f08:	d007      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003f0a:	e011      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f0c:	4b33      	ldr	r3, [pc, #204]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f10:	4a32      	ldr	r2, [pc, #200]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003f18:	e00f      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f1e:	3328      	adds	r3, #40	; 0x28
 8003f20:	2101      	movs	r1, #1
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 fd98 	bl	8004a58 <RCCEx_PLL3_Config>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003f2e:	e004      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f36:	e000      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003f38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10b      	bne.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f42:	4b26      	ldr	r3, [pc, #152]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f46:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f52:	4a22      	ldr	r2, [pc, #136]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f54:	430b      	orrs	r3, r1
 8003f56:	6553      	str	r3, [r2, #84]	; 0x54
 8003f58:	e003      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003f6e:	673b      	str	r3, [r7, #112]	; 0x70
 8003f70:	2300      	movs	r3, #0
 8003f72:	677b      	str	r3, [r7, #116]	; 0x74
 8003f74:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003f78:	460b      	mov	r3, r1
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	d034      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d003      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f8c:	d007      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003f8e:	e011      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f90:	4b12      	ldr	r3, [pc, #72]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f94:	4a11      	ldr	r2, [pc, #68]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003f9c:	e00e      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fa2:	3308      	adds	r3, #8
 8003fa4:	2102      	movs	r1, #2
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 fca4 	bl	80048f4 <RCCEx_PLL2_Config>
 8003fac:	4603      	mov	r3, r0
 8003fae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003fb2:	e003      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003fba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10d      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003fc4:	4b05      	ldr	r3, [pc, #20]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd2:	4a02      	ldr	r2, [pc, #8]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fd4:	430b      	orrs	r3, r1
 8003fd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fd8:	e006      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003fda:	bf00      	nop
 8003fdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fe4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003ff4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ffa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003ffe:	460b      	mov	r3, r1
 8004000:	4313      	orrs	r3, r2
 8004002:	d00c      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004004:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004008:	3328      	adds	r3, #40	; 0x28
 800400a:	2102      	movs	r1, #2
 800400c:	4618      	mov	r0, r3
 800400e:	f000 fd23 	bl	8004a58 <RCCEx_PLL3_Config>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d002      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800401e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004026:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800402a:	663b      	str	r3, [r7, #96]	; 0x60
 800402c:	2300      	movs	r3, #0
 800402e:	667b      	str	r3, [r7, #100]	; 0x64
 8004030:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004034:	460b      	mov	r3, r1
 8004036:	4313      	orrs	r3, r2
 8004038:	d038      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800403a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800403e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004042:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004046:	d018      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004048:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800404c:	d811      	bhi.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800404e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004052:	d014      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004058:	d80b      	bhi.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800405a:	2b00      	cmp	r3, #0
 800405c:	d011      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800405e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004062:	d106      	bne.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004064:	4bc3      	ldr	r3, [pc, #780]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004068:	4ac2      	ldr	r2, [pc, #776]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800406a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800406e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004070:	e008      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004078:	e004      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800407a:	bf00      	nop
 800407c:	e002      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800407e:	bf00      	nop
 8004080:	e000      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004082:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004084:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10b      	bne.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800408c:	4bb9      	ldr	r3, [pc, #740]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800408e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004090:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004094:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004098:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800409c:	4ab5      	ldr	r2, [pc, #724]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800409e:	430b      	orrs	r3, r1
 80040a0:	6553      	str	r3, [r2, #84]	; 0x54
 80040a2:	e003      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80040b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80040ba:	2300      	movs	r3, #0
 80040bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040be:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80040c2:	460b      	mov	r3, r1
 80040c4:	4313      	orrs	r3, r2
 80040c6:	d009      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040c8:	4baa      	ldr	r3, [pc, #680]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80040ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040cc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80040d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040d6:	4aa7      	ldr	r2, [pc, #668]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80040d8:	430b      	orrs	r3, r1
 80040da:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80040dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80040e8:	653b      	str	r3, [r7, #80]	; 0x50
 80040ea:	2300      	movs	r3, #0
 80040ec:	657b      	str	r3, [r7, #84]	; 0x54
 80040ee:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80040f2:	460b      	mov	r3, r1
 80040f4:	4313      	orrs	r3, r2
 80040f6:	d00a      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80040f8:	4b9e      	ldr	r3, [pc, #632]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004100:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004104:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004108:	4a9a      	ldr	r2, [pc, #616]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800410a:	430b      	orrs	r3, r1
 800410c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800410e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004116:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800411a:	64bb      	str	r3, [r7, #72]	; 0x48
 800411c:	2300      	movs	r3, #0
 800411e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004120:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004124:	460b      	mov	r3, r1
 8004126:	4313      	orrs	r3, r2
 8004128:	d009      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800412a:	4b92      	ldr	r3, [pc, #584]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800412c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800412e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004132:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004138:	4a8e      	ldr	r2, [pc, #568]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800413a:	430b      	orrs	r3, r1
 800413c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800413e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004146:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800414a:	643b      	str	r3, [r7, #64]	; 0x40
 800414c:	2300      	movs	r3, #0
 800414e:	647b      	str	r3, [r7, #68]	; 0x44
 8004150:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004154:	460b      	mov	r3, r1
 8004156:	4313      	orrs	r3, r2
 8004158:	d00e      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800415a:	4b86      	ldr	r3, [pc, #536]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	4a85      	ldr	r2, [pc, #532]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004160:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004164:	6113      	str	r3, [r2, #16]
 8004166:	4b83      	ldr	r3, [pc, #524]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004168:	6919      	ldr	r1, [r3, #16]
 800416a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800416e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004172:	4a80      	ldr	r2, [pc, #512]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004174:	430b      	orrs	r3, r1
 8004176:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004178:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800417c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004180:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004184:	63bb      	str	r3, [r7, #56]	; 0x38
 8004186:	2300      	movs	r3, #0
 8004188:	63fb      	str	r3, [r7, #60]	; 0x3c
 800418a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800418e:	460b      	mov	r3, r1
 8004190:	4313      	orrs	r3, r2
 8004192:	d009      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004194:	4b77      	ldr	r3, [pc, #476]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004198:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800419c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a2:	4a74      	ldr	r2, [pc, #464]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041a4:	430b      	orrs	r3, r1
 80041a6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80041a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80041b4:	633b      	str	r3, [r7, #48]	; 0x30
 80041b6:	2300      	movs	r3, #0
 80041b8:	637b      	str	r3, [r7, #52]	; 0x34
 80041ba:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80041be:	460b      	mov	r3, r1
 80041c0:	4313      	orrs	r3, r2
 80041c2:	d00a      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80041c4:	4b6b      	ldr	r3, [pc, #428]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80041cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041d4:	4a67      	ldr	r2, [pc, #412]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041d6:	430b      	orrs	r3, r1
 80041d8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80041da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e2:	2100      	movs	r1, #0
 80041e4:	62b9      	str	r1, [r7, #40]	; 0x28
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041ec:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80041f0:	460b      	mov	r3, r1
 80041f2:	4313      	orrs	r3, r2
 80041f4:	d011      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041fa:	3308      	adds	r3, #8
 80041fc:	2100      	movs	r1, #0
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 fb78 	bl	80048f4 <RCCEx_PLL2_Config>
 8004204:	4603      	mov	r3, r0
 8004206:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800420a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004212:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004216:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800421a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800421e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004222:	2100      	movs	r1, #0
 8004224:	6239      	str	r1, [r7, #32]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	627b      	str	r3, [r7, #36]	; 0x24
 800422c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004230:	460b      	mov	r3, r1
 8004232:	4313      	orrs	r3, r2
 8004234:	d011      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800423a:	3308      	adds	r3, #8
 800423c:	2101      	movs	r1, #1
 800423e:	4618      	mov	r0, r3
 8004240:	f000 fb58 	bl	80048f4 <RCCEx_PLL2_Config>
 8004244:	4603      	mov	r3, r0
 8004246:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800424a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004252:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004256:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800425a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800425e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004262:	2100      	movs	r1, #0
 8004264:	61b9      	str	r1, [r7, #24]
 8004266:	f003 0304 	and.w	r3, r3, #4
 800426a:	61fb      	str	r3, [r7, #28]
 800426c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004270:	460b      	mov	r3, r1
 8004272:	4313      	orrs	r3, r2
 8004274:	d011      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800427a:	3308      	adds	r3, #8
 800427c:	2102      	movs	r1, #2
 800427e:	4618      	mov	r0, r3
 8004280:	f000 fb38 	bl	80048f4 <RCCEx_PLL2_Config>
 8004284:	4603      	mov	r3, r0
 8004286:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800428a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800428e:	2b00      	cmp	r3, #0
 8004290:	d003      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004292:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004296:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800429a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800429e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a2:	2100      	movs	r1, #0
 80042a4:	6139      	str	r1, [r7, #16]
 80042a6:	f003 0308 	and.w	r3, r3, #8
 80042aa:	617b      	str	r3, [r7, #20]
 80042ac:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80042b0:	460b      	mov	r3, r1
 80042b2:	4313      	orrs	r3, r2
 80042b4:	d011      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80042b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ba:	3328      	adds	r3, #40	; 0x28
 80042bc:	2100      	movs	r1, #0
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 fbca 	bl	8004a58 <RCCEx_PLL3_Config>
 80042c4:	4603      	mov	r3, r0
 80042c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80042ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80042da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e2:	2100      	movs	r1, #0
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	f003 0310 	and.w	r3, r3, #16
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80042f0:	460b      	mov	r3, r1
 80042f2:	4313      	orrs	r3, r2
 80042f4:	d011      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042fa:	3328      	adds	r3, #40	; 0x28
 80042fc:	2101      	movs	r1, #1
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 fbaa 	bl	8004a58 <RCCEx_PLL3_Config>
 8004304:	4603      	mov	r3, r0
 8004306:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800430a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004312:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004316:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800431a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800431e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004322:	2100      	movs	r1, #0
 8004324:	6039      	str	r1, [r7, #0]
 8004326:	f003 0320 	and.w	r3, r3, #32
 800432a:	607b      	str	r3, [r7, #4]
 800432c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004330:	460b      	mov	r3, r1
 8004332:	4313      	orrs	r3, r2
 8004334:	d011      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800433a:	3328      	adds	r3, #40	; 0x28
 800433c:	2102      	movs	r1, #2
 800433e:	4618      	mov	r0, r3
 8004340:	f000 fb8a 	bl	8004a58 <RCCEx_PLL3_Config>
 8004344:	4603      	mov	r3, r0
 8004346:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800434a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800434e:	2b00      	cmp	r3, #0
 8004350:	d003      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004352:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004356:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800435a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	e000      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
}
 8004368:	4618      	mov	r0, r3
 800436a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800436e:	46bd      	mov	sp, r7
 8004370:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004374:	58024400 	.word	0x58024400

08004378 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800437c:	f7fe fd96 	bl	8002eac <HAL_RCC_GetHCLKFreq>
 8004380:	4602      	mov	r2, r0
 8004382:	4b06      	ldr	r3, [pc, #24]	; (800439c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	091b      	lsrs	r3, r3, #4
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	4904      	ldr	r1, [pc, #16]	; (80043a0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800438e:	5ccb      	ldrb	r3, [r1, r3]
 8004390:	f003 031f 	and.w	r3, r3, #31
 8004394:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004398:	4618      	mov	r0, r3
 800439a:	bd80      	pop	{r7, pc}
 800439c:	58024400 	.word	0x58024400
 80043a0:	08008b54 	.word	0x08008b54

080043a4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b089      	sub	sp, #36	; 0x24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80043ac:	4ba1      	ldr	r3, [pc, #644]	; (8004634 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b0:	f003 0303 	and.w	r3, r3, #3
 80043b4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80043b6:	4b9f      	ldr	r3, [pc, #636]	; (8004634 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ba:	0b1b      	lsrs	r3, r3, #12
 80043bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043c0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80043c2:	4b9c      	ldr	r3, [pc, #624]	; (8004634 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c6:	091b      	lsrs	r3, r3, #4
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80043ce:	4b99      	ldr	r3, [pc, #612]	; (8004634 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d2:	08db      	lsrs	r3, r3, #3
 80043d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	fb02 f303 	mul.w	r3, r2, r3
 80043de:	ee07 3a90 	vmov	s15, r3
 80043e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 8111 	beq.w	8004614 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	f000 8083 	beq.w	8004500 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	f200 80a1 	bhi.w	8004544 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d003      	beq.n	8004410 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d056      	beq.n	80044bc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800440e:	e099      	b.n	8004544 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004410:	4b88      	ldr	r3, [pc, #544]	; (8004634 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0320 	and.w	r3, r3, #32
 8004418:	2b00      	cmp	r3, #0
 800441a:	d02d      	beq.n	8004478 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800441c:	4b85      	ldr	r3, [pc, #532]	; (8004634 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	08db      	lsrs	r3, r3, #3
 8004422:	f003 0303 	and.w	r3, r3, #3
 8004426:	4a84      	ldr	r2, [pc, #528]	; (8004638 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004428:	fa22 f303 	lsr.w	r3, r2, r3
 800442c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	ee07 3a90 	vmov	s15, r3
 8004434:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	ee07 3a90 	vmov	s15, r3
 800443e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004446:	4b7b      	ldr	r3, [pc, #492]	; (8004634 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800444e:	ee07 3a90 	vmov	s15, r3
 8004452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004456:	ed97 6a03 	vldr	s12, [r7, #12]
 800445a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800463c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800445e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004466:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800446a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800446e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004472:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004476:	e087      	b.n	8004588 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	ee07 3a90 	vmov	s15, r3
 800447e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004482:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004640 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800448a:	4b6a      	ldr	r3, [pc, #424]	; (8004634 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800448c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004492:	ee07 3a90 	vmov	s15, r3
 8004496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800449a:	ed97 6a03 	vldr	s12, [r7, #12]
 800449e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800463c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044ba:	e065      	b.n	8004588 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	ee07 3a90 	vmov	s15, r3
 80044c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044c6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004644 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80044ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044ce:	4b59      	ldr	r3, [pc, #356]	; (8004634 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044d6:	ee07 3a90 	vmov	s15, r3
 80044da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044de:	ed97 6a03 	vldr	s12, [r7, #12]
 80044e2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800463c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044fe:	e043      	b.n	8004588 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	ee07 3a90 	vmov	s15, r3
 8004506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800450a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004648 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800450e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004512:	4b48      	ldr	r3, [pc, #288]	; (8004634 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800451a:	ee07 3a90 	vmov	s15, r3
 800451e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004522:	ed97 6a03 	vldr	s12, [r7, #12]
 8004526:	eddf 5a45 	vldr	s11, [pc, #276]	; 800463c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800452a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800452e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004532:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800453a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800453e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004542:	e021      	b.n	8004588 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	ee07 3a90 	vmov	s15, r3
 800454a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800454e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004644 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004556:	4b37      	ldr	r3, [pc, #220]	; (8004634 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800455e:	ee07 3a90 	vmov	s15, r3
 8004562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004566:	ed97 6a03 	vldr	s12, [r7, #12]
 800456a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800463c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800456e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004576:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800457a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800457e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004582:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004586:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004588:	4b2a      	ldr	r3, [pc, #168]	; (8004634 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800458a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458c:	0a5b      	lsrs	r3, r3, #9
 800458e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004592:	ee07 3a90 	vmov	s15, r3
 8004596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800459a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800459e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80045a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045ae:	ee17 2a90 	vmov	r2, s15
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80045b6:	4b1f      	ldr	r3, [pc, #124]	; (8004634 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ba:	0c1b      	lsrs	r3, r3, #16
 80045bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045c0:	ee07 3a90 	vmov	s15, r3
 80045c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80045d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045dc:	ee17 2a90 	vmov	r2, s15
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80045e4:	4b13      	ldr	r3, [pc, #76]	; (8004634 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e8:	0e1b      	lsrs	r3, r3, #24
 80045ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045ee:	ee07 3a90 	vmov	s15, r3
 80045f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004602:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004606:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800460a:	ee17 2a90 	vmov	r2, s15
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004612:	e008      	b.n	8004626 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	609a      	str	r2, [r3, #8]
}
 8004626:	bf00      	nop
 8004628:	3724      	adds	r7, #36	; 0x24
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	58024400 	.word	0x58024400
 8004638:	03d09000 	.word	0x03d09000
 800463c:	46000000 	.word	0x46000000
 8004640:	4c742400 	.word	0x4c742400
 8004644:	4a742400 	.word	0x4a742400
 8004648:	4bbebc20 	.word	0x4bbebc20

0800464c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800464c:	b480      	push	{r7}
 800464e:	b089      	sub	sp, #36	; 0x24
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004654:	4ba1      	ldr	r3, [pc, #644]	; (80048dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004658:	f003 0303 	and.w	r3, r3, #3
 800465c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800465e:	4b9f      	ldr	r3, [pc, #636]	; (80048dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004662:	0d1b      	lsrs	r3, r3, #20
 8004664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004668:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800466a:	4b9c      	ldr	r3, [pc, #624]	; (80048dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800466c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466e:	0a1b      	lsrs	r3, r3, #8
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004676:	4b99      	ldr	r3, [pc, #612]	; (80048dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467a:	08db      	lsrs	r3, r3, #3
 800467c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	fb02 f303 	mul.w	r3, r2, r3
 8004686:	ee07 3a90 	vmov	s15, r3
 800468a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800468e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 8111 	beq.w	80048bc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	2b02      	cmp	r3, #2
 800469e:	f000 8083 	beq.w	80047a8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	f200 80a1 	bhi.w	80047ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d003      	beq.n	80046b8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d056      	beq.n	8004764 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80046b6:	e099      	b.n	80047ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046b8:	4b88      	ldr	r3, [pc, #544]	; (80048dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0320 	and.w	r3, r3, #32
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d02d      	beq.n	8004720 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80046c4:	4b85      	ldr	r3, [pc, #532]	; (80048dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	08db      	lsrs	r3, r3, #3
 80046ca:	f003 0303 	and.w	r3, r3, #3
 80046ce:	4a84      	ldr	r2, [pc, #528]	; (80048e0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80046d0:	fa22 f303 	lsr.w	r3, r2, r3
 80046d4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	ee07 3a90 	vmov	s15, r3
 80046dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	ee07 3a90 	vmov	s15, r3
 80046e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ee:	4b7b      	ldr	r3, [pc, #492]	; (80048dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046f6:	ee07 3a90 	vmov	s15, r3
 80046fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004702:	eddf 5a78 	vldr	s11, [pc, #480]	; 80048e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800470a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800470e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800471a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800471e:	e087      	b.n	8004830 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	ee07 3a90 	vmov	s15, r3
 8004726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800472a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80048e8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800472e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004732:	4b6a      	ldr	r3, [pc, #424]	; (80048dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800473a:	ee07 3a90 	vmov	s15, r3
 800473e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004742:	ed97 6a03 	vldr	s12, [r7, #12]
 8004746:	eddf 5a67 	vldr	s11, [pc, #412]	; 80048e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800474a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800474e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800475a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800475e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004762:	e065      	b.n	8004830 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	ee07 3a90 	vmov	s15, r3
 800476a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800476e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80048ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004776:	4b59      	ldr	r3, [pc, #356]	; (80048dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800477e:	ee07 3a90 	vmov	s15, r3
 8004782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004786:	ed97 6a03 	vldr	s12, [r7, #12]
 800478a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80048e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800478e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800479a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800479e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047a6:	e043      	b.n	8004830 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	ee07 3a90 	vmov	s15, r3
 80047ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047b2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80048f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80047b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ba:	4b48      	ldr	r3, [pc, #288]	; (80048dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c2:	ee07 3a90 	vmov	s15, r3
 80047c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80047ce:	eddf 5a45 	vldr	s11, [pc, #276]	; 80048e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047ea:	e021      	b.n	8004830 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	ee07 3a90 	vmov	s15, r3
 80047f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047f6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80048ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80047fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047fe:	4b37      	ldr	r3, [pc, #220]	; (80048dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004806:	ee07 3a90 	vmov	s15, r3
 800480a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800480e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004812:	eddf 5a34 	vldr	s11, [pc, #208]	; 80048e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800481a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800481e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800482a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800482e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004830:	4b2a      	ldr	r3, [pc, #168]	; (80048dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004834:	0a5b      	lsrs	r3, r3, #9
 8004836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800483a:	ee07 3a90 	vmov	s15, r3
 800483e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004842:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004846:	ee37 7a87 	vadd.f32	s14, s15, s14
 800484a:	edd7 6a07 	vldr	s13, [r7, #28]
 800484e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004852:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004856:	ee17 2a90 	vmov	r2, s15
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800485e:	4b1f      	ldr	r3, [pc, #124]	; (80048dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	0c1b      	lsrs	r3, r3, #16
 8004864:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004868:	ee07 3a90 	vmov	s15, r3
 800486c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004870:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004874:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004878:	edd7 6a07 	vldr	s13, [r7, #28]
 800487c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004880:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004884:	ee17 2a90 	vmov	r2, s15
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800488c:	4b13      	ldr	r3, [pc, #76]	; (80048dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800488e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004890:	0e1b      	lsrs	r3, r3, #24
 8004892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004896:	ee07 3a90 	vmov	s15, r3
 800489a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800489e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80048aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048b2:	ee17 2a90 	vmov	r2, s15
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80048ba:	e008      	b.n	80048ce <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	609a      	str	r2, [r3, #8]
}
 80048ce:	bf00      	nop
 80048d0:	3724      	adds	r7, #36	; 0x24
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	58024400 	.word	0x58024400
 80048e0:	03d09000 	.word	0x03d09000
 80048e4:	46000000 	.word	0x46000000
 80048e8:	4c742400 	.word	0x4c742400
 80048ec:	4a742400 	.word	0x4a742400
 80048f0:	4bbebc20 	.word	0x4bbebc20

080048f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048fe:	2300      	movs	r3, #0
 8004900:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004902:	4b53      	ldr	r3, [pc, #332]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 8004904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004906:	f003 0303 	and.w	r3, r3, #3
 800490a:	2b03      	cmp	r3, #3
 800490c:	d101      	bne.n	8004912 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e099      	b.n	8004a46 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004912:	4b4f      	ldr	r3, [pc, #316]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a4e      	ldr	r2, [pc, #312]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 8004918:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800491c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800491e:	f7fc fd7f 	bl	8001420 <HAL_GetTick>
 8004922:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004924:	e008      	b.n	8004938 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004926:	f7fc fd7b 	bl	8001420 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	2b02      	cmp	r3, #2
 8004932:	d901      	bls.n	8004938 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e086      	b.n	8004a46 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004938:	4b45      	ldr	r3, [pc, #276]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1f0      	bne.n	8004926 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004944:	4b42      	ldr	r3, [pc, #264]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 8004946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004948:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	031b      	lsls	r3, r3, #12
 8004952:	493f      	ldr	r1, [pc, #252]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 8004954:	4313      	orrs	r3, r2
 8004956:	628b      	str	r3, [r1, #40]	; 0x28
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	3b01      	subs	r3, #1
 800495e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	3b01      	subs	r3, #1
 8004968:	025b      	lsls	r3, r3, #9
 800496a:	b29b      	uxth	r3, r3
 800496c:	431a      	orrs	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	3b01      	subs	r3, #1
 8004974:	041b      	lsls	r3, r3, #16
 8004976:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	3b01      	subs	r3, #1
 8004982:	061b      	lsls	r3, r3, #24
 8004984:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004988:	4931      	ldr	r1, [pc, #196]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 800498a:	4313      	orrs	r3, r2
 800498c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800498e:	4b30      	ldr	r3, [pc, #192]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 8004990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004992:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	492d      	ldr	r1, [pc, #180]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 800499c:	4313      	orrs	r3, r2
 800499e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80049a0:	4b2b      	ldr	r3, [pc, #172]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 80049a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a4:	f023 0220 	bic.w	r2, r3, #32
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	4928      	ldr	r1, [pc, #160]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80049b2:	4b27      	ldr	r3, [pc, #156]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 80049b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b6:	4a26      	ldr	r2, [pc, #152]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 80049b8:	f023 0310 	bic.w	r3, r3, #16
 80049bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80049be:	4b24      	ldr	r3, [pc, #144]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 80049c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049c2:	4b24      	ldr	r3, [pc, #144]	; (8004a54 <RCCEx_PLL2_Config+0x160>)
 80049c4:	4013      	ands	r3, r2
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	69d2      	ldr	r2, [r2, #28]
 80049ca:	00d2      	lsls	r2, r2, #3
 80049cc:	4920      	ldr	r1, [pc, #128]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80049d2:	4b1f      	ldr	r3, [pc, #124]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 80049d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d6:	4a1e      	ldr	r2, [pc, #120]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 80049d8:	f043 0310 	orr.w	r3, r3, #16
 80049dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d106      	bne.n	80049f2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80049e4:	4b1a      	ldr	r3, [pc, #104]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 80049e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e8:	4a19      	ldr	r2, [pc, #100]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 80049ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049f0:	e00f      	b.n	8004a12 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d106      	bne.n	8004a06 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80049f8:	4b15      	ldr	r3, [pc, #84]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 80049fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fc:	4a14      	ldr	r2, [pc, #80]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 80049fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a04:	e005      	b.n	8004a12 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004a06:	4b12      	ldr	r3, [pc, #72]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 8004a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0a:	4a11      	ldr	r2, [pc, #68]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 8004a0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a10:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004a12:	4b0f      	ldr	r3, [pc, #60]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a0e      	ldr	r2, [pc, #56]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 8004a18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a1e:	f7fc fcff 	bl	8001420 <HAL_GetTick>
 8004a22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004a24:	e008      	b.n	8004a38 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004a26:	f7fc fcfb 	bl	8001420 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d901      	bls.n	8004a38 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e006      	b.n	8004a46 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004a38:	4b05      	ldr	r3, [pc, #20]	; (8004a50 <RCCEx_PLL2_Config+0x15c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d0f0      	beq.n	8004a26 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	58024400 	.word	0x58024400
 8004a54:	ffff0007 	.word	0xffff0007

08004a58 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a62:	2300      	movs	r3, #0
 8004a64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a66:	4b53      	ldr	r3, [pc, #332]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6a:	f003 0303 	and.w	r3, r3, #3
 8004a6e:	2b03      	cmp	r3, #3
 8004a70:	d101      	bne.n	8004a76 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e099      	b.n	8004baa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004a76:	4b4f      	ldr	r3, [pc, #316]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a4e      	ldr	r2, [pc, #312]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004a7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a82:	f7fc fccd 	bl	8001420 <HAL_GetTick>
 8004a86:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a88:	e008      	b.n	8004a9c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004a8a:	f7fc fcc9 	bl	8001420 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d901      	bls.n	8004a9c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e086      	b.n	8004baa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a9c:	4b45      	ldr	r3, [pc, #276]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1f0      	bne.n	8004a8a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004aa8:	4b42      	ldr	r3, [pc, #264]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aac:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	051b      	lsls	r3, r3, #20
 8004ab6:	493f      	ldr	r1, [pc, #252]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	628b      	str	r3, [r1, #40]	; 0x28
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	3b01      	subs	r3, #1
 8004acc:	025b      	lsls	r3, r3, #9
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	041b      	lsls	r3, r3, #16
 8004ada:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	061b      	lsls	r3, r3, #24
 8004ae8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004aec:	4931      	ldr	r1, [pc, #196]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004af2:	4b30      	ldr	r3, [pc, #192]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	492d      	ldr	r1, [pc, #180]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004b04:	4b2b      	ldr	r3, [pc, #172]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b08:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	4928      	ldr	r1, [pc, #160]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004b16:	4b27      	ldr	r3, [pc, #156]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1a:	4a26      	ldr	r2, [pc, #152]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004b1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004b22:	4b24      	ldr	r3, [pc, #144]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004b24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b26:	4b24      	ldr	r3, [pc, #144]	; (8004bb8 <RCCEx_PLL3_Config+0x160>)
 8004b28:	4013      	ands	r3, r2
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	69d2      	ldr	r2, [r2, #28]
 8004b2e:	00d2      	lsls	r2, r2, #3
 8004b30:	4920      	ldr	r1, [pc, #128]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004b36:	4b1f      	ldr	r3, [pc, #124]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3a:	4a1e      	ldr	r2, [pc, #120]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d106      	bne.n	8004b56 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004b48:	4b1a      	ldr	r3, [pc, #104]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4c:	4a19      	ldr	r2, [pc, #100]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004b4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b54:	e00f      	b.n	8004b76 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d106      	bne.n	8004b6a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004b5c:	4b15      	ldr	r3, [pc, #84]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b60:	4a14      	ldr	r2, [pc, #80]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004b62:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b68:	e005      	b.n	8004b76 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004b6a:	4b12      	ldr	r3, [pc, #72]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6e:	4a11      	ldr	r2, [pc, #68]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004b70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b74:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004b76:	4b0f      	ldr	r3, [pc, #60]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a0e      	ldr	r2, [pc, #56]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b82:	f7fc fc4d 	bl	8001420 <HAL_GetTick>
 8004b86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b88:	e008      	b.n	8004b9c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004b8a:	f7fc fc49 	bl	8001420 <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d901      	bls.n	8004b9c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e006      	b.n	8004baa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b9c:	4b05      	ldr	r3, [pc, #20]	; (8004bb4 <RCCEx_PLL3_Config+0x15c>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0f0      	beq.n	8004b8a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	58024400 	.word	0x58024400
 8004bb8:	ffff0007 	.word	0xffff0007

08004bbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e042      	b.n	8004c54 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d106      	bne.n	8004be6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f7fc f965 	bl	8000eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2224      	movs	r2, #36	; 0x24
 8004bea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f022 0201 	bic.w	r2, r2, #1
 8004bfc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f8ba 	bl	8004d78 <UART_SetConfig>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d101      	bne.n	8004c0e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e022      	b.n	8004c54 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d002      	beq.n	8004c1c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 fe16 	bl	8005848 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689a      	ldr	r2, [r3, #8]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f042 0201 	orr.w	r2, r2, #1
 8004c4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 fe9d 	bl	800598c <UART_CheckIdleState>
 8004c52:	4603      	mov	r3, r0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3708      	adds	r7, #8
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b08a      	sub	sp, #40	; 0x28
 8004c60:	af02      	add	r7, sp, #8
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	603b      	str	r3, [r7, #0]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c72:	2b20      	cmp	r3, #32
 8004c74:	d17b      	bne.n	8004d6e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d002      	beq.n	8004c82 <HAL_UART_Transmit+0x26>
 8004c7c:	88fb      	ldrh	r3, [r7, #6]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e074      	b.n	8004d70 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2221      	movs	r2, #33	; 0x21
 8004c92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c96:	f7fc fbc3 	bl	8001420 <HAL_GetTick>
 8004c9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	88fa      	ldrh	r2, [r7, #6]
 8004ca0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	88fa      	ldrh	r2, [r7, #6]
 8004ca8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cb4:	d108      	bne.n	8004cc8 <HAL_UART_Transmit+0x6c>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d104      	bne.n	8004cc8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	61bb      	str	r3, [r7, #24]
 8004cc6:	e003      	b.n	8004cd0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004cd0:	e030      	b.n	8004d34 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	2180      	movs	r1, #128	; 0x80
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f000 feff 	bl	8005ae0 <UART_WaitOnFlagUntilTimeout>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d005      	beq.n	8004cf4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2220      	movs	r2, #32
 8004cec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e03d      	b.n	8004d70 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10b      	bne.n	8004d12 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	881b      	ldrh	r3, [r3, #0]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d08:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	3302      	adds	r3, #2
 8004d0e:	61bb      	str	r3, [r7, #24]
 8004d10:	e007      	b.n	8004d22 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	781a      	ldrb	r2, [r3, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	3301      	adds	r3, #1
 8004d20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1c8      	bne.n	8004cd2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	2200      	movs	r2, #0
 8004d48:	2140      	movs	r1, #64	; 0x40
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f000 fec8 	bl	8005ae0 <UART_WaitOnFlagUntilTimeout>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d005      	beq.n	8004d62 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2220      	movs	r2, #32
 8004d5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e006      	b.n	8004d70 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2220      	movs	r2, #32
 8004d66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	e000      	b.n	8004d70 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004d6e:	2302      	movs	r3, #2
  }
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3720      	adds	r7, #32
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d7c:	b092      	sub	sp, #72	; 0x48
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d82:	2300      	movs	r3, #0
 8004d84:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	689a      	ldr	r2, [r3, #8]
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	431a      	orrs	r2, r3
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	431a      	orrs	r2, r3
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	69db      	ldr	r3, [r3, #28]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	4bbe      	ldr	r3, [pc, #760]	; (80050a0 <UART_SetConfig+0x328>)
 8004da8:	4013      	ands	r3, r2
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	6812      	ldr	r2, [r2, #0]
 8004dae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004db0:	430b      	orrs	r3, r1
 8004db2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	68da      	ldr	r2, [r3, #12]
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4ab3      	ldr	r2, [pc, #716]	; (80050a4 <UART_SetConfig+0x32c>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d004      	beq.n	8004de4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004de0:	4313      	orrs	r3, r2
 8004de2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	689a      	ldr	r2, [r3, #8]
 8004dea:	4baf      	ldr	r3, [pc, #700]	; (80050a8 <UART_SetConfig+0x330>)
 8004dec:	4013      	ands	r3, r2
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	6812      	ldr	r2, [r2, #0]
 8004df2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004df4:	430b      	orrs	r3, r1
 8004df6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfe:	f023 010f 	bic.w	r1, r3, #15
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4aa6      	ldr	r2, [pc, #664]	; (80050ac <UART_SetConfig+0x334>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d177      	bne.n	8004f08 <UART_SetConfig+0x190>
 8004e18:	4ba5      	ldr	r3, [pc, #660]	; (80050b0 <UART_SetConfig+0x338>)
 8004e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e20:	2b28      	cmp	r3, #40	; 0x28
 8004e22:	d86d      	bhi.n	8004f00 <UART_SetConfig+0x188>
 8004e24:	a201      	add	r2, pc, #4	; (adr r2, 8004e2c <UART_SetConfig+0xb4>)
 8004e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2a:	bf00      	nop
 8004e2c:	08004ed1 	.word	0x08004ed1
 8004e30:	08004f01 	.word	0x08004f01
 8004e34:	08004f01 	.word	0x08004f01
 8004e38:	08004f01 	.word	0x08004f01
 8004e3c:	08004f01 	.word	0x08004f01
 8004e40:	08004f01 	.word	0x08004f01
 8004e44:	08004f01 	.word	0x08004f01
 8004e48:	08004f01 	.word	0x08004f01
 8004e4c:	08004ed9 	.word	0x08004ed9
 8004e50:	08004f01 	.word	0x08004f01
 8004e54:	08004f01 	.word	0x08004f01
 8004e58:	08004f01 	.word	0x08004f01
 8004e5c:	08004f01 	.word	0x08004f01
 8004e60:	08004f01 	.word	0x08004f01
 8004e64:	08004f01 	.word	0x08004f01
 8004e68:	08004f01 	.word	0x08004f01
 8004e6c:	08004ee1 	.word	0x08004ee1
 8004e70:	08004f01 	.word	0x08004f01
 8004e74:	08004f01 	.word	0x08004f01
 8004e78:	08004f01 	.word	0x08004f01
 8004e7c:	08004f01 	.word	0x08004f01
 8004e80:	08004f01 	.word	0x08004f01
 8004e84:	08004f01 	.word	0x08004f01
 8004e88:	08004f01 	.word	0x08004f01
 8004e8c:	08004ee9 	.word	0x08004ee9
 8004e90:	08004f01 	.word	0x08004f01
 8004e94:	08004f01 	.word	0x08004f01
 8004e98:	08004f01 	.word	0x08004f01
 8004e9c:	08004f01 	.word	0x08004f01
 8004ea0:	08004f01 	.word	0x08004f01
 8004ea4:	08004f01 	.word	0x08004f01
 8004ea8:	08004f01 	.word	0x08004f01
 8004eac:	08004ef1 	.word	0x08004ef1
 8004eb0:	08004f01 	.word	0x08004f01
 8004eb4:	08004f01 	.word	0x08004f01
 8004eb8:	08004f01 	.word	0x08004f01
 8004ebc:	08004f01 	.word	0x08004f01
 8004ec0:	08004f01 	.word	0x08004f01
 8004ec4:	08004f01 	.word	0x08004f01
 8004ec8:	08004f01 	.word	0x08004f01
 8004ecc:	08004ef9 	.word	0x08004ef9
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ed6:	e222      	b.n	800531e <UART_SetConfig+0x5a6>
 8004ed8:	2304      	movs	r3, #4
 8004eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ede:	e21e      	b.n	800531e <UART_SetConfig+0x5a6>
 8004ee0:	2308      	movs	r3, #8
 8004ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ee6:	e21a      	b.n	800531e <UART_SetConfig+0x5a6>
 8004ee8:	2310      	movs	r3, #16
 8004eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eee:	e216      	b.n	800531e <UART_SetConfig+0x5a6>
 8004ef0:	2320      	movs	r3, #32
 8004ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ef6:	e212      	b.n	800531e <UART_SetConfig+0x5a6>
 8004ef8:	2340      	movs	r3, #64	; 0x40
 8004efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004efe:	e20e      	b.n	800531e <UART_SetConfig+0x5a6>
 8004f00:	2380      	movs	r3, #128	; 0x80
 8004f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f06:	e20a      	b.n	800531e <UART_SetConfig+0x5a6>
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a69      	ldr	r2, [pc, #420]	; (80050b4 <UART_SetConfig+0x33c>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d130      	bne.n	8004f74 <UART_SetConfig+0x1fc>
 8004f12:	4b67      	ldr	r3, [pc, #412]	; (80050b0 <UART_SetConfig+0x338>)
 8004f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f16:	f003 0307 	and.w	r3, r3, #7
 8004f1a:	2b05      	cmp	r3, #5
 8004f1c:	d826      	bhi.n	8004f6c <UART_SetConfig+0x1f4>
 8004f1e:	a201      	add	r2, pc, #4	; (adr r2, 8004f24 <UART_SetConfig+0x1ac>)
 8004f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f24:	08004f3d 	.word	0x08004f3d
 8004f28:	08004f45 	.word	0x08004f45
 8004f2c:	08004f4d 	.word	0x08004f4d
 8004f30:	08004f55 	.word	0x08004f55
 8004f34:	08004f5d 	.word	0x08004f5d
 8004f38:	08004f65 	.word	0x08004f65
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f42:	e1ec      	b.n	800531e <UART_SetConfig+0x5a6>
 8004f44:	2304      	movs	r3, #4
 8004f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f4a:	e1e8      	b.n	800531e <UART_SetConfig+0x5a6>
 8004f4c:	2308      	movs	r3, #8
 8004f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f52:	e1e4      	b.n	800531e <UART_SetConfig+0x5a6>
 8004f54:	2310      	movs	r3, #16
 8004f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f5a:	e1e0      	b.n	800531e <UART_SetConfig+0x5a6>
 8004f5c:	2320      	movs	r3, #32
 8004f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f62:	e1dc      	b.n	800531e <UART_SetConfig+0x5a6>
 8004f64:	2340      	movs	r3, #64	; 0x40
 8004f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f6a:	e1d8      	b.n	800531e <UART_SetConfig+0x5a6>
 8004f6c:	2380      	movs	r3, #128	; 0x80
 8004f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f72:	e1d4      	b.n	800531e <UART_SetConfig+0x5a6>
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a4f      	ldr	r2, [pc, #316]	; (80050b8 <UART_SetConfig+0x340>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d130      	bne.n	8004fe0 <UART_SetConfig+0x268>
 8004f7e:	4b4c      	ldr	r3, [pc, #304]	; (80050b0 <UART_SetConfig+0x338>)
 8004f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f82:	f003 0307 	and.w	r3, r3, #7
 8004f86:	2b05      	cmp	r3, #5
 8004f88:	d826      	bhi.n	8004fd8 <UART_SetConfig+0x260>
 8004f8a:	a201      	add	r2, pc, #4	; (adr r2, 8004f90 <UART_SetConfig+0x218>)
 8004f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f90:	08004fa9 	.word	0x08004fa9
 8004f94:	08004fb1 	.word	0x08004fb1
 8004f98:	08004fb9 	.word	0x08004fb9
 8004f9c:	08004fc1 	.word	0x08004fc1
 8004fa0:	08004fc9 	.word	0x08004fc9
 8004fa4:	08004fd1 	.word	0x08004fd1
 8004fa8:	2300      	movs	r3, #0
 8004faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fae:	e1b6      	b.n	800531e <UART_SetConfig+0x5a6>
 8004fb0:	2304      	movs	r3, #4
 8004fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fb6:	e1b2      	b.n	800531e <UART_SetConfig+0x5a6>
 8004fb8:	2308      	movs	r3, #8
 8004fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fbe:	e1ae      	b.n	800531e <UART_SetConfig+0x5a6>
 8004fc0:	2310      	movs	r3, #16
 8004fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fc6:	e1aa      	b.n	800531e <UART_SetConfig+0x5a6>
 8004fc8:	2320      	movs	r3, #32
 8004fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fce:	e1a6      	b.n	800531e <UART_SetConfig+0x5a6>
 8004fd0:	2340      	movs	r3, #64	; 0x40
 8004fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fd6:	e1a2      	b.n	800531e <UART_SetConfig+0x5a6>
 8004fd8:	2380      	movs	r3, #128	; 0x80
 8004fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fde:	e19e      	b.n	800531e <UART_SetConfig+0x5a6>
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a35      	ldr	r2, [pc, #212]	; (80050bc <UART_SetConfig+0x344>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d130      	bne.n	800504c <UART_SetConfig+0x2d4>
 8004fea:	4b31      	ldr	r3, [pc, #196]	; (80050b0 <UART_SetConfig+0x338>)
 8004fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fee:	f003 0307 	and.w	r3, r3, #7
 8004ff2:	2b05      	cmp	r3, #5
 8004ff4:	d826      	bhi.n	8005044 <UART_SetConfig+0x2cc>
 8004ff6:	a201      	add	r2, pc, #4	; (adr r2, 8004ffc <UART_SetConfig+0x284>)
 8004ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffc:	08005015 	.word	0x08005015
 8005000:	0800501d 	.word	0x0800501d
 8005004:	08005025 	.word	0x08005025
 8005008:	0800502d 	.word	0x0800502d
 800500c:	08005035 	.word	0x08005035
 8005010:	0800503d 	.word	0x0800503d
 8005014:	2300      	movs	r3, #0
 8005016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800501a:	e180      	b.n	800531e <UART_SetConfig+0x5a6>
 800501c:	2304      	movs	r3, #4
 800501e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005022:	e17c      	b.n	800531e <UART_SetConfig+0x5a6>
 8005024:	2308      	movs	r3, #8
 8005026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800502a:	e178      	b.n	800531e <UART_SetConfig+0x5a6>
 800502c:	2310      	movs	r3, #16
 800502e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005032:	e174      	b.n	800531e <UART_SetConfig+0x5a6>
 8005034:	2320      	movs	r3, #32
 8005036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800503a:	e170      	b.n	800531e <UART_SetConfig+0x5a6>
 800503c:	2340      	movs	r3, #64	; 0x40
 800503e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005042:	e16c      	b.n	800531e <UART_SetConfig+0x5a6>
 8005044:	2380      	movs	r3, #128	; 0x80
 8005046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800504a:	e168      	b.n	800531e <UART_SetConfig+0x5a6>
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a1b      	ldr	r2, [pc, #108]	; (80050c0 <UART_SetConfig+0x348>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d142      	bne.n	80050dc <UART_SetConfig+0x364>
 8005056:	4b16      	ldr	r3, [pc, #88]	; (80050b0 <UART_SetConfig+0x338>)
 8005058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800505a:	f003 0307 	and.w	r3, r3, #7
 800505e:	2b05      	cmp	r3, #5
 8005060:	d838      	bhi.n	80050d4 <UART_SetConfig+0x35c>
 8005062:	a201      	add	r2, pc, #4	; (adr r2, 8005068 <UART_SetConfig+0x2f0>)
 8005064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005068:	08005081 	.word	0x08005081
 800506c:	08005089 	.word	0x08005089
 8005070:	08005091 	.word	0x08005091
 8005074:	08005099 	.word	0x08005099
 8005078:	080050c5 	.word	0x080050c5
 800507c:	080050cd 	.word	0x080050cd
 8005080:	2300      	movs	r3, #0
 8005082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005086:	e14a      	b.n	800531e <UART_SetConfig+0x5a6>
 8005088:	2304      	movs	r3, #4
 800508a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800508e:	e146      	b.n	800531e <UART_SetConfig+0x5a6>
 8005090:	2308      	movs	r3, #8
 8005092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005096:	e142      	b.n	800531e <UART_SetConfig+0x5a6>
 8005098:	2310      	movs	r3, #16
 800509a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800509e:	e13e      	b.n	800531e <UART_SetConfig+0x5a6>
 80050a0:	cfff69f3 	.word	0xcfff69f3
 80050a4:	58000c00 	.word	0x58000c00
 80050a8:	11fff4ff 	.word	0x11fff4ff
 80050ac:	40011000 	.word	0x40011000
 80050b0:	58024400 	.word	0x58024400
 80050b4:	40004400 	.word	0x40004400
 80050b8:	40004800 	.word	0x40004800
 80050bc:	40004c00 	.word	0x40004c00
 80050c0:	40005000 	.word	0x40005000
 80050c4:	2320      	movs	r3, #32
 80050c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ca:	e128      	b.n	800531e <UART_SetConfig+0x5a6>
 80050cc:	2340      	movs	r3, #64	; 0x40
 80050ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050d2:	e124      	b.n	800531e <UART_SetConfig+0x5a6>
 80050d4:	2380      	movs	r3, #128	; 0x80
 80050d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050da:	e120      	b.n	800531e <UART_SetConfig+0x5a6>
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4acb      	ldr	r2, [pc, #812]	; (8005410 <UART_SetConfig+0x698>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d176      	bne.n	80051d4 <UART_SetConfig+0x45c>
 80050e6:	4bcb      	ldr	r3, [pc, #812]	; (8005414 <UART_SetConfig+0x69c>)
 80050e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050ee:	2b28      	cmp	r3, #40	; 0x28
 80050f0:	d86c      	bhi.n	80051cc <UART_SetConfig+0x454>
 80050f2:	a201      	add	r2, pc, #4	; (adr r2, 80050f8 <UART_SetConfig+0x380>)
 80050f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f8:	0800519d 	.word	0x0800519d
 80050fc:	080051cd 	.word	0x080051cd
 8005100:	080051cd 	.word	0x080051cd
 8005104:	080051cd 	.word	0x080051cd
 8005108:	080051cd 	.word	0x080051cd
 800510c:	080051cd 	.word	0x080051cd
 8005110:	080051cd 	.word	0x080051cd
 8005114:	080051cd 	.word	0x080051cd
 8005118:	080051a5 	.word	0x080051a5
 800511c:	080051cd 	.word	0x080051cd
 8005120:	080051cd 	.word	0x080051cd
 8005124:	080051cd 	.word	0x080051cd
 8005128:	080051cd 	.word	0x080051cd
 800512c:	080051cd 	.word	0x080051cd
 8005130:	080051cd 	.word	0x080051cd
 8005134:	080051cd 	.word	0x080051cd
 8005138:	080051ad 	.word	0x080051ad
 800513c:	080051cd 	.word	0x080051cd
 8005140:	080051cd 	.word	0x080051cd
 8005144:	080051cd 	.word	0x080051cd
 8005148:	080051cd 	.word	0x080051cd
 800514c:	080051cd 	.word	0x080051cd
 8005150:	080051cd 	.word	0x080051cd
 8005154:	080051cd 	.word	0x080051cd
 8005158:	080051b5 	.word	0x080051b5
 800515c:	080051cd 	.word	0x080051cd
 8005160:	080051cd 	.word	0x080051cd
 8005164:	080051cd 	.word	0x080051cd
 8005168:	080051cd 	.word	0x080051cd
 800516c:	080051cd 	.word	0x080051cd
 8005170:	080051cd 	.word	0x080051cd
 8005174:	080051cd 	.word	0x080051cd
 8005178:	080051bd 	.word	0x080051bd
 800517c:	080051cd 	.word	0x080051cd
 8005180:	080051cd 	.word	0x080051cd
 8005184:	080051cd 	.word	0x080051cd
 8005188:	080051cd 	.word	0x080051cd
 800518c:	080051cd 	.word	0x080051cd
 8005190:	080051cd 	.word	0x080051cd
 8005194:	080051cd 	.word	0x080051cd
 8005198:	080051c5 	.word	0x080051c5
 800519c:	2301      	movs	r3, #1
 800519e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051a2:	e0bc      	b.n	800531e <UART_SetConfig+0x5a6>
 80051a4:	2304      	movs	r3, #4
 80051a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051aa:	e0b8      	b.n	800531e <UART_SetConfig+0x5a6>
 80051ac:	2308      	movs	r3, #8
 80051ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051b2:	e0b4      	b.n	800531e <UART_SetConfig+0x5a6>
 80051b4:	2310      	movs	r3, #16
 80051b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ba:	e0b0      	b.n	800531e <UART_SetConfig+0x5a6>
 80051bc:	2320      	movs	r3, #32
 80051be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051c2:	e0ac      	b.n	800531e <UART_SetConfig+0x5a6>
 80051c4:	2340      	movs	r3, #64	; 0x40
 80051c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ca:	e0a8      	b.n	800531e <UART_SetConfig+0x5a6>
 80051cc:	2380      	movs	r3, #128	; 0x80
 80051ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051d2:	e0a4      	b.n	800531e <UART_SetConfig+0x5a6>
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a8f      	ldr	r2, [pc, #572]	; (8005418 <UART_SetConfig+0x6a0>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d130      	bne.n	8005240 <UART_SetConfig+0x4c8>
 80051de:	4b8d      	ldr	r3, [pc, #564]	; (8005414 <UART_SetConfig+0x69c>)
 80051e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e2:	f003 0307 	and.w	r3, r3, #7
 80051e6:	2b05      	cmp	r3, #5
 80051e8:	d826      	bhi.n	8005238 <UART_SetConfig+0x4c0>
 80051ea:	a201      	add	r2, pc, #4	; (adr r2, 80051f0 <UART_SetConfig+0x478>)
 80051ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f0:	08005209 	.word	0x08005209
 80051f4:	08005211 	.word	0x08005211
 80051f8:	08005219 	.word	0x08005219
 80051fc:	08005221 	.word	0x08005221
 8005200:	08005229 	.word	0x08005229
 8005204:	08005231 	.word	0x08005231
 8005208:	2300      	movs	r3, #0
 800520a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800520e:	e086      	b.n	800531e <UART_SetConfig+0x5a6>
 8005210:	2304      	movs	r3, #4
 8005212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005216:	e082      	b.n	800531e <UART_SetConfig+0x5a6>
 8005218:	2308      	movs	r3, #8
 800521a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800521e:	e07e      	b.n	800531e <UART_SetConfig+0x5a6>
 8005220:	2310      	movs	r3, #16
 8005222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005226:	e07a      	b.n	800531e <UART_SetConfig+0x5a6>
 8005228:	2320      	movs	r3, #32
 800522a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800522e:	e076      	b.n	800531e <UART_SetConfig+0x5a6>
 8005230:	2340      	movs	r3, #64	; 0x40
 8005232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005236:	e072      	b.n	800531e <UART_SetConfig+0x5a6>
 8005238:	2380      	movs	r3, #128	; 0x80
 800523a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800523e:	e06e      	b.n	800531e <UART_SetConfig+0x5a6>
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a75      	ldr	r2, [pc, #468]	; (800541c <UART_SetConfig+0x6a4>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d130      	bne.n	80052ac <UART_SetConfig+0x534>
 800524a:	4b72      	ldr	r3, [pc, #456]	; (8005414 <UART_SetConfig+0x69c>)
 800524c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524e:	f003 0307 	and.w	r3, r3, #7
 8005252:	2b05      	cmp	r3, #5
 8005254:	d826      	bhi.n	80052a4 <UART_SetConfig+0x52c>
 8005256:	a201      	add	r2, pc, #4	; (adr r2, 800525c <UART_SetConfig+0x4e4>)
 8005258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525c:	08005275 	.word	0x08005275
 8005260:	0800527d 	.word	0x0800527d
 8005264:	08005285 	.word	0x08005285
 8005268:	0800528d 	.word	0x0800528d
 800526c:	08005295 	.word	0x08005295
 8005270:	0800529d 	.word	0x0800529d
 8005274:	2300      	movs	r3, #0
 8005276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800527a:	e050      	b.n	800531e <UART_SetConfig+0x5a6>
 800527c:	2304      	movs	r3, #4
 800527e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005282:	e04c      	b.n	800531e <UART_SetConfig+0x5a6>
 8005284:	2308      	movs	r3, #8
 8005286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800528a:	e048      	b.n	800531e <UART_SetConfig+0x5a6>
 800528c:	2310      	movs	r3, #16
 800528e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005292:	e044      	b.n	800531e <UART_SetConfig+0x5a6>
 8005294:	2320      	movs	r3, #32
 8005296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800529a:	e040      	b.n	800531e <UART_SetConfig+0x5a6>
 800529c:	2340      	movs	r3, #64	; 0x40
 800529e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052a2:	e03c      	b.n	800531e <UART_SetConfig+0x5a6>
 80052a4:	2380      	movs	r3, #128	; 0x80
 80052a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052aa:	e038      	b.n	800531e <UART_SetConfig+0x5a6>
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a5b      	ldr	r2, [pc, #364]	; (8005420 <UART_SetConfig+0x6a8>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d130      	bne.n	8005318 <UART_SetConfig+0x5a0>
 80052b6:	4b57      	ldr	r3, [pc, #348]	; (8005414 <UART_SetConfig+0x69c>)
 80052b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ba:	f003 0307 	and.w	r3, r3, #7
 80052be:	2b05      	cmp	r3, #5
 80052c0:	d826      	bhi.n	8005310 <UART_SetConfig+0x598>
 80052c2:	a201      	add	r2, pc, #4	; (adr r2, 80052c8 <UART_SetConfig+0x550>)
 80052c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c8:	080052e1 	.word	0x080052e1
 80052cc:	080052e9 	.word	0x080052e9
 80052d0:	080052f1 	.word	0x080052f1
 80052d4:	080052f9 	.word	0x080052f9
 80052d8:	08005301 	.word	0x08005301
 80052dc:	08005309 	.word	0x08005309
 80052e0:	2302      	movs	r3, #2
 80052e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052e6:	e01a      	b.n	800531e <UART_SetConfig+0x5a6>
 80052e8:	2304      	movs	r3, #4
 80052ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ee:	e016      	b.n	800531e <UART_SetConfig+0x5a6>
 80052f0:	2308      	movs	r3, #8
 80052f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052f6:	e012      	b.n	800531e <UART_SetConfig+0x5a6>
 80052f8:	2310      	movs	r3, #16
 80052fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052fe:	e00e      	b.n	800531e <UART_SetConfig+0x5a6>
 8005300:	2320      	movs	r3, #32
 8005302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005306:	e00a      	b.n	800531e <UART_SetConfig+0x5a6>
 8005308:	2340      	movs	r3, #64	; 0x40
 800530a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800530e:	e006      	b.n	800531e <UART_SetConfig+0x5a6>
 8005310:	2380      	movs	r3, #128	; 0x80
 8005312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005316:	e002      	b.n	800531e <UART_SetConfig+0x5a6>
 8005318:	2380      	movs	r3, #128	; 0x80
 800531a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a3f      	ldr	r2, [pc, #252]	; (8005420 <UART_SetConfig+0x6a8>)
 8005324:	4293      	cmp	r3, r2
 8005326:	f040 80f8 	bne.w	800551a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800532a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800532e:	2b20      	cmp	r3, #32
 8005330:	dc46      	bgt.n	80053c0 <UART_SetConfig+0x648>
 8005332:	2b02      	cmp	r3, #2
 8005334:	f2c0 8082 	blt.w	800543c <UART_SetConfig+0x6c4>
 8005338:	3b02      	subs	r3, #2
 800533a:	2b1e      	cmp	r3, #30
 800533c:	d87e      	bhi.n	800543c <UART_SetConfig+0x6c4>
 800533e:	a201      	add	r2, pc, #4	; (adr r2, 8005344 <UART_SetConfig+0x5cc>)
 8005340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005344:	080053c7 	.word	0x080053c7
 8005348:	0800543d 	.word	0x0800543d
 800534c:	080053cf 	.word	0x080053cf
 8005350:	0800543d 	.word	0x0800543d
 8005354:	0800543d 	.word	0x0800543d
 8005358:	0800543d 	.word	0x0800543d
 800535c:	080053df 	.word	0x080053df
 8005360:	0800543d 	.word	0x0800543d
 8005364:	0800543d 	.word	0x0800543d
 8005368:	0800543d 	.word	0x0800543d
 800536c:	0800543d 	.word	0x0800543d
 8005370:	0800543d 	.word	0x0800543d
 8005374:	0800543d 	.word	0x0800543d
 8005378:	0800543d 	.word	0x0800543d
 800537c:	080053ef 	.word	0x080053ef
 8005380:	0800543d 	.word	0x0800543d
 8005384:	0800543d 	.word	0x0800543d
 8005388:	0800543d 	.word	0x0800543d
 800538c:	0800543d 	.word	0x0800543d
 8005390:	0800543d 	.word	0x0800543d
 8005394:	0800543d 	.word	0x0800543d
 8005398:	0800543d 	.word	0x0800543d
 800539c:	0800543d 	.word	0x0800543d
 80053a0:	0800543d 	.word	0x0800543d
 80053a4:	0800543d 	.word	0x0800543d
 80053a8:	0800543d 	.word	0x0800543d
 80053ac:	0800543d 	.word	0x0800543d
 80053b0:	0800543d 	.word	0x0800543d
 80053b4:	0800543d 	.word	0x0800543d
 80053b8:	0800543d 	.word	0x0800543d
 80053bc:	0800542f 	.word	0x0800542f
 80053c0:	2b40      	cmp	r3, #64	; 0x40
 80053c2:	d037      	beq.n	8005434 <UART_SetConfig+0x6bc>
 80053c4:	e03a      	b.n	800543c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80053c6:	f7fe ffd7 	bl	8004378 <HAL_RCCEx_GetD3PCLK1Freq>
 80053ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80053cc:	e03c      	b.n	8005448 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7fe ffe6 	bl	80043a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80053d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053dc:	e034      	b.n	8005448 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053de:	f107 0318 	add.w	r3, r7, #24
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7ff f932 	bl	800464c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053ec:	e02c      	b.n	8005448 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053ee:	4b09      	ldr	r3, [pc, #36]	; (8005414 <UART_SetConfig+0x69c>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0320 	and.w	r3, r3, #32
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d016      	beq.n	8005428 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80053fa:	4b06      	ldr	r3, [pc, #24]	; (8005414 <UART_SetConfig+0x69c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	08db      	lsrs	r3, r3, #3
 8005400:	f003 0303 	and.w	r3, r3, #3
 8005404:	4a07      	ldr	r2, [pc, #28]	; (8005424 <UART_SetConfig+0x6ac>)
 8005406:	fa22 f303 	lsr.w	r3, r2, r3
 800540a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800540c:	e01c      	b.n	8005448 <UART_SetConfig+0x6d0>
 800540e:	bf00      	nop
 8005410:	40011400 	.word	0x40011400
 8005414:	58024400 	.word	0x58024400
 8005418:	40007800 	.word	0x40007800
 800541c:	40007c00 	.word	0x40007c00
 8005420:	58000c00 	.word	0x58000c00
 8005424:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005428:	4b9d      	ldr	r3, [pc, #628]	; (80056a0 <UART_SetConfig+0x928>)
 800542a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800542c:	e00c      	b.n	8005448 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800542e:	4b9d      	ldr	r3, [pc, #628]	; (80056a4 <UART_SetConfig+0x92c>)
 8005430:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005432:	e009      	b.n	8005448 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005434:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005438:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800543a:	e005      	b.n	8005448 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800543c:	2300      	movs	r3, #0
 800543e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005446:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800544a:	2b00      	cmp	r3, #0
 800544c:	f000 81de 	beq.w	800580c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005454:	4a94      	ldr	r2, [pc, #592]	; (80056a8 <UART_SetConfig+0x930>)
 8005456:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800545a:	461a      	mov	r2, r3
 800545c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800545e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005462:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	685a      	ldr	r2, [r3, #4]
 8005468:	4613      	mov	r3, r2
 800546a:	005b      	lsls	r3, r3, #1
 800546c:	4413      	add	r3, r2
 800546e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005470:	429a      	cmp	r2, r3
 8005472:	d305      	bcc.n	8005480 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800547a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800547c:	429a      	cmp	r2, r3
 800547e:	d903      	bls.n	8005488 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005486:	e1c1      	b.n	800580c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800548a:	2200      	movs	r2, #0
 800548c:	60bb      	str	r3, [r7, #8]
 800548e:	60fa      	str	r2, [r7, #12]
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005494:	4a84      	ldr	r2, [pc, #528]	; (80056a8 <UART_SetConfig+0x930>)
 8005496:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800549a:	b29b      	uxth	r3, r3
 800549c:	2200      	movs	r2, #0
 800549e:	603b      	str	r3, [r7, #0]
 80054a0:	607a      	str	r2, [r7, #4]
 80054a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80054aa:	f7fa ff71 	bl	8000390 <__aeabi_uldivmod>
 80054ae:	4602      	mov	r2, r0
 80054b0:	460b      	mov	r3, r1
 80054b2:	4610      	mov	r0, r2
 80054b4:	4619      	mov	r1, r3
 80054b6:	f04f 0200 	mov.w	r2, #0
 80054ba:	f04f 0300 	mov.w	r3, #0
 80054be:	020b      	lsls	r3, r1, #8
 80054c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80054c4:	0202      	lsls	r2, r0, #8
 80054c6:	6979      	ldr	r1, [r7, #20]
 80054c8:	6849      	ldr	r1, [r1, #4]
 80054ca:	0849      	lsrs	r1, r1, #1
 80054cc:	2000      	movs	r0, #0
 80054ce:	460c      	mov	r4, r1
 80054d0:	4605      	mov	r5, r0
 80054d2:	eb12 0804 	adds.w	r8, r2, r4
 80054d6:	eb43 0905 	adc.w	r9, r3, r5
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	469a      	mov	sl, r3
 80054e2:	4693      	mov	fp, r2
 80054e4:	4652      	mov	r2, sl
 80054e6:	465b      	mov	r3, fp
 80054e8:	4640      	mov	r0, r8
 80054ea:	4649      	mov	r1, r9
 80054ec:	f7fa ff50 	bl	8000390 <__aeabi_uldivmod>
 80054f0:	4602      	mov	r2, r0
 80054f2:	460b      	mov	r3, r1
 80054f4:	4613      	mov	r3, r2
 80054f6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80054f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054fe:	d308      	bcc.n	8005512 <UART_SetConfig+0x79a>
 8005500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005502:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005506:	d204      	bcs.n	8005512 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800550e:	60da      	str	r2, [r3, #12]
 8005510:	e17c      	b.n	800580c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005518:	e178      	b.n	800580c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	69db      	ldr	r3, [r3, #28]
 800551e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005522:	f040 80c5 	bne.w	80056b0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005526:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800552a:	2b20      	cmp	r3, #32
 800552c:	dc48      	bgt.n	80055c0 <UART_SetConfig+0x848>
 800552e:	2b00      	cmp	r3, #0
 8005530:	db7b      	blt.n	800562a <UART_SetConfig+0x8b2>
 8005532:	2b20      	cmp	r3, #32
 8005534:	d879      	bhi.n	800562a <UART_SetConfig+0x8b2>
 8005536:	a201      	add	r2, pc, #4	; (adr r2, 800553c <UART_SetConfig+0x7c4>)
 8005538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553c:	080055c7 	.word	0x080055c7
 8005540:	080055cf 	.word	0x080055cf
 8005544:	0800562b 	.word	0x0800562b
 8005548:	0800562b 	.word	0x0800562b
 800554c:	080055d7 	.word	0x080055d7
 8005550:	0800562b 	.word	0x0800562b
 8005554:	0800562b 	.word	0x0800562b
 8005558:	0800562b 	.word	0x0800562b
 800555c:	080055e7 	.word	0x080055e7
 8005560:	0800562b 	.word	0x0800562b
 8005564:	0800562b 	.word	0x0800562b
 8005568:	0800562b 	.word	0x0800562b
 800556c:	0800562b 	.word	0x0800562b
 8005570:	0800562b 	.word	0x0800562b
 8005574:	0800562b 	.word	0x0800562b
 8005578:	0800562b 	.word	0x0800562b
 800557c:	080055f7 	.word	0x080055f7
 8005580:	0800562b 	.word	0x0800562b
 8005584:	0800562b 	.word	0x0800562b
 8005588:	0800562b 	.word	0x0800562b
 800558c:	0800562b 	.word	0x0800562b
 8005590:	0800562b 	.word	0x0800562b
 8005594:	0800562b 	.word	0x0800562b
 8005598:	0800562b 	.word	0x0800562b
 800559c:	0800562b 	.word	0x0800562b
 80055a0:	0800562b 	.word	0x0800562b
 80055a4:	0800562b 	.word	0x0800562b
 80055a8:	0800562b 	.word	0x0800562b
 80055ac:	0800562b 	.word	0x0800562b
 80055b0:	0800562b 	.word	0x0800562b
 80055b4:	0800562b 	.word	0x0800562b
 80055b8:	0800562b 	.word	0x0800562b
 80055bc:	0800561d 	.word	0x0800561d
 80055c0:	2b40      	cmp	r3, #64	; 0x40
 80055c2:	d02e      	beq.n	8005622 <UART_SetConfig+0x8aa>
 80055c4:	e031      	b.n	800562a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055c6:	f7fd fca1 	bl	8002f0c <HAL_RCC_GetPCLK1Freq>
 80055ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80055cc:	e033      	b.n	8005636 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055ce:	f7fd fcb3 	bl	8002f38 <HAL_RCC_GetPCLK2Freq>
 80055d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80055d4:	e02f      	b.n	8005636 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055da:	4618      	mov	r0, r3
 80055dc:	f7fe fee2 	bl	80043a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80055e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055e4:	e027      	b.n	8005636 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055e6:	f107 0318 	add.w	r3, r7, #24
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7ff f82e 	bl	800464c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055f4:	e01f      	b.n	8005636 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055f6:	4b2d      	ldr	r3, [pc, #180]	; (80056ac <UART_SetConfig+0x934>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0320 	and.w	r3, r3, #32
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d009      	beq.n	8005616 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005602:	4b2a      	ldr	r3, [pc, #168]	; (80056ac <UART_SetConfig+0x934>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	08db      	lsrs	r3, r3, #3
 8005608:	f003 0303 	and.w	r3, r3, #3
 800560c:	4a24      	ldr	r2, [pc, #144]	; (80056a0 <UART_SetConfig+0x928>)
 800560e:	fa22 f303 	lsr.w	r3, r2, r3
 8005612:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005614:	e00f      	b.n	8005636 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005616:	4b22      	ldr	r3, [pc, #136]	; (80056a0 <UART_SetConfig+0x928>)
 8005618:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800561a:	e00c      	b.n	8005636 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800561c:	4b21      	ldr	r3, [pc, #132]	; (80056a4 <UART_SetConfig+0x92c>)
 800561e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005620:	e009      	b.n	8005636 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005626:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005628:	e005      	b.n	8005636 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800562a:	2300      	movs	r3, #0
 800562c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005634:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 80e7 	beq.w	800580c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005642:	4a19      	ldr	r2, [pc, #100]	; (80056a8 <UART_SetConfig+0x930>)
 8005644:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005648:	461a      	mov	r2, r3
 800564a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800564c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005650:	005a      	lsls	r2, r3, #1
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	085b      	lsrs	r3, r3, #1
 8005658:	441a      	add	r2, r3
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005662:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005666:	2b0f      	cmp	r3, #15
 8005668:	d916      	bls.n	8005698 <UART_SetConfig+0x920>
 800566a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005670:	d212      	bcs.n	8005698 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005674:	b29b      	uxth	r3, r3
 8005676:	f023 030f 	bic.w	r3, r3, #15
 800567a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800567c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567e:	085b      	lsrs	r3, r3, #1
 8005680:	b29b      	uxth	r3, r3
 8005682:	f003 0307 	and.w	r3, r3, #7
 8005686:	b29a      	uxth	r2, r3
 8005688:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800568a:	4313      	orrs	r3, r2
 800568c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005694:	60da      	str	r2, [r3, #12]
 8005696:	e0b9      	b.n	800580c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800569e:	e0b5      	b.n	800580c <UART_SetConfig+0xa94>
 80056a0:	03d09000 	.word	0x03d09000
 80056a4:	003d0900 	.word	0x003d0900
 80056a8:	08008b64 	.word	0x08008b64
 80056ac:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80056b0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80056b4:	2b20      	cmp	r3, #32
 80056b6:	dc49      	bgt.n	800574c <UART_SetConfig+0x9d4>
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	db7c      	blt.n	80057b6 <UART_SetConfig+0xa3e>
 80056bc:	2b20      	cmp	r3, #32
 80056be:	d87a      	bhi.n	80057b6 <UART_SetConfig+0xa3e>
 80056c0:	a201      	add	r2, pc, #4	; (adr r2, 80056c8 <UART_SetConfig+0x950>)
 80056c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c6:	bf00      	nop
 80056c8:	08005753 	.word	0x08005753
 80056cc:	0800575b 	.word	0x0800575b
 80056d0:	080057b7 	.word	0x080057b7
 80056d4:	080057b7 	.word	0x080057b7
 80056d8:	08005763 	.word	0x08005763
 80056dc:	080057b7 	.word	0x080057b7
 80056e0:	080057b7 	.word	0x080057b7
 80056e4:	080057b7 	.word	0x080057b7
 80056e8:	08005773 	.word	0x08005773
 80056ec:	080057b7 	.word	0x080057b7
 80056f0:	080057b7 	.word	0x080057b7
 80056f4:	080057b7 	.word	0x080057b7
 80056f8:	080057b7 	.word	0x080057b7
 80056fc:	080057b7 	.word	0x080057b7
 8005700:	080057b7 	.word	0x080057b7
 8005704:	080057b7 	.word	0x080057b7
 8005708:	08005783 	.word	0x08005783
 800570c:	080057b7 	.word	0x080057b7
 8005710:	080057b7 	.word	0x080057b7
 8005714:	080057b7 	.word	0x080057b7
 8005718:	080057b7 	.word	0x080057b7
 800571c:	080057b7 	.word	0x080057b7
 8005720:	080057b7 	.word	0x080057b7
 8005724:	080057b7 	.word	0x080057b7
 8005728:	080057b7 	.word	0x080057b7
 800572c:	080057b7 	.word	0x080057b7
 8005730:	080057b7 	.word	0x080057b7
 8005734:	080057b7 	.word	0x080057b7
 8005738:	080057b7 	.word	0x080057b7
 800573c:	080057b7 	.word	0x080057b7
 8005740:	080057b7 	.word	0x080057b7
 8005744:	080057b7 	.word	0x080057b7
 8005748:	080057a9 	.word	0x080057a9
 800574c:	2b40      	cmp	r3, #64	; 0x40
 800574e:	d02e      	beq.n	80057ae <UART_SetConfig+0xa36>
 8005750:	e031      	b.n	80057b6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005752:	f7fd fbdb 	bl	8002f0c <HAL_RCC_GetPCLK1Freq>
 8005756:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005758:	e033      	b.n	80057c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800575a:	f7fd fbed 	bl	8002f38 <HAL_RCC_GetPCLK2Freq>
 800575e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005760:	e02f      	b.n	80057c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005766:	4618      	mov	r0, r3
 8005768:	f7fe fe1c 	bl	80043a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800576c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005770:	e027      	b.n	80057c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005772:	f107 0318 	add.w	r3, r7, #24
 8005776:	4618      	mov	r0, r3
 8005778:	f7fe ff68 	bl	800464c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005780:	e01f      	b.n	80057c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005782:	4b2d      	ldr	r3, [pc, #180]	; (8005838 <UART_SetConfig+0xac0>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0320 	and.w	r3, r3, #32
 800578a:	2b00      	cmp	r3, #0
 800578c:	d009      	beq.n	80057a2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800578e:	4b2a      	ldr	r3, [pc, #168]	; (8005838 <UART_SetConfig+0xac0>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	08db      	lsrs	r3, r3, #3
 8005794:	f003 0303 	and.w	r3, r3, #3
 8005798:	4a28      	ldr	r2, [pc, #160]	; (800583c <UART_SetConfig+0xac4>)
 800579a:	fa22 f303 	lsr.w	r3, r2, r3
 800579e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80057a0:	e00f      	b.n	80057c2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80057a2:	4b26      	ldr	r3, [pc, #152]	; (800583c <UART_SetConfig+0xac4>)
 80057a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057a6:	e00c      	b.n	80057c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80057a8:	4b25      	ldr	r3, [pc, #148]	; (8005840 <UART_SetConfig+0xac8>)
 80057aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057ac:	e009      	b.n	80057c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057b4:	e005      	b.n	80057c2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80057b6:	2300      	movs	r3, #0
 80057b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80057c0:	bf00      	nop
    }

    if (pclk != 0U)
 80057c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d021      	beq.n	800580c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057cc:	4a1d      	ldr	r2, [pc, #116]	; (8005844 <UART_SetConfig+0xacc>)
 80057ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057d2:	461a      	mov	r2, r3
 80057d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	085b      	lsrs	r3, r3, #1
 80057e0:	441a      	add	r2, r3
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ea:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ee:	2b0f      	cmp	r3, #15
 80057f0:	d909      	bls.n	8005806 <UART_SetConfig+0xa8e>
 80057f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057f8:	d205      	bcs.n	8005806 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	60da      	str	r2, [r3, #12]
 8005804:	e002      	b.n	800580c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	2201      	movs	r2, #1
 8005810:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	2201      	movs	r2, #1
 8005818:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	2200      	movs	r2, #0
 8005820:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	2200      	movs	r2, #0
 8005826:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005828:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800582c:	4618      	mov	r0, r3
 800582e:	3748      	adds	r7, #72	; 0x48
 8005830:	46bd      	mov	sp, r7
 8005832:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005836:	bf00      	nop
 8005838:	58024400 	.word	0x58024400
 800583c:	03d09000 	.word	0x03d09000
 8005840:	003d0900 	.word	0x003d0900
 8005844:	08008b64 	.word	0x08008b64

08005848 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005854:	f003 0301 	and.w	r3, r3, #1
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00a      	beq.n	8005872 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	430a      	orrs	r2, r1
 8005870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00a      	beq.n	8005894 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	430a      	orrs	r2, r1
 8005892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005898:	f003 0304 	and.w	r3, r3, #4
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00a      	beq.n	80058b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	430a      	orrs	r2, r1
 80058b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ba:	f003 0308 	and.w	r3, r3, #8
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00a      	beq.n	80058d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	430a      	orrs	r2, r1
 80058d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058dc:	f003 0310 	and.w	r3, r3, #16
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00a      	beq.n	80058fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	430a      	orrs	r2, r1
 80058f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fe:	f003 0320 	and.w	r3, r3, #32
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00a      	beq.n	800591c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	430a      	orrs	r2, r1
 800591a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005924:	2b00      	cmp	r3, #0
 8005926:	d01a      	beq.n	800595e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	430a      	orrs	r2, r1
 800593c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005942:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005946:	d10a      	bne.n	800595e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	430a      	orrs	r2, r1
 800595c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00a      	beq.n	8005980 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	430a      	orrs	r2, r1
 800597e:	605a      	str	r2, [r3, #4]
  }
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b098      	sub	sp, #96	; 0x60
 8005990:	af02      	add	r7, sp, #8
 8005992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800599c:	f7fb fd40 	bl	8001420 <HAL_GetTick>
 80059a0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0308 	and.w	r3, r3, #8
 80059ac:	2b08      	cmp	r3, #8
 80059ae:	d12f      	bne.n	8005a10 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059b4:	9300      	str	r3, [sp, #0]
 80059b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059b8:	2200      	movs	r2, #0
 80059ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f88e 	bl	8005ae0 <UART_WaitOnFlagUntilTimeout>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d022      	beq.n	8005a10 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d2:	e853 3f00 	ldrex	r3, [r3]
 80059d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059de:	653b      	str	r3, [r7, #80]	; 0x50
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	461a      	mov	r2, r3
 80059e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059e8:	647b      	str	r3, [r7, #68]	; 0x44
 80059ea:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059f0:	e841 2300 	strex	r3, r2, [r1]
 80059f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80059f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1e6      	bne.n	80059ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2220      	movs	r2, #32
 8005a00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e063      	b.n	8005ad8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0304 	and.w	r3, r3, #4
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	d149      	bne.n	8005ab2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a1e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a22:	9300      	str	r3, [sp, #0]
 8005a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a26:	2200      	movs	r2, #0
 8005a28:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 f857 	bl	8005ae0 <UART_WaitOnFlagUntilTimeout>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d03c      	beq.n	8005ab2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a40:	e853 3f00 	ldrex	r3, [r3]
 8005a44:	623b      	str	r3, [r7, #32]
   return(result);
 8005a46:	6a3b      	ldr	r3, [r7, #32]
 8005a48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	461a      	mov	r2, r3
 8005a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a56:	633b      	str	r3, [r7, #48]	; 0x30
 8005a58:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a5e:	e841 2300 	strex	r3, r2, [r1]
 8005a62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1e6      	bne.n	8005a38 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	3308      	adds	r3, #8
 8005a70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	e853 3f00 	ldrex	r3, [r3]
 8005a78:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f023 0301 	bic.w	r3, r3, #1
 8005a80:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	3308      	adds	r3, #8
 8005a88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a8a:	61fa      	str	r2, [r7, #28]
 8005a8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8e:	69b9      	ldr	r1, [r7, #24]
 8005a90:	69fa      	ldr	r2, [r7, #28]
 8005a92:	e841 2300 	strex	r3, r2, [r1]
 8005a96:	617b      	str	r3, [r7, #20]
   return(result);
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1e5      	bne.n	8005a6a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e012      	b.n	8005ad8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2220      	movs	r2, #32
 8005ab6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2220      	movs	r2, #32
 8005abe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3758      	adds	r7, #88	; 0x58
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	603b      	str	r3, [r7, #0]
 8005aec:	4613      	mov	r3, r2
 8005aee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005af0:	e049      	b.n	8005b86 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005af8:	d045      	beq.n	8005b86 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005afa:	f7fb fc91 	bl	8001420 <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	69ba      	ldr	r2, [r7, #24]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d302      	bcc.n	8005b10 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d101      	bne.n	8005b14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e048      	b.n	8005ba6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0304 	and.w	r3, r3, #4
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d031      	beq.n	8005b86 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	69db      	ldr	r3, [r3, #28]
 8005b28:	f003 0308 	and.w	r3, r3, #8
 8005b2c:	2b08      	cmp	r3, #8
 8005b2e:	d110      	bne.n	8005b52 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2208      	movs	r2, #8
 8005b36:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f000 f839 	bl	8005bb0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2208      	movs	r2, #8
 8005b42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e029      	b.n	8005ba6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	69db      	ldr	r3, [r3, #28]
 8005b58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b60:	d111      	bne.n	8005b86 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f000 f81f 	bl	8005bb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2220      	movs	r2, #32
 8005b76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e00f      	b.n	8005ba6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	69da      	ldr	r2, [r3, #28]
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	4013      	ands	r3, r2
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	bf0c      	ite	eq
 8005b96:	2301      	moveq	r3, #1
 8005b98:	2300      	movne	r3, #0
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	79fb      	ldrb	r3, [r7, #7]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d0a6      	beq.n	8005af2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
	...

08005bb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b095      	sub	sp, #84	; 0x54
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bc0:	e853 3f00 	ldrex	r3, [r3]
 8005bc4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bd6:	643b      	str	r3, [r7, #64]	; 0x40
 8005bd8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bda:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bdc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bde:	e841 2300 	strex	r3, r2, [r1]
 8005be2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1e6      	bne.n	8005bb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	3308      	adds	r3, #8
 8005bf0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf2:	6a3b      	ldr	r3, [r7, #32]
 8005bf4:	e853 3f00 	ldrex	r3, [r3]
 8005bf8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bfa:	69fa      	ldr	r2, [r7, #28]
 8005bfc:	4b1e      	ldr	r3, [pc, #120]	; (8005c78 <UART_EndRxTransfer+0xc8>)
 8005bfe:	4013      	ands	r3, r2
 8005c00:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	3308      	adds	r3, #8
 8005c08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c12:	e841 2300 	strex	r3, r2, [r1]
 8005c16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1e5      	bne.n	8005bea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d118      	bne.n	8005c58 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	e853 3f00 	ldrex	r3, [r3]
 8005c32:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	f023 0310 	bic.w	r3, r3, #16
 8005c3a:	647b      	str	r3, [r7, #68]	; 0x44
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	461a      	mov	r2, r3
 8005c42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c44:	61bb      	str	r3, [r7, #24]
 8005c46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c48:	6979      	ldr	r1, [r7, #20]
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	e841 2300 	strex	r3, r2, [r1]
 8005c50:	613b      	str	r3, [r7, #16]
   return(result);
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1e6      	bne.n	8005c26 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005c6c:	bf00      	nop
 8005c6e:	3754      	adds	r7, #84	; 0x54
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr
 8005c78:	effffffe 	.word	0xeffffffe

08005c7c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d101      	bne.n	8005c92 <HAL_UARTEx_DisableFifoMode+0x16>
 8005c8e:	2302      	movs	r3, #2
 8005c90:	e027      	b.n	8005ce2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2224      	movs	r2, #36	; 0x24
 8005c9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f022 0201 	bic.w	r2, r2, #1
 8005cb8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005cc0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2220      	movs	r2, #32
 8005cd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b084      	sub	sp, #16
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
 8005cf6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d101      	bne.n	8005d06 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005d02:	2302      	movs	r3, #2
 8005d04:	e02d      	b.n	8005d62 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2224      	movs	r2, #36	; 0x24
 8005d12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f022 0201 	bic.w	r2, r2, #1
 8005d2c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	683a      	ldr	r2, [r7, #0]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f850 	bl	8005de8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2220      	movs	r2, #32
 8005d54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b084      	sub	sp, #16
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
 8005d72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d101      	bne.n	8005d82 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005d7e:	2302      	movs	r3, #2
 8005d80:	e02d      	b.n	8005dde <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2224      	movs	r2, #36	; 0x24
 8005d8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 0201 	bic.w	r2, r2, #1
 8005da8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	683a      	ldr	r2, [r7, #0]
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 f812 	bl	8005de8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
	...

08005de8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b085      	sub	sp, #20
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d108      	bne.n	8005e0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005e08:	e031      	b.n	8005e6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005e0a:	2310      	movs	r3, #16
 8005e0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005e0e:	2310      	movs	r3, #16
 8005e10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	0e5b      	lsrs	r3, r3, #25
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	f003 0307 	and.w	r3, r3, #7
 8005e20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	0f5b      	lsrs	r3, r3, #29
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	f003 0307 	and.w	r3, r3, #7
 8005e30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e32:	7bbb      	ldrb	r3, [r7, #14]
 8005e34:	7b3a      	ldrb	r2, [r7, #12]
 8005e36:	4911      	ldr	r1, [pc, #68]	; (8005e7c <UARTEx_SetNbDataToProcess+0x94>)
 8005e38:	5c8a      	ldrb	r2, [r1, r2]
 8005e3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005e3e:	7b3a      	ldrb	r2, [r7, #12]
 8005e40:	490f      	ldr	r1, [pc, #60]	; (8005e80 <UARTEx_SetNbDataToProcess+0x98>)
 8005e42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e44:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e50:	7bfb      	ldrb	r3, [r7, #15]
 8005e52:	7b7a      	ldrb	r2, [r7, #13]
 8005e54:	4909      	ldr	r1, [pc, #36]	; (8005e7c <UARTEx_SetNbDataToProcess+0x94>)
 8005e56:	5c8a      	ldrb	r2, [r1, r2]
 8005e58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005e5c:	7b7a      	ldrb	r2, [r7, #13]
 8005e5e:	4908      	ldr	r1, [pc, #32]	; (8005e80 <UARTEx_SetNbDataToProcess+0x98>)
 8005e60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e62:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005e6e:	bf00      	nop
 8005e70:	3714      	adds	r7, #20
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	08008b7c 	.word	0x08008b7c
 8005e80:	08008b84 	.word	0x08008b84

08005e84 <__cvt>:
 8005e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e86:	ed2d 8b02 	vpush	{d8}
 8005e8a:	eeb0 8b40 	vmov.f64	d8, d0
 8005e8e:	b085      	sub	sp, #20
 8005e90:	4617      	mov	r7, r2
 8005e92:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005e94:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005e96:	ee18 2a90 	vmov	r2, s17
 8005e9a:	f025 0520 	bic.w	r5, r5, #32
 8005e9e:	2a00      	cmp	r2, #0
 8005ea0:	bfb6      	itet	lt
 8005ea2:	222d      	movlt	r2, #45	; 0x2d
 8005ea4:	2200      	movge	r2, #0
 8005ea6:	eeb1 8b40 	vneglt.f64	d8, d0
 8005eaa:	2d46      	cmp	r5, #70	; 0x46
 8005eac:	460c      	mov	r4, r1
 8005eae:	701a      	strb	r2, [r3, #0]
 8005eb0:	d004      	beq.n	8005ebc <__cvt+0x38>
 8005eb2:	2d45      	cmp	r5, #69	; 0x45
 8005eb4:	d100      	bne.n	8005eb8 <__cvt+0x34>
 8005eb6:	3401      	adds	r4, #1
 8005eb8:	2102      	movs	r1, #2
 8005eba:	e000      	b.n	8005ebe <__cvt+0x3a>
 8005ebc:	2103      	movs	r1, #3
 8005ebe:	ab03      	add	r3, sp, #12
 8005ec0:	9301      	str	r3, [sp, #4]
 8005ec2:	ab02      	add	r3, sp, #8
 8005ec4:	9300      	str	r3, [sp, #0]
 8005ec6:	4622      	mov	r2, r4
 8005ec8:	4633      	mov	r3, r6
 8005eca:	eeb0 0b48 	vmov.f64	d0, d8
 8005ece:	f000 fee7 	bl	8006ca0 <_dtoa_r>
 8005ed2:	2d47      	cmp	r5, #71	; 0x47
 8005ed4:	d101      	bne.n	8005eda <__cvt+0x56>
 8005ed6:	07fb      	lsls	r3, r7, #31
 8005ed8:	d51a      	bpl.n	8005f10 <__cvt+0x8c>
 8005eda:	2d46      	cmp	r5, #70	; 0x46
 8005edc:	eb00 0204 	add.w	r2, r0, r4
 8005ee0:	d10c      	bne.n	8005efc <__cvt+0x78>
 8005ee2:	7803      	ldrb	r3, [r0, #0]
 8005ee4:	2b30      	cmp	r3, #48	; 0x30
 8005ee6:	d107      	bne.n	8005ef8 <__cvt+0x74>
 8005ee8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ef0:	bf1c      	itt	ne
 8005ef2:	f1c4 0401 	rsbne	r4, r4, #1
 8005ef6:	6034      	strne	r4, [r6, #0]
 8005ef8:	6833      	ldr	r3, [r6, #0]
 8005efa:	441a      	add	r2, r3
 8005efc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f04:	bf08      	it	eq
 8005f06:	9203      	streq	r2, [sp, #12]
 8005f08:	2130      	movs	r1, #48	; 0x30
 8005f0a:	9b03      	ldr	r3, [sp, #12]
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d307      	bcc.n	8005f20 <__cvt+0x9c>
 8005f10:	9b03      	ldr	r3, [sp, #12]
 8005f12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f14:	1a1b      	subs	r3, r3, r0
 8005f16:	6013      	str	r3, [r2, #0]
 8005f18:	b005      	add	sp, #20
 8005f1a:	ecbd 8b02 	vpop	{d8}
 8005f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f20:	1c5c      	adds	r4, r3, #1
 8005f22:	9403      	str	r4, [sp, #12]
 8005f24:	7019      	strb	r1, [r3, #0]
 8005f26:	e7f0      	b.n	8005f0a <__cvt+0x86>

08005f28 <__exponent>:
 8005f28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2900      	cmp	r1, #0
 8005f2e:	bfb8      	it	lt
 8005f30:	4249      	neglt	r1, r1
 8005f32:	f803 2b02 	strb.w	r2, [r3], #2
 8005f36:	bfb4      	ite	lt
 8005f38:	222d      	movlt	r2, #45	; 0x2d
 8005f3a:	222b      	movge	r2, #43	; 0x2b
 8005f3c:	2909      	cmp	r1, #9
 8005f3e:	7042      	strb	r2, [r0, #1]
 8005f40:	dd2a      	ble.n	8005f98 <__exponent+0x70>
 8005f42:	f10d 0207 	add.w	r2, sp, #7
 8005f46:	4617      	mov	r7, r2
 8005f48:	260a      	movs	r6, #10
 8005f4a:	4694      	mov	ip, r2
 8005f4c:	fb91 f5f6 	sdiv	r5, r1, r6
 8005f50:	fb06 1415 	mls	r4, r6, r5, r1
 8005f54:	3430      	adds	r4, #48	; 0x30
 8005f56:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005f5a:	460c      	mov	r4, r1
 8005f5c:	2c63      	cmp	r4, #99	; 0x63
 8005f5e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8005f62:	4629      	mov	r1, r5
 8005f64:	dcf1      	bgt.n	8005f4a <__exponent+0x22>
 8005f66:	3130      	adds	r1, #48	; 0x30
 8005f68:	f1ac 0402 	sub.w	r4, ip, #2
 8005f6c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005f70:	1c41      	adds	r1, r0, #1
 8005f72:	4622      	mov	r2, r4
 8005f74:	42ba      	cmp	r2, r7
 8005f76:	d30a      	bcc.n	8005f8e <__exponent+0x66>
 8005f78:	f10d 0209 	add.w	r2, sp, #9
 8005f7c:	eba2 020c 	sub.w	r2, r2, ip
 8005f80:	42bc      	cmp	r4, r7
 8005f82:	bf88      	it	hi
 8005f84:	2200      	movhi	r2, #0
 8005f86:	4413      	add	r3, r2
 8005f88:	1a18      	subs	r0, r3, r0
 8005f8a:	b003      	add	sp, #12
 8005f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f8e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005f92:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005f96:	e7ed      	b.n	8005f74 <__exponent+0x4c>
 8005f98:	2330      	movs	r3, #48	; 0x30
 8005f9a:	3130      	adds	r1, #48	; 0x30
 8005f9c:	7083      	strb	r3, [r0, #2]
 8005f9e:	70c1      	strb	r1, [r0, #3]
 8005fa0:	1d03      	adds	r3, r0, #4
 8005fa2:	e7f1      	b.n	8005f88 <__exponent+0x60>
 8005fa4:	0000      	movs	r0, r0
	...

08005fa8 <_printf_float>:
 8005fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fac:	b08b      	sub	sp, #44	; 0x2c
 8005fae:	460c      	mov	r4, r1
 8005fb0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8005fb4:	4616      	mov	r6, r2
 8005fb6:	461f      	mov	r7, r3
 8005fb8:	4605      	mov	r5, r0
 8005fba:	f000 fd61 	bl	8006a80 <_localeconv_r>
 8005fbe:	f8d0 b000 	ldr.w	fp, [r0]
 8005fc2:	4658      	mov	r0, fp
 8005fc4:	f7fa f9dc 	bl	8000380 <strlen>
 8005fc8:	2300      	movs	r3, #0
 8005fca:	9308      	str	r3, [sp, #32]
 8005fcc:	f8d8 3000 	ldr.w	r3, [r8]
 8005fd0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005fd4:	6822      	ldr	r2, [r4, #0]
 8005fd6:	3307      	adds	r3, #7
 8005fd8:	f023 0307 	bic.w	r3, r3, #7
 8005fdc:	f103 0108 	add.w	r1, r3, #8
 8005fe0:	f8c8 1000 	str.w	r1, [r8]
 8005fe4:	ed93 0b00 	vldr	d0, [r3]
 8005fe8:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8006248 <_printf_float+0x2a0>
 8005fec:	eeb0 7bc0 	vabs.f64	d7, d0
 8005ff0:	eeb4 7b46 	vcmp.f64	d7, d6
 8005ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ff8:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8005ffc:	4682      	mov	sl, r0
 8005ffe:	dd24      	ble.n	800604a <_printf_float+0xa2>
 8006000:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006008:	d502      	bpl.n	8006010 <_printf_float+0x68>
 800600a:	232d      	movs	r3, #45	; 0x2d
 800600c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006010:	498f      	ldr	r1, [pc, #572]	; (8006250 <_printf_float+0x2a8>)
 8006012:	4b90      	ldr	r3, [pc, #576]	; (8006254 <_printf_float+0x2ac>)
 8006014:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006018:	bf94      	ite	ls
 800601a:	4688      	movls	r8, r1
 800601c:	4698      	movhi	r8, r3
 800601e:	2303      	movs	r3, #3
 8006020:	6123      	str	r3, [r4, #16]
 8006022:	f022 0204 	bic.w	r2, r2, #4
 8006026:	2300      	movs	r3, #0
 8006028:	6022      	str	r2, [r4, #0]
 800602a:	9304      	str	r3, [sp, #16]
 800602c:	9700      	str	r7, [sp, #0]
 800602e:	4633      	mov	r3, r6
 8006030:	aa09      	add	r2, sp, #36	; 0x24
 8006032:	4621      	mov	r1, r4
 8006034:	4628      	mov	r0, r5
 8006036:	f000 f9d1 	bl	80063dc <_printf_common>
 800603a:	3001      	adds	r0, #1
 800603c:	f040 808a 	bne.w	8006154 <_printf_float+0x1ac>
 8006040:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006044:	b00b      	add	sp, #44	; 0x2c
 8006046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800604a:	eeb4 0b40 	vcmp.f64	d0, d0
 800604e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006052:	d709      	bvc.n	8006068 <_printf_float+0xc0>
 8006054:	ee10 3a90 	vmov	r3, s1
 8006058:	2b00      	cmp	r3, #0
 800605a:	bfbc      	itt	lt
 800605c:	232d      	movlt	r3, #45	; 0x2d
 800605e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006062:	497d      	ldr	r1, [pc, #500]	; (8006258 <_printf_float+0x2b0>)
 8006064:	4b7d      	ldr	r3, [pc, #500]	; (800625c <_printf_float+0x2b4>)
 8006066:	e7d5      	b.n	8006014 <_printf_float+0x6c>
 8006068:	6863      	ldr	r3, [r4, #4]
 800606a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800606e:	9104      	str	r1, [sp, #16]
 8006070:	1c59      	adds	r1, r3, #1
 8006072:	d13c      	bne.n	80060ee <_printf_float+0x146>
 8006074:	2306      	movs	r3, #6
 8006076:	6063      	str	r3, [r4, #4]
 8006078:	2300      	movs	r3, #0
 800607a:	9303      	str	r3, [sp, #12]
 800607c:	ab08      	add	r3, sp, #32
 800607e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006082:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006086:	ab07      	add	r3, sp, #28
 8006088:	6861      	ldr	r1, [r4, #4]
 800608a:	9300      	str	r3, [sp, #0]
 800608c:	6022      	str	r2, [r4, #0]
 800608e:	f10d 031b 	add.w	r3, sp, #27
 8006092:	4628      	mov	r0, r5
 8006094:	f7ff fef6 	bl	8005e84 <__cvt>
 8006098:	9b04      	ldr	r3, [sp, #16]
 800609a:	9907      	ldr	r1, [sp, #28]
 800609c:	2b47      	cmp	r3, #71	; 0x47
 800609e:	4680      	mov	r8, r0
 80060a0:	d108      	bne.n	80060b4 <_printf_float+0x10c>
 80060a2:	1cc8      	adds	r0, r1, #3
 80060a4:	db02      	blt.n	80060ac <_printf_float+0x104>
 80060a6:	6863      	ldr	r3, [r4, #4]
 80060a8:	4299      	cmp	r1, r3
 80060aa:	dd41      	ble.n	8006130 <_printf_float+0x188>
 80060ac:	f1a9 0902 	sub.w	r9, r9, #2
 80060b0:	fa5f f989 	uxtb.w	r9, r9
 80060b4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80060b8:	d820      	bhi.n	80060fc <_printf_float+0x154>
 80060ba:	3901      	subs	r1, #1
 80060bc:	464a      	mov	r2, r9
 80060be:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80060c2:	9107      	str	r1, [sp, #28]
 80060c4:	f7ff ff30 	bl	8005f28 <__exponent>
 80060c8:	9a08      	ldr	r2, [sp, #32]
 80060ca:	9004      	str	r0, [sp, #16]
 80060cc:	1813      	adds	r3, r2, r0
 80060ce:	2a01      	cmp	r2, #1
 80060d0:	6123      	str	r3, [r4, #16]
 80060d2:	dc02      	bgt.n	80060da <_printf_float+0x132>
 80060d4:	6822      	ldr	r2, [r4, #0]
 80060d6:	07d2      	lsls	r2, r2, #31
 80060d8:	d501      	bpl.n	80060de <_printf_float+0x136>
 80060da:	3301      	adds	r3, #1
 80060dc:	6123      	str	r3, [r4, #16]
 80060de:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d0a2      	beq.n	800602c <_printf_float+0x84>
 80060e6:	232d      	movs	r3, #45	; 0x2d
 80060e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060ec:	e79e      	b.n	800602c <_printf_float+0x84>
 80060ee:	9904      	ldr	r1, [sp, #16]
 80060f0:	2947      	cmp	r1, #71	; 0x47
 80060f2:	d1c1      	bne.n	8006078 <_printf_float+0xd0>
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d1bf      	bne.n	8006078 <_printf_float+0xd0>
 80060f8:	2301      	movs	r3, #1
 80060fa:	e7bc      	b.n	8006076 <_printf_float+0xce>
 80060fc:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006100:	d118      	bne.n	8006134 <_printf_float+0x18c>
 8006102:	2900      	cmp	r1, #0
 8006104:	6863      	ldr	r3, [r4, #4]
 8006106:	dd0b      	ble.n	8006120 <_printf_float+0x178>
 8006108:	6121      	str	r1, [r4, #16]
 800610a:	b913      	cbnz	r3, 8006112 <_printf_float+0x16a>
 800610c:	6822      	ldr	r2, [r4, #0]
 800610e:	07d0      	lsls	r0, r2, #31
 8006110:	d502      	bpl.n	8006118 <_printf_float+0x170>
 8006112:	3301      	adds	r3, #1
 8006114:	440b      	add	r3, r1
 8006116:	6123      	str	r3, [r4, #16]
 8006118:	2300      	movs	r3, #0
 800611a:	65a1      	str	r1, [r4, #88]	; 0x58
 800611c:	9304      	str	r3, [sp, #16]
 800611e:	e7de      	b.n	80060de <_printf_float+0x136>
 8006120:	b913      	cbnz	r3, 8006128 <_printf_float+0x180>
 8006122:	6822      	ldr	r2, [r4, #0]
 8006124:	07d2      	lsls	r2, r2, #31
 8006126:	d501      	bpl.n	800612c <_printf_float+0x184>
 8006128:	3302      	adds	r3, #2
 800612a:	e7f4      	b.n	8006116 <_printf_float+0x16e>
 800612c:	2301      	movs	r3, #1
 800612e:	e7f2      	b.n	8006116 <_printf_float+0x16e>
 8006130:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006134:	9b08      	ldr	r3, [sp, #32]
 8006136:	4299      	cmp	r1, r3
 8006138:	db05      	blt.n	8006146 <_printf_float+0x19e>
 800613a:	6823      	ldr	r3, [r4, #0]
 800613c:	6121      	str	r1, [r4, #16]
 800613e:	07d8      	lsls	r0, r3, #31
 8006140:	d5ea      	bpl.n	8006118 <_printf_float+0x170>
 8006142:	1c4b      	adds	r3, r1, #1
 8006144:	e7e7      	b.n	8006116 <_printf_float+0x16e>
 8006146:	2900      	cmp	r1, #0
 8006148:	bfd4      	ite	le
 800614a:	f1c1 0202 	rsble	r2, r1, #2
 800614e:	2201      	movgt	r2, #1
 8006150:	4413      	add	r3, r2
 8006152:	e7e0      	b.n	8006116 <_printf_float+0x16e>
 8006154:	6823      	ldr	r3, [r4, #0]
 8006156:	055a      	lsls	r2, r3, #21
 8006158:	d407      	bmi.n	800616a <_printf_float+0x1c2>
 800615a:	6923      	ldr	r3, [r4, #16]
 800615c:	4642      	mov	r2, r8
 800615e:	4631      	mov	r1, r6
 8006160:	4628      	mov	r0, r5
 8006162:	47b8      	blx	r7
 8006164:	3001      	adds	r0, #1
 8006166:	d12a      	bne.n	80061be <_printf_float+0x216>
 8006168:	e76a      	b.n	8006040 <_printf_float+0x98>
 800616a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800616e:	f240 80e0 	bls.w	8006332 <_printf_float+0x38a>
 8006172:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006176:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800617a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800617e:	d133      	bne.n	80061e8 <_printf_float+0x240>
 8006180:	4a37      	ldr	r2, [pc, #220]	; (8006260 <_printf_float+0x2b8>)
 8006182:	2301      	movs	r3, #1
 8006184:	4631      	mov	r1, r6
 8006186:	4628      	mov	r0, r5
 8006188:	47b8      	blx	r7
 800618a:	3001      	adds	r0, #1
 800618c:	f43f af58 	beq.w	8006040 <_printf_float+0x98>
 8006190:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006194:	429a      	cmp	r2, r3
 8006196:	db02      	blt.n	800619e <_printf_float+0x1f6>
 8006198:	6823      	ldr	r3, [r4, #0]
 800619a:	07d8      	lsls	r0, r3, #31
 800619c:	d50f      	bpl.n	80061be <_printf_float+0x216>
 800619e:	4653      	mov	r3, sl
 80061a0:	465a      	mov	r2, fp
 80061a2:	4631      	mov	r1, r6
 80061a4:	4628      	mov	r0, r5
 80061a6:	47b8      	blx	r7
 80061a8:	3001      	adds	r0, #1
 80061aa:	f43f af49 	beq.w	8006040 <_printf_float+0x98>
 80061ae:	f04f 0800 	mov.w	r8, #0
 80061b2:	f104 091a 	add.w	r9, r4, #26
 80061b6:	9b08      	ldr	r3, [sp, #32]
 80061b8:	3b01      	subs	r3, #1
 80061ba:	4543      	cmp	r3, r8
 80061bc:	dc09      	bgt.n	80061d2 <_printf_float+0x22a>
 80061be:	6823      	ldr	r3, [r4, #0]
 80061c0:	079b      	lsls	r3, r3, #30
 80061c2:	f100 8106 	bmi.w	80063d2 <_printf_float+0x42a>
 80061c6:	68e0      	ldr	r0, [r4, #12]
 80061c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061ca:	4298      	cmp	r0, r3
 80061cc:	bfb8      	it	lt
 80061ce:	4618      	movlt	r0, r3
 80061d0:	e738      	b.n	8006044 <_printf_float+0x9c>
 80061d2:	2301      	movs	r3, #1
 80061d4:	464a      	mov	r2, r9
 80061d6:	4631      	mov	r1, r6
 80061d8:	4628      	mov	r0, r5
 80061da:	47b8      	blx	r7
 80061dc:	3001      	adds	r0, #1
 80061de:	f43f af2f 	beq.w	8006040 <_printf_float+0x98>
 80061e2:	f108 0801 	add.w	r8, r8, #1
 80061e6:	e7e6      	b.n	80061b6 <_printf_float+0x20e>
 80061e8:	9b07      	ldr	r3, [sp, #28]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	dc3a      	bgt.n	8006264 <_printf_float+0x2bc>
 80061ee:	4a1c      	ldr	r2, [pc, #112]	; (8006260 <_printf_float+0x2b8>)
 80061f0:	2301      	movs	r3, #1
 80061f2:	4631      	mov	r1, r6
 80061f4:	4628      	mov	r0, r5
 80061f6:	47b8      	blx	r7
 80061f8:	3001      	adds	r0, #1
 80061fa:	f43f af21 	beq.w	8006040 <_printf_float+0x98>
 80061fe:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8006202:	4313      	orrs	r3, r2
 8006204:	d102      	bne.n	800620c <_printf_float+0x264>
 8006206:	6823      	ldr	r3, [r4, #0]
 8006208:	07d9      	lsls	r1, r3, #31
 800620a:	d5d8      	bpl.n	80061be <_printf_float+0x216>
 800620c:	4653      	mov	r3, sl
 800620e:	465a      	mov	r2, fp
 8006210:	4631      	mov	r1, r6
 8006212:	4628      	mov	r0, r5
 8006214:	47b8      	blx	r7
 8006216:	3001      	adds	r0, #1
 8006218:	f43f af12 	beq.w	8006040 <_printf_float+0x98>
 800621c:	f04f 0900 	mov.w	r9, #0
 8006220:	f104 0a1a 	add.w	sl, r4, #26
 8006224:	9b07      	ldr	r3, [sp, #28]
 8006226:	425b      	negs	r3, r3
 8006228:	454b      	cmp	r3, r9
 800622a:	dc01      	bgt.n	8006230 <_printf_float+0x288>
 800622c:	9b08      	ldr	r3, [sp, #32]
 800622e:	e795      	b.n	800615c <_printf_float+0x1b4>
 8006230:	2301      	movs	r3, #1
 8006232:	4652      	mov	r2, sl
 8006234:	4631      	mov	r1, r6
 8006236:	4628      	mov	r0, r5
 8006238:	47b8      	blx	r7
 800623a:	3001      	adds	r0, #1
 800623c:	f43f af00 	beq.w	8006040 <_printf_float+0x98>
 8006240:	f109 0901 	add.w	r9, r9, #1
 8006244:	e7ee      	b.n	8006224 <_printf_float+0x27c>
 8006246:	bf00      	nop
 8006248:	ffffffff 	.word	0xffffffff
 800624c:	7fefffff 	.word	0x7fefffff
 8006250:	08008b8c 	.word	0x08008b8c
 8006254:	08008b90 	.word	0x08008b90
 8006258:	08008b94 	.word	0x08008b94
 800625c:	08008b98 	.word	0x08008b98
 8006260:	08008b9c 	.word	0x08008b9c
 8006264:	9a08      	ldr	r2, [sp, #32]
 8006266:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006268:	429a      	cmp	r2, r3
 800626a:	bfa8      	it	ge
 800626c:	461a      	movge	r2, r3
 800626e:	2a00      	cmp	r2, #0
 8006270:	4691      	mov	r9, r2
 8006272:	dc38      	bgt.n	80062e6 <_printf_float+0x33e>
 8006274:	2300      	movs	r3, #0
 8006276:	9305      	str	r3, [sp, #20]
 8006278:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800627c:	f104 021a 	add.w	r2, r4, #26
 8006280:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006282:	9905      	ldr	r1, [sp, #20]
 8006284:	9304      	str	r3, [sp, #16]
 8006286:	eba3 0309 	sub.w	r3, r3, r9
 800628a:	428b      	cmp	r3, r1
 800628c:	dc33      	bgt.n	80062f6 <_printf_float+0x34e>
 800628e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006292:	429a      	cmp	r2, r3
 8006294:	db3c      	blt.n	8006310 <_printf_float+0x368>
 8006296:	6823      	ldr	r3, [r4, #0]
 8006298:	07da      	lsls	r2, r3, #31
 800629a:	d439      	bmi.n	8006310 <_printf_float+0x368>
 800629c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80062a0:	eba2 0903 	sub.w	r9, r2, r3
 80062a4:	9b04      	ldr	r3, [sp, #16]
 80062a6:	1ad2      	subs	r2, r2, r3
 80062a8:	4591      	cmp	r9, r2
 80062aa:	bfa8      	it	ge
 80062ac:	4691      	movge	r9, r2
 80062ae:	f1b9 0f00 	cmp.w	r9, #0
 80062b2:	dc35      	bgt.n	8006320 <_printf_float+0x378>
 80062b4:	f04f 0800 	mov.w	r8, #0
 80062b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80062bc:	f104 0a1a 	add.w	sl, r4, #26
 80062c0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80062c4:	1a9b      	subs	r3, r3, r2
 80062c6:	eba3 0309 	sub.w	r3, r3, r9
 80062ca:	4543      	cmp	r3, r8
 80062cc:	f77f af77 	ble.w	80061be <_printf_float+0x216>
 80062d0:	2301      	movs	r3, #1
 80062d2:	4652      	mov	r2, sl
 80062d4:	4631      	mov	r1, r6
 80062d6:	4628      	mov	r0, r5
 80062d8:	47b8      	blx	r7
 80062da:	3001      	adds	r0, #1
 80062dc:	f43f aeb0 	beq.w	8006040 <_printf_float+0x98>
 80062e0:	f108 0801 	add.w	r8, r8, #1
 80062e4:	e7ec      	b.n	80062c0 <_printf_float+0x318>
 80062e6:	4613      	mov	r3, r2
 80062e8:	4631      	mov	r1, r6
 80062ea:	4642      	mov	r2, r8
 80062ec:	4628      	mov	r0, r5
 80062ee:	47b8      	blx	r7
 80062f0:	3001      	adds	r0, #1
 80062f2:	d1bf      	bne.n	8006274 <_printf_float+0x2cc>
 80062f4:	e6a4      	b.n	8006040 <_printf_float+0x98>
 80062f6:	2301      	movs	r3, #1
 80062f8:	4631      	mov	r1, r6
 80062fa:	4628      	mov	r0, r5
 80062fc:	9204      	str	r2, [sp, #16]
 80062fe:	47b8      	blx	r7
 8006300:	3001      	adds	r0, #1
 8006302:	f43f ae9d 	beq.w	8006040 <_printf_float+0x98>
 8006306:	9b05      	ldr	r3, [sp, #20]
 8006308:	9a04      	ldr	r2, [sp, #16]
 800630a:	3301      	adds	r3, #1
 800630c:	9305      	str	r3, [sp, #20]
 800630e:	e7b7      	b.n	8006280 <_printf_float+0x2d8>
 8006310:	4653      	mov	r3, sl
 8006312:	465a      	mov	r2, fp
 8006314:	4631      	mov	r1, r6
 8006316:	4628      	mov	r0, r5
 8006318:	47b8      	blx	r7
 800631a:	3001      	adds	r0, #1
 800631c:	d1be      	bne.n	800629c <_printf_float+0x2f4>
 800631e:	e68f      	b.n	8006040 <_printf_float+0x98>
 8006320:	9a04      	ldr	r2, [sp, #16]
 8006322:	464b      	mov	r3, r9
 8006324:	4442      	add	r2, r8
 8006326:	4631      	mov	r1, r6
 8006328:	4628      	mov	r0, r5
 800632a:	47b8      	blx	r7
 800632c:	3001      	adds	r0, #1
 800632e:	d1c1      	bne.n	80062b4 <_printf_float+0x30c>
 8006330:	e686      	b.n	8006040 <_printf_float+0x98>
 8006332:	9a08      	ldr	r2, [sp, #32]
 8006334:	2a01      	cmp	r2, #1
 8006336:	dc01      	bgt.n	800633c <_printf_float+0x394>
 8006338:	07db      	lsls	r3, r3, #31
 800633a:	d537      	bpl.n	80063ac <_printf_float+0x404>
 800633c:	2301      	movs	r3, #1
 800633e:	4642      	mov	r2, r8
 8006340:	4631      	mov	r1, r6
 8006342:	4628      	mov	r0, r5
 8006344:	47b8      	blx	r7
 8006346:	3001      	adds	r0, #1
 8006348:	f43f ae7a 	beq.w	8006040 <_printf_float+0x98>
 800634c:	4653      	mov	r3, sl
 800634e:	465a      	mov	r2, fp
 8006350:	4631      	mov	r1, r6
 8006352:	4628      	mov	r0, r5
 8006354:	47b8      	blx	r7
 8006356:	3001      	adds	r0, #1
 8006358:	f43f ae72 	beq.w	8006040 <_printf_float+0x98>
 800635c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006360:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006368:	9b08      	ldr	r3, [sp, #32]
 800636a:	d01a      	beq.n	80063a2 <_printf_float+0x3fa>
 800636c:	3b01      	subs	r3, #1
 800636e:	f108 0201 	add.w	r2, r8, #1
 8006372:	4631      	mov	r1, r6
 8006374:	4628      	mov	r0, r5
 8006376:	47b8      	blx	r7
 8006378:	3001      	adds	r0, #1
 800637a:	d10e      	bne.n	800639a <_printf_float+0x3f2>
 800637c:	e660      	b.n	8006040 <_printf_float+0x98>
 800637e:	2301      	movs	r3, #1
 8006380:	464a      	mov	r2, r9
 8006382:	4631      	mov	r1, r6
 8006384:	4628      	mov	r0, r5
 8006386:	47b8      	blx	r7
 8006388:	3001      	adds	r0, #1
 800638a:	f43f ae59 	beq.w	8006040 <_printf_float+0x98>
 800638e:	f108 0801 	add.w	r8, r8, #1
 8006392:	9b08      	ldr	r3, [sp, #32]
 8006394:	3b01      	subs	r3, #1
 8006396:	4543      	cmp	r3, r8
 8006398:	dcf1      	bgt.n	800637e <_printf_float+0x3d6>
 800639a:	9b04      	ldr	r3, [sp, #16]
 800639c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80063a0:	e6dd      	b.n	800615e <_printf_float+0x1b6>
 80063a2:	f04f 0800 	mov.w	r8, #0
 80063a6:	f104 091a 	add.w	r9, r4, #26
 80063aa:	e7f2      	b.n	8006392 <_printf_float+0x3ea>
 80063ac:	2301      	movs	r3, #1
 80063ae:	4642      	mov	r2, r8
 80063b0:	e7df      	b.n	8006372 <_printf_float+0x3ca>
 80063b2:	2301      	movs	r3, #1
 80063b4:	464a      	mov	r2, r9
 80063b6:	4631      	mov	r1, r6
 80063b8:	4628      	mov	r0, r5
 80063ba:	47b8      	blx	r7
 80063bc:	3001      	adds	r0, #1
 80063be:	f43f ae3f 	beq.w	8006040 <_printf_float+0x98>
 80063c2:	f108 0801 	add.w	r8, r8, #1
 80063c6:	68e3      	ldr	r3, [r4, #12]
 80063c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063ca:	1a5b      	subs	r3, r3, r1
 80063cc:	4543      	cmp	r3, r8
 80063ce:	dcf0      	bgt.n	80063b2 <_printf_float+0x40a>
 80063d0:	e6f9      	b.n	80061c6 <_printf_float+0x21e>
 80063d2:	f04f 0800 	mov.w	r8, #0
 80063d6:	f104 0919 	add.w	r9, r4, #25
 80063da:	e7f4      	b.n	80063c6 <_printf_float+0x41e>

080063dc <_printf_common>:
 80063dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063e0:	4616      	mov	r6, r2
 80063e2:	4699      	mov	r9, r3
 80063e4:	688a      	ldr	r2, [r1, #8]
 80063e6:	690b      	ldr	r3, [r1, #16]
 80063e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063ec:	4293      	cmp	r3, r2
 80063ee:	bfb8      	it	lt
 80063f0:	4613      	movlt	r3, r2
 80063f2:	6033      	str	r3, [r6, #0]
 80063f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063f8:	4607      	mov	r7, r0
 80063fa:	460c      	mov	r4, r1
 80063fc:	b10a      	cbz	r2, 8006402 <_printf_common+0x26>
 80063fe:	3301      	adds	r3, #1
 8006400:	6033      	str	r3, [r6, #0]
 8006402:	6823      	ldr	r3, [r4, #0]
 8006404:	0699      	lsls	r1, r3, #26
 8006406:	bf42      	ittt	mi
 8006408:	6833      	ldrmi	r3, [r6, #0]
 800640a:	3302      	addmi	r3, #2
 800640c:	6033      	strmi	r3, [r6, #0]
 800640e:	6825      	ldr	r5, [r4, #0]
 8006410:	f015 0506 	ands.w	r5, r5, #6
 8006414:	d106      	bne.n	8006424 <_printf_common+0x48>
 8006416:	f104 0a19 	add.w	sl, r4, #25
 800641a:	68e3      	ldr	r3, [r4, #12]
 800641c:	6832      	ldr	r2, [r6, #0]
 800641e:	1a9b      	subs	r3, r3, r2
 8006420:	42ab      	cmp	r3, r5
 8006422:	dc26      	bgt.n	8006472 <_printf_common+0x96>
 8006424:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006428:	1e13      	subs	r3, r2, #0
 800642a:	6822      	ldr	r2, [r4, #0]
 800642c:	bf18      	it	ne
 800642e:	2301      	movne	r3, #1
 8006430:	0692      	lsls	r2, r2, #26
 8006432:	d42b      	bmi.n	800648c <_printf_common+0xb0>
 8006434:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006438:	4649      	mov	r1, r9
 800643a:	4638      	mov	r0, r7
 800643c:	47c0      	blx	r8
 800643e:	3001      	adds	r0, #1
 8006440:	d01e      	beq.n	8006480 <_printf_common+0xa4>
 8006442:	6823      	ldr	r3, [r4, #0]
 8006444:	6922      	ldr	r2, [r4, #16]
 8006446:	f003 0306 	and.w	r3, r3, #6
 800644a:	2b04      	cmp	r3, #4
 800644c:	bf02      	ittt	eq
 800644e:	68e5      	ldreq	r5, [r4, #12]
 8006450:	6833      	ldreq	r3, [r6, #0]
 8006452:	1aed      	subeq	r5, r5, r3
 8006454:	68a3      	ldr	r3, [r4, #8]
 8006456:	bf0c      	ite	eq
 8006458:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800645c:	2500      	movne	r5, #0
 800645e:	4293      	cmp	r3, r2
 8006460:	bfc4      	itt	gt
 8006462:	1a9b      	subgt	r3, r3, r2
 8006464:	18ed      	addgt	r5, r5, r3
 8006466:	2600      	movs	r6, #0
 8006468:	341a      	adds	r4, #26
 800646a:	42b5      	cmp	r5, r6
 800646c:	d11a      	bne.n	80064a4 <_printf_common+0xc8>
 800646e:	2000      	movs	r0, #0
 8006470:	e008      	b.n	8006484 <_printf_common+0xa8>
 8006472:	2301      	movs	r3, #1
 8006474:	4652      	mov	r2, sl
 8006476:	4649      	mov	r1, r9
 8006478:	4638      	mov	r0, r7
 800647a:	47c0      	blx	r8
 800647c:	3001      	adds	r0, #1
 800647e:	d103      	bne.n	8006488 <_printf_common+0xac>
 8006480:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006488:	3501      	adds	r5, #1
 800648a:	e7c6      	b.n	800641a <_printf_common+0x3e>
 800648c:	18e1      	adds	r1, r4, r3
 800648e:	1c5a      	adds	r2, r3, #1
 8006490:	2030      	movs	r0, #48	; 0x30
 8006492:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006496:	4422      	add	r2, r4
 8006498:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800649c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064a0:	3302      	adds	r3, #2
 80064a2:	e7c7      	b.n	8006434 <_printf_common+0x58>
 80064a4:	2301      	movs	r3, #1
 80064a6:	4622      	mov	r2, r4
 80064a8:	4649      	mov	r1, r9
 80064aa:	4638      	mov	r0, r7
 80064ac:	47c0      	blx	r8
 80064ae:	3001      	adds	r0, #1
 80064b0:	d0e6      	beq.n	8006480 <_printf_common+0xa4>
 80064b2:	3601      	adds	r6, #1
 80064b4:	e7d9      	b.n	800646a <_printf_common+0x8e>
	...

080064b8 <_printf_i>:
 80064b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064bc:	7e0f      	ldrb	r7, [r1, #24]
 80064be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80064c0:	2f78      	cmp	r7, #120	; 0x78
 80064c2:	4691      	mov	r9, r2
 80064c4:	4680      	mov	r8, r0
 80064c6:	460c      	mov	r4, r1
 80064c8:	469a      	mov	sl, r3
 80064ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80064ce:	d807      	bhi.n	80064e0 <_printf_i+0x28>
 80064d0:	2f62      	cmp	r7, #98	; 0x62
 80064d2:	d80a      	bhi.n	80064ea <_printf_i+0x32>
 80064d4:	2f00      	cmp	r7, #0
 80064d6:	f000 80d4 	beq.w	8006682 <_printf_i+0x1ca>
 80064da:	2f58      	cmp	r7, #88	; 0x58
 80064dc:	f000 80c0 	beq.w	8006660 <_printf_i+0x1a8>
 80064e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064e8:	e03a      	b.n	8006560 <_printf_i+0xa8>
 80064ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064ee:	2b15      	cmp	r3, #21
 80064f0:	d8f6      	bhi.n	80064e0 <_printf_i+0x28>
 80064f2:	a101      	add	r1, pc, #4	; (adr r1, 80064f8 <_printf_i+0x40>)
 80064f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064f8:	08006551 	.word	0x08006551
 80064fc:	08006565 	.word	0x08006565
 8006500:	080064e1 	.word	0x080064e1
 8006504:	080064e1 	.word	0x080064e1
 8006508:	080064e1 	.word	0x080064e1
 800650c:	080064e1 	.word	0x080064e1
 8006510:	08006565 	.word	0x08006565
 8006514:	080064e1 	.word	0x080064e1
 8006518:	080064e1 	.word	0x080064e1
 800651c:	080064e1 	.word	0x080064e1
 8006520:	080064e1 	.word	0x080064e1
 8006524:	08006669 	.word	0x08006669
 8006528:	08006591 	.word	0x08006591
 800652c:	08006623 	.word	0x08006623
 8006530:	080064e1 	.word	0x080064e1
 8006534:	080064e1 	.word	0x080064e1
 8006538:	0800668b 	.word	0x0800668b
 800653c:	080064e1 	.word	0x080064e1
 8006540:	08006591 	.word	0x08006591
 8006544:	080064e1 	.word	0x080064e1
 8006548:	080064e1 	.word	0x080064e1
 800654c:	0800662b 	.word	0x0800662b
 8006550:	682b      	ldr	r3, [r5, #0]
 8006552:	1d1a      	adds	r2, r3, #4
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	602a      	str	r2, [r5, #0]
 8006558:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800655c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006560:	2301      	movs	r3, #1
 8006562:	e09f      	b.n	80066a4 <_printf_i+0x1ec>
 8006564:	6820      	ldr	r0, [r4, #0]
 8006566:	682b      	ldr	r3, [r5, #0]
 8006568:	0607      	lsls	r7, r0, #24
 800656a:	f103 0104 	add.w	r1, r3, #4
 800656e:	6029      	str	r1, [r5, #0]
 8006570:	d501      	bpl.n	8006576 <_printf_i+0xbe>
 8006572:	681e      	ldr	r6, [r3, #0]
 8006574:	e003      	b.n	800657e <_printf_i+0xc6>
 8006576:	0646      	lsls	r6, r0, #25
 8006578:	d5fb      	bpl.n	8006572 <_printf_i+0xba>
 800657a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800657e:	2e00      	cmp	r6, #0
 8006580:	da03      	bge.n	800658a <_printf_i+0xd2>
 8006582:	232d      	movs	r3, #45	; 0x2d
 8006584:	4276      	negs	r6, r6
 8006586:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800658a:	485a      	ldr	r0, [pc, #360]	; (80066f4 <_printf_i+0x23c>)
 800658c:	230a      	movs	r3, #10
 800658e:	e012      	b.n	80065b6 <_printf_i+0xfe>
 8006590:	682b      	ldr	r3, [r5, #0]
 8006592:	6820      	ldr	r0, [r4, #0]
 8006594:	1d19      	adds	r1, r3, #4
 8006596:	6029      	str	r1, [r5, #0]
 8006598:	0605      	lsls	r5, r0, #24
 800659a:	d501      	bpl.n	80065a0 <_printf_i+0xe8>
 800659c:	681e      	ldr	r6, [r3, #0]
 800659e:	e002      	b.n	80065a6 <_printf_i+0xee>
 80065a0:	0641      	lsls	r1, r0, #25
 80065a2:	d5fb      	bpl.n	800659c <_printf_i+0xe4>
 80065a4:	881e      	ldrh	r6, [r3, #0]
 80065a6:	4853      	ldr	r0, [pc, #332]	; (80066f4 <_printf_i+0x23c>)
 80065a8:	2f6f      	cmp	r7, #111	; 0x6f
 80065aa:	bf0c      	ite	eq
 80065ac:	2308      	moveq	r3, #8
 80065ae:	230a      	movne	r3, #10
 80065b0:	2100      	movs	r1, #0
 80065b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80065b6:	6865      	ldr	r5, [r4, #4]
 80065b8:	60a5      	str	r5, [r4, #8]
 80065ba:	2d00      	cmp	r5, #0
 80065bc:	bfa2      	ittt	ge
 80065be:	6821      	ldrge	r1, [r4, #0]
 80065c0:	f021 0104 	bicge.w	r1, r1, #4
 80065c4:	6021      	strge	r1, [r4, #0]
 80065c6:	b90e      	cbnz	r6, 80065cc <_printf_i+0x114>
 80065c8:	2d00      	cmp	r5, #0
 80065ca:	d04b      	beq.n	8006664 <_printf_i+0x1ac>
 80065cc:	4615      	mov	r5, r2
 80065ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80065d2:	fb03 6711 	mls	r7, r3, r1, r6
 80065d6:	5dc7      	ldrb	r7, [r0, r7]
 80065d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80065dc:	4637      	mov	r7, r6
 80065de:	42bb      	cmp	r3, r7
 80065e0:	460e      	mov	r6, r1
 80065e2:	d9f4      	bls.n	80065ce <_printf_i+0x116>
 80065e4:	2b08      	cmp	r3, #8
 80065e6:	d10b      	bne.n	8006600 <_printf_i+0x148>
 80065e8:	6823      	ldr	r3, [r4, #0]
 80065ea:	07de      	lsls	r6, r3, #31
 80065ec:	d508      	bpl.n	8006600 <_printf_i+0x148>
 80065ee:	6923      	ldr	r3, [r4, #16]
 80065f0:	6861      	ldr	r1, [r4, #4]
 80065f2:	4299      	cmp	r1, r3
 80065f4:	bfde      	ittt	le
 80065f6:	2330      	movle	r3, #48	; 0x30
 80065f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065fc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006600:	1b52      	subs	r2, r2, r5
 8006602:	6122      	str	r2, [r4, #16]
 8006604:	f8cd a000 	str.w	sl, [sp]
 8006608:	464b      	mov	r3, r9
 800660a:	aa03      	add	r2, sp, #12
 800660c:	4621      	mov	r1, r4
 800660e:	4640      	mov	r0, r8
 8006610:	f7ff fee4 	bl	80063dc <_printf_common>
 8006614:	3001      	adds	r0, #1
 8006616:	d14a      	bne.n	80066ae <_printf_i+0x1f6>
 8006618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800661c:	b004      	add	sp, #16
 800661e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006622:	6823      	ldr	r3, [r4, #0]
 8006624:	f043 0320 	orr.w	r3, r3, #32
 8006628:	6023      	str	r3, [r4, #0]
 800662a:	4833      	ldr	r0, [pc, #204]	; (80066f8 <_printf_i+0x240>)
 800662c:	2778      	movs	r7, #120	; 0x78
 800662e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006632:	6823      	ldr	r3, [r4, #0]
 8006634:	6829      	ldr	r1, [r5, #0]
 8006636:	061f      	lsls	r7, r3, #24
 8006638:	f851 6b04 	ldr.w	r6, [r1], #4
 800663c:	d402      	bmi.n	8006644 <_printf_i+0x18c>
 800663e:	065f      	lsls	r7, r3, #25
 8006640:	bf48      	it	mi
 8006642:	b2b6      	uxthmi	r6, r6
 8006644:	07df      	lsls	r7, r3, #31
 8006646:	bf48      	it	mi
 8006648:	f043 0320 	orrmi.w	r3, r3, #32
 800664c:	6029      	str	r1, [r5, #0]
 800664e:	bf48      	it	mi
 8006650:	6023      	strmi	r3, [r4, #0]
 8006652:	b91e      	cbnz	r6, 800665c <_printf_i+0x1a4>
 8006654:	6823      	ldr	r3, [r4, #0]
 8006656:	f023 0320 	bic.w	r3, r3, #32
 800665a:	6023      	str	r3, [r4, #0]
 800665c:	2310      	movs	r3, #16
 800665e:	e7a7      	b.n	80065b0 <_printf_i+0xf8>
 8006660:	4824      	ldr	r0, [pc, #144]	; (80066f4 <_printf_i+0x23c>)
 8006662:	e7e4      	b.n	800662e <_printf_i+0x176>
 8006664:	4615      	mov	r5, r2
 8006666:	e7bd      	b.n	80065e4 <_printf_i+0x12c>
 8006668:	682b      	ldr	r3, [r5, #0]
 800666a:	6826      	ldr	r6, [r4, #0]
 800666c:	6961      	ldr	r1, [r4, #20]
 800666e:	1d18      	adds	r0, r3, #4
 8006670:	6028      	str	r0, [r5, #0]
 8006672:	0635      	lsls	r5, r6, #24
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	d501      	bpl.n	800667c <_printf_i+0x1c4>
 8006678:	6019      	str	r1, [r3, #0]
 800667a:	e002      	b.n	8006682 <_printf_i+0x1ca>
 800667c:	0670      	lsls	r0, r6, #25
 800667e:	d5fb      	bpl.n	8006678 <_printf_i+0x1c0>
 8006680:	8019      	strh	r1, [r3, #0]
 8006682:	2300      	movs	r3, #0
 8006684:	6123      	str	r3, [r4, #16]
 8006686:	4615      	mov	r5, r2
 8006688:	e7bc      	b.n	8006604 <_printf_i+0x14c>
 800668a:	682b      	ldr	r3, [r5, #0]
 800668c:	1d1a      	adds	r2, r3, #4
 800668e:	602a      	str	r2, [r5, #0]
 8006690:	681d      	ldr	r5, [r3, #0]
 8006692:	6862      	ldr	r2, [r4, #4]
 8006694:	2100      	movs	r1, #0
 8006696:	4628      	mov	r0, r5
 8006698:	f7f9 fe22 	bl	80002e0 <memchr>
 800669c:	b108      	cbz	r0, 80066a2 <_printf_i+0x1ea>
 800669e:	1b40      	subs	r0, r0, r5
 80066a0:	6060      	str	r0, [r4, #4]
 80066a2:	6863      	ldr	r3, [r4, #4]
 80066a4:	6123      	str	r3, [r4, #16]
 80066a6:	2300      	movs	r3, #0
 80066a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066ac:	e7aa      	b.n	8006604 <_printf_i+0x14c>
 80066ae:	6923      	ldr	r3, [r4, #16]
 80066b0:	462a      	mov	r2, r5
 80066b2:	4649      	mov	r1, r9
 80066b4:	4640      	mov	r0, r8
 80066b6:	47d0      	blx	sl
 80066b8:	3001      	adds	r0, #1
 80066ba:	d0ad      	beq.n	8006618 <_printf_i+0x160>
 80066bc:	6823      	ldr	r3, [r4, #0]
 80066be:	079b      	lsls	r3, r3, #30
 80066c0:	d413      	bmi.n	80066ea <_printf_i+0x232>
 80066c2:	68e0      	ldr	r0, [r4, #12]
 80066c4:	9b03      	ldr	r3, [sp, #12]
 80066c6:	4298      	cmp	r0, r3
 80066c8:	bfb8      	it	lt
 80066ca:	4618      	movlt	r0, r3
 80066cc:	e7a6      	b.n	800661c <_printf_i+0x164>
 80066ce:	2301      	movs	r3, #1
 80066d0:	4632      	mov	r2, r6
 80066d2:	4649      	mov	r1, r9
 80066d4:	4640      	mov	r0, r8
 80066d6:	47d0      	blx	sl
 80066d8:	3001      	adds	r0, #1
 80066da:	d09d      	beq.n	8006618 <_printf_i+0x160>
 80066dc:	3501      	adds	r5, #1
 80066de:	68e3      	ldr	r3, [r4, #12]
 80066e0:	9903      	ldr	r1, [sp, #12]
 80066e2:	1a5b      	subs	r3, r3, r1
 80066e4:	42ab      	cmp	r3, r5
 80066e6:	dcf2      	bgt.n	80066ce <_printf_i+0x216>
 80066e8:	e7eb      	b.n	80066c2 <_printf_i+0x20a>
 80066ea:	2500      	movs	r5, #0
 80066ec:	f104 0619 	add.w	r6, r4, #25
 80066f0:	e7f5      	b.n	80066de <_printf_i+0x226>
 80066f2:	bf00      	nop
 80066f4:	08008b9e 	.word	0x08008b9e
 80066f8:	08008baf 	.word	0x08008baf

080066fc <std>:
 80066fc:	2300      	movs	r3, #0
 80066fe:	b510      	push	{r4, lr}
 8006700:	4604      	mov	r4, r0
 8006702:	e9c0 3300 	strd	r3, r3, [r0]
 8006706:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800670a:	6083      	str	r3, [r0, #8]
 800670c:	8181      	strh	r1, [r0, #12]
 800670e:	6643      	str	r3, [r0, #100]	; 0x64
 8006710:	81c2      	strh	r2, [r0, #14]
 8006712:	6183      	str	r3, [r0, #24]
 8006714:	4619      	mov	r1, r3
 8006716:	2208      	movs	r2, #8
 8006718:	305c      	adds	r0, #92	; 0x5c
 800671a:	f000 f9a9 	bl	8006a70 <memset>
 800671e:	4b0d      	ldr	r3, [pc, #52]	; (8006754 <std+0x58>)
 8006720:	6263      	str	r3, [r4, #36]	; 0x24
 8006722:	4b0d      	ldr	r3, [pc, #52]	; (8006758 <std+0x5c>)
 8006724:	62a3      	str	r3, [r4, #40]	; 0x28
 8006726:	4b0d      	ldr	r3, [pc, #52]	; (800675c <std+0x60>)
 8006728:	62e3      	str	r3, [r4, #44]	; 0x2c
 800672a:	4b0d      	ldr	r3, [pc, #52]	; (8006760 <std+0x64>)
 800672c:	6323      	str	r3, [r4, #48]	; 0x30
 800672e:	4b0d      	ldr	r3, [pc, #52]	; (8006764 <std+0x68>)
 8006730:	6224      	str	r4, [r4, #32]
 8006732:	429c      	cmp	r4, r3
 8006734:	d006      	beq.n	8006744 <std+0x48>
 8006736:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800673a:	4294      	cmp	r4, r2
 800673c:	d002      	beq.n	8006744 <std+0x48>
 800673e:	33d0      	adds	r3, #208	; 0xd0
 8006740:	429c      	cmp	r4, r3
 8006742:	d105      	bne.n	8006750 <std+0x54>
 8006744:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800674c:	f000 ba0c 	b.w	8006b68 <__retarget_lock_init_recursive>
 8006750:	bd10      	pop	{r4, pc}
 8006752:	bf00      	nop
 8006754:	080068c1 	.word	0x080068c1
 8006758:	080068e3 	.word	0x080068e3
 800675c:	0800691b 	.word	0x0800691b
 8006760:	0800693f 	.word	0x0800693f
 8006764:	24000338 	.word	0x24000338

08006768 <stdio_exit_handler>:
 8006768:	4a02      	ldr	r2, [pc, #8]	; (8006774 <stdio_exit_handler+0xc>)
 800676a:	4903      	ldr	r1, [pc, #12]	; (8006778 <stdio_exit_handler+0x10>)
 800676c:	4803      	ldr	r0, [pc, #12]	; (800677c <stdio_exit_handler+0x14>)
 800676e:	f000 b869 	b.w	8006844 <_fwalk_sglue>
 8006772:	bf00      	nop
 8006774:	24000010 	.word	0x24000010
 8006778:	080086b5 	.word	0x080086b5
 800677c:	2400001c 	.word	0x2400001c

08006780 <cleanup_stdio>:
 8006780:	6841      	ldr	r1, [r0, #4]
 8006782:	4b0c      	ldr	r3, [pc, #48]	; (80067b4 <cleanup_stdio+0x34>)
 8006784:	4299      	cmp	r1, r3
 8006786:	b510      	push	{r4, lr}
 8006788:	4604      	mov	r4, r0
 800678a:	d001      	beq.n	8006790 <cleanup_stdio+0x10>
 800678c:	f001 ff92 	bl	80086b4 <_fflush_r>
 8006790:	68a1      	ldr	r1, [r4, #8]
 8006792:	4b09      	ldr	r3, [pc, #36]	; (80067b8 <cleanup_stdio+0x38>)
 8006794:	4299      	cmp	r1, r3
 8006796:	d002      	beq.n	800679e <cleanup_stdio+0x1e>
 8006798:	4620      	mov	r0, r4
 800679a:	f001 ff8b 	bl	80086b4 <_fflush_r>
 800679e:	68e1      	ldr	r1, [r4, #12]
 80067a0:	4b06      	ldr	r3, [pc, #24]	; (80067bc <cleanup_stdio+0x3c>)
 80067a2:	4299      	cmp	r1, r3
 80067a4:	d004      	beq.n	80067b0 <cleanup_stdio+0x30>
 80067a6:	4620      	mov	r0, r4
 80067a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067ac:	f001 bf82 	b.w	80086b4 <_fflush_r>
 80067b0:	bd10      	pop	{r4, pc}
 80067b2:	bf00      	nop
 80067b4:	24000338 	.word	0x24000338
 80067b8:	240003a0 	.word	0x240003a0
 80067bc:	24000408 	.word	0x24000408

080067c0 <global_stdio_init.part.0>:
 80067c0:	b510      	push	{r4, lr}
 80067c2:	4b0b      	ldr	r3, [pc, #44]	; (80067f0 <global_stdio_init.part.0+0x30>)
 80067c4:	4c0b      	ldr	r4, [pc, #44]	; (80067f4 <global_stdio_init.part.0+0x34>)
 80067c6:	4a0c      	ldr	r2, [pc, #48]	; (80067f8 <global_stdio_init.part.0+0x38>)
 80067c8:	601a      	str	r2, [r3, #0]
 80067ca:	4620      	mov	r0, r4
 80067cc:	2200      	movs	r2, #0
 80067ce:	2104      	movs	r1, #4
 80067d0:	f7ff ff94 	bl	80066fc <std>
 80067d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80067d8:	2201      	movs	r2, #1
 80067da:	2109      	movs	r1, #9
 80067dc:	f7ff ff8e 	bl	80066fc <std>
 80067e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80067e4:	2202      	movs	r2, #2
 80067e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067ea:	2112      	movs	r1, #18
 80067ec:	f7ff bf86 	b.w	80066fc <std>
 80067f0:	24000470 	.word	0x24000470
 80067f4:	24000338 	.word	0x24000338
 80067f8:	08006769 	.word	0x08006769

080067fc <__sfp_lock_acquire>:
 80067fc:	4801      	ldr	r0, [pc, #4]	; (8006804 <__sfp_lock_acquire+0x8>)
 80067fe:	f000 b9b4 	b.w	8006b6a <__retarget_lock_acquire_recursive>
 8006802:	bf00      	nop
 8006804:	24000479 	.word	0x24000479

08006808 <__sfp_lock_release>:
 8006808:	4801      	ldr	r0, [pc, #4]	; (8006810 <__sfp_lock_release+0x8>)
 800680a:	f000 b9af 	b.w	8006b6c <__retarget_lock_release_recursive>
 800680e:	bf00      	nop
 8006810:	24000479 	.word	0x24000479

08006814 <__sinit>:
 8006814:	b510      	push	{r4, lr}
 8006816:	4604      	mov	r4, r0
 8006818:	f7ff fff0 	bl	80067fc <__sfp_lock_acquire>
 800681c:	6a23      	ldr	r3, [r4, #32]
 800681e:	b11b      	cbz	r3, 8006828 <__sinit+0x14>
 8006820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006824:	f7ff bff0 	b.w	8006808 <__sfp_lock_release>
 8006828:	4b04      	ldr	r3, [pc, #16]	; (800683c <__sinit+0x28>)
 800682a:	6223      	str	r3, [r4, #32]
 800682c:	4b04      	ldr	r3, [pc, #16]	; (8006840 <__sinit+0x2c>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d1f5      	bne.n	8006820 <__sinit+0xc>
 8006834:	f7ff ffc4 	bl	80067c0 <global_stdio_init.part.0>
 8006838:	e7f2      	b.n	8006820 <__sinit+0xc>
 800683a:	bf00      	nop
 800683c:	08006781 	.word	0x08006781
 8006840:	24000470 	.word	0x24000470

08006844 <_fwalk_sglue>:
 8006844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006848:	4607      	mov	r7, r0
 800684a:	4688      	mov	r8, r1
 800684c:	4614      	mov	r4, r2
 800684e:	2600      	movs	r6, #0
 8006850:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006854:	f1b9 0901 	subs.w	r9, r9, #1
 8006858:	d505      	bpl.n	8006866 <_fwalk_sglue+0x22>
 800685a:	6824      	ldr	r4, [r4, #0]
 800685c:	2c00      	cmp	r4, #0
 800685e:	d1f7      	bne.n	8006850 <_fwalk_sglue+0xc>
 8006860:	4630      	mov	r0, r6
 8006862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006866:	89ab      	ldrh	r3, [r5, #12]
 8006868:	2b01      	cmp	r3, #1
 800686a:	d907      	bls.n	800687c <_fwalk_sglue+0x38>
 800686c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006870:	3301      	adds	r3, #1
 8006872:	d003      	beq.n	800687c <_fwalk_sglue+0x38>
 8006874:	4629      	mov	r1, r5
 8006876:	4638      	mov	r0, r7
 8006878:	47c0      	blx	r8
 800687a:	4306      	orrs	r6, r0
 800687c:	3568      	adds	r5, #104	; 0x68
 800687e:	e7e9      	b.n	8006854 <_fwalk_sglue+0x10>

08006880 <siprintf>:
 8006880:	b40e      	push	{r1, r2, r3}
 8006882:	b500      	push	{lr}
 8006884:	b09c      	sub	sp, #112	; 0x70
 8006886:	ab1d      	add	r3, sp, #116	; 0x74
 8006888:	9002      	str	r0, [sp, #8]
 800688a:	9006      	str	r0, [sp, #24]
 800688c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006890:	4809      	ldr	r0, [pc, #36]	; (80068b8 <siprintf+0x38>)
 8006892:	9107      	str	r1, [sp, #28]
 8006894:	9104      	str	r1, [sp, #16]
 8006896:	4909      	ldr	r1, [pc, #36]	; (80068bc <siprintf+0x3c>)
 8006898:	f853 2b04 	ldr.w	r2, [r3], #4
 800689c:	9105      	str	r1, [sp, #20]
 800689e:	6800      	ldr	r0, [r0, #0]
 80068a0:	9301      	str	r3, [sp, #4]
 80068a2:	a902      	add	r1, sp, #8
 80068a4:	f001 fc3e 	bl	8008124 <_svfiprintf_r>
 80068a8:	9b02      	ldr	r3, [sp, #8]
 80068aa:	2200      	movs	r2, #0
 80068ac:	701a      	strb	r2, [r3, #0]
 80068ae:	b01c      	add	sp, #112	; 0x70
 80068b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80068b4:	b003      	add	sp, #12
 80068b6:	4770      	bx	lr
 80068b8:	24000068 	.word	0x24000068
 80068bc:	ffff0208 	.word	0xffff0208

080068c0 <__sread>:
 80068c0:	b510      	push	{r4, lr}
 80068c2:	460c      	mov	r4, r1
 80068c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068c8:	f000 f900 	bl	8006acc <_read_r>
 80068cc:	2800      	cmp	r0, #0
 80068ce:	bfab      	itete	ge
 80068d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80068d2:	89a3      	ldrhlt	r3, [r4, #12]
 80068d4:	181b      	addge	r3, r3, r0
 80068d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80068da:	bfac      	ite	ge
 80068dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80068de:	81a3      	strhlt	r3, [r4, #12]
 80068e0:	bd10      	pop	{r4, pc}

080068e2 <__swrite>:
 80068e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068e6:	461f      	mov	r7, r3
 80068e8:	898b      	ldrh	r3, [r1, #12]
 80068ea:	05db      	lsls	r3, r3, #23
 80068ec:	4605      	mov	r5, r0
 80068ee:	460c      	mov	r4, r1
 80068f0:	4616      	mov	r6, r2
 80068f2:	d505      	bpl.n	8006900 <__swrite+0x1e>
 80068f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068f8:	2302      	movs	r3, #2
 80068fa:	2200      	movs	r2, #0
 80068fc:	f000 f8d4 	bl	8006aa8 <_lseek_r>
 8006900:	89a3      	ldrh	r3, [r4, #12]
 8006902:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006906:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800690a:	81a3      	strh	r3, [r4, #12]
 800690c:	4632      	mov	r2, r6
 800690e:	463b      	mov	r3, r7
 8006910:	4628      	mov	r0, r5
 8006912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006916:	f000 b8eb 	b.w	8006af0 <_write_r>

0800691a <__sseek>:
 800691a:	b510      	push	{r4, lr}
 800691c:	460c      	mov	r4, r1
 800691e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006922:	f000 f8c1 	bl	8006aa8 <_lseek_r>
 8006926:	1c43      	adds	r3, r0, #1
 8006928:	89a3      	ldrh	r3, [r4, #12]
 800692a:	bf15      	itete	ne
 800692c:	6560      	strne	r0, [r4, #84]	; 0x54
 800692e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006932:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006936:	81a3      	strheq	r3, [r4, #12]
 8006938:	bf18      	it	ne
 800693a:	81a3      	strhne	r3, [r4, #12]
 800693c:	bd10      	pop	{r4, pc}

0800693e <__sclose>:
 800693e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006942:	f000 b8a1 	b.w	8006a88 <_close_r>

08006946 <__swbuf_r>:
 8006946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006948:	460e      	mov	r6, r1
 800694a:	4614      	mov	r4, r2
 800694c:	4605      	mov	r5, r0
 800694e:	b118      	cbz	r0, 8006958 <__swbuf_r+0x12>
 8006950:	6a03      	ldr	r3, [r0, #32]
 8006952:	b90b      	cbnz	r3, 8006958 <__swbuf_r+0x12>
 8006954:	f7ff ff5e 	bl	8006814 <__sinit>
 8006958:	69a3      	ldr	r3, [r4, #24]
 800695a:	60a3      	str	r3, [r4, #8]
 800695c:	89a3      	ldrh	r3, [r4, #12]
 800695e:	071a      	lsls	r2, r3, #28
 8006960:	d525      	bpl.n	80069ae <__swbuf_r+0x68>
 8006962:	6923      	ldr	r3, [r4, #16]
 8006964:	b31b      	cbz	r3, 80069ae <__swbuf_r+0x68>
 8006966:	6823      	ldr	r3, [r4, #0]
 8006968:	6922      	ldr	r2, [r4, #16]
 800696a:	1a98      	subs	r0, r3, r2
 800696c:	6963      	ldr	r3, [r4, #20]
 800696e:	b2f6      	uxtb	r6, r6
 8006970:	4283      	cmp	r3, r0
 8006972:	4637      	mov	r7, r6
 8006974:	dc04      	bgt.n	8006980 <__swbuf_r+0x3a>
 8006976:	4621      	mov	r1, r4
 8006978:	4628      	mov	r0, r5
 800697a:	f001 fe9b 	bl	80086b4 <_fflush_r>
 800697e:	b9e0      	cbnz	r0, 80069ba <__swbuf_r+0x74>
 8006980:	68a3      	ldr	r3, [r4, #8]
 8006982:	3b01      	subs	r3, #1
 8006984:	60a3      	str	r3, [r4, #8]
 8006986:	6823      	ldr	r3, [r4, #0]
 8006988:	1c5a      	adds	r2, r3, #1
 800698a:	6022      	str	r2, [r4, #0]
 800698c:	701e      	strb	r6, [r3, #0]
 800698e:	6962      	ldr	r2, [r4, #20]
 8006990:	1c43      	adds	r3, r0, #1
 8006992:	429a      	cmp	r2, r3
 8006994:	d004      	beq.n	80069a0 <__swbuf_r+0x5a>
 8006996:	89a3      	ldrh	r3, [r4, #12]
 8006998:	07db      	lsls	r3, r3, #31
 800699a:	d506      	bpl.n	80069aa <__swbuf_r+0x64>
 800699c:	2e0a      	cmp	r6, #10
 800699e:	d104      	bne.n	80069aa <__swbuf_r+0x64>
 80069a0:	4621      	mov	r1, r4
 80069a2:	4628      	mov	r0, r5
 80069a4:	f001 fe86 	bl	80086b4 <_fflush_r>
 80069a8:	b938      	cbnz	r0, 80069ba <__swbuf_r+0x74>
 80069aa:	4638      	mov	r0, r7
 80069ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069ae:	4621      	mov	r1, r4
 80069b0:	4628      	mov	r0, r5
 80069b2:	f000 f805 	bl	80069c0 <__swsetup_r>
 80069b6:	2800      	cmp	r0, #0
 80069b8:	d0d5      	beq.n	8006966 <__swbuf_r+0x20>
 80069ba:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80069be:	e7f4      	b.n	80069aa <__swbuf_r+0x64>

080069c0 <__swsetup_r>:
 80069c0:	b538      	push	{r3, r4, r5, lr}
 80069c2:	4b2a      	ldr	r3, [pc, #168]	; (8006a6c <__swsetup_r+0xac>)
 80069c4:	4605      	mov	r5, r0
 80069c6:	6818      	ldr	r0, [r3, #0]
 80069c8:	460c      	mov	r4, r1
 80069ca:	b118      	cbz	r0, 80069d4 <__swsetup_r+0x14>
 80069cc:	6a03      	ldr	r3, [r0, #32]
 80069ce:	b90b      	cbnz	r3, 80069d4 <__swsetup_r+0x14>
 80069d0:	f7ff ff20 	bl	8006814 <__sinit>
 80069d4:	89a3      	ldrh	r3, [r4, #12]
 80069d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069da:	0718      	lsls	r0, r3, #28
 80069dc:	d422      	bmi.n	8006a24 <__swsetup_r+0x64>
 80069de:	06d9      	lsls	r1, r3, #27
 80069e0:	d407      	bmi.n	80069f2 <__swsetup_r+0x32>
 80069e2:	2309      	movs	r3, #9
 80069e4:	602b      	str	r3, [r5, #0]
 80069e6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80069ea:	81a3      	strh	r3, [r4, #12]
 80069ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069f0:	e034      	b.n	8006a5c <__swsetup_r+0x9c>
 80069f2:	0758      	lsls	r0, r3, #29
 80069f4:	d512      	bpl.n	8006a1c <__swsetup_r+0x5c>
 80069f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069f8:	b141      	cbz	r1, 8006a0c <__swsetup_r+0x4c>
 80069fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069fe:	4299      	cmp	r1, r3
 8006a00:	d002      	beq.n	8006a08 <__swsetup_r+0x48>
 8006a02:	4628      	mov	r0, r5
 8006a04:	f000 feb8 	bl	8007778 <_free_r>
 8006a08:	2300      	movs	r3, #0
 8006a0a:	6363      	str	r3, [r4, #52]	; 0x34
 8006a0c:	89a3      	ldrh	r3, [r4, #12]
 8006a0e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a12:	81a3      	strh	r3, [r4, #12]
 8006a14:	2300      	movs	r3, #0
 8006a16:	6063      	str	r3, [r4, #4]
 8006a18:	6923      	ldr	r3, [r4, #16]
 8006a1a:	6023      	str	r3, [r4, #0]
 8006a1c:	89a3      	ldrh	r3, [r4, #12]
 8006a1e:	f043 0308 	orr.w	r3, r3, #8
 8006a22:	81a3      	strh	r3, [r4, #12]
 8006a24:	6923      	ldr	r3, [r4, #16]
 8006a26:	b94b      	cbnz	r3, 8006a3c <__swsetup_r+0x7c>
 8006a28:	89a3      	ldrh	r3, [r4, #12]
 8006a2a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a32:	d003      	beq.n	8006a3c <__swsetup_r+0x7c>
 8006a34:	4621      	mov	r1, r4
 8006a36:	4628      	mov	r0, r5
 8006a38:	f001 fe8a 	bl	8008750 <__smakebuf_r>
 8006a3c:	89a0      	ldrh	r0, [r4, #12]
 8006a3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a42:	f010 0301 	ands.w	r3, r0, #1
 8006a46:	d00a      	beq.n	8006a5e <__swsetup_r+0x9e>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	60a3      	str	r3, [r4, #8]
 8006a4c:	6963      	ldr	r3, [r4, #20]
 8006a4e:	425b      	negs	r3, r3
 8006a50:	61a3      	str	r3, [r4, #24]
 8006a52:	6923      	ldr	r3, [r4, #16]
 8006a54:	b943      	cbnz	r3, 8006a68 <__swsetup_r+0xa8>
 8006a56:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006a5a:	d1c4      	bne.n	80069e6 <__swsetup_r+0x26>
 8006a5c:	bd38      	pop	{r3, r4, r5, pc}
 8006a5e:	0781      	lsls	r1, r0, #30
 8006a60:	bf58      	it	pl
 8006a62:	6963      	ldrpl	r3, [r4, #20]
 8006a64:	60a3      	str	r3, [r4, #8]
 8006a66:	e7f4      	b.n	8006a52 <__swsetup_r+0x92>
 8006a68:	2000      	movs	r0, #0
 8006a6a:	e7f7      	b.n	8006a5c <__swsetup_r+0x9c>
 8006a6c:	24000068 	.word	0x24000068

08006a70 <memset>:
 8006a70:	4402      	add	r2, r0
 8006a72:	4603      	mov	r3, r0
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d100      	bne.n	8006a7a <memset+0xa>
 8006a78:	4770      	bx	lr
 8006a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8006a7e:	e7f9      	b.n	8006a74 <memset+0x4>

08006a80 <_localeconv_r>:
 8006a80:	4800      	ldr	r0, [pc, #0]	; (8006a84 <_localeconv_r+0x4>)
 8006a82:	4770      	bx	lr
 8006a84:	2400015c 	.word	0x2400015c

08006a88 <_close_r>:
 8006a88:	b538      	push	{r3, r4, r5, lr}
 8006a8a:	4d06      	ldr	r5, [pc, #24]	; (8006aa4 <_close_r+0x1c>)
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	4604      	mov	r4, r0
 8006a90:	4608      	mov	r0, r1
 8006a92:	602b      	str	r3, [r5, #0]
 8006a94:	f7fa fb21 	bl	80010da <_close>
 8006a98:	1c43      	adds	r3, r0, #1
 8006a9a:	d102      	bne.n	8006aa2 <_close_r+0x1a>
 8006a9c:	682b      	ldr	r3, [r5, #0]
 8006a9e:	b103      	cbz	r3, 8006aa2 <_close_r+0x1a>
 8006aa0:	6023      	str	r3, [r4, #0]
 8006aa2:	bd38      	pop	{r3, r4, r5, pc}
 8006aa4:	24000474 	.word	0x24000474

08006aa8 <_lseek_r>:
 8006aa8:	b538      	push	{r3, r4, r5, lr}
 8006aaa:	4d07      	ldr	r5, [pc, #28]	; (8006ac8 <_lseek_r+0x20>)
 8006aac:	4604      	mov	r4, r0
 8006aae:	4608      	mov	r0, r1
 8006ab0:	4611      	mov	r1, r2
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	602a      	str	r2, [r5, #0]
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	f7fa fb36 	bl	8001128 <_lseek>
 8006abc:	1c43      	adds	r3, r0, #1
 8006abe:	d102      	bne.n	8006ac6 <_lseek_r+0x1e>
 8006ac0:	682b      	ldr	r3, [r5, #0]
 8006ac2:	b103      	cbz	r3, 8006ac6 <_lseek_r+0x1e>
 8006ac4:	6023      	str	r3, [r4, #0]
 8006ac6:	bd38      	pop	{r3, r4, r5, pc}
 8006ac8:	24000474 	.word	0x24000474

08006acc <_read_r>:
 8006acc:	b538      	push	{r3, r4, r5, lr}
 8006ace:	4d07      	ldr	r5, [pc, #28]	; (8006aec <_read_r+0x20>)
 8006ad0:	4604      	mov	r4, r0
 8006ad2:	4608      	mov	r0, r1
 8006ad4:	4611      	mov	r1, r2
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	602a      	str	r2, [r5, #0]
 8006ada:	461a      	mov	r2, r3
 8006adc:	f7fa fac4 	bl	8001068 <_read>
 8006ae0:	1c43      	adds	r3, r0, #1
 8006ae2:	d102      	bne.n	8006aea <_read_r+0x1e>
 8006ae4:	682b      	ldr	r3, [r5, #0]
 8006ae6:	b103      	cbz	r3, 8006aea <_read_r+0x1e>
 8006ae8:	6023      	str	r3, [r4, #0]
 8006aea:	bd38      	pop	{r3, r4, r5, pc}
 8006aec:	24000474 	.word	0x24000474

08006af0 <_write_r>:
 8006af0:	b538      	push	{r3, r4, r5, lr}
 8006af2:	4d07      	ldr	r5, [pc, #28]	; (8006b10 <_write_r+0x20>)
 8006af4:	4604      	mov	r4, r0
 8006af6:	4608      	mov	r0, r1
 8006af8:	4611      	mov	r1, r2
 8006afa:	2200      	movs	r2, #0
 8006afc:	602a      	str	r2, [r5, #0]
 8006afe:	461a      	mov	r2, r3
 8006b00:	f7fa facf 	bl	80010a2 <_write>
 8006b04:	1c43      	adds	r3, r0, #1
 8006b06:	d102      	bne.n	8006b0e <_write_r+0x1e>
 8006b08:	682b      	ldr	r3, [r5, #0]
 8006b0a:	b103      	cbz	r3, 8006b0e <_write_r+0x1e>
 8006b0c:	6023      	str	r3, [r4, #0]
 8006b0e:	bd38      	pop	{r3, r4, r5, pc}
 8006b10:	24000474 	.word	0x24000474

08006b14 <__errno>:
 8006b14:	4b01      	ldr	r3, [pc, #4]	; (8006b1c <__errno+0x8>)
 8006b16:	6818      	ldr	r0, [r3, #0]
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	24000068 	.word	0x24000068

08006b20 <__libc_init_array>:
 8006b20:	b570      	push	{r4, r5, r6, lr}
 8006b22:	4d0d      	ldr	r5, [pc, #52]	; (8006b58 <__libc_init_array+0x38>)
 8006b24:	4c0d      	ldr	r4, [pc, #52]	; (8006b5c <__libc_init_array+0x3c>)
 8006b26:	1b64      	subs	r4, r4, r5
 8006b28:	10a4      	asrs	r4, r4, #2
 8006b2a:	2600      	movs	r6, #0
 8006b2c:	42a6      	cmp	r6, r4
 8006b2e:	d109      	bne.n	8006b44 <__libc_init_array+0x24>
 8006b30:	4d0b      	ldr	r5, [pc, #44]	; (8006b60 <__libc_init_array+0x40>)
 8006b32:	4c0c      	ldr	r4, [pc, #48]	; (8006b64 <__libc_init_array+0x44>)
 8006b34:	f001 ff7c 	bl	8008a30 <_init>
 8006b38:	1b64      	subs	r4, r4, r5
 8006b3a:	10a4      	asrs	r4, r4, #2
 8006b3c:	2600      	movs	r6, #0
 8006b3e:	42a6      	cmp	r6, r4
 8006b40:	d105      	bne.n	8006b4e <__libc_init_array+0x2e>
 8006b42:	bd70      	pop	{r4, r5, r6, pc}
 8006b44:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b48:	4798      	blx	r3
 8006b4a:	3601      	adds	r6, #1
 8006b4c:	e7ee      	b.n	8006b2c <__libc_init_array+0xc>
 8006b4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b52:	4798      	blx	r3
 8006b54:	3601      	adds	r6, #1
 8006b56:	e7f2      	b.n	8006b3e <__libc_init_array+0x1e>
 8006b58:	08008f04 	.word	0x08008f04
 8006b5c:	08008f04 	.word	0x08008f04
 8006b60:	08008f04 	.word	0x08008f04
 8006b64:	08008f08 	.word	0x08008f08

08006b68 <__retarget_lock_init_recursive>:
 8006b68:	4770      	bx	lr

08006b6a <__retarget_lock_acquire_recursive>:
 8006b6a:	4770      	bx	lr

08006b6c <__retarget_lock_release_recursive>:
 8006b6c:	4770      	bx	lr

08006b6e <memcpy>:
 8006b6e:	440a      	add	r2, r1
 8006b70:	4291      	cmp	r1, r2
 8006b72:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006b76:	d100      	bne.n	8006b7a <memcpy+0xc>
 8006b78:	4770      	bx	lr
 8006b7a:	b510      	push	{r4, lr}
 8006b7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b84:	4291      	cmp	r1, r2
 8006b86:	d1f9      	bne.n	8006b7c <memcpy+0xe>
 8006b88:	bd10      	pop	{r4, pc}

08006b8a <quorem>:
 8006b8a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b8e:	6903      	ldr	r3, [r0, #16]
 8006b90:	690c      	ldr	r4, [r1, #16]
 8006b92:	42a3      	cmp	r3, r4
 8006b94:	4607      	mov	r7, r0
 8006b96:	db7e      	blt.n	8006c96 <quorem+0x10c>
 8006b98:	3c01      	subs	r4, #1
 8006b9a:	f101 0814 	add.w	r8, r1, #20
 8006b9e:	f100 0514 	add.w	r5, r0, #20
 8006ba2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ba6:	9301      	str	r3, [sp, #4]
 8006ba8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006bac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006bb8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006bbc:	fbb2 f6f3 	udiv	r6, r2, r3
 8006bc0:	d331      	bcc.n	8006c26 <quorem+0x9c>
 8006bc2:	f04f 0e00 	mov.w	lr, #0
 8006bc6:	4640      	mov	r0, r8
 8006bc8:	46ac      	mov	ip, r5
 8006bca:	46f2      	mov	sl, lr
 8006bcc:	f850 2b04 	ldr.w	r2, [r0], #4
 8006bd0:	b293      	uxth	r3, r2
 8006bd2:	fb06 e303 	mla	r3, r6, r3, lr
 8006bd6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006bda:	0c1a      	lsrs	r2, r3, #16
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	ebaa 0303 	sub.w	r3, sl, r3
 8006be2:	f8dc a000 	ldr.w	sl, [ip]
 8006be6:	fa13 f38a 	uxtah	r3, r3, sl
 8006bea:	fb06 220e 	mla	r2, r6, lr, r2
 8006bee:	9300      	str	r3, [sp, #0]
 8006bf0:	9b00      	ldr	r3, [sp, #0]
 8006bf2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006bf6:	b292      	uxth	r2, r2
 8006bf8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006bfc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c00:	f8bd 3000 	ldrh.w	r3, [sp]
 8006c04:	4581      	cmp	r9, r0
 8006c06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c0a:	f84c 3b04 	str.w	r3, [ip], #4
 8006c0e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006c12:	d2db      	bcs.n	8006bcc <quorem+0x42>
 8006c14:	f855 300b 	ldr.w	r3, [r5, fp]
 8006c18:	b92b      	cbnz	r3, 8006c26 <quorem+0x9c>
 8006c1a:	9b01      	ldr	r3, [sp, #4]
 8006c1c:	3b04      	subs	r3, #4
 8006c1e:	429d      	cmp	r5, r3
 8006c20:	461a      	mov	r2, r3
 8006c22:	d32c      	bcc.n	8006c7e <quorem+0xf4>
 8006c24:	613c      	str	r4, [r7, #16]
 8006c26:	4638      	mov	r0, r7
 8006c28:	f001 f922 	bl	8007e70 <__mcmp>
 8006c2c:	2800      	cmp	r0, #0
 8006c2e:	db22      	blt.n	8006c76 <quorem+0xec>
 8006c30:	3601      	adds	r6, #1
 8006c32:	4629      	mov	r1, r5
 8006c34:	2000      	movs	r0, #0
 8006c36:	f858 2b04 	ldr.w	r2, [r8], #4
 8006c3a:	f8d1 c000 	ldr.w	ip, [r1]
 8006c3e:	b293      	uxth	r3, r2
 8006c40:	1ac3      	subs	r3, r0, r3
 8006c42:	0c12      	lsrs	r2, r2, #16
 8006c44:	fa13 f38c 	uxtah	r3, r3, ip
 8006c48:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006c4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c56:	45c1      	cmp	r9, r8
 8006c58:	f841 3b04 	str.w	r3, [r1], #4
 8006c5c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006c60:	d2e9      	bcs.n	8006c36 <quorem+0xac>
 8006c62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c6a:	b922      	cbnz	r2, 8006c76 <quorem+0xec>
 8006c6c:	3b04      	subs	r3, #4
 8006c6e:	429d      	cmp	r5, r3
 8006c70:	461a      	mov	r2, r3
 8006c72:	d30a      	bcc.n	8006c8a <quorem+0x100>
 8006c74:	613c      	str	r4, [r7, #16]
 8006c76:	4630      	mov	r0, r6
 8006c78:	b003      	add	sp, #12
 8006c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c7e:	6812      	ldr	r2, [r2, #0]
 8006c80:	3b04      	subs	r3, #4
 8006c82:	2a00      	cmp	r2, #0
 8006c84:	d1ce      	bne.n	8006c24 <quorem+0x9a>
 8006c86:	3c01      	subs	r4, #1
 8006c88:	e7c9      	b.n	8006c1e <quorem+0x94>
 8006c8a:	6812      	ldr	r2, [r2, #0]
 8006c8c:	3b04      	subs	r3, #4
 8006c8e:	2a00      	cmp	r2, #0
 8006c90:	d1f0      	bne.n	8006c74 <quorem+0xea>
 8006c92:	3c01      	subs	r4, #1
 8006c94:	e7eb      	b.n	8006c6e <quorem+0xe4>
 8006c96:	2000      	movs	r0, #0
 8006c98:	e7ee      	b.n	8006c78 <quorem+0xee>
 8006c9a:	0000      	movs	r0, r0
 8006c9c:	0000      	movs	r0, r0
	...

08006ca0 <_dtoa_r>:
 8006ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ca4:	ed2d 8b02 	vpush	{d8}
 8006ca8:	69c5      	ldr	r5, [r0, #28]
 8006caa:	b091      	sub	sp, #68	; 0x44
 8006cac:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006cb0:	ec59 8b10 	vmov	r8, r9, d0
 8006cb4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8006cb6:	9106      	str	r1, [sp, #24]
 8006cb8:	4606      	mov	r6, r0
 8006cba:	9208      	str	r2, [sp, #32]
 8006cbc:	930c      	str	r3, [sp, #48]	; 0x30
 8006cbe:	b975      	cbnz	r5, 8006cde <_dtoa_r+0x3e>
 8006cc0:	2010      	movs	r0, #16
 8006cc2:	f000 fda5 	bl	8007810 <malloc>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	61f0      	str	r0, [r6, #28]
 8006cca:	b920      	cbnz	r0, 8006cd6 <_dtoa_r+0x36>
 8006ccc:	4ba6      	ldr	r3, [pc, #664]	; (8006f68 <_dtoa_r+0x2c8>)
 8006cce:	21ef      	movs	r1, #239	; 0xef
 8006cd0:	48a6      	ldr	r0, [pc, #664]	; (8006f6c <_dtoa_r+0x2cc>)
 8006cd2:	f001 fdc5 	bl	8008860 <__assert_func>
 8006cd6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006cda:	6005      	str	r5, [r0, #0]
 8006cdc:	60c5      	str	r5, [r0, #12]
 8006cde:	69f3      	ldr	r3, [r6, #28]
 8006ce0:	6819      	ldr	r1, [r3, #0]
 8006ce2:	b151      	cbz	r1, 8006cfa <_dtoa_r+0x5a>
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	604a      	str	r2, [r1, #4]
 8006ce8:	2301      	movs	r3, #1
 8006cea:	4093      	lsls	r3, r2
 8006cec:	608b      	str	r3, [r1, #8]
 8006cee:	4630      	mov	r0, r6
 8006cf0:	f000 fe82 	bl	80079f8 <_Bfree>
 8006cf4:	69f3      	ldr	r3, [r6, #28]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	601a      	str	r2, [r3, #0]
 8006cfa:	f1b9 0300 	subs.w	r3, r9, #0
 8006cfe:	bfbb      	ittet	lt
 8006d00:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006d04:	9303      	strlt	r3, [sp, #12]
 8006d06:	2300      	movge	r3, #0
 8006d08:	2201      	movlt	r2, #1
 8006d0a:	bfac      	ite	ge
 8006d0c:	6023      	strge	r3, [r4, #0]
 8006d0e:	6022      	strlt	r2, [r4, #0]
 8006d10:	4b97      	ldr	r3, [pc, #604]	; (8006f70 <_dtoa_r+0x2d0>)
 8006d12:	9c03      	ldr	r4, [sp, #12]
 8006d14:	43a3      	bics	r3, r4
 8006d16:	d11c      	bne.n	8006d52 <_dtoa_r+0xb2>
 8006d18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d1a:	f242 730f 	movw	r3, #9999	; 0x270f
 8006d1e:	6013      	str	r3, [r2, #0]
 8006d20:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006d24:	ea53 0308 	orrs.w	r3, r3, r8
 8006d28:	f000 84fb 	beq.w	8007722 <_dtoa_r+0xa82>
 8006d2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006d2e:	b963      	cbnz	r3, 8006d4a <_dtoa_r+0xaa>
 8006d30:	4b90      	ldr	r3, [pc, #576]	; (8006f74 <_dtoa_r+0x2d4>)
 8006d32:	e020      	b.n	8006d76 <_dtoa_r+0xd6>
 8006d34:	4b90      	ldr	r3, [pc, #576]	; (8006f78 <_dtoa_r+0x2d8>)
 8006d36:	9301      	str	r3, [sp, #4]
 8006d38:	3308      	adds	r3, #8
 8006d3a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006d3c:	6013      	str	r3, [r2, #0]
 8006d3e:	9801      	ldr	r0, [sp, #4]
 8006d40:	b011      	add	sp, #68	; 0x44
 8006d42:	ecbd 8b02 	vpop	{d8}
 8006d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d4a:	4b8a      	ldr	r3, [pc, #552]	; (8006f74 <_dtoa_r+0x2d4>)
 8006d4c:	9301      	str	r3, [sp, #4]
 8006d4e:	3303      	adds	r3, #3
 8006d50:	e7f3      	b.n	8006d3a <_dtoa_r+0x9a>
 8006d52:	ed9d 8b02 	vldr	d8, [sp, #8]
 8006d56:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d5e:	d10c      	bne.n	8006d7a <_dtoa_r+0xda>
 8006d60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d62:	2301      	movs	r3, #1
 8006d64:	6013      	str	r3, [r2, #0]
 8006d66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f000 84d7 	beq.w	800771c <_dtoa_r+0xa7c>
 8006d6e:	4b83      	ldr	r3, [pc, #524]	; (8006f7c <_dtoa_r+0x2dc>)
 8006d70:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006d72:	6013      	str	r3, [r2, #0]
 8006d74:	3b01      	subs	r3, #1
 8006d76:	9301      	str	r3, [sp, #4]
 8006d78:	e7e1      	b.n	8006d3e <_dtoa_r+0x9e>
 8006d7a:	aa0e      	add	r2, sp, #56	; 0x38
 8006d7c:	a90f      	add	r1, sp, #60	; 0x3c
 8006d7e:	4630      	mov	r0, r6
 8006d80:	eeb0 0b48 	vmov.f64	d0, d8
 8006d84:	f001 f91a 	bl	8007fbc <__d2b>
 8006d88:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8006d8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d8e:	4605      	mov	r5, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d046      	beq.n	8006e22 <_dtoa_r+0x182>
 8006d94:	eeb0 7b48 	vmov.f64	d7, d8
 8006d98:	ee18 1a90 	vmov	r1, s17
 8006d9c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006da0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8006da4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006da8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006dac:	2000      	movs	r0, #0
 8006dae:	ee07 1a90 	vmov	s15, r1
 8006db2:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8006db6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8006f50 <_dtoa_r+0x2b0>
 8006dba:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006dbe:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8006f58 <_dtoa_r+0x2b8>
 8006dc2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8006dc6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8006f60 <_dtoa_r+0x2c0>
 8006dca:	ee07 3a90 	vmov	s15, r3
 8006dce:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8006dd2:	eeb0 7b46 	vmov.f64	d7, d6
 8006dd6:	eea4 7b05 	vfma.f64	d7, d4, d5
 8006dda:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8006dde:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006de6:	ee16 ba90 	vmov	fp, s13
 8006dea:	9009      	str	r0, [sp, #36]	; 0x24
 8006dec:	d508      	bpl.n	8006e00 <_dtoa_r+0x160>
 8006dee:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8006df2:	eeb4 6b47 	vcmp.f64	d6, d7
 8006df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dfa:	bf18      	it	ne
 8006dfc:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8006e00:	f1bb 0f16 	cmp.w	fp, #22
 8006e04:	d82b      	bhi.n	8006e5e <_dtoa_r+0x1be>
 8006e06:	495e      	ldr	r1, [pc, #376]	; (8006f80 <_dtoa_r+0x2e0>)
 8006e08:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8006e0c:	ed91 7b00 	vldr	d7, [r1]
 8006e10:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8006e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e18:	d501      	bpl.n	8006e1e <_dtoa_r+0x17e>
 8006e1a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006e1e:	2100      	movs	r1, #0
 8006e20:	e01e      	b.n	8006e60 <_dtoa_r+0x1c0>
 8006e22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e24:	4413      	add	r3, r2
 8006e26:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8006e2a:	2920      	cmp	r1, #32
 8006e2c:	bfc1      	itttt	gt
 8006e2e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8006e32:	408c      	lslgt	r4, r1
 8006e34:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8006e38:	fa28 f101 	lsrgt.w	r1, r8, r1
 8006e3c:	bfd6      	itet	le
 8006e3e:	f1c1 0120 	rsble	r1, r1, #32
 8006e42:	4321      	orrgt	r1, r4
 8006e44:	fa08 f101 	lslle.w	r1, r8, r1
 8006e48:	ee07 1a90 	vmov	s15, r1
 8006e4c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006e50:	3b01      	subs	r3, #1
 8006e52:	ee17 1a90 	vmov	r1, s15
 8006e56:	2001      	movs	r0, #1
 8006e58:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006e5c:	e7a7      	b.n	8006dae <_dtoa_r+0x10e>
 8006e5e:	2101      	movs	r1, #1
 8006e60:	1ad2      	subs	r2, r2, r3
 8006e62:	1e53      	subs	r3, r2, #1
 8006e64:	9305      	str	r3, [sp, #20]
 8006e66:	bf45      	ittet	mi
 8006e68:	f1c2 0301 	rsbmi	r3, r2, #1
 8006e6c:	9304      	strmi	r3, [sp, #16]
 8006e6e:	2300      	movpl	r3, #0
 8006e70:	2300      	movmi	r3, #0
 8006e72:	bf4c      	ite	mi
 8006e74:	9305      	strmi	r3, [sp, #20]
 8006e76:	9304      	strpl	r3, [sp, #16]
 8006e78:	f1bb 0f00 	cmp.w	fp, #0
 8006e7c:	910b      	str	r1, [sp, #44]	; 0x2c
 8006e7e:	db18      	blt.n	8006eb2 <_dtoa_r+0x212>
 8006e80:	9b05      	ldr	r3, [sp, #20]
 8006e82:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8006e86:	445b      	add	r3, fp
 8006e88:	9305      	str	r3, [sp, #20]
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	9a06      	ldr	r2, [sp, #24]
 8006e8e:	2a09      	cmp	r2, #9
 8006e90:	d848      	bhi.n	8006f24 <_dtoa_r+0x284>
 8006e92:	2a05      	cmp	r2, #5
 8006e94:	bfc4      	itt	gt
 8006e96:	3a04      	subgt	r2, #4
 8006e98:	9206      	strgt	r2, [sp, #24]
 8006e9a:	9a06      	ldr	r2, [sp, #24]
 8006e9c:	f1a2 0202 	sub.w	r2, r2, #2
 8006ea0:	bfcc      	ite	gt
 8006ea2:	2400      	movgt	r4, #0
 8006ea4:	2401      	movle	r4, #1
 8006ea6:	2a03      	cmp	r2, #3
 8006ea8:	d847      	bhi.n	8006f3a <_dtoa_r+0x29a>
 8006eaa:	e8df f002 	tbb	[pc, r2]
 8006eae:	2d0b      	.short	0x2d0b
 8006eb0:	392b      	.short	0x392b
 8006eb2:	9b04      	ldr	r3, [sp, #16]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	eba3 030b 	sub.w	r3, r3, fp
 8006eba:	9304      	str	r3, [sp, #16]
 8006ebc:	920a      	str	r2, [sp, #40]	; 0x28
 8006ebe:	f1cb 0300 	rsb	r3, fp, #0
 8006ec2:	e7e3      	b.n	8006e8c <_dtoa_r+0x1ec>
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	9207      	str	r2, [sp, #28]
 8006ec8:	9a08      	ldr	r2, [sp, #32]
 8006eca:	2a00      	cmp	r2, #0
 8006ecc:	dc38      	bgt.n	8006f40 <_dtoa_r+0x2a0>
 8006ece:	f04f 0a01 	mov.w	sl, #1
 8006ed2:	46d1      	mov	r9, sl
 8006ed4:	4652      	mov	r2, sl
 8006ed6:	f8cd a020 	str.w	sl, [sp, #32]
 8006eda:	69f7      	ldr	r7, [r6, #28]
 8006edc:	2100      	movs	r1, #0
 8006ede:	2004      	movs	r0, #4
 8006ee0:	f100 0c14 	add.w	ip, r0, #20
 8006ee4:	4594      	cmp	ip, r2
 8006ee6:	d930      	bls.n	8006f4a <_dtoa_r+0x2aa>
 8006ee8:	6079      	str	r1, [r7, #4]
 8006eea:	4630      	mov	r0, r6
 8006eec:	930d      	str	r3, [sp, #52]	; 0x34
 8006eee:	f000 fd43 	bl	8007978 <_Balloc>
 8006ef2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ef4:	9001      	str	r0, [sp, #4]
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	2800      	cmp	r0, #0
 8006efa:	d145      	bne.n	8006f88 <_dtoa_r+0x2e8>
 8006efc:	4b21      	ldr	r3, [pc, #132]	; (8006f84 <_dtoa_r+0x2e4>)
 8006efe:	f240 11af 	movw	r1, #431	; 0x1af
 8006f02:	e6e5      	b.n	8006cd0 <_dtoa_r+0x30>
 8006f04:	2201      	movs	r2, #1
 8006f06:	e7de      	b.n	8006ec6 <_dtoa_r+0x226>
 8006f08:	2200      	movs	r2, #0
 8006f0a:	9207      	str	r2, [sp, #28]
 8006f0c:	9a08      	ldr	r2, [sp, #32]
 8006f0e:	eb0b 0a02 	add.w	sl, fp, r2
 8006f12:	f10a 0901 	add.w	r9, sl, #1
 8006f16:	464a      	mov	r2, r9
 8006f18:	2a01      	cmp	r2, #1
 8006f1a:	bfb8      	it	lt
 8006f1c:	2201      	movlt	r2, #1
 8006f1e:	e7dc      	b.n	8006eda <_dtoa_r+0x23a>
 8006f20:	2201      	movs	r2, #1
 8006f22:	e7f2      	b.n	8006f0a <_dtoa_r+0x26a>
 8006f24:	2401      	movs	r4, #1
 8006f26:	2200      	movs	r2, #0
 8006f28:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8006f2c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006f30:	2100      	movs	r1, #0
 8006f32:	46d1      	mov	r9, sl
 8006f34:	2212      	movs	r2, #18
 8006f36:	9108      	str	r1, [sp, #32]
 8006f38:	e7cf      	b.n	8006eda <_dtoa_r+0x23a>
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	9207      	str	r2, [sp, #28]
 8006f3e:	e7f5      	b.n	8006f2c <_dtoa_r+0x28c>
 8006f40:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006f44:	46d1      	mov	r9, sl
 8006f46:	4652      	mov	r2, sl
 8006f48:	e7c7      	b.n	8006eda <_dtoa_r+0x23a>
 8006f4a:	3101      	adds	r1, #1
 8006f4c:	0040      	lsls	r0, r0, #1
 8006f4e:	e7c7      	b.n	8006ee0 <_dtoa_r+0x240>
 8006f50:	636f4361 	.word	0x636f4361
 8006f54:	3fd287a7 	.word	0x3fd287a7
 8006f58:	8b60c8b3 	.word	0x8b60c8b3
 8006f5c:	3fc68a28 	.word	0x3fc68a28
 8006f60:	509f79fb 	.word	0x509f79fb
 8006f64:	3fd34413 	.word	0x3fd34413
 8006f68:	08008bcd 	.word	0x08008bcd
 8006f6c:	08008be4 	.word	0x08008be4
 8006f70:	7ff00000 	.word	0x7ff00000
 8006f74:	08008bc9 	.word	0x08008bc9
 8006f78:	08008bc0 	.word	0x08008bc0
 8006f7c:	08008b9d 	.word	0x08008b9d
 8006f80:	08008cd0 	.word	0x08008cd0
 8006f84:	08008c3c 	.word	0x08008c3c
 8006f88:	69f2      	ldr	r2, [r6, #28]
 8006f8a:	9901      	ldr	r1, [sp, #4]
 8006f8c:	6011      	str	r1, [r2, #0]
 8006f8e:	f1b9 0f0e 	cmp.w	r9, #14
 8006f92:	d86c      	bhi.n	800706e <_dtoa_r+0x3ce>
 8006f94:	2c00      	cmp	r4, #0
 8006f96:	d06a      	beq.n	800706e <_dtoa_r+0x3ce>
 8006f98:	f1bb 0f00 	cmp.w	fp, #0
 8006f9c:	f340 80a0 	ble.w	80070e0 <_dtoa_r+0x440>
 8006fa0:	4ac1      	ldr	r2, [pc, #772]	; (80072a8 <_dtoa_r+0x608>)
 8006fa2:	f00b 010f 	and.w	r1, fp, #15
 8006fa6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8006faa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006fae:	ed92 7b00 	vldr	d7, [r2]
 8006fb2:	ea4f 122b 	mov.w	r2, fp, asr #4
 8006fb6:	f000 8087 	beq.w	80070c8 <_dtoa_r+0x428>
 8006fba:	49bc      	ldr	r1, [pc, #752]	; (80072ac <_dtoa_r+0x60c>)
 8006fbc:	ed91 6b08 	vldr	d6, [r1, #32]
 8006fc0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8006fc4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006fc8:	f002 020f 	and.w	r2, r2, #15
 8006fcc:	2103      	movs	r1, #3
 8006fce:	48b7      	ldr	r0, [pc, #732]	; (80072ac <_dtoa_r+0x60c>)
 8006fd0:	2a00      	cmp	r2, #0
 8006fd2:	d17b      	bne.n	80070cc <_dtoa_r+0x42c>
 8006fd4:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006fd8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006fdc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006fe0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006fe2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006fe6:	2a00      	cmp	r2, #0
 8006fe8:	f000 80a0 	beq.w	800712c <_dtoa_r+0x48c>
 8006fec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006ff0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ff8:	f140 8098 	bpl.w	800712c <_dtoa_r+0x48c>
 8006ffc:	f1b9 0f00 	cmp.w	r9, #0
 8007000:	f000 8094 	beq.w	800712c <_dtoa_r+0x48c>
 8007004:	f1ba 0f00 	cmp.w	sl, #0
 8007008:	dd2f      	ble.n	800706a <_dtoa_r+0x3ca>
 800700a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800700e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007012:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007016:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800701a:	3101      	adds	r1, #1
 800701c:	4654      	mov	r4, sl
 800701e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007022:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8007026:	ee07 1a90 	vmov	s15, r1
 800702a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800702e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007032:	ee15 7a90 	vmov	r7, s11
 8007036:	ec51 0b15 	vmov	r0, r1, d5
 800703a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800703e:	2c00      	cmp	r4, #0
 8007040:	d177      	bne.n	8007132 <_dtoa_r+0x492>
 8007042:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007046:	ee36 6b47 	vsub.f64	d6, d6, d7
 800704a:	ec41 0b17 	vmov	d7, r0, r1
 800704e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007056:	f300 826a 	bgt.w	800752e <_dtoa_r+0x88e>
 800705a:	eeb1 7b47 	vneg.f64	d7, d7
 800705e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007066:	f100 8260 	bmi.w	800752a <_dtoa_r+0x88a>
 800706a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800706e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007070:	2a00      	cmp	r2, #0
 8007072:	f2c0 811d 	blt.w	80072b0 <_dtoa_r+0x610>
 8007076:	f1bb 0f0e 	cmp.w	fp, #14
 800707a:	f300 8119 	bgt.w	80072b0 <_dtoa_r+0x610>
 800707e:	4b8a      	ldr	r3, [pc, #552]	; (80072a8 <_dtoa_r+0x608>)
 8007080:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007084:	ed93 6b00 	vldr	d6, [r3]
 8007088:	9b08      	ldr	r3, [sp, #32]
 800708a:	2b00      	cmp	r3, #0
 800708c:	f280 80b7 	bge.w	80071fe <_dtoa_r+0x55e>
 8007090:	f1b9 0f00 	cmp.w	r9, #0
 8007094:	f300 80b3 	bgt.w	80071fe <_dtoa_r+0x55e>
 8007098:	f040 8246 	bne.w	8007528 <_dtoa_r+0x888>
 800709c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80070a0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80070a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80070a8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80070ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070b0:	464c      	mov	r4, r9
 80070b2:	464f      	mov	r7, r9
 80070b4:	f280 821c 	bge.w	80074f0 <_dtoa_r+0x850>
 80070b8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80070bc:	2331      	movs	r3, #49	; 0x31
 80070be:	f808 3b01 	strb.w	r3, [r8], #1
 80070c2:	f10b 0b01 	add.w	fp, fp, #1
 80070c6:	e218      	b.n	80074fa <_dtoa_r+0x85a>
 80070c8:	2102      	movs	r1, #2
 80070ca:	e780      	b.n	8006fce <_dtoa_r+0x32e>
 80070cc:	07d4      	lsls	r4, r2, #31
 80070ce:	d504      	bpl.n	80070da <_dtoa_r+0x43a>
 80070d0:	ed90 6b00 	vldr	d6, [r0]
 80070d4:	3101      	adds	r1, #1
 80070d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80070da:	1052      	asrs	r2, r2, #1
 80070dc:	3008      	adds	r0, #8
 80070de:	e777      	b.n	8006fd0 <_dtoa_r+0x330>
 80070e0:	d022      	beq.n	8007128 <_dtoa_r+0x488>
 80070e2:	f1cb 0200 	rsb	r2, fp, #0
 80070e6:	4970      	ldr	r1, [pc, #448]	; (80072a8 <_dtoa_r+0x608>)
 80070e8:	f002 000f 	and.w	r0, r2, #15
 80070ec:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80070f0:	ed91 7b00 	vldr	d7, [r1]
 80070f4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80070f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80070fc:	486b      	ldr	r0, [pc, #428]	; (80072ac <_dtoa_r+0x60c>)
 80070fe:	1112      	asrs	r2, r2, #4
 8007100:	2400      	movs	r4, #0
 8007102:	2102      	movs	r1, #2
 8007104:	b92a      	cbnz	r2, 8007112 <_dtoa_r+0x472>
 8007106:	2c00      	cmp	r4, #0
 8007108:	f43f af6a 	beq.w	8006fe0 <_dtoa_r+0x340>
 800710c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007110:	e766      	b.n	8006fe0 <_dtoa_r+0x340>
 8007112:	07d7      	lsls	r7, r2, #31
 8007114:	d505      	bpl.n	8007122 <_dtoa_r+0x482>
 8007116:	ed90 6b00 	vldr	d6, [r0]
 800711a:	3101      	adds	r1, #1
 800711c:	2401      	movs	r4, #1
 800711e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007122:	1052      	asrs	r2, r2, #1
 8007124:	3008      	adds	r0, #8
 8007126:	e7ed      	b.n	8007104 <_dtoa_r+0x464>
 8007128:	2102      	movs	r1, #2
 800712a:	e759      	b.n	8006fe0 <_dtoa_r+0x340>
 800712c:	465a      	mov	r2, fp
 800712e:	464c      	mov	r4, r9
 8007130:	e775      	b.n	800701e <_dtoa_r+0x37e>
 8007132:	ec41 0b17 	vmov	d7, r0, r1
 8007136:	495c      	ldr	r1, [pc, #368]	; (80072a8 <_dtoa_r+0x608>)
 8007138:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800713c:	ed11 4b02 	vldr	d4, [r1, #-8]
 8007140:	9901      	ldr	r1, [sp, #4]
 8007142:	440c      	add	r4, r1
 8007144:	9907      	ldr	r1, [sp, #28]
 8007146:	b351      	cbz	r1, 800719e <_dtoa_r+0x4fe>
 8007148:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800714c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007150:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007154:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007158:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800715c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007160:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007164:	ee14 1a90 	vmov	r1, s9
 8007168:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800716c:	3130      	adds	r1, #48	; 0x30
 800716e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007172:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800717a:	f808 1b01 	strb.w	r1, [r8], #1
 800717e:	d439      	bmi.n	80071f4 <_dtoa_r+0x554>
 8007180:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007184:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800718c:	d472      	bmi.n	8007274 <_dtoa_r+0x5d4>
 800718e:	45a0      	cmp	r8, r4
 8007190:	f43f af6b 	beq.w	800706a <_dtoa_r+0x3ca>
 8007194:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007198:	ee26 6b03 	vmul.f64	d6, d6, d3
 800719c:	e7e0      	b.n	8007160 <_dtoa_r+0x4c0>
 800719e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80071a2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80071a6:	4620      	mov	r0, r4
 80071a8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80071ac:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80071b0:	ee14 1a90 	vmov	r1, s9
 80071b4:	3130      	adds	r1, #48	; 0x30
 80071b6:	f808 1b01 	strb.w	r1, [r8], #1
 80071ba:	45a0      	cmp	r8, r4
 80071bc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80071c0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80071c4:	d118      	bne.n	80071f8 <_dtoa_r+0x558>
 80071c6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80071ca:	ee37 4b05 	vadd.f64	d4, d7, d5
 80071ce:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80071d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071d6:	dc4d      	bgt.n	8007274 <_dtoa_r+0x5d4>
 80071d8:	ee35 5b47 	vsub.f64	d5, d5, d7
 80071dc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80071e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071e4:	f57f af41 	bpl.w	800706a <_dtoa_r+0x3ca>
 80071e8:	4680      	mov	r8, r0
 80071ea:	3801      	subs	r0, #1
 80071ec:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80071f0:	2b30      	cmp	r3, #48	; 0x30
 80071f2:	d0f9      	beq.n	80071e8 <_dtoa_r+0x548>
 80071f4:	4693      	mov	fp, r2
 80071f6:	e02a      	b.n	800724e <_dtoa_r+0x5ae>
 80071f8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80071fc:	e7d6      	b.n	80071ac <_dtoa_r+0x50c>
 80071fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007202:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8007206:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800720a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800720e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007212:	ee15 3a10 	vmov	r3, s10
 8007216:	3330      	adds	r3, #48	; 0x30
 8007218:	f808 3b01 	strb.w	r3, [r8], #1
 800721c:	9b01      	ldr	r3, [sp, #4]
 800721e:	eba8 0303 	sub.w	r3, r8, r3
 8007222:	4599      	cmp	r9, r3
 8007224:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007228:	eea3 7b46 	vfms.f64	d7, d3, d6
 800722c:	d133      	bne.n	8007296 <_dtoa_r+0x5f6>
 800722e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007232:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800723a:	dc1a      	bgt.n	8007272 <_dtoa_r+0x5d2>
 800723c:	eeb4 7b46 	vcmp.f64	d7, d6
 8007240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007244:	d103      	bne.n	800724e <_dtoa_r+0x5ae>
 8007246:	ee15 3a10 	vmov	r3, s10
 800724a:	07d9      	lsls	r1, r3, #31
 800724c:	d411      	bmi.n	8007272 <_dtoa_r+0x5d2>
 800724e:	4629      	mov	r1, r5
 8007250:	4630      	mov	r0, r6
 8007252:	f000 fbd1 	bl	80079f8 <_Bfree>
 8007256:	2300      	movs	r3, #0
 8007258:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800725a:	f888 3000 	strb.w	r3, [r8]
 800725e:	f10b 0301 	add.w	r3, fp, #1
 8007262:	6013      	str	r3, [r2, #0]
 8007264:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007266:	2b00      	cmp	r3, #0
 8007268:	f43f ad69 	beq.w	8006d3e <_dtoa_r+0x9e>
 800726c:	f8c3 8000 	str.w	r8, [r3]
 8007270:	e565      	b.n	8006d3e <_dtoa_r+0x9e>
 8007272:	465a      	mov	r2, fp
 8007274:	4643      	mov	r3, r8
 8007276:	4698      	mov	r8, r3
 8007278:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800727c:	2939      	cmp	r1, #57	; 0x39
 800727e:	d106      	bne.n	800728e <_dtoa_r+0x5ee>
 8007280:	9901      	ldr	r1, [sp, #4]
 8007282:	4299      	cmp	r1, r3
 8007284:	d1f7      	bne.n	8007276 <_dtoa_r+0x5d6>
 8007286:	9801      	ldr	r0, [sp, #4]
 8007288:	2130      	movs	r1, #48	; 0x30
 800728a:	3201      	adds	r2, #1
 800728c:	7001      	strb	r1, [r0, #0]
 800728e:	7819      	ldrb	r1, [r3, #0]
 8007290:	3101      	adds	r1, #1
 8007292:	7019      	strb	r1, [r3, #0]
 8007294:	e7ae      	b.n	80071f4 <_dtoa_r+0x554>
 8007296:	ee27 7b04 	vmul.f64	d7, d7, d4
 800729a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800729e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072a2:	d1b2      	bne.n	800720a <_dtoa_r+0x56a>
 80072a4:	e7d3      	b.n	800724e <_dtoa_r+0x5ae>
 80072a6:	bf00      	nop
 80072a8:	08008cd0 	.word	0x08008cd0
 80072ac:	08008ca8 	.word	0x08008ca8
 80072b0:	9907      	ldr	r1, [sp, #28]
 80072b2:	2900      	cmp	r1, #0
 80072b4:	f000 80d0 	beq.w	8007458 <_dtoa_r+0x7b8>
 80072b8:	9906      	ldr	r1, [sp, #24]
 80072ba:	2901      	cmp	r1, #1
 80072bc:	f300 80b4 	bgt.w	8007428 <_dtoa_r+0x788>
 80072c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072c2:	2900      	cmp	r1, #0
 80072c4:	f000 80ac 	beq.w	8007420 <_dtoa_r+0x780>
 80072c8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80072cc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80072d0:	461c      	mov	r4, r3
 80072d2:	9309      	str	r3, [sp, #36]	; 0x24
 80072d4:	9b04      	ldr	r3, [sp, #16]
 80072d6:	4413      	add	r3, r2
 80072d8:	9304      	str	r3, [sp, #16]
 80072da:	9b05      	ldr	r3, [sp, #20]
 80072dc:	2101      	movs	r1, #1
 80072de:	4413      	add	r3, r2
 80072e0:	4630      	mov	r0, r6
 80072e2:	9305      	str	r3, [sp, #20]
 80072e4:	f000 fc3e 	bl	8007b64 <__i2b>
 80072e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072ea:	4607      	mov	r7, r0
 80072ec:	f1b8 0f00 	cmp.w	r8, #0
 80072f0:	d00d      	beq.n	800730e <_dtoa_r+0x66e>
 80072f2:	9a05      	ldr	r2, [sp, #20]
 80072f4:	2a00      	cmp	r2, #0
 80072f6:	dd0a      	ble.n	800730e <_dtoa_r+0x66e>
 80072f8:	4542      	cmp	r2, r8
 80072fa:	9904      	ldr	r1, [sp, #16]
 80072fc:	bfa8      	it	ge
 80072fe:	4642      	movge	r2, r8
 8007300:	1a89      	subs	r1, r1, r2
 8007302:	9104      	str	r1, [sp, #16]
 8007304:	9905      	ldr	r1, [sp, #20]
 8007306:	eba8 0802 	sub.w	r8, r8, r2
 800730a:	1a8a      	subs	r2, r1, r2
 800730c:	9205      	str	r2, [sp, #20]
 800730e:	b303      	cbz	r3, 8007352 <_dtoa_r+0x6b2>
 8007310:	9a07      	ldr	r2, [sp, #28]
 8007312:	2a00      	cmp	r2, #0
 8007314:	f000 80a5 	beq.w	8007462 <_dtoa_r+0x7c2>
 8007318:	2c00      	cmp	r4, #0
 800731a:	dd13      	ble.n	8007344 <_dtoa_r+0x6a4>
 800731c:	4639      	mov	r1, r7
 800731e:	4622      	mov	r2, r4
 8007320:	4630      	mov	r0, r6
 8007322:	930d      	str	r3, [sp, #52]	; 0x34
 8007324:	f000 fcde 	bl	8007ce4 <__pow5mult>
 8007328:	462a      	mov	r2, r5
 800732a:	4601      	mov	r1, r0
 800732c:	4607      	mov	r7, r0
 800732e:	4630      	mov	r0, r6
 8007330:	f000 fc2e 	bl	8007b90 <__multiply>
 8007334:	4629      	mov	r1, r5
 8007336:	9009      	str	r0, [sp, #36]	; 0x24
 8007338:	4630      	mov	r0, r6
 800733a:	f000 fb5d 	bl	80079f8 <_Bfree>
 800733e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007340:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007342:	4615      	mov	r5, r2
 8007344:	1b1a      	subs	r2, r3, r4
 8007346:	d004      	beq.n	8007352 <_dtoa_r+0x6b2>
 8007348:	4629      	mov	r1, r5
 800734a:	4630      	mov	r0, r6
 800734c:	f000 fcca 	bl	8007ce4 <__pow5mult>
 8007350:	4605      	mov	r5, r0
 8007352:	2101      	movs	r1, #1
 8007354:	4630      	mov	r0, r6
 8007356:	f000 fc05 	bl	8007b64 <__i2b>
 800735a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800735c:	2b00      	cmp	r3, #0
 800735e:	4604      	mov	r4, r0
 8007360:	f340 8081 	ble.w	8007466 <_dtoa_r+0x7c6>
 8007364:	461a      	mov	r2, r3
 8007366:	4601      	mov	r1, r0
 8007368:	4630      	mov	r0, r6
 800736a:	f000 fcbb 	bl	8007ce4 <__pow5mult>
 800736e:	9b06      	ldr	r3, [sp, #24]
 8007370:	2b01      	cmp	r3, #1
 8007372:	4604      	mov	r4, r0
 8007374:	dd7a      	ble.n	800746c <_dtoa_r+0x7cc>
 8007376:	2300      	movs	r3, #0
 8007378:	9309      	str	r3, [sp, #36]	; 0x24
 800737a:	6922      	ldr	r2, [r4, #16]
 800737c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007380:	6910      	ldr	r0, [r2, #16]
 8007382:	f000 fba1 	bl	8007ac8 <__hi0bits>
 8007386:	f1c0 0020 	rsb	r0, r0, #32
 800738a:	9b05      	ldr	r3, [sp, #20]
 800738c:	4418      	add	r0, r3
 800738e:	f010 001f 	ands.w	r0, r0, #31
 8007392:	f000 8093 	beq.w	80074bc <_dtoa_r+0x81c>
 8007396:	f1c0 0220 	rsb	r2, r0, #32
 800739a:	2a04      	cmp	r2, #4
 800739c:	f340 8085 	ble.w	80074aa <_dtoa_r+0x80a>
 80073a0:	9b04      	ldr	r3, [sp, #16]
 80073a2:	f1c0 001c 	rsb	r0, r0, #28
 80073a6:	4403      	add	r3, r0
 80073a8:	9304      	str	r3, [sp, #16]
 80073aa:	9b05      	ldr	r3, [sp, #20]
 80073ac:	4480      	add	r8, r0
 80073ae:	4403      	add	r3, r0
 80073b0:	9305      	str	r3, [sp, #20]
 80073b2:	9b04      	ldr	r3, [sp, #16]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	dd05      	ble.n	80073c4 <_dtoa_r+0x724>
 80073b8:	4629      	mov	r1, r5
 80073ba:	461a      	mov	r2, r3
 80073bc:	4630      	mov	r0, r6
 80073be:	f000 fceb 	bl	8007d98 <__lshift>
 80073c2:	4605      	mov	r5, r0
 80073c4:	9b05      	ldr	r3, [sp, #20]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	dd05      	ble.n	80073d6 <_dtoa_r+0x736>
 80073ca:	4621      	mov	r1, r4
 80073cc:	461a      	mov	r2, r3
 80073ce:	4630      	mov	r0, r6
 80073d0:	f000 fce2 	bl	8007d98 <__lshift>
 80073d4:	4604      	mov	r4, r0
 80073d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d071      	beq.n	80074c0 <_dtoa_r+0x820>
 80073dc:	4621      	mov	r1, r4
 80073de:	4628      	mov	r0, r5
 80073e0:	f000 fd46 	bl	8007e70 <__mcmp>
 80073e4:	2800      	cmp	r0, #0
 80073e6:	da6b      	bge.n	80074c0 <_dtoa_r+0x820>
 80073e8:	2300      	movs	r3, #0
 80073ea:	4629      	mov	r1, r5
 80073ec:	220a      	movs	r2, #10
 80073ee:	4630      	mov	r0, r6
 80073f0:	f000 fb24 	bl	8007a3c <__multadd>
 80073f4:	9b07      	ldr	r3, [sp, #28]
 80073f6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80073fa:	4605      	mov	r5, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f000 8197 	beq.w	8007730 <_dtoa_r+0xa90>
 8007402:	4639      	mov	r1, r7
 8007404:	2300      	movs	r3, #0
 8007406:	220a      	movs	r2, #10
 8007408:	4630      	mov	r0, r6
 800740a:	f000 fb17 	bl	8007a3c <__multadd>
 800740e:	f1ba 0f00 	cmp.w	sl, #0
 8007412:	4607      	mov	r7, r0
 8007414:	f300 8093 	bgt.w	800753e <_dtoa_r+0x89e>
 8007418:	9b06      	ldr	r3, [sp, #24]
 800741a:	2b02      	cmp	r3, #2
 800741c:	dc57      	bgt.n	80074ce <_dtoa_r+0x82e>
 800741e:	e08e      	b.n	800753e <_dtoa_r+0x89e>
 8007420:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007422:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007426:	e751      	b.n	80072cc <_dtoa_r+0x62c>
 8007428:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 800742c:	42a3      	cmp	r3, r4
 800742e:	bfbf      	itttt	lt
 8007430:	1ae2      	sublt	r2, r4, r3
 8007432:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007434:	189b      	addlt	r3, r3, r2
 8007436:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007438:	bfae      	itee	ge
 800743a:	1b1c      	subge	r4, r3, r4
 800743c:	4623      	movlt	r3, r4
 800743e:	2400      	movlt	r4, #0
 8007440:	f1b9 0f00 	cmp.w	r9, #0
 8007444:	bfb5      	itete	lt
 8007446:	9a04      	ldrlt	r2, [sp, #16]
 8007448:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800744c:	eba2 0809 	sublt.w	r8, r2, r9
 8007450:	464a      	movge	r2, r9
 8007452:	bfb8      	it	lt
 8007454:	2200      	movlt	r2, #0
 8007456:	e73c      	b.n	80072d2 <_dtoa_r+0x632>
 8007458:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800745c:	9f07      	ldr	r7, [sp, #28]
 800745e:	461c      	mov	r4, r3
 8007460:	e744      	b.n	80072ec <_dtoa_r+0x64c>
 8007462:	461a      	mov	r2, r3
 8007464:	e770      	b.n	8007348 <_dtoa_r+0x6a8>
 8007466:	9b06      	ldr	r3, [sp, #24]
 8007468:	2b01      	cmp	r3, #1
 800746a:	dc18      	bgt.n	800749e <_dtoa_r+0x7fe>
 800746c:	9b02      	ldr	r3, [sp, #8]
 800746e:	b9b3      	cbnz	r3, 800749e <_dtoa_r+0x7fe>
 8007470:	9b03      	ldr	r3, [sp, #12]
 8007472:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007476:	b9a2      	cbnz	r2, 80074a2 <_dtoa_r+0x802>
 8007478:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800747c:	0d12      	lsrs	r2, r2, #20
 800747e:	0512      	lsls	r2, r2, #20
 8007480:	b18a      	cbz	r2, 80074a6 <_dtoa_r+0x806>
 8007482:	9b04      	ldr	r3, [sp, #16]
 8007484:	3301      	adds	r3, #1
 8007486:	9304      	str	r3, [sp, #16]
 8007488:	9b05      	ldr	r3, [sp, #20]
 800748a:	3301      	adds	r3, #1
 800748c:	9305      	str	r3, [sp, #20]
 800748e:	2301      	movs	r3, #1
 8007490:	9309      	str	r3, [sp, #36]	; 0x24
 8007492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007494:	2b00      	cmp	r3, #0
 8007496:	f47f af70 	bne.w	800737a <_dtoa_r+0x6da>
 800749a:	2001      	movs	r0, #1
 800749c:	e775      	b.n	800738a <_dtoa_r+0x6ea>
 800749e:	2300      	movs	r3, #0
 80074a0:	e7f6      	b.n	8007490 <_dtoa_r+0x7f0>
 80074a2:	9b02      	ldr	r3, [sp, #8]
 80074a4:	e7f4      	b.n	8007490 <_dtoa_r+0x7f0>
 80074a6:	9209      	str	r2, [sp, #36]	; 0x24
 80074a8:	e7f3      	b.n	8007492 <_dtoa_r+0x7f2>
 80074aa:	d082      	beq.n	80073b2 <_dtoa_r+0x712>
 80074ac:	9b04      	ldr	r3, [sp, #16]
 80074ae:	321c      	adds	r2, #28
 80074b0:	4413      	add	r3, r2
 80074b2:	9304      	str	r3, [sp, #16]
 80074b4:	9b05      	ldr	r3, [sp, #20]
 80074b6:	4490      	add	r8, r2
 80074b8:	4413      	add	r3, r2
 80074ba:	e779      	b.n	80073b0 <_dtoa_r+0x710>
 80074bc:	4602      	mov	r2, r0
 80074be:	e7f5      	b.n	80074ac <_dtoa_r+0x80c>
 80074c0:	f1b9 0f00 	cmp.w	r9, #0
 80074c4:	dc36      	bgt.n	8007534 <_dtoa_r+0x894>
 80074c6:	9b06      	ldr	r3, [sp, #24]
 80074c8:	2b02      	cmp	r3, #2
 80074ca:	dd33      	ble.n	8007534 <_dtoa_r+0x894>
 80074cc:	46ca      	mov	sl, r9
 80074ce:	f1ba 0f00 	cmp.w	sl, #0
 80074d2:	d10d      	bne.n	80074f0 <_dtoa_r+0x850>
 80074d4:	4621      	mov	r1, r4
 80074d6:	4653      	mov	r3, sl
 80074d8:	2205      	movs	r2, #5
 80074da:	4630      	mov	r0, r6
 80074dc:	f000 faae 	bl	8007a3c <__multadd>
 80074e0:	4601      	mov	r1, r0
 80074e2:	4604      	mov	r4, r0
 80074e4:	4628      	mov	r0, r5
 80074e6:	f000 fcc3 	bl	8007e70 <__mcmp>
 80074ea:	2800      	cmp	r0, #0
 80074ec:	f73f ade4 	bgt.w	80070b8 <_dtoa_r+0x418>
 80074f0:	9b08      	ldr	r3, [sp, #32]
 80074f2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80074f6:	ea6f 0b03 	mvn.w	fp, r3
 80074fa:	f04f 0900 	mov.w	r9, #0
 80074fe:	4621      	mov	r1, r4
 8007500:	4630      	mov	r0, r6
 8007502:	f000 fa79 	bl	80079f8 <_Bfree>
 8007506:	2f00      	cmp	r7, #0
 8007508:	f43f aea1 	beq.w	800724e <_dtoa_r+0x5ae>
 800750c:	f1b9 0f00 	cmp.w	r9, #0
 8007510:	d005      	beq.n	800751e <_dtoa_r+0x87e>
 8007512:	45b9      	cmp	r9, r7
 8007514:	d003      	beq.n	800751e <_dtoa_r+0x87e>
 8007516:	4649      	mov	r1, r9
 8007518:	4630      	mov	r0, r6
 800751a:	f000 fa6d 	bl	80079f8 <_Bfree>
 800751e:	4639      	mov	r1, r7
 8007520:	4630      	mov	r0, r6
 8007522:	f000 fa69 	bl	80079f8 <_Bfree>
 8007526:	e692      	b.n	800724e <_dtoa_r+0x5ae>
 8007528:	2400      	movs	r4, #0
 800752a:	4627      	mov	r7, r4
 800752c:	e7e0      	b.n	80074f0 <_dtoa_r+0x850>
 800752e:	4693      	mov	fp, r2
 8007530:	4627      	mov	r7, r4
 8007532:	e5c1      	b.n	80070b8 <_dtoa_r+0x418>
 8007534:	9b07      	ldr	r3, [sp, #28]
 8007536:	46ca      	mov	sl, r9
 8007538:	2b00      	cmp	r3, #0
 800753a:	f000 8100 	beq.w	800773e <_dtoa_r+0xa9e>
 800753e:	f1b8 0f00 	cmp.w	r8, #0
 8007542:	dd05      	ble.n	8007550 <_dtoa_r+0x8b0>
 8007544:	4639      	mov	r1, r7
 8007546:	4642      	mov	r2, r8
 8007548:	4630      	mov	r0, r6
 800754a:	f000 fc25 	bl	8007d98 <__lshift>
 800754e:	4607      	mov	r7, r0
 8007550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007552:	2b00      	cmp	r3, #0
 8007554:	d05d      	beq.n	8007612 <_dtoa_r+0x972>
 8007556:	6879      	ldr	r1, [r7, #4]
 8007558:	4630      	mov	r0, r6
 800755a:	f000 fa0d 	bl	8007978 <_Balloc>
 800755e:	4680      	mov	r8, r0
 8007560:	b928      	cbnz	r0, 800756e <_dtoa_r+0x8ce>
 8007562:	4b82      	ldr	r3, [pc, #520]	; (800776c <_dtoa_r+0xacc>)
 8007564:	4602      	mov	r2, r0
 8007566:	f240 21ef 	movw	r1, #751	; 0x2ef
 800756a:	f7ff bbb1 	b.w	8006cd0 <_dtoa_r+0x30>
 800756e:	693a      	ldr	r2, [r7, #16]
 8007570:	3202      	adds	r2, #2
 8007572:	0092      	lsls	r2, r2, #2
 8007574:	f107 010c 	add.w	r1, r7, #12
 8007578:	300c      	adds	r0, #12
 800757a:	f7ff faf8 	bl	8006b6e <memcpy>
 800757e:	2201      	movs	r2, #1
 8007580:	4641      	mov	r1, r8
 8007582:	4630      	mov	r0, r6
 8007584:	f000 fc08 	bl	8007d98 <__lshift>
 8007588:	9b01      	ldr	r3, [sp, #4]
 800758a:	3301      	adds	r3, #1
 800758c:	9304      	str	r3, [sp, #16]
 800758e:	9b01      	ldr	r3, [sp, #4]
 8007590:	4453      	add	r3, sl
 8007592:	9308      	str	r3, [sp, #32]
 8007594:	9b02      	ldr	r3, [sp, #8]
 8007596:	f003 0301 	and.w	r3, r3, #1
 800759a:	46b9      	mov	r9, r7
 800759c:	9307      	str	r3, [sp, #28]
 800759e:	4607      	mov	r7, r0
 80075a0:	9b04      	ldr	r3, [sp, #16]
 80075a2:	4621      	mov	r1, r4
 80075a4:	3b01      	subs	r3, #1
 80075a6:	4628      	mov	r0, r5
 80075a8:	9302      	str	r3, [sp, #8]
 80075aa:	f7ff faee 	bl	8006b8a <quorem>
 80075ae:	4603      	mov	r3, r0
 80075b0:	3330      	adds	r3, #48	; 0x30
 80075b2:	9005      	str	r0, [sp, #20]
 80075b4:	4649      	mov	r1, r9
 80075b6:	4628      	mov	r0, r5
 80075b8:	9309      	str	r3, [sp, #36]	; 0x24
 80075ba:	f000 fc59 	bl	8007e70 <__mcmp>
 80075be:	463a      	mov	r2, r7
 80075c0:	4682      	mov	sl, r0
 80075c2:	4621      	mov	r1, r4
 80075c4:	4630      	mov	r0, r6
 80075c6:	f000 fc6f 	bl	8007ea8 <__mdiff>
 80075ca:	68c2      	ldr	r2, [r0, #12]
 80075cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ce:	4680      	mov	r8, r0
 80075d0:	bb0a      	cbnz	r2, 8007616 <_dtoa_r+0x976>
 80075d2:	4601      	mov	r1, r0
 80075d4:	4628      	mov	r0, r5
 80075d6:	f000 fc4b 	bl	8007e70 <__mcmp>
 80075da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075dc:	4602      	mov	r2, r0
 80075de:	4641      	mov	r1, r8
 80075e0:	4630      	mov	r0, r6
 80075e2:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80075e6:	f000 fa07 	bl	80079f8 <_Bfree>
 80075ea:	9b06      	ldr	r3, [sp, #24]
 80075ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075ee:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80075f2:	ea43 0102 	orr.w	r1, r3, r2
 80075f6:	9b07      	ldr	r3, [sp, #28]
 80075f8:	4319      	orrs	r1, r3
 80075fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075fc:	d10d      	bne.n	800761a <_dtoa_r+0x97a>
 80075fe:	2b39      	cmp	r3, #57	; 0x39
 8007600:	d029      	beq.n	8007656 <_dtoa_r+0x9b6>
 8007602:	f1ba 0f00 	cmp.w	sl, #0
 8007606:	dd01      	ble.n	800760c <_dtoa_r+0x96c>
 8007608:	9b05      	ldr	r3, [sp, #20]
 800760a:	3331      	adds	r3, #49	; 0x31
 800760c:	9a02      	ldr	r2, [sp, #8]
 800760e:	7013      	strb	r3, [r2, #0]
 8007610:	e775      	b.n	80074fe <_dtoa_r+0x85e>
 8007612:	4638      	mov	r0, r7
 8007614:	e7b8      	b.n	8007588 <_dtoa_r+0x8e8>
 8007616:	2201      	movs	r2, #1
 8007618:	e7e1      	b.n	80075de <_dtoa_r+0x93e>
 800761a:	f1ba 0f00 	cmp.w	sl, #0
 800761e:	db06      	blt.n	800762e <_dtoa_r+0x98e>
 8007620:	9906      	ldr	r1, [sp, #24]
 8007622:	ea41 0a0a 	orr.w	sl, r1, sl
 8007626:	9907      	ldr	r1, [sp, #28]
 8007628:	ea5a 0a01 	orrs.w	sl, sl, r1
 800762c:	d120      	bne.n	8007670 <_dtoa_r+0x9d0>
 800762e:	2a00      	cmp	r2, #0
 8007630:	ddec      	ble.n	800760c <_dtoa_r+0x96c>
 8007632:	4629      	mov	r1, r5
 8007634:	2201      	movs	r2, #1
 8007636:	4630      	mov	r0, r6
 8007638:	9304      	str	r3, [sp, #16]
 800763a:	f000 fbad 	bl	8007d98 <__lshift>
 800763e:	4621      	mov	r1, r4
 8007640:	4605      	mov	r5, r0
 8007642:	f000 fc15 	bl	8007e70 <__mcmp>
 8007646:	2800      	cmp	r0, #0
 8007648:	9b04      	ldr	r3, [sp, #16]
 800764a:	dc02      	bgt.n	8007652 <_dtoa_r+0x9b2>
 800764c:	d1de      	bne.n	800760c <_dtoa_r+0x96c>
 800764e:	07da      	lsls	r2, r3, #31
 8007650:	d5dc      	bpl.n	800760c <_dtoa_r+0x96c>
 8007652:	2b39      	cmp	r3, #57	; 0x39
 8007654:	d1d8      	bne.n	8007608 <_dtoa_r+0x968>
 8007656:	9a02      	ldr	r2, [sp, #8]
 8007658:	2339      	movs	r3, #57	; 0x39
 800765a:	7013      	strb	r3, [r2, #0]
 800765c:	4643      	mov	r3, r8
 800765e:	4698      	mov	r8, r3
 8007660:	3b01      	subs	r3, #1
 8007662:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8007666:	2a39      	cmp	r2, #57	; 0x39
 8007668:	d051      	beq.n	800770e <_dtoa_r+0xa6e>
 800766a:	3201      	adds	r2, #1
 800766c:	701a      	strb	r2, [r3, #0]
 800766e:	e746      	b.n	80074fe <_dtoa_r+0x85e>
 8007670:	2a00      	cmp	r2, #0
 8007672:	dd03      	ble.n	800767c <_dtoa_r+0x9dc>
 8007674:	2b39      	cmp	r3, #57	; 0x39
 8007676:	d0ee      	beq.n	8007656 <_dtoa_r+0x9b6>
 8007678:	3301      	adds	r3, #1
 800767a:	e7c7      	b.n	800760c <_dtoa_r+0x96c>
 800767c:	9a04      	ldr	r2, [sp, #16]
 800767e:	9908      	ldr	r1, [sp, #32]
 8007680:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007684:	428a      	cmp	r2, r1
 8007686:	d02b      	beq.n	80076e0 <_dtoa_r+0xa40>
 8007688:	4629      	mov	r1, r5
 800768a:	2300      	movs	r3, #0
 800768c:	220a      	movs	r2, #10
 800768e:	4630      	mov	r0, r6
 8007690:	f000 f9d4 	bl	8007a3c <__multadd>
 8007694:	45b9      	cmp	r9, r7
 8007696:	4605      	mov	r5, r0
 8007698:	f04f 0300 	mov.w	r3, #0
 800769c:	f04f 020a 	mov.w	r2, #10
 80076a0:	4649      	mov	r1, r9
 80076a2:	4630      	mov	r0, r6
 80076a4:	d107      	bne.n	80076b6 <_dtoa_r+0xa16>
 80076a6:	f000 f9c9 	bl	8007a3c <__multadd>
 80076aa:	4681      	mov	r9, r0
 80076ac:	4607      	mov	r7, r0
 80076ae:	9b04      	ldr	r3, [sp, #16]
 80076b0:	3301      	adds	r3, #1
 80076b2:	9304      	str	r3, [sp, #16]
 80076b4:	e774      	b.n	80075a0 <_dtoa_r+0x900>
 80076b6:	f000 f9c1 	bl	8007a3c <__multadd>
 80076ba:	4639      	mov	r1, r7
 80076bc:	4681      	mov	r9, r0
 80076be:	2300      	movs	r3, #0
 80076c0:	220a      	movs	r2, #10
 80076c2:	4630      	mov	r0, r6
 80076c4:	f000 f9ba 	bl	8007a3c <__multadd>
 80076c8:	4607      	mov	r7, r0
 80076ca:	e7f0      	b.n	80076ae <_dtoa_r+0xa0e>
 80076cc:	f1ba 0f00 	cmp.w	sl, #0
 80076d0:	9a01      	ldr	r2, [sp, #4]
 80076d2:	bfcc      	ite	gt
 80076d4:	46d0      	movgt	r8, sl
 80076d6:	f04f 0801 	movle.w	r8, #1
 80076da:	4490      	add	r8, r2
 80076dc:	f04f 0900 	mov.w	r9, #0
 80076e0:	4629      	mov	r1, r5
 80076e2:	2201      	movs	r2, #1
 80076e4:	4630      	mov	r0, r6
 80076e6:	9302      	str	r3, [sp, #8]
 80076e8:	f000 fb56 	bl	8007d98 <__lshift>
 80076ec:	4621      	mov	r1, r4
 80076ee:	4605      	mov	r5, r0
 80076f0:	f000 fbbe 	bl	8007e70 <__mcmp>
 80076f4:	2800      	cmp	r0, #0
 80076f6:	dcb1      	bgt.n	800765c <_dtoa_r+0x9bc>
 80076f8:	d102      	bne.n	8007700 <_dtoa_r+0xa60>
 80076fa:	9b02      	ldr	r3, [sp, #8]
 80076fc:	07db      	lsls	r3, r3, #31
 80076fe:	d4ad      	bmi.n	800765c <_dtoa_r+0x9bc>
 8007700:	4643      	mov	r3, r8
 8007702:	4698      	mov	r8, r3
 8007704:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007708:	2a30      	cmp	r2, #48	; 0x30
 800770a:	d0fa      	beq.n	8007702 <_dtoa_r+0xa62>
 800770c:	e6f7      	b.n	80074fe <_dtoa_r+0x85e>
 800770e:	9a01      	ldr	r2, [sp, #4]
 8007710:	429a      	cmp	r2, r3
 8007712:	d1a4      	bne.n	800765e <_dtoa_r+0x9be>
 8007714:	f10b 0b01 	add.w	fp, fp, #1
 8007718:	2331      	movs	r3, #49	; 0x31
 800771a:	e778      	b.n	800760e <_dtoa_r+0x96e>
 800771c:	4b14      	ldr	r3, [pc, #80]	; (8007770 <_dtoa_r+0xad0>)
 800771e:	f7ff bb2a 	b.w	8006d76 <_dtoa_r+0xd6>
 8007722:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007724:	2b00      	cmp	r3, #0
 8007726:	f47f ab05 	bne.w	8006d34 <_dtoa_r+0x94>
 800772a:	4b12      	ldr	r3, [pc, #72]	; (8007774 <_dtoa_r+0xad4>)
 800772c:	f7ff bb23 	b.w	8006d76 <_dtoa_r+0xd6>
 8007730:	f1ba 0f00 	cmp.w	sl, #0
 8007734:	dc03      	bgt.n	800773e <_dtoa_r+0xa9e>
 8007736:	9b06      	ldr	r3, [sp, #24]
 8007738:	2b02      	cmp	r3, #2
 800773a:	f73f aec8 	bgt.w	80074ce <_dtoa_r+0x82e>
 800773e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007742:	4621      	mov	r1, r4
 8007744:	4628      	mov	r0, r5
 8007746:	f7ff fa20 	bl	8006b8a <quorem>
 800774a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800774e:	f808 3b01 	strb.w	r3, [r8], #1
 8007752:	9a01      	ldr	r2, [sp, #4]
 8007754:	eba8 0202 	sub.w	r2, r8, r2
 8007758:	4592      	cmp	sl, r2
 800775a:	ddb7      	ble.n	80076cc <_dtoa_r+0xa2c>
 800775c:	4629      	mov	r1, r5
 800775e:	2300      	movs	r3, #0
 8007760:	220a      	movs	r2, #10
 8007762:	4630      	mov	r0, r6
 8007764:	f000 f96a 	bl	8007a3c <__multadd>
 8007768:	4605      	mov	r5, r0
 800776a:	e7ea      	b.n	8007742 <_dtoa_r+0xaa2>
 800776c:	08008c3c 	.word	0x08008c3c
 8007770:	08008b9c 	.word	0x08008b9c
 8007774:	08008bc0 	.word	0x08008bc0

08007778 <_free_r>:
 8007778:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800777a:	2900      	cmp	r1, #0
 800777c:	d044      	beq.n	8007808 <_free_r+0x90>
 800777e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007782:	9001      	str	r0, [sp, #4]
 8007784:	2b00      	cmp	r3, #0
 8007786:	f1a1 0404 	sub.w	r4, r1, #4
 800778a:	bfb8      	it	lt
 800778c:	18e4      	addlt	r4, r4, r3
 800778e:	f000 f8e7 	bl	8007960 <__malloc_lock>
 8007792:	4a1e      	ldr	r2, [pc, #120]	; (800780c <_free_r+0x94>)
 8007794:	9801      	ldr	r0, [sp, #4]
 8007796:	6813      	ldr	r3, [r2, #0]
 8007798:	b933      	cbnz	r3, 80077a8 <_free_r+0x30>
 800779a:	6063      	str	r3, [r4, #4]
 800779c:	6014      	str	r4, [r2, #0]
 800779e:	b003      	add	sp, #12
 80077a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077a4:	f000 b8e2 	b.w	800796c <__malloc_unlock>
 80077a8:	42a3      	cmp	r3, r4
 80077aa:	d908      	bls.n	80077be <_free_r+0x46>
 80077ac:	6825      	ldr	r5, [r4, #0]
 80077ae:	1961      	adds	r1, r4, r5
 80077b0:	428b      	cmp	r3, r1
 80077b2:	bf01      	itttt	eq
 80077b4:	6819      	ldreq	r1, [r3, #0]
 80077b6:	685b      	ldreq	r3, [r3, #4]
 80077b8:	1949      	addeq	r1, r1, r5
 80077ba:	6021      	streq	r1, [r4, #0]
 80077bc:	e7ed      	b.n	800779a <_free_r+0x22>
 80077be:	461a      	mov	r2, r3
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	b10b      	cbz	r3, 80077c8 <_free_r+0x50>
 80077c4:	42a3      	cmp	r3, r4
 80077c6:	d9fa      	bls.n	80077be <_free_r+0x46>
 80077c8:	6811      	ldr	r1, [r2, #0]
 80077ca:	1855      	adds	r5, r2, r1
 80077cc:	42a5      	cmp	r5, r4
 80077ce:	d10b      	bne.n	80077e8 <_free_r+0x70>
 80077d0:	6824      	ldr	r4, [r4, #0]
 80077d2:	4421      	add	r1, r4
 80077d4:	1854      	adds	r4, r2, r1
 80077d6:	42a3      	cmp	r3, r4
 80077d8:	6011      	str	r1, [r2, #0]
 80077da:	d1e0      	bne.n	800779e <_free_r+0x26>
 80077dc:	681c      	ldr	r4, [r3, #0]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	6053      	str	r3, [r2, #4]
 80077e2:	440c      	add	r4, r1
 80077e4:	6014      	str	r4, [r2, #0]
 80077e6:	e7da      	b.n	800779e <_free_r+0x26>
 80077e8:	d902      	bls.n	80077f0 <_free_r+0x78>
 80077ea:	230c      	movs	r3, #12
 80077ec:	6003      	str	r3, [r0, #0]
 80077ee:	e7d6      	b.n	800779e <_free_r+0x26>
 80077f0:	6825      	ldr	r5, [r4, #0]
 80077f2:	1961      	adds	r1, r4, r5
 80077f4:	428b      	cmp	r3, r1
 80077f6:	bf04      	itt	eq
 80077f8:	6819      	ldreq	r1, [r3, #0]
 80077fa:	685b      	ldreq	r3, [r3, #4]
 80077fc:	6063      	str	r3, [r4, #4]
 80077fe:	bf04      	itt	eq
 8007800:	1949      	addeq	r1, r1, r5
 8007802:	6021      	streq	r1, [r4, #0]
 8007804:	6054      	str	r4, [r2, #4]
 8007806:	e7ca      	b.n	800779e <_free_r+0x26>
 8007808:	b003      	add	sp, #12
 800780a:	bd30      	pop	{r4, r5, pc}
 800780c:	2400047c 	.word	0x2400047c

08007810 <malloc>:
 8007810:	4b02      	ldr	r3, [pc, #8]	; (800781c <malloc+0xc>)
 8007812:	4601      	mov	r1, r0
 8007814:	6818      	ldr	r0, [r3, #0]
 8007816:	f000 b823 	b.w	8007860 <_malloc_r>
 800781a:	bf00      	nop
 800781c:	24000068 	.word	0x24000068

08007820 <sbrk_aligned>:
 8007820:	b570      	push	{r4, r5, r6, lr}
 8007822:	4e0e      	ldr	r6, [pc, #56]	; (800785c <sbrk_aligned+0x3c>)
 8007824:	460c      	mov	r4, r1
 8007826:	6831      	ldr	r1, [r6, #0]
 8007828:	4605      	mov	r5, r0
 800782a:	b911      	cbnz	r1, 8007832 <sbrk_aligned+0x12>
 800782c:	f001 f808 	bl	8008840 <_sbrk_r>
 8007830:	6030      	str	r0, [r6, #0]
 8007832:	4621      	mov	r1, r4
 8007834:	4628      	mov	r0, r5
 8007836:	f001 f803 	bl	8008840 <_sbrk_r>
 800783a:	1c43      	adds	r3, r0, #1
 800783c:	d00a      	beq.n	8007854 <sbrk_aligned+0x34>
 800783e:	1cc4      	adds	r4, r0, #3
 8007840:	f024 0403 	bic.w	r4, r4, #3
 8007844:	42a0      	cmp	r0, r4
 8007846:	d007      	beq.n	8007858 <sbrk_aligned+0x38>
 8007848:	1a21      	subs	r1, r4, r0
 800784a:	4628      	mov	r0, r5
 800784c:	f000 fff8 	bl	8008840 <_sbrk_r>
 8007850:	3001      	adds	r0, #1
 8007852:	d101      	bne.n	8007858 <sbrk_aligned+0x38>
 8007854:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007858:	4620      	mov	r0, r4
 800785a:	bd70      	pop	{r4, r5, r6, pc}
 800785c:	24000480 	.word	0x24000480

08007860 <_malloc_r>:
 8007860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007864:	1ccd      	adds	r5, r1, #3
 8007866:	f025 0503 	bic.w	r5, r5, #3
 800786a:	3508      	adds	r5, #8
 800786c:	2d0c      	cmp	r5, #12
 800786e:	bf38      	it	cc
 8007870:	250c      	movcc	r5, #12
 8007872:	2d00      	cmp	r5, #0
 8007874:	4607      	mov	r7, r0
 8007876:	db01      	blt.n	800787c <_malloc_r+0x1c>
 8007878:	42a9      	cmp	r1, r5
 800787a:	d905      	bls.n	8007888 <_malloc_r+0x28>
 800787c:	230c      	movs	r3, #12
 800787e:	603b      	str	r3, [r7, #0]
 8007880:	2600      	movs	r6, #0
 8007882:	4630      	mov	r0, r6
 8007884:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007888:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800795c <_malloc_r+0xfc>
 800788c:	f000 f868 	bl	8007960 <__malloc_lock>
 8007890:	f8d8 3000 	ldr.w	r3, [r8]
 8007894:	461c      	mov	r4, r3
 8007896:	bb5c      	cbnz	r4, 80078f0 <_malloc_r+0x90>
 8007898:	4629      	mov	r1, r5
 800789a:	4638      	mov	r0, r7
 800789c:	f7ff ffc0 	bl	8007820 <sbrk_aligned>
 80078a0:	1c43      	adds	r3, r0, #1
 80078a2:	4604      	mov	r4, r0
 80078a4:	d155      	bne.n	8007952 <_malloc_r+0xf2>
 80078a6:	f8d8 4000 	ldr.w	r4, [r8]
 80078aa:	4626      	mov	r6, r4
 80078ac:	2e00      	cmp	r6, #0
 80078ae:	d145      	bne.n	800793c <_malloc_r+0xdc>
 80078b0:	2c00      	cmp	r4, #0
 80078b2:	d048      	beq.n	8007946 <_malloc_r+0xe6>
 80078b4:	6823      	ldr	r3, [r4, #0]
 80078b6:	4631      	mov	r1, r6
 80078b8:	4638      	mov	r0, r7
 80078ba:	eb04 0903 	add.w	r9, r4, r3
 80078be:	f000 ffbf 	bl	8008840 <_sbrk_r>
 80078c2:	4581      	cmp	r9, r0
 80078c4:	d13f      	bne.n	8007946 <_malloc_r+0xe6>
 80078c6:	6821      	ldr	r1, [r4, #0]
 80078c8:	1a6d      	subs	r5, r5, r1
 80078ca:	4629      	mov	r1, r5
 80078cc:	4638      	mov	r0, r7
 80078ce:	f7ff ffa7 	bl	8007820 <sbrk_aligned>
 80078d2:	3001      	adds	r0, #1
 80078d4:	d037      	beq.n	8007946 <_malloc_r+0xe6>
 80078d6:	6823      	ldr	r3, [r4, #0]
 80078d8:	442b      	add	r3, r5
 80078da:	6023      	str	r3, [r4, #0]
 80078dc:	f8d8 3000 	ldr.w	r3, [r8]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d038      	beq.n	8007956 <_malloc_r+0xf6>
 80078e4:	685a      	ldr	r2, [r3, #4]
 80078e6:	42a2      	cmp	r2, r4
 80078e8:	d12b      	bne.n	8007942 <_malloc_r+0xe2>
 80078ea:	2200      	movs	r2, #0
 80078ec:	605a      	str	r2, [r3, #4]
 80078ee:	e00f      	b.n	8007910 <_malloc_r+0xb0>
 80078f0:	6822      	ldr	r2, [r4, #0]
 80078f2:	1b52      	subs	r2, r2, r5
 80078f4:	d41f      	bmi.n	8007936 <_malloc_r+0xd6>
 80078f6:	2a0b      	cmp	r2, #11
 80078f8:	d917      	bls.n	800792a <_malloc_r+0xca>
 80078fa:	1961      	adds	r1, r4, r5
 80078fc:	42a3      	cmp	r3, r4
 80078fe:	6025      	str	r5, [r4, #0]
 8007900:	bf18      	it	ne
 8007902:	6059      	strne	r1, [r3, #4]
 8007904:	6863      	ldr	r3, [r4, #4]
 8007906:	bf08      	it	eq
 8007908:	f8c8 1000 	streq.w	r1, [r8]
 800790c:	5162      	str	r2, [r4, r5]
 800790e:	604b      	str	r3, [r1, #4]
 8007910:	4638      	mov	r0, r7
 8007912:	f104 060b 	add.w	r6, r4, #11
 8007916:	f000 f829 	bl	800796c <__malloc_unlock>
 800791a:	f026 0607 	bic.w	r6, r6, #7
 800791e:	1d23      	adds	r3, r4, #4
 8007920:	1af2      	subs	r2, r6, r3
 8007922:	d0ae      	beq.n	8007882 <_malloc_r+0x22>
 8007924:	1b9b      	subs	r3, r3, r6
 8007926:	50a3      	str	r3, [r4, r2]
 8007928:	e7ab      	b.n	8007882 <_malloc_r+0x22>
 800792a:	42a3      	cmp	r3, r4
 800792c:	6862      	ldr	r2, [r4, #4]
 800792e:	d1dd      	bne.n	80078ec <_malloc_r+0x8c>
 8007930:	f8c8 2000 	str.w	r2, [r8]
 8007934:	e7ec      	b.n	8007910 <_malloc_r+0xb0>
 8007936:	4623      	mov	r3, r4
 8007938:	6864      	ldr	r4, [r4, #4]
 800793a:	e7ac      	b.n	8007896 <_malloc_r+0x36>
 800793c:	4634      	mov	r4, r6
 800793e:	6876      	ldr	r6, [r6, #4]
 8007940:	e7b4      	b.n	80078ac <_malloc_r+0x4c>
 8007942:	4613      	mov	r3, r2
 8007944:	e7cc      	b.n	80078e0 <_malloc_r+0x80>
 8007946:	230c      	movs	r3, #12
 8007948:	603b      	str	r3, [r7, #0]
 800794a:	4638      	mov	r0, r7
 800794c:	f000 f80e 	bl	800796c <__malloc_unlock>
 8007950:	e797      	b.n	8007882 <_malloc_r+0x22>
 8007952:	6025      	str	r5, [r4, #0]
 8007954:	e7dc      	b.n	8007910 <_malloc_r+0xb0>
 8007956:	605b      	str	r3, [r3, #4]
 8007958:	deff      	udf	#255	; 0xff
 800795a:	bf00      	nop
 800795c:	2400047c 	.word	0x2400047c

08007960 <__malloc_lock>:
 8007960:	4801      	ldr	r0, [pc, #4]	; (8007968 <__malloc_lock+0x8>)
 8007962:	f7ff b902 	b.w	8006b6a <__retarget_lock_acquire_recursive>
 8007966:	bf00      	nop
 8007968:	24000478 	.word	0x24000478

0800796c <__malloc_unlock>:
 800796c:	4801      	ldr	r0, [pc, #4]	; (8007974 <__malloc_unlock+0x8>)
 800796e:	f7ff b8fd 	b.w	8006b6c <__retarget_lock_release_recursive>
 8007972:	bf00      	nop
 8007974:	24000478 	.word	0x24000478

08007978 <_Balloc>:
 8007978:	b570      	push	{r4, r5, r6, lr}
 800797a:	69c6      	ldr	r6, [r0, #28]
 800797c:	4604      	mov	r4, r0
 800797e:	460d      	mov	r5, r1
 8007980:	b976      	cbnz	r6, 80079a0 <_Balloc+0x28>
 8007982:	2010      	movs	r0, #16
 8007984:	f7ff ff44 	bl	8007810 <malloc>
 8007988:	4602      	mov	r2, r0
 800798a:	61e0      	str	r0, [r4, #28]
 800798c:	b920      	cbnz	r0, 8007998 <_Balloc+0x20>
 800798e:	4b18      	ldr	r3, [pc, #96]	; (80079f0 <_Balloc+0x78>)
 8007990:	4818      	ldr	r0, [pc, #96]	; (80079f4 <_Balloc+0x7c>)
 8007992:	216b      	movs	r1, #107	; 0x6b
 8007994:	f000 ff64 	bl	8008860 <__assert_func>
 8007998:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800799c:	6006      	str	r6, [r0, #0]
 800799e:	60c6      	str	r6, [r0, #12]
 80079a0:	69e6      	ldr	r6, [r4, #28]
 80079a2:	68f3      	ldr	r3, [r6, #12]
 80079a4:	b183      	cbz	r3, 80079c8 <_Balloc+0x50>
 80079a6:	69e3      	ldr	r3, [r4, #28]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80079ae:	b9b8      	cbnz	r0, 80079e0 <_Balloc+0x68>
 80079b0:	2101      	movs	r1, #1
 80079b2:	fa01 f605 	lsl.w	r6, r1, r5
 80079b6:	1d72      	adds	r2, r6, #5
 80079b8:	0092      	lsls	r2, r2, #2
 80079ba:	4620      	mov	r0, r4
 80079bc:	f000 ff6e 	bl	800889c <_calloc_r>
 80079c0:	b160      	cbz	r0, 80079dc <_Balloc+0x64>
 80079c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80079c6:	e00e      	b.n	80079e6 <_Balloc+0x6e>
 80079c8:	2221      	movs	r2, #33	; 0x21
 80079ca:	2104      	movs	r1, #4
 80079cc:	4620      	mov	r0, r4
 80079ce:	f000 ff65 	bl	800889c <_calloc_r>
 80079d2:	69e3      	ldr	r3, [r4, #28]
 80079d4:	60f0      	str	r0, [r6, #12]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d1e4      	bne.n	80079a6 <_Balloc+0x2e>
 80079dc:	2000      	movs	r0, #0
 80079de:	bd70      	pop	{r4, r5, r6, pc}
 80079e0:	6802      	ldr	r2, [r0, #0]
 80079e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80079e6:	2300      	movs	r3, #0
 80079e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80079ec:	e7f7      	b.n	80079de <_Balloc+0x66>
 80079ee:	bf00      	nop
 80079f0:	08008bcd 	.word	0x08008bcd
 80079f4:	08008c4d 	.word	0x08008c4d

080079f8 <_Bfree>:
 80079f8:	b570      	push	{r4, r5, r6, lr}
 80079fa:	69c6      	ldr	r6, [r0, #28]
 80079fc:	4605      	mov	r5, r0
 80079fe:	460c      	mov	r4, r1
 8007a00:	b976      	cbnz	r6, 8007a20 <_Bfree+0x28>
 8007a02:	2010      	movs	r0, #16
 8007a04:	f7ff ff04 	bl	8007810 <malloc>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	61e8      	str	r0, [r5, #28]
 8007a0c:	b920      	cbnz	r0, 8007a18 <_Bfree+0x20>
 8007a0e:	4b09      	ldr	r3, [pc, #36]	; (8007a34 <_Bfree+0x3c>)
 8007a10:	4809      	ldr	r0, [pc, #36]	; (8007a38 <_Bfree+0x40>)
 8007a12:	218f      	movs	r1, #143	; 0x8f
 8007a14:	f000 ff24 	bl	8008860 <__assert_func>
 8007a18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a1c:	6006      	str	r6, [r0, #0]
 8007a1e:	60c6      	str	r6, [r0, #12]
 8007a20:	b13c      	cbz	r4, 8007a32 <_Bfree+0x3a>
 8007a22:	69eb      	ldr	r3, [r5, #28]
 8007a24:	6862      	ldr	r2, [r4, #4]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a2c:	6021      	str	r1, [r4, #0]
 8007a2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007a32:	bd70      	pop	{r4, r5, r6, pc}
 8007a34:	08008bcd 	.word	0x08008bcd
 8007a38:	08008c4d 	.word	0x08008c4d

08007a3c <__multadd>:
 8007a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a40:	690d      	ldr	r5, [r1, #16]
 8007a42:	4607      	mov	r7, r0
 8007a44:	460c      	mov	r4, r1
 8007a46:	461e      	mov	r6, r3
 8007a48:	f101 0c14 	add.w	ip, r1, #20
 8007a4c:	2000      	movs	r0, #0
 8007a4e:	f8dc 3000 	ldr.w	r3, [ip]
 8007a52:	b299      	uxth	r1, r3
 8007a54:	fb02 6101 	mla	r1, r2, r1, r6
 8007a58:	0c1e      	lsrs	r6, r3, #16
 8007a5a:	0c0b      	lsrs	r3, r1, #16
 8007a5c:	fb02 3306 	mla	r3, r2, r6, r3
 8007a60:	b289      	uxth	r1, r1
 8007a62:	3001      	adds	r0, #1
 8007a64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007a68:	4285      	cmp	r5, r0
 8007a6a:	f84c 1b04 	str.w	r1, [ip], #4
 8007a6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007a72:	dcec      	bgt.n	8007a4e <__multadd+0x12>
 8007a74:	b30e      	cbz	r6, 8007aba <__multadd+0x7e>
 8007a76:	68a3      	ldr	r3, [r4, #8]
 8007a78:	42ab      	cmp	r3, r5
 8007a7a:	dc19      	bgt.n	8007ab0 <__multadd+0x74>
 8007a7c:	6861      	ldr	r1, [r4, #4]
 8007a7e:	4638      	mov	r0, r7
 8007a80:	3101      	adds	r1, #1
 8007a82:	f7ff ff79 	bl	8007978 <_Balloc>
 8007a86:	4680      	mov	r8, r0
 8007a88:	b928      	cbnz	r0, 8007a96 <__multadd+0x5a>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	4b0c      	ldr	r3, [pc, #48]	; (8007ac0 <__multadd+0x84>)
 8007a8e:	480d      	ldr	r0, [pc, #52]	; (8007ac4 <__multadd+0x88>)
 8007a90:	21ba      	movs	r1, #186	; 0xba
 8007a92:	f000 fee5 	bl	8008860 <__assert_func>
 8007a96:	6922      	ldr	r2, [r4, #16]
 8007a98:	3202      	adds	r2, #2
 8007a9a:	f104 010c 	add.w	r1, r4, #12
 8007a9e:	0092      	lsls	r2, r2, #2
 8007aa0:	300c      	adds	r0, #12
 8007aa2:	f7ff f864 	bl	8006b6e <memcpy>
 8007aa6:	4621      	mov	r1, r4
 8007aa8:	4638      	mov	r0, r7
 8007aaa:	f7ff ffa5 	bl	80079f8 <_Bfree>
 8007aae:	4644      	mov	r4, r8
 8007ab0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ab4:	3501      	adds	r5, #1
 8007ab6:	615e      	str	r6, [r3, #20]
 8007ab8:	6125      	str	r5, [r4, #16]
 8007aba:	4620      	mov	r0, r4
 8007abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ac0:	08008c3c 	.word	0x08008c3c
 8007ac4:	08008c4d 	.word	0x08008c4d

08007ac8 <__hi0bits>:
 8007ac8:	0c03      	lsrs	r3, r0, #16
 8007aca:	041b      	lsls	r3, r3, #16
 8007acc:	b9d3      	cbnz	r3, 8007b04 <__hi0bits+0x3c>
 8007ace:	0400      	lsls	r0, r0, #16
 8007ad0:	2310      	movs	r3, #16
 8007ad2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007ad6:	bf04      	itt	eq
 8007ad8:	0200      	lsleq	r0, r0, #8
 8007ada:	3308      	addeq	r3, #8
 8007adc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007ae0:	bf04      	itt	eq
 8007ae2:	0100      	lsleq	r0, r0, #4
 8007ae4:	3304      	addeq	r3, #4
 8007ae6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007aea:	bf04      	itt	eq
 8007aec:	0080      	lsleq	r0, r0, #2
 8007aee:	3302      	addeq	r3, #2
 8007af0:	2800      	cmp	r0, #0
 8007af2:	db05      	blt.n	8007b00 <__hi0bits+0x38>
 8007af4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007af8:	f103 0301 	add.w	r3, r3, #1
 8007afc:	bf08      	it	eq
 8007afe:	2320      	moveq	r3, #32
 8007b00:	4618      	mov	r0, r3
 8007b02:	4770      	bx	lr
 8007b04:	2300      	movs	r3, #0
 8007b06:	e7e4      	b.n	8007ad2 <__hi0bits+0xa>

08007b08 <__lo0bits>:
 8007b08:	6803      	ldr	r3, [r0, #0]
 8007b0a:	f013 0207 	ands.w	r2, r3, #7
 8007b0e:	d00c      	beq.n	8007b2a <__lo0bits+0x22>
 8007b10:	07d9      	lsls	r1, r3, #31
 8007b12:	d422      	bmi.n	8007b5a <__lo0bits+0x52>
 8007b14:	079a      	lsls	r2, r3, #30
 8007b16:	bf49      	itett	mi
 8007b18:	085b      	lsrmi	r3, r3, #1
 8007b1a:	089b      	lsrpl	r3, r3, #2
 8007b1c:	6003      	strmi	r3, [r0, #0]
 8007b1e:	2201      	movmi	r2, #1
 8007b20:	bf5c      	itt	pl
 8007b22:	6003      	strpl	r3, [r0, #0]
 8007b24:	2202      	movpl	r2, #2
 8007b26:	4610      	mov	r0, r2
 8007b28:	4770      	bx	lr
 8007b2a:	b299      	uxth	r1, r3
 8007b2c:	b909      	cbnz	r1, 8007b32 <__lo0bits+0x2a>
 8007b2e:	0c1b      	lsrs	r3, r3, #16
 8007b30:	2210      	movs	r2, #16
 8007b32:	b2d9      	uxtb	r1, r3
 8007b34:	b909      	cbnz	r1, 8007b3a <__lo0bits+0x32>
 8007b36:	3208      	adds	r2, #8
 8007b38:	0a1b      	lsrs	r3, r3, #8
 8007b3a:	0719      	lsls	r1, r3, #28
 8007b3c:	bf04      	itt	eq
 8007b3e:	091b      	lsreq	r3, r3, #4
 8007b40:	3204      	addeq	r2, #4
 8007b42:	0799      	lsls	r1, r3, #30
 8007b44:	bf04      	itt	eq
 8007b46:	089b      	lsreq	r3, r3, #2
 8007b48:	3202      	addeq	r2, #2
 8007b4a:	07d9      	lsls	r1, r3, #31
 8007b4c:	d403      	bmi.n	8007b56 <__lo0bits+0x4e>
 8007b4e:	085b      	lsrs	r3, r3, #1
 8007b50:	f102 0201 	add.w	r2, r2, #1
 8007b54:	d003      	beq.n	8007b5e <__lo0bits+0x56>
 8007b56:	6003      	str	r3, [r0, #0]
 8007b58:	e7e5      	b.n	8007b26 <__lo0bits+0x1e>
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	e7e3      	b.n	8007b26 <__lo0bits+0x1e>
 8007b5e:	2220      	movs	r2, #32
 8007b60:	e7e1      	b.n	8007b26 <__lo0bits+0x1e>
	...

08007b64 <__i2b>:
 8007b64:	b510      	push	{r4, lr}
 8007b66:	460c      	mov	r4, r1
 8007b68:	2101      	movs	r1, #1
 8007b6a:	f7ff ff05 	bl	8007978 <_Balloc>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	b928      	cbnz	r0, 8007b7e <__i2b+0x1a>
 8007b72:	4b05      	ldr	r3, [pc, #20]	; (8007b88 <__i2b+0x24>)
 8007b74:	4805      	ldr	r0, [pc, #20]	; (8007b8c <__i2b+0x28>)
 8007b76:	f240 1145 	movw	r1, #325	; 0x145
 8007b7a:	f000 fe71 	bl	8008860 <__assert_func>
 8007b7e:	2301      	movs	r3, #1
 8007b80:	6144      	str	r4, [r0, #20]
 8007b82:	6103      	str	r3, [r0, #16]
 8007b84:	bd10      	pop	{r4, pc}
 8007b86:	bf00      	nop
 8007b88:	08008c3c 	.word	0x08008c3c
 8007b8c:	08008c4d 	.word	0x08008c4d

08007b90 <__multiply>:
 8007b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b94:	4691      	mov	r9, r2
 8007b96:	690a      	ldr	r2, [r1, #16]
 8007b98:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	bfb8      	it	lt
 8007ba0:	460b      	movlt	r3, r1
 8007ba2:	460c      	mov	r4, r1
 8007ba4:	bfbc      	itt	lt
 8007ba6:	464c      	movlt	r4, r9
 8007ba8:	4699      	movlt	r9, r3
 8007baa:	6927      	ldr	r7, [r4, #16]
 8007bac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007bb0:	68a3      	ldr	r3, [r4, #8]
 8007bb2:	6861      	ldr	r1, [r4, #4]
 8007bb4:	eb07 060a 	add.w	r6, r7, sl
 8007bb8:	42b3      	cmp	r3, r6
 8007bba:	b085      	sub	sp, #20
 8007bbc:	bfb8      	it	lt
 8007bbe:	3101      	addlt	r1, #1
 8007bc0:	f7ff feda 	bl	8007978 <_Balloc>
 8007bc4:	b930      	cbnz	r0, 8007bd4 <__multiply+0x44>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	4b44      	ldr	r3, [pc, #272]	; (8007cdc <__multiply+0x14c>)
 8007bca:	4845      	ldr	r0, [pc, #276]	; (8007ce0 <__multiply+0x150>)
 8007bcc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007bd0:	f000 fe46 	bl	8008860 <__assert_func>
 8007bd4:	f100 0514 	add.w	r5, r0, #20
 8007bd8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007bdc:	462b      	mov	r3, r5
 8007bde:	2200      	movs	r2, #0
 8007be0:	4543      	cmp	r3, r8
 8007be2:	d321      	bcc.n	8007c28 <__multiply+0x98>
 8007be4:	f104 0314 	add.w	r3, r4, #20
 8007be8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007bec:	f109 0314 	add.w	r3, r9, #20
 8007bf0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007bf4:	9202      	str	r2, [sp, #8]
 8007bf6:	1b3a      	subs	r2, r7, r4
 8007bf8:	3a15      	subs	r2, #21
 8007bfa:	f022 0203 	bic.w	r2, r2, #3
 8007bfe:	3204      	adds	r2, #4
 8007c00:	f104 0115 	add.w	r1, r4, #21
 8007c04:	428f      	cmp	r7, r1
 8007c06:	bf38      	it	cc
 8007c08:	2204      	movcc	r2, #4
 8007c0a:	9201      	str	r2, [sp, #4]
 8007c0c:	9a02      	ldr	r2, [sp, #8]
 8007c0e:	9303      	str	r3, [sp, #12]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d80c      	bhi.n	8007c2e <__multiply+0x9e>
 8007c14:	2e00      	cmp	r6, #0
 8007c16:	dd03      	ble.n	8007c20 <__multiply+0x90>
 8007c18:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d05b      	beq.n	8007cd8 <__multiply+0x148>
 8007c20:	6106      	str	r6, [r0, #16]
 8007c22:	b005      	add	sp, #20
 8007c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c28:	f843 2b04 	str.w	r2, [r3], #4
 8007c2c:	e7d8      	b.n	8007be0 <__multiply+0x50>
 8007c2e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007c32:	f1ba 0f00 	cmp.w	sl, #0
 8007c36:	d024      	beq.n	8007c82 <__multiply+0xf2>
 8007c38:	f104 0e14 	add.w	lr, r4, #20
 8007c3c:	46a9      	mov	r9, r5
 8007c3e:	f04f 0c00 	mov.w	ip, #0
 8007c42:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007c46:	f8d9 1000 	ldr.w	r1, [r9]
 8007c4a:	fa1f fb82 	uxth.w	fp, r2
 8007c4e:	b289      	uxth	r1, r1
 8007c50:	fb0a 110b 	mla	r1, sl, fp, r1
 8007c54:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007c58:	f8d9 2000 	ldr.w	r2, [r9]
 8007c5c:	4461      	add	r1, ip
 8007c5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007c62:	fb0a c20b 	mla	r2, sl, fp, ip
 8007c66:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007c6a:	b289      	uxth	r1, r1
 8007c6c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007c70:	4577      	cmp	r7, lr
 8007c72:	f849 1b04 	str.w	r1, [r9], #4
 8007c76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007c7a:	d8e2      	bhi.n	8007c42 <__multiply+0xb2>
 8007c7c:	9a01      	ldr	r2, [sp, #4]
 8007c7e:	f845 c002 	str.w	ip, [r5, r2]
 8007c82:	9a03      	ldr	r2, [sp, #12]
 8007c84:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007c88:	3304      	adds	r3, #4
 8007c8a:	f1b9 0f00 	cmp.w	r9, #0
 8007c8e:	d021      	beq.n	8007cd4 <__multiply+0x144>
 8007c90:	6829      	ldr	r1, [r5, #0]
 8007c92:	f104 0c14 	add.w	ip, r4, #20
 8007c96:	46ae      	mov	lr, r5
 8007c98:	f04f 0a00 	mov.w	sl, #0
 8007c9c:	f8bc b000 	ldrh.w	fp, [ip]
 8007ca0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007ca4:	fb09 220b 	mla	r2, r9, fp, r2
 8007ca8:	4452      	add	r2, sl
 8007caa:	b289      	uxth	r1, r1
 8007cac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007cb0:	f84e 1b04 	str.w	r1, [lr], #4
 8007cb4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007cb8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007cbc:	f8be 1000 	ldrh.w	r1, [lr]
 8007cc0:	fb09 110a 	mla	r1, r9, sl, r1
 8007cc4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007cc8:	4567      	cmp	r7, ip
 8007cca:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007cce:	d8e5      	bhi.n	8007c9c <__multiply+0x10c>
 8007cd0:	9a01      	ldr	r2, [sp, #4]
 8007cd2:	50a9      	str	r1, [r5, r2]
 8007cd4:	3504      	adds	r5, #4
 8007cd6:	e799      	b.n	8007c0c <__multiply+0x7c>
 8007cd8:	3e01      	subs	r6, #1
 8007cda:	e79b      	b.n	8007c14 <__multiply+0x84>
 8007cdc:	08008c3c 	.word	0x08008c3c
 8007ce0:	08008c4d 	.word	0x08008c4d

08007ce4 <__pow5mult>:
 8007ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ce8:	4615      	mov	r5, r2
 8007cea:	f012 0203 	ands.w	r2, r2, #3
 8007cee:	4606      	mov	r6, r0
 8007cf0:	460f      	mov	r7, r1
 8007cf2:	d007      	beq.n	8007d04 <__pow5mult+0x20>
 8007cf4:	4c25      	ldr	r4, [pc, #148]	; (8007d8c <__pow5mult+0xa8>)
 8007cf6:	3a01      	subs	r2, #1
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007cfe:	f7ff fe9d 	bl	8007a3c <__multadd>
 8007d02:	4607      	mov	r7, r0
 8007d04:	10ad      	asrs	r5, r5, #2
 8007d06:	d03d      	beq.n	8007d84 <__pow5mult+0xa0>
 8007d08:	69f4      	ldr	r4, [r6, #28]
 8007d0a:	b97c      	cbnz	r4, 8007d2c <__pow5mult+0x48>
 8007d0c:	2010      	movs	r0, #16
 8007d0e:	f7ff fd7f 	bl	8007810 <malloc>
 8007d12:	4602      	mov	r2, r0
 8007d14:	61f0      	str	r0, [r6, #28]
 8007d16:	b928      	cbnz	r0, 8007d24 <__pow5mult+0x40>
 8007d18:	4b1d      	ldr	r3, [pc, #116]	; (8007d90 <__pow5mult+0xac>)
 8007d1a:	481e      	ldr	r0, [pc, #120]	; (8007d94 <__pow5mult+0xb0>)
 8007d1c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007d20:	f000 fd9e 	bl	8008860 <__assert_func>
 8007d24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d28:	6004      	str	r4, [r0, #0]
 8007d2a:	60c4      	str	r4, [r0, #12]
 8007d2c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007d30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d34:	b94c      	cbnz	r4, 8007d4a <__pow5mult+0x66>
 8007d36:	f240 2171 	movw	r1, #625	; 0x271
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	f7ff ff12 	bl	8007b64 <__i2b>
 8007d40:	2300      	movs	r3, #0
 8007d42:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d46:	4604      	mov	r4, r0
 8007d48:	6003      	str	r3, [r0, #0]
 8007d4a:	f04f 0900 	mov.w	r9, #0
 8007d4e:	07eb      	lsls	r3, r5, #31
 8007d50:	d50a      	bpl.n	8007d68 <__pow5mult+0x84>
 8007d52:	4639      	mov	r1, r7
 8007d54:	4622      	mov	r2, r4
 8007d56:	4630      	mov	r0, r6
 8007d58:	f7ff ff1a 	bl	8007b90 <__multiply>
 8007d5c:	4639      	mov	r1, r7
 8007d5e:	4680      	mov	r8, r0
 8007d60:	4630      	mov	r0, r6
 8007d62:	f7ff fe49 	bl	80079f8 <_Bfree>
 8007d66:	4647      	mov	r7, r8
 8007d68:	106d      	asrs	r5, r5, #1
 8007d6a:	d00b      	beq.n	8007d84 <__pow5mult+0xa0>
 8007d6c:	6820      	ldr	r0, [r4, #0]
 8007d6e:	b938      	cbnz	r0, 8007d80 <__pow5mult+0x9c>
 8007d70:	4622      	mov	r2, r4
 8007d72:	4621      	mov	r1, r4
 8007d74:	4630      	mov	r0, r6
 8007d76:	f7ff ff0b 	bl	8007b90 <__multiply>
 8007d7a:	6020      	str	r0, [r4, #0]
 8007d7c:	f8c0 9000 	str.w	r9, [r0]
 8007d80:	4604      	mov	r4, r0
 8007d82:	e7e4      	b.n	8007d4e <__pow5mult+0x6a>
 8007d84:	4638      	mov	r0, r7
 8007d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d8a:	bf00      	nop
 8007d8c:	08008d98 	.word	0x08008d98
 8007d90:	08008bcd 	.word	0x08008bcd
 8007d94:	08008c4d 	.word	0x08008c4d

08007d98 <__lshift>:
 8007d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d9c:	460c      	mov	r4, r1
 8007d9e:	6849      	ldr	r1, [r1, #4]
 8007da0:	6923      	ldr	r3, [r4, #16]
 8007da2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007da6:	68a3      	ldr	r3, [r4, #8]
 8007da8:	4607      	mov	r7, r0
 8007daa:	4691      	mov	r9, r2
 8007dac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007db0:	f108 0601 	add.w	r6, r8, #1
 8007db4:	42b3      	cmp	r3, r6
 8007db6:	db0b      	blt.n	8007dd0 <__lshift+0x38>
 8007db8:	4638      	mov	r0, r7
 8007dba:	f7ff fddd 	bl	8007978 <_Balloc>
 8007dbe:	4605      	mov	r5, r0
 8007dc0:	b948      	cbnz	r0, 8007dd6 <__lshift+0x3e>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	4b28      	ldr	r3, [pc, #160]	; (8007e68 <__lshift+0xd0>)
 8007dc6:	4829      	ldr	r0, [pc, #164]	; (8007e6c <__lshift+0xd4>)
 8007dc8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007dcc:	f000 fd48 	bl	8008860 <__assert_func>
 8007dd0:	3101      	adds	r1, #1
 8007dd2:	005b      	lsls	r3, r3, #1
 8007dd4:	e7ee      	b.n	8007db4 <__lshift+0x1c>
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	f100 0114 	add.w	r1, r0, #20
 8007ddc:	f100 0210 	add.w	r2, r0, #16
 8007de0:	4618      	mov	r0, r3
 8007de2:	4553      	cmp	r3, sl
 8007de4:	db33      	blt.n	8007e4e <__lshift+0xb6>
 8007de6:	6920      	ldr	r0, [r4, #16]
 8007de8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007dec:	f104 0314 	add.w	r3, r4, #20
 8007df0:	f019 091f 	ands.w	r9, r9, #31
 8007df4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007df8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007dfc:	d02b      	beq.n	8007e56 <__lshift+0xbe>
 8007dfe:	f1c9 0e20 	rsb	lr, r9, #32
 8007e02:	468a      	mov	sl, r1
 8007e04:	2200      	movs	r2, #0
 8007e06:	6818      	ldr	r0, [r3, #0]
 8007e08:	fa00 f009 	lsl.w	r0, r0, r9
 8007e0c:	4310      	orrs	r0, r2
 8007e0e:	f84a 0b04 	str.w	r0, [sl], #4
 8007e12:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e16:	459c      	cmp	ip, r3
 8007e18:	fa22 f20e 	lsr.w	r2, r2, lr
 8007e1c:	d8f3      	bhi.n	8007e06 <__lshift+0x6e>
 8007e1e:	ebac 0304 	sub.w	r3, ip, r4
 8007e22:	3b15      	subs	r3, #21
 8007e24:	f023 0303 	bic.w	r3, r3, #3
 8007e28:	3304      	adds	r3, #4
 8007e2a:	f104 0015 	add.w	r0, r4, #21
 8007e2e:	4584      	cmp	ip, r0
 8007e30:	bf38      	it	cc
 8007e32:	2304      	movcc	r3, #4
 8007e34:	50ca      	str	r2, [r1, r3]
 8007e36:	b10a      	cbz	r2, 8007e3c <__lshift+0xa4>
 8007e38:	f108 0602 	add.w	r6, r8, #2
 8007e3c:	3e01      	subs	r6, #1
 8007e3e:	4638      	mov	r0, r7
 8007e40:	612e      	str	r6, [r5, #16]
 8007e42:	4621      	mov	r1, r4
 8007e44:	f7ff fdd8 	bl	80079f8 <_Bfree>
 8007e48:	4628      	mov	r0, r5
 8007e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e4e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007e52:	3301      	adds	r3, #1
 8007e54:	e7c5      	b.n	8007de2 <__lshift+0x4a>
 8007e56:	3904      	subs	r1, #4
 8007e58:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e5c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e60:	459c      	cmp	ip, r3
 8007e62:	d8f9      	bhi.n	8007e58 <__lshift+0xc0>
 8007e64:	e7ea      	b.n	8007e3c <__lshift+0xa4>
 8007e66:	bf00      	nop
 8007e68:	08008c3c 	.word	0x08008c3c
 8007e6c:	08008c4d 	.word	0x08008c4d

08007e70 <__mcmp>:
 8007e70:	b530      	push	{r4, r5, lr}
 8007e72:	6902      	ldr	r2, [r0, #16]
 8007e74:	690c      	ldr	r4, [r1, #16]
 8007e76:	1b12      	subs	r2, r2, r4
 8007e78:	d10e      	bne.n	8007e98 <__mcmp+0x28>
 8007e7a:	f100 0314 	add.w	r3, r0, #20
 8007e7e:	3114      	adds	r1, #20
 8007e80:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007e84:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007e88:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007e8c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007e90:	42a5      	cmp	r5, r4
 8007e92:	d003      	beq.n	8007e9c <__mcmp+0x2c>
 8007e94:	d305      	bcc.n	8007ea2 <__mcmp+0x32>
 8007e96:	2201      	movs	r2, #1
 8007e98:	4610      	mov	r0, r2
 8007e9a:	bd30      	pop	{r4, r5, pc}
 8007e9c:	4283      	cmp	r3, r0
 8007e9e:	d3f3      	bcc.n	8007e88 <__mcmp+0x18>
 8007ea0:	e7fa      	b.n	8007e98 <__mcmp+0x28>
 8007ea2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ea6:	e7f7      	b.n	8007e98 <__mcmp+0x28>

08007ea8 <__mdiff>:
 8007ea8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eac:	460c      	mov	r4, r1
 8007eae:	4606      	mov	r6, r0
 8007eb0:	4611      	mov	r1, r2
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	4690      	mov	r8, r2
 8007eb6:	f7ff ffdb 	bl	8007e70 <__mcmp>
 8007eba:	1e05      	subs	r5, r0, #0
 8007ebc:	d110      	bne.n	8007ee0 <__mdiff+0x38>
 8007ebe:	4629      	mov	r1, r5
 8007ec0:	4630      	mov	r0, r6
 8007ec2:	f7ff fd59 	bl	8007978 <_Balloc>
 8007ec6:	b930      	cbnz	r0, 8007ed6 <__mdiff+0x2e>
 8007ec8:	4b3a      	ldr	r3, [pc, #232]	; (8007fb4 <__mdiff+0x10c>)
 8007eca:	4602      	mov	r2, r0
 8007ecc:	f240 2137 	movw	r1, #567	; 0x237
 8007ed0:	4839      	ldr	r0, [pc, #228]	; (8007fb8 <__mdiff+0x110>)
 8007ed2:	f000 fcc5 	bl	8008860 <__assert_func>
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007edc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee0:	bfa4      	itt	ge
 8007ee2:	4643      	movge	r3, r8
 8007ee4:	46a0      	movge	r8, r4
 8007ee6:	4630      	mov	r0, r6
 8007ee8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007eec:	bfa6      	itte	ge
 8007eee:	461c      	movge	r4, r3
 8007ef0:	2500      	movge	r5, #0
 8007ef2:	2501      	movlt	r5, #1
 8007ef4:	f7ff fd40 	bl	8007978 <_Balloc>
 8007ef8:	b920      	cbnz	r0, 8007f04 <__mdiff+0x5c>
 8007efa:	4b2e      	ldr	r3, [pc, #184]	; (8007fb4 <__mdiff+0x10c>)
 8007efc:	4602      	mov	r2, r0
 8007efe:	f240 2145 	movw	r1, #581	; 0x245
 8007f02:	e7e5      	b.n	8007ed0 <__mdiff+0x28>
 8007f04:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007f08:	6926      	ldr	r6, [r4, #16]
 8007f0a:	60c5      	str	r5, [r0, #12]
 8007f0c:	f104 0914 	add.w	r9, r4, #20
 8007f10:	f108 0514 	add.w	r5, r8, #20
 8007f14:	f100 0e14 	add.w	lr, r0, #20
 8007f18:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007f1c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007f20:	f108 0210 	add.w	r2, r8, #16
 8007f24:	46f2      	mov	sl, lr
 8007f26:	2100      	movs	r1, #0
 8007f28:	f859 3b04 	ldr.w	r3, [r9], #4
 8007f2c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007f30:	fa11 f88b 	uxtah	r8, r1, fp
 8007f34:	b299      	uxth	r1, r3
 8007f36:	0c1b      	lsrs	r3, r3, #16
 8007f38:	eba8 0801 	sub.w	r8, r8, r1
 8007f3c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007f40:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007f44:	fa1f f888 	uxth.w	r8, r8
 8007f48:	1419      	asrs	r1, r3, #16
 8007f4a:	454e      	cmp	r6, r9
 8007f4c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007f50:	f84a 3b04 	str.w	r3, [sl], #4
 8007f54:	d8e8      	bhi.n	8007f28 <__mdiff+0x80>
 8007f56:	1b33      	subs	r3, r6, r4
 8007f58:	3b15      	subs	r3, #21
 8007f5a:	f023 0303 	bic.w	r3, r3, #3
 8007f5e:	3304      	adds	r3, #4
 8007f60:	3415      	adds	r4, #21
 8007f62:	42a6      	cmp	r6, r4
 8007f64:	bf38      	it	cc
 8007f66:	2304      	movcc	r3, #4
 8007f68:	441d      	add	r5, r3
 8007f6a:	4473      	add	r3, lr
 8007f6c:	469e      	mov	lr, r3
 8007f6e:	462e      	mov	r6, r5
 8007f70:	4566      	cmp	r6, ip
 8007f72:	d30e      	bcc.n	8007f92 <__mdiff+0xea>
 8007f74:	f10c 0203 	add.w	r2, ip, #3
 8007f78:	1b52      	subs	r2, r2, r5
 8007f7a:	f022 0203 	bic.w	r2, r2, #3
 8007f7e:	3d03      	subs	r5, #3
 8007f80:	45ac      	cmp	ip, r5
 8007f82:	bf38      	it	cc
 8007f84:	2200      	movcc	r2, #0
 8007f86:	4413      	add	r3, r2
 8007f88:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007f8c:	b17a      	cbz	r2, 8007fae <__mdiff+0x106>
 8007f8e:	6107      	str	r7, [r0, #16]
 8007f90:	e7a4      	b.n	8007edc <__mdiff+0x34>
 8007f92:	f856 8b04 	ldr.w	r8, [r6], #4
 8007f96:	fa11 f288 	uxtah	r2, r1, r8
 8007f9a:	1414      	asrs	r4, r2, #16
 8007f9c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007fa0:	b292      	uxth	r2, r2
 8007fa2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007fa6:	f84e 2b04 	str.w	r2, [lr], #4
 8007faa:	1421      	asrs	r1, r4, #16
 8007fac:	e7e0      	b.n	8007f70 <__mdiff+0xc8>
 8007fae:	3f01      	subs	r7, #1
 8007fb0:	e7ea      	b.n	8007f88 <__mdiff+0xe0>
 8007fb2:	bf00      	nop
 8007fb4:	08008c3c 	.word	0x08008c3c
 8007fb8:	08008c4d 	.word	0x08008c4d

08007fbc <__d2b>:
 8007fbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007fc0:	460f      	mov	r7, r1
 8007fc2:	2101      	movs	r1, #1
 8007fc4:	ec59 8b10 	vmov	r8, r9, d0
 8007fc8:	4616      	mov	r6, r2
 8007fca:	f7ff fcd5 	bl	8007978 <_Balloc>
 8007fce:	4604      	mov	r4, r0
 8007fd0:	b930      	cbnz	r0, 8007fe0 <__d2b+0x24>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	4b24      	ldr	r3, [pc, #144]	; (8008068 <__d2b+0xac>)
 8007fd6:	4825      	ldr	r0, [pc, #148]	; (800806c <__d2b+0xb0>)
 8007fd8:	f240 310f 	movw	r1, #783	; 0x30f
 8007fdc:	f000 fc40 	bl	8008860 <__assert_func>
 8007fe0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007fe4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007fe8:	bb2d      	cbnz	r5, 8008036 <__d2b+0x7a>
 8007fea:	9301      	str	r3, [sp, #4]
 8007fec:	f1b8 0300 	subs.w	r3, r8, #0
 8007ff0:	d026      	beq.n	8008040 <__d2b+0x84>
 8007ff2:	4668      	mov	r0, sp
 8007ff4:	9300      	str	r3, [sp, #0]
 8007ff6:	f7ff fd87 	bl	8007b08 <__lo0bits>
 8007ffa:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007ffe:	b1e8      	cbz	r0, 800803c <__d2b+0x80>
 8008000:	f1c0 0320 	rsb	r3, r0, #32
 8008004:	fa02 f303 	lsl.w	r3, r2, r3
 8008008:	430b      	orrs	r3, r1
 800800a:	40c2      	lsrs	r2, r0
 800800c:	6163      	str	r3, [r4, #20]
 800800e:	9201      	str	r2, [sp, #4]
 8008010:	9b01      	ldr	r3, [sp, #4]
 8008012:	61a3      	str	r3, [r4, #24]
 8008014:	2b00      	cmp	r3, #0
 8008016:	bf14      	ite	ne
 8008018:	2202      	movne	r2, #2
 800801a:	2201      	moveq	r2, #1
 800801c:	6122      	str	r2, [r4, #16]
 800801e:	b1bd      	cbz	r5, 8008050 <__d2b+0x94>
 8008020:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008024:	4405      	add	r5, r0
 8008026:	603d      	str	r5, [r7, #0]
 8008028:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800802c:	6030      	str	r0, [r6, #0]
 800802e:	4620      	mov	r0, r4
 8008030:	b003      	add	sp, #12
 8008032:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008036:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800803a:	e7d6      	b.n	8007fea <__d2b+0x2e>
 800803c:	6161      	str	r1, [r4, #20]
 800803e:	e7e7      	b.n	8008010 <__d2b+0x54>
 8008040:	a801      	add	r0, sp, #4
 8008042:	f7ff fd61 	bl	8007b08 <__lo0bits>
 8008046:	9b01      	ldr	r3, [sp, #4]
 8008048:	6163      	str	r3, [r4, #20]
 800804a:	3020      	adds	r0, #32
 800804c:	2201      	movs	r2, #1
 800804e:	e7e5      	b.n	800801c <__d2b+0x60>
 8008050:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008054:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008058:	6038      	str	r0, [r7, #0]
 800805a:	6918      	ldr	r0, [r3, #16]
 800805c:	f7ff fd34 	bl	8007ac8 <__hi0bits>
 8008060:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008064:	e7e2      	b.n	800802c <__d2b+0x70>
 8008066:	bf00      	nop
 8008068:	08008c3c 	.word	0x08008c3c
 800806c:	08008c4d 	.word	0x08008c4d

08008070 <__ssputs_r>:
 8008070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008074:	688e      	ldr	r6, [r1, #8]
 8008076:	461f      	mov	r7, r3
 8008078:	42be      	cmp	r6, r7
 800807a:	680b      	ldr	r3, [r1, #0]
 800807c:	4682      	mov	sl, r0
 800807e:	460c      	mov	r4, r1
 8008080:	4690      	mov	r8, r2
 8008082:	d82c      	bhi.n	80080de <__ssputs_r+0x6e>
 8008084:	898a      	ldrh	r2, [r1, #12]
 8008086:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800808a:	d026      	beq.n	80080da <__ssputs_r+0x6a>
 800808c:	6965      	ldr	r5, [r4, #20]
 800808e:	6909      	ldr	r1, [r1, #16]
 8008090:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008094:	eba3 0901 	sub.w	r9, r3, r1
 8008098:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800809c:	1c7b      	adds	r3, r7, #1
 800809e:	444b      	add	r3, r9
 80080a0:	106d      	asrs	r5, r5, #1
 80080a2:	429d      	cmp	r5, r3
 80080a4:	bf38      	it	cc
 80080a6:	461d      	movcc	r5, r3
 80080a8:	0553      	lsls	r3, r2, #21
 80080aa:	d527      	bpl.n	80080fc <__ssputs_r+0x8c>
 80080ac:	4629      	mov	r1, r5
 80080ae:	f7ff fbd7 	bl	8007860 <_malloc_r>
 80080b2:	4606      	mov	r6, r0
 80080b4:	b360      	cbz	r0, 8008110 <__ssputs_r+0xa0>
 80080b6:	6921      	ldr	r1, [r4, #16]
 80080b8:	464a      	mov	r2, r9
 80080ba:	f7fe fd58 	bl	8006b6e <memcpy>
 80080be:	89a3      	ldrh	r3, [r4, #12]
 80080c0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80080c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080c8:	81a3      	strh	r3, [r4, #12]
 80080ca:	6126      	str	r6, [r4, #16]
 80080cc:	6165      	str	r5, [r4, #20]
 80080ce:	444e      	add	r6, r9
 80080d0:	eba5 0509 	sub.w	r5, r5, r9
 80080d4:	6026      	str	r6, [r4, #0]
 80080d6:	60a5      	str	r5, [r4, #8]
 80080d8:	463e      	mov	r6, r7
 80080da:	42be      	cmp	r6, r7
 80080dc:	d900      	bls.n	80080e0 <__ssputs_r+0x70>
 80080de:	463e      	mov	r6, r7
 80080e0:	6820      	ldr	r0, [r4, #0]
 80080e2:	4632      	mov	r2, r6
 80080e4:	4641      	mov	r1, r8
 80080e6:	f000 fb6f 	bl	80087c8 <memmove>
 80080ea:	68a3      	ldr	r3, [r4, #8]
 80080ec:	1b9b      	subs	r3, r3, r6
 80080ee:	60a3      	str	r3, [r4, #8]
 80080f0:	6823      	ldr	r3, [r4, #0]
 80080f2:	4433      	add	r3, r6
 80080f4:	6023      	str	r3, [r4, #0]
 80080f6:	2000      	movs	r0, #0
 80080f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080fc:	462a      	mov	r2, r5
 80080fe:	f000 fbf5 	bl	80088ec <_realloc_r>
 8008102:	4606      	mov	r6, r0
 8008104:	2800      	cmp	r0, #0
 8008106:	d1e0      	bne.n	80080ca <__ssputs_r+0x5a>
 8008108:	6921      	ldr	r1, [r4, #16]
 800810a:	4650      	mov	r0, sl
 800810c:	f7ff fb34 	bl	8007778 <_free_r>
 8008110:	230c      	movs	r3, #12
 8008112:	f8ca 3000 	str.w	r3, [sl]
 8008116:	89a3      	ldrh	r3, [r4, #12]
 8008118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800811c:	81a3      	strh	r3, [r4, #12]
 800811e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008122:	e7e9      	b.n	80080f8 <__ssputs_r+0x88>

08008124 <_svfiprintf_r>:
 8008124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008128:	4698      	mov	r8, r3
 800812a:	898b      	ldrh	r3, [r1, #12]
 800812c:	061b      	lsls	r3, r3, #24
 800812e:	b09d      	sub	sp, #116	; 0x74
 8008130:	4607      	mov	r7, r0
 8008132:	460d      	mov	r5, r1
 8008134:	4614      	mov	r4, r2
 8008136:	d50e      	bpl.n	8008156 <_svfiprintf_r+0x32>
 8008138:	690b      	ldr	r3, [r1, #16]
 800813a:	b963      	cbnz	r3, 8008156 <_svfiprintf_r+0x32>
 800813c:	2140      	movs	r1, #64	; 0x40
 800813e:	f7ff fb8f 	bl	8007860 <_malloc_r>
 8008142:	6028      	str	r0, [r5, #0]
 8008144:	6128      	str	r0, [r5, #16]
 8008146:	b920      	cbnz	r0, 8008152 <_svfiprintf_r+0x2e>
 8008148:	230c      	movs	r3, #12
 800814a:	603b      	str	r3, [r7, #0]
 800814c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008150:	e0d0      	b.n	80082f4 <_svfiprintf_r+0x1d0>
 8008152:	2340      	movs	r3, #64	; 0x40
 8008154:	616b      	str	r3, [r5, #20]
 8008156:	2300      	movs	r3, #0
 8008158:	9309      	str	r3, [sp, #36]	; 0x24
 800815a:	2320      	movs	r3, #32
 800815c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008160:	f8cd 800c 	str.w	r8, [sp, #12]
 8008164:	2330      	movs	r3, #48	; 0x30
 8008166:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800830c <_svfiprintf_r+0x1e8>
 800816a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800816e:	f04f 0901 	mov.w	r9, #1
 8008172:	4623      	mov	r3, r4
 8008174:	469a      	mov	sl, r3
 8008176:	f813 2b01 	ldrb.w	r2, [r3], #1
 800817a:	b10a      	cbz	r2, 8008180 <_svfiprintf_r+0x5c>
 800817c:	2a25      	cmp	r2, #37	; 0x25
 800817e:	d1f9      	bne.n	8008174 <_svfiprintf_r+0x50>
 8008180:	ebba 0b04 	subs.w	fp, sl, r4
 8008184:	d00b      	beq.n	800819e <_svfiprintf_r+0x7a>
 8008186:	465b      	mov	r3, fp
 8008188:	4622      	mov	r2, r4
 800818a:	4629      	mov	r1, r5
 800818c:	4638      	mov	r0, r7
 800818e:	f7ff ff6f 	bl	8008070 <__ssputs_r>
 8008192:	3001      	adds	r0, #1
 8008194:	f000 80a9 	beq.w	80082ea <_svfiprintf_r+0x1c6>
 8008198:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800819a:	445a      	add	r2, fp
 800819c:	9209      	str	r2, [sp, #36]	; 0x24
 800819e:	f89a 3000 	ldrb.w	r3, [sl]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f000 80a1 	beq.w	80082ea <_svfiprintf_r+0x1c6>
 80081a8:	2300      	movs	r3, #0
 80081aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081b2:	f10a 0a01 	add.w	sl, sl, #1
 80081b6:	9304      	str	r3, [sp, #16]
 80081b8:	9307      	str	r3, [sp, #28]
 80081ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081be:	931a      	str	r3, [sp, #104]	; 0x68
 80081c0:	4654      	mov	r4, sl
 80081c2:	2205      	movs	r2, #5
 80081c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081c8:	4850      	ldr	r0, [pc, #320]	; (800830c <_svfiprintf_r+0x1e8>)
 80081ca:	f7f8 f889 	bl	80002e0 <memchr>
 80081ce:	9a04      	ldr	r2, [sp, #16]
 80081d0:	b9d8      	cbnz	r0, 800820a <_svfiprintf_r+0xe6>
 80081d2:	06d0      	lsls	r0, r2, #27
 80081d4:	bf44      	itt	mi
 80081d6:	2320      	movmi	r3, #32
 80081d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081dc:	0711      	lsls	r1, r2, #28
 80081de:	bf44      	itt	mi
 80081e0:	232b      	movmi	r3, #43	; 0x2b
 80081e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081e6:	f89a 3000 	ldrb.w	r3, [sl]
 80081ea:	2b2a      	cmp	r3, #42	; 0x2a
 80081ec:	d015      	beq.n	800821a <_svfiprintf_r+0xf6>
 80081ee:	9a07      	ldr	r2, [sp, #28]
 80081f0:	4654      	mov	r4, sl
 80081f2:	2000      	movs	r0, #0
 80081f4:	f04f 0c0a 	mov.w	ip, #10
 80081f8:	4621      	mov	r1, r4
 80081fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081fe:	3b30      	subs	r3, #48	; 0x30
 8008200:	2b09      	cmp	r3, #9
 8008202:	d94d      	bls.n	80082a0 <_svfiprintf_r+0x17c>
 8008204:	b1b0      	cbz	r0, 8008234 <_svfiprintf_r+0x110>
 8008206:	9207      	str	r2, [sp, #28]
 8008208:	e014      	b.n	8008234 <_svfiprintf_r+0x110>
 800820a:	eba0 0308 	sub.w	r3, r0, r8
 800820e:	fa09 f303 	lsl.w	r3, r9, r3
 8008212:	4313      	orrs	r3, r2
 8008214:	9304      	str	r3, [sp, #16]
 8008216:	46a2      	mov	sl, r4
 8008218:	e7d2      	b.n	80081c0 <_svfiprintf_r+0x9c>
 800821a:	9b03      	ldr	r3, [sp, #12]
 800821c:	1d19      	adds	r1, r3, #4
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	9103      	str	r1, [sp, #12]
 8008222:	2b00      	cmp	r3, #0
 8008224:	bfbb      	ittet	lt
 8008226:	425b      	neglt	r3, r3
 8008228:	f042 0202 	orrlt.w	r2, r2, #2
 800822c:	9307      	strge	r3, [sp, #28]
 800822e:	9307      	strlt	r3, [sp, #28]
 8008230:	bfb8      	it	lt
 8008232:	9204      	strlt	r2, [sp, #16]
 8008234:	7823      	ldrb	r3, [r4, #0]
 8008236:	2b2e      	cmp	r3, #46	; 0x2e
 8008238:	d10c      	bne.n	8008254 <_svfiprintf_r+0x130>
 800823a:	7863      	ldrb	r3, [r4, #1]
 800823c:	2b2a      	cmp	r3, #42	; 0x2a
 800823e:	d134      	bne.n	80082aa <_svfiprintf_r+0x186>
 8008240:	9b03      	ldr	r3, [sp, #12]
 8008242:	1d1a      	adds	r2, r3, #4
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	9203      	str	r2, [sp, #12]
 8008248:	2b00      	cmp	r3, #0
 800824a:	bfb8      	it	lt
 800824c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008250:	3402      	adds	r4, #2
 8008252:	9305      	str	r3, [sp, #20]
 8008254:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800831c <_svfiprintf_r+0x1f8>
 8008258:	7821      	ldrb	r1, [r4, #0]
 800825a:	2203      	movs	r2, #3
 800825c:	4650      	mov	r0, sl
 800825e:	f7f8 f83f 	bl	80002e0 <memchr>
 8008262:	b138      	cbz	r0, 8008274 <_svfiprintf_r+0x150>
 8008264:	9b04      	ldr	r3, [sp, #16]
 8008266:	eba0 000a 	sub.w	r0, r0, sl
 800826a:	2240      	movs	r2, #64	; 0x40
 800826c:	4082      	lsls	r2, r0
 800826e:	4313      	orrs	r3, r2
 8008270:	3401      	adds	r4, #1
 8008272:	9304      	str	r3, [sp, #16]
 8008274:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008278:	4825      	ldr	r0, [pc, #148]	; (8008310 <_svfiprintf_r+0x1ec>)
 800827a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800827e:	2206      	movs	r2, #6
 8008280:	f7f8 f82e 	bl	80002e0 <memchr>
 8008284:	2800      	cmp	r0, #0
 8008286:	d038      	beq.n	80082fa <_svfiprintf_r+0x1d6>
 8008288:	4b22      	ldr	r3, [pc, #136]	; (8008314 <_svfiprintf_r+0x1f0>)
 800828a:	bb1b      	cbnz	r3, 80082d4 <_svfiprintf_r+0x1b0>
 800828c:	9b03      	ldr	r3, [sp, #12]
 800828e:	3307      	adds	r3, #7
 8008290:	f023 0307 	bic.w	r3, r3, #7
 8008294:	3308      	adds	r3, #8
 8008296:	9303      	str	r3, [sp, #12]
 8008298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800829a:	4433      	add	r3, r6
 800829c:	9309      	str	r3, [sp, #36]	; 0x24
 800829e:	e768      	b.n	8008172 <_svfiprintf_r+0x4e>
 80082a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80082a4:	460c      	mov	r4, r1
 80082a6:	2001      	movs	r0, #1
 80082a8:	e7a6      	b.n	80081f8 <_svfiprintf_r+0xd4>
 80082aa:	2300      	movs	r3, #0
 80082ac:	3401      	adds	r4, #1
 80082ae:	9305      	str	r3, [sp, #20]
 80082b0:	4619      	mov	r1, r3
 80082b2:	f04f 0c0a 	mov.w	ip, #10
 80082b6:	4620      	mov	r0, r4
 80082b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082bc:	3a30      	subs	r2, #48	; 0x30
 80082be:	2a09      	cmp	r2, #9
 80082c0:	d903      	bls.n	80082ca <_svfiprintf_r+0x1a6>
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d0c6      	beq.n	8008254 <_svfiprintf_r+0x130>
 80082c6:	9105      	str	r1, [sp, #20]
 80082c8:	e7c4      	b.n	8008254 <_svfiprintf_r+0x130>
 80082ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80082ce:	4604      	mov	r4, r0
 80082d0:	2301      	movs	r3, #1
 80082d2:	e7f0      	b.n	80082b6 <_svfiprintf_r+0x192>
 80082d4:	ab03      	add	r3, sp, #12
 80082d6:	9300      	str	r3, [sp, #0]
 80082d8:	462a      	mov	r2, r5
 80082da:	4b0f      	ldr	r3, [pc, #60]	; (8008318 <_svfiprintf_r+0x1f4>)
 80082dc:	a904      	add	r1, sp, #16
 80082de:	4638      	mov	r0, r7
 80082e0:	f7fd fe62 	bl	8005fa8 <_printf_float>
 80082e4:	1c42      	adds	r2, r0, #1
 80082e6:	4606      	mov	r6, r0
 80082e8:	d1d6      	bne.n	8008298 <_svfiprintf_r+0x174>
 80082ea:	89ab      	ldrh	r3, [r5, #12]
 80082ec:	065b      	lsls	r3, r3, #25
 80082ee:	f53f af2d 	bmi.w	800814c <_svfiprintf_r+0x28>
 80082f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082f4:	b01d      	add	sp, #116	; 0x74
 80082f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082fa:	ab03      	add	r3, sp, #12
 80082fc:	9300      	str	r3, [sp, #0]
 80082fe:	462a      	mov	r2, r5
 8008300:	4b05      	ldr	r3, [pc, #20]	; (8008318 <_svfiprintf_r+0x1f4>)
 8008302:	a904      	add	r1, sp, #16
 8008304:	4638      	mov	r0, r7
 8008306:	f7fe f8d7 	bl	80064b8 <_printf_i>
 800830a:	e7eb      	b.n	80082e4 <_svfiprintf_r+0x1c0>
 800830c:	08008da4 	.word	0x08008da4
 8008310:	08008dae 	.word	0x08008dae
 8008314:	08005fa9 	.word	0x08005fa9
 8008318:	08008071 	.word	0x08008071
 800831c:	08008daa 	.word	0x08008daa

08008320 <__sfputc_r>:
 8008320:	6893      	ldr	r3, [r2, #8]
 8008322:	3b01      	subs	r3, #1
 8008324:	2b00      	cmp	r3, #0
 8008326:	b410      	push	{r4}
 8008328:	6093      	str	r3, [r2, #8]
 800832a:	da08      	bge.n	800833e <__sfputc_r+0x1e>
 800832c:	6994      	ldr	r4, [r2, #24]
 800832e:	42a3      	cmp	r3, r4
 8008330:	db01      	blt.n	8008336 <__sfputc_r+0x16>
 8008332:	290a      	cmp	r1, #10
 8008334:	d103      	bne.n	800833e <__sfputc_r+0x1e>
 8008336:	f85d 4b04 	ldr.w	r4, [sp], #4
 800833a:	f7fe bb04 	b.w	8006946 <__swbuf_r>
 800833e:	6813      	ldr	r3, [r2, #0]
 8008340:	1c58      	adds	r0, r3, #1
 8008342:	6010      	str	r0, [r2, #0]
 8008344:	7019      	strb	r1, [r3, #0]
 8008346:	4608      	mov	r0, r1
 8008348:	f85d 4b04 	ldr.w	r4, [sp], #4
 800834c:	4770      	bx	lr

0800834e <__sfputs_r>:
 800834e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008350:	4606      	mov	r6, r0
 8008352:	460f      	mov	r7, r1
 8008354:	4614      	mov	r4, r2
 8008356:	18d5      	adds	r5, r2, r3
 8008358:	42ac      	cmp	r4, r5
 800835a:	d101      	bne.n	8008360 <__sfputs_r+0x12>
 800835c:	2000      	movs	r0, #0
 800835e:	e007      	b.n	8008370 <__sfputs_r+0x22>
 8008360:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008364:	463a      	mov	r2, r7
 8008366:	4630      	mov	r0, r6
 8008368:	f7ff ffda 	bl	8008320 <__sfputc_r>
 800836c:	1c43      	adds	r3, r0, #1
 800836e:	d1f3      	bne.n	8008358 <__sfputs_r+0xa>
 8008370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008374 <_vfiprintf_r>:
 8008374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008378:	460d      	mov	r5, r1
 800837a:	b09d      	sub	sp, #116	; 0x74
 800837c:	4614      	mov	r4, r2
 800837e:	4698      	mov	r8, r3
 8008380:	4606      	mov	r6, r0
 8008382:	b118      	cbz	r0, 800838c <_vfiprintf_r+0x18>
 8008384:	6a03      	ldr	r3, [r0, #32]
 8008386:	b90b      	cbnz	r3, 800838c <_vfiprintf_r+0x18>
 8008388:	f7fe fa44 	bl	8006814 <__sinit>
 800838c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800838e:	07d9      	lsls	r1, r3, #31
 8008390:	d405      	bmi.n	800839e <_vfiprintf_r+0x2a>
 8008392:	89ab      	ldrh	r3, [r5, #12]
 8008394:	059a      	lsls	r2, r3, #22
 8008396:	d402      	bmi.n	800839e <_vfiprintf_r+0x2a>
 8008398:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800839a:	f7fe fbe6 	bl	8006b6a <__retarget_lock_acquire_recursive>
 800839e:	89ab      	ldrh	r3, [r5, #12]
 80083a0:	071b      	lsls	r3, r3, #28
 80083a2:	d501      	bpl.n	80083a8 <_vfiprintf_r+0x34>
 80083a4:	692b      	ldr	r3, [r5, #16]
 80083a6:	b99b      	cbnz	r3, 80083d0 <_vfiprintf_r+0x5c>
 80083a8:	4629      	mov	r1, r5
 80083aa:	4630      	mov	r0, r6
 80083ac:	f7fe fb08 	bl	80069c0 <__swsetup_r>
 80083b0:	b170      	cbz	r0, 80083d0 <_vfiprintf_r+0x5c>
 80083b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083b4:	07dc      	lsls	r4, r3, #31
 80083b6:	d504      	bpl.n	80083c2 <_vfiprintf_r+0x4e>
 80083b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083bc:	b01d      	add	sp, #116	; 0x74
 80083be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083c2:	89ab      	ldrh	r3, [r5, #12]
 80083c4:	0598      	lsls	r0, r3, #22
 80083c6:	d4f7      	bmi.n	80083b8 <_vfiprintf_r+0x44>
 80083c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083ca:	f7fe fbcf 	bl	8006b6c <__retarget_lock_release_recursive>
 80083ce:	e7f3      	b.n	80083b8 <_vfiprintf_r+0x44>
 80083d0:	2300      	movs	r3, #0
 80083d2:	9309      	str	r3, [sp, #36]	; 0x24
 80083d4:	2320      	movs	r3, #32
 80083d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80083da:	f8cd 800c 	str.w	r8, [sp, #12]
 80083de:	2330      	movs	r3, #48	; 0x30
 80083e0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008594 <_vfiprintf_r+0x220>
 80083e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80083e8:	f04f 0901 	mov.w	r9, #1
 80083ec:	4623      	mov	r3, r4
 80083ee:	469a      	mov	sl, r3
 80083f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083f4:	b10a      	cbz	r2, 80083fa <_vfiprintf_r+0x86>
 80083f6:	2a25      	cmp	r2, #37	; 0x25
 80083f8:	d1f9      	bne.n	80083ee <_vfiprintf_r+0x7a>
 80083fa:	ebba 0b04 	subs.w	fp, sl, r4
 80083fe:	d00b      	beq.n	8008418 <_vfiprintf_r+0xa4>
 8008400:	465b      	mov	r3, fp
 8008402:	4622      	mov	r2, r4
 8008404:	4629      	mov	r1, r5
 8008406:	4630      	mov	r0, r6
 8008408:	f7ff ffa1 	bl	800834e <__sfputs_r>
 800840c:	3001      	adds	r0, #1
 800840e:	f000 80a9 	beq.w	8008564 <_vfiprintf_r+0x1f0>
 8008412:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008414:	445a      	add	r2, fp
 8008416:	9209      	str	r2, [sp, #36]	; 0x24
 8008418:	f89a 3000 	ldrb.w	r3, [sl]
 800841c:	2b00      	cmp	r3, #0
 800841e:	f000 80a1 	beq.w	8008564 <_vfiprintf_r+0x1f0>
 8008422:	2300      	movs	r3, #0
 8008424:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008428:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800842c:	f10a 0a01 	add.w	sl, sl, #1
 8008430:	9304      	str	r3, [sp, #16]
 8008432:	9307      	str	r3, [sp, #28]
 8008434:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008438:	931a      	str	r3, [sp, #104]	; 0x68
 800843a:	4654      	mov	r4, sl
 800843c:	2205      	movs	r2, #5
 800843e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008442:	4854      	ldr	r0, [pc, #336]	; (8008594 <_vfiprintf_r+0x220>)
 8008444:	f7f7 ff4c 	bl	80002e0 <memchr>
 8008448:	9a04      	ldr	r2, [sp, #16]
 800844a:	b9d8      	cbnz	r0, 8008484 <_vfiprintf_r+0x110>
 800844c:	06d1      	lsls	r1, r2, #27
 800844e:	bf44      	itt	mi
 8008450:	2320      	movmi	r3, #32
 8008452:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008456:	0713      	lsls	r3, r2, #28
 8008458:	bf44      	itt	mi
 800845a:	232b      	movmi	r3, #43	; 0x2b
 800845c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008460:	f89a 3000 	ldrb.w	r3, [sl]
 8008464:	2b2a      	cmp	r3, #42	; 0x2a
 8008466:	d015      	beq.n	8008494 <_vfiprintf_r+0x120>
 8008468:	9a07      	ldr	r2, [sp, #28]
 800846a:	4654      	mov	r4, sl
 800846c:	2000      	movs	r0, #0
 800846e:	f04f 0c0a 	mov.w	ip, #10
 8008472:	4621      	mov	r1, r4
 8008474:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008478:	3b30      	subs	r3, #48	; 0x30
 800847a:	2b09      	cmp	r3, #9
 800847c:	d94d      	bls.n	800851a <_vfiprintf_r+0x1a6>
 800847e:	b1b0      	cbz	r0, 80084ae <_vfiprintf_r+0x13a>
 8008480:	9207      	str	r2, [sp, #28]
 8008482:	e014      	b.n	80084ae <_vfiprintf_r+0x13a>
 8008484:	eba0 0308 	sub.w	r3, r0, r8
 8008488:	fa09 f303 	lsl.w	r3, r9, r3
 800848c:	4313      	orrs	r3, r2
 800848e:	9304      	str	r3, [sp, #16]
 8008490:	46a2      	mov	sl, r4
 8008492:	e7d2      	b.n	800843a <_vfiprintf_r+0xc6>
 8008494:	9b03      	ldr	r3, [sp, #12]
 8008496:	1d19      	adds	r1, r3, #4
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	9103      	str	r1, [sp, #12]
 800849c:	2b00      	cmp	r3, #0
 800849e:	bfbb      	ittet	lt
 80084a0:	425b      	neglt	r3, r3
 80084a2:	f042 0202 	orrlt.w	r2, r2, #2
 80084a6:	9307      	strge	r3, [sp, #28]
 80084a8:	9307      	strlt	r3, [sp, #28]
 80084aa:	bfb8      	it	lt
 80084ac:	9204      	strlt	r2, [sp, #16]
 80084ae:	7823      	ldrb	r3, [r4, #0]
 80084b0:	2b2e      	cmp	r3, #46	; 0x2e
 80084b2:	d10c      	bne.n	80084ce <_vfiprintf_r+0x15a>
 80084b4:	7863      	ldrb	r3, [r4, #1]
 80084b6:	2b2a      	cmp	r3, #42	; 0x2a
 80084b8:	d134      	bne.n	8008524 <_vfiprintf_r+0x1b0>
 80084ba:	9b03      	ldr	r3, [sp, #12]
 80084bc:	1d1a      	adds	r2, r3, #4
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	9203      	str	r2, [sp, #12]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	bfb8      	it	lt
 80084c6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80084ca:	3402      	adds	r4, #2
 80084cc:	9305      	str	r3, [sp, #20]
 80084ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80085a4 <_vfiprintf_r+0x230>
 80084d2:	7821      	ldrb	r1, [r4, #0]
 80084d4:	2203      	movs	r2, #3
 80084d6:	4650      	mov	r0, sl
 80084d8:	f7f7 ff02 	bl	80002e0 <memchr>
 80084dc:	b138      	cbz	r0, 80084ee <_vfiprintf_r+0x17a>
 80084de:	9b04      	ldr	r3, [sp, #16]
 80084e0:	eba0 000a 	sub.w	r0, r0, sl
 80084e4:	2240      	movs	r2, #64	; 0x40
 80084e6:	4082      	lsls	r2, r0
 80084e8:	4313      	orrs	r3, r2
 80084ea:	3401      	adds	r4, #1
 80084ec:	9304      	str	r3, [sp, #16]
 80084ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084f2:	4829      	ldr	r0, [pc, #164]	; (8008598 <_vfiprintf_r+0x224>)
 80084f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084f8:	2206      	movs	r2, #6
 80084fa:	f7f7 fef1 	bl	80002e0 <memchr>
 80084fe:	2800      	cmp	r0, #0
 8008500:	d03f      	beq.n	8008582 <_vfiprintf_r+0x20e>
 8008502:	4b26      	ldr	r3, [pc, #152]	; (800859c <_vfiprintf_r+0x228>)
 8008504:	bb1b      	cbnz	r3, 800854e <_vfiprintf_r+0x1da>
 8008506:	9b03      	ldr	r3, [sp, #12]
 8008508:	3307      	adds	r3, #7
 800850a:	f023 0307 	bic.w	r3, r3, #7
 800850e:	3308      	adds	r3, #8
 8008510:	9303      	str	r3, [sp, #12]
 8008512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008514:	443b      	add	r3, r7
 8008516:	9309      	str	r3, [sp, #36]	; 0x24
 8008518:	e768      	b.n	80083ec <_vfiprintf_r+0x78>
 800851a:	fb0c 3202 	mla	r2, ip, r2, r3
 800851e:	460c      	mov	r4, r1
 8008520:	2001      	movs	r0, #1
 8008522:	e7a6      	b.n	8008472 <_vfiprintf_r+0xfe>
 8008524:	2300      	movs	r3, #0
 8008526:	3401      	adds	r4, #1
 8008528:	9305      	str	r3, [sp, #20]
 800852a:	4619      	mov	r1, r3
 800852c:	f04f 0c0a 	mov.w	ip, #10
 8008530:	4620      	mov	r0, r4
 8008532:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008536:	3a30      	subs	r2, #48	; 0x30
 8008538:	2a09      	cmp	r2, #9
 800853a:	d903      	bls.n	8008544 <_vfiprintf_r+0x1d0>
 800853c:	2b00      	cmp	r3, #0
 800853e:	d0c6      	beq.n	80084ce <_vfiprintf_r+0x15a>
 8008540:	9105      	str	r1, [sp, #20]
 8008542:	e7c4      	b.n	80084ce <_vfiprintf_r+0x15a>
 8008544:	fb0c 2101 	mla	r1, ip, r1, r2
 8008548:	4604      	mov	r4, r0
 800854a:	2301      	movs	r3, #1
 800854c:	e7f0      	b.n	8008530 <_vfiprintf_r+0x1bc>
 800854e:	ab03      	add	r3, sp, #12
 8008550:	9300      	str	r3, [sp, #0]
 8008552:	462a      	mov	r2, r5
 8008554:	4b12      	ldr	r3, [pc, #72]	; (80085a0 <_vfiprintf_r+0x22c>)
 8008556:	a904      	add	r1, sp, #16
 8008558:	4630      	mov	r0, r6
 800855a:	f7fd fd25 	bl	8005fa8 <_printf_float>
 800855e:	4607      	mov	r7, r0
 8008560:	1c78      	adds	r0, r7, #1
 8008562:	d1d6      	bne.n	8008512 <_vfiprintf_r+0x19e>
 8008564:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008566:	07d9      	lsls	r1, r3, #31
 8008568:	d405      	bmi.n	8008576 <_vfiprintf_r+0x202>
 800856a:	89ab      	ldrh	r3, [r5, #12]
 800856c:	059a      	lsls	r2, r3, #22
 800856e:	d402      	bmi.n	8008576 <_vfiprintf_r+0x202>
 8008570:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008572:	f7fe fafb 	bl	8006b6c <__retarget_lock_release_recursive>
 8008576:	89ab      	ldrh	r3, [r5, #12]
 8008578:	065b      	lsls	r3, r3, #25
 800857a:	f53f af1d 	bmi.w	80083b8 <_vfiprintf_r+0x44>
 800857e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008580:	e71c      	b.n	80083bc <_vfiprintf_r+0x48>
 8008582:	ab03      	add	r3, sp, #12
 8008584:	9300      	str	r3, [sp, #0]
 8008586:	462a      	mov	r2, r5
 8008588:	4b05      	ldr	r3, [pc, #20]	; (80085a0 <_vfiprintf_r+0x22c>)
 800858a:	a904      	add	r1, sp, #16
 800858c:	4630      	mov	r0, r6
 800858e:	f7fd ff93 	bl	80064b8 <_printf_i>
 8008592:	e7e4      	b.n	800855e <_vfiprintf_r+0x1ea>
 8008594:	08008da4 	.word	0x08008da4
 8008598:	08008dae 	.word	0x08008dae
 800859c:	08005fa9 	.word	0x08005fa9
 80085a0:	0800834f 	.word	0x0800834f
 80085a4:	08008daa 	.word	0x08008daa

080085a8 <__sflush_r>:
 80085a8:	898a      	ldrh	r2, [r1, #12]
 80085aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085ae:	4605      	mov	r5, r0
 80085b0:	0710      	lsls	r0, r2, #28
 80085b2:	460c      	mov	r4, r1
 80085b4:	d458      	bmi.n	8008668 <__sflush_r+0xc0>
 80085b6:	684b      	ldr	r3, [r1, #4]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	dc05      	bgt.n	80085c8 <__sflush_r+0x20>
 80085bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80085be:	2b00      	cmp	r3, #0
 80085c0:	dc02      	bgt.n	80085c8 <__sflush_r+0x20>
 80085c2:	2000      	movs	r0, #0
 80085c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80085ca:	2e00      	cmp	r6, #0
 80085cc:	d0f9      	beq.n	80085c2 <__sflush_r+0x1a>
 80085ce:	2300      	movs	r3, #0
 80085d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80085d4:	682f      	ldr	r7, [r5, #0]
 80085d6:	6a21      	ldr	r1, [r4, #32]
 80085d8:	602b      	str	r3, [r5, #0]
 80085da:	d032      	beq.n	8008642 <__sflush_r+0x9a>
 80085dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80085de:	89a3      	ldrh	r3, [r4, #12]
 80085e0:	075a      	lsls	r2, r3, #29
 80085e2:	d505      	bpl.n	80085f0 <__sflush_r+0x48>
 80085e4:	6863      	ldr	r3, [r4, #4]
 80085e6:	1ac0      	subs	r0, r0, r3
 80085e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80085ea:	b10b      	cbz	r3, 80085f0 <__sflush_r+0x48>
 80085ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80085ee:	1ac0      	subs	r0, r0, r3
 80085f0:	2300      	movs	r3, #0
 80085f2:	4602      	mov	r2, r0
 80085f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80085f6:	6a21      	ldr	r1, [r4, #32]
 80085f8:	4628      	mov	r0, r5
 80085fa:	47b0      	blx	r6
 80085fc:	1c43      	adds	r3, r0, #1
 80085fe:	89a3      	ldrh	r3, [r4, #12]
 8008600:	d106      	bne.n	8008610 <__sflush_r+0x68>
 8008602:	6829      	ldr	r1, [r5, #0]
 8008604:	291d      	cmp	r1, #29
 8008606:	d82b      	bhi.n	8008660 <__sflush_r+0xb8>
 8008608:	4a29      	ldr	r2, [pc, #164]	; (80086b0 <__sflush_r+0x108>)
 800860a:	410a      	asrs	r2, r1
 800860c:	07d6      	lsls	r6, r2, #31
 800860e:	d427      	bmi.n	8008660 <__sflush_r+0xb8>
 8008610:	2200      	movs	r2, #0
 8008612:	6062      	str	r2, [r4, #4]
 8008614:	04d9      	lsls	r1, r3, #19
 8008616:	6922      	ldr	r2, [r4, #16]
 8008618:	6022      	str	r2, [r4, #0]
 800861a:	d504      	bpl.n	8008626 <__sflush_r+0x7e>
 800861c:	1c42      	adds	r2, r0, #1
 800861e:	d101      	bne.n	8008624 <__sflush_r+0x7c>
 8008620:	682b      	ldr	r3, [r5, #0]
 8008622:	b903      	cbnz	r3, 8008626 <__sflush_r+0x7e>
 8008624:	6560      	str	r0, [r4, #84]	; 0x54
 8008626:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008628:	602f      	str	r7, [r5, #0]
 800862a:	2900      	cmp	r1, #0
 800862c:	d0c9      	beq.n	80085c2 <__sflush_r+0x1a>
 800862e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008632:	4299      	cmp	r1, r3
 8008634:	d002      	beq.n	800863c <__sflush_r+0x94>
 8008636:	4628      	mov	r0, r5
 8008638:	f7ff f89e 	bl	8007778 <_free_r>
 800863c:	2000      	movs	r0, #0
 800863e:	6360      	str	r0, [r4, #52]	; 0x34
 8008640:	e7c0      	b.n	80085c4 <__sflush_r+0x1c>
 8008642:	2301      	movs	r3, #1
 8008644:	4628      	mov	r0, r5
 8008646:	47b0      	blx	r6
 8008648:	1c41      	adds	r1, r0, #1
 800864a:	d1c8      	bne.n	80085de <__sflush_r+0x36>
 800864c:	682b      	ldr	r3, [r5, #0]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d0c5      	beq.n	80085de <__sflush_r+0x36>
 8008652:	2b1d      	cmp	r3, #29
 8008654:	d001      	beq.n	800865a <__sflush_r+0xb2>
 8008656:	2b16      	cmp	r3, #22
 8008658:	d101      	bne.n	800865e <__sflush_r+0xb6>
 800865a:	602f      	str	r7, [r5, #0]
 800865c:	e7b1      	b.n	80085c2 <__sflush_r+0x1a>
 800865e:	89a3      	ldrh	r3, [r4, #12]
 8008660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008664:	81a3      	strh	r3, [r4, #12]
 8008666:	e7ad      	b.n	80085c4 <__sflush_r+0x1c>
 8008668:	690f      	ldr	r7, [r1, #16]
 800866a:	2f00      	cmp	r7, #0
 800866c:	d0a9      	beq.n	80085c2 <__sflush_r+0x1a>
 800866e:	0793      	lsls	r3, r2, #30
 8008670:	680e      	ldr	r6, [r1, #0]
 8008672:	bf08      	it	eq
 8008674:	694b      	ldreq	r3, [r1, #20]
 8008676:	600f      	str	r7, [r1, #0]
 8008678:	bf18      	it	ne
 800867a:	2300      	movne	r3, #0
 800867c:	eba6 0807 	sub.w	r8, r6, r7
 8008680:	608b      	str	r3, [r1, #8]
 8008682:	f1b8 0f00 	cmp.w	r8, #0
 8008686:	dd9c      	ble.n	80085c2 <__sflush_r+0x1a>
 8008688:	6a21      	ldr	r1, [r4, #32]
 800868a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800868c:	4643      	mov	r3, r8
 800868e:	463a      	mov	r2, r7
 8008690:	4628      	mov	r0, r5
 8008692:	47b0      	blx	r6
 8008694:	2800      	cmp	r0, #0
 8008696:	dc06      	bgt.n	80086a6 <__sflush_r+0xfe>
 8008698:	89a3      	ldrh	r3, [r4, #12]
 800869a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800869e:	81a3      	strh	r3, [r4, #12]
 80086a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086a4:	e78e      	b.n	80085c4 <__sflush_r+0x1c>
 80086a6:	4407      	add	r7, r0
 80086a8:	eba8 0800 	sub.w	r8, r8, r0
 80086ac:	e7e9      	b.n	8008682 <__sflush_r+0xda>
 80086ae:	bf00      	nop
 80086b0:	dfbffffe 	.word	0xdfbffffe

080086b4 <_fflush_r>:
 80086b4:	b538      	push	{r3, r4, r5, lr}
 80086b6:	690b      	ldr	r3, [r1, #16]
 80086b8:	4605      	mov	r5, r0
 80086ba:	460c      	mov	r4, r1
 80086bc:	b913      	cbnz	r3, 80086c4 <_fflush_r+0x10>
 80086be:	2500      	movs	r5, #0
 80086c0:	4628      	mov	r0, r5
 80086c2:	bd38      	pop	{r3, r4, r5, pc}
 80086c4:	b118      	cbz	r0, 80086ce <_fflush_r+0x1a>
 80086c6:	6a03      	ldr	r3, [r0, #32]
 80086c8:	b90b      	cbnz	r3, 80086ce <_fflush_r+0x1a>
 80086ca:	f7fe f8a3 	bl	8006814 <__sinit>
 80086ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d0f3      	beq.n	80086be <_fflush_r+0xa>
 80086d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80086d8:	07d0      	lsls	r0, r2, #31
 80086da:	d404      	bmi.n	80086e6 <_fflush_r+0x32>
 80086dc:	0599      	lsls	r1, r3, #22
 80086de:	d402      	bmi.n	80086e6 <_fflush_r+0x32>
 80086e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086e2:	f7fe fa42 	bl	8006b6a <__retarget_lock_acquire_recursive>
 80086e6:	4628      	mov	r0, r5
 80086e8:	4621      	mov	r1, r4
 80086ea:	f7ff ff5d 	bl	80085a8 <__sflush_r>
 80086ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80086f0:	07da      	lsls	r2, r3, #31
 80086f2:	4605      	mov	r5, r0
 80086f4:	d4e4      	bmi.n	80086c0 <_fflush_r+0xc>
 80086f6:	89a3      	ldrh	r3, [r4, #12]
 80086f8:	059b      	lsls	r3, r3, #22
 80086fa:	d4e1      	bmi.n	80086c0 <_fflush_r+0xc>
 80086fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086fe:	f7fe fa35 	bl	8006b6c <__retarget_lock_release_recursive>
 8008702:	e7dd      	b.n	80086c0 <_fflush_r+0xc>

08008704 <__swhatbuf_r>:
 8008704:	b570      	push	{r4, r5, r6, lr}
 8008706:	460c      	mov	r4, r1
 8008708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800870c:	2900      	cmp	r1, #0
 800870e:	b096      	sub	sp, #88	; 0x58
 8008710:	4615      	mov	r5, r2
 8008712:	461e      	mov	r6, r3
 8008714:	da0d      	bge.n	8008732 <__swhatbuf_r+0x2e>
 8008716:	89a3      	ldrh	r3, [r4, #12]
 8008718:	f013 0f80 	tst.w	r3, #128	; 0x80
 800871c:	f04f 0100 	mov.w	r1, #0
 8008720:	bf0c      	ite	eq
 8008722:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008726:	2340      	movne	r3, #64	; 0x40
 8008728:	2000      	movs	r0, #0
 800872a:	6031      	str	r1, [r6, #0]
 800872c:	602b      	str	r3, [r5, #0]
 800872e:	b016      	add	sp, #88	; 0x58
 8008730:	bd70      	pop	{r4, r5, r6, pc}
 8008732:	466a      	mov	r2, sp
 8008734:	f000 f862 	bl	80087fc <_fstat_r>
 8008738:	2800      	cmp	r0, #0
 800873a:	dbec      	blt.n	8008716 <__swhatbuf_r+0x12>
 800873c:	9901      	ldr	r1, [sp, #4]
 800873e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008742:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008746:	4259      	negs	r1, r3
 8008748:	4159      	adcs	r1, r3
 800874a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800874e:	e7eb      	b.n	8008728 <__swhatbuf_r+0x24>

08008750 <__smakebuf_r>:
 8008750:	898b      	ldrh	r3, [r1, #12]
 8008752:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008754:	079d      	lsls	r5, r3, #30
 8008756:	4606      	mov	r6, r0
 8008758:	460c      	mov	r4, r1
 800875a:	d507      	bpl.n	800876c <__smakebuf_r+0x1c>
 800875c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008760:	6023      	str	r3, [r4, #0]
 8008762:	6123      	str	r3, [r4, #16]
 8008764:	2301      	movs	r3, #1
 8008766:	6163      	str	r3, [r4, #20]
 8008768:	b002      	add	sp, #8
 800876a:	bd70      	pop	{r4, r5, r6, pc}
 800876c:	ab01      	add	r3, sp, #4
 800876e:	466a      	mov	r2, sp
 8008770:	f7ff ffc8 	bl	8008704 <__swhatbuf_r>
 8008774:	9900      	ldr	r1, [sp, #0]
 8008776:	4605      	mov	r5, r0
 8008778:	4630      	mov	r0, r6
 800877a:	f7ff f871 	bl	8007860 <_malloc_r>
 800877e:	b948      	cbnz	r0, 8008794 <__smakebuf_r+0x44>
 8008780:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008784:	059a      	lsls	r2, r3, #22
 8008786:	d4ef      	bmi.n	8008768 <__smakebuf_r+0x18>
 8008788:	f023 0303 	bic.w	r3, r3, #3
 800878c:	f043 0302 	orr.w	r3, r3, #2
 8008790:	81a3      	strh	r3, [r4, #12]
 8008792:	e7e3      	b.n	800875c <__smakebuf_r+0xc>
 8008794:	89a3      	ldrh	r3, [r4, #12]
 8008796:	6020      	str	r0, [r4, #0]
 8008798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800879c:	81a3      	strh	r3, [r4, #12]
 800879e:	9b00      	ldr	r3, [sp, #0]
 80087a0:	6163      	str	r3, [r4, #20]
 80087a2:	9b01      	ldr	r3, [sp, #4]
 80087a4:	6120      	str	r0, [r4, #16]
 80087a6:	b15b      	cbz	r3, 80087c0 <__smakebuf_r+0x70>
 80087a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087ac:	4630      	mov	r0, r6
 80087ae:	f000 f837 	bl	8008820 <_isatty_r>
 80087b2:	b128      	cbz	r0, 80087c0 <__smakebuf_r+0x70>
 80087b4:	89a3      	ldrh	r3, [r4, #12]
 80087b6:	f023 0303 	bic.w	r3, r3, #3
 80087ba:	f043 0301 	orr.w	r3, r3, #1
 80087be:	81a3      	strh	r3, [r4, #12]
 80087c0:	89a3      	ldrh	r3, [r4, #12]
 80087c2:	431d      	orrs	r5, r3
 80087c4:	81a5      	strh	r5, [r4, #12]
 80087c6:	e7cf      	b.n	8008768 <__smakebuf_r+0x18>

080087c8 <memmove>:
 80087c8:	4288      	cmp	r0, r1
 80087ca:	b510      	push	{r4, lr}
 80087cc:	eb01 0402 	add.w	r4, r1, r2
 80087d0:	d902      	bls.n	80087d8 <memmove+0x10>
 80087d2:	4284      	cmp	r4, r0
 80087d4:	4623      	mov	r3, r4
 80087d6:	d807      	bhi.n	80087e8 <memmove+0x20>
 80087d8:	1e43      	subs	r3, r0, #1
 80087da:	42a1      	cmp	r1, r4
 80087dc:	d008      	beq.n	80087f0 <memmove+0x28>
 80087de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80087e6:	e7f8      	b.n	80087da <memmove+0x12>
 80087e8:	4402      	add	r2, r0
 80087ea:	4601      	mov	r1, r0
 80087ec:	428a      	cmp	r2, r1
 80087ee:	d100      	bne.n	80087f2 <memmove+0x2a>
 80087f0:	bd10      	pop	{r4, pc}
 80087f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80087f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80087fa:	e7f7      	b.n	80087ec <memmove+0x24>

080087fc <_fstat_r>:
 80087fc:	b538      	push	{r3, r4, r5, lr}
 80087fe:	4d07      	ldr	r5, [pc, #28]	; (800881c <_fstat_r+0x20>)
 8008800:	2300      	movs	r3, #0
 8008802:	4604      	mov	r4, r0
 8008804:	4608      	mov	r0, r1
 8008806:	4611      	mov	r1, r2
 8008808:	602b      	str	r3, [r5, #0]
 800880a:	f7f8 fc72 	bl	80010f2 <_fstat>
 800880e:	1c43      	adds	r3, r0, #1
 8008810:	d102      	bne.n	8008818 <_fstat_r+0x1c>
 8008812:	682b      	ldr	r3, [r5, #0]
 8008814:	b103      	cbz	r3, 8008818 <_fstat_r+0x1c>
 8008816:	6023      	str	r3, [r4, #0]
 8008818:	bd38      	pop	{r3, r4, r5, pc}
 800881a:	bf00      	nop
 800881c:	24000474 	.word	0x24000474

08008820 <_isatty_r>:
 8008820:	b538      	push	{r3, r4, r5, lr}
 8008822:	4d06      	ldr	r5, [pc, #24]	; (800883c <_isatty_r+0x1c>)
 8008824:	2300      	movs	r3, #0
 8008826:	4604      	mov	r4, r0
 8008828:	4608      	mov	r0, r1
 800882a:	602b      	str	r3, [r5, #0]
 800882c:	f7f8 fc71 	bl	8001112 <_isatty>
 8008830:	1c43      	adds	r3, r0, #1
 8008832:	d102      	bne.n	800883a <_isatty_r+0x1a>
 8008834:	682b      	ldr	r3, [r5, #0]
 8008836:	b103      	cbz	r3, 800883a <_isatty_r+0x1a>
 8008838:	6023      	str	r3, [r4, #0]
 800883a:	bd38      	pop	{r3, r4, r5, pc}
 800883c:	24000474 	.word	0x24000474

08008840 <_sbrk_r>:
 8008840:	b538      	push	{r3, r4, r5, lr}
 8008842:	4d06      	ldr	r5, [pc, #24]	; (800885c <_sbrk_r+0x1c>)
 8008844:	2300      	movs	r3, #0
 8008846:	4604      	mov	r4, r0
 8008848:	4608      	mov	r0, r1
 800884a:	602b      	str	r3, [r5, #0]
 800884c:	f7f8 fc7a 	bl	8001144 <_sbrk>
 8008850:	1c43      	adds	r3, r0, #1
 8008852:	d102      	bne.n	800885a <_sbrk_r+0x1a>
 8008854:	682b      	ldr	r3, [r5, #0]
 8008856:	b103      	cbz	r3, 800885a <_sbrk_r+0x1a>
 8008858:	6023      	str	r3, [r4, #0]
 800885a:	bd38      	pop	{r3, r4, r5, pc}
 800885c:	24000474 	.word	0x24000474

08008860 <__assert_func>:
 8008860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008862:	4614      	mov	r4, r2
 8008864:	461a      	mov	r2, r3
 8008866:	4b09      	ldr	r3, [pc, #36]	; (800888c <__assert_func+0x2c>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4605      	mov	r5, r0
 800886c:	68d8      	ldr	r0, [r3, #12]
 800886e:	b14c      	cbz	r4, 8008884 <__assert_func+0x24>
 8008870:	4b07      	ldr	r3, [pc, #28]	; (8008890 <__assert_func+0x30>)
 8008872:	9100      	str	r1, [sp, #0]
 8008874:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008878:	4906      	ldr	r1, [pc, #24]	; (8008894 <__assert_func+0x34>)
 800887a:	462b      	mov	r3, r5
 800887c:	f000 f872 	bl	8008964 <fiprintf>
 8008880:	f000 f882 	bl	8008988 <abort>
 8008884:	4b04      	ldr	r3, [pc, #16]	; (8008898 <__assert_func+0x38>)
 8008886:	461c      	mov	r4, r3
 8008888:	e7f3      	b.n	8008872 <__assert_func+0x12>
 800888a:	bf00      	nop
 800888c:	24000068 	.word	0x24000068
 8008890:	08008dbf 	.word	0x08008dbf
 8008894:	08008dcc 	.word	0x08008dcc
 8008898:	08008dfa 	.word	0x08008dfa

0800889c <_calloc_r>:
 800889c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800889e:	fba1 2402 	umull	r2, r4, r1, r2
 80088a2:	b94c      	cbnz	r4, 80088b8 <_calloc_r+0x1c>
 80088a4:	4611      	mov	r1, r2
 80088a6:	9201      	str	r2, [sp, #4]
 80088a8:	f7fe ffda 	bl	8007860 <_malloc_r>
 80088ac:	9a01      	ldr	r2, [sp, #4]
 80088ae:	4605      	mov	r5, r0
 80088b0:	b930      	cbnz	r0, 80088c0 <_calloc_r+0x24>
 80088b2:	4628      	mov	r0, r5
 80088b4:	b003      	add	sp, #12
 80088b6:	bd30      	pop	{r4, r5, pc}
 80088b8:	220c      	movs	r2, #12
 80088ba:	6002      	str	r2, [r0, #0]
 80088bc:	2500      	movs	r5, #0
 80088be:	e7f8      	b.n	80088b2 <_calloc_r+0x16>
 80088c0:	4621      	mov	r1, r4
 80088c2:	f7fe f8d5 	bl	8006a70 <memset>
 80088c6:	e7f4      	b.n	80088b2 <_calloc_r+0x16>

080088c8 <__ascii_mbtowc>:
 80088c8:	b082      	sub	sp, #8
 80088ca:	b901      	cbnz	r1, 80088ce <__ascii_mbtowc+0x6>
 80088cc:	a901      	add	r1, sp, #4
 80088ce:	b142      	cbz	r2, 80088e2 <__ascii_mbtowc+0x1a>
 80088d0:	b14b      	cbz	r3, 80088e6 <__ascii_mbtowc+0x1e>
 80088d2:	7813      	ldrb	r3, [r2, #0]
 80088d4:	600b      	str	r3, [r1, #0]
 80088d6:	7812      	ldrb	r2, [r2, #0]
 80088d8:	1e10      	subs	r0, r2, #0
 80088da:	bf18      	it	ne
 80088dc:	2001      	movne	r0, #1
 80088de:	b002      	add	sp, #8
 80088e0:	4770      	bx	lr
 80088e2:	4610      	mov	r0, r2
 80088e4:	e7fb      	b.n	80088de <__ascii_mbtowc+0x16>
 80088e6:	f06f 0001 	mvn.w	r0, #1
 80088ea:	e7f8      	b.n	80088de <__ascii_mbtowc+0x16>

080088ec <_realloc_r>:
 80088ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088f0:	4680      	mov	r8, r0
 80088f2:	4614      	mov	r4, r2
 80088f4:	460e      	mov	r6, r1
 80088f6:	b921      	cbnz	r1, 8008902 <_realloc_r+0x16>
 80088f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088fc:	4611      	mov	r1, r2
 80088fe:	f7fe bfaf 	b.w	8007860 <_malloc_r>
 8008902:	b92a      	cbnz	r2, 8008910 <_realloc_r+0x24>
 8008904:	f7fe ff38 	bl	8007778 <_free_r>
 8008908:	4625      	mov	r5, r4
 800890a:	4628      	mov	r0, r5
 800890c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008910:	f000 f841 	bl	8008996 <_malloc_usable_size_r>
 8008914:	4284      	cmp	r4, r0
 8008916:	4607      	mov	r7, r0
 8008918:	d802      	bhi.n	8008920 <_realloc_r+0x34>
 800891a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800891e:	d812      	bhi.n	8008946 <_realloc_r+0x5a>
 8008920:	4621      	mov	r1, r4
 8008922:	4640      	mov	r0, r8
 8008924:	f7fe ff9c 	bl	8007860 <_malloc_r>
 8008928:	4605      	mov	r5, r0
 800892a:	2800      	cmp	r0, #0
 800892c:	d0ed      	beq.n	800890a <_realloc_r+0x1e>
 800892e:	42bc      	cmp	r4, r7
 8008930:	4622      	mov	r2, r4
 8008932:	4631      	mov	r1, r6
 8008934:	bf28      	it	cs
 8008936:	463a      	movcs	r2, r7
 8008938:	f7fe f919 	bl	8006b6e <memcpy>
 800893c:	4631      	mov	r1, r6
 800893e:	4640      	mov	r0, r8
 8008940:	f7fe ff1a 	bl	8007778 <_free_r>
 8008944:	e7e1      	b.n	800890a <_realloc_r+0x1e>
 8008946:	4635      	mov	r5, r6
 8008948:	e7df      	b.n	800890a <_realloc_r+0x1e>

0800894a <__ascii_wctomb>:
 800894a:	b149      	cbz	r1, 8008960 <__ascii_wctomb+0x16>
 800894c:	2aff      	cmp	r2, #255	; 0xff
 800894e:	bf85      	ittet	hi
 8008950:	238a      	movhi	r3, #138	; 0x8a
 8008952:	6003      	strhi	r3, [r0, #0]
 8008954:	700a      	strbls	r2, [r1, #0]
 8008956:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800895a:	bf98      	it	ls
 800895c:	2001      	movls	r0, #1
 800895e:	4770      	bx	lr
 8008960:	4608      	mov	r0, r1
 8008962:	4770      	bx	lr

08008964 <fiprintf>:
 8008964:	b40e      	push	{r1, r2, r3}
 8008966:	b503      	push	{r0, r1, lr}
 8008968:	4601      	mov	r1, r0
 800896a:	ab03      	add	r3, sp, #12
 800896c:	4805      	ldr	r0, [pc, #20]	; (8008984 <fiprintf+0x20>)
 800896e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008972:	6800      	ldr	r0, [r0, #0]
 8008974:	9301      	str	r3, [sp, #4]
 8008976:	f7ff fcfd 	bl	8008374 <_vfiprintf_r>
 800897a:	b002      	add	sp, #8
 800897c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008980:	b003      	add	sp, #12
 8008982:	4770      	bx	lr
 8008984:	24000068 	.word	0x24000068

08008988 <abort>:
 8008988:	b508      	push	{r3, lr}
 800898a:	2006      	movs	r0, #6
 800898c:	f000 f834 	bl	80089f8 <raise>
 8008990:	2001      	movs	r0, #1
 8008992:	f7f8 fb5f 	bl	8001054 <_exit>

08008996 <_malloc_usable_size_r>:
 8008996:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800899a:	1f18      	subs	r0, r3, #4
 800899c:	2b00      	cmp	r3, #0
 800899e:	bfbc      	itt	lt
 80089a0:	580b      	ldrlt	r3, [r1, r0]
 80089a2:	18c0      	addlt	r0, r0, r3
 80089a4:	4770      	bx	lr

080089a6 <_raise_r>:
 80089a6:	291f      	cmp	r1, #31
 80089a8:	b538      	push	{r3, r4, r5, lr}
 80089aa:	4604      	mov	r4, r0
 80089ac:	460d      	mov	r5, r1
 80089ae:	d904      	bls.n	80089ba <_raise_r+0x14>
 80089b0:	2316      	movs	r3, #22
 80089b2:	6003      	str	r3, [r0, #0]
 80089b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089b8:	bd38      	pop	{r3, r4, r5, pc}
 80089ba:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80089bc:	b112      	cbz	r2, 80089c4 <_raise_r+0x1e>
 80089be:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80089c2:	b94b      	cbnz	r3, 80089d8 <_raise_r+0x32>
 80089c4:	4620      	mov	r0, r4
 80089c6:	f000 f831 	bl	8008a2c <_getpid_r>
 80089ca:	462a      	mov	r2, r5
 80089cc:	4601      	mov	r1, r0
 80089ce:	4620      	mov	r0, r4
 80089d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089d4:	f000 b818 	b.w	8008a08 <_kill_r>
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d00a      	beq.n	80089f2 <_raise_r+0x4c>
 80089dc:	1c59      	adds	r1, r3, #1
 80089de:	d103      	bne.n	80089e8 <_raise_r+0x42>
 80089e0:	2316      	movs	r3, #22
 80089e2:	6003      	str	r3, [r0, #0]
 80089e4:	2001      	movs	r0, #1
 80089e6:	e7e7      	b.n	80089b8 <_raise_r+0x12>
 80089e8:	2400      	movs	r4, #0
 80089ea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80089ee:	4628      	mov	r0, r5
 80089f0:	4798      	blx	r3
 80089f2:	2000      	movs	r0, #0
 80089f4:	e7e0      	b.n	80089b8 <_raise_r+0x12>
	...

080089f8 <raise>:
 80089f8:	4b02      	ldr	r3, [pc, #8]	; (8008a04 <raise+0xc>)
 80089fa:	4601      	mov	r1, r0
 80089fc:	6818      	ldr	r0, [r3, #0]
 80089fe:	f7ff bfd2 	b.w	80089a6 <_raise_r>
 8008a02:	bf00      	nop
 8008a04:	24000068 	.word	0x24000068

08008a08 <_kill_r>:
 8008a08:	b538      	push	{r3, r4, r5, lr}
 8008a0a:	4d07      	ldr	r5, [pc, #28]	; (8008a28 <_kill_r+0x20>)
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	4604      	mov	r4, r0
 8008a10:	4608      	mov	r0, r1
 8008a12:	4611      	mov	r1, r2
 8008a14:	602b      	str	r3, [r5, #0]
 8008a16:	f7f8 fb0d 	bl	8001034 <_kill>
 8008a1a:	1c43      	adds	r3, r0, #1
 8008a1c:	d102      	bne.n	8008a24 <_kill_r+0x1c>
 8008a1e:	682b      	ldr	r3, [r5, #0]
 8008a20:	b103      	cbz	r3, 8008a24 <_kill_r+0x1c>
 8008a22:	6023      	str	r3, [r4, #0]
 8008a24:	bd38      	pop	{r3, r4, r5, pc}
 8008a26:	bf00      	nop
 8008a28:	24000474 	.word	0x24000474

08008a2c <_getpid_r>:
 8008a2c:	f7f8 bafa 	b.w	8001024 <_getpid>

08008a30 <_init>:
 8008a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a32:	bf00      	nop
 8008a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a36:	bc08      	pop	{r3}
 8008a38:	469e      	mov	lr, r3
 8008a3a:	4770      	bx	lr

08008a3c <_fini>:
 8008a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a3e:	bf00      	nop
 8008a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a42:	bc08      	pop	{r3}
 8008a44:	469e      	mov	lr, r3
 8008a46:	4770      	bx	lr
